
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009140  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f8  080092f8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  080092f8  080092f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009300  08009300  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08009308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000050  08009354  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08009354  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001139d  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3f  00000000  00000000  00031419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00033358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  000342f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c4c  00000000  00000000  000351f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d8a  00000000  00000000  0004be44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091612  00000000  00000000  0005dbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef1e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004390  00000000  00000000  000ef230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000050 	.word	0x20000050
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092c0 	.word	0x080092c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000054 	.word	0x20000054
 80001d4:	080092c0 	.word	0x080092c0

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b974 	b.w	80006f4 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468e      	mov	lr, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d14d      	bne.n	80004ce <__udivmoddi4+0xaa>
 8000432:	428a      	cmp	r2, r1
 8000434:	4694      	mov	ip, r2
 8000436:	d969      	bls.n	800050c <__udivmoddi4+0xe8>
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	b152      	cbz	r2, 8000454 <__udivmoddi4+0x30>
 800043e:	fa01 f302 	lsl.w	r3, r1, r2
 8000442:	f1c2 0120 	rsb	r1, r2, #32
 8000446:	fa20 f101 	lsr.w	r1, r0, r1
 800044a:	fa0c fc02 	lsl.w	ip, ip, r2
 800044e:	ea41 0e03 	orr.w	lr, r1, r3
 8000452:	4094      	lsls	r4, r2
 8000454:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000458:	0c21      	lsrs	r1, r4, #16
 800045a:	fbbe f6f8 	udiv	r6, lr, r8
 800045e:	fa1f f78c 	uxth.w	r7, ip
 8000462:	fb08 e316 	mls	r3, r8, r6, lr
 8000466:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800046a:	fb06 f107 	mul.w	r1, r6, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d90a      	bls.n	8000488 <__udivmoddi4+0x64>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f106 30ff 	add.w	r0, r6, #4294967295
 800047a:	f080 811f 	bcs.w	80006bc <__udivmoddi4+0x298>
 800047e:	4299      	cmp	r1, r3
 8000480:	f240 811c 	bls.w	80006bc <__udivmoddi4+0x298>
 8000484:	3e02      	subs	r6, #2
 8000486:	4463      	add	r3, ip
 8000488:	1a5b      	subs	r3, r3, r1
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3310 	mls	r3, r8, r0, r3
 8000494:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000498:	fb00 f707 	mul.w	r7, r0, r7
 800049c:	42a7      	cmp	r7, r4
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x92>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a8:	f080 810a 	bcs.w	80006c0 <__udivmoddi4+0x29c>
 80004ac:	42a7      	cmp	r7, r4
 80004ae:	f240 8107 	bls.w	80006c0 <__udivmoddi4+0x29c>
 80004b2:	4464      	add	r4, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ba:	1be4      	subs	r4, r4, r7
 80004bc:	2600      	movs	r6, #0
 80004be:	b11d      	cbz	r5, 80004c8 <__udivmoddi4+0xa4>
 80004c0:	40d4      	lsrs	r4, r2
 80004c2:	2300      	movs	r3, #0
 80004c4:	e9c5 4300 	strd	r4, r3, [r5]
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	428b      	cmp	r3, r1
 80004d0:	d909      	bls.n	80004e6 <__udivmoddi4+0xc2>
 80004d2:	2d00      	cmp	r5, #0
 80004d4:	f000 80ef 	beq.w	80006b6 <__udivmoddi4+0x292>
 80004d8:	2600      	movs	r6, #0
 80004da:	e9c5 0100 	strd	r0, r1, [r5]
 80004de:	4630      	mov	r0, r6
 80004e0:	4631      	mov	r1, r6
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	fab3 f683 	clz	r6, r3
 80004ea:	2e00      	cmp	r6, #0
 80004ec:	d14a      	bne.n	8000584 <__udivmoddi4+0x160>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d302      	bcc.n	80004f8 <__udivmoddi4+0xd4>
 80004f2:	4282      	cmp	r2, r0
 80004f4:	f200 80f9 	bhi.w	80006ea <__udivmoddi4+0x2c6>
 80004f8:	1a84      	subs	r4, r0, r2
 80004fa:	eb61 0303 	sbc.w	r3, r1, r3
 80004fe:	2001      	movs	r0, #1
 8000500:	469e      	mov	lr, r3
 8000502:	2d00      	cmp	r5, #0
 8000504:	d0e0      	beq.n	80004c8 <__udivmoddi4+0xa4>
 8000506:	e9c5 4e00 	strd	r4, lr, [r5]
 800050a:	e7dd      	b.n	80004c8 <__udivmoddi4+0xa4>
 800050c:	b902      	cbnz	r2, 8000510 <__udivmoddi4+0xec>
 800050e:	deff      	udf	#255	; 0xff
 8000510:	fab2 f282 	clz	r2, r2
 8000514:	2a00      	cmp	r2, #0
 8000516:	f040 8092 	bne.w	800063e <__udivmoddi4+0x21a>
 800051a:	eba1 010c 	sub.w	r1, r1, ip
 800051e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000522:	fa1f fe8c 	uxth.w	lr, ip
 8000526:	2601      	movs	r6, #1
 8000528:	0c20      	lsrs	r0, r4, #16
 800052a:	fbb1 f3f7 	udiv	r3, r1, r7
 800052e:	fb07 1113 	mls	r1, r7, r3, r1
 8000532:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000536:	fb0e f003 	mul.w	r0, lr, r3
 800053a:	4288      	cmp	r0, r1
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x12c>
 800053e:	eb1c 0101 	adds.w	r1, ip, r1
 8000542:	f103 38ff 	add.w	r8, r3, #4294967295
 8000546:	d202      	bcs.n	800054e <__udivmoddi4+0x12a>
 8000548:	4288      	cmp	r0, r1
 800054a:	f200 80cb 	bhi.w	80006e4 <__udivmoddi4+0x2c0>
 800054e:	4643      	mov	r3, r8
 8000550:	1a09      	subs	r1, r1, r0
 8000552:	b2a4      	uxth	r4, r4
 8000554:	fbb1 f0f7 	udiv	r0, r1, r7
 8000558:	fb07 1110 	mls	r1, r7, r0, r1
 800055c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000560:	fb0e fe00 	mul.w	lr, lr, r0
 8000564:	45a6      	cmp	lr, r4
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x156>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000570:	d202      	bcs.n	8000578 <__udivmoddi4+0x154>
 8000572:	45a6      	cmp	lr, r4
 8000574:	f200 80bb 	bhi.w	80006ee <__udivmoddi4+0x2ca>
 8000578:	4608      	mov	r0, r1
 800057a:	eba4 040e 	sub.w	r4, r4, lr
 800057e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000582:	e79c      	b.n	80004be <__udivmoddi4+0x9a>
 8000584:	f1c6 0720 	rsb	r7, r6, #32
 8000588:	40b3      	lsls	r3, r6
 800058a:	fa22 fc07 	lsr.w	ip, r2, r7
 800058e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000592:	fa20 f407 	lsr.w	r4, r0, r7
 8000596:	fa01 f306 	lsl.w	r3, r1, r6
 800059a:	431c      	orrs	r4, r3
 800059c:	40f9      	lsrs	r1, r7
 800059e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005a2:	fa00 f306 	lsl.w	r3, r0, r6
 80005a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005aa:	0c20      	lsrs	r0, r4, #16
 80005ac:	fa1f fe8c 	uxth.w	lr, ip
 80005b0:	fb09 1118 	mls	r1, r9, r8, r1
 80005b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005b8:	fb08 f00e 	mul.w	r0, r8, lr
 80005bc:	4288      	cmp	r0, r1
 80005be:	fa02 f206 	lsl.w	r2, r2, r6
 80005c2:	d90b      	bls.n	80005dc <__udivmoddi4+0x1b8>
 80005c4:	eb1c 0101 	adds.w	r1, ip, r1
 80005c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80005cc:	f080 8088 	bcs.w	80006e0 <__udivmoddi4+0x2bc>
 80005d0:	4288      	cmp	r0, r1
 80005d2:	f240 8085 	bls.w	80006e0 <__udivmoddi4+0x2bc>
 80005d6:	f1a8 0802 	sub.w	r8, r8, #2
 80005da:	4461      	add	r1, ip
 80005dc:	1a09      	subs	r1, r1, r0
 80005de:	b2a4      	uxth	r4, r4
 80005e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80005e4:	fb09 1110 	mls	r1, r9, r0, r1
 80005e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80005f0:	458e      	cmp	lr, r1
 80005f2:	d908      	bls.n	8000606 <__udivmoddi4+0x1e2>
 80005f4:	eb1c 0101 	adds.w	r1, ip, r1
 80005f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005fc:	d26c      	bcs.n	80006d8 <__udivmoddi4+0x2b4>
 80005fe:	458e      	cmp	lr, r1
 8000600:	d96a      	bls.n	80006d8 <__udivmoddi4+0x2b4>
 8000602:	3802      	subs	r0, #2
 8000604:	4461      	add	r1, ip
 8000606:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800060a:	fba0 9402 	umull	r9, r4, r0, r2
 800060e:	eba1 010e 	sub.w	r1, r1, lr
 8000612:	42a1      	cmp	r1, r4
 8000614:	46c8      	mov	r8, r9
 8000616:	46a6      	mov	lr, r4
 8000618:	d356      	bcc.n	80006c8 <__udivmoddi4+0x2a4>
 800061a:	d053      	beq.n	80006c4 <__udivmoddi4+0x2a0>
 800061c:	b15d      	cbz	r5, 8000636 <__udivmoddi4+0x212>
 800061e:	ebb3 0208 	subs.w	r2, r3, r8
 8000622:	eb61 010e 	sbc.w	r1, r1, lr
 8000626:	fa01 f707 	lsl.w	r7, r1, r7
 800062a:	fa22 f306 	lsr.w	r3, r2, r6
 800062e:	40f1      	lsrs	r1, r6
 8000630:	431f      	orrs	r7, r3
 8000632:	e9c5 7100 	strd	r7, r1, [r5]
 8000636:	2600      	movs	r6, #0
 8000638:	4631      	mov	r1, r6
 800063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063e:	f1c2 0320 	rsb	r3, r2, #32
 8000642:	40d8      	lsrs	r0, r3
 8000644:	fa0c fc02 	lsl.w	ip, ip, r2
 8000648:	fa21 f303 	lsr.w	r3, r1, r3
 800064c:	4091      	lsls	r1, r2
 800064e:	4301      	orrs	r1, r0
 8000650:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000654:	fa1f fe8c 	uxth.w	lr, ip
 8000658:	fbb3 f0f7 	udiv	r0, r3, r7
 800065c:	fb07 3610 	mls	r6, r7, r0, r3
 8000660:	0c0b      	lsrs	r3, r1, #16
 8000662:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000666:	fb00 f60e 	mul.w	r6, r0, lr
 800066a:	429e      	cmp	r6, r3
 800066c:	fa04 f402 	lsl.w	r4, r4, r2
 8000670:	d908      	bls.n	8000684 <__udivmoddi4+0x260>
 8000672:	eb1c 0303 	adds.w	r3, ip, r3
 8000676:	f100 38ff 	add.w	r8, r0, #4294967295
 800067a:	d22f      	bcs.n	80006dc <__udivmoddi4+0x2b8>
 800067c:	429e      	cmp	r6, r3
 800067e:	d92d      	bls.n	80006dc <__udivmoddi4+0x2b8>
 8000680:	3802      	subs	r0, #2
 8000682:	4463      	add	r3, ip
 8000684:	1b9b      	subs	r3, r3, r6
 8000686:	b289      	uxth	r1, r1
 8000688:	fbb3 f6f7 	udiv	r6, r3, r7
 800068c:	fb07 3316 	mls	r3, r7, r6, r3
 8000690:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000694:	fb06 f30e 	mul.w	r3, r6, lr
 8000698:	428b      	cmp	r3, r1
 800069a:	d908      	bls.n	80006ae <__udivmoddi4+0x28a>
 800069c:	eb1c 0101 	adds.w	r1, ip, r1
 80006a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80006a4:	d216      	bcs.n	80006d4 <__udivmoddi4+0x2b0>
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d914      	bls.n	80006d4 <__udivmoddi4+0x2b0>
 80006aa:	3e02      	subs	r6, #2
 80006ac:	4461      	add	r1, ip
 80006ae:	1ac9      	subs	r1, r1, r3
 80006b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006b4:	e738      	b.n	8000528 <__udivmoddi4+0x104>
 80006b6:	462e      	mov	r6, r5
 80006b8:	4628      	mov	r0, r5
 80006ba:	e705      	b.n	80004c8 <__udivmoddi4+0xa4>
 80006bc:	4606      	mov	r6, r0
 80006be:	e6e3      	b.n	8000488 <__udivmoddi4+0x64>
 80006c0:	4618      	mov	r0, r3
 80006c2:	e6f8      	b.n	80004b6 <__udivmoddi4+0x92>
 80006c4:	454b      	cmp	r3, r9
 80006c6:	d2a9      	bcs.n	800061c <__udivmoddi4+0x1f8>
 80006c8:	ebb9 0802 	subs.w	r8, r9, r2
 80006cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006d0:	3801      	subs	r0, #1
 80006d2:	e7a3      	b.n	800061c <__udivmoddi4+0x1f8>
 80006d4:	4646      	mov	r6, r8
 80006d6:	e7ea      	b.n	80006ae <__udivmoddi4+0x28a>
 80006d8:	4620      	mov	r0, r4
 80006da:	e794      	b.n	8000606 <__udivmoddi4+0x1e2>
 80006dc:	4640      	mov	r0, r8
 80006de:	e7d1      	b.n	8000684 <__udivmoddi4+0x260>
 80006e0:	46d0      	mov	r8, sl
 80006e2:	e77b      	b.n	80005dc <__udivmoddi4+0x1b8>
 80006e4:	3b02      	subs	r3, #2
 80006e6:	4461      	add	r1, ip
 80006e8:	e732      	b.n	8000550 <__udivmoddi4+0x12c>
 80006ea:	4630      	mov	r0, r6
 80006ec:	e709      	b.n	8000502 <__udivmoddi4+0xde>
 80006ee:	4464      	add	r4, ip
 80006f0:	3802      	subs	r0, #2
 80006f2:	e742      	b.n	800057a <__udivmoddi4+0x156>

080006f4 <__aeabi_idiv0>:
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop

080006f8 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
///////////////////// [UART UI Base System] /////////////////////
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a3d      	ldr	r2, [pc, #244]	; (8000800 <HAL_UARTEx_RxEventCallback+0x108>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d173      	bne.n	80007f6 <HAL_UARTEx_RxEventCallback+0xfe>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000710:	881a      	ldrh	r2, [r3, #0]
 8000712:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <HAL_UARTEx_RxEventCallback+0x110>)
 8000714:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000716:	4a3d      	ldr	r2, [pc, #244]	; (800080c <HAL_UARTEx_RxEventCallback+0x114>)
 8000718:	887b      	ldrh	r3, [r7, #2]
 800071a:	8013      	strh	r3, [r2, #0]
		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 800071c:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <HAL_UARTEx_RxEventCallback+0x110>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	887b      	ldrh	r3, [r7, #2]
 8000724:	4413      	add	r3, r2
 8000726:	2b20      	cmp	r3, #32
 8000728:	dd22      	ble.n	8000770 <HAL_UARTEx_RxEventCallback+0x78>
		{
			uint16_t datatocopy = MainBuf_SIZE - oldPos_uart;  // find out how much space is left in the main buffer
 800072a:	4b37      	ldr	r3, [pc, #220]	; (8000808 <HAL_UARTEx_RxEventCallback+0x110>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	f1c3 0320 	rsb	r3, r3, #32
 8000732:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, datatocopy);  // copy data in that remaining space
 8000734:	4b34      	ldr	r3, [pc, #208]	; (8000808 <HAL_UARTEx_RxEventCallback+0x110>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b35      	ldr	r3, [pc, #212]	; (8000810 <HAL_UARTEx_RxEventCallback+0x118>)
 800073c:	4413      	add	r3, r2
 800073e:	89fa      	ldrh	r2, [r7, #14]
 8000740:	4934      	ldr	r1, [pc, #208]	; (8000814 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000742:	4618      	mov	r0, r3
 8000744:	f008 fda6 	bl	8009294 <memcpy>

			oldPos_uart = 0;  // point to the start of the buffer
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <HAL_UARTEx_RxEventCallback+0x110>)
 800074a:	2200      	movs	r2, #0
 800074c:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 800074e:	89fb      	ldrh	r3, [r7, #14]
 8000750:	4a30      	ldr	r2, [pc, #192]	; (8000814 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000752:	1899      	adds	r1, r3, r2
 8000754:	887a      	ldrh	r2, [r7, #2]
 8000756:	89fb      	ldrh	r3, [r7, #14]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	461a      	mov	r2, r3
 800075c:	482c      	ldr	r0, [pc, #176]	; (8000810 <HAL_UARTEx_RxEventCallback+0x118>)
 800075e:	f008 fd99 	bl	8009294 <memcpy>
			newPos_uart = (Size-datatocopy);  // update the position
 8000762:	887a      	ldrh	r2, [r7, #2]
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <HAL_UARTEx_RxEventCallback+0x10c>)
 800076c:	801a      	strh	r2, [r3, #0]
 800076e:	e010      	b.n	8000792 <HAL_UARTEx_RxEventCallback+0x9a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <HAL_UARTEx_RxEventCallback+0x110>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <HAL_UARTEx_RxEventCallback+0x118>)
 8000778:	4413      	add	r3, r2
 800077a:	887a      	ldrh	r2, [r7, #2]
 800077c:	4925      	ldr	r1, [pc, #148]	; (8000814 <HAL_UARTEx_RxEventCallback+0x11c>)
 800077e:	4618      	mov	r0, r3
 8000780:	f008 fd88 	bl	8009294 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <HAL_UARTEx_RxEventCallback+0x110>)
 8000786:	881a      	ldrh	r2, [r3, #0]
 8000788:	887b      	ldrh	r3, [r7, #2]
 800078a:	4413      	add	r3, r2
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000790:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <HAL_UARTEx_RxEventCallback+0x114>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <HAL_UARTEx_RxEventCallback+0x118>)
 80007a0:	5cd2      	ldrb	r2, [r2, r3]
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_UARTEx_RxEventCallback+0x120>)
 80007a4:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_UARTEx_RxEventCallback+0x120>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	091b      	lsrs	r3, r3, #4
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <HAL_UARTEx_RxEventCallback+0x124>)
 80007b0:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_UARTEx_RxEventCallback+0x120>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_UARTEx_RxEventCallback+0x128>)
 80007be:	701a      	strb	r2, [r3, #0]

		if (chkStart == 9){ // 0b1001
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <HAL_UARTEx_RxEventCallback+0x124>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b09      	cmp	r3, #9
 80007c6:	d109      	bne.n	80007dc <HAL_UARTEx_RxEventCallback+0xe4>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_UARTEx_RxEventCallback+0x128>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <HAL_UARTEx_RxEventCallback+0xe4>
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_UARTEx_RxEventCallback+0x128>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b0e      	cmp	r3, #14
 80007d6:	d801      	bhi.n	80007dc <HAL_UARTEx_RxEventCallback+0xe4>
				All_mode_UARTUI();
 80007d8:	f000 f828 	bl	800082c <All_mode_UARTUI>
			}
		}

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 80007dc:	2220      	movs	r2, #32
 80007de:	490d      	ldr	r1, [pc, #52]	; (8000814 <HAL_UARTEx_RxEventCallback+0x11c>)
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <HAL_UARTEx_RxEventCallback+0x12c>)
 80007e2:	f007 fbde 	bl	8007fa2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_UARTEx_RxEventCallback+0x130>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_UARTEx_RxEventCallback+0x130>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f022 0208 	bic.w	r2, r2, #8
 80007f4:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40004400 	.word	0x40004400
 8000804:	200003f2 	.word	0x200003f2
 8000808:	200003f0 	.word	0x200003f0
 800080c:	2000040a 	.word	0x2000040a
 8000810:	200003d0 	.word	0x200003d0
 8000814:	200003b0 	.word	0x200003b0
 8000818:	2000040e 	.word	0x2000040e
 800081c:	2000040c 	.word	0x2000040c
 8000820:	2000040d 	.word	0x2000040d
 8000824:	2000024c 	.word	0x2000024c
 8000828:	20000290 	.word	0x20000290

0800082c <All_mode_UARTUI>:

void All_mode_UARTUI()
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	// NameM => 15 mode
		switch (NameM){
 8000832:	4b89      	ldr	r3, [pc, #548]	; (8000a58 <All_mode_UARTUI+0x22c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	3b01      	subs	r3, #1
 8000838:	2b0d      	cmp	r3, #13
 800083a:	f200 82ff 	bhi.w	8000e3c <All_mode_UARTUI+0x610>
 800083e:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <All_mode_UARTUI+0x18>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	0800087d 	.word	0x0800087d
 8000848:	080008e7 	.word	0x080008e7
 800084c:	08000925 	.word	0x08000925
 8000850:	08000963 	.word	0x08000963
 8000854:	080009dd 	.word	0x080009dd
 8000858:	08000a91 	.word	0x08000a91
 800085c:	08000b0b 	.word	0x08000b0b
 8000860:	08000bbd 	.word	0x08000bbd
 8000864:	08000c09 	.word	0x08000c09
 8000868:	08000c55 	.word	0x08000c55
 800086c:	08000ca1 	.word	0x08000ca1
 8000870:	08000d41 	.word	0x08000d41
 8000874:	08000d83 	.word	0x08000d83
 8000878:	08000dcb 	.word	0x08000dcb
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 800087c:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <All_mode_UARTUI+0x230>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	3b01      	subs	r3, #1
 8000882:	4a77      	ldr	r2, [pc, #476]	; (8000a60 <All_mode_UARTUI+0x234>)
 8000884:	5cd2      	ldrb	r2, [r2, r3]
 8000886:	4b77      	ldr	r3, [pc, #476]	; (8000a64 <All_mode_UARTUI+0x238>)
 8000888:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 800088a:	4b74      	ldr	r3, [pc, #464]	; (8000a5c <All_mode_UARTUI+0x230>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	3b02      	subs	r3, #2
 8000890:	4a73      	ldr	r2, [pc, #460]	; (8000a60 <All_mode_UARTUI+0x234>)
 8000892:	5cd2      	ldrb	r2, [r2, r3]
 8000894:	4b74      	ldr	r3, [pc, #464]	; (8000a68 <All_mode_UARTUI+0x23c>)
 8000896:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 8000898:	4b70      	ldr	r3, [pc, #448]	; (8000a5c <All_mode_UARTUI+0x230>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	3b03      	subs	r3, #3
 800089e:	4a70      	ldr	r2, [pc, #448]	; (8000a60 <All_mode_UARTUI+0x234>)
 80008a0:	5cd2      	ldrb	r2, [r2, r3]
 80008a2:	4b72      	ldr	r3, [pc, #456]	; (8000a6c <All_mode_UARTUI+0x240>)
 80008a4:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 80008a6:	4b72      	ldr	r3, [pc, #456]	; (8000a70 <All_mode_UARTUI+0x244>)
 80008a8:	781a      	ldrb	r2, [r3, #0]
 80008aa:	4b70      	ldr	r3, [pc, #448]	; (8000a6c <All_mode_UARTUI+0x240>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b6d      	ldr	r3, [pc, #436]	; (8000a68 <All_mode_UARTUI+0x23c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b6d      	ldr	r3, [pc, #436]	; (8000a74 <All_mode_UARTUI+0x248>)
 80008c0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80008c2:	4b68      	ldr	r3, [pc, #416]	; (8000a64 <All_mode_UARTUI+0x238>)
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	4b6b      	ldr	r3, [pc, #428]	; (8000a74 <All_mode_UARTUI+0x248>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	f040 829b 	bne.w	8000e06 <All_mode_UARTUI+0x5da>
					M_state = 1;
 80008d0:	4b69      	ldr	r3, [pc, #420]	; (8000a78 <All_mode_UARTUI+0x24c>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 80008d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008da:	2202      	movs	r2, #2
 80008dc:	4967      	ldr	r1, [pc, #412]	; (8000a7c <All_mode_UARTUI+0x250>)
 80008de:	4868      	ldr	r0, [pc, #416]	; (8000a80 <All_mode_UARTUI+0x254>)
 80008e0:	f007 facd 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 80008e4:	e28f      	b.n	8000e06 <All_mode_UARTUI+0x5da>
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 80008e6:	4b5d      	ldr	r3, [pc, #372]	; (8000a5c <All_mode_UARTUI+0x230>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	4a5c      	ldr	r2, [pc, #368]	; (8000a60 <All_mode_UARTUI+0x234>)
 80008ee:	5cd2      	ldrb	r2, [r2, r3]
 80008f0:	4b5c      	ldr	r3, [pc, #368]	; (8000a64 <All_mode_UARTUI+0x238>)
 80008f2:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80008f4:	4b5e      	ldr	r3, [pc, #376]	; (8000a70 <All_mode_UARTUI+0x244>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	43db      	mvns	r3, r3
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b61      	ldr	r3, [pc, #388]	; (8000a84 <All_mode_UARTUI+0x258>)
 80008fe:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000900:	4b58      	ldr	r3, [pc, #352]	; (8000a64 <All_mode_UARTUI+0x238>)
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b5f      	ldr	r3, [pc, #380]	; (8000a84 <All_mode_UARTUI+0x258>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	f040 827e 	bne.w	8000e0a <All_mode_UARTUI+0x5de>
					M_state = 2;
 800090e:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <All_mode_UARTUI+0x24c>)
 8000910:	2202      	movs	r2, #2
 8000912:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000918:	2202      	movs	r2, #2
 800091a:	4958      	ldr	r1, [pc, #352]	; (8000a7c <All_mode_UARTUI+0x250>)
 800091c:	4858      	ldr	r0, [pc, #352]	; (8000a80 <All_mode_UARTUI+0x254>)
 800091e:	f007 faae 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000922:	e272      	b.n	8000e0a <All_mode_UARTUI+0x5de>
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 8000924:	4b4d      	ldr	r3, [pc, #308]	; (8000a5c <All_mode_UARTUI+0x230>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	3b01      	subs	r3, #1
 800092a:	4a4d      	ldr	r2, [pc, #308]	; (8000a60 <All_mode_UARTUI+0x234>)
 800092c:	5cd2      	ldrb	r2, [r2, r3]
 800092e:	4b4d      	ldr	r3, [pc, #308]	; (8000a64 <All_mode_UARTUI+0x238>)
 8000930:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8000932:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <All_mode_UARTUI+0x244>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	43db      	mvns	r3, r3
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b52      	ldr	r3, [pc, #328]	; (8000a84 <All_mode_UARTUI+0x258>)
 800093c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800093e:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <All_mode_UARTUI+0x238>)
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	4b50      	ldr	r3, [pc, #320]	; (8000a84 <All_mode_UARTUI+0x258>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	429a      	cmp	r2, r3
 8000948:	f040 8261 	bne.w	8000e0e <All_mode_UARTUI+0x5e2>
					M_state = 3;
 800094c:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <All_mode_UARTUI+0x24c>)
 800094e:	2203      	movs	r2, #3
 8000950:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	2202      	movs	r2, #2
 8000958:	4948      	ldr	r1, [pc, #288]	; (8000a7c <All_mode_UARTUI+0x250>)
 800095a:	4849      	ldr	r0, [pc, #292]	; (8000a80 <All_mode_UARTUI+0x254>)
 800095c:	f007 fa8f 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000960:	e255      	b.n	8000e0e <All_mode_UARTUI+0x5e2>
			case 4:
					chksum = MainBuf[newPos_uart-1];
 8000962:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <All_mode_UARTUI+0x230>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	3b01      	subs	r3, #1
 8000968:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <All_mode_UARTUI+0x234>)
 800096a:	5cd2      	ldrb	r2, [r2, r3]
 800096c:	4b3d      	ldr	r3, [pc, #244]	; (8000a64 <All_mode_UARTUI+0x238>)
 800096e:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <All_mode_UARTUI+0x230>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	3b02      	subs	r3, #2
 8000976:	4a3a      	ldr	r2, [pc, #232]	; (8000a60 <All_mode_UARTUI+0x234>)
 8000978:	5cd2      	ldrb	r2, [r2, r3]
 800097a:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <All_mode_UARTUI+0x23c>)
 800097c:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 800097e:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <All_mode_UARTUI+0x230>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	3b03      	subs	r3, #3
 8000984:	4a36      	ldr	r2, [pc, #216]	; (8000a60 <All_mode_UARTUI+0x234>)
 8000986:	5cd2      	ldrb	r2, [r2, r3]
 8000988:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <All_mode_UARTUI+0x240>)
 800098a:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 800098c:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <All_mode_UARTUI+0x240>)
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <All_mode_UARTUI+0x25c>)
 8000992:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 8000994:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <All_mode_UARTUI+0x23c>)
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	4b3b      	ldr	r3, [pc, #236]	; (8000a88 <All_mode_UARTUI+0x25c>)
 800099a:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800099c:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <All_mode_UARTUI+0x244>)
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <All_mode_UARTUI+0x240>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <All_mode_UARTUI+0x23c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <All_mode_UARTUI+0x248>)
 80009b6:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80009b8:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <All_mode_UARTUI+0x238>)
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <All_mode_UARTUI+0x248>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	f040 8226 	bne.w	8000e12 <All_mode_UARTUI+0x5e6>
					M_state = 4;
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <All_mode_UARTUI+0x24c>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	2202      	movs	r2, #2
 80009d2:	492a      	ldr	r1, [pc, #168]	; (8000a7c <All_mode_UARTUI+0x250>)
 80009d4:	482a      	ldr	r0, [pc, #168]	; (8000a80 <All_mode_UARTUI+0x254>)
 80009d6:	f007 fa52 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 80009da:	e21a      	b.n	8000e12 <All_mode_UARTUI+0x5e6>
			case 5:
					chksum = MainBuf[newPos_uart-1];
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <All_mode_UARTUI+0x230>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <All_mode_UARTUI+0x234>)
 80009e4:	5cd2      	ldrb	r2, [r2, r3]
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <All_mode_UARTUI+0x238>)
 80009e8:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <All_mode_UARTUI+0x230>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	3b02      	subs	r3, #2
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <All_mode_UARTUI+0x234>)
 80009f2:	5cd2      	ldrb	r2, [r2, r3]
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <All_mode_UARTUI+0x23c>)
 80009f6:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <All_mode_UARTUI+0x230>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	3b03      	subs	r3, #3
 80009fe:	4a18      	ldr	r2, [pc, #96]	; (8000a60 <All_mode_UARTUI+0x234>)
 8000a00:	5cd2      	ldrb	r2, [r2, r3]
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <All_mode_UARTUI+0x240>)
 8000a04:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <All_mode_UARTUI+0x240>)
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <All_mode_UARTUI+0x260>)
 8000a0c:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <All_mode_UARTUI+0x23c>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <All_mode_UARTUI+0x260>)
 8000a14:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <All_mode_UARTUI+0x244>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <All_mode_UARTUI+0x240>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <All_mode_UARTUI+0x23c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <All_mode_UARTUI+0x248>)
 8000a30:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <All_mode_UARTUI+0x238>)
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <All_mode_UARTUI+0x248>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	f040 81eb 	bne.w	8000e16 <All_mode_UARTUI+0x5ea>
					M_state = 5;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <All_mode_UARTUI+0x24c>)
 8000a42:	2205      	movs	r2, #5
 8000a44:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	490b      	ldr	r1, [pc, #44]	; (8000a7c <All_mode_UARTUI+0x250>)
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <All_mode_UARTUI+0x254>)
 8000a50:	f007 fa15 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000a54:	e1df      	b.n	8000e16 <All_mode_UARTUI+0x5ea>
 8000a56:	bf00      	nop
 8000a58:	2000040d 	.word	0x2000040d
 8000a5c:	200003f2 	.word	0x200003f2
 8000a60:	200003d0 	.word	0x200003d0
 8000a64:	2000040f 	.word	0x2000040f
 8000a68:	20000414 	.word	0x20000414
 8000a6c:	20000413 	.word	0x20000413
 8000a70:	2000040e 	.word	0x2000040e
 8000a74:	20000411 	.word	0x20000411
 8000a78:	20000415 	.word	0x20000415
 8000a7c:	20000014 	.word	0x20000014
 8000a80:	2000024c 	.word	0x2000024c
 8000a84:	20000410 	.word	0x20000410
 8000a88:	200003f4 	.word	0x200003f4
 8000a8c:	200003f8 	.word	0x200003f8
			case 6:
					chksum = MainBuf[newPos_uart-1];
 8000a90:	4b96      	ldr	r3, [pc, #600]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	4a96      	ldr	r2, [pc, #600]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000a98:	5cd2      	ldrb	r2, [r2, r3]
 8000a9a:	4b96      	ldr	r3, [pc, #600]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000a9c:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 8000a9e:	4b93      	ldr	r3, [pc, #588]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4a92      	ldr	r2, [pc, #584]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000aa6:	5cd2      	ldrb	r2, [r2, r3]
 8000aa8:	4b93      	ldr	r3, [pc, #588]	; (8000cf8 <All_mode_UARTUI+0x4cc>)
 8000aaa:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8000aac:	4b8f      	ldr	r3, [pc, #572]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	3b03      	subs	r3, #3
 8000ab2:	4a8f      	ldr	r2, [pc, #572]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000ab4:	5cd2      	ldrb	r2, [r2, r3]
 8000ab6:	4b91      	ldr	r3, [pc, #580]	; (8000cfc <All_mode_UARTUI+0x4d0>)
 8000ab8:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 8000aba:	4b90      	ldr	r3, [pc, #576]	; (8000cfc <All_mode_UARTUI+0x4d0>)
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	4b90      	ldr	r3, [pc, #576]	; (8000d00 <All_mode_UARTUI+0x4d4>)
 8000ac0:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 8000ac2:	4b8d      	ldr	r3, [pc, #564]	; (8000cf8 <All_mode_UARTUI+0x4cc>)
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	4b8e      	ldr	r3, [pc, #568]	; (8000d00 <All_mode_UARTUI+0x4d4>)
 8000ac8:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8000aca:	4b8e      	ldr	r3, [pc, #568]	; (8000d04 <All_mode_UARTUI+0x4d8>)
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4b8b      	ldr	r3, [pc, #556]	; (8000cfc <All_mode_UARTUI+0x4d0>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b88      	ldr	r3, [pc, #544]	; (8000cf8 <All_mode_UARTUI+0x4cc>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b89      	ldr	r3, [pc, #548]	; (8000d08 <All_mode_UARTUI+0x4dc>)
 8000ae4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8000ae6:	4b83      	ldr	r3, [pc, #524]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	4b87      	ldr	r3, [pc, #540]	; (8000d08 <All_mode_UARTUI+0x4dc>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	f040 8193 	bne.w	8000e1a <All_mode_UARTUI+0x5ee>
					M_state = 6;
 8000af4:	4b85      	ldr	r3, [pc, #532]	; (8000d0c <All_mode_UARTUI+0x4e0>)
 8000af6:	2206      	movs	r2, #6
 8000af8:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	2202      	movs	r2, #2
 8000b00:	4983      	ldr	r1, [pc, #524]	; (8000d10 <All_mode_UARTUI+0x4e4>)
 8000b02:	4884      	ldr	r0, [pc, #528]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000b04:	f007 f9bb 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000b08:	e187      	b.n	8000e1a <All_mode_UARTUI+0x5ee>
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 8000b0a:	4b78      	ldr	r3, [pc, #480]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b81      	ldr	r3, [pc, #516]	; (8000d18 <All_mode_UARTUI+0x4ec>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	3301      	adds	r3, #1
 8000b18:	4a75      	ldr	r2, [pc, #468]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000b1a:	5cd2      	ldrb	r2, [r2, r3]
 8000b1c:	4b7f      	ldr	r3, [pc, #508]	; (8000d1c <All_mode_UARTUI+0x4f0>)
 8000b1e:	701a      	strb	r2, [r3, #0]
				for(int i=2; i < Nstation+2; i++ ){
 8000b20:	2302      	movs	r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	e01a      	b.n	8000b5c <All_mode_UARTUI+0x330>
					dataFSum += MainBuf[newPos_uart-i];
 8000b26:	4b71      	ldr	r3, [pc, #452]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	4a6f      	ldr	r2, [pc, #444]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000b32:	5cd2      	ldrb	r2, [r2, r3]
 8000b34:	4b7a      	ldr	r3, [pc, #488]	; (8000d20 <All_mode_UARTUI+0x4f4>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b78      	ldr	r3, [pc, #480]	; (8000d20 <All_mode_UARTUI+0x4f4>)
 8000b3e:	701a      	strb	r2, [r3, #0]
					Set_Goal_nSta[i-2] = MainBuf[newPos_uart-i];
 8000b40:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	1ad2      	subs	r2, r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3b02      	subs	r3, #2
 8000b4e:	4968      	ldr	r1, [pc, #416]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000b50:	5c89      	ldrb	r1, [r1, r2]
 8000b52:	4a74      	ldr	r2, [pc, #464]	; (8000d24 <All_mode_UARTUI+0x4f8>)
 8000b54:	54d1      	strb	r1, [r2, r3]
				for(int i=2; i < Nstation+2; i++ ){
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4b6f      	ldr	r3, [pc, #444]	; (8000d1c <All_mode_UARTUI+0x4f0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	ddde      	ble.n	8000b26 <All_mode_UARTUI+0x2fa>
				}
				chksum = MainBuf[newPos_uart-1];
 8000b68:	4b60      	ldr	r3, [pc, #384]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	4a60      	ldr	r2, [pc, #384]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000b70:	5cd2      	ldrb	r2, [r2, r3]
 8000b72:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000b74:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 8000b76:	4b63      	ldr	r3, [pc, #396]	; (8000d04 <All_mode_UARTUI+0x4d8>)
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	4b68      	ldr	r3, [pc, #416]	; (8000d1c <All_mode_UARTUI+0x4f0>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b67      	ldr	r3, [pc, #412]	; (8000d20 <All_mode_UARTUI+0x4f4>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b66      	ldr	r3, [pc, #408]	; (8000d28 <All_mode_UARTUI+0x4fc>)
 8000b90:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8000b92:	4b58      	ldr	r3, [pc, #352]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <All_mode_UARTUI+0x4fc>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	f040 813f 	bne.w	8000e1e <All_mode_UARTUI+0x5f2>
					M_state = 7;
 8000ba0:	4b5a      	ldr	r3, [pc, #360]	; (8000d0c <All_mode_UARTUI+0x4e0>)
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 8000ba6:	4b5e      	ldr	r3, [pc, #376]	; (8000d20 <All_mode_UARTUI+0x4f4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	4957      	ldr	r1, [pc, #348]	; (8000d10 <All_mode_UARTUI+0x4e4>)
 8000bb4:	4857      	ldr	r0, [pc, #348]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000bb6:	f007 f962 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000bba:	e130      	b.n	8000e1e <All_mode_UARTUI+0x5f2>
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 8000bbc:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	4a4b      	ldr	r2, [pc, #300]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000bc4:	5cd2      	ldrb	r2, [r2, r3]
 8000bc6:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000bc8:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000bca:	4b4e      	ldr	r3, [pc, #312]	; (8000d04 <All_mode_UARTUI+0x4d8>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b56      	ldr	r3, [pc, #344]	; (8000d2c <All_mode_UARTUI+0x500>)
 8000bd4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	4b54      	ldr	r3, [pc, #336]	; (8000d2c <All_mode_UARTUI+0x500>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	f040 811f 	bne.w	8000e22 <All_mode_UARTUI+0x5f6>
					M_state = 8;
 8000be4:	4b49      	ldr	r3, [pc, #292]	; (8000d0c <All_mode_UARTUI+0x4e0>)
 8000be6:	2208      	movs	r2, #8
 8000be8:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	2202      	movs	r2, #2
 8000bf0:	4947      	ldr	r1, [pc, #284]	; (8000d10 <All_mode_UARTUI+0x4e4>)
 8000bf2:	4848      	ldr	r0, [pc, #288]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000bf4:	f007 f943 	bl	8007e7e <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	494c      	ldr	r1, [pc, #304]	; (8000d30 <All_mode_UARTUI+0x504>)
 8000c00:	4844      	ldr	r0, [pc, #272]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000c02:	f007 f93c 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000c06:	e10c      	b.n	8000e22 <All_mode_UARTUI+0x5f6>
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 8000c08:	4b38      	ldr	r3, [pc, #224]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	4a38      	ldr	r2, [pc, #224]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000c10:	5cd2      	ldrb	r2, [r2, r3]
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000c14:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000c16:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <All_mode_UARTUI+0x4d8>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b43      	ldr	r3, [pc, #268]	; (8000d2c <All_mode_UARTUI+0x500>)
 8000c20:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000c22:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	4b41      	ldr	r3, [pc, #260]	; (8000d2c <All_mode_UARTUI+0x500>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	f040 80fb 	bne.w	8000e26 <All_mode_UARTUI+0x5fa>
					M_state = 9;
 8000c30:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <All_mode_UARTUI+0x4e0>)
 8000c32:	2209      	movs	r2, #9
 8000c34:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000);
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	4934      	ldr	r1, [pc, #208]	; (8000d10 <All_mode_UARTUI+0x4e4>)
 8000c3e:	4835      	ldr	r0, [pc, #212]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000c40:	f007 f91d 	bl	8007e7e <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,1000);
 8000c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c48:	2204      	movs	r2, #4
 8000c4a:	493a      	ldr	r1, [pc, #232]	; (8000d34 <All_mode_UARTUI+0x508>)
 8000c4c:	4831      	ldr	r0, [pc, #196]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000c4e:	f007 f916 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000c52:	e0e8      	b.n	8000e26 <All_mode_UARTUI+0x5fa>
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	4a25      	ldr	r2, [pc, #148]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000c5c:	5cd2      	ldrb	r2, [r2, r3]
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000c60:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <All_mode_UARTUI+0x4d8>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <All_mode_UARTUI+0x500>)
 8000c6c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000c70:	781a      	ldrb	r2, [r3, #0]
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <All_mode_UARTUI+0x500>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	f040 80d7 	bne.w	8000e2a <All_mode_UARTUI+0x5fe>
					M_state = 10;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <All_mode_UARTUI+0x4e0>)
 8000c7e:	220a      	movs	r2, #10
 8000c80:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000);
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	2202      	movs	r2, #2
 8000c88:	4921      	ldr	r1, [pc, #132]	; (8000d10 <All_mode_UARTUI+0x4e4>)
 8000c8a:	4822      	ldr	r0, [pc, #136]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000c8c:	f007 f8f7 	bl	8007e7e <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,1000);
 8000c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c94:	2204      	movs	r2, #4
 8000c96:	4928      	ldr	r1, [pc, #160]	; (8000d38 <All_mode_UARTUI+0x50c>)
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000c9a:	f007 f8f0 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000c9e:	e0c4      	b.n	8000e2a <All_mode_UARTUI+0x5fe>
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <All_mode_UARTUI+0x4c0>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <All_mode_UARTUI+0x4c4>)
 8000ca8:	5cd2      	ldrb	r2, [r2, r3]
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000cac:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <All_mode_UARTUI+0x4d8>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <All_mode_UARTUI+0x500>)
 8000cb8:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <All_mode_UARTUI+0x4c8>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <All_mode_UARTUI+0x500>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	f040 80b3 	bne.w	8000e2e <All_mode_UARTUI+0x602>
					M_state = 11;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <All_mode_UARTUI+0x4e0>)
 8000cca:	220b      	movs	r2, #11
 8000ccc:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000);
 8000cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	490e      	ldr	r1, [pc, #56]	; (8000d10 <All_mode_UARTUI+0x4e4>)
 8000cd6:	480f      	ldr	r0, [pc, #60]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000cd8:	f007 f8d1 	bl	8007e7e <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 8000cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	4916      	ldr	r1, [pc, #88]	; (8000d3c <All_mode_UARTUI+0x510>)
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <All_mode_UARTUI+0x4e8>)
 8000ce6:	f007 f8ca 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000cea:	e0a0      	b.n	8000e2e <All_mode_UARTUI+0x602>
 8000cec:	200003f2 	.word	0x200003f2
 8000cf0:	200003d0 	.word	0x200003d0
 8000cf4:	2000040f 	.word	0x2000040f
 8000cf8:	20000414 	.word	0x20000414
 8000cfc:	20000413 	.word	0x20000413
 8000d00:	200003fc 	.word	0x200003fc
 8000d04:	2000040e 	.word	0x2000040e
 8000d08:	20000411 	.word	0x20000411
 8000d0c:	20000415 	.word	0x20000415
 8000d10:	20000014 	.word	0x20000014
 8000d14:	2000024c 	.word	0x2000024c
 8000d18:	2000040a 	.word	0x2000040a
 8000d1c:	20000416 	.word	0x20000416
 8000d20:	20000417 	.word	0x20000417
 8000d24:	20000400 	.word	0x20000400
 8000d28:	20000412 	.word	0x20000412
 8000d2c:	20000410 	.word	0x20000410
 8000d30:	20000018 	.word	0x20000018
 8000d34:	2000001c 	.word	0x2000001c
 8000d38:	20000020 	.word	0x20000020
 8000d3c:	20000024 	.word	0x20000024
			case 12: //// 12 Enable end effector 10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 8000d40:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <All_mode_UARTUI+0x618>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a40      	ldr	r2, [pc, #256]	; (8000e48 <All_mode_UARTUI+0x61c>)
 8000d48:	5cd2      	ldrb	r2, [r2, r3]
 8000d4a:	4b40      	ldr	r3, [pc, #256]	; (8000e4c <All_mode_UARTUI+0x620>)
 8000d4c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000d4e:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <All_mode_UARTUI+0x624>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b3f      	ldr	r3, [pc, #252]	; (8000e54 <All_mode_UARTUI+0x628>)
 8000d58:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000d5a:	4b3c      	ldr	r3, [pc, #240]	; (8000e4c <All_mode_UARTUI+0x620>)
 8000d5c:	781a      	ldrb	r2, [r3, #0]
 8000d5e:	4b3d      	ldr	r3, [pc, #244]	; (8000e54 <All_mode_UARTUI+0x628>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d165      	bne.n	8000e32 <All_mode_UARTUI+0x606>
					M_state = 12;
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <All_mode_UARTUI+0x62c>)
 8000d68:	220c      	movs	r2, #12
 8000d6a:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 1;
 8000d6c:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <All_mode_UARTUI+0x630>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	2202      	movs	r2, #2
 8000d78:	4939      	ldr	r1, [pc, #228]	; (8000e60 <All_mode_UARTUI+0x634>)
 8000d7a:	483a      	ldr	r0, [pc, #232]	; (8000e64 <All_mode_UARTUI+0x638>)
 8000d7c:	f007 f87f 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000d80:	e057      	b.n	8000e32 <All_mode_UARTUI+0x606>
			case 13: // 13 Disable end effector 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 8000d82:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <All_mode_UARTUI+0x618>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	4a2f      	ldr	r2, [pc, #188]	; (8000e48 <All_mode_UARTUI+0x61c>)
 8000d8a:	5cd2      	ldrb	r2, [r2, r3]
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <All_mode_UARTUI+0x620>)
 8000d8e:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <All_mode_UARTUI+0x624>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <All_mode_UARTUI+0x628>)
 8000d9a:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <All_mode_UARTUI+0x620>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <All_mode_UARTUI+0x628>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d146      	bne.n	8000e36 <All_mode_UARTUI+0x60a>
					M_state = 13;
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <All_mode_UARTUI+0x62c>)
 8000daa:	220d      	movs	r2, #13
 8000dac:	701a      	strb	r2, [r3, #0]

					trig_efftRead = 0;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <All_mode_UARTUI+0x63c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <All_mode_UARTUI+0x640>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	4927      	ldr	r1, [pc, #156]	; (8000e60 <All_mode_UARTUI+0x634>)
 8000dc2:	4828      	ldr	r0, [pc, #160]	; (8000e64 <All_mode_UARTUI+0x638>)
 8000dc4:	f007 f85b 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000dc8:	e035      	b.n	8000e36 <All_mode_UARTUI+0x60a>
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <All_mode_UARTUI+0x618>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	4a1d      	ldr	r2, [pc, #116]	; (8000e48 <All_mode_UARTUI+0x61c>)
 8000dd2:	5cd2      	ldrb	r2, [r2, r3]
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <All_mode_UARTUI+0x620>)
 8000dd6:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <All_mode_UARTUI+0x624>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <All_mode_UARTUI+0x628>)
 8000de2:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <All_mode_UARTUI+0x620>)
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <All_mode_UARTUI+0x628>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d124      	bne.n	8000e3a <All_mode_UARTUI+0x60e>
					M_state = 14;
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <All_mode_UARTUI+0x62c>)
 8000df2:	220e      	movs	r2, #14
 8000df4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	4918      	ldr	r1, [pc, #96]	; (8000e60 <All_mode_UARTUI+0x634>)
 8000dfe:	4819      	ldr	r0, [pc, #100]	; (8000e64 <All_mode_UARTUI+0x638>)
 8000e00:	f007 f83d 	bl	8007e7e <HAL_UART_Transmit>
				}
				break;
 8000e04:	e019      	b.n	8000e3a <All_mode_UARTUI+0x60e>
				break;
 8000e06:	bf00      	nop
 8000e08:	e018      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e0a:	bf00      	nop
 8000e0c:	e016      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e0e:	bf00      	nop
 8000e10:	e014      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e12:	bf00      	nop
 8000e14:	e012      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e16:	bf00      	nop
 8000e18:	e010      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e1a:	bf00      	nop
 8000e1c:	e00e      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e1e:	bf00      	nop
 8000e20:	e00c      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e22:	bf00      	nop
 8000e24:	e00a      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e26:	bf00      	nop
 8000e28:	e008      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e2a:	bf00      	nop
 8000e2c:	e006      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e2e:	bf00      	nop
 8000e30:	e004      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e32:	bf00      	nop
 8000e34:	e002      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e36:	bf00      	nop
 8000e38:	e000      	b.n	8000e3c <All_mode_UARTUI+0x610>
				break;
 8000e3a:	bf00      	nop
			}

}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200003f2 	.word	0x200003f2
 8000e48:	200003d0 	.word	0x200003d0
 8000e4c:	2000040f 	.word	0x2000040f
 8000e50:	2000040e 	.word	0x2000040e
 8000e54:	20000410 	.word	0x20000410
 8000e58:	20000415 	.word	0x20000415
 8000e5c:	200003a1 	.word	0x200003a1
 8000e60:	20000014 	.word	0x20000014
 8000e64:	2000024c 	.word	0x2000024c
 8000e68:	200003a3 	.word	0x200003a3
 8000e6c:	200003a2 	.word	0x200003a2

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e78:	f001 fb06 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7c:	f000 f8ea 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f000 fb12 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e84:	f000 fae0 	bl	8001448 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e88:	f000 f94c 	bl	8001124 <MX_I2C1_Init>
  MX_TIM11_Init();
 8000e8c:	f000 fa8c 	bl	80013a8 <MX_TIM11_Init>
  MX_TIM2_Init();
 8000e90:	f000 f9a4 	bl	80011dc <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e94:	f000 fa12 	bl	80012bc <MX_TIM4_Init>
  MX_I2C3_Init();
 8000e98:	f000 f972 	bl	8001180 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8000e9c:	f000 faa8 	bl	80013f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8000ea0:	4858      	ldr	r0, [pc, #352]	; (8001004 <main+0x194>)
 8000ea2:	f005 fe17 	bl	8006ad4 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 8000ea6:	4858      	ldr	r0, [pc, #352]	; (8001008 <main+0x198>)
 8000ea8:	f005 fdba 	bl	8006a20 <HAL_TIM_Base_Start>
    //HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8000eac:	4857      	ldr	r0, [pc, #348]	; (800100c <main+0x19c>)
 8000eae:	f005 fdb7 	bl	8006a20 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4855      	ldr	r0, [pc, #340]	; (800100c <main+0x19c>)
 8000eb6:	f005 fec9 	bl	8006c4c <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8000eba:	2220      	movs	r2, #32
 8000ebc:	4954      	ldr	r1, [pc, #336]	; (8001010 <main+0x1a0>)
 8000ebe:	4855      	ldr	r0, [pc, #340]	; (8001014 <main+0x1a4>)
 8000ec0:	f007 f86f 	bl	8007fa2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000ec4:	4b54      	ldr	r3, [pc, #336]	; (8001018 <main+0x1a8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b53      	ldr	r3, [pc, #332]	; (8001018 <main+0x1a8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0208 	bic.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]

    //MCP23017 setting init
    HAL_Delay(50);
 8000ed4:	2032      	movs	r0, #50	; 0x32
 8000ed6:	f001 fb49 	bl	800256c <HAL_Delay>
    IOExpenderInit();
 8000eda:	f000 fdf1 	bl	8001ac0 <IOExpenderInit>
	  	  //if(micros() - TimeStampGrand >= 1000){
	  		//TimeStampGrand = micros();
	  	  //}
*/
	  	  // Encoder I2CRead
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8000ede:	f000 ff3b 	bl	8001d58 <micros>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	494d      	ldr	r1, [pc, #308]	; (800101c <main+0x1ac>)
 8000ee8:	6809      	ldr	r1, [r1, #0]
 8000eea:	2000      	movs	r0, #0
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	1a54      	subs	r4, r2, r1
 8000ef4:	68f9      	ldr	r1, [r7, #12]
 8000ef6:	eb63 0501 	sbc.w	r5, r3, r1
 8000efa:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000efe:	f175 0300 	sbcs.w	r3, r5, #0
 8000f02:	d312      	bcc.n	8000f2a <main+0xba>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8000f04:	f000 ff28 	bl	8001d58 <micros>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <main+0x1ac>)
 8000f0e:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8000f10:	4b43      	ldr	r3, [pc, #268]	; (8001020 <main+0x1b0>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
	  	              pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8000f16:	2102      	movs	r1, #2
 8000f18:	4842      	ldr	r0, [pc, #264]	; (8001024 <main+0x1b4>)
 8000f1a:	f002 f9f1 	bl	8003300 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <main+0x1b8>)
 8000f24:	701a      	strb	r2, [r3, #0]
	  	              GrandStatumix();
 8000f26:	f000 fb99 	bl	800165c <GrandStatumix>
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8000f2a:	4840      	ldr	r0, [pc, #256]	; (800102c <main+0x1bc>)
 8000f2c:	f000 fdde 	bl	8001aec <AbsEncI2CReadx>
	  			  Speedsmoothfunc(RoundNumnd);
	  		 }
	   	   */
	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 8000f30:	f000 ff12 	bl	8001d58 <micros>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	493d      	ldr	r1, [pc, #244]	; (8001030 <main+0x1c0>)
 8000f3a:	6809      	ldr	r1, [r1, #0]
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	6039      	str	r1, [r7, #0]
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6839      	ldr	r1, [r7, #0]
 8000f44:	ebb2 0801 	subs.w	r8, r2, r1
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8000f4e:	f5b8 7ffa 	cmp.w	r8, #500	; 0x1f4
 8000f52:	f179 0300 	sbcs.w	r3, r9, #0
 8000f56:	d319      	bcc.n	8000f8c <main+0x11c>
	  		  	  timestampPWM = micros(); // stamp
 8000f58:	f000 fefe 	bl	8001d58 <micros>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4b33      	ldr	r3, [pc, #204]	; (8001030 <main+0x1c0>)
 8000f62:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <main+0x1c4>)
 8000f66:	881a      	ldrh	r2, [r3, #0]
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <main+0x19c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		if (mot_dirctn == 0){
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <main+0x1c8>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <main+0x112>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2104      	movs	r1, #4
 8000f7a:	482a      	ldr	r0, [pc, #168]	; (8001024 <main+0x1b4>)
 8000f7c:	f002 f9d8 	bl	8003330 <HAL_GPIO_WritePin>
 8000f80:	e004      	b.n	8000f8c <main+0x11c>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2104      	movs	r1, #4
 8000f86:	4827      	ldr	r0, [pc, #156]	; (8001024 <main+0x1b4>)
 8000f88:	f002 f9d2 	bl	8003330 <HAL_GPIO_WritePin>
	  	  		}

	  	  	  }

	  	 if (grandState ==  work){
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <main+0x1cc>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d103      	bne.n	8000f9c <main+0x12c>
	  		 PIDzero();
 8000f94:	f000 fc66 	bl	8001864 <PIDzero>
	  		 MotDrvCytron();
 8000f98:	f000 fcee 	bl	8001978 <MotDrvCytron>
	  	 }

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8000f9c:	f000 fe02 	bl	8001ba4 <Efft_activate>
	  	 Efft_read(&efft_status);
 8000fa0:	4827      	ldr	r0, [pc, #156]	; (8001040 <main+0x1d0>)
 8000fa2:	f000 fe45 	bl	8001c30 <Efft_read>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && micros() - timestamp_efft >= 200000){
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <main+0x1d4>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d01d      	beq.n	8000fea <main+0x17a>
 8000fae:	f000 fed3 	bl	8001d58 <micros>
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <main+0x1d8>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	ebb0 0a02 	subs.w	sl, r0, r2
 8000fbc:	eb61 0b03 	sbc.w	fp, r1, r3
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <main+0x1dc>)
 8000fc2:	459a      	cmp	sl, r3
 8000fc4:	f17b 0300 	sbcs.w	r3, fp, #0
 8000fc8:	d30f      	bcc.n	8000fea <main+0x17a>
	  		 timestamp_efft = micros();
 8000fca:	f000 fec5 	bl	8001d58 <micros>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	491d      	ldr	r1, [pc, #116]	; (8001048 <main+0x1d8>)
 8000fd4:	e9c1 2300 	strd	r2, r3, [r1]
	  		 flag_efftRead = 1;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <main+0x1e0>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	701a      	strb	r2, [r3, #0]
	  		 trig_efftRead++;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <main+0x1d4>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <main+0x1d4>)
 8000fe8:	701a      	strb	r2, [r3, #0]

	  	 }
	  	 //// disable this when run with laserwork
	  	 if(trig_efftRead >= 40 || efft_status == 0x78 ){//
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <main+0x1d4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b27      	cmp	r3, #39	; 0x27
 8000ff0:	d804      	bhi.n	8000ffc <main+0x18c>
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <main+0x1d0>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b78      	cmp	r3, #120	; 0x78
 8000ff8:	f47f af71 	bne.w	8000ede <main+0x6e>
	  		 trig_efftRead = 0;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <main+0x1d4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8001002:	e76c      	b.n	8000ede <main+0x6e>
 8001004:	200001a4 	.word	0x200001a4
 8001008:	20000114 	.word	0x20000114
 800100c:	2000015c 	.word	0x2000015c
 8001010:	200003b0 	.word	0x200003b0
 8001014:	2000024c 	.word	0x2000024c
 8001018:	20000290 	.word	0x20000290
 800101c:	20000364 	.word	0x20000364
 8001020:	2000036e 	.word	0x2000036e
 8001024:	40020400 	.word	0x40020400
 8001028:	20000351 	.word	0x20000351
 800102c:	20000368 	.word	0x20000368
 8001030:	20000370 	.word	0x20000370
 8001034:	2000000a 	.word	0x2000000a
 8001038:	20000374 	.word	0x20000374
 800103c:	20000350 	.word	0x20000350
 8001040:	200003a0 	.word	0x200003a0
 8001044:	200003a3 	.word	0x200003a3
 8001048:	200003a8 	.word	0x200003a8
 800104c:	00030d40 	.word	0x00030d40
 8001050:	200003a2 	.word	0x200003a2

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b094      	sub	sp, #80	; 0x50
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2230      	movs	r2, #48	; 0x30
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f008 f924 	bl	80092b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <SystemClock_Config+0xc8>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a26      	ldr	r2, [pc, #152]	; (800111c <SystemClock_Config+0xc8>)
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <SystemClock_Config+0xc8>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <SystemClock_Config+0xcc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a20      	ldr	r2, [pc, #128]	; (8001120 <SystemClock_Config+0xcc>)
 800109e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <SystemClock_Config+0xcc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b4:	2301      	movs	r3, #1
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b8:	2310      	movs	r3, #16
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010c4:	2308      	movs	r3, #8
 80010c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d0:	2304      	movs	r3, #4
 80010d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 ffb9 	bl	8006050 <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010e4:	f000 fe6e 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	2103      	movs	r1, #3
 8001104:	4618      	mov	r0, r3
 8001106:	f005 fa1b 	bl	8006540 <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001110:	f000 fe58 	bl	8001dc4 <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	3750      	adds	r7, #80	; 0x50
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000

08001124 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_I2C1_Init+0x50>)
 800112a:	4a13      	ldr	r2, [pc, #76]	; (8001178 <MX_I2C1_Init+0x54>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_I2C1_Init+0x50>)
 8001130:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_I2C1_Init+0x58>)
 8001132:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_I2C1_Init+0x50>)
 8001142:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001146:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_I2C1_Init+0x50>)
 8001162:	f002 f917 	bl	8003394 <HAL_I2C_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800116c:	f000 fe2a 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000006c 	.word	0x2000006c
 8001178:	40005400 	.word	0x40005400
 800117c:	00061a80 	.word	0x00061a80

08001180 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_I2C3_Init+0x50>)
 8001186:	4a13      	ldr	r2, [pc, #76]	; (80011d4 <MX_I2C3_Init+0x54>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_I2C3_Init+0x50>)
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <MX_I2C3_Init+0x58>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_I2C3_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_I2C3_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_I2C3_Init+0x50>)
 800119e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_I2C3_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_I2C3_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_I2C3_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_I2C3_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_I2C3_Init+0x50>)
 80011be:	f002 f8e9 	bl	8003394 <HAL_I2C_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011c8:	f000 fdfc 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200000c0 	.word	0x200000c0
 80011d4:	40005c00 	.word	0x40005c00
 80011d8:	00061a80 	.word	0x00061a80

080011dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <MX_TIM2_Init+0xdc>)
 8001208:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <MX_TIM2_Init+0xdc>)
 8001210:	2263      	movs	r2, #99	; 0x63
 8001212:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <MX_TIM2_Init+0xdc>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800121a:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <MX_TIM2_Init+0xdc>)
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_TIM2_Init+0xdc>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MX_TIM2_Init+0xdc>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800122e:	4822      	ldr	r0, [pc, #136]	; (80012b8 <MX_TIM2_Init+0xdc>)
 8001230:	f005 fba6 	bl	8006980 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800123a:	f000 fdc3 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001242:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	4619      	mov	r1, r3
 800124a:	481b      	ldr	r0, [pc, #108]	; (80012b8 <MX_TIM2_Init+0xdc>)
 800124c:	f006 f86e 	bl	800732c <HAL_TIM_ConfigClockSource>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001256:	f000 fdb5 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800125a:	4817      	ldr	r0, [pc, #92]	; (80012b8 <MX_TIM2_Init+0xdc>)
 800125c:	f005 fda6 	bl	8006dac <HAL_TIM_IC_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001266:	f000 fdad 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4619      	mov	r1, r3
 8001278:	480f      	ldr	r0, [pc, #60]	; (80012b8 <MX_TIM2_Init+0xdc>)
 800127a:	f006 fd31 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001284:	f000 fd9e 	bl	8001dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	2200      	movs	r2, #0
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_TIM2_Init+0xdc>)
 80012a0:	f005 fee5 	bl	800706e <HAL_TIM_IC_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80012aa:	f000 fd8b 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000114 	.word	0x20000114

080012bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <MX_TIM4_Init+0xe4>)
 80012ee:	4a2d      	ldr	r2, [pc, #180]	; (80013a4 <MX_TIM4_Init+0xe8>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <MX_TIM4_Init+0xe4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <MX_TIM4_Init+0xe4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_TIM4_Init+0xe4>)
 8001300:	f242 720f 	movw	r2, #9999	; 0x270f
 8001304:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <MX_TIM4_Init+0xe4>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MX_TIM4_Init+0xe4>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001312:	4823      	ldr	r0, [pc, #140]	; (80013a0 <MX_TIM4_Init+0xe4>)
 8001314:	f005 fb34 	bl	8006980 <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800131e:	f000 fd51 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132c:	4619      	mov	r1, r3
 800132e:	481c      	ldr	r0, [pc, #112]	; (80013a0 <MX_TIM4_Init+0xe4>)
 8001330:	f005 fffc 	bl	800732c <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800133a:	f000 fd43 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <MX_TIM4_Init+0xe4>)
 8001340:	f005 fc2a 	bl	8006b98 <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800134a:	f000 fd3b 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4619      	mov	r1, r3
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <MX_TIM4_Init+0xe4>)
 800135e:	f006 fcbf 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001368:	f000 fd2c 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM4_Init+0xe4>)
 8001384:	f005 ff10 	bl	80071a8 <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800138e:	f000 fd19 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM4_Init+0xe4>)
 8001394:	f000 feb2 	bl	80020fc <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3738      	adds	r7, #56	; 0x38
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000015c 	.word	0x2000015c
 80013a4:	40000800 	.word	0x40000800

080013a8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_TIM11_Init+0x40>)
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <MX_TIM11_Init+0x44>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <MX_TIM11_Init+0x40>)
 80013b4:	2263      	movs	r2, #99	; 0x63
 80013b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_TIM11_Init+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_TIM11_Init+0x40>)
 80013c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_TIM11_Init+0x40>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_TIM11_Init+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_TIM11_Init+0x40>)
 80013d4:	f005 fad4 	bl	8006980 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80013de:	f000 fcf1 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001a4 	.word	0x200001a4
 80013ec:	40014800 	.word	0x40014800

080013f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_USART2_UART_Init+0x50>)
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <MX_USART2_UART_Init+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART2_UART_Init+0x50>)
 80013fc:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001400:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_USART2_UART_Init+0x50>)
 8001404:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001408:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <MX_USART2_UART_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART2_UART_Init+0x50>)
 8001412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART2_UART_Init+0x50>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART2_UART_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART2_UART_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART2_UART_Init+0x50>)
 800142c:	f006 fcda 	bl	8007de4 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001436:	f000 fcc5 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2000024c 	.word	0x2000024c
 8001444:	40004400 	.word	0x40004400

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_DMA_Init+0x5c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <MX_DMA_Init+0x5c>)
 8001458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_DMA_Init+0x5c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2010      	movs	r0, #16
 8001470:	f001 f97b 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001474:	2010      	movs	r0, #16
 8001476:	f001 f994 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2011      	movs	r0, #17
 8001480:	f001 f973 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001484:	2011      	movs	r0, #17
 8001486:	f001 f98c 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	202f      	movs	r0, #47	; 0x2f
 8001490:	f001 f96b 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001494:	202f      	movs	r0, #47	; 0x2f
 8001496:	f001 f984 	bl	80027a2 <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b61      	ldr	r3, [pc, #388]	; (8001648 <MX_GPIO_Init+0x1a0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a60      	ldr	r2, [pc, #384]	; (8001648 <MX_GPIO_Init+0x1a0>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <MX_GPIO_Init+0x1a0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b5a      	ldr	r3, [pc, #360]	; (8001648 <MX_GPIO_Init+0x1a0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a59      	ldr	r2, [pc, #356]	; (8001648 <MX_GPIO_Init+0x1a0>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b57      	ldr	r3, [pc, #348]	; (8001648 <MX_GPIO_Init+0x1a0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b53      	ldr	r3, [pc, #332]	; (8001648 <MX_GPIO_Init+0x1a0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a52      	ldr	r2, [pc, #328]	; (8001648 <MX_GPIO_Init+0x1a0>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b50      	ldr	r3, [pc, #320]	; (8001648 <MX_GPIO_Init+0x1a0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <MX_GPIO_Init+0x1a0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a4b      	ldr	r2, [pc, #300]	; (8001648 <MX_GPIO_Init+0x1a0>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <MX_GPIO_Init+0x1a0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b45      	ldr	r3, [pc, #276]	; (8001648 <MX_GPIO_Init+0x1a0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a44      	ldr	r2, [pc, #272]	; (8001648 <MX_GPIO_Init+0x1a0>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b42      	ldr	r3, [pc, #264]	; (8001648 <MX_GPIO_Init+0x1a0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2120      	movs	r1, #32
 800154e:	483f      	ldr	r0, [pc, #252]	; (800164c <MX_GPIO_Init+0x1a4>)
 8001550:	f001 feee 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f24e 0104 	movw	r1, #57348	; 0xe004
 800155a:	483d      	ldr	r0, [pc, #244]	; (8001650 <MX_GPIO_Init+0x1a8>)
 800155c:	f001 fee8 	bl	8003330 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 8001560:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001566:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800156a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	4837      	ldr	r0, [pc, #220]	; (8001654 <MX_GPIO_Init+0x1ac>)
 8001578:	f001 fd3e 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800157c:	2320      	movs	r3, #32
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	482e      	ldr	r0, [pc, #184]	; (800164c <MX_GPIO_Init+0x1a4>)
 8001594:	f001 fd30 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8001598:	2302      	movs	r3, #2
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4829      	ldr	r0, [pc, #164]	; (8001650 <MX_GPIO_Init+0x1a8>)
 80015ac:	f001 fd24 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 80015b0:	f24e 0304 	movw	r3, #57348	; 0xe004
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4821      	ldr	r0, [pc, #132]	; (8001650 <MX_GPIO_Init+0x1a8>)
 80015ca:	f001 fd15 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 80015ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	481b      	ldr	r0, [pc, #108]	; (8001654 <MX_GPIO_Init+0x1ac>)
 80015e6:	f001 fd07 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <MX_GPIO_Init+0x1ac>)
 8001600:	f001 fcfa 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8001604:	2304      	movs	r3, #4
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001608:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <MX_GPIO_Init+0x1b0>)
 800161a:	f001 fced 	bl	8002ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2008      	movs	r0, #8
 8001624:	f001 f8a1 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001628:	2008      	movs	r0, #8
 800162a:	f001 f8ba 	bl	80027a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2028      	movs	r0, #40	; 0x28
 8001634:	f001 f899 	bl	800276a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001638:	2028      	movs	r0, #40	; 0x28
 800163a:	f001 f8b2 	bl	80027a2 <HAL_NVIC_EnableIRQ>

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40020800 	.word	0x40020800
 8001658:	40020c00 	.word	0x40020c00

0800165c <GrandStatumix>:

/* USER CODE BEGIN 4 */
////////// Grand State //////////////////////////////////////////////////////
void GrandStatumix(){
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 8001660:	4b62      	ldr	r3, [pc, #392]	; (80017ec <GrandStatumix+0x190>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <GrandStatumix+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166e:	4860      	ldr	r0, [pc, #384]	; (80017f0 <GrandStatumix+0x194>)
 8001670:	f001 fe5e 	bl	8003330 <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <GrandStatumix+0x190>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d005      	beq.n	8001688 <GrandStatumix+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001682:	485b      	ldr	r0, [pc, #364]	; (80017f0 <GrandStatumix+0x194>)
 8001684:	f001 fe54 	bl	8003330 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8001688:	4b58      	ldr	r3, [pc, #352]	; (80017ec <GrandStatumix+0x190>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d103      	bne.n	8001698 <GrandStatumix+0x3c>
 8001690:	4b56      	ldr	r3, [pc, #344]	; (80017ec <GrandStatumix+0x190>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d005      	beq.n	80016a4 <GrandStatumix+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169e:	4854      	ldr	r0, [pc, #336]	; (80017f0 <GrandStatumix+0x194>)
 80016a0:	f001 fe46 	bl	8003330 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 80016a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a8:	4852      	ldr	r0, [pc, #328]	; (80017f4 <GrandStatumix+0x198>)
 80016aa:	f001 fe29 	bl	8003300 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <GrandStatumix+0x19c>)
 80016b4:	701a      	strb	r2, [r3, #0]


	switch(grandState){
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <GrandStatumix+0x190>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d80b      	bhi.n	80016d8 <GrandStatumix+0x7c>
 80016c0:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <GrandStatumix+0x6c>)
 80016c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c6:	bf00      	nop
 80016c8:	08001719 	.word	0x08001719
 80016cc:	08001753 	.word	0x08001753
 80016d0:	080017b9 	.word	0x080017b9
 80016d4:	0800178f 	.word	0x0800178f
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016de:	4844      	ldr	r0, [pc, #272]	; (80017f0 <GrandStatumix+0x194>)
 80016e0:	f001 fe26 	bl	8003330 <HAL_GPIO_WritePin>
		PWMOut = 1200;
 80016e4:	4b45      	ldr	r3, [pc, #276]	; (80017fc <GrandStatumix+0x1a0>)
 80016e6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80016ea:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 1){grandState = emer;}
 80016ec:	4b44      	ldr	r3, [pc, #272]	; (8001800 <GrandStatumix+0x1a4>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <GrandStatumix+0x9e>
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <GrandStatumix+0x190>)
 80016f6:	2203      	movs	r2, #3
 80016f8:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 80016fa:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <GrandStatumix+0x19c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <GrandStatumix+0xac>
 8001702:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <GrandStatumix+0x190>)
 8001704:	2202      	movs	r2, #2
 8001706:	701a      	strb	r2, [r3, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 8001708:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <GrandStatumix+0x1a8>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d062      	beq.n	80017d6 <GrandStatumix+0x17a>
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <GrandStatumix+0x190>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
	break;
 8001716:	e05e      	b.n	80017d6 <GrandStatumix+0x17a>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171e:	4834      	ldr	r0, [pc, #208]	; (80017f0 <GrandStatumix+0x194>)
 8001720:	f001 fe06 	bl	8003330 <HAL_GPIO_WritePin>
		//LaserTrajex_workflow();

		if (pwr_sense == 1){
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <GrandStatumix+0x1a4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <GrandStatumix+0xde>
			grandState = emer;
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <GrandStatumix+0x190>)
 800172e:	2203      	movs	r2, #3
 8001730:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <GrandStatumix+0x1ac>)
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
		if (stop_sense == 0){
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <GrandStatumix+0x19c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d14b      	bne.n	80017da <GrandStatumix+0x17e>
			//PWMOut = 0;
			grandState = stopnd;
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <GrandStatumix+0x190>)
 8001744:	2204      	movs	r2, #4
 8001746:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <GrandStatumix+0x1ac>)
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
	break;
 8001750:	e043      	b.n	80017da <GrandStatumix+0x17e>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001758:	4825      	ldr	r0, [pc, #148]	; (80017f0 <GrandStatumix+0x194>)
 800175a:	f001 fde9 	bl	8003330 <HAL_GPIO_WritePin>
		PWMOut = 0;
 800175e:	4b27      	ldr	r3, [pc, #156]	; (80017fc <GrandStatumix+0x1a0>)
 8001760:	2200      	movs	r2, #0
 8001762:	801a      	strh	r2, [r3, #0]

		if (stop_sense == 1){
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <GrandStatumix+0x19c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d138      	bne.n	80017de <GrandStatumix+0x182>
			grandState = Ready;
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <GrandStatumix+0x190>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]

			mot_dirctn++;
 8001772:	4b26      	ldr	r3, [pc, #152]	; (800180c <GrandStatumix+0x1b0>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <GrandStatumix+0x1b0>)
 800177c:	701a      	strb	r2, [r3, #0]
			mot_dirctn%=2;
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <GrandStatumix+0x1b0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <GrandStatumix+0x1b0>)
 800178a:	701a      	strb	r2, [r3, #0]
		}
	break;
 800178c:	e027      	b.n	80017de <GrandStatumix+0x182>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	4816      	ldr	r0, [pc, #88]	; (80017f0 <GrandStatumix+0x194>)
 8001796:	f001 fdcb 	bl	8003330 <HAL_GPIO_WritePin>
			PWMOut = 0;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <GrandStatumix+0x1a0>)
 800179c:	2200      	movs	r2, #0
 800179e:	801a      	strh	r2, [r3, #0]
			Integral = 0;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <GrandStatumix+0x1b4>)
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

			if (stop_sense == 1){
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <GrandStatumix+0x19c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d118      	bne.n	80017e2 <GrandStatumix+0x186>
				grandState = work;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <GrandStatumix+0x190>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
			}
		break;
 80017b6:	e014      	b.n	80017e2 <GrandStatumix+0x186>

	case emer:
		ResetParam();
 80017b8:	f000 f82c 	bl	8001814 <ResetParam>
		// Reset every variables at control
		if (pwr_sense == 0){
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <GrandStatumix+0x1a4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d110      	bne.n	80017e6 <GrandStatumix+0x18a>
			grandState = Ready;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <GrandStatumix+0x190>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 80017ca:	2064      	movs	r0, #100	; 0x64
 80017cc:	f000 fece 	bl	800256c <HAL_Delay>
			IOExpenderInit();
 80017d0:	f000 f976 	bl	8001ac0 <IOExpenderInit>
		}
	break;
 80017d4:	e007      	b.n	80017e6 <GrandStatumix+0x18a>
	break;
 80017d6:	bf00      	nop
 80017d8:	e006      	b.n	80017e8 <GrandStatumix+0x18c>
	break;
 80017da:	bf00      	nop
 80017dc:	e004      	b.n	80017e8 <GrandStatumix+0x18c>
	break;
 80017de:	bf00      	nop
 80017e0:	e002      	b.n	80017e8 <GrandStatumix+0x18c>
		break;
 80017e2:	bf00      	nop
 80017e4:	e000      	b.n	80017e8 <GrandStatumix+0x18c>
	break;
 80017e6:	bf00      	nop
	}
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000350 	.word	0x20000350
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	20000352 	.word	0x20000352
 80017fc:	2000000a 	.word	0x2000000a
 8001800:	20000351 	.word	0x20000351
 8001804:	20000375 	.word	0x20000375
 8001808:	20000384 	.word	0x20000384
 800180c:	20000374 	.word	0x20000374
 8001810:	20000398 	.word	0x20000398

08001814 <ResetParam>:
		}
		break;
	}
}

void ResetParam(){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <ResetParam+0x44>)
 800181c:	2200      	movs	r2, #0
 800181e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	e008      	b.n	8001838 <ResetParam+0x24>
		positionlog[position_order] = -1;
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <ResetParam+0x48>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <ResetParam+0x4c>)
 800182e:	21ff      	movs	r1, #255	; 0xff
 8001830:	5499      	strb	r1, [r3, r2]
	for(int i = 0; i <= position_order; i++){
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <ResetParam+0x48>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4293      	cmp	r3, r2
 8001842:	ddf0      	ble.n	8001826 <ResetParam+0x12>
	}
	position_order = 0;
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <ResetParam+0x48>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	2000000a 	.word	0x2000000a
 800185c:	20000361 	.word	0x20000361
 8001860:	20000000 	.word	0x20000000

08001864 <PIDzero>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDzero(){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	CrrntTime = micros();
 8001868:	f000 fa76 	bl	8001d58 <micros>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7fe fd78 	bl	8000368 <__aeabi_ul2f>
 8001878:	4603      	mov	r3, r0
 800187a:	4a32      	ldr	r2, [pc, #200]	; (8001944 <PIDzero+0xe0>)
 800187c:	6013      	str	r3, [r2, #0]
	DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <PIDzero+0xe0>)
 8001880:	ed93 7a00 	vldr	s14, [r3]
 8001884:	4b30      	ldr	r3, [pc, #192]	; (8001948 <PIDzero+0xe4>)
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800188e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800194c <PIDzero+0xe8>
 8001892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001896:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <PIDzero+0xec>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
	PreviTime = CrrntTime; // log previ here for next loop
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <PIDzero+0xe0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a29      	ldr	r2, [pc, #164]	; (8001948 <PIDzero+0xe4>)
 80018a2:	6013      	str	r3, [r2, #0]

	ErrPos[0] = TargetDeg - BinPosXI;
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <PIDzero+0xf0>)
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <PIDzero+0xf4>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <PIDzero+0xf8>)
 80018bc:	edc3 7a00 	vstr	s15, [r3]

	Propo = K_P * ErrPos[0];
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <PIDzero+0xf8>)
 80018c2:	ed93 7a00 	vldr	s14, [r3]
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <PIDzero+0xfc>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d0:	4b24      	ldr	r3, [pc, #144]	; (8001964 <PIDzero+0x100>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]

	Integral = Integral + ( ErrPos[0] * DeltaTime ); // Integral -Newton-Leibniz
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <PIDzero+0xf8>)
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <PIDzero+0xec>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <PIDzero+0x104>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <PIDzero+0x104>)
 80018f2:	edc3 7a00 	vstr	s15, [r3]

	Derivate = (ErrPos[0]-ErrPos[1]) / DeltaTime; // d/dt position
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <PIDzero+0xf8>)
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <PIDzero+0xf8>)
 80018fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001902:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <PIDzero+0xec>)
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <PIDzero+0x108>)
 8001912:	edc3 7a00 	vstr	s15, [r3]

	u_contr = Propo + (K_I * Integral) ; // PID u[k] + (K_D * Derivate)
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <PIDzero+0x10c>)
 8001918:	ed93 7a00 	vldr	s14, [r3]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <PIDzero+0x104>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <PIDzero+0x100>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <PIDzero+0x110>)
 8001932:	edc3 7a00 	vstr	s15, [r3]

	ErrPos[1] = ErrPos[0]; // log previous error
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <PIDzero+0xf8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <PIDzero+0xf8>)
 800193c:	6053      	str	r3, [r2, #4]
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000390 	.word	0x20000390
 8001948:	20000388 	.word	0x20000388
 800194c:	49742400 	.word	0x49742400
 8001950:	2000038c 	.word	0x2000038c
 8001954:	20000378 	.word	0x20000378
 8001958:	2000036c 	.word	0x2000036c
 800195c:	2000037c 	.word	0x2000037c
 8001960:	2000000c 	.word	0x2000000c
 8001964:	20000394 	.word	0x20000394
 8001968:	20000398 	.word	0x20000398
 800196c:	2000039c 	.word	0x2000039c
 8001970:	20000010 	.word	0x20000010
 8001974:	20000384 	.word	0x20000384

08001978 <MotDrvCytron>:

void MotDrvCytron(){
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0

	//   direction chk
	if(u_contr < 0){mot_dirctn= 0;}
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <MotDrvCytron+0xb8>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	d503      	bpl.n	8001994 <MotDrvCytron+0x1c>
 800198c:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <MotDrvCytron+0xbc>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	e00e      	b.n	80019b2 <MotDrvCytron+0x3a>
	else if(u_contr > 0) {mot_dirctn = 1;}
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <MotDrvCytron+0xb8>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	dd03      	ble.n	80019ac <MotDrvCytron+0x34>
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <MotDrvCytron+0xbc>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e002      	b.n	80019b2 <MotDrvCytron+0x3a>
	else{PWMOut = 0;}
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <MotDrvCytron+0xc0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	801a      	strh	r2, [r3, #0]


	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MotDrvCytron+0xb8>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eef0 7ae7 	vabs.f32	s15, s15
 80019bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c0:	ee17 3a90 	vmov	r3, s15
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MotDrvCytron+0xc0>)
 80019c8:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MotDrvCytron+0xc0>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d903      	bls.n	80019de <MotDrvCytron+0x66>
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MotDrvCytron+0xc0>)
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	801a      	strh	r2, [r3, #0]
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MotDrvCytron+0xc0>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80019e6:	d20f      	bcs.n	8001a08 <MotDrvCytron+0x90>
 80019e8:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MotDrvCytron+0xc4>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eef0 7ae7 	vabs.f32	s15, s15
 80019f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80019f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	db03      	blt.n	8001a08 <MotDrvCytron+0x90>
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <MotDrvCytron+0xc0>)
 8001a02:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001a06:	801a      	strh	r2, [r3, #0]
	if(ErrPos[0] < 2){PWMOut = 0;}
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MotDrvCytron+0xc4>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d400      	bmi.n	8001a1e <MotDrvCytron+0xa6>
}
 8001a1c:	e002      	b.n	8001a24 <MotDrvCytron+0xac>
	if(ErrPos[0] < 2){PWMOut = 0;}
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MotDrvCytron+0xc0>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000384 	.word	0x20000384
 8001a34:	20000374 	.word	0x20000374
 8001a38:	2000000a 	.word	0x2000000a
 8001a3c:	2000037c 	.word	0x2000037c

08001a40 <GraytoBinario>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	460a      	mov	r2, r1
 8001a4a:	80fb      	strh	r3, [r7, #6]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	797b      	ldrb	r3, [r7, #5]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	fa42 f303 	asr.w	r3, r2, r3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 8001a66:	2301      	movs	r3, #1
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e01d      	b.n	8001aa8 <GraytoBinario+0x68>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8001a6c:	8afb      	ldrh	r3, [r7, #22]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	7979      	ldrb	r1, [r7, #5]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	1acb      	subs	r3, r1, r3
 8001a7e:	fa42 f303 	asr.w	r3, r2, r3
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d103      	bne.n	8001a98 <GraytoBinario+0x58>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 8001a90:	8afb      	ldrh	r3, [r7, #22]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	82fb      	strh	r3, [r7, #22]
 8001a96:	e004      	b.n	8001aa2 <GraytoBinario+0x62>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8001a98:	8afb      	ldrh	r3, [r7, #22]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	797b      	ldrb	r3, [r7, #5]
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbdd      	blt.n	8001a6c <GraytoBinario+0x2c>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8001ab0:	8afb      	ldrh	r3, [r7, #22]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <IOExpenderInit>:

void IOExpenderInit() {// call when start system
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 8001ac6:	2364      	movs	r3, #100	; 0x64
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	2316      	movs	r3, #22
 8001acc:	9301      	str	r3, [sp, #4]
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <IOExpenderInit+0x24>)
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <IOExpenderInit+0x28>)
 8001ada:	f001 fd9f 	bl	800361c <HAL_I2C_Mem_Write>
			0x16, 100);
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000028 	.word	0x20000028
 8001ae8:	2000006c 	.word	0x2000006c

08001aec <AbsEncI2CReadx>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af04      	add	r7, sp, #16
 8001af2:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8001af4:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <AbsEncI2CReadx+0xa4>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d044      	beq.n	8001b86 <AbsEncI2CReadx+0x9a>
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <AbsEncI2CReadx+0xa8>)
 8001afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d13e      	bne.n	8001b86 <AbsEncI2CReadx+0x9a>
		switch(flag_absenc){
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <AbsEncI2CReadx+0xa4>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d002      	beq.n	8001b16 <AbsEncI2CReadx+0x2a>
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d010      	beq.n	8001b36 <AbsEncI2CReadx+0x4a>
		default:
			break;
 8001b14:	e038      	b.n	8001b88 <AbsEncI2CReadx+0x9c>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8001b16:	2364      	movs	r3, #100	; 0x64
 8001b18:	9302      	str	r3, [sp, #8]
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2301      	movs	r3, #1
 8001b24:	2212      	movs	r2, #18
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	481a      	ldr	r0, [pc, #104]	; (8001b94 <AbsEncI2CReadx+0xa8>)
 8001b2a:	f001 fe71 	bl	8003810 <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <AbsEncI2CReadx+0xa4>)
 8001b30:	2202      	movs	r2, #2
 8001b32:	701a      	strb	r2, [r3, #0]
		break;
 8001b34:	e028      	b.n	8001b88 <AbsEncI2CReadx+0x9c>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <AbsEncI2CReadx+0xac>)
 8001b38:	785b      	ldrb	r3, [r3, #1]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <AbsEncI2CReadx+0xac>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <AbsEncI2CReadx+0xb0>)
 8001b4c:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <AbsEncI2CReadx+0xb0>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	210a      	movs	r1, #10
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff73 	bl	8001a40 <GraytoBinario>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f2a3 3341 	subw	r3, r3, #833	; 0x341
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <AbsEncI2CReadx+0xb4>)
 8001b64:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <AbsEncI2CReadx+0xb4>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6e:	d306      	bcc.n	8001b7e <AbsEncI2CReadx+0x92>
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <AbsEncI2CReadx+0xb4>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <AbsEncI2CReadx+0xb4>)
 8001b7c:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <AbsEncI2CReadx+0xa4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
		break;
 8001b84:	e000      	b.n	8001b88 <AbsEncI2CReadx+0x9c>
		}
	}
 8001b86:	bf00      	nop
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000036e 	.word	0x2000036e
 8001b94:	2000006c 	.word	0x2000006c
 8001b98:	20000368 	.word	0x20000368
 8001b9c:	2000036a 	.word	0x2000036a
 8001ba0:	2000036c 	.word	0x2000036c

08001ba4 <Efft_activate>:

/////////////////////// [End Effector] //////////////////////////////////
void Efft_activate(){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8001baa:	2345      	movs	r3, #69	; 0x45
 8001bac:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <Efft_activate+0x7c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d015      	beq.n	8001be2 <Efft_activate+0x3e>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <Efft_activate+0x80>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d029      	beq.n	8001c12 <Efft_activate+0x6e>
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <Efft_activate+0x84>)
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	d123      	bne.n	8001c12 <Efft_activate+0x6e>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8001bca:	1dfa      	adds	r2, r7, #7
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2146      	movs	r1, #70	; 0x46
 8001bd4:	4814      	ldr	r0, [pc, #80]	; (8001c28 <Efft_activate+0x84>)
 8001bd6:	f002 f841 	bl	8003c5c <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <Efft_activate+0x7c>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001be0:	e017      	b.n	8001c12 <Efft_activate+0x6e>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <Efft_activate+0x84>)
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d113      	bne.n	8001c16 <Efft_activate+0x72>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8001bee:	1dfa      	adds	r2, r7, #7
 8001bf0:	2320      	movs	r3, #32
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2146      	movs	r1, #70	; 0x46
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <Efft_activate+0x84>)
 8001bfa:	f002 f82f 	bl	8003c5c <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <Efft_activate+0x7c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <Efft_activate+0x80>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <Efft_activate+0x88>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001c10:	e001      	b.n	8001c16 <Efft_activate+0x72>
	break;
 8001c12:	bf00      	nop
 8001c14:	e000      	b.n	8001c18 <Efft_activate+0x74>
	break;
 8001c16:	bf00      	nop
	}

}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000418 	.word	0x20000418
 8001c24:	200003a1 	.word	0x200003a1
 8001c28:	200000c0 	.word	0x200000c0
 8001c2c:	200003a3 	.word	0x200003a3

08001c30 <Efft_read>:
void Efft_read(uint8_t *Rddata){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	6078      	str	r0, [r7, #4]


	uint8_t readRQ = 0x23;
 8001c38:	2323      	movs	r3, #35	; 0x23
 8001c3a:	73fb      	strb	r3, [r7, #15]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <Efft_read+0x7c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d016      	beq.n	8001c72 <Efft_read+0x42>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <Efft_read+0x80>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d027      	beq.n	8001c9c <Efft_read+0x6c>
 8001c4c:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <Efft_read+0x84>)
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d121      	bne.n	8001c9c <Efft_read+0x6c>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8001c58:	f107 020f 	add.w	r2, r7, #15
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2301      	movs	r3, #1
 8001c62:	2146      	movs	r1, #70	; 0x46
 8001c64:	4813      	ldr	r0, [pc, #76]	; (8001cb4 <Efft_read+0x84>)
 8001c66:	f001 fff9 	bl	8003c5c <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <Efft_read+0x7c>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001c70:	e014      	b.n	8001c9c <Efft_read+0x6c>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <Efft_read+0x84>)
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	d110      	bne.n	8001ca0 <Efft_read+0x70>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8001c7e:	2320      	movs	r3, #32
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	2146      	movs	r1, #70	; 0x46
 8001c88:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <Efft_read+0x84>)
 8001c8a:	f002 f8ad 	bl	8003de8 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <Efft_read+0x80>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <Efft_read+0x7c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
			}
	break;
 8001c9a:	e001      	b.n	8001ca0 <Efft_read+0x70>
	break;
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <Efft_read+0x72>
	break;
 8001ca0:	bf00      	nop
	}

}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000419 	.word	0x20000419
 8001cb0:	200003a2 	.word	0x200003a2
 8001cb4:	200000c0 	.word	0x200000c0

08001cb8 <HAL_GPIO_EXTI_Callback>:
	}//end sw chkM

}
*/
/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
	//// EMER ////
	if(GPIO_Pin == GPIO_PIN_11){
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_GPIO_EXTI_Callback+0x30>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		counter_e++;
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x88>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x88>)
 8001cd4:	701a      	strb	r2, [r3, #0]
		grandState = emer;
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001cd8:	2203      	movs	r2, #3
 8001cda:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x94>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//// Stop ////
	if(GPIO_Pin == GPIO_PIN_10){
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d10c      	bne.n	8001d0a <HAL_GPIO_EXTI_Callback+0x52>
		PWMOut = 0;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x94>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x90>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d102      	bne.n	8001d0a <HAL_GPIO_EXTI_Callback+0x52>
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001d06:	2204      	movs	r2, #4
 8001d08:	701a      	strb	r2, [r3, #0]
		//else{grandState = stop;}

		}
	//// work Blue button////
	if(GPIO_Pin == GPIO_PIN_13){
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d10:	d108      	bne.n	8001d24 <HAL_GPIO_EXTI_Callback+0x6c>
		bluecounter++;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x90>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x90>)
 8001d1c:	701a      	strb	r2, [r3, #0]
		flag_efftActi = 1;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x98>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
		//trig_efftRead = 1;
	}

	//// setzero ////
		if(GPIO_Pin == GPIO_PIN_2){
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d103      	bne.n	8001d32 <HAL_GPIO_EXTI_Callback+0x7a>
			TargetDeg = 0;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
		}
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000360 	.word	0x20000360
 8001d44:	20000350 	.word	0x20000350
 8001d48:	20000375 	.word	0x20000375
 8001d4c:	2000000a 	.word	0x2000000a
 8001d50:	200003a1 	.word	0x200003a1
 8001d54:	20000378 	.word	0x20000378

08001d58 <micros>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8001d58:	b4b0      	push	{r4, r5, r7}
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <micros+0x2c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	2200      	movs	r2, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	4611      	mov	r1, r2
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <micros+0x30>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	1884      	adds	r4, r0, r2
 8001d70:	eb41 0503 	adc.w	r5, r1, r3
 8001d74:	4622      	mov	r2, r4
 8001d76:	462b      	mov	r3, r5
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bcb0      	pop	{r4, r5, r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200001a4 	.word	0x200001a4
 8001d88:	20000358 	.word	0x20000358

08001d8c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d8c:	b4b0      	push	{r4, r5, r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10a      	bne.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001da6:	1854      	adds	r4, r2, r1
 8001da8:	f143 0500 	adc.w	r5, r3, #0
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001dae:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bcb0      	pop	{r4, r5, r7}
 8001dba:	4770      	bx	lr
 8001dbc:	200001a4 	.word	0x200001a4
 8001dc0:	20000358 	.word	0x20000358

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e0e:	2007      	movs	r0, #7
 8001e10:	f000 fca0 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_I2C_MspInit+0x168>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d13d      	bne.n	8001ebe <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e64:	2312      	movs	r3, #18
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e70:	2304      	movs	r3, #4
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4845      	ldr	r0, [pc, #276]	; (8001f90 <HAL_I2C_MspInit+0x170>)
 8001e7c:	f001 f8bc 	bl	8002ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	201f      	movs	r0, #31
 8001ea2:	f000 fc62 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ea6:	201f      	movs	r0, #31
 8001ea8:	f000 fc7b 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2020      	movs	r0, #32
 8001eb2:	f000 fc5a 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001eb6:	2020      	movs	r0, #32
 8001eb8:	f000 fc73 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ebc:	e060      	b.n	8001f80 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a34      	ldr	r2, [pc, #208]	; (8001f94 <HAL_I2C_MspInit+0x174>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d15b      	bne.n	8001f80 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001ed2:	f043 0304 	orr.w	r3, r3, #4
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f06:	2312      	movs	r3, #18
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f12:	2304      	movs	r3, #4
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	481e      	ldr	r0, [pc, #120]	; (8001f98 <HAL_I2C_MspInit+0x178>)
 8001f1e:	f001 f86b 	bl	8002ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f34:	2304      	movs	r3, #4
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4817      	ldr	r0, [pc, #92]	; (8001f9c <HAL_I2C_MspInit+0x17c>)
 8001f40:	f001 f85a 	bl	8002ff8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001f4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_I2C_MspInit+0x16c>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001f60:	2200      	movs	r2, #0
 8001f62:	2100      	movs	r1, #0
 8001f64:	2048      	movs	r0, #72	; 0x48
 8001f66:	f000 fc00 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001f6a:	2048      	movs	r0, #72	; 0x48
 8001f6c:	f000 fc19 	bl	80027a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2049      	movs	r0, #73	; 0x49
 8001f76:	f000 fbf8 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001f7a:	2049      	movs	r0, #73	; 0x49
 8001f7c:	f000 fc11 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 8001f80:	bf00      	nop
 8001f82:	3730      	adds	r7, #48	; 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40005c00 	.word	0x40005c00
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020000 	.word	0x40020000

08001fa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc0:	d15d      	bne.n	800207e <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	4b47      	ldr	r3, [pc, #284]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a3f      	ldr	r2, [pc, #252]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800200a:	2301      	movs	r3, #1
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 031c 	add.w	r3, r7, #28
 8002012:	4619      	mov	r1, r3
 8002014:	4834      	ldr	r0, [pc, #208]	; (80020e8 <HAL_TIM_Base_MspInit+0x148>)
 8002016:	f000 ffef 	bl	8002ff8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 800201c:	4a34      	ldr	r2, [pc, #208]	; (80020f0 <HAL_TIM_Base_MspInit+0x150>)
 800201e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002020:	4b32      	ldr	r3, [pc, #200]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 8002022:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002026:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800202e:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 8002030:	2200      	movs	r2, #0
 8002032:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 8002036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 800203e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002042:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002044:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 8002046:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800204a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800204c:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 800204e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002052:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 8002056:	2200      	movs	r2, #0
 8002058:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002060:	4822      	ldr	r0, [pc, #136]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 8002062:	f000 fbb9 	bl	80027d8 <HAL_DMA_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800206c:	f7ff feaa 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
 8002076:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_TIM_Base_MspInit+0x14c>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800207c:	e02e      	b.n	80020dc <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_TIM_Base_MspInit+0x154>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d10e      	bne.n	80020a6 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6413      	str	r3, [r2, #64]	; 0x40
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]
}
 80020a4:	e01a      	b.n	80020dc <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM11)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <HAL_TIM_Base_MspInit+0x158>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d115      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 80020ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020be:	6453      	str	r3, [r2, #68]	; 0x44
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_TIM_Base_MspInit+0x144>)
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	201a      	movs	r0, #26
 80020d2:	f000 fb4a 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80020d6:	201a      	movs	r0, #26
 80020d8:	f000 fb63 	bl	80027a2 <HAL_NVIC_EnableIRQ>
}
 80020dc:	bf00      	nop
 80020de:	3730      	adds	r7, #48	; 0x30
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	200001ec 	.word	0x200001ec
 80020f0:	40026088 	.word	0x40026088
 80020f4:	40000800 	.word	0x40000800
 80020f8:	40014800 	.word	0x40014800

080020fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_TIM_MspPostInit+0x68>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d11d      	bne.n	800215a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_TIM_MspPostInit+0x6c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 800213a:	2340      	movs	r3, #64	; 0x40
 800213c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800214a:	2302      	movs	r3, #2
 800214c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_TIM_MspPostInit+0x70>)
 8002156:	f000 ff4f 	bl	8002ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40000800 	.word	0x40000800
 8002168:	40023800 	.word	0x40023800
 800216c:	40020400 	.word	0x40020400

08002170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_UART_MspInit+0x14c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	f040 8090 	bne.w	80022b4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_UART_MspInit+0x150>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	4a48      	ldr	r2, [pc, #288]	; (80022c0 <HAL_UART_MspInit+0x150>)
 800219e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
 80021a4:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_UART_MspInit+0x150>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4b42      	ldr	r3, [pc, #264]	; (80022c0 <HAL_UART_MspInit+0x150>)
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	4a41      	ldr	r2, [pc, #260]	; (80022c0 <HAL_UART_MspInit+0x150>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6313      	str	r3, [r2, #48]	; 0x30
 80021c0:	4b3f      	ldr	r3, [pc, #252]	; (80022c0 <HAL_UART_MspInit+0x150>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021cc:	230c      	movs	r3, #12
 80021ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	2303      	movs	r3, #3
 80021da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021dc:	2307      	movs	r3, #7
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4837      	ldr	r0, [pc, #220]	; (80022c4 <HAL_UART_MspInit+0x154>)
 80021e8:	f000 ff06 	bl	8002ff8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_UART_MspInit+0x158>)
 80021ee:	4a37      	ldr	r2, [pc, #220]	; (80022cc <HAL_UART_MspInit+0x15c>)
 80021f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_UART_MspInit+0x158>)
 80021f4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80021f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_UART_MspInit+0x158>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_UART_MspInit+0x158>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_UART_MspInit+0x158>)
 8002208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800220c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220e:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_UART_MspInit+0x158>)
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <HAL_UART_MspInit+0x158>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_UART_MspInit+0x158>)
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <HAL_UART_MspInit+0x158>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_UART_MspInit+0x158>)
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800222c:	4826      	ldr	r0, [pc, #152]	; (80022c8 <HAL_UART_MspInit+0x158>)
 800222e:	f000 fad3 	bl	80027d8 <HAL_DMA_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002238:	f7ff fdc4 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_UART_MspInit+0x158>)
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
 8002242:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <HAL_UART_MspInit+0x158>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_UART_MspInit+0x160>)
 800224a:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <HAL_UART_MspInit+0x164>)
 800224c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_UART_MspInit+0x160>)
 8002250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002254:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_UART_MspInit+0x160>)
 8002258:	2240      	movs	r2, #64	; 0x40
 800225a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_UART_MspInit+0x160>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_UART_MspInit+0x160>)
 8002264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002268:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_UART_MspInit+0x160>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_UART_MspInit+0x160>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_UART_MspInit+0x160>)
 8002278:	2200      	movs	r2, #0
 800227a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_UART_MspInit+0x160>)
 800227e:	2200      	movs	r2, #0
 8002280:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_UART_MspInit+0x160>)
 8002284:	2200      	movs	r2, #0
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002288:	4811      	ldr	r0, [pc, #68]	; (80022d0 <HAL_UART_MspInit+0x160>)
 800228a:	f000 faa5 	bl	80027d8 <HAL_DMA_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002294:	f7ff fd96 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <HAL_UART_MspInit+0x160>)
 800229c:	635a      	str	r2, [r3, #52]	; 0x34
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_UART_MspInit+0x160>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	2026      	movs	r0, #38	; 0x26
 80022aa:	f000 fa5e 	bl	800276a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022ae:	2026      	movs	r0, #38	; 0x26
 80022b0:	f000 fa77 	bl	80027a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022b4:	bf00      	nop
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40004400 	.word	0x40004400
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	20000290 	.word	0x20000290
 80022cc:	400260b8 	.word	0x400260b8
 80022d0:	200002f0 	.word	0x200002f0
 80022d4:	400260a0 	.word	0x400260a0

080022d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <NMI_Handler+0x4>

080022de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <HardFault_Handler+0x4>

080022e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <MemManage_Handler+0x4>

080022ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002324:	f000 f902 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8002330:	2004      	movs	r0, #4
 8002332:	f001 f817 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <DMA1_Stream5_IRQHandler+0x10>)
 8002342:	f000 fbe1 	bl	8002b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200001ec 	.word	0x200001ec

08002350 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <DMA1_Stream6_IRQHandler+0x10>)
 8002356:	f000 fbd7 	bl	8002b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200002f0 	.word	0x200002f0

08002364 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800236a:	f004 fd78 	bl	8006e5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200001a4 	.word	0x200001a4

08002378 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <I2C1_EV_IRQHandler+0x10>)
 800237e:	f001 fe31 	bl	8003fe4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000006c 	.word	0x2000006c

0800238c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <I2C1_ER_IRQHandler+0x10>)
 8002392:	f001 ff98 	bl	80042c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	2000006c 	.word	0x2000006c

080023a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <USART2_IRQHandler+0x10>)
 80023a6:	f005 fe61 	bl	800806c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000024c 	.word	0x2000024c

080023b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 80023b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023bc:	f000 ffd2 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 80023c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80023c4:	f000 ffce 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80023c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023cc:	f000 ffca 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA1_Stream7_IRQHandler+0x10>)
 80023da:	f000 fb95 	bl	8002b08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000290 	.word	0x20000290

080023e8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <I2C3_EV_IRQHandler+0x10>)
 80023ee:	f001 fdf9 	bl	8003fe4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200000c0 	.word	0x200000c0

080023fc <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <I2C3_ER_IRQHandler+0x10>)
 8002402:	f001 ff60 	bl	80042c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200000c0 	.word	0x200000c0

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800246c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002438:	480d      	ldr	r0, [pc, #52]	; (8002470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800243a:	490e      	ldr	r1, [pc, #56]	; (8002474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800243c:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002450:	4c0b      	ldr	r4, [pc, #44]	; (8002480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800245e:	f7ff ffd7 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f006 fef3 	bl	800924c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7fe fd03 	bl	8000e70 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800246c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002478:	08009308 	.word	0x08009308
  ldr r2, =_sbss
 800247c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8002480:	20000420 	.word	0x20000420

08002484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 f94f 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 f808 	bl	80024cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fc88 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f967 	bl	80027be <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 f92f 	bl	800276a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000040 	.word	0x20000040
 8002524:	20000048 	.word	0x20000048
 8002528:	20000044 	.word	0x20000044

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000048 	.word	0x20000048
 8002550:	2000041c 	.word	0x2000041c

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	2000041c 	.word	0x2000041c

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_Delay+0x44>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffde 	bl	8002554 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000048 	.word	0x20000048

080025b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4907      	ldr	r1, [pc, #28]	; (8002650 <__NVIC_EnableIRQ+0x38>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002664:	2b00      	cmp	r3, #0
 8002666:	db0a      	blt.n	800267e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	b2da      	uxtb	r2, r3
 800266c:	490c      	ldr	r1, [pc, #48]	; (80026a0 <__NVIC_SetPriority+0x4c>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	0112      	lsls	r2, r2, #4
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	440b      	add	r3, r1
 8002678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800267c:	e00a      	b.n	8002694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4908      	ldr	r1, [pc, #32]	; (80026a4 <__NVIC_SetPriority+0x50>)
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	3b04      	subs	r3, #4
 800268c:	0112      	lsls	r2, r2, #4
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	440b      	add	r3, r1
 8002692:	761a      	strb	r2, [r3, #24]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000e100 	.word	0xe000e100
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f1c3 0307 	rsb	r3, r3, #7
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	bf28      	it	cs
 80026c6:	2304      	movcs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d902      	bls.n	80026d8 <NVIC_EncodePriority+0x30>
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3b03      	subs	r3, #3
 80026d6:	e000      	b.n	80026da <NVIC_EncodePriority+0x32>
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	f04f 32ff 	mov.w	r2, #4294967295
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	401a      	ands	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	43d9      	mvns	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	4313      	orrs	r3, r2
         );
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002720:	d301      	bcc.n	8002726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2301      	movs	r3, #1
 8002724:	e00f      	b.n	8002746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <SysTick_Config+0x40>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272e:	210f      	movs	r1, #15
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f7ff ff8e 	bl	8002654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <SysTick_Config+0x40>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	4b04      	ldr	r3, [pc, #16]	; (8002750 <SysTick_Config+0x40>)
 8002740:	2207      	movs	r2, #7
 8002742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	e000e010 	.word	0xe000e010

08002754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff29 	bl	80025b4 <__NVIC_SetPriorityGrouping>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800277c:	f7ff ff3e 	bl	80025fc <__NVIC_GetPriorityGrouping>
 8002780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f7ff ff8e 	bl	80026a8 <NVIC_EncodePriority>
 800278c:	4602      	mov	r2, r0
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff5d 	bl	8002654 <__NVIC_SetPriority>
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff31 	bl	8002618 <__NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff ffa2 	bl	8002710 <SysTick_Config>
 80027cc:	4603      	mov	r3, r0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff feb6 	bl	8002554 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e099      	b.n	8002928 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002814:	e00f      	b.n	8002836 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002816:	f7ff fe9d 	bl	8002554 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b05      	cmp	r3, #5
 8002822:	d908      	bls.n	8002836 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e078      	b.n	8002928 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e8      	bne.n	8002816 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4b38      	ldr	r3, [pc, #224]	; (8002930 <HAL_DMA_Init+0x158>)
 8002850:	4013      	ands	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	2b04      	cmp	r3, #4
 800288e:	d107      	bne.n	80028a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	4313      	orrs	r3, r2
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f023 0307 	bic.w	r3, r3, #7
 80028b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d117      	bne.n	80028fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00e      	beq.n	80028fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fb0f 	bl	8002f00 <DMA_CheckFifoParam>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2240      	movs	r2, #64	; 0x40
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028f6:	2301      	movs	r3, #1
 80028f8:	e016      	b.n	8002928 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fac6 	bl	8002e94 <DMA_CalcBaseAndBitshift>
 8002908:	4603      	mov	r3, r0
 800290a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	223f      	movs	r2, #63	; 0x3f
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	f010803f 	.word	0xf010803f

08002934 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_DMA_Start_IT+0x26>
 8002956:	2302      	movs	r3, #2
 8002958:	e040      	b.n	80029dc <HAL_DMA_Start_IT+0xa8>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d12f      	bne.n	80029ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2202      	movs	r2, #2
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fa58 	bl	8002e38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	223f      	movs	r2, #63	; 0x3f
 800298e:	409a      	lsls	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0216 	orr.w	r2, r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0208 	orr.w	r2, r2, #8
 80029ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	e005      	b.n	80029da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
 80029d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029da:	7dfb      	ldrb	r3, [r7, #23]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029f2:	f7ff fdaf 	bl	8002554 <HAL_GetTick>
 80029f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d008      	beq.n	8002a16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e052      	b.n	8002abc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0216 	bic.w	r2, r2, #22
 8002a24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <HAL_DMA_Abort+0x62>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0208 	bic.w	r2, r2, #8
 8002a54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a66:	e013      	b.n	8002a90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a68:	f7ff fd74 	bl	8002554 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d90c      	bls.n	8002a90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2203      	movs	r2, #3
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e015      	b.n	8002abc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e4      	bne.n	8002a68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	223f      	movs	r2, #63	; 0x3f
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2280      	movs	r2, #128	; 0x80
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00c      	b.n	8002afc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2205      	movs	r2, #5
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b14:	4b8e      	ldr	r3, [pc, #568]	; (8002d50 <HAL_DMA_IRQHandler+0x248>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a8e      	ldr	r2, [pc, #568]	; (8002d54 <HAL_DMA_IRQHandler+0x24c>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0a9b      	lsrs	r3, r3, #10
 8002b20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2208      	movs	r2, #8
 8002b34:	409a      	lsls	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01a      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2208      	movs	r2, #8
 8002b62:	409a      	lsls	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	2201      	movs	r2, #1
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d012      	beq.n	8002baa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2201      	movs	r2, #1
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	f043 0202 	orr.w	r2, r3, #2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	2204      	movs	r2, #4
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00b      	beq.n	8002be0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2204      	movs	r2, #4
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd8:	f043 0204 	orr.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be4:	2210      	movs	r2, #16
 8002be6:	409a      	lsls	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d043      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d03c      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2210      	movs	r2, #16
 8002c04:	409a      	lsls	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d018      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d108      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d024      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
 8002c36:	e01f      	b.n	8002c78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01b      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
 8002c48:	e016      	b.n	8002c78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d107      	bne.n	8002c68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0208 	bic.w	r2, r2, #8
 8002c66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 808f 	beq.w	8002da8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8087 	beq.w	8002da8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d136      	bne.n	8002d20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0216 	bic.w	r2, r2, #22
 8002cc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d103      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x1da>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0208 	bic.w	r2, r2, #8
 8002cf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf6:	223f      	movs	r2, #63	; 0x3f
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d07e      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
        }
        return;
 8002d1e:	e079      	b.n	8002e14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01d      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d031      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
 8002d4c:	e02c      	b.n	8002da8 <HAL_DMA_IRQHandler+0x2a0>
 8002d4e:	bf00      	nop
 8002d50:	20000040 	.word	0x20000040
 8002d54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
 8002d68:	e01e      	b.n	8002da8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10f      	bne.n	8002d98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0210 	bic.w	r2, r2, #16
 8002d86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d032      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d022      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2205      	movs	r2, #5
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d307      	bcc.n	8002df0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f2      	bne.n	8002dd4 <HAL_DMA_IRQHandler+0x2cc>
 8002dee:	e000      	b.n	8002df2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002df0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
 8002e12:	e000      	b.n	8002e16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e14:	bf00      	nop
    }
  }
}
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e2a:	b2db      	uxtb	r3, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b40      	cmp	r3, #64	; 0x40
 8002e64:	d108      	bne.n	8002e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e76:	e007      	b.n	8002e88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3b10      	subs	r3, #16
 8002ea4:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <DMA_CalcBaseAndBitshift+0x64>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eae:	4a13      	ldr	r2, [pc, #76]	; (8002efc <DMA_CalcBaseAndBitshift+0x68>)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d909      	bls.n	8002ed6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	1d1a      	adds	r2, r3, #4
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ed4:	e007      	b.n	8002ee6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ede:	f023 0303 	bic.w	r3, r3, #3
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	aaaaaaab 	.word	0xaaaaaaab
 8002efc:	080092f0 	.word	0x080092f0

08002f00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d11f      	bne.n	8002f5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d856      	bhi.n	8002fce <DMA_CheckFifoParam+0xce>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <DMA_CheckFifoParam+0x28>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f39 	.word	0x08002f39
 8002f2c:	08002f4b 	.word	0x08002f4b
 8002f30:	08002f39 	.word	0x08002f39
 8002f34:	08002fcf 	.word	0x08002fcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d046      	beq.n	8002fd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f48:	e043      	b.n	8002fd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f52:	d140      	bne.n	8002fd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f58:	e03d      	b.n	8002fd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	d121      	bne.n	8002fa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d837      	bhi.n	8002fda <DMA_CheckFifoParam+0xda>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <DMA_CheckFifoParam+0x70>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002f81 	.word	0x08002f81
 8002f74:	08002f87 	.word	0x08002f87
 8002f78:	08002f81 	.word	0x08002f81
 8002f7c:	08002f99 	.word	0x08002f99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      break;
 8002f84:	e030      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d025      	beq.n	8002fde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f96:	e022      	b.n	8002fde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa0:	d11f      	bne.n	8002fe2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fa6:	e01c      	b.n	8002fe2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d903      	bls.n	8002fb6 <DMA_CheckFifoParam+0xb6>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d003      	beq.n	8002fbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb4:	e018      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fba:	e015      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00e      	beq.n	8002fe6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      break;
 8002fcc:	e00b      	b.n	8002fe6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e00a      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e008      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e006      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e004      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e002      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
    }
  } 
  
  return status; 
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop

08002ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e159      	b.n	80032c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003014:	2201      	movs	r2, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	429a      	cmp	r2, r3
 800302e:	f040 8148 	bne.w	80032c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d005      	beq.n	800304a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003046:	2b02      	cmp	r3, #2
 8003048:	d130      	bne.n	80030ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	2203      	movs	r2, #3
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003080:	2201      	movs	r2, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 0201 	and.w	r2, r3, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d017      	beq.n	80030e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d123      	bne.n	800313c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	08da      	lsrs	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3208      	adds	r2, #8
 8003136:	69b9      	ldr	r1, [r7, #24]
 8003138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	2203      	movs	r2, #3
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0203 	and.w	r2, r3, #3
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a2 	beq.w	80032c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <HAL_GPIO_Init+0x2e8>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	4a56      	ldr	r2, [pc, #344]	; (80032e0 <HAL_GPIO_Init+0x2e8>)
 8003188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318c:	6453      	str	r3, [r2, #68]	; 0x44
 800318e:	4b54      	ldr	r3, [pc, #336]	; (80032e0 <HAL_GPIO_Init+0x2e8>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800319a:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_GPIO_Init+0x2ec>)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3302      	adds	r3, #2
 80031a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	220f      	movs	r2, #15
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a49      	ldr	r2, [pc, #292]	; (80032e8 <HAL_GPIO_Init+0x2f0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d019      	beq.n	80031fa <HAL_GPIO_Init+0x202>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a48      	ldr	r2, [pc, #288]	; (80032ec <HAL_GPIO_Init+0x2f4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_GPIO_Init+0x1fe>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a47      	ldr	r2, [pc, #284]	; (80032f0 <HAL_GPIO_Init+0x2f8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00d      	beq.n	80031f2 <HAL_GPIO_Init+0x1fa>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a46      	ldr	r2, [pc, #280]	; (80032f4 <HAL_GPIO_Init+0x2fc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <HAL_GPIO_Init+0x1f6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a45      	ldr	r2, [pc, #276]	; (80032f8 <HAL_GPIO_Init+0x300>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_GPIO_Init+0x1f2>
 80031e6:	2304      	movs	r3, #4
 80031e8:	e008      	b.n	80031fc <HAL_GPIO_Init+0x204>
 80031ea:	2307      	movs	r3, #7
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x204>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e004      	b.n	80031fc <HAL_GPIO_Init+0x204>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e002      	b.n	80031fc <HAL_GPIO_Init+0x204>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_GPIO_Init+0x204>
 80031fa:	2300      	movs	r3, #0
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	4093      	lsls	r3, r2
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320c:	4935      	ldr	r1, [pc, #212]	; (80032e4 <HAL_GPIO_Init+0x2ec>)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	089b      	lsrs	r3, r3, #2
 8003212:	3302      	adds	r3, #2
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_GPIO_Init+0x304>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323e:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <HAL_GPIO_Init+0x304>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_GPIO_Init+0x304>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003268:	4a24      	ldr	r2, [pc, #144]	; (80032fc <HAL_GPIO_Init+0x304>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <HAL_GPIO_Init+0x304>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003292:	4a1a      	ldr	r2, [pc, #104]	; (80032fc <HAL_GPIO_Init+0x304>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003298:	4b18      	ldr	r3, [pc, #96]	; (80032fc <HAL_GPIO_Init+0x304>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032bc:	4a0f      	ldr	r2, [pc, #60]	; (80032fc <HAL_GPIO_Init+0x304>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3301      	adds	r3, #1
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2b0f      	cmp	r3, #15
 80032cc:	f67f aea2 	bls.w	8003014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3724      	adds	r7, #36	; 0x24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40013800 	.word	0x40013800
 80032e8:	40020000 	.word	0x40020000
 80032ec:	40020400 	.word	0x40020400
 80032f0:	40020800 	.word	0x40020800
 80032f4:	40020c00 	.word	0x40020c00
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40013c00 	.word	0x40013c00

08003300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	e001      	b.n	8003322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800334c:	e003      	b.n	8003356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	041a      	lsls	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fc98 	bl	8001cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e12b      	b.n	80035fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe fd30 	bl	8001e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033f8:	f003 fa9a 	bl	8006930 <HAL_RCC_GetPCLK1Freq>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a81      	ldr	r2, [pc, #516]	; (8003608 <HAL_I2C_Init+0x274>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d807      	bhi.n	8003418 <HAL_I2C_Init+0x84>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a80      	ldr	r2, [pc, #512]	; (800360c <HAL_I2C_Init+0x278>)
 800340c:	4293      	cmp	r3, r2
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e006      	b.n	8003426 <HAL_I2C_Init+0x92>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a7d      	ldr	r2, [pc, #500]	; (8003610 <HAL_I2C_Init+0x27c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	bf94      	ite	ls
 8003420:	2301      	movls	r3, #1
 8003422:	2300      	movhi	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0e7      	b.n	80035fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a78      	ldr	r2, [pc, #480]	; (8003614 <HAL_I2C_Init+0x280>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9b      	lsrs	r3, r3, #18
 8003438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a6a      	ldr	r2, [pc, #424]	; (8003608 <HAL_I2C_Init+0x274>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d802      	bhi.n	8003468 <HAL_I2C_Init+0xd4>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	e009      	b.n	800347c <HAL_I2C_Init+0xe8>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	4a69      	ldr	r2, [pc, #420]	; (8003618 <HAL_I2C_Init+0x284>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	3301      	adds	r3, #1
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	430b      	orrs	r3, r1
 8003482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800348e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	495c      	ldr	r1, [pc, #368]	; (8003608 <HAL_I2C_Init+0x274>)
 8003498:	428b      	cmp	r3, r1
 800349a:	d819      	bhi.n	80034d0 <HAL_I2C_Init+0x13c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034b0:	400b      	ands	r3, r1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_I2C_Init+0x138>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e59      	subs	r1, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ca:	e051      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e04f      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d111      	bne.n	80034fc <HAL_I2C_Init+0x168>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e012      	b.n	8003522 <HAL_I2C_Init+0x18e>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e58      	subs	r0, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	0099      	lsls	r1, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Init+0x196>
 8003526:	2301      	movs	r3, #1
 8003528:	e022      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10e      	bne.n	8003550 <HAL_I2C_Init+0x1bc>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e58      	subs	r0, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	440b      	add	r3, r1
 8003540:	fbb0 f3f3 	udiv	r3, r0, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354e:	e00f      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6809      	ldr	r1, [r1, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800359e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6911      	ldr	r1, [r2, #16]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	000186a0 	.word	0x000186a0
 800360c:	001e847f 	.word	0x001e847f
 8003610:	003d08ff 	.word	0x003d08ff
 8003614:	431bde83 	.word	0x431bde83
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af02      	add	r7, sp, #8
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	4608      	mov	r0, r1
 8003626:	4611      	mov	r1, r2
 8003628:	461a      	mov	r2, r3
 800362a:	4603      	mov	r3, r0
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	460b      	mov	r3, r1
 8003630:	813b      	strh	r3, [r7, #8]
 8003632:	4613      	mov	r3, r2
 8003634:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003636:	f7fe ff8d 	bl	8002554 <HAL_GetTick>
 800363a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b20      	cmp	r3, #32
 8003646:	f040 80d9 	bne.w	80037fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2319      	movs	r3, #25
 8003650:	2201      	movs	r2, #1
 8003652:	496d      	ldr	r1, [pc, #436]	; (8003808 <HAL_I2C_Mem_Write+0x1ec>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f002 fad1 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003660:	2302      	movs	r3, #2
 8003662:	e0cc      	b.n	80037fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Mem_Write+0x56>
 800366e:	2302      	movs	r3, #2
 8003670:	e0c5      	b.n	80037fe <HAL_I2C_Mem_Write+0x1e2>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d007      	beq.n	8003698 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2221      	movs	r2, #33	; 0x21
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a4d      	ldr	r2, [pc, #308]	; (800380c <HAL_I2C_Mem_Write+0x1f0>)
 80036d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036da:	88f8      	ldrh	r0, [r7, #6]
 80036dc:	893a      	ldrh	r2, [r7, #8]
 80036de:	8979      	ldrh	r1, [r7, #10]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4603      	mov	r3, r0
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f002 f860 	bl	80057b0 <I2C_RequestMemoryWrite>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d052      	beq.n	800379c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e081      	b.n	80037fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f002 fb52 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00d      	beq.n	8003726 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b04      	cmp	r3, #4
 8003710:	d107      	bne.n	8003722 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003720:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e06b      	b.n	80037fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b04      	cmp	r3, #4
 8003762:	d11b      	bne.n	800379c <HAL_I2C_Mem_Write+0x180>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d017      	beq.n	800379c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1aa      	bne.n	80036fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f002 fb3e 	bl	8005e2a <I2C_WaitOnBTFFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d107      	bne.n	80037cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e016      	b.n	80037fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	00100002 	.word	0x00100002
 800380c:	ffff0000 	.word	0xffff0000

08003810 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08c      	sub	sp, #48	; 0x30
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	4608      	mov	r0, r1
 800381a:	4611      	mov	r1, r2
 800381c:	461a      	mov	r2, r3
 800381e:	4603      	mov	r3, r0
 8003820:	817b      	strh	r3, [r7, #10]
 8003822:	460b      	mov	r3, r1
 8003824:	813b      	strh	r3, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800382a:	f7fe fe93 	bl	8002554 <HAL_GetTick>
 800382e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b20      	cmp	r3, #32
 800383a:	f040 8208 	bne.w	8003c4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2319      	movs	r3, #25
 8003844:	2201      	movs	r2, #1
 8003846:	497b      	ldr	r1, [pc, #492]	; (8003a34 <HAL_I2C_Mem_Read+0x224>)
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f002 f9d7 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
 8003856:	e1fb      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_I2C_Mem_Read+0x56>
 8003862:	2302      	movs	r3, #2
 8003864:	e1f4      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d007      	beq.n	800388c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2222      	movs	r2, #34	; 0x22
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2240      	movs	r2, #64	; 0x40
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a5b      	ldr	r2, [pc, #364]	; (8003a38 <HAL_I2C_Mem_Read+0x228>)
 80038cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ce:	88f8      	ldrh	r0, [r7, #6]
 80038d0:	893a      	ldrh	r2, [r7, #8]
 80038d2:	8979      	ldrh	r1, [r7, #10]
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4603      	mov	r3, r0
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f001 fffc 	bl	80058dc <I2C_RequestMemoryRead>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e1b0      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d113      	bne.n	800391e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e184      	b.n	8003c28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	2b01      	cmp	r3, #1
 8003924:	d11b      	bne.n	800395e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003934:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e164      	b.n	8003c28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	2b02      	cmp	r3, #2
 8003964:	d11b      	bne.n	800399e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	e144      	b.n	8003c28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039b4:	e138      	b.n	8003c28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	f200 80f1 	bhi.w	8003ba2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d123      	bne.n	8003a10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f002 fa9f 	bl	8005f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e139      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a0e:	e10b      	b.n	8003c28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d14e      	bne.n	8003ab6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	2200      	movs	r2, #0
 8003a20:	4906      	ldr	r1, [pc, #24]	; (8003a3c <HAL_I2C_Mem_Read+0x22c>)
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f002 f8ea 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e10e      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
 8003a32:	bf00      	nop
 8003a34:	00100002 	.word	0x00100002
 8003a38:	ffff0000 	.word	0xffff0000
 8003a3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ab4:	e0b8      	b.n	8003c28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	2200      	movs	r2, #0
 8003abe:	4966      	ldr	r1, [pc, #408]	; (8003c58 <HAL_I2C_Mem_Read+0x448>)
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f002 f89b 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0bf      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2200      	movs	r2, #0
 8003b1a:	494f      	ldr	r1, [pc, #316]	; (8003c58 <HAL_I2C_Mem_Read+0x448>)
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f002 f86d 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e091      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba0:	e042      	b.n	8003c28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f002 f9b2 	bl	8005f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e04c      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d118      	bne.n	8003c28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f47f aec2 	bne.w	80039b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e000      	b.n	8003c50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
  }
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3728      	adds	r7, #40	; 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	00010004 	.word	0x00010004

08003c5c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	460b      	mov	r3, r1
 8003c6a:	817b      	strh	r3, [r7, #10]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	f040 80a6 	bne.w	8003dd2 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c94:	d005      	beq.n	8003ca2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d002      	beq.n	8003ca2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d130      	bne.n	8003d04 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ca2:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	4a4e      	ldr	r2, [pc, #312]	; (8003de4 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0a1a      	lsrs	r2, r3, #8
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009a      	lsls	r2, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d116      	bne.n	8003cf6 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0220 	orr.w	r2, r3, #32
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06e      	b.n	8003dd4 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d0db      	beq.n	8003cbc <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e060      	b.n	8003dd4 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d007      	beq.n	8003d38 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2221      	movs	r2, #33	; 0x21
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2210      	movs	r2, #16
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	893a      	ldrh	r2, [r7, #8]
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003d7a:	897a      	ldrh	r2, [r7, #10]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b11      	cmp	r3, #17
 8003d8a:	d10c      	bne.n	8003da6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d92:	d003      	beq.n	8003d9c <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d9a:	d101      	bne.n	8003da0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d107      	bne.n	8003db6 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003dcc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000040 	.word	0x20000040
 8003de4:	14f8b589 	.word	0x14f8b589

08003de8 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	461a      	mov	r2, r3
 8003df4:	460b      	mov	r3, r1
 8003df6:	817b      	strh	r3, [r7, #10]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003e08:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	f040 80da 	bne.w	8003fcc <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e26:	d005      	beq.n	8003e34 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d002      	beq.n	8003e34 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d130      	bne.n	8003e96 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e34:	4b69      	ldr	r3, [pc, #420]	; (8003fdc <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	08db      	lsrs	r3, r3, #3
 8003e3a:	4a69      	ldr	r2, [pc, #420]	; (8003fe0 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	0a1a      	lsrs	r2, r3, #8
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009a      	lsls	r2, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d116      	bne.n	8003e88 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0a2      	b.n	8003fce <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d0db      	beq.n	8003e4e <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e094      	b.n	8003fce <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d007      	beq.n	8003eca <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2222      	movs	r2, #34	; 0x22
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	893a      	ldrh	r2, [r7, #8]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f0c:	897a      	ldrh	r2, [r7, #10]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d126      	bne.n	8003f70 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d002      	beq.n	8003f2e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d120      	bne.n	8003f70 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b12      	cmp	r3, #18
 8003f32:	d114      	bne.n	8003f5e <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f42:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f52:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f5a:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003f5c:	e010      	b.n	8003f80 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f6c:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8003f6e:	e007      	b.n	8003f80 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f7e:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b12      	cmp	r3, #18
 8003f84:	d10c      	bne.n	8003fa0 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f8c:	d003      	beq.n	8003f96 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fae:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69fa      	ldr	r2, [r7, #28]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000040 	.word	0x20000040
 8003fe0:	14f8b589 	.word	0x14f8b589

08003fe4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004004:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d003      	beq.n	800401c <HAL_I2C_EV_IRQHandler+0x38>
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	f040 80c1 	bne.w	800419e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10d      	bne.n	8004052 <HAL_I2C_EV_IRQHandler+0x6e>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800403c:	d003      	beq.n	8004046 <HAL_I2C_EV_IRQHandler+0x62>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004044:	d101      	bne.n	800404a <HAL_I2C_EV_IRQHandler+0x66>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_I2C_EV_IRQHandler+0x68>
 800404a:	2300      	movs	r3, #0
 800404c:	2b01      	cmp	r3, #1
 800404e:	f000 8132 	beq.w	80042b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00c      	beq.n	8004076 <HAL_I2C_EV_IRQHandler+0x92>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d006      	beq.n	8004076 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 ffd6 	bl	800601a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fd83 	bl	8004b7a <I2C_Master_SB>
 8004074:	e092      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	08db      	lsrs	r3, r3, #3
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_I2C_EV_IRQHandler+0xb2>
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fdf9 	bl	8004c86 <I2C_Master_ADD10>
 8004094:	e082      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	0a5b      	lsrs	r3, r3, #9
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fe13 	bl	8004cda <I2C_Master_ADDR>
 80040b4:	e072      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03b      	beq.n	800413a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d0:	f000 80f3 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	09db      	lsrs	r3, r3, #7
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00f      	beq.n	8004100 <HAL_I2C_EV_IRQHandler+0x11c>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	0a9b      	lsrs	r3, r3, #10
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_I2C_EV_IRQHandler+0x11c>
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f9f3 	bl	80044e4 <I2C_MasterTransmit_TXE>
 80040fe:	e04d      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80d6 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	0a5b      	lsrs	r3, r3, #9
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80cf 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800411c:	7bbb      	ldrb	r3, [r7, #14]
 800411e:	2b21      	cmp	r3, #33	; 0x21
 8004120:	d103      	bne.n	800412a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fa7a 	bl	800461c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004128:	e0c7      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	f040 80c4 	bne.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fae8 	bl	8004708 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004138:	e0bf      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004148:	f000 80b7 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	099b      	lsrs	r3, r3, #6
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00f      	beq.n	8004178 <HAL_I2C_EV_IRQHandler+0x194>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	0a9b      	lsrs	r3, r3, #10
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_I2C_EV_IRQHandler+0x194>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d103      	bne.n	8004178 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fb5d 	bl	8004830 <I2C_MasterReceive_RXNE>
 8004176:	e011      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 809a 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	0a5b      	lsrs	r3, r3, #9
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8093 	beq.w	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fc06 	bl	80049a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800419a:	e08e      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
 800419c:	e08d      	b.n	80042ba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e007      	b.n	80041c0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d012      	beq.n	80041f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	0a5b      	lsrs	r3, r3, #9
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 ffc4 	bl	8005178 <I2C_Slave_ADDR>
 80041f0:	e066      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x22e>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	0a5b      	lsrs	r3, r3, #9
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fffe 	bl	800520c <I2C_Slave_STOPF>
 8004210:	e056      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004212:	7bbb      	ldrb	r3, [r7, #14]
 8004214:	2b21      	cmp	r3, #33	; 0x21
 8004216:	d002      	beq.n	800421e <HAL_I2C_EV_IRQHandler+0x23a>
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	2b29      	cmp	r3, #41	; 0x29
 800421c:	d125      	bne.n	800426a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	09db      	lsrs	r3, r3, #7
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00f      	beq.n	800424a <HAL_I2C_EV_IRQHandler+0x266>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	0a9b      	lsrs	r3, r3, #10
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_I2C_EV_IRQHandler+0x266>
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 feda 	bl	8004ffc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004248:	e039      	b.n	80042be <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d033      	beq.n	80042be <HAL_I2C_EV_IRQHandler+0x2da>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	0a5b      	lsrs	r3, r3, #9
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d02d      	beq.n	80042be <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 ff07 	bl	8005076 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004268:	e029      	b.n	80042be <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	099b      	lsrs	r3, r3, #6
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00f      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	0a9b      	lsrs	r3, r3, #10
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	089b      	lsrs	r3, r3, #2
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 ff12 	bl	80050b8 <I2C_SlaveReceive_RXNE>
 8004294:	e014      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00e      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	0a5b      	lsrs	r3, r3, #9
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 ff40 	bl	8005134 <I2C_SlaveReceive_BTF>
 80042b4:	e004      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b08a      	sub	sp, #40	; 0x28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042de:	2300      	movs	r3, #0
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <HAL_I2C_ER_IRQHandler+0x4e>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004312:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	0a5b      	lsrs	r3, r3, #9
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <HAL_I2C_ER_IRQHandler+0x78>
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800433c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	0a9b      	lsrs	r3, r3, #10
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d03f      	beq.n	80043ca <HAL_I2C_ER_IRQHandler+0x104>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	0a1b      	lsrs	r3, r3, #8
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d039      	beq.n	80043ca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004356:	7efb      	ldrb	r3, [r7, #27]
 8004358:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004370:	7ebb      	ldrb	r3, [r7, #26]
 8004372:	2b20      	cmp	r3, #32
 8004374:	d112      	bne.n	800439c <HAL_I2C_ER_IRQHandler+0xd6>
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <HAL_I2C_ER_IRQHandler+0xd6>
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	2b21      	cmp	r3, #33	; 0x21
 8004380:	d008      	beq.n	8004394 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004382:	7cfb      	ldrb	r3, [r7, #19]
 8004384:	2b29      	cmp	r3, #41	; 0x29
 8004386:	d005      	beq.n	8004394 <HAL_I2C_ER_IRQHandler+0xce>
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	2b28      	cmp	r3, #40	; 0x28
 800438c:	d106      	bne.n	800439c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b21      	cmp	r3, #33	; 0x21
 8004392:	d103      	bne.n	800439c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f001 f869 	bl	800546c <I2C_Slave_AF>
 800439a:	e016      	b.n	80043ca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	f043 0304 	orr.w	r3, r3, #4
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043ae:	7efb      	ldrb	r3, [r7, #27]
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d002      	beq.n	80043ba <HAL_I2C_ER_IRQHandler+0xf4>
 80043b4:	7efb      	ldrb	r3, [r7, #27]
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d107      	bne.n	80043ca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	0adb      	lsrs	r3, r3, #11
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00e      	beq.n	80043f4 <HAL_I2C_ER_IRQHandler+0x12e>
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	0a1b      	lsrs	r3, r3, #8
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	f043 0308 	orr.w	r3, r3, #8
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80043f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f001 f8a0 	bl	800554c <I2C_ITError>
  }
}
 800440c:	bf00      	nop
 800440e:	3728      	adds	r7, #40	; 0x28
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
 8004470:	4613      	mov	r3, r2
 8004472:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d150      	bne.n	80045ac <I2C_MasterTransmit_TXE+0xc8>
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b21      	cmp	r3, #33	; 0x21
 800450e:	d14d      	bne.n	80045ac <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b08      	cmp	r3, #8
 8004514:	d01d      	beq.n	8004552 <I2C_MasterTransmit_TXE+0x6e>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b20      	cmp	r3, #32
 800451a:	d01a      	beq.n	8004552 <I2C_MasterTransmit_TXE+0x6e>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004522:	d016      	beq.n	8004552 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004532:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2211      	movs	r2, #17
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff62 	bl	8004414 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004550:	e060      	b.n	8004614 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004560:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004570:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d107      	bne.n	800459c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ff7d 	bl	8004494 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800459a:	e03b      	b.n	8004614 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff35 	bl	8004414 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045aa:	e033      	b.n	8004614 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b21      	cmp	r3, #33	; 0x21
 80045b0:	d005      	beq.n	80045be <I2C_MasterTransmit_TXE+0xda>
 80045b2:	7bbb      	ldrb	r3, [r7, #14]
 80045b4:	2b40      	cmp	r3, #64	; 0x40
 80045b6:	d12d      	bne.n	8004614 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b22      	cmp	r3, #34	; 0x22
 80045bc:	d12a      	bne.n	8004614 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d108      	bne.n	80045da <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045d8:	e01c      	b.n	8004614 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d103      	bne.n	80045ee <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f88e 	bl	8004708 <I2C_MemoryTransmit_TXE_BTF>
}
 80045ec:	e012      	b.n	8004614 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004612:	e7ff      	b.n	8004614 <I2C_MasterTransmit_TXE+0x130>
 8004614:	bf00      	nop
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b21      	cmp	r3, #33	; 0x21
 8004634:	d164      	bne.n	8004700 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d012      	beq.n	8004666 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004664:	e04c      	b.n	8004700 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d01d      	beq.n	80046a8 <I2C_MasterTransmit_BTF+0x8c>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b20      	cmp	r3, #32
 8004670:	d01a      	beq.n	80046a8 <I2C_MasterTransmit_BTF+0x8c>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004678:	d016      	beq.n	80046a8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004688:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2211      	movs	r2, #17
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff feb7 	bl	8004414 <HAL_I2C_MasterTxCpltCallback>
}
 80046a6:	e02b      	b.n	8004700 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d107      	bne.n	80046f2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fed2 	bl	8004494 <HAL_I2C_MemTxCpltCallback>
}
 80046f0:	e006      	b.n	8004700 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fe8a 	bl	8004414 <HAL_I2C_MasterTxCpltCallback>
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471c:	2b00      	cmp	r3, #0
 800471e:	d11d      	bne.n	800475c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10b      	bne.n	8004740 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472c:	b2da      	uxtb	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800473e:	e073      	b.n	8004828 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	b29b      	uxth	r3, r3
 8004746:	121b      	asrs	r3, r3, #8
 8004748:	b2da      	uxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	651a      	str	r2, [r3, #80]	; 0x50
}
 800475a:	e065      	b.n	8004828 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10b      	bne.n	800477c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004768:	b2da      	uxtb	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	651a      	str	r2, [r3, #80]	; 0x50
}
 800477a:	e055      	b.n	8004828 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004780:	2b02      	cmp	r3, #2
 8004782:	d151      	bne.n	8004828 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b22      	cmp	r3, #34	; 0x22
 8004788:	d10d      	bne.n	80047a6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004798:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047a4:	e040      	b.n	8004828 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d015      	beq.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b21      	cmp	r3, #33	; 0x21
 80047b4:	d112      	bne.n	80047dc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047da:	e025      	b.n	8004828 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d120      	bne.n	8004828 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b21      	cmp	r3, #33	; 0x21
 80047ea:	d11d      	bne.n	8004828 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047fa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fe36 	bl	8004494 <HAL_I2C_MemTxCpltCallback>
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b22      	cmp	r3, #34	; 0x22
 8004842:	f040 80ac 	bne.w	800499e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d921      	bls.n	8004898 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b03      	cmp	r3, #3
 8004882:	f040 808c 	bne.w	800499e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004894:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004896:	e082      	b.n	800499e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	2b02      	cmp	r3, #2
 800489e:	d075      	beq.n	800498c <I2C_MasterReceive_RXNE+0x15c>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d002      	beq.n	80048ac <I2C_MasterReceive_RXNE+0x7c>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d16f      	bne.n	800498c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 fafd 	bl	8005eac <I2C_WaitOnSTOPRequestThroughIT>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d142      	bne.n	800493e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d10a      	bne.n	8004928 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff fdc1 	bl	80044a8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004926:	e03a      	b.n	800499e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2212      	movs	r2, #18
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff fd76 	bl	8004428 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800493c:	e02f      	b.n	800499e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800494c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fd99 	bl	80044bc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800498a:	e008      	b.n	800499e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499a:	605a      	str	r2, [r3, #4]
}
 800499c:	e7ff      	b.n	800499e <I2C_MasterReceive_RXNE+0x16e>
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d11b      	bne.n	80049f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049f4:	e0bd      	b.n	8004b72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d129      	bne.n	8004a54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d00a      	beq.n	8004a2c <I2C_MasterReceive_BTF+0x86>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d007      	beq.n	8004a2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a52:	e08e      	b.n	8004b72 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d176      	bne.n	8004b4c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d002      	beq.n	8004a6a <I2C_MasterReceive_BTF+0xc4>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d108      	bne.n	8004a7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e019      	b.n	8004ab0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d002      	beq.n	8004a88 <I2C_MasterReceive_BTF+0xe2>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d108      	bne.n	8004a9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e00a      	b.n	8004ab0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d007      	beq.n	8004ab0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d10a      	bne.n	8004b36 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff fcba 	bl	80044a8 <HAL_I2C_MemRxCpltCallback>
}
 8004b34:	e01d      	b.n	8004b72 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2212      	movs	r2, #18
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fc6f 	bl	8004428 <HAL_I2C_MasterRxCpltCallback>
}
 8004b4a:	e012      	b.n	8004b72 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d117      	bne.n	8004bbe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ba6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ba8:	e067      	b.n	8004c7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]
}
 8004bbc:	e05d      	b.n	8004c7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc6:	d133      	bne.n	8004c30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b21      	cmp	r3, #33	; 0x21
 8004bd2:	d109      	bne.n	8004be8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004be4:	611a      	str	r2, [r3, #16]
 8004be6:	e008      	b.n	8004bfa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <I2C_Master_SB+0x92>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d108      	bne.n	8004c1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d032      	beq.n	8004c7a <I2C_Master_SB+0x100>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d02d      	beq.n	8004c7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2c:	605a      	str	r2, [r3, #4]
}
 8004c2e:	e024      	b.n	8004c7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10e      	bne.n	8004c56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	11db      	asrs	r3, r3, #7
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f003 0306 	and.w	r3, r3, #6
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f063 030f 	orn	r3, r3, #15
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	611a      	str	r2, [r3, #16]
}
 8004c54:	e011      	b.n	8004c7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d10d      	bne.n	8004c7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	11db      	asrs	r3, r3, #7
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 0306 	and.w	r3, r3, #6
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f063 030e 	orn	r3, r3, #14
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	611a      	str	r2, [r3, #16]
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <I2C_Master_ADD10+0x26>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d108      	bne.n	8004cbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00c      	beq.n	8004cce <I2C_Master_ADD10+0x48>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ccc:	605a      	str	r2, [r3, #4]
  }
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b091      	sub	sp, #68	; 0x44
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b22      	cmp	r3, #34	; 0x22
 8004d02:	f040 8169 	bne.w	8004fd8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10f      	bne.n	8004d2e <I2C_Master_ADDR+0x54>
 8004d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d10b      	bne.n	8004d2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d16:	2300      	movs	r3, #0
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	633b      	str	r3, [r7, #48]	; 0x30
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	e160      	b.n	8004ff0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11d      	bne.n	8004d72 <I2C_Master_ADDR+0x98>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d3e:	d118      	bne.n	8004d72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d40:	2300      	movs	r3, #0
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	651a      	str	r2, [r3, #80]	; 0x50
 8004d70:	e13e      	b.n	8004ff0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d113      	bne.n	8004da4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e115      	b.n	8004fd0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	f040 808a 	bne.w	8004ec4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004db6:	d137      	bne.n	8004e28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd6:	d113      	bne.n	8004e00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	e0e7      	b.n	8004fd0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e00:	2300      	movs	r3, #0
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	623b      	str	r3, [r7, #32]
 8004e14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e0d3      	b.n	8004fd0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d02e      	beq.n	8004e8c <I2C_Master_ADDR+0x1b2>
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d02b      	beq.n	8004e8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e36:	2b12      	cmp	r3, #18
 8004e38:	d102      	bne.n	8004e40 <I2C_Master_ADDR+0x166>
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d125      	bne.n	8004e8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d00e      	beq.n	8004e64 <I2C_Master_ADDR+0x18a>
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d00b      	beq.n	8004e64 <I2C_Master_ADDR+0x18a>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d008      	beq.n	8004e64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e007      	b.n	8004e74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	e0a1      	b.n	8004fd0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	61bb      	str	r3, [r7, #24]
 8004eb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e085      	b.n	8004fd0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d14d      	bne.n	8004f6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d016      	beq.n	8004f02 <I2C_Master_ADDR+0x228>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d013      	beq.n	8004f02 <I2C_Master_ADDR+0x228>
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d010      	beq.n	8004f02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e007      	b.n	8004f12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f20:	d117      	bne.n	8004f52 <I2C_Master_ADDR+0x278>
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f28:	d00b      	beq.n	8004f42 <I2C_Master_ADDR+0x268>
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d008      	beq.n	8004f42 <I2C_Master_ADDR+0x268>
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d005      	beq.n	8004f42 <I2C_Master_ADDR+0x268>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d002      	beq.n	8004f42 <I2C_Master_ADDR+0x268>
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d107      	bne.n	8004f52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f52:	2300      	movs	r3, #0
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	e032      	b.n	8004fd0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f88:	d117      	bne.n	8004fba <I2C_Master_ADDR+0x2e0>
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f90:	d00b      	beq.n	8004faa <I2C_Master_ADDR+0x2d0>
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d008      	beq.n	8004faa <I2C_Master_ADDR+0x2d0>
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d005      	beq.n	8004faa <I2C_Master_ADDR+0x2d0>
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d002      	beq.n	8004faa <I2C_Master_ADDR+0x2d0>
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d107      	bne.n	8004fba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004fd6:	e00b      	b.n	8004ff0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
}
 8004fee:	e7ff      	b.n	8004ff0 <I2C_Master_ADDR+0x316>
 8004ff0:	bf00      	nop
 8004ff2:	3744      	adds	r7, #68	; 0x44
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d02b      	beq.n	800506e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	781a      	ldrb	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d114      	bne.n	800506e <I2C_SlaveTransmit_TXE+0x72>
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b29      	cmp	r3, #41	; 0x29
 8005048:	d111      	bne.n	800506e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005058:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2221      	movs	r2, #33	; 0x21
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2228      	movs	r2, #40	; 0x28
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff f9e7 	bl	800443c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d011      	beq.n	80050ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	781a      	ldrb	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d02c      	beq.n	800512c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d114      	bne.n	800512c <I2C_SlaveReceive_RXNE+0x74>
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b2a      	cmp	r3, #42	; 0x2a
 8005106:	d111      	bne.n	800512c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2222      	movs	r2, #34	; 0x22
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2228      	movs	r2, #40	; 0x28
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff f992 	bl	8004450 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d012      	beq.n	800516c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005192:	2b28      	cmp	r3, #40	; 0x28
 8005194:	d127      	bne.n	80051e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	089b      	lsrs	r3, r3, #2
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	09db      	lsrs	r3, r3, #7
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	81bb      	strh	r3, [r7, #12]
 80051c8:	e002      	b.n	80051d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051d8:	89ba      	ldrh	r2, [r7, #12]
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff f940 	bl	8004464 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051e4:	e00e      	b.n	8005204 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e6:	2300      	movs	r3, #0
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800522a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800522c:	2300      	movs	r3, #0
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	60bb      	str	r3, [r7, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005258:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005268:	d172      	bne.n	8005350 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	2b22      	cmp	r3, #34	; 0x22
 800526e:	d002      	beq.n	8005276 <I2C_Slave_STOPF+0x6a>
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b2a      	cmp	r3, #42	; 0x2a
 8005274:	d135      	bne.n	80052e2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f043 0204 	orr.w	r2, r3, #4
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fd fdb4 	bl	8002e1c <HAL_DMA_GetState>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d049      	beq.n	800534e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	4a69      	ldr	r2, [pc, #420]	; (8005464 <I2C_Slave_STOPF+0x258>)
 80052c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fd fbfc 	bl	8002ac4 <HAL_DMA_Abort_IT>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d03d      	beq.n	800534e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052dc:	4610      	mov	r0, r2
 80052de:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052e0:	e035      	b.n	800534e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f043 0204 	orr.w	r2, r3, #4
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005314:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	4618      	mov	r0, r3
 800531c:	f7fd fd7e 	bl	8002e1c <HAL_DMA_GetState>
 8005320:	4603      	mov	r3, r0
 8005322:	2b01      	cmp	r3, #1
 8005324:	d014      	beq.n	8005350 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	4a4e      	ldr	r2, [pc, #312]	; (8005464 <I2C_Slave_STOPF+0x258>)
 800532c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005332:	4618      	mov	r0, r3
 8005334:	f7fd fbc6 	bl	8002ac4 <HAL_DMA_Abort_IT>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005348:	4610      	mov	r0, r2
 800534a:	4798      	blx	r3
 800534c:	e000      	b.n	8005350 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800534e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d03e      	beq.n	80053d8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b04      	cmp	r3, #4
 8005366:	d112      	bne.n	800538e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d112      	bne.n	80053c2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f043 0204 	orr.w	r2, r3, #4
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8b3 	bl	800554c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053e6:	e039      	b.n	800545c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b2a      	cmp	r3, #42	; 0x2a
 80053ec:	d109      	bne.n	8005402 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2228      	movs	r2, #40	; 0x28
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff f827 	bl	8004450 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b28      	cmp	r3, #40	; 0x28
 800540c:	d111      	bne.n	8005432 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <I2C_Slave_STOPF+0x25c>)
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff f828 	bl	8004480 <HAL_I2C_ListenCpltCallback>
}
 8005430:	e014      	b.n	800545c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	2b22      	cmp	r3, #34	; 0x22
 8005438:	d002      	beq.n	8005440 <I2C_Slave_STOPF+0x234>
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	2b22      	cmp	r3, #34	; 0x22
 800543e:	d10d      	bne.n	800545c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fe fffa 	bl	8004450 <HAL_I2C_SlaveRxCpltCallback>
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	08005aad 	.word	0x08005aad
 8005468:	ffff0000 	.word	0xffff0000

0800546c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d002      	beq.n	800548e <I2C_Slave_AF+0x22>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b20      	cmp	r3, #32
 800548c:	d129      	bne.n	80054e2 <I2C_Slave_AF+0x76>
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	2b28      	cmp	r3, #40	; 0x28
 8005492:	d126      	bne.n	80054e2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <I2C_Slave_AF+0xdc>)
 8005498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054a8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054b2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fe ffd0 	bl	8004480 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054e0:	e02e      	b.n	8005540 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
 80054e4:	2b21      	cmp	r3, #33	; 0x21
 80054e6:	d126      	bne.n	8005536 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <I2C_Slave_AF+0xdc>)
 80054ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2221      	movs	r2, #33	; 0x21
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005512:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800551c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fe ff84 	bl	800443c <HAL_I2C_SlaveTxCpltCallback>
}
 8005534:	e004      	b.n	8005540 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800553e:	615a      	str	r2, [r3, #20]
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	ffff0000 	.word	0xffff0000

0800554c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005562:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	2b10      	cmp	r3, #16
 8005568:	d002      	beq.n	8005570 <I2C_ITError+0x24>
 800556a:	7bbb      	ldrb	r3, [r7, #14]
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d10a      	bne.n	8005586 <I2C_ITError+0x3a>
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b22      	cmp	r3, #34	; 0x22
 8005574:	d107      	bne.n	8005586 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005584:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800558c:	2b28      	cmp	r3, #40	; 0x28
 800558e:	d107      	bne.n	80055a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2228      	movs	r2, #40	; 0x28
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800559e:	e015      	b.n	80055cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ae:	d00a      	beq.n	80055c6 <I2C_ITError+0x7a>
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b60      	cmp	r3, #96	; 0x60
 80055b4:	d007      	beq.n	80055c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055da:	d162      	bne.n	80056a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d020      	beq.n	800563c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fe:	4a6a      	ldr	r2, [pc, #424]	; (80057a8 <I2C_ITError+0x25c>)
 8005600:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	4618      	mov	r0, r3
 8005608:	f7fd fa5c 	bl	8002ac4 <HAL_DMA_Abort_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8089 	beq.w	8005726 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005636:	4610      	mov	r0, r2
 8005638:	4798      	blx	r3
 800563a:	e074      	b.n	8005726 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	4a59      	ldr	r2, [pc, #356]	; (80057a8 <I2C_ITError+0x25c>)
 8005642:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	4618      	mov	r0, r3
 800564a:	f7fd fa3b 	bl	8002ac4 <HAL_DMA_Abort_IT>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d068      	beq.n	8005726 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b40      	cmp	r3, #64	; 0x40
 8005660:	d10b      	bne.n	800567a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800569c:	4610      	mov	r0, r2
 800569e:	4798      	blx	r3
 80056a0:	e041      	b.n	8005726 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b60      	cmp	r3, #96	; 0x60
 80056ac:	d125      	bne.n	80056fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d10b      	bne.n	80056e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fe feec 	bl	80044d0 <HAL_I2C_AbortCpltCallback>
 80056f8:	e015      	b.n	8005726 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	d10b      	bne.n	8005720 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7fe fecb 	bl	80044bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10e      	bne.n	8005754 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005750:	2b00      	cmp	r3, #0
 8005752:	d007      	beq.n	8005764 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005762:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d113      	bne.n	80057a0 <I2C_ITError+0x254>
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	2b28      	cmp	r3, #40	; 0x28
 800577c:	d110      	bne.n	80057a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <I2C_ITError+0x260>)
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fe fe70 	bl	8004480 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	08005aad 	.word	0x08005aad
 80057ac:	ffff0000 	.word	0xffff0000

080057b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	4608      	mov	r0, r1
 80057ba:	4611      	mov	r1, r2
 80057bc:	461a      	mov	r2, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	817b      	strh	r3, [r7, #10]
 80057c2:	460b      	mov	r3, r1
 80057c4:	813b      	strh	r3, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fa08 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00d      	beq.n	800580e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005800:	d103      	bne.n	800580a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005808:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e05f      	b.n	80058ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800580e:	897b      	ldrh	r3, [r7, #10]
 8005810:	b2db      	uxtb	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800581c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	6a3a      	ldr	r2, [r7, #32]
 8005822:	492d      	ldr	r1, [pc, #180]	; (80058d8 <I2C_RequestMemoryWrite+0x128>)
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fa40 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e04c      	b.n	80058ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584c:	6a39      	ldr	r1, [r7, #32]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 faaa 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b04      	cmp	r3, #4
 8005860:	d107      	bne.n	8005872 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005870:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e02b      	b.n	80058ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d105      	bne.n	8005888 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800587c:	893b      	ldrh	r3, [r7, #8]
 800587e:	b2da      	uxtb	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	611a      	str	r2, [r3, #16]
 8005886:	e021      	b.n	80058cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005888:	893b      	ldrh	r3, [r7, #8]
 800588a:	0a1b      	lsrs	r3, r3, #8
 800588c:	b29b      	uxth	r3, r3
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005898:	6a39      	ldr	r1, [r7, #32]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fa84 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00d      	beq.n	80058c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d107      	bne.n	80058be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e005      	b.n	80058ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058c2:	893b      	ldrh	r3, [r7, #8]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	00010002 	.word	0x00010002

080058dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	4608      	mov	r0, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	461a      	mov	r2, r3
 80058ea:	4603      	mov	r3, r0
 80058ec:	817b      	strh	r3, [r7, #10]
 80058ee:	460b      	mov	r3, r1
 80058f0:	813b      	strh	r3, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005904:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005914:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2200      	movs	r2, #0
 800591e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f96a 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593c:	d103      	bne.n	8005946 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e0aa      	b.n	8005aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800594a:	897b      	ldrh	r3, [r7, #10]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005958:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	6a3a      	ldr	r2, [r7, #32]
 800595e:	4952      	ldr	r1, [pc, #328]	; (8005aa8 <I2C_RequestMemoryRead+0x1cc>)
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f9a2 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e097      	b.n	8005aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005988:	6a39      	ldr	r1, [r7, #32]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fa0c 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	2b04      	cmp	r3, #4
 800599c:	d107      	bne.n	80059ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e076      	b.n	8005aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059b8:	893b      	ldrh	r3, [r7, #8]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	611a      	str	r2, [r3, #16]
 80059c2:	e021      	b.n	8005a08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d4:	6a39      	ldr	r1, [r7, #32]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f9e6 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00d      	beq.n	80059fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d107      	bne.n	80059fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e050      	b.n	8005aa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059fe:	893b      	ldrh	r3, [r7, #8]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0a:	6a39      	ldr	r1, [r7, #32]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f9cb 	bl	8005da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00d      	beq.n	8005a34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d107      	bne.n	8005a30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e035      	b.n	8005aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f8d3 	bl	8005bfc <I2C_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6a:	d103      	bne.n	8005a74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e013      	b.n	8005aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a78:	897b      	ldrh	r3, [r7, #10]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	6a3a      	ldr	r2, [r7, #32]
 8005a8c:	4906      	ldr	r1, [pc, #24]	; (8005aa8 <I2C_RequestMemoryRead+0x1cc>)
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f90b 	bl	8005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	00010002 	.word	0x00010002

08005aac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ac6:	4b4b      	ldr	r3, [pc, #300]	; (8005bf4 <I2C_DMAAbort+0x148>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	08db      	lsrs	r3, r3, #3
 8005acc:	4a4a      	ldr	r2, [pc, #296]	; (8005bf8 <I2C_DMAAbort+0x14c>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	0a1a      	lsrs	r2, r3, #8
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	00da      	lsls	r2, r3, #3
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	f043 0220 	orr.w	r2, r3, #32
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005af2:	e00a      	b.n	8005b0a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b08:	d0ea      	beq.n	8005ae0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	2200      	movs	r2, #0
 8005b18:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	2200      	movs	r2, #0
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b38:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b60      	cmp	r3, #96	; 0x60
 8005b7a:	d10e      	bne.n	8005b9a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b92:	6978      	ldr	r0, [r7, #20]
 8005b94:	f7fe fc9c 	bl	80044d0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b98:	e027      	b.n	8005bea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b9a:	7cfb      	ldrb	r3, [r7, #19]
 8005b9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ba0:	2b28      	cmp	r3, #40	; 0x28
 8005ba2:	d117      	bne.n	8005bd4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2228      	movs	r2, #40	; 0x28
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bd2:	e007      	b.n	8005be4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005be4:	6978      	ldr	r0, [r7, #20]
 8005be6:	f7fe fc69 	bl	80044bc <HAL_I2C_ErrorCallback>
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000040 	.word	0x20000040
 8005bf8:	14f8b589 	.word	0x14f8b589

08005bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0c:	e025      	b.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d021      	beq.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7fc fc9d 	bl	8002554 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d302      	bcc.n	8005c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d116      	bne.n	8005c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e023      	b.n	8005ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d10d      	bne.n	8005c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	43da      	mvns	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	e00c      	b.n	8005c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	43da      	mvns	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf0c      	ite	eq
 8005c92:	2301      	moveq	r3, #1
 8005c94:	2300      	movne	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d0b6      	beq.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cb8:	e051      	b.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc8:	d123      	bne.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e046      	b.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d021      	beq.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fc fc1b 	bl	8002554 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d116      	bne.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f043 0220 	orr.w	r2, r3, #32
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e020      	b.n	8005da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10c      	bne.n	8005d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bf14      	ite	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	2300      	moveq	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	e00b      	b.n	8005d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	43da      	mvns	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d18d      	bne.n	8005cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005db4:	e02d      	b.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f900 	bl	8005fbc <I2C_IsAcknowledgeFailed>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e02d      	b.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d021      	beq.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fc fbc1 	bl	8002554 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d116      	bne.n	8005e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e007      	b.n	8005e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d1ca      	bne.n	8005db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e36:	e02d      	b.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f8bf 	bl	8005fbc <I2C_IsAcknowledgeFailed>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e02d      	b.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d021      	beq.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e50:	f7fc fb80 	bl	8002554 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d302      	bcc.n	8005e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d116      	bne.n	8005e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	f043 0220 	orr.w	r2, r3, #32
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e007      	b.n	8005ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d1ca      	bne.n	8005e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005eb8:	4b13      	ldr	r3, [pc, #76]	; (8005f08 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	08db      	lsrs	r3, r3, #3
 8005ebe:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	0a1a      	lsrs	r2, r3, #8
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d107      	bne.n	8005eea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e008      	b.n	8005efc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d0e9      	beq.n	8005ece <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	20000040 	.word	0x20000040
 8005f0c:	14f8b589 	.word	0x14f8b589

08005f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f1c:	e042      	b.n	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d119      	bne.n	8005f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0210 	mvn.w	r2, #16
 8005f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e029      	b.n	8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f60:	f7fc faf8 	bl	8002554 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d302      	bcc.n	8005f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d116      	bne.n	8005fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	f043 0220 	orr.w	r2, r3, #32
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e007      	b.n	8005fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b40      	cmp	r3, #64	; 0x40
 8005fb0:	d1b5      	bne.n	8005f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd2:	d11b      	bne.n	800600c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	f043 0204 	orr.w	r2, r3, #4
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800602a:	d103      	bne.n	8006034 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006032:	e007      	b.n	8006044 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800603c:	d102      	bne.n	8006044 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2208      	movs	r2, #8
 8006042:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e267      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d075      	beq.n	800615a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800606e:	4b88      	ldr	r3, [pc, #544]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 030c 	and.w	r3, r3, #12
 8006076:	2b04      	cmp	r3, #4
 8006078:	d00c      	beq.n	8006094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800607a:	4b85      	ldr	r3, [pc, #532]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006082:	2b08      	cmp	r3, #8
 8006084:	d112      	bne.n	80060ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006086:	4b82      	ldr	r3, [pc, #520]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006092:	d10b      	bne.n	80060ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006094:	4b7e      	ldr	r3, [pc, #504]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05b      	beq.n	8006158 <HAL_RCC_OscConfig+0x108>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d157      	bne.n	8006158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e242      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060b4:	d106      	bne.n	80060c4 <HAL_RCC_OscConfig+0x74>
 80060b6:	4b76      	ldr	r3, [pc, #472]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a75      	ldr	r2, [pc, #468]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	e01d      	b.n	8006100 <HAL_RCC_OscConfig+0xb0>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x98>
 80060ce:	4b70      	ldr	r3, [pc, #448]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a6f      	ldr	r2, [pc, #444]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	4b6d      	ldr	r3, [pc, #436]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a6c      	ldr	r2, [pc, #432]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e00b      	b.n	8006100 <HAL_RCC_OscConfig+0xb0>
 80060e8:	4b69      	ldr	r3, [pc, #420]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a68      	ldr	r2, [pc, #416]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	4b66      	ldr	r3, [pc, #408]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a65      	ldr	r2, [pc, #404]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80060fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d013      	beq.n	8006130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006108:	f7fc fa24 	bl	8002554 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006110:	f7fc fa20 	bl	8002554 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	; 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e207      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006122:	4b5b      	ldr	r3, [pc, #364]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0xc0>
 800612e:	e014      	b.n	800615a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006130:	f7fc fa10 	bl	8002554 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006138:	f7fc fa0c 	bl	8002554 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b64      	cmp	r3, #100	; 0x64
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e1f3      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800614a:	4b51      	ldr	r3, [pc, #324]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0xe8>
 8006156:	e000      	b.n	800615a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d063      	beq.n	800622e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006166:	4b4a      	ldr	r3, [pc, #296]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 030c 	and.w	r3, r3, #12
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006172:	4b47      	ldr	r3, [pc, #284]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800617a:	2b08      	cmp	r3, #8
 800617c:	d11c      	bne.n	80061b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800617e:	4b44      	ldr	r3, [pc, #272]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d116      	bne.n	80061b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800618a:	4b41      	ldr	r3, [pc, #260]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <HAL_RCC_OscConfig+0x152>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d001      	beq.n	80061a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e1c7      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a2:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	4937      	ldr	r1, [pc, #220]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b6:	e03a      	b.n	800622e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d020      	beq.n	8006202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061c0:	4b34      	ldr	r3, [pc, #208]	; (8006294 <HAL_RCC_OscConfig+0x244>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c6:	f7fc f9c5 	bl	8002554 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ce:	f7fc f9c1 	bl	8002554 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e1a8      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e0:	4b2b      	ldr	r3, [pc, #172]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ec:	4b28      	ldr	r3, [pc, #160]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4925      	ldr	r1, [pc, #148]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	600b      	str	r3, [r1, #0]
 8006200:	e015      	b.n	800622e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006202:	4b24      	ldr	r3, [pc, #144]	; (8006294 <HAL_RCC_OscConfig+0x244>)
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006208:	f7fc f9a4 	bl	8002554 <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006210:	f7fc f9a0 	bl	8002554 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e187      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006222:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f0      	bne.n	8006210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d036      	beq.n	80062a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <HAL_RCC_OscConfig+0x248>)
 8006244:	2201      	movs	r2, #1
 8006246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006248:	f7fc f984 	bl	8002554 <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006250:	f7fc f980 	bl	8002554 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e167      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_RCC_OscConfig+0x240>)
 8006264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0x200>
 800626e:	e01b      	b.n	80062a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006270:	4b09      	ldr	r3, [pc, #36]	; (8006298 <HAL_RCC_OscConfig+0x248>)
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006276:	f7fc f96d 	bl	8002554 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800627c:	e00e      	b.n	800629c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800627e:	f7fc f969 	bl	8002554 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d907      	bls.n	800629c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e150      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
 8006290:	40023800 	.word	0x40023800
 8006294:	42470000 	.word	0x42470000
 8006298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800629c:	4b88      	ldr	r3, [pc, #544]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 800629e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1ea      	bne.n	800627e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8097 	beq.w	80063e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062b6:	2300      	movs	r3, #0
 80062b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ba:	4b81      	ldr	r3, [pc, #516]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10f      	bne.n	80062e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062c6:	2300      	movs	r3, #0
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	4b7d      	ldr	r3, [pc, #500]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	4a7c      	ldr	r2, [pc, #496]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80062d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d4:	6413      	str	r3, [r2, #64]	; 0x40
 80062d6:	4b7a      	ldr	r3, [pc, #488]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062de:	60bb      	str	r3, [r7, #8]
 80062e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062e2:	2301      	movs	r3, #1
 80062e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e6:	4b77      	ldr	r3, [pc, #476]	; (80064c4 <HAL_RCC_OscConfig+0x474>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d118      	bne.n	8006324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062f2:	4b74      	ldr	r3, [pc, #464]	; (80064c4 <HAL_RCC_OscConfig+0x474>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a73      	ldr	r2, [pc, #460]	; (80064c4 <HAL_RCC_OscConfig+0x474>)
 80062f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062fe:	f7fc f929 	bl	8002554 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006306:	f7fc f925 	bl	8002554 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e10c      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006318:	4b6a      	ldr	r3, [pc, #424]	; (80064c4 <HAL_RCC_OscConfig+0x474>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0f0      	beq.n	8006306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d106      	bne.n	800633a <HAL_RCC_OscConfig+0x2ea>
 800632c:	4b64      	ldr	r3, [pc, #400]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	4a63      	ldr	r2, [pc, #396]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	6713      	str	r3, [r2, #112]	; 0x70
 8006338:	e01c      	b.n	8006374 <HAL_RCC_OscConfig+0x324>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b05      	cmp	r3, #5
 8006340:	d10c      	bne.n	800635c <HAL_RCC_OscConfig+0x30c>
 8006342:	4b5f      	ldr	r3, [pc, #380]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 8006344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006346:	4a5e      	ldr	r2, [pc, #376]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 8006348:	f043 0304 	orr.w	r3, r3, #4
 800634c:	6713      	str	r3, [r2, #112]	; 0x70
 800634e:	4b5c      	ldr	r3, [pc, #368]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	4a5b      	ldr	r2, [pc, #364]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	6713      	str	r3, [r2, #112]	; 0x70
 800635a:	e00b      	b.n	8006374 <HAL_RCC_OscConfig+0x324>
 800635c:	4b58      	ldr	r3, [pc, #352]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 800635e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006360:	4a57      	ldr	r2, [pc, #348]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 8006362:	f023 0301 	bic.w	r3, r3, #1
 8006366:	6713      	str	r3, [r2, #112]	; 0x70
 8006368:	4b55      	ldr	r3, [pc, #340]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	4a54      	ldr	r2, [pc, #336]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 800636e:	f023 0304 	bic.w	r3, r3, #4
 8006372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d015      	beq.n	80063a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800637c:	f7fc f8ea 	bl	8002554 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006382:	e00a      	b.n	800639a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006384:	f7fc f8e6 	bl	8002554 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006392:	4293      	cmp	r3, r2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e0cb      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800639a:	4b49      	ldr	r3, [pc, #292]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0ee      	beq.n	8006384 <HAL_RCC_OscConfig+0x334>
 80063a6:	e014      	b.n	80063d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a8:	f7fc f8d4 	bl	8002554 <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063b0:	f7fc f8d0 	bl	8002554 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e0b5      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c6:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1ee      	bne.n	80063b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063d2:	7dfb      	ldrb	r3, [r7, #23]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d105      	bne.n	80063e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063d8:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	4a38      	ldr	r2, [pc, #224]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80063de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80a1 	beq.w	8006530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063ee:	4b34      	ldr	r3, [pc, #208]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 030c 	and.w	r3, r3, #12
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d05c      	beq.n	80064b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d141      	bne.n	8006486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006402:	4b31      	ldr	r3, [pc, #196]	; (80064c8 <HAL_RCC_OscConfig+0x478>)
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006408:	f7fc f8a4 	bl	8002554 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006410:	f7fc f8a0 	bl	8002554 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e087      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006422:	4b27      	ldr	r3, [pc, #156]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f0      	bne.n	8006410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	019b      	lsls	r3, r3, #6
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	3b01      	subs	r3, #1
 8006448:	041b      	lsls	r3, r3, #16
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	061b      	lsls	r3, r3, #24
 8006452:	491b      	ldr	r1, [pc, #108]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 8006454:	4313      	orrs	r3, r2
 8006456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006458:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <HAL_RCC_OscConfig+0x478>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645e:	f7fc f879 	bl	8002554 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006466:	f7fc f875 	bl	8002554 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e05c      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006478:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x416>
 8006484:	e054      	b.n	8006530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006486:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <HAL_RCC_OscConfig+0x478>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800648c:	f7fc f862 	bl	8002554 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006494:	f7fc f85e 	bl	8002554 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e045      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <HAL_RCC_OscConfig+0x470>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f0      	bne.n	8006494 <HAL_RCC_OscConfig+0x444>
 80064b2:	e03d      	b.n	8006530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d107      	bne.n	80064cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e038      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40007000 	.word	0x40007000
 80064c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064cc:	4b1b      	ldr	r3, [pc, #108]	; (800653c <HAL_RCC_OscConfig+0x4ec>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d028      	beq.n	800652c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d121      	bne.n	800652c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d11a      	bne.n	800652c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064fc:	4013      	ands	r3, r2
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006504:	4293      	cmp	r3, r2
 8006506:	d111      	bne.n	800652c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	3b01      	subs	r3, #1
 8006516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d107      	bne.n	800652c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006528:	429a      	cmp	r2, r3
 800652a:	d001      	beq.n	8006530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	40023800 	.word	0x40023800

08006540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0cc      	b.n	80066ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006554:	4b68      	ldr	r3, [pc, #416]	; (80066f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d90c      	bls.n	800657c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006562:	4b65      	ldr	r3, [pc, #404]	; (80066f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656a:	4b63      	ldr	r3, [pc, #396]	; (80066f8 <HAL_RCC_ClockConfig+0x1b8>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0b8      	b.n	80066ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d020      	beq.n	80065ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006594:	4b59      	ldr	r3, [pc, #356]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	4a58      	ldr	r2, [pc, #352]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 800659a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800659e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d005      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065ac:	4b53      	ldr	r3, [pc, #332]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	4a52      	ldr	r2, [pc, #328]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b8:	4b50      	ldr	r3, [pc, #320]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	494d      	ldr	r1, [pc, #308]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d044      	beq.n	8006660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d107      	bne.n	80065ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065de:	4b47      	ldr	r3, [pc, #284]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d119      	bne.n	800661e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e07f      	b.n	80066ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d003      	beq.n	80065fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d107      	bne.n	800660e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065fe:	4b3f      	ldr	r3, [pc, #252]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d109      	bne.n	800661e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e06f      	b.n	80066ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800660e:	4b3b      	ldr	r3, [pc, #236]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e067      	b.n	80066ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800661e:	4b37      	ldr	r3, [pc, #220]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f023 0203 	bic.w	r2, r3, #3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	4934      	ldr	r1, [pc, #208]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 800662c:	4313      	orrs	r3, r2
 800662e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006630:	f7fb ff90 	bl	8002554 <HAL_GetTick>
 8006634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006636:	e00a      	b.n	800664e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006638:	f7fb ff8c 	bl	8002554 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	f241 3288 	movw	r2, #5000	; 0x1388
 8006646:	4293      	cmp	r3, r2
 8006648:	d901      	bls.n	800664e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e04f      	b.n	80066ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664e:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 020c 	and.w	r2, r3, #12
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	429a      	cmp	r2, r3
 800665e:	d1eb      	bne.n	8006638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d20c      	bcs.n	8006688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666e:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006676:	4b20      	ldr	r3, [pc, #128]	; (80066f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d001      	beq.n	8006688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e032      	b.n	80066ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006694:	4b19      	ldr	r3, [pc, #100]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	4916      	ldr	r1, [pc, #88]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	490e      	ldr	r1, [pc, #56]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066c6:	f000 f821 	bl	800670c <HAL_RCC_GetSysClockFreq>
 80066ca:	4602      	mov	r2, r0
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	091b      	lsrs	r3, r3, #4
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	490a      	ldr	r1, [pc, #40]	; (8006700 <HAL_RCC_ClockConfig+0x1c0>)
 80066d8:	5ccb      	ldrb	r3, [r1, r3]
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	4a09      	ldr	r2, [pc, #36]	; (8006704 <HAL_RCC_ClockConfig+0x1c4>)
 80066e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <HAL_RCC_ClockConfig+0x1c8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fb fef0 	bl	80024cc <HAL_InitTick>

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	40023c00 	.word	0x40023c00
 80066fc:	40023800 	.word	0x40023800
 8006700:	080092d8 	.word	0x080092d8
 8006704:	20000040 	.word	0x20000040
 8006708:	20000044 	.word	0x20000044

0800670c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800670c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006710:	b094      	sub	sp, #80	; 0x50
 8006712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	647b      	str	r3, [r7, #68]	; 0x44
 8006718:	2300      	movs	r3, #0
 800671a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671c:	2300      	movs	r3, #0
 800671e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006724:	4b79      	ldr	r3, [pc, #484]	; (800690c <HAL_RCC_GetSysClockFreq+0x200>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 030c 	and.w	r3, r3, #12
 800672c:	2b08      	cmp	r3, #8
 800672e:	d00d      	beq.n	800674c <HAL_RCC_GetSysClockFreq+0x40>
 8006730:	2b08      	cmp	r3, #8
 8006732:	f200 80e1 	bhi.w	80068f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_RCC_GetSysClockFreq+0x34>
 800673a:	2b04      	cmp	r3, #4
 800673c:	d003      	beq.n	8006746 <HAL_RCC_GetSysClockFreq+0x3a>
 800673e:	e0db      	b.n	80068f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006740:	4b73      	ldr	r3, [pc, #460]	; (8006910 <HAL_RCC_GetSysClockFreq+0x204>)
 8006742:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006744:	e0db      	b.n	80068fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006746:	4b73      	ldr	r3, [pc, #460]	; (8006914 <HAL_RCC_GetSysClockFreq+0x208>)
 8006748:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800674a:	e0d8      	b.n	80068fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800674c:	4b6f      	ldr	r3, [pc, #444]	; (800690c <HAL_RCC_GetSysClockFreq+0x200>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006754:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006756:	4b6d      	ldr	r3, [pc, #436]	; (800690c <HAL_RCC_GetSysClockFreq+0x200>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d063      	beq.n	800682a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006762:	4b6a      	ldr	r3, [pc, #424]	; (800690c <HAL_RCC_GetSysClockFreq+0x200>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	099b      	lsrs	r3, r3, #6
 8006768:	2200      	movs	r2, #0
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
 800676c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006774:	633b      	str	r3, [r7, #48]	; 0x30
 8006776:	2300      	movs	r3, #0
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
 800677a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800677e:	4622      	mov	r2, r4
 8006780:	462b      	mov	r3, r5
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f04f 0100 	mov.w	r1, #0
 800678a:	0159      	lsls	r1, r3, #5
 800678c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006790:	0150      	lsls	r0, r2, #5
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4621      	mov	r1, r4
 8006798:	1a51      	subs	r1, r2, r1
 800679a:	6139      	str	r1, [r7, #16]
 800679c:	4629      	mov	r1, r5
 800679e:	eb63 0301 	sbc.w	r3, r3, r1
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067b0:	4659      	mov	r1, fp
 80067b2:	018b      	lsls	r3, r1, #6
 80067b4:	4651      	mov	r1, sl
 80067b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067ba:	4651      	mov	r1, sl
 80067bc:	018a      	lsls	r2, r1, #6
 80067be:	4651      	mov	r1, sl
 80067c0:	ebb2 0801 	subs.w	r8, r2, r1
 80067c4:	4659      	mov	r1, fp
 80067c6:	eb63 0901 	sbc.w	r9, r3, r1
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067de:	4690      	mov	r8, r2
 80067e0:	4699      	mov	r9, r3
 80067e2:	4623      	mov	r3, r4
 80067e4:	eb18 0303 	adds.w	r3, r8, r3
 80067e8:	60bb      	str	r3, [r7, #8]
 80067ea:	462b      	mov	r3, r5
 80067ec:	eb49 0303 	adc.w	r3, r9, r3
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	f04f 0200 	mov.w	r2, #0
 80067f6:	f04f 0300 	mov.w	r3, #0
 80067fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067fe:	4629      	mov	r1, r5
 8006800:	024b      	lsls	r3, r1, #9
 8006802:	4621      	mov	r1, r4
 8006804:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006808:	4621      	mov	r1, r4
 800680a:	024a      	lsls	r2, r1, #9
 800680c:	4610      	mov	r0, r2
 800680e:	4619      	mov	r1, r3
 8006810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006812:	2200      	movs	r2, #0
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
 8006816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006818:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800681c:	f7f9 fdea 	bl	80003f4 <__aeabi_uldivmod>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4613      	mov	r3, r2
 8006826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006828:	e058      	b.n	80068dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800682a:	4b38      	ldr	r3, [pc, #224]	; (800690c <HAL_RCC_GetSysClockFreq+0x200>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	099b      	lsrs	r3, r3, #6
 8006830:	2200      	movs	r2, #0
 8006832:	4618      	mov	r0, r3
 8006834:	4611      	mov	r1, r2
 8006836:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800683a:	623b      	str	r3, [r7, #32]
 800683c:	2300      	movs	r3, #0
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
 8006840:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006844:	4642      	mov	r2, r8
 8006846:	464b      	mov	r3, r9
 8006848:	f04f 0000 	mov.w	r0, #0
 800684c:	f04f 0100 	mov.w	r1, #0
 8006850:	0159      	lsls	r1, r3, #5
 8006852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006856:	0150      	lsls	r0, r2, #5
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4641      	mov	r1, r8
 800685e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006862:	4649      	mov	r1, r9
 8006864:	eb63 0b01 	sbc.w	fp, r3, r1
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006874:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006878:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800687c:	ebb2 040a 	subs.w	r4, r2, sl
 8006880:	eb63 050b 	sbc.w	r5, r3, fp
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	00eb      	lsls	r3, r5, #3
 800688e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006892:	00e2      	lsls	r2, r4, #3
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	4643      	mov	r3, r8
 800689a:	18e3      	adds	r3, r4, r3
 800689c:	603b      	str	r3, [r7, #0]
 800689e:	464b      	mov	r3, r9
 80068a0:	eb45 0303 	adc.w	r3, r5, r3
 80068a4:	607b      	str	r3, [r7, #4]
 80068a6:	f04f 0200 	mov.w	r2, #0
 80068aa:	f04f 0300 	mov.w	r3, #0
 80068ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068b2:	4629      	mov	r1, r5
 80068b4:	028b      	lsls	r3, r1, #10
 80068b6:	4621      	mov	r1, r4
 80068b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068bc:	4621      	mov	r1, r4
 80068be:	028a      	lsls	r2, r1, #10
 80068c0:	4610      	mov	r0, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c6:	2200      	movs	r2, #0
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	61fa      	str	r2, [r7, #28]
 80068cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068d0:	f7f9 fd90 	bl	80003f4 <__aeabi_uldivmod>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4613      	mov	r3, r2
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <HAL_RCC_GetSysClockFreq+0x200>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	0c1b      	lsrs	r3, r3, #16
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	3301      	adds	r3, #1
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80068ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068f6:	e002      	b.n	80068fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <HAL_RCC_GetSysClockFreq+0x204>)
 80068fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006900:	4618      	mov	r0, r3
 8006902:	3750      	adds	r7, #80	; 0x50
 8006904:	46bd      	mov	sp, r7
 8006906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800690a:	bf00      	nop
 800690c:	40023800 	.word	0x40023800
 8006910:	00f42400 	.word	0x00f42400
 8006914:	007a1200 	.word	0x007a1200

08006918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800691c:	4b03      	ldr	r3, [pc, #12]	; (800692c <HAL_RCC_GetHCLKFreq+0x14>)
 800691e:	681b      	ldr	r3, [r3, #0]
}
 8006920:	4618      	mov	r0, r3
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000040 	.word	0x20000040

08006930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006934:	f7ff fff0 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006938:	4602      	mov	r2, r0
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	0a9b      	lsrs	r3, r3, #10
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	4903      	ldr	r1, [pc, #12]	; (8006954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006946:	5ccb      	ldrb	r3, [r1, r3]
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800694c:	4618      	mov	r0, r3
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40023800 	.word	0x40023800
 8006954:	080092e8 	.word	0x080092e8

08006958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800695c:	f7ff ffdc 	bl	8006918 <HAL_RCC_GetHCLKFreq>
 8006960:	4602      	mov	r2, r0
 8006962:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	0b5b      	lsrs	r3, r3, #13
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	4903      	ldr	r1, [pc, #12]	; (800697c <HAL_RCC_GetPCLK2Freq+0x24>)
 800696e:	5ccb      	ldrb	r3, [r1, r3]
 8006970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006974:	4618      	mov	r0, r3
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40023800 	.word	0x40023800
 800697c:	080092e8 	.word	0x080092e8

08006980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e041      	b.n	8006a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fb fafa 	bl	8001fa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f000 fda4 	bl	800750c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d001      	beq.n	8006a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e03c      	b.n	8006ab2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1e      	ldr	r2, [pc, #120]	; (8006ac0 <HAL_TIM_Base_Start+0xa0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d018      	beq.n	8006a7c <HAL_TIM_Base_Start+0x5c>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a52:	d013      	beq.n	8006a7c <HAL_TIM_Base_Start+0x5c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1a      	ldr	r2, [pc, #104]	; (8006ac4 <HAL_TIM_Base_Start+0xa4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00e      	beq.n	8006a7c <HAL_TIM_Base_Start+0x5c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a19      	ldr	r2, [pc, #100]	; (8006ac8 <HAL_TIM_Base_Start+0xa8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_TIM_Base_Start+0x5c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a17      	ldr	r2, [pc, #92]	; (8006acc <HAL_TIM_Base_Start+0xac>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_TIM_Base_Start+0x5c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <HAL_TIM_Base_Start+0xb0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d111      	bne.n	8006aa0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b06      	cmp	r3, #6
 8006a8c:	d010      	beq.n	8006ab0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9e:	e007      	b.n	8006ab0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40000c00 	.word	0x40000c00
 8006ad0:	40014000 	.word	0x40014000

08006ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d001      	beq.n	8006aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e044      	b.n	8006b76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0201 	orr.w	r2, r2, #1
 8006b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a1e      	ldr	r2, [pc, #120]	; (8006b84 <HAL_TIM_Base_Start_IT+0xb0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d018      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d013      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1a      	ldr	r2, [pc, #104]	; (8006b88 <HAL_TIM_Base_Start_IT+0xb4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00e      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a19      	ldr	r2, [pc, #100]	; (8006b8c <HAL_TIM_Base_Start_IT+0xb8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a17      	ldr	r2, [pc, #92]	; (8006b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a16      	ldr	r2, [pc, #88]	; (8006b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d111      	bne.n	8006b64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b06      	cmp	r3, #6
 8006b50:	d010      	beq.n	8006b74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0201 	orr.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b62:	e007      	b.n	8006b74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40000c00 	.word	0x40000c00
 8006b94:	40014000 	.word	0x40014000

08006b98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e041      	b.n	8006c2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f839 	bl	8006c36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f000 fc98 	bl	800750c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c3e:	bf00      	nop
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
	...

08006c4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d109      	bne.n	8006c70 <HAL_TIM_PWM_Start+0x24>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	e022      	b.n	8006cb6 <HAL_TIM_PWM_Start+0x6a>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d109      	bne.n	8006c8a <HAL_TIM_PWM_Start+0x3e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	bf14      	ite	ne
 8006c82:	2301      	movne	r3, #1
 8006c84:	2300      	moveq	r3, #0
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	e015      	b.n	8006cb6 <HAL_TIM_PWM_Start+0x6a>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d109      	bne.n	8006ca4 <HAL_TIM_PWM_Start+0x58>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	bf14      	ite	ne
 8006c9c:	2301      	movne	r3, #1
 8006c9e:	2300      	moveq	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	e008      	b.n	8006cb6 <HAL_TIM_PWM_Start+0x6a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	bf14      	ite	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	2300      	moveq	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e068      	b.n	8006d90 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <HAL_TIM_PWM_Start+0x82>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ccc:	e013      	b.n	8006cf6 <HAL_TIM_PWM_Start+0xaa>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d104      	bne.n	8006cde <HAL_TIM_PWM_Start+0x92>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cdc:	e00b      	b.n	8006cf6 <HAL_TIM_PWM_Start+0xaa>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_PWM_Start+0xa2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cec:	e003      	b.n	8006cf6 <HAL_TIM_PWM_Start+0xaa>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 ffc8 	bl	8007c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a23      	ldr	r2, [pc, #140]	; (8006d98 <HAL_TIM_PWM_Start+0x14c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d107      	bne.n	8006d1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <HAL_TIM_PWM_Start+0x14c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x10e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d30:	d013      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x10e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a19      	ldr	r2, [pc, #100]	; (8006d9c <HAL_TIM_PWM_Start+0x150>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x10e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a17      	ldr	r2, [pc, #92]	; (8006da0 <HAL_TIM_PWM_Start+0x154>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x10e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <HAL_TIM_PWM_Start+0x158>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_TIM_PWM_Start+0x10e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a14      	ldr	r2, [pc, #80]	; (8006da8 <HAL_TIM_PWM_Start+0x15c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d111      	bne.n	8006d7e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b06      	cmp	r3, #6
 8006d6a:	d010      	beq.n	8006d8e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7c:	e007      	b.n	8006d8e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0201 	orr.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	40010000 	.word	0x40010000
 8006d9c:	40000400 	.word	0x40000400
 8006da0:	40000800 	.word	0x40000800
 8006da4:	40000c00 	.word	0x40000c00
 8006da8:	40014000 	.word	0x40014000

08006dac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e041      	b.n	8006e42 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f839 	bl	8006e4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4619      	mov	r1, r3
 8006dea:	4610      	mov	r0, r2
 8006dec:	f000 fb8e 	bl	800750c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d122      	bne.n	8006eba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d11b      	bne.n	8006eba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f06f 0202 	mvn.w	r2, #2
 8006e8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fb14 	bl	80074ce <HAL_TIM_IC_CaptureCallback>
 8006ea6:	e005      	b.n	8006eb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fb06 	bl	80074ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fb17 	bl	80074e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d122      	bne.n	8006f0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d11b      	bne.n	8006f0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f06f 0204 	mvn.w	r2, #4
 8006ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 faea 	bl	80074ce <HAL_TIM_IC_CaptureCallback>
 8006efa:	e005      	b.n	8006f08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fadc 	bl	80074ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 faed 	bl	80074e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d122      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d11b      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f06f 0208 	mvn.w	r2, #8
 8006f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2204      	movs	r2, #4
 8006f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d003      	beq.n	8006f50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fac0 	bl	80074ce <HAL_TIM_IC_CaptureCallback>
 8006f4e:	e005      	b.n	8006f5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fab2 	bl	80074ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fac3 	bl	80074e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d122      	bne.n	8006fb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	2b10      	cmp	r3, #16
 8006f7c:	d11b      	bne.n	8006fb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f06f 0210 	mvn.w	r2, #16
 8006f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2208      	movs	r2, #8
 8006f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fa96 	bl	80074ce <HAL_TIM_IC_CaptureCallback>
 8006fa2:	e005      	b.n	8006fb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa88 	bl	80074ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa99 	bl	80074e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d10e      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d107      	bne.n	8006fe2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f06f 0201 	mvn.w	r2, #1
 8006fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fa fed5 	bl	8001d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fec:	2b80      	cmp	r3, #128	; 0x80
 8006fee:	d10e      	bne.n	800700e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ffa:	2b80      	cmp	r3, #128	; 0x80
 8006ffc:	d107      	bne.n	800700e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fee1 	bl	8007dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007018:	2b40      	cmp	r3, #64	; 0x40
 800701a:	d10e      	bne.n	800703a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d107      	bne.n	800703a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fa5e 	bl	80074f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b20      	cmp	r3, #32
 8007046:	d10e      	bne.n	8007066 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b20      	cmp	r3, #32
 8007054:	d107      	bne.n	8007066 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f06f 0220 	mvn.w	r2, #32
 800705e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 feab 	bl	8007dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b086      	sub	sp, #24
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_TIM_IC_ConfigChannel+0x1e>
 8007088:	2302      	movs	r3, #2
 800708a:	e088      	b.n	800719e <HAL_TIM_IC_ConfigChannel+0x130>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11b      	bne.n	80070d2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6819      	ldr	r1, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f000 fc3b 	bl	8007924 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	699a      	ldr	r2, [r3, #24]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 020c 	bic.w	r2, r2, #12
 80070bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6999      	ldr	r1, [r3, #24]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	619a      	str	r2, [r3, #24]
 80070d0:	e060      	b.n	8007194 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d11c      	bne.n	8007112 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f000 fcb3 	bl	8007a52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6999      	ldr	r1, [r3, #24]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	021a      	lsls	r2, r3, #8
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	619a      	str	r2, [r3, #24]
 8007110:	e040      	b.n	8007194 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b08      	cmp	r3, #8
 8007116:	d11b      	bne.n	8007150 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6818      	ldr	r0, [r3, #0]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	6819      	ldr	r1, [r3, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f000 fd00 	bl	8007b2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69da      	ldr	r2, [r3, #28]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 020c 	bic.w	r2, r2, #12
 800713a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69d9      	ldr	r1, [r3, #28]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	61da      	str	r2, [r3, #28]
 800714e:	e021      	b.n	8007194 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b0c      	cmp	r3, #12
 8007154:	d11c      	bne.n	8007190 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6818      	ldr	r0, [r3, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6819      	ldr	r1, [r3, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f000 fd1d 	bl	8007ba4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007178:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	69d9      	ldr	r1, [r3, #28]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	021a      	lsls	r2, r3, #8
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	61da      	str	r2, [r3, #28]
 800718e:	e001      	b.n	8007194 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
	...

080071a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e0ae      	b.n	8007324 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b0c      	cmp	r3, #12
 80071d2:	f200 809f 	bhi.w	8007314 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071d6:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007211 	.word	0x08007211
 80071e0:	08007315 	.word	0x08007315
 80071e4:	08007315 	.word	0x08007315
 80071e8:	08007315 	.word	0x08007315
 80071ec:	08007251 	.word	0x08007251
 80071f0:	08007315 	.word	0x08007315
 80071f4:	08007315 	.word	0x08007315
 80071f8:	08007315 	.word	0x08007315
 80071fc:	08007293 	.word	0x08007293
 8007200:	08007315 	.word	0x08007315
 8007204:	08007315 	.word	0x08007315
 8007208:	08007315 	.word	0x08007315
 800720c:	080072d3 	.word	0x080072d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68b9      	ldr	r1, [r7, #8]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f9f8 	bl	800760c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0208 	orr.w	r2, r2, #8
 800722a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0204 	bic.w	r2, r2, #4
 800723a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6999      	ldr	r1, [r3, #24]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691a      	ldr	r2, [r3, #16]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	619a      	str	r2, [r3, #24]
      break;
 800724e:	e064      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fa3e 	bl	80076d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800726a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6999      	ldr	r1, [r3, #24]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	021a      	lsls	r2, r3, #8
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	619a      	str	r2, [r3, #24]
      break;
 8007290:	e043      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fa89 	bl	80077b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0208 	orr.w	r2, r2, #8
 80072ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0204 	bic.w	r2, r2, #4
 80072bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69d9      	ldr	r1, [r3, #28]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	61da      	str	r2, [r3, #28]
      break;
 80072d0:	e023      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fad3 	bl	8007884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69da      	ldr	r2, [r3, #28]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69d9      	ldr	r1, [r3, #28]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	021a      	lsls	r2, r3, #8
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	61da      	str	r2, [r3, #28]
      break;
 8007312:	e002      	b.n	800731a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]
      break;
 8007318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007322:	7dfb      	ldrb	r3, [r7, #23]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_TIM_ConfigClockSource+0x1c>
 8007344:	2302      	movs	r3, #2
 8007346:	e0b4      	b.n	80074b2 <HAL_TIM_ConfigClockSource+0x186>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800736e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007380:	d03e      	beq.n	8007400 <HAL_TIM_ConfigClockSource+0xd4>
 8007382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007386:	f200 8087 	bhi.w	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 800738a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738e:	f000 8086 	beq.w	800749e <HAL_TIM_ConfigClockSource+0x172>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	d87f      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 8007398:	2b70      	cmp	r3, #112	; 0x70
 800739a:	d01a      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0xa6>
 800739c:	2b70      	cmp	r3, #112	; 0x70
 800739e:	d87b      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b60      	cmp	r3, #96	; 0x60
 80073a2:	d050      	beq.n	8007446 <HAL_TIM_ConfigClockSource+0x11a>
 80073a4:	2b60      	cmp	r3, #96	; 0x60
 80073a6:	d877      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b50      	cmp	r3, #80	; 0x50
 80073aa:	d03c      	beq.n	8007426 <HAL_TIM_ConfigClockSource+0xfa>
 80073ac:	2b50      	cmp	r3, #80	; 0x50
 80073ae:	d873      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	d058      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0x13a>
 80073b4:	2b40      	cmp	r3, #64	; 0x40
 80073b6:	d86f      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073b8:	2b30      	cmp	r3, #48	; 0x30
 80073ba:	d064      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073bc:	2b30      	cmp	r3, #48	; 0x30
 80073be:	d86b      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d060      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073c4:	2b20      	cmp	r3, #32
 80073c6:	d867      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d05c      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d05a      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x15a>
 80073d0:	e062      	b.n	8007498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6899      	ldr	r1, [r3, #8]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f000 fc37 	bl	8007c54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	609a      	str	r2, [r3, #8]
      break;
 80073fe:	e04f      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	6899      	ldr	r1, [r3, #8]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f000 fc20 	bl	8007c54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689a      	ldr	r2, [r3, #8]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007422:	609a      	str	r2, [r3, #8]
      break;
 8007424:	e03c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	6859      	ldr	r1, [r3, #4]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	461a      	mov	r2, r3
 8007434:	f000 fade 	bl	80079f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2150      	movs	r1, #80	; 0x50
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fbed 	bl	8007c1e <TIM_ITRx_SetConfig>
      break;
 8007444:	e02c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6859      	ldr	r1, [r3, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	461a      	mov	r2, r3
 8007454:	f000 fb3a 	bl	8007acc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2160      	movs	r1, #96	; 0x60
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fbdd 	bl	8007c1e <TIM_ITRx_SetConfig>
      break;
 8007464:	e01c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6818      	ldr	r0, [r3, #0]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6859      	ldr	r1, [r3, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	461a      	mov	r2, r3
 8007474:	f000 fabe 	bl	80079f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2140      	movs	r1, #64	; 0x40
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fbcd 	bl	8007c1e <TIM_ITRx_SetConfig>
      break;
 8007484:	e00c      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f000 fbc4 	bl	8007c1e <TIM_ITRx_SetConfig>
      break;
 8007496:	e003      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
      break;
 800749c:	e000      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800749e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
	...

0800750c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a34      	ldr	r2, [pc, #208]	; (80075f0 <TIM_Base_SetConfig+0xe4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00f      	beq.n	8007544 <TIM_Base_SetConfig+0x38>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752a:	d00b      	beq.n	8007544 <TIM_Base_SetConfig+0x38>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a31      	ldr	r2, [pc, #196]	; (80075f4 <TIM_Base_SetConfig+0xe8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d007      	beq.n	8007544 <TIM_Base_SetConfig+0x38>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a30      	ldr	r2, [pc, #192]	; (80075f8 <TIM_Base_SetConfig+0xec>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d003      	beq.n	8007544 <TIM_Base_SetConfig+0x38>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a2f      	ldr	r2, [pc, #188]	; (80075fc <TIM_Base_SetConfig+0xf0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d108      	bne.n	8007556 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a25      	ldr	r2, [pc, #148]	; (80075f0 <TIM_Base_SetConfig+0xe4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01b      	beq.n	8007596 <TIM_Base_SetConfig+0x8a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007564:	d017      	beq.n	8007596 <TIM_Base_SetConfig+0x8a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a22      	ldr	r2, [pc, #136]	; (80075f4 <TIM_Base_SetConfig+0xe8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <TIM_Base_SetConfig+0x8a>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a21      	ldr	r2, [pc, #132]	; (80075f8 <TIM_Base_SetConfig+0xec>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00f      	beq.n	8007596 <TIM_Base_SetConfig+0x8a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a20      	ldr	r2, [pc, #128]	; (80075fc <TIM_Base_SetConfig+0xf0>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00b      	beq.n	8007596 <TIM_Base_SetConfig+0x8a>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a1f      	ldr	r2, [pc, #124]	; (8007600 <TIM_Base_SetConfig+0xf4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d007      	beq.n	8007596 <TIM_Base_SetConfig+0x8a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a1e      	ldr	r2, [pc, #120]	; (8007604 <TIM_Base_SetConfig+0xf8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d003      	beq.n	8007596 <TIM_Base_SetConfig+0x8a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1d      	ldr	r2, [pc, #116]	; (8007608 <TIM_Base_SetConfig+0xfc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d108      	bne.n	80075a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800759c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a08      	ldr	r2, [pc, #32]	; (80075f0 <TIM_Base_SetConfig+0xe4>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d103      	bne.n	80075dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	615a      	str	r2, [r3, #20]
}
 80075e2:	bf00      	nop
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	40010000 	.word	0x40010000
 80075f4:	40000400 	.word	0x40000400
 80075f8:	40000800 	.word	0x40000800
 80075fc:	40000c00 	.word	0x40000c00
 8007600:	40014000 	.word	0x40014000
 8007604:	40014400 	.word	0x40014400
 8007608:	40014800 	.word	0x40014800

0800760c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800760c:	b480      	push	{r7}
 800760e:	b087      	sub	sp, #28
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f023 0201 	bic.w	r2, r3, #1
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f023 0302 	bic.w	r3, r3, #2
 8007654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a1c      	ldr	r2, [pc, #112]	; (80076d4 <TIM_OC1_SetConfig+0xc8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d10c      	bne.n	8007682 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f023 0308 	bic.w	r3, r3, #8
 800766e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f023 0304 	bic.w	r3, r3, #4
 8007680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <TIM_OC1_SetConfig+0xc8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d111      	bne.n	80076ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	621a      	str	r2, [r3, #32]
}
 80076c8:	bf00      	nop
 80076ca:	371c      	adds	r7, #28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	40010000 	.word	0x40010000

080076d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f023 0210 	bic.w	r2, r3, #16
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	f023 0320 	bic.w	r3, r3, #32
 8007722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4313      	orrs	r3, r2
 800772e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a1e      	ldr	r2, [pc, #120]	; (80077ac <TIM_OC2_SetConfig+0xd4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d10d      	bne.n	8007754 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800773e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a15      	ldr	r2, [pc, #84]	; (80077ac <TIM_OC2_SetConfig+0xd4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d113      	bne.n	8007784 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800776a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	621a      	str	r2, [r3, #32]
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000

080077b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b087      	sub	sp, #28
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0303 	bic.w	r3, r3, #3
 80077e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a1d      	ldr	r2, [pc, #116]	; (8007880 <TIM_OC3_SetConfig+0xd0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d10d      	bne.n	800782a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a14      	ldr	r2, [pc, #80]	; (8007880 <TIM_OC3_SetConfig+0xd0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d113      	bne.n	800785a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	621a      	str	r2, [r3, #32]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	40010000 	.word	0x40010000

08007884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	021b      	lsls	r3, r3, #8
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	031b      	lsls	r3, r3, #12
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a10      	ldr	r2, [pc, #64]	; (8007920 <TIM_OC4_SetConfig+0x9c>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d109      	bne.n	80078f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	019b      	lsls	r3, r3, #6
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	621a      	str	r2, [r3, #32]
}
 8007912:	bf00      	nop
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40010000 	.word	0x40010000

08007924 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f023 0201 	bic.w	r2, r3, #1
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4a24      	ldr	r2, [pc, #144]	; (80079e0 <TIM_TI1_SetConfig+0xbc>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <TIM_TI1_SetConfig+0x56>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007958:	d00f      	beq.n	800797a <TIM_TI1_SetConfig+0x56>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4a21      	ldr	r2, [pc, #132]	; (80079e4 <TIM_TI1_SetConfig+0xc0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d00b      	beq.n	800797a <TIM_TI1_SetConfig+0x56>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a20      	ldr	r2, [pc, #128]	; (80079e8 <TIM_TI1_SetConfig+0xc4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d007      	beq.n	800797a <TIM_TI1_SetConfig+0x56>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a1f      	ldr	r2, [pc, #124]	; (80079ec <TIM_TI1_SetConfig+0xc8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d003      	beq.n	800797a <TIM_TI1_SetConfig+0x56>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <TIM_TI1_SetConfig+0xcc>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d101      	bne.n	800797e <TIM_TI1_SetConfig+0x5a>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <TIM_TI1_SetConfig+0x5c>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4313      	orrs	r3, r2
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	e003      	b.n	800799e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f023 030a 	bic.w	r3, r3, #10
 80079b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f003 030a 	and.w	r3, r3, #10
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40000c00 	.word	0x40000c00
 80079f0:	40014000 	.word	0x40014000

080079f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f023 0201 	bic.w	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f023 030a 	bic.w	r3, r3, #10
 8007a30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	621a      	str	r2, [r3, #32]
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b087      	sub	sp, #28
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
 8007a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	f023 0210 	bic.w	r2, r3, #16
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	031b      	lsls	r3, r3, #12
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aa4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	621a      	str	r2, [r3, #32]
}
 8007ac0:	bf00      	nop
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	f023 0210 	bic.w	r2, r3, #16
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	031b      	lsls	r3, r3, #12
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	621a      	str	r2, [r3, #32]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f023 0303 	bic.w	r3, r3, #3
 8007b58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	621a      	str	r2, [r3, #32]
}
 8007b98:	bf00      	nop
 8007b9a:	371c      	adds	r7, #28
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007be2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	031b      	lsls	r3, r3, #12
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	031b      	lsls	r3, r3, #12
 8007bfc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	621a      	str	r2, [r3, #32]
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f043 0307 	orr.w	r3, r3, #7
 8007c40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	609a      	str	r2, [r3, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	021a      	lsls	r2, r3, #8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	609a      	str	r2, [r3, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f003 031f 	and.w	r3, r3, #31
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a1a      	ldr	r2, [r3, #32]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	43db      	mvns	r3, r3
 8007cb6:	401a      	ands	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a1a      	ldr	r2, [r3, #32]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f003 031f 	and.w	r3, r3, #31
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
	...

08007ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e050      	b.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1c      	ldr	r2, [pc, #112]	; (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d018      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d44:	d013      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a18      	ldr	r2, [pc, #96]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00e      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d009      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d004      	beq.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a13      	ldr	r2, [pc, #76]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d10c      	bne.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00
 8007db8:	40014000 	.word	0x40014000

08007dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e03f      	b.n	8007e76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7fa f9b0 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2224      	movs	r2, #36	; 0x24
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 ff9b 	bl	8008d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	695a      	ldr	r2, [r3, #20]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b08a      	sub	sp, #40	; 0x28
 8007e82:	af02      	add	r7, sp, #8
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	603b      	str	r3, [r7, #0]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d17c      	bne.n	8007f98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_UART_Transmit+0x2c>
 8007ea4:	88fb      	ldrh	r3, [r7, #6]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e075      	b.n	8007f9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_UART_Transmit+0x3e>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e06e      	b.n	8007f9a <HAL_UART_Transmit+0x11c>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2221      	movs	r2, #33	; 0x21
 8007ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ed2:	f7fa fb3f 	bl	8002554 <HAL_GetTick>
 8007ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	88fa      	ldrh	r2, [r7, #6]
 8007ee2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eec:	d108      	bne.n	8007f00 <HAL_UART_Transmit+0x82>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d104      	bne.n	8007f00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	61bb      	str	r3, [r7, #24]
 8007efe:	e003      	b.n	8007f08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f10:	e02a      	b.n	8007f68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2180      	movs	r1, #128	; 0x80
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 fc53 	bl	80087c8 <UART_WaitOnFlagUntilTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e036      	b.n	8007f9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10b      	bne.n	8007f4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	3302      	adds	r3, #2
 8007f46:	61bb      	str	r3, [r7, #24]
 8007f48:	e007      	b.n	8007f5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	3301      	adds	r3, #1
 8007f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1cf      	bne.n	8007f12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2140      	movs	r1, #64	; 0x40
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 fc23 	bl	80087c8 <UART_WaitOnFlagUntilTimeout>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e006      	b.n	8007f9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	e000      	b.n	8007f9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f98:	2302      	movs	r3, #2
  }
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b08c      	sub	sp, #48	; 0x30
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	4613      	mov	r3, r2
 8007fae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d152      	bne.n	8008062 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e04b      	b.n	8008064 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e044      	b.n	8008064 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	461a      	mov	r2, r3
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fc58 	bl	80088a4 <UART_Start_Receive_DMA>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d12c      	bne.n	800805c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	2b01      	cmp	r3, #1
 8008008:	d125      	bne.n	8008056 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800800a:	2300      	movs	r3, #0
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	613b      	str	r3, [r7, #16]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	617b      	str	r3, [r7, #20]
   return(result);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f043 0310 	orr.w	r3, r3, #16
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008040:	627a      	str	r2, [r7, #36]	; 0x24
 8008042:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008044:	6a39      	ldr	r1, [r7, #32]
 8008046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008048:	e841 2300 	strex	r3, r2, [r1]
 800804c:	61fb      	str	r3, [r7, #28]
   return(result);
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1e5      	bne.n	8008020 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008054:	e002      	b.n	800805c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800805c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008060:	e000      	b.n	8008064 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008062:	2302      	movs	r3, #2
  }
}
 8008064:	4618      	mov	r0, r3
 8008066:	3730      	adds	r7, #48	; 0x30
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b0ba      	sub	sp, #232	; 0xe8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008092:	2300      	movs	r3, #0
 8008094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008098:	2300      	movs	r3, #0
 800809a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800809e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80080aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10f      	bne.n	80080d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d009      	beq.n	80080d2 <HAL_UART_IRQHandler+0x66>
 80080be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c2:	f003 0320 	and.w	r3, r3, #32
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fd8f 	bl	8008bee <UART_Receive_IT>
      return;
 80080d0:	e256      	b.n	8008580 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80de 	beq.w	8008298 <HAL_UART_IRQHandler+0x22c>
 80080dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d106      	bne.n	80080f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 80d1 	beq.w	8008298 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <HAL_UART_IRQHandler+0xae>
 8008102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f043 0201 	orr.w	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811e:	f003 0304 	and.w	r3, r3, #4
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <HAL_UART_IRQHandler+0xd2>
 8008126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	f043 0202 	orr.w	r2, r3, #2
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00b      	beq.n	8008162 <HAL_UART_IRQHandler+0xf6>
 800814a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	f043 0204 	orr.w	r2, r3, #4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008166:	f003 0308 	and.w	r3, r3, #8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d011      	beq.n	8008192 <HAL_UART_IRQHandler+0x126>
 800816e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008172:	f003 0320 	and.w	r3, r3, #32
 8008176:	2b00      	cmp	r3, #0
 8008178:	d105      	bne.n	8008186 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800817a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f043 0208 	orr.w	r2, r3, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 81ed 	beq.w	8008576 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800819c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081a0:	f003 0320 	and.w	r3, r3, #32
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d008      	beq.n	80081ba <HAL_UART_IRQHandler+0x14e>
 80081a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ac:	f003 0320 	and.w	r3, r3, #32
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fd1a 	bl	8008bee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c4:	2b40      	cmp	r3, #64	; 0x40
 80081c6:	bf0c      	ite	eq
 80081c8:	2301      	moveq	r3, #1
 80081ca:	2300      	movne	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f003 0308 	and.w	r3, r3, #8
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d103      	bne.n	80081e6 <HAL_UART_IRQHandler+0x17a>
 80081de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d04f      	beq.n	8008286 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fc22 	bl	8008a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d141      	bne.n	800827e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3314      	adds	r3, #20
 8008200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3314      	adds	r3, #20
 8008222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008226:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800822a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800823e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1d9      	bne.n	80081fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	2b00      	cmp	r3, #0
 800824c:	d013      	beq.n	8008276 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	4a7d      	ldr	r2, [pc, #500]	; (8008448 <HAL_UART_IRQHandler+0x3dc>)
 8008254:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	4618      	mov	r0, r3
 800825c:	f7fa fc32 	bl	8002ac4 <HAL_DMA_Abort_IT>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d016      	beq.n	8008294 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008274:	e00e      	b.n	8008294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f9a4 	bl	80085c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827c:	e00a      	b.n	8008294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9a0 	bl	80085c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008284:	e006      	b.n	8008294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f99c 	bl	80085c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008292:	e170      	b.n	8008576 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	bf00      	nop
    return;
 8008296:	e16e      	b.n	8008576 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829c:	2b01      	cmp	r3, #1
 800829e:	f040 814a 	bne.w	8008536 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f003 0310 	and.w	r3, r3, #16
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 8143 	beq.w	8008536 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80082b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 813c 	beq.w	8008536 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082be:	2300      	movs	r3, #0
 80082c0:	60bb      	str	r3, [r7, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60bb      	str	r3, [r7, #8]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082de:	2b40      	cmp	r3, #64	; 0x40
 80082e0:	f040 80b4 	bne.w	800844c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 8140 	beq.w	800857a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008302:	429a      	cmp	r2, r3
 8008304:	f080 8139 	bcs.w	800857a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800830e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800831a:	f000 8088 	beq.w	800842e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	330c      	adds	r3, #12
 8008324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800833c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	330c      	adds	r3, #12
 8008346:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800834a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800834e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1d9      	bne.n	800831e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3314      	adds	r3, #20
 8008370:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800837a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3314      	adds	r3, #20
 800838a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800838e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008392:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008396:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e1      	bne.n	800836a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3314      	adds	r3, #20
 80083ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3314      	adds	r3, #20
 80083c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e3      	bne.n	80083a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083fe:	f023 0310 	bic.w	r3, r3, #16
 8008402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	330c      	adds	r3, #12
 800840c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008410:	65ba      	str	r2, [r7, #88]	; 0x58
 8008412:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800841e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e3      	bne.n	80083ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	4618      	mov	r0, r3
 800842a:	f7fa fadb 	bl	80029e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008436:	b29b      	uxth	r3, r3
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	b29b      	uxth	r3, r3
 800843c:	4619      	mov	r1, r3
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7f8 f95a 	bl	80006f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008444:	e099      	b.n	800857a <HAL_UART_IRQHandler+0x50e>
 8008446:	bf00      	nop
 8008448:	08008af7 	.word	0x08008af7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008454:	b29b      	uxth	r3, r3
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 808b 	beq.w	800857e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8086 	beq.w	800857e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	330c      	adds	r3, #12
 8008478:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008488:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	330c      	adds	r3, #12
 8008492:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008496:	647a      	str	r2, [r7, #68]	; 0x44
 8008498:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800849c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e3      	bne.n	8008472 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3314      	adds	r3, #20
 80084b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	623b      	str	r3, [r7, #32]
   return(result);
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3314      	adds	r3, #20
 80084ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084ce:	633a      	str	r2, [r7, #48]	; 0x30
 80084d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e3      	bne.n	80084aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	330c      	adds	r3, #12
 80084f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0310 	bic.w	r3, r3, #16
 8008506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	330c      	adds	r3, #12
 8008510:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008514:	61fa      	str	r2, [r7, #28]
 8008516:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	69b9      	ldr	r1, [r7, #24]
 800851a:	69fa      	ldr	r2, [r7, #28]
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	617b      	str	r3, [r7, #20]
   return(result);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e3      	bne.n	80084f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f7f8 f8e2 	bl	80006f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008534:	e023      	b.n	800857e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <HAL_UART_IRQHandler+0x4ea>
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fae5 	bl	8008b1e <UART_Transmit_IT>
    return;
 8008554:	e014      	b.n	8008580 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800855a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00e      	beq.n	8008580 <HAL_UART_IRQHandler+0x514>
 8008562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d008      	beq.n	8008580 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fb25 	bl	8008bbe <UART_EndTransmit_IT>
    return;
 8008574:	e004      	b.n	8008580 <HAL_UART_IRQHandler+0x514>
    return;
 8008576:	bf00      	nop
 8008578:	e002      	b.n	8008580 <HAL_UART_IRQHandler+0x514>
      return;
 800857a:	bf00      	nop
 800857c:	e000      	b.n	8008580 <HAL_UART_IRQHandler+0x514>
      return;
 800857e:	bf00      	nop
  }
}
 8008580:	37e8      	adds	r7, #232	; 0xe8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop

08008588 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b09c      	sub	sp, #112	; 0x70
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d172      	bne.n	80086da <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80085f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f6:	2200      	movs	r2, #0
 80085f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	330c      	adds	r3, #12
 8008600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008604:	e853 3f00 	ldrex	r3, [r3]
 8008608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800860a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008610:	66bb      	str	r3, [r7, #104]	; 0x68
 8008612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800861a:	65ba      	str	r2, [r7, #88]	; 0x58
 800861c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008622:	e841 2300 	strex	r3, r2, [r1]
 8008626:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1e5      	bne.n	80085fa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3314      	adds	r3, #20
 8008634:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	e853 3f00 	ldrex	r3, [r3]
 800863c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800863e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008640:	f023 0301 	bic.w	r3, r3, #1
 8008644:	667b      	str	r3, [r7, #100]	; 0x64
 8008646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3314      	adds	r3, #20
 800864c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800864e:	647a      	str	r2, [r7, #68]	; 0x44
 8008650:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008652:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008656:	e841 2300 	strex	r3, r2, [r1]
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800865c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1e5      	bne.n	800862e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3314      	adds	r3, #20
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	623b      	str	r3, [r7, #32]
   return(result);
 8008672:	6a3b      	ldr	r3, [r7, #32]
 8008674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008678:	663b      	str	r3, [r7, #96]	; 0x60
 800867a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3314      	adds	r3, #20
 8008680:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008682:	633a      	str	r2, [r7, #48]	; 0x30
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e5      	bne.n	8008662 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008698:	2220      	movs	r2, #32
 800869a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d119      	bne.n	80086da <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	330c      	adds	r3, #12
 80086ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f023 0310 	bic.w	r3, r3, #16
 80086bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086c6:	61fa      	str	r2, [r7, #28]
 80086c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	69b9      	ldr	r1, [r7, #24]
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	617b      	str	r3, [r7, #20]
   return(result);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e5      	bne.n	80086a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d106      	bne.n	80086f0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086e6:	4619      	mov	r1, r3
 80086e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ea:	f7f8 f805 	bl	80006f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086ee:	e002      	b.n	80086f6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80086f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086f2:	f7ff ff53 	bl	800859c <HAL_UART_RxCpltCallback>
}
 80086f6:	bf00      	nop
 80086f8:	3770      	adds	r7, #112	; 0x70
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	2b01      	cmp	r3, #1
 8008712:	d108      	bne.n	8008726 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	b29b      	uxth	r3, r3
 800871c:	4619      	mov	r1, r3
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7f7 ffea 	bl	80006f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008724:	e002      	b.n	800872c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff ff42 	bl	80085b0 <HAL_UART_RxHalfCpltCallback>
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008750:	2b80      	cmp	r3, #128	; 0x80
 8008752:	bf0c      	ite	eq
 8008754:	2301      	moveq	r3, #1
 8008756:	2300      	movne	r3, #0
 8008758:	b2db      	uxtb	r3, r3
 800875a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008762:	b2db      	uxtb	r3, r3
 8008764:	2b21      	cmp	r3, #33	; 0x21
 8008766:	d108      	bne.n	800877a <UART_DMAError+0x46>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d005      	beq.n	800877a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	2200      	movs	r2, #0
 8008772:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008774:	68b8      	ldr	r0, [r7, #8]
 8008776:	f000 f933 	bl	80089e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008784:	2b40      	cmp	r3, #64	; 0x40
 8008786:	bf0c      	ite	eq
 8008788:	2301      	moveq	r3, #1
 800878a:	2300      	movne	r3, #0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b22      	cmp	r3, #34	; 0x22
 800879a:	d108      	bne.n	80087ae <UART_DMAError+0x7a>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80087a8:	68b8      	ldr	r0, [r7, #8]
 80087aa:	f000 f941 	bl	8008a30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	f043 0210 	orr.w	r2, r3, #16
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087ba:	68b8      	ldr	r0, [r7, #8]
 80087bc:	f7ff ff02 	bl	80085c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b090      	sub	sp, #64	; 0x40
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	4613      	mov	r3, r2
 80087d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d8:	e050      	b.n	800887c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d04c      	beq.n	800887c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d007      	beq.n	80087f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80087e8:	f7f9 feb4 	bl	8002554 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d241      	bcs.n	800887c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	330c      	adds	r3, #12
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800880e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	330c      	adds	r3, #12
 8008816:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008818:	637a      	str	r2, [r7, #52]	; 0x34
 800881a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800881e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e5      	bne.n	80087f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3314      	adds	r3, #20
 8008832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	613b      	str	r3, [r7, #16]
   return(result);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	63bb      	str	r3, [r7, #56]	; 0x38
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3314      	adds	r3, #20
 800884a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800884c:	623a      	str	r2, [r7, #32]
 800884e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	69f9      	ldr	r1, [r7, #28]
 8008852:	6a3a      	ldr	r2, [r7, #32]
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	61bb      	str	r3, [r7, #24]
   return(result);
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e5      	bne.n	800882c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e00f      	b.n	800889c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	4013      	ands	r3, r2
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	429a      	cmp	r2, r3
 800888a:	bf0c      	ite	eq
 800888c:	2301      	moveq	r3, #1
 800888e:	2300      	movne	r3, #0
 8008890:	b2db      	uxtb	r3, r3
 8008892:	461a      	mov	r2, r3
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	429a      	cmp	r2, r3
 8008898:	d09f      	beq.n	80087da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3740      	adds	r7, #64	; 0x40
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b098      	sub	sp, #96	; 0x60
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	88fa      	ldrh	r2, [r7, #6]
 80088bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2222      	movs	r2, #34	; 0x22
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	4a40      	ldr	r2, [pc, #256]	; (80089d4 <UART_Start_Receive_DMA+0x130>)
 80088d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d8:	4a3f      	ldr	r2, [pc, #252]	; (80089d8 <UART_Start_Receive_DMA+0x134>)
 80088da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	4a3e      	ldr	r2, [pc, #248]	; (80089dc <UART_Start_Receive_DMA+0x138>)
 80088e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	2200      	movs	r2, #0
 80088ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	88fb      	ldrh	r3, [r7, #6]
 8008904:	f7fa f816 	bl	8002934 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008908:	2300      	movs	r3, #0
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d019      	beq.n	8008962 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	330c      	adds	r3, #12
 8008934:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800893e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008944:	65bb      	str	r3, [r7, #88]	; 0x58
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	330c      	adds	r3, #12
 800894c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800894e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008950:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800895c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e5      	bne.n	800892e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3314      	adds	r3, #20
 8008968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	f043 0301 	orr.w	r3, r3, #1
 8008978:	657b      	str	r3, [r7, #84]	; 0x54
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3314      	adds	r3, #20
 8008980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008982:	63ba      	str	r2, [r7, #56]	; 0x38
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e5      	bne.n	8008962 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3314      	adds	r3, #20
 800899c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	617b      	str	r3, [r7, #20]
   return(result);
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ac:	653b      	str	r3, [r7, #80]	; 0x50
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3314      	adds	r3, #20
 80089b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089b6:	627a      	str	r2, [r7, #36]	; 0x24
 80089b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6a39      	ldr	r1, [r7, #32]
 80089bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e5      	bne.n	8008996 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3760      	adds	r7, #96	; 0x60
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	080085d9 	.word	0x080085d9
 80089d8:	080086ff 	.word	0x080086ff
 80089dc:	08008735 	.word	0x08008735

080089e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b089      	sub	sp, #36	; 0x24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	330c      	adds	r3, #12
 80089ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089fe:	61fb      	str	r3, [r7, #28]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	330c      	adds	r3, #12
 8008a06:	69fa      	ldr	r2, [r7, #28]
 8008a08:	61ba      	str	r2, [r7, #24]
 8008a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6979      	ldr	r1, [r7, #20]
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	613b      	str	r3, [r7, #16]
   return(result);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e5      	bne.n	80089e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008a24:	bf00      	nop
 8008a26:	3724      	adds	r7, #36	; 0x24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b095      	sub	sp, #84	; 0x54
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	330c      	adds	r3, #12
 8008a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a58:	643a      	str	r2, [r7, #64]	; 0x40
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a60:	e841 2300 	strex	r3, r2, [r1]
 8008a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e5      	bne.n	8008a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	3314      	adds	r3, #20
 8008a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	e853 3f00 	ldrex	r3, [r3]
 8008a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	f023 0301 	bic.w	r3, r3, #1
 8008a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3314      	adds	r3, #20
 8008a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a94:	e841 2300 	strex	r3, r2, [r1]
 8008a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e5      	bne.n	8008a6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d119      	bne.n	8008adc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f023 0310 	bic.w	r3, r3, #16
 8008abe:	647b      	str	r3, [r7, #68]	; 0x44
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ac8:	61ba      	str	r2, [r7, #24]
 8008aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6979      	ldr	r1, [r7, #20]
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e5      	bne.n	8008aa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008aea:	bf00      	nop
 8008aec:	3754      	adds	r7, #84	; 0x54
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7ff fd57 	bl	80085c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b085      	sub	sp, #20
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b21      	cmp	r3, #33	; 0x21
 8008b30:	d13e      	bne.n	8008bb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3a:	d114      	bne.n	8008b66 <UART_Transmit_IT+0x48>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d110      	bne.n	8008b66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	1c9a      	adds	r2, r3, #2
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	621a      	str	r2, [r3, #32]
 8008b64:	e008      	b.n	8008b78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	1c59      	adds	r1, r3, #1
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6211      	str	r1, [r2, #32]
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	4619      	mov	r1, r3
 8008b86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10f      	bne.n	8008bac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008baa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	e000      	b.n	8008bb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bb0:	2302      	movs	r3, #2
  }
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68da      	ldr	r2, [r3, #12]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff fcd2 	bl	8008588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b08c      	sub	sp, #48	; 0x30
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b22      	cmp	r3, #34	; 0x22
 8008c00:	f040 80ab 	bne.w	8008d5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0c:	d117      	bne.n	8008c3e <UART_Receive_IT+0x50>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d113      	bne.n	8008c3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	1c9a      	adds	r2, r3, #2
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8008c3c:	e026      	b.n	8008c8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c50:	d007      	beq.n	8008c62 <UART_Receive_IT+0x74>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10a      	bne.n	8008c70 <UART_Receive_IT+0x82>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	e008      	b.n	8008c82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d15a      	bne.n	8008d56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0220 	bic.w	r2, r2, #32
 8008cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 0201 	bic.w	r2, r2, #1
 8008cce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d135      	bne.n	8008d4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	330c      	adds	r3, #12
 8008cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	e853 3f00 	ldrex	r3, [r3]
 8008cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f023 0310 	bic.w	r3, r3, #16
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	330c      	adds	r3, #12
 8008d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d06:	623a      	str	r2, [r7, #32]
 8008d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	69f9      	ldr	r1, [r7, #28]
 8008d0c:	6a3a      	ldr	r2, [r7, #32]
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e5      	bne.n	8008ce6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b10      	cmp	r3, #16
 8008d26:	d10a      	bne.n	8008d3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7f7 fcd7 	bl	80006f8 <HAL_UARTEx_RxEventCallback>
 8008d4a:	e002      	b.n	8008d52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff fc25 	bl	800859c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e002      	b.n	8008d5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	e000      	b.n	8008d5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d5a:	2302      	movs	r3, #2
  }
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3730      	adds	r7, #48	; 0x30
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d68:	b0c0      	sub	sp, #256	; 0x100
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d80:	68d9      	ldr	r1, [r3, #12]
 8008d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	ea40 0301 	orr.w	r3, r0, r1
 8008d8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008dbc:	f021 010c 	bic.w	r1, r1, #12
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dde:	6999      	ldr	r1, [r3, #24]
 8008de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	ea40 0301 	orr.w	r3, r0, r1
 8008dea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b8f      	ldr	r3, [pc, #572]	; (8009030 <UART_SetConfig+0x2cc>)
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d005      	beq.n	8008e04 <UART_SetConfig+0xa0>
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	4b8d      	ldr	r3, [pc, #564]	; (8009034 <UART_SetConfig+0x2d0>)
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d104      	bne.n	8008e0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e04:	f7fd fda8 	bl	8006958 <HAL_RCC_GetPCLK2Freq>
 8008e08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e0c:	e003      	b.n	8008e16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e0e:	f7fd fd8f 	bl	8006930 <HAL_RCC_GetPCLK1Freq>
 8008e12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e20:	f040 810c 	bne.w	800903c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e36:	4622      	mov	r2, r4
 8008e38:	462b      	mov	r3, r5
 8008e3a:	1891      	adds	r1, r2, r2
 8008e3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e3e:	415b      	adcs	r3, r3
 8008e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e46:	4621      	mov	r1, r4
 8008e48:	eb12 0801 	adds.w	r8, r2, r1
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	eb43 0901 	adc.w	r9, r3, r1
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e66:	4690      	mov	r8, r2
 8008e68:	4699      	mov	r9, r3
 8008e6a:	4623      	mov	r3, r4
 8008e6c:	eb18 0303 	adds.w	r3, r8, r3
 8008e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e74:	462b      	mov	r3, r5
 8008e76:	eb49 0303 	adc.w	r3, r9, r3
 8008e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e92:	460b      	mov	r3, r1
 8008e94:	18db      	adds	r3, r3, r3
 8008e96:	653b      	str	r3, [r7, #80]	; 0x50
 8008e98:	4613      	mov	r3, r2
 8008e9a:	eb42 0303 	adc.w	r3, r2, r3
 8008e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008ea0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ea4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ea8:	f7f7 faa4 	bl	80003f4 <__aeabi_uldivmod>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4b61      	ldr	r3, [pc, #388]	; (8009038 <UART_SetConfig+0x2d4>)
 8008eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8008eb6:	095b      	lsrs	r3, r3, #5
 8008eb8:	011c      	lsls	r4, r3, #4
 8008eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ec4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ec8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ecc:	4642      	mov	r2, r8
 8008ece:	464b      	mov	r3, r9
 8008ed0:	1891      	adds	r1, r2, r2
 8008ed2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ed4:	415b      	adcs	r3, r3
 8008ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008edc:	4641      	mov	r1, r8
 8008ede:	eb12 0a01 	adds.w	sl, r2, r1
 8008ee2:	4649      	mov	r1, r9
 8008ee4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ee8:	f04f 0200 	mov.w	r2, #0
 8008eec:	f04f 0300 	mov.w	r3, #0
 8008ef0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ef4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008efc:	4692      	mov	sl, r2
 8008efe:	469b      	mov	fp, r3
 8008f00:	4643      	mov	r3, r8
 8008f02:	eb1a 0303 	adds.w	r3, sl, r3
 8008f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8008f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	18db      	adds	r3, r3, r3
 8008f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8008f2e:	4613      	mov	r3, r2
 8008f30:	eb42 0303 	adc.w	r3, r2, r3
 8008f34:	647b      	str	r3, [r7, #68]	; 0x44
 8008f36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f3e:	f7f7 fa59 	bl	80003f4 <__aeabi_uldivmod>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4611      	mov	r1, r2
 8008f48:	4b3b      	ldr	r3, [pc, #236]	; (8009038 <UART_SetConfig+0x2d4>)
 8008f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f4e:	095b      	lsrs	r3, r3, #5
 8008f50:	2264      	movs	r2, #100	; 0x64
 8008f52:	fb02 f303 	mul.w	r3, r2, r3
 8008f56:	1acb      	subs	r3, r1, r3
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f5e:	4b36      	ldr	r3, [pc, #216]	; (8009038 <UART_SetConfig+0x2d4>)
 8008f60:	fba3 2302 	umull	r2, r3, r3, r2
 8008f64:	095b      	lsrs	r3, r3, #5
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f6c:	441c      	add	r4, r3
 8008f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f72:	2200      	movs	r2, #0
 8008f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	1891      	adds	r1, r2, r2
 8008f86:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f88:	415b      	adcs	r3, r3
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f90:	4641      	mov	r1, r8
 8008f92:	1851      	adds	r1, r2, r1
 8008f94:	6339      	str	r1, [r7, #48]	; 0x30
 8008f96:	4649      	mov	r1, r9
 8008f98:	414b      	adcs	r3, r1
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	f04f 0300 	mov.w	r3, #0
 8008fa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fa8:	4659      	mov	r1, fp
 8008faa:	00cb      	lsls	r3, r1, #3
 8008fac:	4651      	mov	r1, sl
 8008fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fb2:	4651      	mov	r1, sl
 8008fb4:	00ca      	lsls	r2, r1, #3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4642      	mov	r2, r8
 8008fbe:	189b      	adds	r3, r3, r2
 8008fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fc4:	464b      	mov	r3, r9
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	eb42 0303 	adc.w	r3, r2, r3
 8008fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008fdc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	18db      	adds	r3, r3, r3
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fea:	4613      	mov	r3, r2
 8008fec:	eb42 0303 	adc.w	r3, r2, r3
 8008ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ff6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008ffa:	f7f7 f9fb 	bl	80003f4 <__aeabi_uldivmod>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <UART_SetConfig+0x2d4>)
 8009004:	fba3 1302 	umull	r1, r3, r3, r2
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	2164      	movs	r1, #100	; 0x64
 800900c:	fb01 f303 	mul.w	r3, r1, r3
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	3332      	adds	r3, #50	; 0x32
 8009016:	4a08      	ldr	r2, [pc, #32]	; (8009038 <UART_SetConfig+0x2d4>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	095b      	lsrs	r3, r3, #5
 800901e:	f003 0207 	and.w	r2, r3, #7
 8009022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4422      	add	r2, r4
 800902a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800902c:	e105      	b.n	800923a <UART_SetConfig+0x4d6>
 800902e:	bf00      	nop
 8009030:	40011000 	.word	0x40011000
 8009034:	40011400 	.word	0x40011400
 8009038:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800903c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009040:	2200      	movs	r2, #0
 8009042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009046:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800904a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800904e:	4642      	mov	r2, r8
 8009050:	464b      	mov	r3, r9
 8009052:	1891      	adds	r1, r2, r2
 8009054:	6239      	str	r1, [r7, #32]
 8009056:	415b      	adcs	r3, r3
 8009058:	627b      	str	r3, [r7, #36]	; 0x24
 800905a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800905e:	4641      	mov	r1, r8
 8009060:	1854      	adds	r4, r2, r1
 8009062:	4649      	mov	r1, r9
 8009064:	eb43 0501 	adc.w	r5, r3, r1
 8009068:	f04f 0200 	mov.w	r2, #0
 800906c:	f04f 0300 	mov.w	r3, #0
 8009070:	00eb      	lsls	r3, r5, #3
 8009072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009076:	00e2      	lsls	r2, r4, #3
 8009078:	4614      	mov	r4, r2
 800907a:	461d      	mov	r5, r3
 800907c:	4643      	mov	r3, r8
 800907e:	18e3      	adds	r3, r4, r3
 8009080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009084:	464b      	mov	r3, r9
 8009086:	eb45 0303 	adc.w	r3, r5, r3
 800908a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800908e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800909a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090aa:	4629      	mov	r1, r5
 80090ac:	008b      	lsls	r3, r1, #2
 80090ae:	4621      	mov	r1, r4
 80090b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090b4:	4621      	mov	r1, r4
 80090b6:	008a      	lsls	r2, r1, #2
 80090b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090bc:	f7f7 f99a 	bl	80003f4 <__aeabi_uldivmod>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4b60      	ldr	r3, [pc, #384]	; (8009248 <UART_SetConfig+0x4e4>)
 80090c6:	fba3 2302 	umull	r2, r3, r3, r2
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	011c      	lsls	r4, r3, #4
 80090ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	1891      	adds	r1, r2, r2
 80090e6:	61b9      	str	r1, [r7, #24]
 80090e8:	415b      	adcs	r3, r3
 80090ea:	61fb      	str	r3, [r7, #28]
 80090ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090f0:	4641      	mov	r1, r8
 80090f2:	1851      	adds	r1, r2, r1
 80090f4:	6139      	str	r1, [r7, #16]
 80090f6:	4649      	mov	r1, r9
 80090f8:	414b      	adcs	r3, r1
 80090fa:	617b      	str	r3, [r7, #20]
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009108:	4659      	mov	r1, fp
 800910a:	00cb      	lsls	r3, r1, #3
 800910c:	4651      	mov	r1, sl
 800910e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009112:	4651      	mov	r1, sl
 8009114:	00ca      	lsls	r2, r1, #3
 8009116:	4610      	mov	r0, r2
 8009118:	4619      	mov	r1, r3
 800911a:	4603      	mov	r3, r0
 800911c:	4642      	mov	r2, r8
 800911e:	189b      	adds	r3, r3, r2
 8009120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009124:	464b      	mov	r3, r9
 8009126:	460a      	mov	r2, r1
 8009128:	eb42 0303 	adc.w	r3, r2, r3
 800912c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	67bb      	str	r3, [r7, #120]	; 0x78
 800913a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800913c:	f04f 0200 	mov.w	r2, #0
 8009140:	f04f 0300 	mov.w	r3, #0
 8009144:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009148:	4649      	mov	r1, r9
 800914a:	008b      	lsls	r3, r1, #2
 800914c:	4641      	mov	r1, r8
 800914e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009152:	4641      	mov	r1, r8
 8009154:	008a      	lsls	r2, r1, #2
 8009156:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800915a:	f7f7 f94b 	bl	80003f4 <__aeabi_uldivmod>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4b39      	ldr	r3, [pc, #228]	; (8009248 <UART_SetConfig+0x4e4>)
 8009164:	fba3 1302 	umull	r1, r3, r3, r2
 8009168:	095b      	lsrs	r3, r3, #5
 800916a:	2164      	movs	r1, #100	; 0x64
 800916c:	fb01 f303 	mul.w	r3, r1, r3
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	011b      	lsls	r3, r3, #4
 8009174:	3332      	adds	r3, #50	; 0x32
 8009176:	4a34      	ldr	r2, [pc, #208]	; (8009248 <UART_SetConfig+0x4e4>)
 8009178:	fba2 2303 	umull	r2, r3, r2, r3
 800917c:	095b      	lsrs	r3, r3, #5
 800917e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009182:	441c      	add	r4, r3
 8009184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009188:	2200      	movs	r2, #0
 800918a:	673b      	str	r3, [r7, #112]	; 0x70
 800918c:	677a      	str	r2, [r7, #116]	; 0x74
 800918e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009192:	4642      	mov	r2, r8
 8009194:	464b      	mov	r3, r9
 8009196:	1891      	adds	r1, r2, r2
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	415b      	adcs	r3, r3
 800919c:	60fb      	str	r3, [r7, #12]
 800919e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091a2:	4641      	mov	r1, r8
 80091a4:	1851      	adds	r1, r2, r1
 80091a6:	6039      	str	r1, [r7, #0]
 80091a8:	4649      	mov	r1, r9
 80091aa:	414b      	adcs	r3, r1
 80091ac:	607b      	str	r3, [r7, #4]
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091ba:	4659      	mov	r1, fp
 80091bc:	00cb      	lsls	r3, r1, #3
 80091be:	4651      	mov	r1, sl
 80091c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091c4:	4651      	mov	r1, sl
 80091c6:	00ca      	lsls	r2, r1, #3
 80091c8:	4610      	mov	r0, r2
 80091ca:	4619      	mov	r1, r3
 80091cc:	4603      	mov	r3, r0
 80091ce:	4642      	mov	r2, r8
 80091d0:	189b      	adds	r3, r3, r2
 80091d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80091d4:	464b      	mov	r3, r9
 80091d6:	460a      	mov	r2, r1
 80091d8:	eb42 0303 	adc.w	r3, r2, r3
 80091dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	663b      	str	r3, [r7, #96]	; 0x60
 80091e8:	667a      	str	r2, [r7, #100]	; 0x64
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80091f6:	4649      	mov	r1, r9
 80091f8:	008b      	lsls	r3, r1, #2
 80091fa:	4641      	mov	r1, r8
 80091fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009200:	4641      	mov	r1, r8
 8009202:	008a      	lsls	r2, r1, #2
 8009204:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009208:	f7f7 f8f4 	bl	80003f4 <__aeabi_uldivmod>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4b0d      	ldr	r3, [pc, #52]	; (8009248 <UART_SetConfig+0x4e4>)
 8009212:	fba3 1302 	umull	r1, r3, r3, r2
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	2164      	movs	r1, #100	; 0x64
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	3332      	adds	r3, #50	; 0x32
 8009224:	4a08      	ldr	r2, [pc, #32]	; (8009248 <UART_SetConfig+0x4e4>)
 8009226:	fba2 2303 	umull	r2, r3, r2, r3
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	f003 020f 	and.w	r2, r3, #15
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4422      	add	r2, r4
 8009238:	609a      	str	r2, [r3, #8]
}
 800923a:	bf00      	nop
 800923c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009240:	46bd      	mov	sp, r7
 8009242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009246:	bf00      	nop
 8009248:	51eb851f 	.word	0x51eb851f

0800924c <__libc_init_array>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4d0d      	ldr	r5, [pc, #52]	; (8009284 <__libc_init_array+0x38>)
 8009250:	4c0d      	ldr	r4, [pc, #52]	; (8009288 <__libc_init_array+0x3c>)
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	2600      	movs	r6, #0
 8009258:	42a6      	cmp	r6, r4
 800925a:	d109      	bne.n	8009270 <__libc_init_array+0x24>
 800925c:	4d0b      	ldr	r5, [pc, #44]	; (800928c <__libc_init_array+0x40>)
 800925e:	4c0c      	ldr	r4, [pc, #48]	; (8009290 <__libc_init_array+0x44>)
 8009260:	f000 f82e 	bl	80092c0 <_init>
 8009264:	1b64      	subs	r4, r4, r5
 8009266:	10a4      	asrs	r4, r4, #2
 8009268:	2600      	movs	r6, #0
 800926a:	42a6      	cmp	r6, r4
 800926c:	d105      	bne.n	800927a <__libc_init_array+0x2e>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	f855 3b04 	ldr.w	r3, [r5], #4
 8009274:	4798      	blx	r3
 8009276:	3601      	adds	r6, #1
 8009278:	e7ee      	b.n	8009258 <__libc_init_array+0xc>
 800927a:	f855 3b04 	ldr.w	r3, [r5], #4
 800927e:	4798      	blx	r3
 8009280:	3601      	adds	r6, #1
 8009282:	e7f2      	b.n	800926a <__libc_init_array+0x1e>
 8009284:	08009300 	.word	0x08009300
 8009288:	08009300 	.word	0x08009300
 800928c:	08009300 	.word	0x08009300
 8009290:	08009304 	.word	0x08009304

08009294 <memcpy>:
 8009294:	440a      	add	r2, r1
 8009296:	4291      	cmp	r1, r2
 8009298:	f100 33ff 	add.w	r3, r0, #4294967295
 800929c:	d100      	bne.n	80092a0 <memcpy+0xc>
 800929e:	4770      	bx	lr
 80092a0:	b510      	push	{r4, lr}
 80092a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092aa:	4291      	cmp	r1, r2
 80092ac:	d1f9      	bne.n	80092a2 <memcpy+0xe>
 80092ae:	bd10      	pop	{r4, pc}

080092b0 <memset>:
 80092b0:	4402      	add	r2, r0
 80092b2:	4603      	mov	r3, r0
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d100      	bne.n	80092ba <memset+0xa>
 80092b8:	4770      	bx	lr
 80092ba:	f803 1b01 	strb.w	r1, [r3], #1
 80092be:	e7f9      	b.n	80092b4 <memset+0x4>

080092c0 <_init>:
 80092c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c2:	bf00      	nop
 80092c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c6:	bc08      	pop	{r3}
 80092c8:	469e      	mov	lr, r3
 80092ca:	4770      	bx	lr

080092cc <_fini>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr
