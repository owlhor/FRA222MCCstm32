
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cec  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009e84  08009e84  00019e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ea4  08009ea4  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eac  08009eac  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08009eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000038  08009eec  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08009eec  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011489  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef3  00000000  00000000  000314f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  000333e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00034380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c46  00000000  00000000  00035288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d9a  00000000  00000000  0004bece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009161b  00000000  00000000  0005dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  000ef2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009e6c 	.word	0x08009e6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	08009e6c 	.word	0x08009e6c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b974 	b.w	8000f30 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468e      	mov	lr, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d14d      	bne.n	8000d0a <__udivmoddi4+0xaa>
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	4694      	mov	ip, r2
 8000c72:	d969      	bls.n	8000d48 <__udivmoddi4+0xe8>
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b152      	cbz	r2, 8000c90 <__udivmoddi4+0x30>
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	f1c2 0120 	rsb	r1, r2, #32
 8000c82:	fa20 f101 	lsr.w	r1, r0, r1
 8000c86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	0c21      	lsrs	r1, r4, #16
 8000c96:	fbbe f6f8 	udiv	r6, lr, r8
 8000c9a:	fa1f f78c 	uxth.w	r7, ip
 8000c9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ca2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ca6:	fb06 f107 	mul.w	r1, r6, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x64>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb6:	f080 811f 	bcs.w	8000ef8 <__udivmoddi4+0x298>
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	f240 811c 	bls.w	8000ef8 <__udivmoddi4+0x298>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	1a5b      	subs	r3, r3, r1
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ccc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd4:	fb00 f707 	mul.w	r7, r0, r7
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x92>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce4:	f080 810a 	bcs.w	8000efc <__udivmoddi4+0x29c>
 8000ce8:	42a7      	cmp	r7, r4
 8000cea:	f240 8107 	bls.w	8000efc <__udivmoddi4+0x29c>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	1be4      	subs	r4, r4, r7
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	b11d      	cbz	r5, 8000d04 <__udivmoddi4+0xa4>
 8000cfc:	40d4      	lsrs	r4, r2
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e9c5 4300 	strd	r4, r3, [r5]
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0xc2>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	f000 80ef 	beq.w	8000ef2 <__udivmoddi4+0x292>
 8000d14:	2600      	movs	r6, #0
 8000d16:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	fab3 f683 	clz	r6, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d14a      	bne.n	8000dc0 <__udivmoddi4+0x160>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xd4>
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	f200 80f9 	bhi.w	8000f26 <__udivmoddi4+0x2c6>
 8000d34:	1a84      	subs	r4, r0, r2
 8000d36:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d0e0      	beq.n	8000d04 <__udivmoddi4+0xa4>
 8000d42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d46:	e7dd      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000d48:	b902      	cbnz	r2, 8000d4c <__udivmoddi4+0xec>
 8000d4a:	deff      	udf	#255	; 0xff
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	f040 8092 	bne.w	8000e7a <__udivmoddi4+0x21a>
 8000d56:	eba1 010c 	sub.w	r1, r1, ip
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2601      	movs	r6, #1
 8000d64:	0c20      	lsrs	r0, r4, #16
 8000d66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	fb0e f003 	mul.w	r0, lr, r3
 8000d76:	4288      	cmp	r0, r1
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x12c>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x12a>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2c0>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	1a09      	subs	r1, r1, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d94:	fb07 1110 	mls	r1, r7, r0, r1
 8000d98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x156>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x154>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2ca>
 8000db4:	4608      	mov	r0, r1
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dbe:	e79c      	b.n	8000cfa <__udivmoddi4+0x9a>
 8000dc0:	f1c6 0720 	rsb	r7, r6, #32
 8000dc4:	40b3      	lsls	r3, r6
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa20 f407 	lsr.w	r4, r0, r7
 8000dd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd6:	431c      	orrs	r4, r3
 8000dd8:	40f9      	lsrs	r1, r7
 8000dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dde:	fa00 f306 	lsl.w	r3, r0, r6
 8000de2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000de6:	0c20      	lsrs	r0, r4, #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fb09 1118 	mls	r1, r9, r8, r1
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	fb08 f00e 	mul.w	r0, r8, lr
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b8>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2bc>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2bc>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e20:	fb09 1110 	mls	r1, r9, r0, r1
 8000e24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e2c:	458e      	cmp	lr, r1
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1e2>
 8000e30:	eb1c 0101 	adds.w	r1, ip, r1
 8000e34:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3a:	458e      	cmp	lr, r1
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4461      	add	r1, ip
 8000e42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e46:	fba0 9402 	umull	r9, r4, r0, r2
 8000e4a:	eba1 010e 	sub.w	r1, r1, lr
 8000e4e:	42a1      	cmp	r1, r4
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46a6      	mov	lr, r4
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x2a4>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x2a0>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x212>
 8000e5a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e5e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e62:	fa01 f707 	lsl.w	r7, r1, r7
 8000e66:	fa22 f306 	lsr.w	r3, r2, r6
 8000e6a:	40f1      	lsrs	r1, r6
 8000e6c:	431f      	orrs	r7, r3
 8000e6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	f1c2 0320 	rsb	r3, r2, #32
 8000e7e:	40d8      	lsrs	r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	fa21 f303 	lsr.w	r3, r1, r3
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	4301      	orrs	r1, r0
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e98:	fb07 3610 	mls	r6, r7, r0, r3
 8000e9c:	0c0b      	lsrs	r3, r1, #16
 8000e9e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ea2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x260>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b8>
 8000eb8:	429e      	cmp	r6, r3
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b8>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	b289      	uxth	r1, r1
 8000ec4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x28a>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee6:	3e02      	subs	r6, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0x104>
 8000ef2:	462e      	mov	r6, r5
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	e705      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000ef8:	4606      	mov	r6, r0
 8000efa:	e6e3      	b.n	8000cc4 <__udivmoddi4+0x64>
 8000efc:	4618      	mov	r0, r3
 8000efe:	e6f8      	b.n	8000cf2 <__udivmoddi4+0x92>
 8000f00:	454b      	cmp	r3, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f8>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f8>
 8000f10:	4646      	mov	r6, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x28a>
 8000f14:	4620      	mov	r0, r4
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1e2>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b8>
 8000f20:	3b02      	subs	r3, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x12c>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e709      	b.n	8000d3e <__udivmoddi4+0xde>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x156>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f38:	b087      	sub	sp, #28
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f001 ff90 	bl	8002e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f94c 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 fb74 	bl	8001630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f48:	f000 fb16 	bl	8001578 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f4c:	f000 fb40 	bl	80015d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f50:	f000 f9ac 	bl	80012ac <MX_I2C1_Init>
  MX_TIM11_Init();
 8000f54:	f000 faec 	bl	8001530 <MX_TIM11_Init>
  MX_TIM2_Init();
 8000f58:	f000 fa04 	bl	8001364 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f5c:	f000 fa72 	bl	8001444 <MX_TIM4_Init>
  MX_I2C3_Init();
 8000f60:	f000 f9d2 	bl	8001308 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8000f64:	4882      	ldr	r0, [pc, #520]	; (8001170 <main+0x23c>)
 8000f66:	f006 fabb 	bl	80074e0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 8000f6a:	4882      	ldr	r0, [pc, #520]	; (8001174 <main+0x240>)
 8000f6c:	f006 fa5e 	bl	800742c <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 8000f70:	2310      	movs	r3, #16
 8000f72:	4a81      	ldr	r2, [pc, #516]	; (8001178 <main+0x244>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	487f      	ldr	r0, [pc, #508]	; (8001174 <main+0x240>)
 8000f78:	f006 fc78 	bl	800786c <HAL_TIM_IC_Start_DMA>
    			CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8000f7c:	487f      	ldr	r0, [pc, #508]	; (800117c <main+0x248>)
 8000f7e:	f006 fa55 	bl	800742c <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f82:	2100      	movs	r1, #0
 8000f84:	487d      	ldr	r0, [pc, #500]	; (800117c <main+0x248>)
 8000f86:	f006 fb67 	bl	8007658 <HAL_TIM_PWM_Start>

    //MCP23017 setting init
    HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f001 ffda 	bl	8002f44 <HAL_Delay>
    IOExpenderInit();
 8000f90:	f000 ff00 	bl	8001d94 <IOExpenderInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      ///// IT test
	 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f94:	2120      	movs	r1, #32
 8000f96:	487a      	ldr	r0, [pc, #488]	; (8001180 <main+0x24c>)
 8000f98:	f002 fecf 	bl	8003d3a <HAL_GPIO_TogglePin>
	  	  //if(micros() - TimeStampGrand >= 1000){
	  		//TimeStampGrand = micros();

	  	  //}
	  	  // Encoder I2CRead
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8000f9c:	f001 fbc6 	bl	800272c <micros>
 8000fa0:	4b78      	ldr	r3, [pc, #480]	; (8001184 <main+0x250>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	617a      	str	r2, [r7, #20]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ac4      	subs	r4, r0, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	eb61 0503 	sbc.w	r5, r1, r3
 8000fb4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000fb8:	f175 0300 	sbcs.w	r3, r5, #0
 8000fbc:	d30a      	bcc.n	8000fd4 <main+0xa0>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8000fbe:	f001 fbb5 	bl	800272c <micros>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <main+0x250>)
 8000fc8:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8000fca:	4a6f      	ldr	r2, [pc, #444]	; (8001188 <main+0x254>)
 8000fcc:	2301      	movs	r3, #1
 8000fce:	7013      	strb	r3, [r2, #0]
	  	              GrandStatumix();
 8000fd0:	f000 fc08 	bl	80017e4 <GrandStatumix>
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8000fd4:	486d      	ldr	r0, [pc, #436]	; (800118c <main+0x258>)
 8000fd6:	f000 fef3 	bl	8001dc0 <AbsEncI2CReadx>
	  	  encoderSpeedReaderCycle();
 8000fda:	f000 fd25 	bl	8001a28 <encoderSpeedReaderCycle>
	  	  pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8000fde:	2102      	movs	r1, #2
 8000fe0:	486b      	ldr	r0, [pc, #428]	; (8001190 <main+0x25c>)
 8000fe2:	f002 fe79 	bl	8003cd8 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a6a      	ldr	r2, [pc, #424]	; (8001194 <main+0x260>)
 8000fea:	7013      	strb	r3, [r2, #0]

	  	  ///////////////////////// speed measyre////////
	  	if(micros() - timestampve >= 10000){
 8000fec:	f001 fb9e 	bl	800272c <micros>
 8000ff0:	4b69      	ldr	r3, [pc, #420]	; (8001198 <main+0x264>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	ebb0 0802 	subs.w	r8, r0, r2
 8000ffa:	eb61 0903 	sbc.w	r9, r1, r3
 8000ffe:	f242 7310 	movw	r3, #10000	; 0x2710
 8001002:	4598      	cmp	r8, r3
 8001004:	f179 0300 	sbcs.w	r3, r9, #0
 8001008:	d344      	bcc.n	8001094 <main+0x160>
	  			  timestampve = micros();
 800100a:	f001 fb8f 	bl	800272c <micros>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4961      	ldr	r1, [pc, #388]	; (8001198 <main+0x264>)
 8001014:	e9c1 2300 	strd	r2, r3, [r1]
	  			  posSpeedlog[1] = posSpeedlog[0];
 8001018:	4b60      	ldr	r3, [pc, #384]	; (800119c <main+0x268>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4a5f      	ldr	r2, [pc, #380]	; (800119c <main+0x268>)
 800101e:	8053      	strh	r3, [r2, #2]
	  			  posSpeedlog[0] = BinPosXI;
 8001020:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <main+0x26c>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	4a5d      	ldr	r2, [pc, #372]	; (800119c <main+0x268>)
 8001026:	8013      	strh	r3, [r2, #0]
	  			  deltaar = (fabsf(posSpeedlog[1]-posSpeedlog[0])) / 1024.0;
 8001028:	4b5c      	ldr	r3, [pc, #368]	; (800119c <main+0x268>)
 800102a:	885b      	ldrh	r3, [r3, #2]
 800102c:	461a      	mov	r2, r3
 800102e:	4b5b      	ldr	r3, [pc, #364]	; (800119c <main+0x268>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001040:	eddf 6a58 	vldr	s13, [pc, #352]	; 80011a4 <main+0x270>
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	4b57      	ldr	r3, [pc, #348]	; (80011a8 <main+0x274>)
 800104a:	edc3 7a00 	vstr	s15, [r3]
	  			  RoundNumnd = deltaar*100.0*60.0;
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <main+0x274>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa24 	bl	80004a0 <__aeabi_f2d>
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <main+0x278>)
 800105e:	f7ff fa77 	bl	8000550 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <main+0x27c>)
 8001070:	f7ff fa6e 	bl	8000550 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fc7a 	bl	8000974 <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
 8001082:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <main+0x280>)
 8001084:	6013      	str	r3, [r2, #0]
	  			  Speedsmoothfunc(RoundNumnd);
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <main+0x280>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	eeb0 0a67 	vmov.f32	s0, s15
 8001090:	f000 fd3e 	bl	8001b10 <Speedsmoothfunc>
	  		 }

	  	  ///////////////////// 2KHz change PWM PB6////////////////////
	  	  if(micros() - timestampPWM >= 500){
 8001094:	f001 fb4a 	bl	800272c <micros>
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <main+0x284>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	60fa      	str	r2, [r7, #12]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	ebb0 0a03 	subs.w	sl, r0, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	eb61 0b03 	sbc.w	fp, r1, r3
 80010ae:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 80010b2:	f17b 0300 	sbcs.w	r3, fp, #0
 80010b6:	d31a      	bcc.n	80010ee <main+0x1ba>
	  		  	  timestampPWM = micros(); // stamp
 80010b8:	f001 fb38 	bl	800272c <micros>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <main+0x284>)
 80010c2:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <main+0x288>)
 80010c6:	8819      	ldrh	r1, [r3, #0]
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <main+0x248>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	460b      	mov	r3, r1
 80010ce:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		if (mot_dirctn == 0){
 80010d0:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <main+0x28c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <main+0x1b0>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2104      	movs	r1, #4
 80010dc:	482c      	ldr	r0, [pc, #176]	; (8001190 <main+0x25c>)
 80010de:	f002 fe13 	bl	8003d08 <HAL_GPIO_WritePin>
 80010e2:	e004      	b.n	80010ee <main+0x1ba>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2104      	movs	r1, #4
 80010e8:	4829      	ldr	r0, [pc, #164]	; (8001190 <main+0x25c>)
 80010ea:	f002 fe0d 	bl	8003d08 <HAL_GPIO_WritePin>
	  	  		}
	  	  	  }

	  	 if (grandState ==  work){
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <main+0x290>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d103      	bne.n	80010fe <main+0x1ca>
	  		 PIDzero();
 80010f6:	f000 fd6d 	bl	8001bd4 <PIDzero>
	  		 MotDrvCytron();
 80010fa:	f000 fdf5 	bl	8001ce8 <MotDrvCytron>
	  	 }

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 80010fe:	f000 febb 	bl	8001e78 <Efft_activate>
	  	 Efft_read(&efft_status);
 8001102:	4831      	ldr	r0, [pc, #196]	; (80011c8 <main+0x294>)
 8001104:	f000 fefe 	bl	8001f04 <Efft_read>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && micros() - timestamp_efft >= 500000){
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <main+0x298>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d022      	beq.n	8001156 <main+0x222>
 8001110:	f001 fb0c 	bl	800272c <micros>
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <main+0x29c>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	1a86      	subs	r6, r0, r2
 800111c:	603e      	str	r6, [r7, #0]
 800111e:	eb61 0303 	sbc.w	r3, r1, r3
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <main+0x2a0>)
 8001126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800112a:	4602      	mov	r2, r0
 800112c:	429a      	cmp	r2, r3
 800112e:	460b      	mov	r3, r1
 8001130:	f173 0300 	sbcs.w	r3, r3, #0
 8001134:	d30f      	bcc.n	8001156 <main+0x222>
	  		 timestamp_efft = micros();
 8001136:	f001 faf9 	bl	800272c <micros>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4924      	ldr	r1, [pc, #144]	; (80011d0 <main+0x29c>)
 8001140:	e9c1 2300 	strd	r2, r3, [r1]
	  		 flag_efftRead = 1;
 8001144:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <main+0x2a4>)
 8001146:	2301      	movs	r3, #1
 8001148:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <main+0x298>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <main+0x298>)
 8001154:	7013      	strb	r3, [r2, #0]
	  	 }if(trig_efftRead >= 12){
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <main+0x298>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b0b      	cmp	r3, #11
 800115c:	d905      	bls.n	800116a <main+0x236>
	  		 trig_efftRead = 0;
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <main+0x298>)
 8001160:	2300      	movs	r3, #0
 8001162:	7013      	strb	r3, [r2, #0]
	  	 	 flag_efftRead = 0;
 8001164:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <main+0x2a4>)
 8001166:	2300      	movs	r3, #0
 8001168:	7013      	strb	r3, [r2, #0]
	  		 } // read xx times

	  	 ////////// UART UI Base System //////////////
	  	UARTRecieveIT();
 800116a:	f001 fa47 	bl	80025fc <UARTRecieveIT>
	 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800116e:	e711      	b.n	8000f94 <main+0x60>
 8001170:	2000024c 	.word	0x2000024c
 8001174:	200001bc 	.word	0x200001bc
 8001178:	20000358 	.word	0x20000358
 800117c:	20000204 	.word	0x20000204
 8001180:	40020000 	.word	0x40020000
 8001184:	2000034c 	.word	0x2000034c
 8001188:	20000356 	.word	0x20000356
 800118c:	20000350 	.word	0x20000350
 8001190:	40020400 	.word	0x40020400
 8001194:	20000339 	.word	0x20000339
 8001198:	20000470 	.word	0x20000470
 800119c:	20000418 	.word	0x20000418
 80011a0:	20000354 	.word	0x20000354
 80011a4:	44800000 	.word	0x44800000
 80011a8:	20000460 	.word	0x20000460
 80011ac:	40590000 	.word	0x40590000
 80011b0:	404e0000 	.word	0x404e0000
 80011b4:	20000464 	.word	0x20000464
 80011b8:	20000478 	.word	0x20000478
 80011bc:	20000000 	.word	0x20000000
 80011c0:	2000047c 	.word	0x2000047c
 80011c4:	20000338 	.word	0x20000338
 80011c8:	200004a8 	.word	0x200004a8
 80011cc:	200004ab 	.word	0x200004ab
 80011d0:	200004b0 	.word	0x200004b0
 80011d4:	0007a120 	.word	0x0007a120
 80011d8:	200004aa 	.word	0x200004aa

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 fe36 	bl	8009e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <SystemClock_Config+0xc8>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <SystemClock_Config+0xc8>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <SystemClock_Config+0xc8>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <SystemClock_Config+0xcc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <SystemClock_Config+0xcc>)
 8001226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <SystemClock_Config+0xcc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800124c:	2308      	movs	r3, #8
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4618      	mov	r0, r3
 8001262:	f005 fbfb 	bl	8006a5c <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800126c:	f001 fa94 	bl	8002798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2103      	movs	r1, #3
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fe5d 	bl	8006f4c <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001298:	f001 fa7e 	bl	8002798 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3750      	adds	r7, #80	; 0x50
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_I2C1_Init+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_I2C1_Init+0x58>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ea:	f002 fd59 	bl	8003da0 <HAL_I2C_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f4:	f001 fa50 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000054 	.word	0x20000054
 8001300:	40005400 	.word	0x40005400
 8001304:	00061a80 	.word	0x00061a80

08001308 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C3_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C3_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C3_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C3_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C3_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C3_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C3_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C3_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C3_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C3_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C3_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C3_Init+0x50>)
 8001346:	f002 fd2b 	bl	8003da0 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001350:	f001 fa22 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200000a8 	.word	0x200000a8
 800135c:	40005c00 	.word	0x40005c00
 8001360:	00061a80 	.word	0x00061a80

08001364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138e:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <MX_TIM2_Init+0xdc>)
 8001390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <MX_TIM2_Init+0xdc>)
 8001398:	2263      	movs	r2, #99	; 0x63
 800139a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <MX_TIM2_Init+0xdc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b6:	4822      	ldr	r0, [pc, #136]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013b8:	f005 ffe8 	bl	800738c <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80013c2:	f001 f9e9 	bl	8002798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	4619      	mov	r1, r3
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013d4:	f006 fe4c 	bl	8008070 <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013de:	f001 f9db 	bl	8002798 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013e4:	f006 f9e8 	bl	80077b8 <HAL_TIM_IC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ee:	f001 f9d3 	bl	8002798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_TIM2_Init+0xdc>)
 8001402:	f007 fc03 	bl	8008c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800140c:	f001 f9c4 	bl	8002798 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM2_Init+0xdc>)
 8001428:	f006 fcc4 	bl	8007db4 <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001432:	f001 f9b1 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200001bc 	.word	0x200001bc

08001444 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001476:	4a2d      	ldr	r2, [pc, #180]	; (800152c <MX_TIM4_Init+0xe8>)
 8001478:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_TIM4_Init+0xe4>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001488:	f242 720f 	movw	r2, #9999	; 0x270f
 800148c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_TIM4_Init+0xe4>)
 800149c:	f005 ff76 	bl	800738c <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014a6:	f001 f977 	bl	8002798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014b8:	f006 fdda 	bl	8008070 <HAL_TIM_ConfigClockSource>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014c2:	f001 f969 	bl	8002798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014c8:	f006 f86c 	bl	80075a4 <HAL_TIM_PWM_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014d2:	f001 f961 	bl	8002798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014e6:	f007 fb91 	bl	8008c0c <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014f0:	f001 f952 	bl	8002798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f4:	2360      	movs	r3, #96	; 0x60
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM4_Init+0xe4>)
 800150c:	f006 fcee 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001516:	f001 f93f 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM4_Init+0xe4>)
 800151c:	f001 fb3e 	bl	8002b9c <HAL_TIM_MspPostInit>

}
 8001520:	bf00      	nop
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000204 	.word	0x20000204
 800152c:	40000800 	.word	0x40000800

08001530 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_TIM11_Init+0x40>)
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <MX_TIM11_Init+0x44>)
 8001538:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_TIM11_Init+0x40>)
 800153c:	2263      	movs	r2, #99	; 0x63
 800153e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_TIM11_Init+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_TIM11_Init+0x40>)
 8001548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_TIM11_Init+0x40>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_TIM11_Init+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_TIM11_Init+0x40>)
 800155c:	f005 ff16 	bl	800738c <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001566:	f001 f917 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000024c 	.word	0x2000024c
 8001574:	40014800 	.word	0x40014800

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800157e:	4a13      	ldr	r2, [pc, #76]	; (80015cc <MX_USART2_UART_Init+0x54>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001584:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800158c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001590:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800159a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015b4:	f007 fbac 	bl	8008d10 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80015be:	f001 f8eb 	bl	8002798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200002f4 	.word	0x200002f4
 80015cc:	40004400 	.word	0x40004400

080015d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_DMA_Init+0x5c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <MX_DMA_Init+0x5c>)
 80015e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_DMA_Init+0x5c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	200c      	movs	r0, #12
 80015f8:	f001 fda3 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015fc:	200c      	movs	r0, #12
 80015fe:	f001 fdbc 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	200f      	movs	r0, #15
 8001608:	f001 fd9b 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800160c:	200f      	movs	r0, #15
 800160e:	f001 fdb4 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2010      	movs	r0, #16
 8001618:	f001 fd93 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800161c:	2010      	movs	r0, #16
 800161e:	f001 fdac 	bl	800317a <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b61      	ldr	r3, [pc, #388]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a60      	ldr	r2, [pc, #384]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b5e      	ldr	r3, [pc, #376]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a59      	ldr	r2, [pc, #356]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b4c      	ldr	r3, [pc, #304]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a4b      	ldr	r2, [pc, #300]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b42      	ldr	r3, [pc, #264]	; (80017d0 <MX_GPIO_Init+0x1a0>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2120      	movs	r1, #32
 80016d6:	483f      	ldr	r0, [pc, #252]	; (80017d4 <MX_GPIO_Init+0x1a4>)
 80016d8:	f002 fb16 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f24e 0104 	movw	r1, #57348	; 0xe004
 80016e2:	483d      	ldr	r0, [pc, #244]	; (80017d8 <MX_GPIO_Init+0x1a8>)
 80016e4:	f002 fb10 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 80016e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4837      	ldr	r0, [pc, #220]	; (80017dc <MX_GPIO_Init+0x1ac>)
 8001700:	f002 f966 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001704:	2320      	movs	r3, #32
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	482e      	ldr	r0, [pc, #184]	; (80017d4 <MX_GPIO_Init+0x1a4>)
 800171c:	f002 f958 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8001720:	2302      	movs	r3, #2
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4829      	ldr	r0, [pc, #164]	; (80017d8 <MX_GPIO_Init+0x1a8>)
 8001734:	f002 f94c 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8001738:	f24e 0304 	movw	r3, #57348	; 0xe004
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4821      	ldr	r0, [pc, #132]	; (80017d8 <MX_GPIO_Init+0x1a8>)
 8001752:	f002 f93d 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 8001756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	481b      	ldr	r0, [pc, #108]	; (80017dc <MX_GPIO_Init+0x1ac>)
 800176e:	f002 f92f 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8001772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4815      	ldr	r0, [pc, #84]	; (80017dc <MX_GPIO_Init+0x1ac>)
 8001788:	f002 f922 	bl	80039d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 800178c:	2304      	movs	r3, #4
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	; (80017e0 <MX_GPIO_Init+0x1b0>)
 80017a2:	f002 f915 	bl	80039d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	2008      	movs	r0, #8
 80017ac:	f001 fcc9 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80017b0:	2008      	movs	r0, #8
 80017b2:	f001 fce2 	bl	800317a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2028      	movs	r0, #40	; 0x28
 80017bc:	f001 fcc1 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017c0:	2028      	movs	r0, #40	; 0x28
 80017c2:	f001 fcda 	bl	800317a <HAL_NVIC_EnableIRQ>

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020c00 	.word	0x40020c00

080017e4 <GrandStatumix>:

/* USER CODE BEGIN 4 */
////////// Grand State //////////////////////////////////////////////////////
void GrandStatumix(){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80017e8:	4b64      	ldr	r3, [pc, #400]	; (800197c <GrandStatumix+0x198>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <GrandStatumix+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f6:	4862      	ldr	r0, [pc, #392]	; (8001980 <GrandStatumix+0x19c>)
 80017f8:	f002 fa86 	bl	8003d08 <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 80017fc:	4b5f      	ldr	r3, [pc, #380]	; (800197c <GrandStatumix+0x198>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <GrandStatumix+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	485d      	ldr	r0, [pc, #372]	; (8001980 <GrandStatumix+0x19c>)
 800180c:	f002 fa7c 	bl	8003d08 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8001810:	4b5a      	ldr	r3, [pc, #360]	; (800197c <GrandStatumix+0x198>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d103      	bne.n	8001820 <GrandStatumix+0x3c>
 8001818:	4b58      	ldr	r3, [pc, #352]	; (800197c <GrandStatumix+0x198>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b04      	cmp	r3, #4
 800181e:	d005      	beq.n	800182c <GrandStatumix+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001826:	4856      	ldr	r0, [pc, #344]	; (8001980 <GrandStatumix+0x19c>)
 8001828:	f002 fa6e 	bl	8003d08 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 800182c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001830:	4854      	ldr	r0, [pc, #336]	; (8001984 <GrandStatumix+0x1a0>)
 8001832:	f002 fa51 	bl	8003cd8 <HAL_GPIO_ReadPin>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b53      	ldr	r3, [pc, #332]	; (8001988 <GrandStatumix+0x1a4>)
 800183c:	701a      	strb	r2, [r3, #0]


	switch(grandState){
 800183e:	4b4f      	ldr	r3, [pc, #316]	; (800197c <GrandStatumix+0x198>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3b01      	subs	r3, #1
 8001844:	2b03      	cmp	r3, #3
 8001846:	d80b      	bhi.n	8001860 <GrandStatumix+0x7c>
 8001848:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <GrandStatumix+0x6c>)
 800184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184e:	bf00      	nop
 8001850:	080018a1 	.word	0x080018a1
 8001854:	080018e1 	.word	0x080018e1
 8001858:	08001947 	.word	0x08001947
 800185c:	0800191d 	.word	0x0800191d
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001866:	4846      	ldr	r0, [pc, #280]	; (8001980 <GrandStatumix+0x19c>)
 8001868:	f002 fa4e 	bl	8003d08 <HAL_GPIO_WritePin>
		PWMOut = 1200;
 800186c:	4b47      	ldr	r3, [pc, #284]	; (800198c <GrandStatumix+0x1a8>)
 800186e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001872:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 1){grandState = emer;}
 8001874:	4b46      	ldr	r3, [pc, #280]	; (8001990 <GrandStatumix+0x1ac>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d102      	bne.n	8001882 <GrandStatumix+0x9e>
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <GrandStatumix+0x198>)
 800187e:	2203      	movs	r2, #3
 8001880:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <GrandStatumix+0x1a4>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <GrandStatumix+0xac>
 800188a:	4b3c      	ldr	r3, [pc, #240]	; (800197c <GrandStatumix+0x198>)
 800188c:	2202      	movs	r2, #2
 800188e:	701a      	strb	r2, [r3, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 8001890:	4b40      	ldr	r3, [pc, #256]	; (8001994 <GrandStatumix+0x1b0>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d066      	beq.n	8001966 <GrandStatumix+0x182>
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <GrandStatumix+0x198>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
	break;
 800189e:	e062      	b.n	8001966 <GrandStatumix+0x182>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a6:	4836      	ldr	r0, [pc, #216]	; (8001980 <GrandStatumix+0x19c>)
 80018a8:	f002 fa2e 	bl	8003d08 <HAL_GPIO_WritePin>

	// transfer to while

		if (pwr_sense == 1){
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <GrandStatumix+0x1ac>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <GrandStatumix+0xde>
			grandState = emer;
 80018b4:	4b31      	ldr	r3, [pc, #196]	; (800197c <GrandStatumix+0x198>)
 80018b6:	2203      	movs	r2, #3
 80018b8:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <GrandStatumix+0x1b4>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
		if (stop_sense == 0){
 80018c2:	4b31      	ldr	r3, [pc, #196]	; (8001988 <GrandStatumix+0x1a4>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d14f      	bne.n	800196a <GrandStatumix+0x186>
			PWMOut = 0;
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <GrandStatumix+0x1a8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <GrandStatumix+0x198>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <GrandStatumix+0x1b4>)
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
	break;
 80018de:	e044      	b.n	800196a <GrandStatumix+0x186>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <GrandStatumix+0x19c>)
 80018e8:	f002 fa0e 	bl	8003d08 <HAL_GPIO_WritePin>
		PWMOut = 0;
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <GrandStatumix+0x1a8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	801a      	strh	r2, [r3, #0]

		if (stop_sense == 1){
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <GrandStatumix+0x1a4>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d139      	bne.n	800196e <GrandStatumix+0x18a>
			grandState = Ready;
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <GrandStatumix+0x198>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]

			mot_dirctn++;
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <GrandStatumix+0x1b8>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <GrandStatumix+0x1b8>)
 800190a:	701a      	strb	r2, [r3, #0]
			mot_dirctn%=2;
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <GrandStatumix+0x1b8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <GrandStatumix+0x1b8>)
 8001918:	701a      	strb	r2, [r3, #0]
		}
	break;
 800191a:	e028      	b.n	800196e <GrandStatumix+0x18a>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001922:	4817      	ldr	r0, [pc, #92]	; (8001980 <GrandStatumix+0x19c>)
 8001924:	f002 f9f0 	bl	8003d08 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <GrandStatumix+0x1a8>)
 800192a:	2200      	movs	r2, #0
 800192c:	801a      	strh	r2, [r3, #0]
			Integral = 0;
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <GrandStatumix+0x1bc>)
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	601a      	str	r2, [r3, #0]

			if (stop_sense == 1){
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <GrandStatumix+0x1a4>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d119      	bne.n	8001972 <GrandStatumix+0x18e>
				grandState = work;
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <GrandStatumix+0x198>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001944:	e015      	b.n	8001972 <GrandStatumix+0x18e>

	case emer:
		PWMOut = 0;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <GrandStatumix+0x1a8>)
 8001948:	2200      	movs	r2, #0
 800194a:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 0){
 800194c:	4b10      	ldr	r3, [pc, #64]	; (8001990 <GrandStatumix+0x1ac>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d110      	bne.n	8001976 <GrandStatumix+0x192>
			grandState = Ready;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <GrandStatumix+0x198>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800195a:	2064      	movs	r0, #100	; 0x64
 800195c:	f001 faf2 	bl	8002f44 <HAL_Delay>
			IOExpenderInit();
 8001960:	f000 fa18 	bl	8001d94 <IOExpenderInit>
		}
	break;
 8001964:	e007      	b.n	8001976 <GrandStatumix+0x192>
	break;
 8001966:	bf00      	nop
 8001968:	e006      	b.n	8001978 <GrandStatumix+0x194>
	break;
 800196a:	bf00      	nop
 800196c:	e004      	b.n	8001978 <GrandStatumix+0x194>
	break;
 800196e:	bf00      	nop
 8001970:	e002      	b.n	8001978 <GrandStatumix+0x194>
		break;
 8001972:	bf00      	nop
 8001974:	e000      	b.n	8001978 <GrandStatumix+0x194>
	break;
 8001976:	bf00      	nop
	}
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000338 	.word	0x20000338
 8001980:	40020400 	.word	0x40020400
 8001984:	40020800 	.word	0x40020800
 8001988:	2000033a 	.word	0x2000033a
 800198c:	20000000 	.word	0x20000000
 8001990:	20000339 	.word	0x20000339
 8001994:	2000047d 	.word	0x2000047d
 8001998:	2000048c 	.word	0x2000048c
 800199c:	2000047c 	.word	0x2000047c
 80019a0:	200004a0 	.word	0x200004a0

080019a4 <GraytoBinario>:
////////// Absolute Encoder ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	460a      	mov	r2, r1
 80019ae:	80fb      	strh	r3, [r7, #6]
 80019b0:	4613      	mov	r3, r2
 80019b2:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	797b      	ldrb	r3, [r7, #5]
 80019bc:	3b01      	subs	r3, #1
 80019be:	fa42 f303 	asr.w	r3, r2, r3
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 80019ca:	2301      	movs	r3, #1
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	e01d      	b.n	8001a0c <GraytoBinario+0x68>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 80019d0:	8afb      	ldrh	r3, [r7, #22]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 80019d8:	88fa      	ldrh	r2, [r7, #6]
 80019da:	7979      	ldrb	r1, [r7, #5]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3301      	adds	r3, #1
 80019e0:	1acb      	subs	r3, r1, r3
 80019e2:	fa42 f303 	asr.w	r3, r2, r3
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d103      	bne.n	80019fc <GraytoBinario+0x58>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 80019f4:	8afb      	ldrh	r3, [r7, #22]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	82fb      	strh	r3, [r7, #22]
 80019fa:	e004      	b.n	8001a06 <GraytoBinario+0x62>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 80019fc:	8afb      	ldrh	r3, [r7, #22]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dbdd      	blt.n	80019d0 <GraytoBinario+0x2c>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8001a14:	8afb      	ldrh	r3, [r7, #22]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	0000      	movs	r0, r0
 8001a24:	0000      	movs	r0, r0
	...

08001a28 <encoderSpeedReaderCycle>:

void encoderSpeedReaderCycle() {
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	// re code using position dif time
	//get DMA Position form number of data
	uint32_t CapPos =CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 8001a2e:	4932      	ldr	r1, [pc, #200]	; (8001af8 <encoderSpeedReaderCycle+0xd0>)
 8001a30:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001a32:	6809      	ldr	r1, [r1, #0]
 8001a34:	6849      	ldr	r1, [r1, #4]
 8001a36:	f1c1 0110 	rsb	r1, r1, #16
 8001a3a:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0 ;
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	6079      	str	r1, [r7, #4]

	//calculate diff from all buffer except current dma
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8001a40:	2402      	movs	r4, #2
 8001a42:	e022      	b.n	8001a8a <encoderSpeedReaderCycle+0x62>
	{
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 8001a44:	4620      	mov	r0, r4
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	4401      	add	r1, r0
 8001a4a:	3101      	adds	r1, #1
 8001a4c:	f001 010f 	and.w	r1, r1, #15
 8001a50:	482a      	ldr	r0, [pc, #168]	; (8001afc <encoderSpeedReaderCycle+0xd4>)
 8001a52:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8001a56:	4625      	mov	r5, r4
 8001a58:	6839      	ldr	r1, [r7, #0]
 8001a5a:	4429      	add	r1, r5
 8001a5c:	f001 010f 	and.w	r1, r1, #15
 8001a60:	4d26      	ldr	r5, [pc, #152]	; (8001afc <encoderSpeedReaderCycle+0xd4>)
 8001a62:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8001a66:	1a41      	subs	r1, r0, r1
 8001a68:	2000      	movs	r0, #0
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4824      	ldr	r0, [pc, #144]	; (8001b00 <encoderSpeedReaderCycle+0xd8>)
 8001a70:	00e1      	lsls	r1, r4, #3
 8001a72:	4401      	add	r1, r0
 8001a74:	e9c1 2300 	strd	r2, r3, [r1]
		//Sum all  Diff
		sum += DiffTime[i];
 8001a78:	4821      	ldr	r0, [pc, #132]	; (8001b00 <encoderSpeedReaderCycle+0xd8>)
 8001a7a:	00e1      	lsls	r1, r4, #3
 8001a7c:	4401      	add	r1, r0
 8001a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4401      	add	r1, r0
 8001a86:	6079      	str	r1, [r7, #4]
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8001a88:	3401      	adds	r4, #1
 8001a8a:	2c0e      	cmp	r4, #14
 8001a8c:	ddda      	ble.n	8001a44 <encoderSpeedReaderCycle+0x1c>
	}

	//mean all Diff
	MeanTime =sum / (float)(CAPTURENUM-3);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a98:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8001a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <encoderSpeedReaderCycle+0xdc>)
 8001aa2:	edc3 7a00 	vstr	s15, [r3]
	// Meantime = 1 time period for 1 pulse
	// 60000000 / MeanTime = amount of pulse in 1 minute with that time period
	// 1024 pulse per round

	RoundNum = (60000000.0 / MeanTime)/1024.0; // round per min detect by 1024 clk
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <encoderSpeedReaderCycle+0xdc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fcf8 	bl	80004a0 <__aeabi_f2d>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	a10e      	add	r1, pc, #56	; (adr r1, 8001af0 <encoderSpeedReaderCycle+0xc8>)
 8001ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aba:	f7fe fe73 	bl	80007a4 <__aeabi_ddiv>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <encoderSpeedReaderCycle+0xe0>)
 8001acc:	f7fe fe6a 	bl	80007a4 <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7fe ff4c 	bl	8000974 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <encoderSpeedReaderCycle+0xe4>)
 8001ae0:	6013      	str	r3, [r2, #0]

}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w
 8001af0:	00000000 	.word	0x00000000
 8001af4:	418c9c38 	.word	0x418c9c38
 8001af8:	200001bc 	.word	0x200001bc
 8001afc:	20000358 	.word	0x20000358
 8001b00:	20000398 	.word	0x20000398
 8001b04:	20000410 	.word	0x20000410
 8001b08:	40900000 	.word	0x40900000
 8001b0c:	20000414 	.word	0x20000414

08001b10 <Speedsmoothfunc>:

void Speedsmoothfunc(float inpdat){
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	ed87 0a01 	vstr	s0, [r7, #4]
	//static uint8_t scc 0;
	for(int j = CAPTURENUM-1; j >= 0;j--){
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e00d      	b.n	8001b3c <Speedsmoothfunc+0x2c>
		speedsmoothlog[j] = speedsmoothlog[j-1];
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <Speedsmoothfunc+0xb8>)
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4926      	ldr	r1, [pc, #152]	; (8001bc8 <Speedsmoothfunc+0xb8>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	601a      	str	r2, [r3, #0]
	for(int j = CAPTURENUM-1; j >= 0;j--){
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	daee      	bge.n	8001b20 <Speedsmoothfunc+0x10>
	}
	speedsmoothlog[0] = inpdat;
 8001b42:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <Speedsmoothfunc+0xb8>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]

	float summa = 0.0;
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
	int errcut = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
	for (int k = 0; k < CAPTURENUM;k++){
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	e01f      	b.n	8001b98 <Speedsmoothfunc+0x88>
		if (speedsmoothlog[k]>=500){errcut++;}
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <Speedsmoothfunc+0xb8>)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001bcc <Speedsmoothfunc+0xbc>
 8001b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	db03      	blt.n	8001b7a <Speedsmoothfunc+0x6a>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3301      	adds	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e00b      	b.n	8001b92 <Speedsmoothfunc+0x82>
		else{summa+= speedsmoothlog[k];}
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <Speedsmoothfunc+0xb8>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8e:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int k = 0; k < CAPTURENUM;k++){
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	dddc      	ble.n	8001b58 <Speedsmoothfunc+0x48>

	}
	RoundNumnd_sm =  summa / (CAPTURENUM-errcut);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1c3 0310 	rsb	r3, r3, #16
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bac:	edd7 6a04 	vldr	s13, [r7, #16]
 8001bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <Speedsmoothfunc+0xc0>)
 8001bb6:	edc3 7a00 	vstr	s15, [r3]
}
 8001bba:	bf00      	nop
 8001bbc:	371c      	adds	r7, #28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000420 	.word	0x20000420
 8001bcc:	43fa0000 	.word	0x43fa0000
 8001bd0:	20000468 	.word	0x20000468

08001bd4 <PIDzero>:

///////////////////// PID Zero /////////////////////////////
void PIDzero(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	CrrntTime = micros();
 8001bd8:	f000 fda8 	bl	800272c <micros>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f7fe ffde 	bl	8000ba4 <__aeabi_ul2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <PIDzero+0xe0>)
 8001bec:	6013      	str	r3, [r2, #0]
	DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <PIDzero+0xe0>)
 8001bf0:	ed93 7a00 	vldr	s14, [r3]
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <PIDzero+0xe4>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bfe:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001cbc <PIDzero+0xe8>
 8001c02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c06:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <PIDzero+0xec>)
 8001c08:	edc3 7a00 	vstr	s15, [r3]
	PreviTime = CrrntTime; // log previ here for next loop
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <PIDzero+0xe0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <PIDzero+0xe4>)
 8001c12:	6013      	str	r3, [r2, #0]

	ErrPos[0] = TargetDeg - BinPosXI;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <PIDzero+0xf0>)
 8001c16:	ed93 7a00 	vldr	s14, [r3]
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <PIDzero+0xf4>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <PIDzero+0xf8>)
 8001c2c:	edc3 7a00 	vstr	s15, [r3]

	Propo = K_P * ErrPos[0];
 8001c30:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <PIDzero+0xf8>)
 8001c32:	ed93 7a00 	vldr	s14, [r3]
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <PIDzero+0xfc>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <PIDzero+0x100>)
 8001c42:	edc3 7a00 	vstr	s15, [r3]

	Integral = Integral + ( ErrPos[0] * DeltaTime ); // Integral -Newton-Leibniz
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <PIDzero+0xf8>)
 8001c48:	ed93 7a00 	vldr	s14, [r3]
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <PIDzero+0xec>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <PIDzero+0x104>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <PIDzero+0x104>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]

	Derivate = (ErrPos[0]-ErrPos[1]) / DeltaTime; // d/dt position
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <PIDzero+0xf8>)
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <PIDzero+0xf8>)
 8001c6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <PIDzero+0xec>)
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <PIDzero+0x108>)
 8001c82:	edc3 7a00 	vstr	s15, [r3]

	u_contr = Propo + (K_I * Integral) ; // PID u[k] + (K_D * Derivate)
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <PIDzero+0x10c>)
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <PIDzero+0x104>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <PIDzero+0x100>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <PIDzero+0x110>)
 8001ca2:	edc3 7a00 	vstr	s15, [r3]

	ErrPos[1] = ErrPos[0]; // log previous error
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <PIDzero+0xf8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <PIDzero+0xf8>)
 8001cac:	6053      	str	r3, [r2, #4]
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000498 	.word	0x20000498
 8001cb8:	20000490 	.word	0x20000490
 8001cbc:	49742400 	.word	0x49742400
 8001cc0:	20000494 	.word	0x20000494
 8001cc4:	20000480 	.word	0x20000480
 8001cc8:	20000354 	.word	0x20000354
 8001ccc:	20000484 	.word	0x20000484
 8001cd0:	20000004 	.word	0x20000004
 8001cd4:	2000049c 	.word	0x2000049c
 8001cd8:	200004a0 	.word	0x200004a0
 8001cdc:	200004a4 	.word	0x200004a4
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	2000048c 	.word	0x2000048c

08001ce8 <MotDrvCytron>:

void MotDrvCytron(){
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

	//   direction chk
	if(u_contr < 0){mot_dirctn= 0;}
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <MotDrvCytron+0x9c>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	d503      	bpl.n	8001d04 <MotDrvCytron+0x1c>
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <MotDrvCytron+0xa0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	e00e      	b.n	8001d22 <MotDrvCytron+0x3a>
	else if(u_contr > 0) {mot_dirctn = 1;}
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <MotDrvCytron+0x9c>)
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	dd03      	ble.n	8001d1c <MotDrvCytron+0x34>
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <MotDrvCytron+0xa0>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e002      	b.n	8001d22 <MotDrvCytron+0x3a>
	else{PWMOut = 0;}
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MotDrvCytron+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	801a      	strh	r2, [r3, #0]

	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <MotDrvCytron+0x9c>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eef0 7ae7 	vabs.f32	s15, s15
 8001d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d30:	ee17 3a90 	vmov	r3, s15
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MotDrvCytron+0xa4>)
 8001d38:	801a      	strh	r2, [r3, #0]
	if(PWMOut> 4000){PWMOut = 4000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MotDrvCytron+0xa4>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001d42:	d903      	bls.n	8001d4c <MotDrvCytron+0x64>
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MotDrvCytron+0xa4>)
 8001d46:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001d4a:	801a      	strh	r2, [r3, #0]
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MotDrvCytron+0xa4>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001d54:	d210      	bcs.n	8001d78 <MotDrvCytron+0x90>
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MotDrvCytron+0xa8>)
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	eef0 7ae7 	vabs.f32	s15, s15
 8001d60:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	da00      	bge.n	8001d70 <MotDrvCytron+0x88>
	//if(ErrPos[0] < 2){PWMOut = 0;}
}
 8001d6e:	e003      	b.n	8001d78 <MotDrvCytron+0x90>
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MotDrvCytron+0xa4>)
 8001d72:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001d76:	801a      	strh	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	2000048c 	.word	0x2000048c
 8001d88:	2000047c 	.word	0x2000047c
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000484 	.word	0x20000484

08001d94 <IOExpenderInit>:

/////////////////////Abs Encoder I2C////////////////////////////////////////////
void IOExpenderInit() {// call when start system
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 8001d9a:	2364      	movs	r3, #100	; 0x64
 8001d9c:	9302      	str	r3, [sp, #8]
 8001d9e:	2316      	movs	r3, #22
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <IOExpenderInit+0x24>)
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2301      	movs	r3, #1
 8001da8:	2200      	movs	r2, #0
 8001daa:	2140      	movs	r1, #64	; 0x40
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <IOExpenderInit+0x28>)
 8001dae:	f002 f93b 	bl	8004028 <HAL_I2C_Mem_Write>
			0x16, 100);
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000014 	.word	0x20000014
 8001dbc:	20000054 	.word	0x20000054

08001dc0 <AbsEncI2CReadx>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af04      	add	r7, sp, #16
 8001dc6:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8001dc8:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <AbsEncI2CReadx+0xa4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d044      	beq.n	8001e5a <AbsEncI2CReadx+0x9a>
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <AbsEncI2CReadx+0xa8>)
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d13e      	bne.n	8001e5a <AbsEncI2CReadx+0x9a>
		switch(flag_absenc){
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <AbsEncI2CReadx+0xa4>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d002      	beq.n	8001dea <AbsEncI2CReadx+0x2a>
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d010      	beq.n	8001e0a <AbsEncI2CReadx+0x4a>
		default:
			break;
 8001de8:	e038      	b.n	8001e5c <AbsEncI2CReadx+0x9c>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8001dea:	2364      	movs	r3, #100	; 0x64
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	2302      	movs	r3, #2
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	2212      	movs	r2, #18
 8001dfa:	2140      	movs	r1, #64	; 0x40
 8001dfc:	481a      	ldr	r0, [pc, #104]	; (8001e68 <AbsEncI2CReadx+0xa8>)
 8001dfe:	f002 fa0d 	bl	800421c <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <AbsEncI2CReadx+0xa4>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]
		break;
 8001e08:	e028      	b.n	8001e5c <AbsEncI2CReadx+0x9c>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <AbsEncI2CReadx+0xac>)
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <AbsEncI2CReadx+0xac>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b21b      	sxth	r3, r3
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <AbsEncI2CReadx+0xb0>)
 8001e20:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <AbsEncI2CReadx+0xb0>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	210a      	movs	r1, #10
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fdbb 	bl	80019a4 <GraytoBinario>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f5a3 73dd 	sub.w	r3, r3, #442	; 0x1ba
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <AbsEncI2CReadx+0xb4>)
 8001e38:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <AbsEncI2CReadx+0xb4>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d306      	bcc.n	8001e52 <AbsEncI2CReadx+0x92>
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <AbsEncI2CReadx+0xb4>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <AbsEncI2CReadx+0xb4>)
 8001e50:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <AbsEncI2CReadx+0xa4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
		break;
 8001e58:	e000      	b.n	8001e5c <AbsEncI2CReadx+0x9c>
		}
	}
 8001e5a:	bf00      	nop
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000356 	.word	0x20000356
 8001e68:	20000054 	.word	0x20000054
 8001e6c:	20000350 	.word	0x20000350
 8001e70:	20000352 	.word	0x20000352
 8001e74:	20000354 	.word	0x20000354

08001e78 <Efft_activate>:
//////////////// End Effector /////////////////////////////////
void Efft_activate(){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8001e7e:	2345      	movs	r3, #69	; 0x45
 8001e80:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <Efft_activate+0x7c>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d015      	beq.n	8001eb6 <Efft_activate+0x3e>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <Efft_activate+0x80>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d029      	beq.n	8001ee6 <Efft_activate+0x6e>
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <Efft_activate+0x84>)
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d123      	bne.n	8001ee6 <Efft_activate+0x6e>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8001e9e:	1dfa      	adds	r2, r7, #7
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2146      	movs	r1, #70	; 0x46
 8001ea8:	4814      	ldr	r0, [pc, #80]	; (8001efc <Efft_activate+0x84>)
 8001eaa:	f002 fbdd 	bl	8004668 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <Efft_activate+0x7c>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001eb4:	e017      	b.n	8001ee6 <Efft_activate+0x6e>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <Efft_activate+0x84>)
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d113      	bne.n	8001eea <Efft_activate+0x72>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8001ec2:	1dfa      	adds	r2, r7, #7
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	2146      	movs	r1, #70	; 0x46
 8001ecc:	480b      	ldr	r0, [pc, #44]	; (8001efc <Efft_activate+0x84>)
 8001ece:	f002 fbcb 	bl	8004668 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <Efft_activate+0x7c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <Efft_activate+0x80>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <Efft_activate+0x88>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001ee4:	e001      	b.n	8001eea <Efft_activate+0x72>
	break;
 8001ee6:	bf00      	nop
 8001ee8:	e000      	b.n	8001eec <Efft_activate+0x74>
	break;
 8001eea:	bf00      	nop
	}

}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	200004ee 	.word	0x200004ee
 8001ef8:	200004a9 	.word	0x200004a9
 8001efc:	200000a8 	.word	0x200000a8
 8001f00:	200004ab 	.word	0x200004ab

08001f04 <Efft_read>:
void Efft_read(uint8_t *Rddata){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	6078      	str	r0, [r7, #4]
		HAL_I2C_Mem_Read_IT(&hi2c3, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1);
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	switch(efrdStatus){
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <Efft_read+0x74>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d015      	beq.n	8001f40 <Efft_read+0x3c>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <Efft_read+0x78>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d026      	beq.n	8001f6a <Efft_read+0x66>
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <Efft_read+0x7c>)
 8001f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d120      	bne.n	8001f6a <Efft_read+0x66>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8001f28:	2302      	movs	r3, #2
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <Efft_read+0x80>)
 8001f30:	2146      	movs	r1, #70	; 0x46
 8001f32:	4813      	ldr	r0, [pc, #76]	; (8001f80 <Efft_read+0x7c>)
 8001f34:	f002 fb98 	bl	8004668 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <Efft_read+0x74>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001f3e:	e014      	b.n	8001f6a <Efft_read+0x66>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <Efft_read+0x7c>)
 8001f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d110      	bne.n	8001f6e <Efft_read+0x6a>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2301      	movs	r3, #1
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	2146      	movs	r1, #70	; 0x46
 8001f56:	480a      	ldr	r0, [pc, #40]	; (8001f80 <Efft_read+0x7c>)
 8001f58:	f002 fc4c 	bl	80047f4 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <Efft_read+0x78>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <Efft_read+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
			}
	break;
 8001f68:	e001      	b.n	8001f6e <Efft_read+0x6a>
	break;
 8001f6a:	bf00      	nop
 8001f6c:	e000      	b.n	8001f70 <Efft_read+0x6c>
	break;
 8001f6e:	bf00      	nop
	}

}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200004ef 	.word	0x200004ef
 8001f7c:	200004aa 	.word	0x200004aa
 8001f80:	200000a8 	.word	0x200000a8
 8001f84:	2000002a 	.word	0x2000002a

08001f88 <All_mode_UARTUI>:
/////////////////UART UI Base System ////////////////////////////
void All_mode_UARTUI()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	// DataIn = 1 byte Data from UART Recieve
	switch (chkM){				// Check mode State
 8001f8e:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <All_mode_UARTUI+0x21c>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d015      	beq.n	8001fc2 <All_mode_UARTUI+0x3a>
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d02b      	beq.n	8001ff2 <All_mode_UARTUI+0x6a>
		default:
		case 0: 				// Check start INIT
			StartM = DataIn;    // 	Use in Checksum Frame 3
 8001f9a:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <All_mode_UARTUI+0x220>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b82      	ldr	r3, [pc, #520]	; (80021ac <All_mode_UARTUI+0x224>)
 8001fa2:	701a      	strb	r2, [r3, #0]
			uint8_t chkStart = DataIn >> 4;
 8001fa4:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <All_mode_UARTUI+0x220>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	111b      	asrs	r3, r3, #4
 8001faa:	71fb      	strb	r3, [r7, #7]
			if (chkStart == 0b1001){ // 9
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b09      	cmp	r3, #9
 8001fb0:	d103      	bne.n	8001fba <All_mode_UARTUI+0x32>
				chkM = 1;
 8001fb2:	4b7c      	ldr	r3, [pc, #496]	; (80021a4 <All_mode_UARTUI+0x21c>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
			}else{chkM = 0;}
			break;
 8001fb8:	e302      	b.n	80025c0 <All_mode_UARTUI+0x638>
			}else{chkM = 0;}
 8001fba:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <All_mode_UARTUI+0x21c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
			break;
 8001fc0:	e2fe      	b.n	80025c0 <All_mode_UARTUI+0x638>

		case 1:					// Check if mode 1 - 14 or not
			NameM = (DataIn & 0b00001111); // 15
 8001fc2:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <All_mode_UARTUI+0x220>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b78      	ldr	r3, [pc, #480]	; (80021b0 <All_mode_UARTUI+0x228>)
 8001fd0:	701a      	strb	r2, [r3, #0]
			if (NameM >= 1 && NameM <= 14){ chkM = 2;}
 8001fd2:	4b77      	ldr	r3, [pc, #476]	; (80021b0 <All_mode_UARTUI+0x228>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <All_mode_UARTUI+0x62>
 8001fda:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <All_mode_UARTUI+0x228>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b0e      	cmp	r3, #14
 8001fe0:	d803      	bhi.n	8001fea <All_mode_UARTUI+0x62>
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <All_mode_UARTUI+0x21c>)
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	701a      	strb	r2, [r3, #0]
			else{chkM = 0;}
			break;
 8001fe8:	e2ea      	b.n	80025c0 <All_mode_UARTUI+0x638>
			else{chkM = 0;}
 8001fea:	4b6e      	ldr	r3, [pc, #440]	; (80021a4 <All_mode_UARTUI+0x21c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
			break;
 8001ff0:	e2e6      	b.n	80025c0 <All_mode_UARTUI+0x638>
		///////////////////////// // 14Mode work State //////////////////////////
		case 2:
			switch (NameM){			// 14Mode work State
 8001ff2:	4b6f      	ldr	r3, [pc, #444]	; (80021b0 <All_mode_UARTUI+0x228>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	2b0d      	cmp	r3, #13
 8001ffa:	f200 82e1 	bhi.w	80025c0 <All_mode_UARTUI+0x638>
 8001ffe:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <All_mode_UARTUI+0x7c>)
 8002000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002004:	0800203d 	.word	0x0800203d
 8002008:	080020b1 	.word	0x080020b1
 800200c:	080020f1 	.word	0x080020f1
 8002010:	08002131 	.word	0x08002131
 8002014:	080021d5 	.word	0x080021d5
 8002018:	08002249 	.word	0x08002249
 800201c:	080022bd 	.word	0x080022bd
 8002020:	08002361 	.word	0x08002361
 8002024:	080023b7 	.word	0x080023b7
 8002028:	080023f7 	.word	0x080023f7
 800202c:	08002479 	.word	0x08002479
 8002030:	080024b5 	.word	0x080024b5
 8002034:	080024f9 	.word	0x080024f9
 8002038:	08002543 	.word	0x08002543
				case 1:			// Check
					if (dataFN == 2){
 800203c:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <All_mode_UARTUI+0x22c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d104      	bne.n	800204e <All_mode_UARTUI+0xc6>
						dataF1 = DataIn;
 8002044:	4b58      	ldr	r3, [pc, #352]	; (80021a8 <All_mode_UARTUI+0x220>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <All_mode_UARTUI+0x230>)
 800204c:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 800204e:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <All_mode_UARTUI+0x22c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d104      	bne.n	8002060 <All_mode_UARTUI+0xd8>
						dataF2 = DataIn;
 8002056:	4b54      	ldr	r3, [pc, #336]	; (80021a8 <All_mode_UARTUI+0x220>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b57      	ldr	r3, [pc, #348]	; (80021bc <All_mode_UARTUI+0x234>)
 800205e:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 8002060:	4b51      	ldr	r3, [pc, #324]	; (80021a8 <All_mode_UARTUI+0x220>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <All_mode_UARTUI+0x238>)
 8002068:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800206a:	4b50      	ldr	r3, [pc, #320]	; (80021ac <All_mode_UARTUI+0x224>)
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <All_mode_UARTUI+0x230>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4413      	add	r3, r2
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b51      	ldr	r3, [pc, #324]	; (80021bc <All_mode_UARTUI+0x234>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	b2db      	uxtb	r3, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <All_mode_UARTUI+0x23c>)
 8002084:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8002086:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <All_mode_UARTUI+0x238>)
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <All_mode_UARTUI+0x23c>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	f040 827d 	bne.w	800258e <All_mode_UARTUI+0x606>
						//M_state = 1;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002098:	2202      	movs	r2, #2
 800209a:	494b      	ldr	r1, [pc, #300]	; (80021c8 <All_mode_UARTUI+0x240>)
 800209c:	484b      	ldr	r0, [pc, #300]	; (80021cc <All_mode_UARTUI+0x244>)
 800209e:	f006 fe84 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 80020a2:	4b40      	ldr	r3, [pc, #256]	; (80021a4 <All_mode_UARTUI+0x21c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80020a8:	4b42      	ldr	r3, [pc, #264]	; (80021b4 <All_mode_UARTUI+0x22c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
					}
					break;
 80020ae:	e26e      	b.n	800258e <All_mode_UARTUI+0x606>
				case 2:			// MCU Connect ,2 byte DataFrame 1
					chksum = DataIn;
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <All_mode_UARTUI+0x220>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <All_mode_UARTUI+0x238>)
 80020b8:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);	// Check condition from manual
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <All_mode_UARTUI+0x224>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	43db      	mvns	r3, r3
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <All_mode_UARTUI+0x248>)
 80020c4:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){	// Transmit back ack1
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <All_mode_UARTUI+0x238>)
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <All_mode_UARTUI+0x248>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	f040 825f 	bne.w	8002592 <All_mode_UARTUI+0x60a>
						//M_state = 2;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80020d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d8:	2202      	movs	r2, #2
 80020da:	493b      	ldr	r1, [pc, #236]	; (80021c8 <All_mode_UARTUI+0x240>)
 80020dc:	483b      	ldr	r0, [pc, #236]	; (80021cc <All_mode_UARTUI+0x244>)
 80020de:	f006 fe64 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 80020e2:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <All_mode_UARTUI+0x21c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <All_mode_UARTUI+0x22c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
					}

					break;
 80020ee:	e250      	b.n	8002592 <All_mode_UARTUI+0x60a>
				case 3:			// MCU DisConnect ,2 byte DataFrame 1
					chksum = DataIn;
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <All_mode_UARTUI+0x220>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <All_mode_UARTUI+0x238>)
 80020f8:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <All_mode_UARTUI+0x224>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	43db      	mvns	r3, r3
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <All_mode_UARTUI+0x248>)
 8002104:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8002106:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <All_mode_UARTUI+0x238>)
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <All_mode_UARTUI+0x248>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	f040 8241 	bne.w	8002596 <All_mode_UARTUI+0x60e>
						//M_state = 3;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002118:	2202      	movs	r2, #2
 800211a:	492b      	ldr	r1, [pc, #172]	; (80021c8 <All_mode_UARTUI+0x240>)
 800211c:	482b      	ldr	r0, [pc, #172]	; (80021cc <All_mode_UARTUI+0x244>)
 800211e:	f006 fe44 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <All_mode_UARTUI+0x21c>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <All_mode_UARTUI+0x22c>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800212e:	e232      	b.n	8002596 <All_mode_UARTUI+0x60e>
				case 4:			// Set Angular Velocity
					if (dataFN == 2){
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <All_mode_UARTUI+0x22c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d104      	bne.n	8002142 <All_mode_UARTUI+0x1ba>
						dataF1 = DataIn;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <All_mode_UARTUI+0x220>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <All_mode_UARTUI+0x230>)
 8002140:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <All_mode_UARTUI+0x22c>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d104      	bne.n	8002154 <All_mode_UARTUI+0x1cc>
						dataF2 = DataIn;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <All_mode_UARTUI+0x220>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <All_mode_UARTUI+0x234>)
 8002152:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <All_mode_UARTUI+0x220>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <All_mode_UARTUI+0x238>)
 800215c:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <All_mode_UARTUI+0x224>)
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <All_mode_UARTUI+0x230>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <All_mode_UARTUI+0x234>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4413      	add	r3, r2
 8002170:	b2db      	uxtb	r3, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <All_mode_UARTUI+0x23c>)
 8002178:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <All_mode_UARTUI+0x238>)
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <All_mode_UARTUI+0x23c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	f040 8209 	bne.w	800259a <All_mode_UARTUI+0x612>
						//M_state = 4;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 8002188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218c:	2202      	movs	r2, #2
 800218e:	490e      	ldr	r1, [pc, #56]	; (80021c8 <All_mode_UARTUI+0x240>)
 8002190:	480e      	ldr	r0, [pc, #56]	; (80021cc <All_mode_UARTUI+0x244>)
 8002192:	f006 fe0a 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 8002196:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <All_mode_UARTUI+0x21c>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <All_mode_UARTUI+0x22c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80021a2:	e1fa      	b.n	800259a <All_mode_UARTUI+0x612>
 80021a4:	200004e1 	.word	0x200004e1
 80021a8:	200004dc 	.word	0x200004dc
 80021ac:	200004e2 	.word	0x200004e2
 80021b0:	200004e3 	.word	0x200004e3
 80021b4:	200004e4 	.word	0x200004e4
 80021b8:	200004e6 	.word	0x200004e6
 80021bc:	200004e7 	.word	0x200004e7
 80021c0:	200004e9 	.word	0x200004e9
 80021c4:	200004eb 	.word	0x200004eb
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	200002f4 	.word	0x200002f4
 80021d0:	200004ea 	.word	0x200004ea
				case 5:			// Set Angular Position
					if (dataFN == 2){
 80021d4:	4b98      	ldr	r3, [pc, #608]	; (8002438 <All_mode_UARTUI+0x4b0>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d104      	bne.n	80021e6 <All_mode_UARTUI+0x25e>
						dataF1 = DataIn;
 80021dc:	4b97      	ldr	r3, [pc, #604]	; (800243c <All_mode_UARTUI+0x4b4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b97      	ldr	r3, [pc, #604]	; (8002440 <All_mode_UARTUI+0x4b8>)
 80021e4:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 80021e6:	4b94      	ldr	r3, [pc, #592]	; (8002438 <All_mode_UARTUI+0x4b0>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d104      	bne.n	80021f8 <All_mode_UARTUI+0x270>
						dataF2 = DataIn;
 80021ee:	4b93      	ldr	r3, [pc, #588]	; (800243c <All_mode_UARTUI+0x4b4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b93      	ldr	r3, [pc, #588]	; (8002444 <All_mode_UARTUI+0x4bc>)
 80021f6:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 80021f8:	4b90      	ldr	r3, [pc, #576]	; (800243c <All_mode_UARTUI+0x4b4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b92      	ldr	r3, [pc, #584]	; (8002448 <All_mode_UARTUI+0x4c0>)
 8002200:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8002202:	4b92      	ldr	r3, [pc, #584]	; (800244c <All_mode_UARTUI+0x4c4>)
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	4b8e      	ldr	r3, [pc, #568]	; (8002440 <All_mode_UARTUI+0x4b8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b8d      	ldr	r3, [pc, #564]	; (8002444 <All_mode_UARTUI+0x4bc>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b8d      	ldr	r3, [pc, #564]	; (8002450 <All_mode_UARTUI+0x4c8>)
 800221c:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 800221e:	4b8a      	ldr	r3, [pc, #552]	; (8002448 <All_mode_UARTUI+0x4c0>)
 8002220:	781a      	ldrb	r2, [r3, #0]
 8002222:	4b8b      	ldr	r3, [pc, #556]	; (8002450 <All_mode_UARTUI+0x4c8>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	f040 81b9 	bne.w	800259e <All_mode_UARTUI+0x616>
						//M_state = 5;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 800222c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002230:	2202      	movs	r2, #2
 8002232:	4988      	ldr	r1, [pc, #544]	; (8002454 <All_mode_UARTUI+0x4cc>)
 8002234:	4888      	ldr	r0, [pc, #544]	; (8002458 <All_mode_UARTUI+0x4d0>)
 8002236:	f006 fdb8 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 800223a:	4b88      	ldr	r3, [pc, #544]	; (800245c <All_mode_UARTUI+0x4d4>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002240:	4b7d      	ldr	r3, [pc, #500]	; (8002438 <All_mode_UARTUI+0x4b0>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002246:	e1aa      	b.n	800259e <All_mode_UARTUI+0x616>
				case 6:			// Set goal single station
					if (dataFN == 2){
 8002248:	4b7b      	ldr	r3, [pc, #492]	; (8002438 <All_mode_UARTUI+0x4b0>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d104      	bne.n	800225a <All_mode_UARTUI+0x2d2>
						dataF1 = DataIn;
 8002250:	4b7a      	ldr	r3, [pc, #488]	; (800243c <All_mode_UARTUI+0x4b4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b7a      	ldr	r3, [pc, #488]	; (8002440 <All_mode_UARTUI+0x4b8>)
 8002258:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 800225a:	4b77      	ldr	r3, [pc, #476]	; (8002438 <All_mode_UARTUI+0x4b0>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d104      	bne.n	800226c <All_mode_UARTUI+0x2e4>
						dataF2 = DataIn;
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <All_mode_UARTUI+0x4b4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b76      	ldr	r3, [pc, #472]	; (8002444 <All_mode_UARTUI+0x4bc>)
 800226a:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 800226c:	4b73      	ldr	r3, [pc, #460]	; (800243c <All_mode_UARTUI+0x4b4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b75      	ldr	r3, [pc, #468]	; (8002448 <All_mode_UARTUI+0x4c0>)
 8002274:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8002276:	4b75      	ldr	r3, [pc, #468]	; (800244c <All_mode_UARTUI+0x4c4>)
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b71      	ldr	r3, [pc, #452]	; (8002440 <All_mode_UARTUI+0x4b8>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4413      	add	r3, r2
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b70      	ldr	r3, [pc, #448]	; (8002444 <All_mode_UARTUI+0x4bc>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	b2db      	uxtb	r3, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b70      	ldr	r3, [pc, #448]	; (8002450 <All_mode_UARTUI+0x4c8>)
 8002290:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8002292:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <All_mode_UARTUI+0x4c0>)
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	4b6e      	ldr	r3, [pc, #440]	; (8002450 <All_mode_UARTUI+0x4c8>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	f040 8181 	bne.w	80025a2 <All_mode_UARTUI+0x61a>
						//M_state = 6;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 80022a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a4:	2202      	movs	r2, #2
 80022a6:	496b      	ldr	r1, [pc, #428]	; (8002454 <All_mode_UARTUI+0x4cc>)
 80022a8:	486b      	ldr	r0, [pc, #428]	; (8002458 <All_mode_UARTUI+0x4d0>)
 80022aa:	f006 fd7e 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 80022ae:	4b6b      	ldr	r3, [pc, #428]	; (800245c <All_mode_UARTUI+0x4d4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <All_mode_UARTUI+0x4b0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
					}
					break;
 80022ba:	e172      	b.n	80025a2 <All_mode_UARTUI+0x61a>
				case 7:			//set Goal multiple station
					if (dataFN == 2){
 80022bc:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <All_mode_UARTUI+0x4b0>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d104      	bne.n	80022ce <All_mode_UARTUI+0x346>
						Nstation = DataIn;
 80022c4:	4b5d      	ldr	r3, [pc, #372]	; (800243c <All_mode_UARTUI+0x4b4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b65      	ldr	r3, [pc, #404]	; (8002460 <All_mode_UARTUI+0x4d8>)
 80022cc:	701a      	strb	r2, [r3, #0]
					}
					if (dataFN < Nstation + 3){
 80022ce:	4b64      	ldr	r3, [pc, #400]	; (8002460 <All_mode_UARTUI+0x4d8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	3302      	adds	r3, #2
 80022d4:	4a58      	ldr	r2, [pc, #352]	; (8002438 <All_mode_UARTUI+0x4b0>)
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	4293      	cmp	r3, r2
 80022da:	db16      	blt.n	800230a <All_mode_UARTUI+0x382>
						if (dataFN == countN + 3){
 80022dc:	4b56      	ldr	r3, [pc, #344]	; (8002438 <All_mode_UARTUI+0x4b0>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b60      	ldr	r3, [pc, #384]	; (8002464 <All_mode_UARTUI+0x4dc>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	3303      	adds	r3, #3
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d10e      	bne.n	800230a <All_mode_UARTUI+0x382>
							dataFSum += DataIn;
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <All_mode_UARTUI+0x4b4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <All_mode_UARTUI+0x4e0>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <All_mode_UARTUI+0x4e0>)
 80022fc:	701a      	strb	r2, [r3, #0]
							countN += 1;
 80022fe:	4b59      	ldr	r3, [pc, #356]	; (8002464 <All_mode_UARTUI+0x4dc>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	3301      	adds	r3, #1
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b57      	ldr	r3, [pc, #348]	; (8002464 <All_mode_UARTUI+0x4dc>)
 8002308:	701a      	strb	r2, [r3, #0]
						}
					}
					chksum = DataIn;
 800230a:	4b4c      	ldr	r3, [pc, #304]	; (800243c <All_mode_UARTUI+0x4b4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <All_mode_UARTUI+0x4c0>)
 8002312:	701a      	strb	r2, [r3, #0]
					chksum3 = ~(StartM + Nstation + dataFSum);
 8002314:	4b4d      	ldr	r3, [pc, #308]	; (800244c <All_mode_UARTUI+0x4c4>)
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	4b51      	ldr	r3, [pc, #324]	; (8002460 <All_mode_UARTUI+0x4d8>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4413      	add	r3, r2
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b51      	ldr	r3, [pc, #324]	; (8002468 <All_mode_UARTUI+0x4e0>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	4413      	add	r3, r2
 8002326:	b2db      	uxtb	r3, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <All_mode_UARTUI+0x4e4>)
 800232e:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum3){
 8002330:	4b45      	ldr	r3, [pc, #276]	; (8002448 <All_mode_UARTUI+0x4c0>)
 8002332:	781a      	ldrb	r2, [r3, #0]
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <All_mode_UARTUI+0x4e4>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 8134 	bne.w	80025a6 <All_mode_UARTUI+0x61e>
						//M_state = 7;
						/// Add work here///////////
													///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 800233e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002342:	2202      	movs	r2, #2
 8002344:	4943      	ldr	r1, [pc, #268]	; (8002454 <All_mode_UARTUI+0x4cc>)
 8002346:	4844      	ldr	r0, [pc, #272]	; (8002458 <All_mode_UARTUI+0x4d0>)
 8002348:	f006 fd2f 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 800234c:	4b43      	ldr	r3, [pc, #268]	; (800245c <All_mode_UARTUI+0x4d4>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <All_mode_UARTUI+0x4b0>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
						countN = 0;
 8002358:	4b42      	ldr	r3, [pc, #264]	; (8002464 <All_mode_UARTUI+0x4dc>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800235e:	e122      	b.n	80025a6 <All_mode_UARTUI+0x61e>
				case 8:			// Order Go to that position
					chksum = DataIn;
 8002360:	4b36      	ldr	r3, [pc, #216]	; (800243c <All_mode_UARTUI+0x4b4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b38      	ldr	r3, [pc, #224]	; (8002448 <All_mode_UARTUI+0x4c0>)
 8002368:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <All_mode_UARTUI+0x4c4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	43db      	mvns	r3, r3
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <All_mode_UARTUI+0x4e8>)
 8002374:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8002376:	4b34      	ldr	r3, [pc, #208]	; (8002448 <All_mode_UARTUI+0x4c0>)
 8002378:	781a      	ldrb	r2, [r3, #0]
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <All_mode_UARTUI+0x4e8>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	f040 8113 	bne.w	80025aa <All_mode_UARTUI+0x622>
						//M_state = 8;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002388:	2202      	movs	r2, #2
 800238a:	4932      	ldr	r1, [pc, #200]	; (8002454 <All_mode_UARTUI+0x4cc>)
 800238c:	4832      	ldr	r0, [pc, #200]	; (8002458 <All_mode_UARTUI+0x4d0>)
 800238e:	f006 fd0c 	bl	8008daa <HAL_UART_Transmit>
						//// simulate workload
						HAL_Delay(1000);
 8002392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002396:	f000 fdd5 	bl	8002f44 <HAL_Delay>
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_f, 2 ,1000);//Fn
 800239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239e:	2202      	movs	r2, #2
 80023a0:	4934      	ldr	r1, [pc, #208]	; (8002474 <All_mode_UARTUI+0x4ec>)
 80023a2:	482d      	ldr	r0, [pc, #180]	; (8002458 <All_mode_UARTUI+0x4d0>)
 80023a4:	f006 fd01 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <All_mode_UARTUI+0x4d4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <All_mode_UARTUI+0x4b0>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
					}
					break;
 80023b4:	e0f9      	b.n	80025aa <All_mode_UARTUI+0x622>

				////////////// Frame 2 ////////////////////////////////////////
				case 9:			// Request Current Station
					chksum = DataIn;
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <All_mode_UARTUI+0x4b4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <All_mode_UARTUI+0x4c0>)
 80023be:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <All_mode_UARTUI+0x4c4>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b29      	ldr	r3, [pc, #164]	; (8002470 <All_mode_UARTUI+0x4e8>)
 80023ca:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <All_mode_UARTUI+0x4c0>)
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <All_mode_UARTUI+0x4e8>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 80ea 	bne.w	80025ae <All_mode_UARTUI+0x626>
						//M_state = 9;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80023da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023de:	2202      	movs	r2, #2
 80023e0:	491c      	ldr	r1, [pc, #112]	; (8002454 <All_mode_UARTUI+0x4cc>)
 80023e2:	481d      	ldr	r0, [pc, #116]	; (8002458 <All_mode_UARTUI+0x4d0>)
 80023e4:	f006 fce1 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 80023e8:	4b1c      	ldr	r3, [pc, #112]	; (800245c <All_mode_UARTUI+0x4d4>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <All_mode_UARTUI+0x4b0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
					}
					break;
 80023f4:	e0db      	b.n	80025ae <All_mode_UARTUI+0x626>
				case 10:	// Request angular position
					chksum = DataIn;
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <All_mode_UARTUI+0x4b4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <All_mode_UARTUI+0x4c0>)
 80023fe:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <All_mode_UARTUI+0x4c4>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	43db      	mvns	r3, r3
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <All_mode_UARTUI+0x4e8>)
 800240a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <All_mode_UARTUI+0x4c0>)
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <All_mode_UARTUI+0x4e8>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	f040 80cc 	bne.w	80025b2 <All_mode_UARTUI+0x62a>
						//M_state = 10;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 800241a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241e:	2202      	movs	r2, #2
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <All_mode_UARTUI+0x4cc>)
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <All_mode_UARTUI+0x4d0>)
 8002424:	f006 fcc1 	bl	8008daa <HAL_UART_Transmit>
						/// Add work here///////////
						///////////////////////////

						//uint16_t angu = BinPosXI * 360 / 1024;
						//HAL_UART_Transmit(&huart2, (uint16_t*)angu, 2 ,1000);
						chkM = 0;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <All_mode_UARTUI+0x4d4>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800242e:	4b02      	ldr	r3, [pc, #8]	; (8002438 <All_mode_UARTUI+0x4b0>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002434:	e0bd      	b.n	80025b2 <All_mode_UARTUI+0x62a>
 8002436:	bf00      	nop
 8002438:	200004e4 	.word	0x200004e4
 800243c:	200004dc 	.word	0x200004dc
 8002440:	200004e6 	.word	0x200004e6
 8002444:	200004e7 	.word	0x200004e7
 8002448:	200004e9 	.word	0x200004e9
 800244c:	200004e2 	.word	0x200004e2
 8002450:	200004eb 	.word	0x200004eb
 8002454:	2000000c 	.word	0x2000000c
 8002458:	200002f4 	.word	0x200002f4
 800245c:	200004e1 	.word	0x200004e1
 8002460:	200004e5 	.word	0x200004e5
 8002464:	200004ed 	.word	0x200004ed
 8002468:	200004e8 	.word	0x200004e8
 800246c:	200004ec 	.word	0x200004ec
 8002470:	200004ea 	.word	0x200004ea
 8002474:	20000010 	.word	0x20000010
				case 11:		// Request Max Velo
					chksum = DataIn;
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <All_mode_UARTUI+0x640>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b53      	ldr	r3, [pc, #332]	; (80025cc <All_mode_UARTUI+0x644>)
 8002480:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8002482:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <All_mode_UARTUI+0x648>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	43db      	mvns	r3, r3
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <All_mode_UARTUI+0x64c>)
 800248c:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 800248e:	4b4f      	ldr	r3, [pc, #316]	; (80025cc <All_mode_UARTUI+0x644>)
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <All_mode_UARTUI+0x64c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d10c      	bne.n	80024b4 <All_mode_UARTUI+0x52c>
						//M_state = 11;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 800249a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249e:	2202      	movs	r2, #2
 80024a0:	494d      	ldr	r1, [pc, #308]	; (80025d8 <All_mode_UARTUI+0x650>)
 80024a2:	484e      	ldr	r0, [pc, #312]	; (80025dc <All_mode_UARTUI+0x654>)
 80024a4:	f006 fc81 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 80024a8:	4b4d      	ldr	r3, [pc, #308]	; (80025e0 <All_mode_UARTUI+0x658>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <All_mode_UARTUI+0x65c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
					}
				case 12:	// Enable end effector
					chksum = DataIn;
 80024b4:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <All_mode_UARTUI+0x640>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <All_mode_UARTUI+0x644>)
 80024bc:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80024be:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <All_mode_UARTUI+0x648>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <All_mode_UARTUI+0x64c>)
 80024c8:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <All_mode_UARTUI+0x644>)
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <All_mode_UARTUI+0x64c>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d16f      	bne.n	80025b6 <All_mode_UARTUI+0x62e>
						//M_state = 12;
						flag_efftActi = 1;
 80024d6:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <All_mode_UARTUI+0x660>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]

						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80024dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e0:	2202      	movs	r2, #2
 80024e2:	493d      	ldr	r1, [pc, #244]	; (80025d8 <All_mode_UARTUI+0x650>)
 80024e4:	483d      	ldr	r0, [pc, #244]	; (80025dc <All_mode_UARTUI+0x654>)
 80024e6:	f006 fc60 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <All_mode_UARTUI+0x658>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80024f0:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <All_mode_UARTUI+0x65c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80024f6:	e05e      	b.n	80025b6 <All_mode_UARTUI+0x62e>

				case 13:	// Disable end effector
					chksum = DataIn;
 80024f8:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <All_mode_UARTUI+0x640>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <All_mode_UARTUI+0x644>)
 8002500:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8002502:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <All_mode_UARTUI+0x648>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	43db      	mvns	r3, r3
 8002508:	b2da      	uxtb	r2, r3
 800250a:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <All_mode_UARTUI+0x64c>)
 800250c:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 800250e:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <All_mode_UARTUI+0x644>)
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <All_mode_UARTUI+0x64c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d14f      	bne.n	80025ba <All_mode_UARTUI+0x632>
						//M_state = 13;

						trig_efftRead = 0;
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <All_mode_UARTUI+0x664>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
						flag_efftRead = 0;
 8002520:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <All_mode_UARTUI+0x668>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	2202      	movs	r2, #2
 800252c:	492a      	ldr	r1, [pc, #168]	; (80025d8 <All_mode_UARTUI+0x650>)
 800252e:	482b      	ldr	r0, [pc, #172]	; (80025dc <All_mode_UARTUI+0x654>)
 8002530:	f006 fc3b 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <All_mode_UARTUI+0x658>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <All_mode_UARTUI+0x65c>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002540:	e03b      	b.n	80025ba <All_mode_UARTUI+0x632>

				case 14:	// Set Home
					chksum = DataIn;
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <All_mode_UARTUI+0x640>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b20      	ldr	r3, [pc, #128]	; (80025cc <All_mode_UARTUI+0x644>)
 800254a:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <All_mode_UARTUI+0x648>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	43db      	mvns	r3, r3
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <All_mode_UARTUI+0x64c>)
 8002556:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <All_mode_UARTUI+0x644>)
 800255a:	781a      	ldrb	r2, [r3, #0]
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <All_mode_UARTUI+0x64c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d12c      	bne.n	80025be <All_mode_UARTUI+0x636>
						M_state = 14;
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <All_mode_UARTUI+0x66c>)
 8002566:	220e      	movs	r2, #14
 8002568:	701a      	strb	r2, [r3, #0]
						/// Add work here///////////
						TargetDeg = 0;
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <All_mode_UARTUI+0x670>)
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
						//// PID and MotDrv to 0
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002576:	2202      	movs	r2, #2
 8002578:	4917      	ldr	r1, [pc, #92]	; (80025d8 <All_mode_UARTUI+0x650>)
 800257a:	4818      	ldr	r0, [pc, #96]	; (80025dc <All_mode_UARTUI+0x654>)
 800257c:	f006 fc15 	bl	8008daa <HAL_UART_Transmit>
						chkM = 0;
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <All_mode_UARTUI+0x658>)
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <All_mode_UARTUI+0x65c>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
					}
					break;
 800258c:	e017      	b.n	80025be <All_mode_UARTUI+0x636>
					break;
 800258e:	bf00      	nop
 8002590:	e016      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 8002592:	bf00      	nop
 8002594:	e014      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 8002596:	bf00      	nop
 8002598:	e012      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 800259a:	bf00      	nop
 800259c:	e010      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 800259e:	bf00      	nop
 80025a0:	e00e      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 80025a2:	bf00      	nop
 80025a4:	e00c      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 80025a6:	bf00      	nop
 80025a8:	e00a      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 80025aa:	bf00      	nop
 80025ac:	e008      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 80025ae:	bf00      	nop
 80025b0:	e006      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 80025b2:	bf00      	nop
 80025b4:	e004      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 80025b6:	bf00      	nop
 80025b8:	e002      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 80025ba:	bf00      	nop
 80025bc:	e000      	b.n	80025c0 <All_mode_UARTUI+0x638>
					break;
 80025be:	bf00      	nop
			}
	}

}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200004dc 	.word	0x200004dc
 80025cc:	200004e9 	.word	0x200004e9
 80025d0:	200004e2 	.word	0x200004e2
 80025d4:	200004ea 	.word	0x200004ea
 80025d8:	2000000c 	.word	0x2000000c
 80025dc:	200002f4 	.word	0x200002f4
 80025e0:	200004e1 	.word	0x200004e1
 80025e4:	200004e4 	.word	0x200004e4
 80025e8:	200004a9 	.word	0x200004a9
 80025ec:	200004ab 	.word	0x200004ab
 80025f0:	200004aa 	.word	0x200004aa
 80025f4:	200004e0 	.word	0x200004e0
 80025f8:	20000480 	.word	0x20000480

080025fc <UARTRecieveIT>:

void UARTRecieveIT()
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8002602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002606:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8002608:	2220      	movs	r2, #32
 800260a:	491a      	ldr	r1, [pc, #104]	; (8002674 <UARTRecieveIT+0x78>)
 800260c:	481a      	ldr	r0, [pc, #104]	; (8002678 <UARTRecieveIT+0x7c>)
 800260e:	f006 fc5e 	bl	8008ece <HAL_UART_Receive_IT>
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8002612:	4b19      	ldr	r3, [pc, #100]	; (8002678 <UARTRecieveIT+0x7c>)
 8002614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002616:	461a      	mov	r2, r3
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <UARTRecieveIT+0x7c>)
 800261a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800261c:	b29b      	uxth	r3, r3
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	4a16      	ldr	r2, [pc, #88]	; (800267c <UARTRecieveIT+0x80>)
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	4293      	cmp	r3, r2
 8002626:	d01f      	beq.n	8002668 <UARTRecieveIT+0x6c>
	{
		data=RxDataBuffer[dataPos];
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <UARTRecieveIT+0x80>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a11      	ldr	r2, [pc, #68]	; (8002674 <UARTRecieveIT+0x78>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	80fb      	strh	r3, [r7, #6]
		DataIn = data;
 8002632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <UARTRecieveIT+0x84>)
 8002638:	6013      	str	r3, [r2, #0]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <UARTRecieveIT+0x80>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <UARTRecieveIT+0x7c>)
 8002642:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002644:	fbb3 f1f2 	udiv	r1, r3, r2
 8002648:	fb01 f202 	mul.w	r2, r1, r2
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <UARTRecieveIT+0x80>)
 8002650:	6013      	str	r3, [r2, #0]
		Posdata = dataPos;
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <UARTRecieveIT+0x80>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <UARTRecieveIT+0x88>)
 800265a:	701a      	strb	r2, [r3, #0]
		dataFN += 1;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <UARTRecieveIT+0x8c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	b2da      	uxtb	r2, r3
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <UARTRecieveIT+0x8c>)
 8002666:	701a      	strb	r2, [r3, #0]
	}
	All_mode_UARTUI();
 8002668:	f7ff fc8e 	bl	8001f88 <All_mode_UARTUI>

}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200004b8 	.word	0x200004b8
 8002678:	200002f4 	.word	0x200002f4
 800267c:	200004f0 	.word	0x200004f0
 8002680:	200004dc 	.word	0x200004dc
 8002684:	200004d8 	.word	0x200004d8
 8002688:	200004e4 	.word	0x200004e4

0800268c <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
	//// EMER ////
	if(GPIO_Pin == GPIO_PIN_11){
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800269c:	d10e      	bne.n	80026bc <HAL_GPIO_EXTI_Callback+0x30>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		counter_e++;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_GPIO_EXTI_Callback+0x88>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_GPIO_EXTI_Callback+0x88>)
 80026a8:	701a      	strb	r2, [r3, #0]
		grandState = emer;
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_GPIO_EXTI_Callback+0x8c>)
 80026ac:	2203      	movs	r2, #3
 80026ae:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_GPIO_EXTI_Callback+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 80026b6:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <HAL_GPIO_EXTI_Callback+0x94>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//// Stop ////
	if(GPIO_Pin == GPIO_PIN_10){
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d10c      	bne.n	80026de <HAL_GPIO_EXTI_Callback+0x52>
		PWMOut = 0;
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_GPIO_EXTI_Callback+0x94>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_GPIO_EXTI_Callback+0x90>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <HAL_GPIO_EXTI_Callback+0x8c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_GPIO_EXTI_Callback+0x52>
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_GPIO_EXTI_Callback+0x8c>)
 80026da:	2204      	movs	r2, #4
 80026dc:	701a      	strb	r2, [r3, #0]
		//else{grandState = stop;}

		}
	//// work Blue button////
	if(GPIO_Pin == GPIO_PIN_13){
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e4:	d108      	bne.n	80026f8 <HAL_GPIO_EXTI_Callback+0x6c>
		bluecounter++;
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_GPIO_EXTI_Callback+0x90>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	3301      	adds	r3, #1
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_GPIO_EXTI_Callback+0x90>)
 80026f0:	701a      	strb	r2, [r3, #0]
		flag_efftActi = 1;
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_GPIO_EXTI_Callback+0x98>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
		//trig_efftRead = 1;
	}

	//// setzero ////
		if(GPIO_Pin == GPIO_PIN_2){
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d103      	bne.n	8002706 <HAL_GPIO_EXTI_Callback+0x7a>
			TargetDeg = 0;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
		}
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000348 	.word	0x20000348
 8002718:	20000338 	.word	0x20000338
 800271c:	2000047d 	.word	0x2000047d
 8002720:	20000000 	.word	0x20000000
 8002724:	200004a9 	.word	0x200004a9
 8002728:	20000480 	.word	0x20000480

0800272c <micros>:
///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 800272c:	b4b0      	push	{r4, r5, r7}
 800272e:	af00      	add	r7, sp, #0
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <micros+0x2c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2200      	movs	r2, #0
 8002738:	4618      	mov	r0, r3
 800273a:	4611      	mov	r1, r2
 800273c:	4b07      	ldr	r3, [pc, #28]	; (800275c <micros+0x30>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	1884      	adds	r4, r0, r2
 8002744:	eb41 0503 	adc.w	r5, r1, r3
 8002748:	4622      	mov	r2, r4
 800274a:	462b      	mov	r3, r5
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	bcb0      	pop	{r4, r5, r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000024c 	.word	0x2000024c
 800275c:	20000340 	.word	0x20000340

08002760 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002760:	b4b0      	push	{r4, r5, r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d10a      	bne.n	8002786 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800277a:	1854      	adds	r4, r2, r1
 800277c:	f143 0500 	adc.w	r5, r3, #0
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002782:	e9c3 4500 	strd	r4, r5, [r3]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bcb0      	pop	{r4, r5, r7}
 800278e:	4770      	bx	lr
 8002790:	2000024c 	.word	0x2000024c
 8002794:	20000340 	.word	0x20000340

08002798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800279c:	b672      	cpsid	i
}
 800279e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <Error_Handler+0x8>
	...

080027a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_MspInit+0x4c>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_MspInit+0x4c>)
 80027b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_MspInit+0x4c>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <HAL_MspInit+0x4c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <HAL_MspInit+0x4c>)
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_MspInit+0x4c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027e2:	2007      	movs	r0, #7
 80027e4:	f000 fca2 	bl	800312c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a81      	ldr	r2, [pc, #516]	; (8002a18 <HAL_I2C_MspInit+0x224>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d13d      	bne.n	8002892 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a7f      	ldr	r2, [pc, #508]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
 8002830:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002838:	2312      	movs	r3, #18
 800283a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002844:	2304      	movs	r3, #4
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f107 031c 	add.w	r3, r7, #28
 800284c:	4619      	mov	r1, r3
 800284e:	4874      	ldr	r0, [pc, #464]	; (8002a20 <HAL_I2C_MspInit+0x22c>)
 8002850:	f001 f8be 	bl	80039d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	4a6f      	ldr	r2, [pc, #444]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 800285e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002862:	6413      	str	r3, [r2, #64]	; 0x40
 8002864:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2100      	movs	r1, #0
 8002874:	201f      	movs	r0, #31
 8002876:	f000 fc64 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800287a:	201f      	movs	r0, #31
 800287c:	f000 fc7d 	bl	800317a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2020      	movs	r0, #32
 8002886:	f000 fc5c 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800288a:	2020      	movs	r0, #32
 800288c:	f000 fc75 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002890:	e0bd      	b.n	8002a0e <HAL_I2C_MspInit+0x21a>
  else if(hi2c->Instance==I2C3)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <HAL_I2C_MspInit+0x230>)
 8002898:	4293      	cmp	r3, r2
 800289a:	f040 80b8 	bne.w	8002a0e <HAL_I2C_MspInit+0x21a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a5d      	ldr	r2, [pc, #372]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	4a56      	ldr	r2, [pc, #344]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ca:	4b54      	ldr	r3, [pc, #336]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028dc:	2312      	movs	r3, #18
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028e8:	2304      	movs	r3, #4
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	484d      	ldr	r0, [pc, #308]	; (8002a28 <HAL_I2C_MspInit+0x234>)
 80028f4:	f001 f86c 	bl	80039d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028fe:	2312      	movs	r3, #18
 8002900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800290a:	2304      	movs	r3, #4
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	4619      	mov	r1, r3
 8002914:	4845      	ldr	r0, [pc, #276]	; (8002a2c <HAL_I2C_MspInit+0x238>)
 8002916:	f001 f85b 	bl	80039d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a3e      	ldr	r2, [pc, #248]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 8002924:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <HAL_I2C_MspInit+0x228>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8002936:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 8002938:	4a3e      	ldr	r2, [pc, #248]	; (8002a34 <HAL_I2C_MspInit+0x240>)
 800293a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 800293c:	4b3c      	ldr	r3, [pc, #240]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 800293e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002942:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002950:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 8002952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002956:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 800295a:	2200      	movs	r2, #0
 800295c:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800295e:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800296a:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 800296c:	2200      	movs	r2, #0
 800296e:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 8002972:	2200      	movs	r2, #0
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002976:	482e      	ldr	r0, [pc, #184]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 8002978:	f000 fc1a 	bl	80031b0 <HAL_DMA_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_MspInit+0x192>
      Error_Handler();
 8002982:	f7ff ff09 	bl	8002798 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <HAL_I2C_MspInit+0x23c>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <HAL_I2C_MspInit+0x248>)
 8002996:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 800299a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800299e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029ac:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b2:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b4:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80029d2:	4819      	ldr	r0, [pc, #100]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029d4:	f000 fbec 	bl	80031b0 <HAL_DMA_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_MspInit+0x1ee>
      Error_Handler();
 80029de:	f7ff fedb 	bl	8002798 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
 80029e8:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <HAL_I2C_MspInit+0x244>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	2048      	movs	r0, #72	; 0x48
 80029f4:	f000 fba5 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80029f8:	2048      	movs	r0, #72	; 0x48
 80029fa:	f000 fbbe 	bl	800317a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2100      	movs	r1, #0
 8002a02:	2049      	movs	r0, #73	; 0x49
 8002a04:	f000 fb9d 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8002a08:	2049      	movs	r0, #73	; 0x49
 8002a0a:	f000 fbb6 	bl	800317a <HAL_NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3730      	adds	r7, #48	; 0x30
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40005400 	.word	0x40005400
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020400 	.word	0x40020400
 8002a24:	40005c00 	.word	0x40005c00
 8002a28:	40020800 	.word	0x40020800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	200000fc 	.word	0x200000fc
 8002a34:	40026028 	.word	0x40026028
 8002a38:	2000015c 	.word	0x2000015c
 8002a3c:	40026070 	.word	0x40026070

08002a40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	; 0x30
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d15d      	bne.n	8002b1e <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a46      	ldr	r2, [pc, #280]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a3f      	ldr	r2, [pc, #252]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 8002aae:	f107 031c 	add.w	r3, r7, #28
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4834      	ldr	r0, [pc, #208]	; (8002b88 <HAL_TIM_Base_MspInit+0x148>)
 8002ab6:	f000 ff8b 	bl	80039d0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002abc:	4a34      	ldr	r2, [pc, #208]	; (8002b90 <HAL_TIM_Base_MspInit+0x150>)
 8002abe:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002ac0:	4b32      	ldr	r3, [pc, #200]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002ac2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002ac6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ada:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002ade:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ae2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ae4:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aea:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002b00:	4822      	ldr	r0, [pc, #136]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002b02:	f000 fb55 	bl	80031b0 <HAL_DMA_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8002b0c:	f7ff fe44 	bl	8002798 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_TIM_Base_MspInit+0x14c>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002b1c:	e02e      	b.n	8002b7c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <HAL_TIM_Base_MspInit+0x154>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
}
 8002b44:	e01a      	b.n	8002b7c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM11)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <HAL_TIM_Base_MspInit+0x158>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d115      	bne.n	8002b7c <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_TIM_Base_MspInit+0x144>)
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	201a      	movs	r0, #26
 8002b72:	f000 fae6 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b76:	201a      	movs	r0, #26
 8002b78:	f000 faff 	bl	800317a <HAL_NVIC_EnableIRQ>
}
 8002b7c:	bf00      	nop
 8002b7e:	3730      	adds	r7, #48	; 0x30
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	20000294 	.word	0x20000294
 8002b90:	40026088 	.word	0x40026088
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40014800 	.word	0x40014800

08002b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 030c 	add.w	r3, r7, #12
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <HAL_TIM_MspPostInit+0x68>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d11d      	bne.n	8002bfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_TIM_MspPostInit+0x6c>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <HAL_TIM_MspPostInit+0x6c>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_TIM_MspPostInit+0x6c>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8002bda:	2340      	movs	r3, #64	; 0x40
 8002bdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bea:	2302      	movs	r3, #2
 8002bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4805      	ldr	r0, [pc, #20]	; (8002c0c <HAL_TIM_MspPostInit+0x70>)
 8002bf6:	f000 feeb 	bl	80039d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bfa:	bf00      	nop
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40020400 	.word	0x40020400

08002c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_UART_MspInit+0x94>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d133      	bne.n	8002c9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_UART_MspInit+0x98>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	4809      	ldr	r0, [pc, #36]	; (8002cac <HAL_UART_MspInit+0x9c>)
 8002c86:	f000 fea3 	bl	80039d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2026      	movs	r0, #38	; 0x26
 8002c90:	f000 fa57 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c94:	2026      	movs	r0, #38	; 0x26
 8002c96:	f000 fa70 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3728      	adds	r7, #40	; 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020000 	.word	0x40020000

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <MemManage_Handler+0x4>

08002cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <BusFault_Handler+0x4>

08002cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler+0x4>

08002cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f000 f902 	bl	8002f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8002d08:	2004      	movs	r0, #4
 8002d0a:	f001 f831 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <DMA1_Stream1_IRQHandler+0x10>)
 8002d1a:	f000 fbe1 	bl	80034e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200000fc 	.word	0x200000fc

08002d28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <DMA1_Stream4_IRQHandler+0x10>)
 8002d2e:	f000 fbd7 	bl	80034e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000015c 	.word	0x2000015c

08002d3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <DMA1_Stream5_IRQHandler+0x10>)
 8002d42:	f000 fbcd 	bl	80034e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000294 	.word	0x20000294

08002d50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002d56:	f004 ff25 	bl	8007ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000024c 	.word	0x2000024c

08002d64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <I2C1_EV_IRQHandler+0x10>)
 8002d6a:	f001 fe41 	bl	80049f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000054 	.word	0x20000054

08002d78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <I2C1_ER_IRQHandler+0x10>)
 8002d7e:	f001 ffa8 	bl	8004cd2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000054 	.word	0x20000054

08002d8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <USART2_IRQHandler+0x10>)
 8002d92:	f006 f8cd 	bl	8008f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200002f4 	.word	0x200002f4

08002da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8002da4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002da8:	f000 ffe2 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8002dac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002db0:	f000 ffde 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002db4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002db8:	f000 ffda 	bl	8003d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002dc4:	4802      	ldr	r0, [pc, #8]	; (8002dd0 <I2C3_EV_IRQHandler+0x10>)
 8002dc6:	f001 fe13 	bl	80049f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200000a8 	.word	0x200000a8

08002dd4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <I2C3_ER_IRQHandler+0x10>)
 8002dda:	f001 ff7a 	bl	8004cd2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200000a8 	.word	0x200000a8

08002de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <SystemInit+0x20>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <SystemInit+0x20>)
 8002df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e12:	490e      	ldr	r1, [pc, #56]	; (8002e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e14:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e28:	4c0b      	ldr	r4, [pc, #44]	; (8002e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e36:	f7ff ffd7 	bl	8002de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3a:	f006 ffeb 	bl	8009e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e3e:	f7fe f879 	bl	8000f34 <main>
  bx  lr    
 8002e42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e4c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8002e50:	08009eb4 	.word	0x08009eb4
  ldr r2, =_sbss
 8002e54:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002e58:	200004f8 	.word	0x200004f8

08002e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e5c:	e7fe      	b.n	8002e5c <ADC_IRQHandler>
	...

08002e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <HAL_Init+0x40>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <HAL_Init+0x40>)
 8002e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <HAL_Init+0x40>)
 8002e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <HAL_Init+0x40>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e88:	2003      	movs	r0, #3
 8002e8a:	f000 f94f 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f000 f808 	bl	8002ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e94:	f7ff fc86 	bl	80027a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023c00 	.word	0x40023c00

08002ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_InitTick+0x54>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_InitTick+0x58>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f967 	bl	8003196 <HAL_SYSTICK_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00e      	b.n	8002ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b0f      	cmp	r3, #15
 8002ed6:	d80a      	bhi.n	8002eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f000 f92f 	bl	8003142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ee4:	4a06      	ldr	r2, [pc, #24]	; (8002f00 <HAL_InitTick+0x5c>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	2000002c 	.word	0x2000002c
 8002efc:	20000034 	.word	0x20000034
 8002f00:	20000030 	.word	0x20000030

08002f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_IncTick+0x20>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_IncTick+0x24>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_IncTick+0x24>)
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000034 	.word	0x20000034
 8002f28:	200004f4 	.word	0x200004f4

08002f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_GetTick+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	200004f4 	.word	0x200004f4

08002f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff ffee 	bl	8002f2c <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d005      	beq.n	8002f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_Delay+0x44>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f6a:	bf00      	nop
 8002f6c:	f7ff ffde 	bl	8002f2c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d8f7      	bhi.n	8002f6c <HAL_Delay+0x28>
  {
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000034 	.word	0x20000034

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	; (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff29 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff ff3e 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff8e 	bl	8003080 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5d 	bl	800302c <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff31 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffa2 	bl	80030e8 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff feb6 	bl	8002f2c <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e099      	b.n	8003300 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ec:	e00f      	b.n	800320e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ee:	f7ff fe9d 	bl	8002f2c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d908      	bls.n	800320e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2203      	movs	r2, #3
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e078      	b.n	8003300 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1e8      	bne.n	80031ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	4b38      	ldr	r3, [pc, #224]	; (8003308 <HAL_DMA_Init+0x158>)
 8003228:	4013      	ands	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2b04      	cmp	r3, #4
 8003266:	d107      	bne.n	8003278 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	4313      	orrs	r3, r2
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0307 	bic.w	r3, r3, #7
 800328e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d117      	bne.n	80032d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fb0f 	bl	80038d8 <DMA_CheckFifoParam>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ce:	2301      	movs	r3, #1
 80032d0:	e016      	b.n	8003300 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fac6 	bl	800386c <DMA_CalcBaseAndBitshift>
 80032e0:	4603      	mov	r3, r0
 80032e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	223f      	movs	r2, #63	; 0x3f
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	f010803f 	.word	0xf010803f

0800330c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_DMA_Start_IT+0x26>
 800332e:	2302      	movs	r3, #2
 8003330:	e040      	b.n	80033b4 <HAL_DMA_Start_IT+0xa8>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d12f      	bne.n	80033a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fa58 	bl	8003810 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	223f      	movs	r2, #63	; 0x3f
 8003366:	409a      	lsls	r2, r3
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0216 	orr.w	r2, r2, #22
 800337a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0208 	orr.w	r2, r2, #8
 8003392:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e005      	b.n	80033b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033ae:	2302      	movs	r3, #2
 80033b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ca:	f7ff fdaf 	bl	8002f2c <HAL_GetTick>
 80033ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e052      	b.n	8003494 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0216 	bic.w	r2, r2, #22
 80033fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <HAL_DMA_Abort+0x62>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0208 	bic.w	r2, r2, #8
 800342c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343e:	e013      	b.n	8003468 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003440:	f7ff fd74 	bl	8002f2c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b05      	cmp	r3, #5
 800344c:	d90c      	bls.n	8003468 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2203      	movs	r2, #3
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e015      	b.n	8003494 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e4      	bne.n	8003440 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	223f      	movs	r2, #63	; 0x3f
 800347c:	409a      	lsls	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d004      	beq.n	80034ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2280      	movs	r2, #128	; 0x80
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e00c      	b.n	80034d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2205      	movs	r2, #5
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034ec:	4b8e      	ldr	r3, [pc, #568]	; (8003728 <HAL_DMA_IRQHandler+0x248>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a8e      	ldr	r2, [pc, #568]	; (800372c <HAL_DMA_IRQHandler+0x24c>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0a9b      	lsrs	r3, r3, #10
 80034f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	2208      	movs	r2, #8
 800350c:	409a      	lsls	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01a      	beq.n	800354c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0204 	bic.w	r2, r2, #4
 8003532:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	2208      	movs	r2, #8
 800353a:	409a      	lsls	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	2201      	movs	r2, #1
 8003552:	409a      	lsls	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d012      	beq.n	8003582 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2201      	movs	r2, #1
 8003570:	409a      	lsls	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f043 0202 	orr.w	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003586:	2204      	movs	r2, #4
 8003588:	409a      	lsls	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	2204      	movs	r2, #4
 80035a6:	409a      	lsls	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f043 0204 	orr.w	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	2210      	movs	r2, #16
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d043      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d03c      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	2210      	movs	r2, #16
 80035dc:	409a      	lsls	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d018      	beq.n	8003622 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d108      	bne.n	8003610 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d024      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e01f      	b.n	8003650 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01b      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
 8003620:	e016      	b.n	8003650 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0208 	bic.w	r2, r2, #8
 800363e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	2220      	movs	r2, #32
 8003656:	409a      	lsls	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 808f 	beq.w	8003780 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8087 	beq.w	8003780 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	2220      	movs	r2, #32
 8003678:	409a      	lsls	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b05      	cmp	r3, #5
 8003688:	d136      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0216 	bic.w	r2, r2, #22
 8003698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_DMA_IRQHandler+0x1da>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	223f      	movs	r2, #63	; 0x3f
 80036d0:	409a      	lsls	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d07e      	beq.n	80037ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
        }
        return;
 80036f6:	e079      	b.n	80037ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	2b00      	cmp	r3, #0
 800371a:	d031      	beq.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
 8003724:	e02c      	b.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
 8003726:	bf00      	nop
 8003728:	2000002c 	.word	0x2000002c
 800372c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
 8003740:	e01e      	b.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0210 	bic.w	r2, r2, #16
 800375e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	2b00      	cmp	r3, #0
 8003786:	d032      	beq.n	80037ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d022      	beq.n	80037da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2205      	movs	r2, #5
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d307      	bcc.n	80037c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f2      	bne.n	80037ac <HAL_DMA_IRQHandler+0x2cc>
 80037c6:	e000      	b.n	80037ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
 80037ea:	e000      	b.n	80037ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80037ec:	bf00      	nop
    }
  }
}
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003802:	b2db      	uxtb	r3, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800382c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d108      	bne.n	8003850 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800384e:	e007      	b.n	8003860 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]
}
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3b10      	subs	r3, #16
 800387c:	4a14      	ldr	r2, [pc, #80]	; (80038d0 <DMA_CalcBaseAndBitshift+0x64>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003886:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d909      	bls.n	80038ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	1d1a      	adds	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	659a      	str	r2, [r3, #88]	; 0x58
 80038ac:	e007      	b.n	80038be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	aaaaaaab 	.word	0xaaaaaaab
 80038d4:	08009e9c 	.word	0x08009e9c

080038d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11f      	bne.n	8003932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d856      	bhi.n	80039a6 <DMA_CheckFifoParam+0xce>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <DMA_CheckFifoParam+0x28>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003911 	.word	0x08003911
 8003904:	08003923 	.word	0x08003923
 8003908:	08003911 	.word	0x08003911
 800390c:	080039a7 	.word	0x080039a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d046      	beq.n	80039aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003920:	e043      	b.n	80039aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800392a:	d140      	bne.n	80039ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003930:	e03d      	b.n	80039ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393a:	d121      	bne.n	8003980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b03      	cmp	r3, #3
 8003940:	d837      	bhi.n	80039b2 <DMA_CheckFifoParam+0xda>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <DMA_CheckFifoParam+0x70>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	08003959 	.word	0x08003959
 800394c:	0800395f 	.word	0x0800395f
 8003950:	08003959 	.word	0x08003959
 8003954:	08003971 	.word	0x08003971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	73fb      	strb	r3, [r7, #15]
      break;
 800395c:	e030      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d025      	beq.n	80039b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800396e:	e022      	b.n	80039b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003978:	d11f      	bne.n	80039ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800397e:	e01c      	b.n	80039ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d903      	bls.n	800398e <DMA_CheckFifoParam+0xb6>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800398c:	e018      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
      break;
 8003992:	e015      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      break;
 80039a4:	e00b      	b.n	80039be <DMA_CheckFifoParam+0xe6>
      break;
 80039a6:	bf00      	nop
 80039a8:	e00a      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039aa:	bf00      	nop
 80039ac:	e008      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ae:	bf00      	nop
 80039b0:	e006      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039b2:	bf00      	nop
 80039b4:	e004      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039b6:	bf00      	nop
 80039b8:	e002      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <DMA_CheckFifoParam+0xe8>
      break;
 80039be:	bf00      	nop
    }
  } 
  
  return status; 
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	e159      	b.n	8003ca0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039ec:	2201      	movs	r2, #1
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	f040 8148 	bne.w	8003c9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d005      	beq.n	8003a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d130      	bne.n	8003a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a58:	2201      	movs	r2, #1
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43db      	mvns	r3, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4013      	ands	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 0201 	and.w	r2, r3, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d017      	beq.n	8003ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d123      	bne.n	8003b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	08da      	lsrs	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3208      	adds	r2, #8
 8003ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	08da      	lsrs	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3208      	adds	r2, #8
 8003b0e:	69b9      	ldr	r1, [r7, #24]
 8003b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	2203      	movs	r2, #3
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0203 	and.w	r2, r3, #3
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80a2 	beq.w	8003c9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b57      	ldr	r3, [pc, #348]	; (8003cb8 <HAL_GPIO_Init+0x2e8>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	4a56      	ldr	r2, [pc, #344]	; (8003cb8 <HAL_GPIO_Init+0x2e8>)
 8003b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b64:	6453      	str	r3, [r2, #68]	; 0x44
 8003b66:	4b54      	ldr	r3, [pc, #336]	; (8003cb8 <HAL_GPIO_Init+0x2e8>)
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b72:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	3302      	adds	r3, #2
 8003b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	220f      	movs	r2, #15
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a49      	ldr	r2, [pc, #292]	; (8003cc0 <HAL_GPIO_Init+0x2f0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d019      	beq.n	8003bd2 <HAL_GPIO_Init+0x202>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a48      	ldr	r2, [pc, #288]	; (8003cc4 <HAL_GPIO_Init+0x2f4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <HAL_GPIO_Init+0x1fe>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a47      	ldr	r2, [pc, #284]	; (8003cc8 <HAL_GPIO_Init+0x2f8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00d      	beq.n	8003bca <HAL_GPIO_Init+0x1fa>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a46      	ldr	r2, [pc, #280]	; (8003ccc <HAL_GPIO_Init+0x2fc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d007      	beq.n	8003bc6 <HAL_GPIO_Init+0x1f6>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a45      	ldr	r2, [pc, #276]	; (8003cd0 <HAL_GPIO_Init+0x300>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <HAL_GPIO_Init+0x1f2>
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	e008      	b.n	8003bd4 <HAL_GPIO_Init+0x204>
 8003bc2:	2307      	movs	r3, #7
 8003bc4:	e006      	b.n	8003bd4 <HAL_GPIO_Init+0x204>
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e004      	b.n	8003bd4 <HAL_GPIO_Init+0x204>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e002      	b.n	8003bd4 <HAL_GPIO_Init+0x204>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_GPIO_Init+0x204>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	f002 0203 	and.w	r2, r2, #3
 8003bda:	0092      	lsls	r2, r2, #2
 8003bdc:	4093      	lsls	r3, r2
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003be4:	4935      	ldr	r1, [pc, #212]	; (8003cbc <HAL_GPIO_Init+0x2ec>)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	089b      	lsrs	r3, r3, #2
 8003bea:	3302      	adds	r3, #2
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf2:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <HAL_GPIO_Init+0x304>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c16:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <HAL_GPIO_Init+0x304>)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c1c:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <HAL_GPIO_Init+0x304>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c40:	4a24      	ldr	r2, [pc, #144]	; (8003cd4 <HAL_GPIO_Init+0x304>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c46:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_GPIO_Init+0x304>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	; (8003cd4 <HAL_GPIO_Init+0x304>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c70:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <HAL_GPIO_Init+0x304>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c94:	4a0f      	ldr	r2, [pc, #60]	; (8003cd4 <HAL_GPIO_Init+0x304>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b0f      	cmp	r3, #15
 8003ca4:	f67f aea2 	bls.w	80039ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40013800 	.word	0x40013800
 8003cc0:	40020000 	.word	0x40020000
 8003cc4:	40020400 	.word	0x40020400
 8003cc8:	40020800 	.word	0x40020800
 8003ccc:	40020c00 	.word	0x40020c00
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40013c00 	.word	0x40013c00

08003cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e001      	b.n	8003cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d24:	e003      	b.n	8003d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	041a      	lsls	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	619a      	str	r2, [r3, #24]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d4c:	887a      	ldrh	r2, [r7, #2]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	041a      	lsls	r2, r3, #16
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43d9      	mvns	r1, r3
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	619a      	str	r2, [r3, #24]
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d006      	beq.n	8003d94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d86:	4a05      	ldr	r2, [pc, #20]	; (8003d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fc7c 	bl	800268c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e12b      	b.n	800400a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe fd14 	bl	80027f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e04:	f003 fa9a 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 8003e08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4a81      	ldr	r2, [pc, #516]	; (8004014 <HAL_I2C_Init+0x274>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d807      	bhi.n	8003e24 <HAL_I2C_Init+0x84>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4a80      	ldr	r2, [pc, #512]	; (8004018 <HAL_I2C_Init+0x278>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bf94      	ite	ls
 8003e1c:	2301      	movls	r3, #1
 8003e1e:	2300      	movhi	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e006      	b.n	8003e32 <HAL_I2C_Init+0x92>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a7d      	ldr	r2, [pc, #500]	; (800401c <HAL_I2C_Init+0x27c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bf94      	ite	ls
 8003e2c:	2301      	movls	r3, #1
 8003e2e:	2300      	movhi	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0e7      	b.n	800400a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a78      	ldr	r2, [pc, #480]	; (8004020 <HAL_I2C_Init+0x280>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	0c9b      	lsrs	r3, r3, #18
 8003e44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a6a      	ldr	r2, [pc, #424]	; (8004014 <HAL_I2C_Init+0x274>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d802      	bhi.n	8003e74 <HAL_I2C_Init+0xd4>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3301      	adds	r3, #1
 8003e72:	e009      	b.n	8003e88 <HAL_I2C_Init+0xe8>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	4a69      	ldr	r2, [pc, #420]	; (8004024 <HAL_I2C_Init+0x284>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	3301      	adds	r3, #1
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	495c      	ldr	r1, [pc, #368]	; (8004014 <HAL_I2C_Init+0x274>)
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	d819      	bhi.n	8003edc <HAL_I2C_Init+0x13c>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e59      	subs	r1, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb6:	1c59      	adds	r1, r3, #1
 8003eb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_I2C_Init+0x138>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	1e59      	subs	r1, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed6:	e051      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	e04f      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d111      	bne.n	8003f08 <HAL_I2C_Init+0x168>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	440b      	add	r3, r1
 8003ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e012      	b.n	8003f2e <HAL_I2C_Init+0x18e>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e58      	subs	r0, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	0099      	lsls	r1, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Init+0x196>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e022      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10e      	bne.n	8003f5c <HAL_I2C_Init+0x1bc>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1e58      	subs	r0, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	440b      	add	r3, r1
 8003f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f5a:	e00f      	b.n	8003f7c <HAL_I2C_Init+0x1dc>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e58      	subs	r0, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	0099      	lsls	r1, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f72:	3301      	adds	r3, #1
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	6809      	ldr	r1, [r1, #0]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003faa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6911      	ldr	r1, [r2, #16]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	4311      	orrs	r1, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	000186a0 	.word	0x000186a0
 8004018:	001e847f 	.word	0x001e847f
 800401c:	003d08ff 	.word	0x003d08ff
 8004020:	431bde83 	.word	0x431bde83
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004042:	f7fe ff73 	bl	8002f2c <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b20      	cmp	r3, #32
 8004052:	f040 80d9 	bne.w	8004208 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2319      	movs	r3, #25
 800405c:	2201      	movs	r2, #1
 800405e:	496d      	ldr	r1, [pc, #436]	; (8004214 <HAL_I2C_Mem_Write+0x1ec>)
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f002 fad1 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
 800406e:	e0cc      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_I2C_Mem_Write+0x56>
 800407a:	2302      	movs	r3, #2
 800407c:	e0c5      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d007      	beq.n	80040a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2221      	movs	r2, #33	; 0x21
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2240      	movs	r2, #64	; 0x40
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a4d      	ldr	r2, [pc, #308]	; (8004218 <HAL_I2C_Mem_Write+0x1f0>)
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e6:	88f8      	ldrh	r0, [r7, #6]
 80040e8:	893a      	ldrh	r2, [r7, #8]
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	4603      	mov	r3, r0
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f002 f860 	bl	80061bc <I2C_RequestMemoryWrite>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d052      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e081      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f002 fb52 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d107      	bne.n	800412e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06b      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d11b      	bne.n	80041a8 <HAL_I2C_Mem_Write+0x180>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1aa      	bne.n	8004106 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f002 fb3e 	bl	8006836 <I2C_WaitOnBTFFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00d      	beq.n	80041dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d107      	bne.n	80041d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e016      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	00100002 	.word	0x00100002
 8004218:	ffff0000 	.word	0xffff0000

0800421c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	461a      	mov	r2, r3
 800422a:	4603      	mov	r3, r0
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	460b      	mov	r3, r1
 8004230:	813b      	strh	r3, [r7, #8]
 8004232:	4613      	mov	r3, r2
 8004234:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004236:	f7fe fe79 	bl	8002f2c <HAL_GetTick>
 800423a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b20      	cmp	r3, #32
 8004246:	f040 8208 	bne.w	800465a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	2319      	movs	r3, #25
 8004250:	2201      	movs	r2, #1
 8004252:	497b      	ldr	r1, [pc, #492]	; (8004440 <HAL_I2C_Mem_Read+0x224>)
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f002 f9d7 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004260:	2302      	movs	r3, #2
 8004262:	e1fb      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_I2C_Mem_Read+0x56>
 800426e:	2302      	movs	r3, #2
 8004270:	e1f4      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b01      	cmp	r3, #1
 8004286:	d007      	beq.n	8004298 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2222      	movs	r2, #34	; 0x22
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2240      	movs	r2, #64	; 0x40
 80042b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a5b      	ldr	r2, [pc, #364]	; (8004444 <HAL_I2C_Mem_Read+0x228>)
 80042d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042da:	88f8      	ldrh	r0, [r7, #6]
 80042dc:	893a      	ldrh	r2, [r7, #8]
 80042de:	8979      	ldrh	r1, [r7, #10]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	4603      	mov	r3, r0
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f001 fffc 	bl	80062e8 <I2C_RequestMemoryRead>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1b0      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d113      	bne.n	800432a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e184      	b.n	8004634 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	2b01      	cmp	r3, #1
 8004330:	d11b      	bne.n	800436a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004340:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e164      	b.n	8004634 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	2b02      	cmp	r3, #2
 8004370:	d11b      	bne.n	80043aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004380:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	e144      	b.n	8004634 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043c0:	e138      	b.n	8004634 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	f200 80f1 	bhi.w	80045ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d123      	bne.n	800441c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f002 fa9f 	bl	800691c <I2C_WaitOnRXNEFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e139      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a
 800441a:	e10b      	b.n	8004634 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	2b02      	cmp	r3, #2
 8004422:	d14e      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442a:	2200      	movs	r2, #0
 800442c:	4906      	ldr	r1, [pc, #24]	; (8004448 <HAL_I2C_Mem_Read+0x22c>)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f002 f8ea 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e10e      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
 800443e:	bf00      	nop
 8004440:	00100002 	.word	0x00100002
 8004444:	ffff0000 	.word	0xffff0000
 8004448:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044c0:	e0b8      	b.n	8004634 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2200      	movs	r2, #0
 80044ca:	4966      	ldr	r1, [pc, #408]	; (8004664 <HAL_I2C_Mem_Read+0x448>)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f002 f89b 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0bf      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	2200      	movs	r2, #0
 8004526:	494f      	ldr	r1, [pc, #316]	; (8004664 <HAL_I2C_Mem_Read+0x448>)
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f002 f86d 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e091      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045ac:	e042      	b.n	8004634 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f002 f9b2 	bl	800691c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e04c      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d118      	bne.n	8004634 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	f47f aec2 	bne.w	80043c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3728      	adds	r7, #40	; 0x28
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	00010004 	.word	0x00010004

08004668 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	607a      	str	r2, [r7, #4]
 8004672:	461a      	mov	r2, r3
 8004674:	460b      	mov	r3, r1
 8004676:	817b      	strh	r3, [r7, #10]
 8004678:	4613      	mov	r3, r2
 800467a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800467c:	2300      	movs	r3, #0
 800467e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8004680:	2300      	movs	r3, #0
 8004682:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	f040 80a6 	bne.w	80047de <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a0:	d005      	beq.n	80046ae <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d002      	beq.n	80046ae <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d130      	bne.n	8004710 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80046ae:	4b4f      	ldr	r3, [pc, #316]	; (80047ec <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	08db      	lsrs	r3, r3, #3
 80046b4:	4a4e      	ldr	r2, [pc, #312]	; (80047f0 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0a1a      	lsrs	r2, r3, #8
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009a      	lsls	r2, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d116      	bne.n	8004702 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e06e      	b.n	80047e0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d0db      	beq.n	80046c8 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800471a:	2302      	movs	r3, #2
 800471c:	e060      	b.n	80047e0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d007      	beq.n	8004744 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2221      	movs	r2, #33	; 0x21
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2210      	movs	r2, #16
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	893a      	ldrh	r2, [r7, #8]
 8004774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004786:	897a      	ldrh	r2, [r7, #10]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b11      	cmp	r3, #17
 8004796:	d10c      	bne.n	80047b2 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800479e:	d003      	beq.n	80047a8 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80047a6:	d101      	bne.n	80047ac <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 80047ac:	2300      	movs	r3, #0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d107      	bne.n	80047c2 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80047d8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	2000002c 	.word	0x2000002c
 80047f0:	14f8b589 	.word	0x14f8b589

080047f4 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	; 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	460b      	mov	r3, r1
 8004802:	817b      	strh	r3, [r7, #10]
 8004804:	4613      	mov	r3, r2
 8004806:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004810:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004814:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b20      	cmp	r3, #32
 8004820:	f040 80da 	bne.w	80049d8 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004832:	d005      	beq.n	8004840 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	2b08      	cmp	r3, #8
 8004838:	d002      	beq.n	8004840 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	2b01      	cmp	r3, #1
 800483e:	d130      	bne.n	80048a2 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004840:	4b69      	ldr	r3, [pc, #420]	; (80049e8 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	08db      	lsrs	r3, r3, #3
 8004846:	4a69      	ldr	r2, [pc, #420]	; (80049ec <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	0a1a      	lsrs	r2, r3, #8
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009a      	lsls	r2, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3b01      	subs	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d116      	bne.n	8004894 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0a2      	b.n	80049da <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d0db      	beq.n	800485a <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e094      	b.n	80049da <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d007      	beq.n	80048d6 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2222      	movs	r2, #34	; 0x22
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2210      	movs	r2, #16
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	893a      	ldrh	r2, [r7, #8]
 8004906:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004918:	897a      	ldrh	r2, [r7, #10]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d126      	bne.n	800497c <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	2b20      	cmp	r3, #32
 8004932:	d002      	beq.n	800493a <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2b10      	cmp	r3, #16
 8004938:	d120      	bne.n	800497c <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b12      	cmp	r3, #18
 800493e:	d114      	bne.n	800496a <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800494e:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800495e:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004966:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004968:	e010      	b.n	800498c <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004978:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800497a:	e007      	b.n	800498c <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800498a:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b12      	cmp	r3, #18
 8004990:	d10c      	bne.n	80049ac <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004998:	d003      	beq.n	80049a2 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80049a0:	d101      	bne.n	80049a6 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ba:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6859      	ldr	r1, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3724      	adds	r7, #36	; 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2000002c 	.word	0x2000002c
 80049ec:	14f8b589 	.word	0x14f8b589

080049f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d003      	beq.n	8004a28 <HAL_I2C_EV_IRQHandler+0x38>
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	f040 80c1 	bne.w	8004baa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10d      	bne.n	8004a5e <HAL_I2C_EV_IRQHandler+0x6e>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a48:	d003      	beq.n	8004a52 <HAL_I2C_EV_IRQHandler+0x62>
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a50:	d101      	bne.n	8004a56 <HAL_I2C_EV_IRQHandler+0x66>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_I2C_EV_IRQHandler+0x68>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f000 8132 	beq.w	8004cc2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x92>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0a5b      	lsrs	r3, r3, #9
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 ffd6 	bl	8006a26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fd83 	bl	8005586 <I2C_Master_SB>
 8004a80:	e092      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	08db      	lsrs	r3, r3, #3
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_I2C_EV_IRQHandler+0xb2>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	0a5b      	lsrs	r3, r3, #9
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fdf9 	bl	8005692 <I2C_Master_ADD10>
 8004aa0:	e082      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_I2C_EV_IRQHandler+0xd2>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	0a5b      	lsrs	r3, r3, #9
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fe13 	bl	80056e6 <I2C_Master_ADDR>
 8004ac0:	e072      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d03b      	beq.n	8004b46 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004adc:	f000 80f3 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	09db      	lsrs	r3, r3, #7
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00f      	beq.n	8004b0c <HAL_I2C_EV_IRQHandler+0x11c>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	0a9b      	lsrs	r3, r3, #10
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_I2C_EV_IRQHandler+0x11c>
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f9f3 	bl	8004ef0 <I2C_MasterTransmit_TXE>
 8004b0a:	e04d      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80d6 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	0a5b      	lsrs	r3, r3, #9
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80cf 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b28:	7bbb      	ldrb	r3, [r7, #14]
 8004b2a:	2b21      	cmp	r3, #33	; 0x21
 8004b2c:	d103      	bne.n	8004b36 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa7a 	bl	8005028 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b34:	e0c7      	b.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	f040 80c4 	bne.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fae8 	bl	8005114 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b44:	e0bf      	b.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b54:	f000 80b7 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00f      	beq.n	8004b84 <HAL_I2C_EV_IRQHandler+0x194>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	0a9b      	lsrs	r3, r3, #10
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <HAL_I2C_EV_IRQHandler+0x194>
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	089b      	lsrs	r3, r3, #2
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb5d 	bl	800523c <I2C_MasterReceive_RXNE>
 8004b82:	e011      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 809a 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	0a5b      	lsrs	r3, r3, #9
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8093 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fc06 	bl	80053b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ba6:	e08e      	b.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ba8:	e08d      	b.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e007      	b.n	8004bcc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	085b      	lsrs	r3, r3, #1
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d012      	beq.n	8004bfe <HAL_I2C_EV_IRQHandler+0x20e>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	0a5b      	lsrs	r3, r3, #9
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00c      	beq.n	8004bfe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 ffc4 	bl	8005b84 <I2C_Slave_ADDR>
 8004bfc:	e066      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0x22e>
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	0a5b      	lsrs	r3, r3, #9
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fffe 	bl	8005c18 <I2C_Slave_STOPF>
 8004c1c:	e056      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c1e:	7bbb      	ldrb	r3, [r7, #14]
 8004c20:	2b21      	cmp	r3, #33	; 0x21
 8004c22:	d002      	beq.n	8004c2a <HAL_I2C_EV_IRQHandler+0x23a>
 8004c24:	7bbb      	ldrb	r3, [r7, #14]
 8004c26:	2b29      	cmp	r3, #41	; 0x29
 8004c28:	d125      	bne.n	8004c76 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	09db      	lsrs	r3, r3, #7
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00f      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x266>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	0a9b      	lsrs	r3, r3, #10
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x266>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 feda 	bl	8005a08 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c54:	e039      	b.n	8004cca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d033      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x2da>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	0a5b      	lsrs	r3, r3, #9
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d02d      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 ff07 	bl	8005a82 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c74:	e029      	b.n	8004cca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	099b      	lsrs	r3, r3, #6
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	0a9b      	lsrs	r3, r3, #10
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 ff12 	bl	8005ac4 <I2C_SlaveReceive_RXNE>
 8004ca0:	e014      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	089b      	lsrs	r3, r3, #2
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	0a5b      	lsrs	r3, r3, #9
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 ff40 	bl	8005b40 <I2C_SlaveReceive_BTF>
 8004cc0:	e004      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004cc2:	bf00      	nop
 8004cc4:	e002      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08a      	sub	sp, #40	; 0x28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	0a1b      	lsrs	r3, r3, #8
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <HAL_I2C_ER_IRQHandler+0x4e>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d1e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	0a5b      	lsrs	r3, r3, #9
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00e      	beq.n	8004d4a <HAL_I2C_ER_IRQHandler+0x78>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	f043 0302 	orr.w	r3, r3, #2
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004d48:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	0a9b      	lsrs	r3, r3, #10
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03f      	beq.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x104>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	0a1b      	lsrs	r3, r3, #8
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d039      	beq.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004d62:	7efb      	ldrb	r3, [r7, #27]
 8004d64:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004d7c:	7ebb      	ldrb	r3, [r7, #26]
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d112      	bne.n	8004da8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10f      	bne.n	8004da8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b21      	cmp	r3, #33	; 0x21
 8004d8c:	d008      	beq.n	8004da0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	2b29      	cmp	r3, #41	; 0x29
 8004d92:	d005      	beq.n	8004da0 <HAL_I2C_ER_IRQHandler+0xce>
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	2b28      	cmp	r3, #40	; 0x28
 8004d98:	d106      	bne.n	8004da8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b21      	cmp	r3, #33	; 0x21
 8004d9e:	d103      	bne.n	8004da8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 f869 	bl	8005e78 <I2C_Slave_AF>
 8004da6:	e016      	b.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004db0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	f043 0304 	orr.w	r3, r3, #4
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004dba:	7efb      	ldrb	r3, [r7, #27]
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d002      	beq.n	8004dc6 <HAL_I2C_ER_IRQHandler+0xf4>
 8004dc0:	7efb      	ldrb	r3, [r7, #27]
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	0adb      	lsrs	r3, r3, #11
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00e      	beq.n	8004e00 <HAL_I2C_ER_IRQHandler+0x12e>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	f043 0308 	orr.w	r3, r3, #8
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004dfe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 f8a0 	bl	8005f58 <I2C_ITError>
  }
}
 8004e18:	bf00      	nop
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d150      	bne.n	8004fb8 <I2C_MasterTransmit_TXE+0xc8>
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b21      	cmp	r3, #33	; 0x21
 8004f1a:	d14d      	bne.n	8004fb8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d01d      	beq.n	8004f5e <I2C_MasterTransmit_TXE+0x6e>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d01a      	beq.n	8004f5e <I2C_MasterTransmit_TXE+0x6e>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f2e:	d016      	beq.n	8004f5e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f3e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2211      	movs	r2, #17
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ff62 	bl	8004e20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f5c:	e060      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f6c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d107      	bne.n	8004fa8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ff7d 	bl	8004ea0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fa6:	e03b      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ff35 	bl	8004e20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fb6:	e033      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b21      	cmp	r3, #33	; 0x21
 8004fbc:	d005      	beq.n	8004fca <I2C_MasterTransmit_TXE+0xda>
 8004fbe:	7bbb      	ldrb	r3, [r7, #14]
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d12d      	bne.n	8005020 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b22      	cmp	r3, #34	; 0x22
 8004fc8:	d12a      	bne.n	8005020 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d108      	bne.n	8004fe6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004fe4:	e01c      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d103      	bne.n	8004ffa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f88e 	bl	8005114 <I2C_MemoryTransmit_TXE_BTF>
}
 8004ff8:	e012      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800501e:	e7ff      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b21      	cmp	r3, #33	; 0x21
 8005040:	d164      	bne.n	800510c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d012      	beq.n	8005072 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	781a      	ldrb	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005070:	e04c      	b.n	800510c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d01d      	beq.n	80050b4 <I2C_MasterTransmit_BTF+0x8c>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b20      	cmp	r3, #32
 800507c:	d01a      	beq.n	80050b4 <I2C_MasterTransmit_BTF+0x8c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005084:	d016      	beq.n	80050b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005094:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2211      	movs	r2, #17
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff feb7 	bl	8004e20 <HAL_I2C_MasterTxCpltCallback>
}
 80050b2:	e02b      	b.n	800510c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d107      	bne.n	80050fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fed2 	bl	8004ea0 <HAL_I2C_MemTxCpltCallback>
}
 80050fc:	e006      	b.n	800510c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fe8a 	bl	8004e20 <HAL_I2C_MasterTxCpltCallback>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005122:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005128:	2b00      	cmp	r3, #0
 800512a:	d11d      	bne.n	8005168 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d10b      	bne.n	800514c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005138:	b2da      	uxtb	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800514a:	e073      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005150:	b29b      	uxth	r3, r3
 8005152:	121b      	asrs	r3, r3, #8
 8005154:	b2da      	uxtb	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005166:	e065      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10b      	bne.n	8005188 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005174:	b2da      	uxtb	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005186:	e055      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	2b02      	cmp	r3, #2
 800518e:	d151      	bne.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b22      	cmp	r3, #34	; 0x22
 8005194:	d10d      	bne.n	80051b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051b0:	e040      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b21      	cmp	r3, #33	; 0x21
 80051c0:	d112      	bne.n	80051e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	781a      	ldrb	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051e6:	e025      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d120      	bne.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	2b21      	cmp	r3, #33	; 0x21
 80051f6:	d11d      	bne.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005206:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005216:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff fe36 	bl	8004ea0 <HAL_I2C_MemTxCpltCallback>
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b22      	cmp	r3, #34	; 0x22
 800524e:	f040 80ac 	bne.w	80053aa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b03      	cmp	r3, #3
 800525e:	d921      	bls.n	80052a4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b03      	cmp	r3, #3
 800528e:	f040 808c 	bne.w	80053aa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80052a2:	e082      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d075      	beq.n	8005398 <I2C_MasterReceive_RXNE+0x15c>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d002      	beq.n	80052b8 <I2C_MasterReceive_RXNE+0x7c>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d16f      	bne.n	8005398 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 fafd 	bl	80068b8 <I2C_WaitOnSTOPRequestThroughIT>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d142      	bne.n	800534a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d10a      	bne.n	8005334 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff fdc1 	bl	8004eb4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005332:	e03a      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2212      	movs	r2, #18
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff fd76 	bl	8004e34 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005348:	e02f      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005358:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fd99 	bl	8004ec8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005396:	e008      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a6:	605a      	str	r2, [r3, #4]
}
 80053a8:	e7ff      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d11b      	bne.n	8005402 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005400:	e0bd      	b.n	800557e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b03      	cmp	r3, #3
 800540a:	d129      	bne.n	8005460 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b04      	cmp	r3, #4
 8005420:	d00a      	beq.n	8005438 <I2C_MasterReceive_BTF+0x86>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d007      	beq.n	8005438 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005436:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800545e:	e08e      	b.n	800557e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d176      	bne.n	8005558 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d002      	beq.n	8005476 <I2C_MasterReceive_BTF+0xc4>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b10      	cmp	r3, #16
 8005474:	d108      	bne.n	8005488 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e019      	b.n	80054bc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b04      	cmp	r3, #4
 800548c:	d002      	beq.n	8005494 <I2C_MasterReceive_BTF+0xe2>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d108      	bne.n	80054a6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e00a      	b.n	80054bc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d007      	beq.n	80054bc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005516:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d10a      	bne.n	8005542 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fcba 	bl	8004eb4 <HAL_I2C_MemRxCpltCallback>
}
 8005540:	e01d      	b.n	800557e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2212      	movs	r2, #18
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fc6f 	bl	8004e34 <HAL_I2C_MasterRxCpltCallback>
}
 8005556:	e012      	b.n	800557e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d117      	bne.n	80055ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80055b4:	e067      	b.n	8005686 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	611a      	str	r2, [r3, #16]
}
 80055c8:	e05d      	b.n	8005686 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d2:	d133      	bne.n	800563c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b21      	cmp	r3, #33	; 0x21
 80055de:	d109      	bne.n	80055f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f0:	611a      	str	r2, [r3, #16]
 80055f2:	e008      	b.n	8005606 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	2b00      	cmp	r3, #0
 800560c:	d004      	beq.n	8005618 <I2C_Master_SB+0x92>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d032      	beq.n	8005686 <I2C_Master_SB+0x100>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d02d      	beq.n	8005686 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005638:	605a      	str	r2, [r3, #4]
}
 800563a:	e024      	b.n	8005686 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10e      	bne.n	8005662 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	b29b      	uxth	r3, r3
 800564a:	11db      	asrs	r3, r3, #7
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0306 	and.w	r3, r3, #6
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f063 030f 	orn	r3, r3, #15
 8005658:	b2da      	uxtb	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	611a      	str	r2, [r3, #16]
}
 8005660:	e011      	b.n	8005686 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005666:	2b01      	cmp	r3, #1
 8005668:	d10d      	bne.n	8005686 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	b29b      	uxth	r3, r3
 8005670:	11db      	asrs	r3, r3, #7
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0306 	and.w	r3, r3, #6
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f063 030e 	orn	r3, r3, #14
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	611a      	str	r2, [r3, #16]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <I2C_Master_ADD10+0x26>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00c      	beq.n	80056da <I2C_Master_ADD10+0x48>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d8:	605a      	str	r2, [r3, #4]
  }
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b091      	sub	sp, #68	; 0x44
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b22      	cmp	r3, #34	; 0x22
 800570e:	f040 8169 	bne.w	80059e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10f      	bne.n	800573a <I2C_Master_ADDR+0x54>
 800571a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d10b      	bne.n	800573a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005722:	2300      	movs	r3, #0
 8005724:	633b      	str	r3, [r7, #48]	; 0x30
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	633b      	str	r3, [r7, #48]	; 0x30
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	e160      	b.n	80059fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11d      	bne.n	800577e <I2C_Master_ADDR+0x98>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800574a:	d118      	bne.n	800577e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574c:	2300      	movs	r3, #0
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005770:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	651a      	str	r2, [r3, #80]	; 0x50
 800577c:	e13e      	b.n	80059fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d113      	bne.n	80057b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005788:	2300      	movs	r3, #0
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e115      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	f040 808a 	bne.w	80058d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057c2:	d137      	bne.n	8005834 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e2:	d113      	bne.n	800580c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f4:	2300      	movs	r3, #0
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	e0e7      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580c:	2300      	movs	r3, #0
 800580e:	623b      	str	r3, [r7, #32]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	623b      	str	r3, [r7, #32]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	623b      	str	r3, [r7, #32]
 8005820:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	e0d3      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	2b08      	cmp	r3, #8
 8005838:	d02e      	beq.n	8005898 <I2C_Master_ADDR+0x1b2>
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	2b20      	cmp	r3, #32
 800583e:	d02b      	beq.n	8005898 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005842:	2b12      	cmp	r3, #18
 8005844:	d102      	bne.n	800584c <I2C_Master_ADDR+0x166>
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2b01      	cmp	r3, #1
 800584a:	d125      	bne.n	8005898 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	2b04      	cmp	r3, #4
 8005850:	d00e      	beq.n	8005870 <I2C_Master_ADDR+0x18a>
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2b02      	cmp	r3, #2
 8005856:	d00b      	beq.n	8005870 <I2C_Master_ADDR+0x18a>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	2b10      	cmp	r3, #16
 800585c:	d008      	beq.n	8005870 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e007      	b.n	8005880 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800587e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	e0a1      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	61bb      	str	r3, [r7, #24]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e085      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d14d      	bne.n	8005976 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d016      	beq.n	800590e <I2C_Master_ADDR+0x228>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d013      	beq.n	800590e <I2C_Master_ADDR+0x228>
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	d010      	beq.n	800590e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e007      	b.n	800591e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800591c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800592c:	d117      	bne.n	800595e <I2C_Master_ADDR+0x278>
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005934:	d00b      	beq.n	800594e <I2C_Master_ADDR+0x268>
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	2b01      	cmp	r3, #1
 800593a:	d008      	beq.n	800594e <I2C_Master_ADDR+0x268>
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	2b08      	cmp	r3, #8
 8005940:	d005      	beq.n	800594e <I2C_Master_ADDR+0x268>
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	2b10      	cmp	r3, #16
 8005946:	d002      	beq.n	800594e <I2C_Master_ADDR+0x268>
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b20      	cmp	r3, #32
 800594c:	d107      	bne.n	800595e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800595c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	e032      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005984:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005994:	d117      	bne.n	80059c6 <I2C_Master_ADDR+0x2e0>
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800599c:	d00b      	beq.n	80059b6 <I2C_Master_ADDR+0x2d0>
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d008      	beq.n	80059b6 <I2C_Master_ADDR+0x2d0>
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d005      	beq.n	80059b6 <I2C_Master_ADDR+0x2d0>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d002      	beq.n	80059b6 <I2C_Master_ADDR+0x2d0>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d107      	bne.n	80059c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059e2:	e00b      	b.n	80059fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
}
 80059fa:	e7ff      	b.n	80059fc <I2C_Master_ADDR+0x316>
 80059fc:	bf00      	nop
 80059fe:	3744      	adds	r7, #68	; 0x44
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d02b      	beq.n	8005a7a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d114      	bne.n	8005a7a <I2C_SlaveTransmit_TXE+0x72>
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b29      	cmp	r3, #41	; 0x29
 8005a54:	d111      	bne.n	8005a7a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2228      	movs	r2, #40	; 0x28
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff f9e7 	bl	8004e48 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d02c      	beq.n	8005b38 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d114      	bne.n	8005b38 <I2C_SlaveReceive_RXNE+0x74>
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b2a      	cmp	r3, #42	; 0x2a
 8005b12:	d111      	bne.n	8005b38 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b22:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2222      	movs	r2, #34	; 0x22
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2228      	movs	r2, #40	; 0x28
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff f992 	bl	8004e5c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d012      	beq.n	8005b78 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b9e:	2b28      	cmp	r3, #40	; 0x28
 8005ba0:	d127      	bne.n	8005bf2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	089b      	lsrs	r3, r3, #2
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	09db      	lsrs	r3, r3, #7
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	81bb      	strh	r3, [r7, #12]
 8005bd4:	e002      	b.n	8005bdc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005be4:	89ba      	ldrh	r2, [r7, #12]
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff f940 	bl	8004e70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bf0:	e00e      	b.n	8005c10 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c26:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c36:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c64:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c74:	d172      	bne.n	8005d5c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b22      	cmp	r3, #34	; 0x22
 8005c7a:	d002      	beq.n	8005c82 <I2C_Slave_STOPF+0x6a>
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c80:	d135      	bne.n	8005cee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f043 0204 	orr.w	r2, r3, #4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fd fd9a 	bl	80037f4 <HAL_DMA_GetState>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d049      	beq.n	8005d5a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	4a69      	ldr	r2, [pc, #420]	; (8005e70 <I2C_Slave_STOPF+0x258>)
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fd fbe2 	bl	800349c <HAL_DMA_Abort_IT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d03d      	beq.n	8005d5a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cec:	e035      	b.n	8005d5a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f043 0204 	orr.w	r2, r3, #4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fd fd64 	bl	80037f4 <HAL_DMA_GetState>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d014      	beq.n	8005d5c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	4a4e      	ldr	r2, [pc, #312]	; (8005e70 <I2C_Slave_STOPF+0x258>)
 8005d38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd fbac 	bl	800349c <HAL_DMA_Abort_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	e000      	b.n	8005d5c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d5a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d03e      	beq.n	8005de4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d112      	bne.n	8005d9a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d112      	bne.n	8005dce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	f043 0204 	orr.w	r2, r3, #4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f8b3 	bl	8005f58 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005df2:	e039      	b.n	8005e68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b2a      	cmp	r3, #42	; 0x2a
 8005df8:	d109      	bne.n	8005e0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2228      	movs	r2, #40	; 0x28
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff f827 	bl	8004e5c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b28      	cmp	r3, #40	; 0x28
 8005e18:	d111      	bne.n	8005e3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <I2C_Slave_STOPF+0x25c>)
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff f828 	bl	8004e8c <HAL_I2C_ListenCpltCallback>
}
 8005e3c:	e014      	b.n	8005e68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	2b22      	cmp	r3, #34	; 0x22
 8005e44:	d002      	beq.n	8005e4c <I2C_Slave_STOPF+0x234>
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b22      	cmp	r3, #34	; 0x22
 8005e4a:	d10d      	bne.n	8005e68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fe fffa 	bl	8004e5c <HAL_I2C_SlaveRxCpltCallback>
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	080064b9 	.word	0x080064b9
 8005e74:	ffff0000 	.word	0xffff0000

08005e78 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e86:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d002      	beq.n	8005e9a <I2C_Slave_AF+0x22>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d129      	bne.n	8005eee <I2C_Slave_AF+0x76>
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b28      	cmp	r3, #40	; 0x28
 8005e9e:	d126      	bne.n	8005eee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a2c      	ldr	r2, [pc, #176]	; (8005f54 <I2C_Slave_AF+0xdc>)
 8005ea4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eb4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ebe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fe ffd0 	bl	8004e8c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005eec:	e02e      	b.n	8005f4c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	2b21      	cmp	r3, #33	; 0x21
 8005ef2:	d126      	bne.n	8005f42 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <I2C_Slave_AF+0xdc>)
 8005ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2221      	movs	r2, #33	; 0x21
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f1e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f28:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f38:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fe ff84 	bl	8004e48 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f40:	e004      	b.n	8005f4c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f4a:	615a      	str	r2, [r3, #20]
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	ffff0000 	.word	0xffff0000

08005f58 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d002      	beq.n	8005f7c <I2C_ITError+0x24>
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	d10a      	bne.n	8005f92 <I2C_ITError+0x3a>
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b22      	cmp	r3, #34	; 0x22
 8005f80:	d107      	bne.n	8005f92 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f90:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f98:	2b28      	cmp	r3, #40	; 0x28
 8005f9a:	d107      	bne.n	8005fac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2228      	movs	r2, #40	; 0x28
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005faa:	e015      	b.n	8005fd8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fba:	d00a      	beq.n	8005fd2 <I2C_ITError+0x7a>
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	2b60      	cmp	r3, #96	; 0x60
 8005fc0:	d007      	beq.n	8005fd2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe6:	d162      	bne.n	80060ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d020      	beq.n	8006048 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600a:	4a6a      	ldr	r2, [pc, #424]	; (80061b4 <I2C_ITError+0x25c>)
 800600c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	4618      	mov	r0, r3
 8006014:	f7fd fa42 	bl	800349c <HAL_DMA_Abort_IT>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8089 	beq.w	8006132 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006042:	4610      	mov	r0, r2
 8006044:	4798      	blx	r3
 8006046:	e074      	b.n	8006132 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	4a59      	ldr	r2, [pc, #356]	; (80061b4 <I2C_ITError+0x25c>)
 800604e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd fa21 	bl	800349c <HAL_DMA_Abort_IT>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d068      	beq.n	8006132 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d10b      	bne.n	8006086 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
 80060ac:	e041      	b.n	8006132 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b60      	cmp	r3, #96	; 0x60
 80060b8:	d125      	bne.n	8006106 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	d10b      	bne.n	80060ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0201 	bic.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fe feec 	bl	8004edc <HAL_I2C_AbortCpltCallback>
 8006104:	e015      	b.n	8006132 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d10b      	bne.n	800612c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fe fecb 	bl	8004ec8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10e      	bne.n	8006160 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800616e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006176:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b04      	cmp	r3, #4
 8006182:	d113      	bne.n	80061ac <I2C_ITError+0x254>
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b28      	cmp	r3, #40	; 0x28
 8006188:	d110      	bne.n	80061ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a0a      	ldr	r2, [pc, #40]	; (80061b8 <I2C_ITError+0x260>)
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fe fe70 	bl	8004e8c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061ac:	bf00      	nop
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	080064b9 	.word	0x080064b9
 80061b8:	ffff0000 	.word	0xffff0000

080061bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	817b      	strh	r3, [r7, #10]
 80061ce:	460b      	mov	r3, r1
 80061d0:	813b      	strh	r3, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fa08 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620c:	d103      	bne.n	8006216 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e05f      	b.n	80062da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800621a:	897b      	ldrh	r3, [r7, #10]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006228:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	492d      	ldr	r1, [pc, #180]	; (80062e4 <I2C_RequestMemoryWrite+0x128>)
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fa40 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e04c      	b.n	80062da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	6a39      	ldr	r1, [r7, #32]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 faaa 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b04      	cmp	r3, #4
 800626c:	d107      	bne.n	800627e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e02b      	b.n	80062da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d105      	bne.n	8006294 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006288:	893b      	ldrh	r3, [r7, #8]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	611a      	str	r2, [r3, #16]
 8006292:	e021      	b.n	80062d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006294:	893b      	ldrh	r3, [r7, #8]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	b29b      	uxth	r3, r3
 800629a:	b2da      	uxtb	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a4:	6a39      	ldr	r1, [r7, #32]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fa84 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d107      	bne.n	80062ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e005      	b.n	80062da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	00010002 	.word	0x00010002

080062e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	4608      	mov	r0, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	817b      	strh	r3, [r7, #10]
 80062fa:	460b      	mov	r3, r1
 80062fc:	813b      	strh	r3, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006310:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006320:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	2200      	movs	r2, #0
 800632a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f96a 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00d      	beq.n	8006356 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006348:	d103      	bne.n	8006352 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e0aa      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006364:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	4952      	ldr	r1, [pc, #328]	; (80064b4 <I2C_RequestMemoryRead+0x1cc>)
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f9a2 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e097      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006394:	6a39      	ldr	r1, [r7, #32]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fa0c 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00d      	beq.n	80063be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d107      	bne.n	80063ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e076      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d105      	bne.n	80063d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063c4:	893b      	ldrh	r3, [r7, #8]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	611a      	str	r2, [r3, #16]
 80063ce:	e021      	b.n	8006414 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063d0:	893b      	ldrh	r3, [r7, #8]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e0:	6a39      	ldr	r1, [r7, #32]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f9e6 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d107      	bne.n	8006406 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e050      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800640a:	893b      	ldrh	r3, [r7, #8]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006416:	6a39      	ldr	r1, [r7, #32]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f9cb 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00d      	beq.n	8006440 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	2b04      	cmp	r3, #4
 800642a:	d107      	bne.n	800643c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e035      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800644e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	2200      	movs	r2, #0
 8006458:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f8d3 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00d      	beq.n	8006484 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d103      	bne.n	8006480 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800647e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e013      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006484:	897b      	ldrh	r3, [r7, #10]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	6a3a      	ldr	r2, [r7, #32]
 8006498:	4906      	ldr	r1, [pc, #24]	; (80064b4 <I2C_RequestMemoryRead+0x1cc>)
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f90b 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	00010002 	.word	0x00010002

080064b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064d2:	4b4b      	ldr	r3, [pc, #300]	; (8006600 <I2C_DMAAbort+0x148>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	08db      	lsrs	r3, r3, #3
 80064d8:	4a4a      	ldr	r2, [pc, #296]	; (8006604 <I2C_DMAAbort+0x14c>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	0a1a      	lsrs	r2, r3, #8
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	00da      	lsls	r2, r3, #3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80064fe:	e00a      	b.n	8006516 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b01      	subs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006514:	d0ea      	beq.n	80064ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	2200      	movs	r2, #0
 8006524:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	2200      	movs	r2, #0
 8006534:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006544:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2200      	movs	r2, #0
 800654a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	2200      	movs	r2, #0
 800655a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	2200      	movs	r2, #0
 800656a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0201 	bic.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b60      	cmp	r3, #96	; 0x60
 8006586:	d10e      	bne.n	80065a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f7fe fc9c 	bl	8004edc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065a4:	e027      	b.n	80065f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065a6:	7cfb      	ldrb	r3, [r7, #19]
 80065a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065ac:	2b28      	cmp	r3, #40	; 0x28
 80065ae:	d117      	bne.n	80065e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2228      	movs	r2, #40	; 0x28
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065de:	e007      	b.n	80065f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80065f0:	6978      	ldr	r0, [r7, #20]
 80065f2:	f7fe fc69 	bl	8004ec8 <HAL_I2C_ErrorCallback>
}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	2000002c 	.word	0x2000002c
 8006604:	14f8b589 	.word	0x14f8b589

08006608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006618:	e025      	b.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d021      	beq.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006622:	f7fc fc83 	bl	8002f2c <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d302      	bcc.n	8006638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d116      	bne.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f043 0220 	orr.w	r2, r3, #32
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e023      	b.n	80066ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d10d      	bne.n	800668c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	43da      	mvns	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	e00c      	b.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	43da      	mvns	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4013      	ands	r3, r2
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	bf0c      	ite	eq
 800669e:	2301      	moveq	r3, #1
 80066a0:	2300      	movne	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d0b6      	beq.n	800661a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066c4:	e051      	b.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d123      	bne.n	800671e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f043 0204 	orr.w	r2, r3, #4
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e046      	b.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d021      	beq.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fc fc01 	bl	8002f2c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d116      	bne.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f043 0220 	orr.w	r2, r3, #32
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e020      	b.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d10c      	bne.n	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	43da      	mvns	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4013      	ands	r3, r2
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	bf14      	ite	ne
 8006786:	2301      	movne	r3, #1
 8006788:	2300      	moveq	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e00b      	b.n	80067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	43da      	mvns	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4013      	ands	r3, r2
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d18d      	bne.n	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c0:	e02d      	b.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f900 	bl	80069c8 <I2C_IsAcknowledgeFailed>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e02d      	b.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d021      	beq.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fc fba7 	bl	8002f2c <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d116      	bne.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f043 0220 	orr.w	r2, r3, #32
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e007      	b.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006828:	2b80      	cmp	r3, #128	; 0x80
 800682a:	d1ca      	bne.n	80067c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006842:	e02d      	b.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f8bf 	bl	80069c8 <I2C_IsAcknowledgeFailed>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e02d      	b.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d021      	beq.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685c:	f7fc fb66 	bl	8002f2c <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	429a      	cmp	r2, r3
 800686a:	d302      	bcc.n	8006872 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d116      	bne.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	f043 0220 	orr.w	r2, r3, #32
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e007      	b.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d1ca      	bne.n	8006844 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80068c4:	4b13      	ldr	r3, [pc, #76]	; (8006914 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	08db      	lsrs	r3, r3, #3
 80068ca:	4a13      	ldr	r2, [pc, #76]	; (8006918 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	0a1a      	lsrs	r2, r3, #8
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b01      	subs	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d107      	bne.n	80068f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e008      	b.n	8006908 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006904:	d0e9      	beq.n	80068da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	2000002c 	.word	0x2000002c
 8006918:	14f8b589 	.word	0x14f8b589

0800691c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006928:	e042      	b.n	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b10      	cmp	r3, #16
 8006936:	d119      	bne.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0210 	mvn.w	r2, #16
 8006940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e029      	b.n	80069c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696c:	f7fc fade 	bl	8002f2c <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d116      	bne.n	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	f043 0220 	orr.w	r2, r3, #32
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e007      	b.n	80069c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d1b5      	bne.n	800692a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069de:	d11b      	bne.n	8006a18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	f043 0204 	orr.w	r2, r3, #4
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a36:	d103      	bne.n	8006a40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a3e:	e007      	b.n	8006a50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a48:	d102      	bne.n	8006a50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e267      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d075      	beq.n	8006b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a7a:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d00c      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a86:	4b85      	ldr	r3, [pc, #532]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d112      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a92:	4b82      	ldr	r3, [pc, #520]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9e:	d10b      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa0:	4b7e      	ldr	r3, [pc, #504]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d05b      	beq.n	8006b64 <HAL_RCC_OscConfig+0x108>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d157      	bne.n	8006b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e242      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac0:	d106      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x74>
 8006ac2:	4b76      	ldr	r3, [pc, #472]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a75      	ldr	r2, [pc, #468]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	e01d      	b.n	8006b0c <HAL_RCC_OscConfig+0xb0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad8:	d10c      	bne.n	8006af4 <HAL_RCC_OscConfig+0x98>
 8006ada:	4b70      	ldr	r3, [pc, #448]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a6f      	ldr	r2, [pc, #444]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	4b6d      	ldr	r3, [pc, #436]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a6c      	ldr	r2, [pc, #432]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e00b      	b.n	8006b0c <HAL_RCC_OscConfig+0xb0>
 8006af4:	4b69      	ldr	r3, [pc, #420]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a68      	ldr	r2, [pc, #416]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	4b66      	ldr	r3, [pc, #408]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a65      	ldr	r2, [pc, #404]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d013      	beq.n	8006b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b14:	f7fc fa0a 	bl	8002f2c <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b1c:	f7fc fa06 	bl	8002f2c <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b64      	cmp	r3, #100	; 0x64
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e207      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b2e:	4b5b      	ldr	r3, [pc, #364]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f0      	beq.n	8006b1c <HAL_RCC_OscConfig+0xc0>
 8006b3a:	e014      	b.n	8006b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3c:	f7fc f9f6 	bl	8002f2c <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b44:	f7fc f9f2 	bl	8002f2c <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b64      	cmp	r3, #100	; 0x64
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e1f3      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b56:	4b51      	ldr	r3, [pc, #324]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0xe8>
 8006b62:	e000      	b.n	8006b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d063      	beq.n	8006c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b72:	4b4a      	ldr	r3, [pc, #296]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7e:	4b47      	ldr	r3, [pc, #284]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d11c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b8a:	4b44      	ldr	r3, [pc, #272]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d116      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_RCC_OscConfig+0x152>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d001      	beq.n	8006bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e1c7      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bae:	4b3b      	ldr	r3, [pc, #236]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4937      	ldr	r1, [pc, #220]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bc2:	e03a      	b.n	8006c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d020      	beq.n	8006c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bcc:	4b34      	ldr	r3, [pc, #208]	; (8006ca0 <HAL_RCC_OscConfig+0x244>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd2:	f7fc f9ab 	bl	8002f2c <HAL_GetTick>
 8006bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd8:	e008      	b.n	8006bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bda:	f7fc f9a7 	bl	8002f2c <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e1a8      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bec:	4b2b      	ldr	r3, [pc, #172]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0f0      	beq.n	8006bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf8:	4b28      	ldr	r3, [pc, #160]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4925      	ldr	r1, [pc, #148]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]
 8006c0c:	e015      	b.n	8006c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <HAL_RCC_OscConfig+0x244>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fc f98a 	bl	8002f2c <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c1c:	f7fc f986 	bl	8002f2c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e187      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c2e:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d036      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d016      	beq.n	8006c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <HAL_RCC_OscConfig+0x248>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c54:	f7fc f96a 	bl	8002f2c <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c5c:	f7fc f966 	bl	8002f2c <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e167      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0f0      	beq.n	8006c5c <HAL_RCC_OscConfig+0x200>
 8006c7a:	e01b      	b.n	8006cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <HAL_RCC_OscConfig+0x248>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c82:	f7fc f953 	bl	8002f2c <HAL_GetTick>
 8006c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c88:	e00e      	b.n	8006ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c8a:	f7fc f94f 	bl	8002f2c <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d907      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e150      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	42470000 	.word	0x42470000
 8006ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca8:	4b88      	ldr	r3, [pc, #544]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1ea      	bne.n	8006c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8097 	beq.w	8006df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cc6:	4b81      	ldr	r3, [pc, #516]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10f      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	4b7d      	ldr	r3, [pc, #500]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	4a7c      	ldr	r2, [pc, #496]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ce2:	4b7a      	ldr	r3, [pc, #488]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cea:	60bb      	str	r3, [r7, #8]
 8006cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf2:	4b77      	ldr	r3, [pc, #476]	; (8006ed0 <HAL_RCC_OscConfig+0x474>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d118      	bne.n	8006d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cfe:	4b74      	ldr	r3, [pc, #464]	; (8006ed0 <HAL_RCC_OscConfig+0x474>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a73      	ldr	r2, [pc, #460]	; (8006ed0 <HAL_RCC_OscConfig+0x474>)
 8006d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d0a:	f7fc f90f 	bl	8002f2c <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d12:	f7fc f90b 	bl	8002f2c <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e10c      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d24:	4b6a      	ldr	r3, [pc, #424]	; (8006ed0 <HAL_RCC_OscConfig+0x474>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d106      	bne.n	8006d46 <HAL_RCC_OscConfig+0x2ea>
 8006d38:	4b64      	ldr	r3, [pc, #400]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	4a63      	ldr	r2, [pc, #396]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	6713      	str	r3, [r2, #112]	; 0x70
 8006d44:	e01c      	b.n	8006d80 <HAL_RCC_OscConfig+0x324>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0x30c>
 8006d4e:	4b5f      	ldr	r3, [pc, #380]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	4a5e      	ldr	r2, [pc, #376]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d54:	f043 0304 	orr.w	r3, r3, #4
 8006d58:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5a:	4b5c      	ldr	r3, [pc, #368]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a5b      	ldr	r2, [pc, #364]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	e00b      	b.n	8006d80 <HAL_RCC_OscConfig+0x324>
 8006d68:	4b58      	ldr	r3, [pc, #352]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	4a57      	ldr	r2, [pc, #348]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	6713      	str	r3, [r2, #112]	; 0x70
 8006d74:	4b55      	ldr	r3, [pc, #340]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a54      	ldr	r2, [pc, #336]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d7a:	f023 0304 	bic.w	r3, r3, #4
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d015      	beq.n	8006db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d88:	f7fc f8d0 	bl	8002f2c <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8e:	e00a      	b.n	8006da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d90:	f7fc f8cc 	bl	8002f2c <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e0cb      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da6:	4b49      	ldr	r3, [pc, #292]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ee      	beq.n	8006d90 <HAL_RCC_OscConfig+0x334>
 8006db2:	e014      	b.n	8006dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db4:	f7fc f8ba 	bl	8002f2c <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dba:	e00a      	b.n	8006dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dbc:	f7fc f8b6 	bl	8002f2c <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e0b5      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dd2:	4b3e      	ldr	r3, [pc, #248]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1ee      	bne.n	8006dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d105      	bne.n	8006df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006de4:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	4a38      	ldr	r2, [pc, #224]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80a1 	beq.w	8006f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dfa:	4b34      	ldr	r3, [pc, #208]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d05c      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d141      	bne.n	8006e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e0e:	4b31      	ldr	r3, [pc, #196]	; (8006ed4 <HAL_RCC_OscConfig+0x478>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7fc f88a 	bl	8002f2c <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e1c:	f7fc f886 	bl	8002f2c <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e087      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2e:	4b27      	ldr	r3, [pc, #156]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69da      	ldr	r2, [r3, #28]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	019b      	lsls	r3, r3, #6
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	3b01      	subs	r3, #1
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	491b      	ldr	r1, [pc, #108]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e64:	4b1b      	ldr	r3, [pc, #108]	; (8006ed4 <HAL_RCC_OscConfig+0x478>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6a:	f7fc f85f 	bl	8002f2c <HAL_GetTick>
 8006e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e72:	f7fc f85b 	bl	8002f2c <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e05c      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e84:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0f0      	beq.n	8006e72 <HAL_RCC_OscConfig+0x416>
 8006e90:	e054      	b.n	8006f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <HAL_RCC_OscConfig+0x478>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e98:	f7fc f848 	bl	8002f2c <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea0:	f7fc f844 	bl	8002f2c <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e045      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eb2:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x444>
 8006ebe:	e03d      	b.n	8006f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e038      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	40007000 	.word	0x40007000
 8006ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <HAL_RCC_OscConfig+0x4ec>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d028      	beq.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d121      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d11a      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f08:	4013      	ands	r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d111      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	085b      	lsrs	r3, r3, #1
 8006f20:	3b01      	subs	r3, #1
 8006f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d107      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d001      	beq.n	8006f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40023800 	.word	0x40023800

08006f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0cc      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f60:	4b68      	ldr	r3, [pc, #416]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d90c      	bls.n	8006f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6e:	4b65      	ldr	r3, [pc, #404]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f76:	4b63      	ldr	r3, [pc, #396]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d001      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0b8      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d020      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fa0:	4b59      	ldr	r3, [pc, #356]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	4a58      	ldr	r2, [pc, #352]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb8:	4b53      	ldr	r3, [pc, #332]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4a52      	ldr	r2, [pc, #328]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc4:	4b50      	ldr	r3, [pc, #320]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	494d      	ldr	r1, [pc, #308]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d044      	beq.n	800706c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d107      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fea:	4b47      	ldr	r3, [pc, #284]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d119      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e07f      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d003      	beq.n	800700a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007006:	2b03      	cmp	r3, #3
 8007008:	d107      	bne.n	800701a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800700a:	4b3f      	ldr	r3, [pc, #252]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e06f      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800701a:	4b3b      	ldr	r3, [pc, #236]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e067      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800702a:	4b37      	ldr	r3, [pc, #220]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f023 0203 	bic.w	r2, r3, #3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4934      	ldr	r1, [pc, #208]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	4313      	orrs	r3, r2
 800703a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800703c:	f7fb ff76 	bl	8002f2c <HAL_GetTick>
 8007040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007042:	e00a      	b.n	800705a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007044:	f7fb ff72 	bl	8002f2c <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e04f      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705a:	4b2b      	ldr	r3, [pc, #172]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 020c 	and.w	r2, r3, #12
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	429a      	cmp	r2, r3
 800706a:	d1eb      	bne.n	8007044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800706c:	4b25      	ldr	r3, [pc, #148]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d20c      	bcs.n	8007094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b22      	ldr	r3, [pc, #136]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007082:	4b20      	ldr	r3, [pc, #128]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d001      	beq.n	8007094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e032      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a0:	4b19      	ldr	r3, [pc, #100]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4916      	ldr	r1, [pc, #88]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070be:	4b12      	ldr	r3, [pc, #72]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	490e      	ldr	r1, [pc, #56]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070d2:	f000 f821 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b0b      	ldr	r3, [pc, #44]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	490a      	ldr	r1, [pc, #40]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 80070e4:	5ccb      	ldrb	r3, [r1, r3]
 80070e6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ea:	4a09      	ldr	r2, [pc, #36]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 80070ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <HAL_RCC_ClockConfig+0x1c8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fb fed6 	bl	8002ea4 <HAL_InitTick>

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	40023c00 	.word	0x40023c00
 8007108:	40023800 	.word	0x40023800
 800710c:	08009e84 	.word	0x08009e84
 8007110:	2000002c 	.word	0x2000002c
 8007114:	20000030 	.word	0x20000030

08007118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800711c:	b094      	sub	sp, #80	; 0x50
 800711e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	647b      	str	r3, [r7, #68]	; 0x44
 8007124:	2300      	movs	r3, #0
 8007126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007128:	2300      	movs	r3, #0
 800712a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007130:	4b79      	ldr	r3, [pc, #484]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 030c 	and.w	r3, r3, #12
 8007138:	2b08      	cmp	r3, #8
 800713a:	d00d      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0x40>
 800713c:	2b08      	cmp	r3, #8
 800713e:	f200 80e1 	bhi.w	8007304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x34>
 8007146:	2b04      	cmp	r3, #4
 8007148:	d003      	beq.n	8007152 <HAL_RCC_GetSysClockFreq+0x3a>
 800714a:	e0db      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800714c:	4b73      	ldr	r3, [pc, #460]	; (800731c <HAL_RCC_GetSysClockFreq+0x204>)
 800714e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007150:	e0db      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007152:	4b73      	ldr	r3, [pc, #460]	; (8007320 <HAL_RCC_GetSysClockFreq+0x208>)
 8007154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007156:	e0d8      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007158:	4b6f      	ldr	r3, [pc, #444]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007160:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007162:	4b6d      	ldr	r3, [pc, #436]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d063      	beq.n	8007236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800716e:	4b6a      	ldr	r3, [pc, #424]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	099b      	lsrs	r3, r3, #6
 8007174:	2200      	movs	r2, #0
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
 8007178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007180:	633b      	str	r3, [r7, #48]	; 0x30
 8007182:	2300      	movs	r3, #0
 8007184:	637b      	str	r3, [r7, #52]	; 0x34
 8007186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800718a:	4622      	mov	r2, r4
 800718c:	462b      	mov	r3, r5
 800718e:	f04f 0000 	mov.w	r0, #0
 8007192:	f04f 0100 	mov.w	r1, #0
 8007196:	0159      	lsls	r1, r3, #5
 8007198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800719c:	0150      	lsls	r0, r2, #5
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4621      	mov	r1, r4
 80071a4:	1a51      	subs	r1, r2, r1
 80071a6:	6139      	str	r1, [r7, #16]
 80071a8:	4629      	mov	r1, r5
 80071aa:	eb63 0301 	sbc.w	r3, r3, r1
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071bc:	4659      	mov	r1, fp
 80071be:	018b      	lsls	r3, r1, #6
 80071c0:	4651      	mov	r1, sl
 80071c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071c6:	4651      	mov	r1, sl
 80071c8:	018a      	lsls	r2, r1, #6
 80071ca:	4651      	mov	r1, sl
 80071cc:	ebb2 0801 	subs.w	r8, r2, r1
 80071d0:	4659      	mov	r1, fp
 80071d2:	eb63 0901 	sbc.w	r9, r3, r1
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071ea:	4690      	mov	r8, r2
 80071ec:	4699      	mov	r9, r3
 80071ee:	4623      	mov	r3, r4
 80071f0:	eb18 0303 	adds.w	r3, r8, r3
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	462b      	mov	r3, r5
 80071f8:	eb49 0303 	adc.w	r3, r9, r3
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800720a:	4629      	mov	r1, r5
 800720c:	024b      	lsls	r3, r1, #9
 800720e:	4621      	mov	r1, r4
 8007210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007214:	4621      	mov	r1, r4
 8007216:	024a      	lsls	r2, r1, #9
 8007218:	4610      	mov	r0, r2
 800721a:	4619      	mov	r1, r3
 800721c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721e:	2200      	movs	r2, #0
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
 8007222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007228:	f7f9 fd02 	bl	8000c30 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4613      	mov	r3, r2
 8007232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007234:	e058      	b.n	80072e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007236:	4b38      	ldr	r3, [pc, #224]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	099b      	lsrs	r3, r3, #6
 800723c:	2200      	movs	r2, #0
 800723e:	4618      	mov	r0, r3
 8007240:	4611      	mov	r1, r2
 8007242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007246:	623b      	str	r3, [r7, #32]
 8007248:	2300      	movs	r3, #0
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
 800724c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	f04f 0000 	mov.w	r0, #0
 8007258:	f04f 0100 	mov.w	r1, #0
 800725c:	0159      	lsls	r1, r3, #5
 800725e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007262:	0150      	lsls	r0, r2, #5
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4641      	mov	r1, r8
 800726a:	ebb2 0a01 	subs.w	sl, r2, r1
 800726e:	4649      	mov	r1, r9
 8007270:	eb63 0b01 	sbc.w	fp, r3, r1
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007288:	ebb2 040a 	subs.w	r4, r2, sl
 800728c:	eb63 050b 	sbc.w	r5, r3, fp
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	00eb      	lsls	r3, r5, #3
 800729a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800729e:	00e2      	lsls	r2, r4, #3
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	4643      	mov	r3, r8
 80072a6:	18e3      	adds	r3, r4, r3
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	464b      	mov	r3, r9
 80072ac:	eb45 0303 	adc.w	r3, r5, r3
 80072b0:	607b      	str	r3, [r7, #4]
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072be:	4629      	mov	r1, r5
 80072c0:	028b      	lsls	r3, r1, #10
 80072c2:	4621      	mov	r1, r4
 80072c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c8:	4621      	mov	r1, r4
 80072ca:	028a      	lsls	r2, r1, #10
 80072cc:	4610      	mov	r0, r2
 80072ce:	4619      	mov	r1, r3
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	2200      	movs	r2, #0
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	61fa      	str	r2, [r7, #28]
 80072d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072dc:	f7f9 fca8 	bl	8000c30 <__aeabi_uldivmod>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4613      	mov	r3, r2
 80072e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	3301      	adds	r3, #1
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80072f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007302:	e002      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <HAL_RCC_GetSysClockFreq+0x204>)
 8007306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800730a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800730c:	4618      	mov	r0, r3
 800730e:	3750      	adds	r7, #80	; 0x50
 8007310:	46bd      	mov	sp, r7
 8007312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	00f42400 	.word	0x00f42400
 8007320:	007a1200 	.word	0x007a1200

08007324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007328:	4b03      	ldr	r3, [pc, #12]	; (8007338 <HAL_RCC_GetHCLKFreq+0x14>)
 800732a:	681b      	ldr	r3, [r3, #0]
}
 800732c:	4618      	mov	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	2000002c 	.word	0x2000002c

0800733c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007340:	f7ff fff0 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 8007344:	4602      	mov	r2, r0
 8007346:	4b05      	ldr	r3, [pc, #20]	; (800735c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	0a9b      	lsrs	r3, r3, #10
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	4903      	ldr	r1, [pc, #12]	; (8007360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007352:	5ccb      	ldrb	r3, [r1, r3]
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40023800 	.word	0x40023800
 8007360:	08009e94 	.word	0x08009e94

08007364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007368:	f7ff ffdc 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	0b5b      	lsrs	r3, r3, #13
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4903      	ldr	r1, [pc, #12]	; (8007388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40023800 	.word	0x40023800
 8007388:	08009e94 	.word	0x08009e94

0800738c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e041      	b.n	8007422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fb fb44 	bl	8002a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f001 f834 	bl	8008438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	d001      	beq.n	8007444 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e03c      	b.n	80074be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1e      	ldr	r2, [pc, #120]	; (80074cc <HAL_TIM_Base_Start+0xa0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d018      	beq.n	8007488 <HAL_TIM_Base_Start+0x5c>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d013      	beq.n	8007488 <HAL_TIM_Base_Start+0x5c>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1a      	ldr	r2, [pc, #104]	; (80074d0 <HAL_TIM_Base_Start+0xa4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d00e      	beq.n	8007488 <HAL_TIM_Base_Start+0x5c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a19      	ldr	r2, [pc, #100]	; (80074d4 <HAL_TIM_Base_Start+0xa8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d009      	beq.n	8007488 <HAL_TIM_Base_Start+0x5c>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <HAL_TIM_Base_Start+0xac>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d004      	beq.n	8007488 <HAL_TIM_Base_Start+0x5c>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a16      	ldr	r2, [pc, #88]	; (80074dc <HAL_TIM_Base_Start+0xb0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d111      	bne.n	80074ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b06      	cmp	r3, #6
 8007498:	d010      	beq.n	80074bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0201 	orr.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074aa:	e007      	b.n	80074bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0201 	orr.w	r2, r2, #1
 80074ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40014000 	.word	0x40014000

080074e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d001      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e044      	b.n	8007582 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <HAL_TIM_Base_Start_IT+0xb0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007522:	d013      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1a      	ldr	r2, [pc, #104]	; (8007594 <HAL_TIM_Base_Start_IT+0xb4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a19      	ldr	r2, [pc, #100]	; (8007598 <HAL_TIM_Base_Start_IT+0xb8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a17      	ldr	r2, [pc, #92]	; (800759c <HAL_TIM_Base_Start_IT+0xbc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIM_Base_Start_IT+0x6c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a16      	ldr	r2, [pc, #88]	; (80075a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d111      	bne.n	8007570 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b06      	cmp	r3, #6
 800755c:	d010      	beq.n	8007580 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756e:	e007      	b.n	8007580 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40010000 	.word	0x40010000
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	40000c00 	.word	0x40000c00
 80075a0:	40014000 	.word	0x40014000

080075a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e041      	b.n	800763a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f839 	bl	8007642 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f000 ff28 	bl	8008438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d109      	bne.n	800767c <HAL_TIM_PWM_Start+0x24>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e022      	b.n	80076c2 <HAL_TIM_PWM_Start+0x6a>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b04      	cmp	r3, #4
 8007680:	d109      	bne.n	8007696 <HAL_TIM_PWM_Start+0x3e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b01      	cmp	r3, #1
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	e015      	b.n	80076c2 <HAL_TIM_PWM_Start+0x6a>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d109      	bne.n	80076b0 <HAL_TIM_PWM_Start+0x58>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	e008      	b.n	80076c2 <HAL_TIM_PWM_Start+0x6a>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	bf14      	ite	ne
 80076bc:	2301      	movne	r3, #1
 80076be:	2300      	moveq	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e068      	b.n	800779c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <HAL_TIM_PWM_Start+0x82>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d8:	e013      	b.n	8007702 <HAL_TIM_PWM_Start+0xaa>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d104      	bne.n	80076ea <HAL_TIM_PWM_Start+0x92>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e8:	e00b      	b.n	8007702 <HAL_TIM_PWM_Start+0xaa>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_PWM_Start+0xa2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f8:	e003      	b.n	8007702 <HAL_TIM_PWM_Start+0xaa>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2202      	movs	r2, #2
 80076fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2201      	movs	r2, #1
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	4618      	mov	r0, r3
 800770c:	f001 fa58 	bl	8008bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a23      	ldr	r2, [pc, #140]	; (80077a4 <HAL_TIM_PWM_Start+0x14c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d107      	bne.n	800772a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <HAL_TIM_PWM_Start+0x14c>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d018      	beq.n	8007766 <HAL_TIM_PWM_Start+0x10e>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773c:	d013      	beq.n	8007766 <HAL_TIM_PWM_Start+0x10e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a19      	ldr	r2, [pc, #100]	; (80077a8 <HAL_TIM_PWM_Start+0x150>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00e      	beq.n	8007766 <HAL_TIM_PWM_Start+0x10e>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a17      	ldr	r2, [pc, #92]	; (80077ac <HAL_TIM_PWM_Start+0x154>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d009      	beq.n	8007766 <HAL_TIM_PWM_Start+0x10e>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a16      	ldr	r2, [pc, #88]	; (80077b0 <HAL_TIM_PWM_Start+0x158>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d004      	beq.n	8007766 <HAL_TIM_PWM_Start+0x10e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a14      	ldr	r2, [pc, #80]	; (80077b4 <HAL_TIM_PWM_Start+0x15c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d111      	bne.n	800778a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b06      	cmp	r3, #6
 8007776:	d010      	beq.n	800779a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007788:	e007      	b.n	800779a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0201 	orr.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40010000 	.word	0x40010000
 80077a8:	40000400 	.word	0x40000400
 80077ac:	40000800 	.word	0x40000800
 80077b0:	40000c00 	.word	0x40000c00
 80077b4:	40014000 	.word	0x40014000

080077b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e041      	b.n	800784e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f839 	bl	8007856 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f000 fe1e 	bl	8008438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
	...

0800786c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <HAL_TIM_IC_Start_DMA+0x22>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800788a:	b2db      	uxtb	r3, r3
 800788c:	e013      	b.n	80078b6 <HAL_TIM_IC_Start_DMA+0x4a>
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b04      	cmp	r3, #4
 8007892:	d104      	bne.n	800789e <HAL_TIM_IC_Start_DMA+0x32>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800789a:	b2db      	uxtb	r3, r3
 800789c:	e00b      	b.n	80078b6 <HAL_TIM_IC_Start_DMA+0x4a>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b08      	cmp	r3, #8
 80078a2:	d104      	bne.n	80078ae <HAL_TIM_IC_Start_DMA+0x42>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	e003      	b.n	80078b6 <HAL_TIM_IC_Start_DMA+0x4a>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d104      	bne.n	80078c8 <HAL_TIM_IC_Start_DMA+0x5c>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	e013      	b.n	80078f0 <HAL_TIM_IC_Start_DMA+0x84>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d104      	bne.n	80078d8 <HAL_TIM_IC_Start_DMA+0x6c>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	e00b      	b.n	80078f0 <HAL_TIM_IC_Start_DMA+0x84>
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d104      	bne.n	80078e8 <HAL_TIM_IC_Start_DMA+0x7c>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	e003      	b.n	80078f0 <HAL_TIM_IC_Start_DMA+0x84>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80078f2:	7dbb      	ldrb	r3, [r7, #22]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d002      	beq.n	80078fe <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80078f8:	7d7b      	ldrb	r3, [r7, #21]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d101      	bne.n	8007902 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80078fe:	2302      	movs	r3, #2
 8007900:	e13c      	b.n	8007b7c <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007902:	7dbb      	ldrb	r3, [r7, #22]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d143      	bne.n	8007990 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007908:	7d7b      	ldrb	r3, [r7, #21]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d140      	bne.n	8007990 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <HAL_TIM_IC_Start_DMA+0xb2>
 8007914:	887b      	ldrh	r3, [r7, #2]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e12e      	b.n	8007b7c <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <HAL_TIM_IC_Start_DMA+0xc2>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800792c:	e013      	b.n	8007956 <HAL_TIM_IC_Start_DMA+0xea>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b04      	cmp	r3, #4
 8007932:	d104      	bne.n	800793e <HAL_TIM_IC_Start_DMA+0xd2>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800793c:	e00b      	b.n	8007956 <HAL_TIM_IC_Start_DMA+0xea>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b08      	cmp	r3, #8
 8007942:	d104      	bne.n	800794e <HAL_TIM_IC_Start_DMA+0xe2>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800794c:	e003      	b.n	8007956 <HAL_TIM_IC_Start_DMA+0xea>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <HAL_TIM_IC_Start_DMA+0xfa>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8007964:	e016      	b.n	8007994 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b04      	cmp	r3, #4
 800796a:	d104      	bne.n	8007976 <HAL_TIM_IC_Start_DMA+0x10a>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2202      	movs	r2, #2
 8007970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8007974:	e00e      	b.n	8007994 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b08      	cmp	r3, #8
 800797a:	d104      	bne.n	8007986 <HAL_TIM_IC_Start_DMA+0x11a>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2202      	movs	r2, #2
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8007984:	e006      	b.n	8007994 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2202      	movs	r2, #2
 800798a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800798e:	e001      	b.n	8007994 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0f3      	b.n	8007b7c <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2201      	movs	r2, #1
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	4618      	mov	r0, r3
 800799e:	f001 f90f 	bl	8008bc0 <TIM_CCxChannelCmd>

  switch (Channel)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b0c      	cmp	r3, #12
 80079a6:	f200 80ad 	bhi.w	8007b04 <HAL_TIM_IC_Start_DMA+0x298>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <HAL_TIM_IC_Start_DMA+0x144>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079e5 	.word	0x080079e5
 80079b4:	08007b05 	.word	0x08007b05
 80079b8:	08007b05 	.word	0x08007b05
 80079bc:	08007b05 	.word	0x08007b05
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007b05 	.word	0x08007b05
 80079c8:	08007b05 	.word	0x08007b05
 80079cc:	08007b05 	.word	0x08007b05
 80079d0:	08007a75 	.word	0x08007a75
 80079d4:	08007b05 	.word	0x08007b05
 80079d8:	08007b05 	.word	0x08007b05
 80079dc:	08007b05 	.word	0x08007b05
 80079e0:	08007abd 	.word	0x08007abd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	4a66      	ldr	r2, [pc, #408]	; (8007b84 <HAL_TIM_IC_Start_DMA+0x318>)
 80079ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	4a65      	ldr	r2, [pc, #404]	; (8007b88 <HAL_TIM_IC_Start_DMA+0x31c>)
 80079f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	4a64      	ldr	r2, [pc, #400]	; (8007b8c <HAL_TIM_IC_Start_DMA+0x320>)
 80079fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3334      	adds	r3, #52	; 0x34
 8007a06:	4619      	mov	r1, r3
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	887b      	ldrh	r3, [r7, #2]
 8007a0c:	f7fb fc7e 	bl	800330c <HAL_DMA_Start_IT>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e0b0      	b.n	8007b7c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a28:	60da      	str	r2, [r3, #12]
      break;
 8007a2a:	e06e      	b.n	8007b0a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	4a54      	ldr	r2, [pc, #336]	; (8007b84 <HAL_TIM_IC_Start_DMA+0x318>)
 8007a32:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	4a53      	ldr	r2, [pc, #332]	; (8007b88 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007a3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	4a52      	ldr	r2, [pc, #328]	; (8007b8c <HAL_TIM_IC_Start_DMA+0x320>)
 8007a42:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3338      	adds	r3, #56	; 0x38
 8007a4e:	4619      	mov	r1, r3
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	887b      	ldrh	r3, [r7, #2]
 8007a54:	f7fb fc5a 	bl	800330c <HAL_DMA_Start_IT>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e08c      	b.n	8007b7c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a70:	60da      	str	r2, [r3, #12]
      break;
 8007a72:	e04a      	b.n	8007b0a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	4a42      	ldr	r2, [pc, #264]	; (8007b84 <HAL_TIM_IC_Start_DMA+0x318>)
 8007a7a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	4a41      	ldr	r2, [pc, #260]	; (8007b88 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	4a40      	ldr	r2, [pc, #256]	; (8007b8c <HAL_TIM_IC_Start_DMA+0x320>)
 8007a8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	333c      	adds	r3, #60	; 0x3c
 8007a96:	4619      	mov	r1, r3
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	887b      	ldrh	r3, [r7, #2]
 8007a9c:	f7fb fc36 	bl	800330c <HAL_DMA_Start_IT>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e068      	b.n	8007b7c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ab8:	60da      	str	r2, [r3, #12]
      break;
 8007aba:	e026      	b.n	8007b0a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac0:	4a30      	ldr	r2, [pc, #192]	; (8007b84 <HAL_TIM_IC_Start_DMA+0x318>)
 8007ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	4a2f      	ldr	r2, [pc, #188]	; (8007b88 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad0:	4a2e      	ldr	r2, [pc, #184]	; (8007b8c <HAL_TIM_IC_Start_DMA+0x320>)
 8007ad2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3340      	adds	r3, #64	; 0x40
 8007ade:	4619      	mov	r1, r3
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	f7fb fc12 	bl	800330c <HAL_DMA_Start_IT>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e044      	b.n	8007b7c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b00:	60da      	str	r2, [r3, #12]
      break;
 8007b02:	e002      	b.n	8007b0a <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	75fb      	strb	r3, [r7, #23]
      break;
 8007b08:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a20      	ldr	r2, [pc, #128]	; (8007b90 <HAL_TIM_IC_Start_DMA+0x324>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d018      	beq.n	8007b46 <HAL_TIM_IC_Start_DMA+0x2da>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1c:	d013      	beq.n	8007b46 <HAL_TIM_IC_Start_DMA+0x2da>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1c      	ldr	r2, [pc, #112]	; (8007b94 <HAL_TIM_IC_Start_DMA+0x328>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIM_IC_Start_DMA+0x2da>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1a      	ldr	r2, [pc, #104]	; (8007b98 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIM_IC_Start_DMA+0x2da>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a19      	ldr	r2, [pc, #100]	; (8007b9c <HAL_TIM_IC_Start_DMA+0x330>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIM_IC_Start_DMA+0x2da>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <HAL_TIM_IC_Start_DMA+0x334>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d111      	bne.n	8007b6a <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b06      	cmp	r3, #6
 8007b56:	d010      	beq.n	8007b7a <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0201 	orr.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b68:	e007      	b.n	8007b7a <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f042 0201 	orr.w	r2, r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	08008309 	.word	0x08008309
 8007b88:	080083d1 	.word	0x080083d1
 8007b8c:	08008277 	.word	0x08008277
 8007b90:	40010000 	.word	0x40010000
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40014000 	.word	0x40014000

08007ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d122      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d11b      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0202 	mvn.w	r2, #2
 8007bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fb13 	bl	8008212 <HAL_TIM_IC_CaptureCallback>
 8007bec:	e005      	b.n	8007bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fb05 	bl	80081fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fb20 	bl	800823a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d122      	bne.n	8007c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d11b      	bne.n	8007c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0204 	mvn.w	r2, #4
 8007c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fae9 	bl	8008212 <HAL_TIM_IC_CaptureCallback>
 8007c40:	e005      	b.n	8007c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fadb 	bl	80081fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 faf6 	bl	800823a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d122      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d11b      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f06f 0208 	mvn.w	r2, #8
 8007c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fabf 	bl	8008212 <HAL_TIM_IC_CaptureCallback>
 8007c94:	e005      	b.n	8007ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fab1 	bl	80081fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 facc 	bl	800823a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d122      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b10      	cmp	r3, #16
 8007cc2:	d11b      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0210 	mvn.w	r2, #16
 8007ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa95 	bl	8008212 <HAL_TIM_IC_CaptureCallback>
 8007ce8:	e005      	b.n	8007cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa87 	bl	80081fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 faa2 	bl	800823a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d10e      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d107      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0201 	mvn.w	r2, #1
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fa fd1c 	bl	8002760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d10e      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b80      	cmp	r3, #128	; 0x80
 8007d42:	d107      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 ffd4 	bl	8008cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d10e      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d107      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa67 	bl	800824e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d10e      	bne.n	8007dac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d107      	bne.n	8007dac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0220 	mvn.w	r2, #32
 8007da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 ff9e 	bl	8008ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e088      	b.n	8007ee4 <HAL_TIM_IC_ConfigChannel+0x130>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d11b      	bne.n	8007e18 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6819      	ldr	r1, [r3, #0]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f000 fd2e 	bl	8008850 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 020c 	bic.w	r2, r2, #12
 8007e02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6999      	ldr	r1, [r3, #24]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	619a      	str	r2, [r3, #24]
 8007e16:	e060      	b.n	8007eda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d11c      	bne.n	8007e58 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6819      	ldr	r1, [r3, #0]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f000 fda6 	bl	800897e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	699a      	ldr	r2, [r3, #24]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6999      	ldr	r1, [r3, #24]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	021a      	lsls	r2, r3, #8
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	619a      	str	r2, [r3, #24]
 8007e56:	e040      	b.n	8007eda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b08      	cmp	r3, #8
 8007e5c:	d11b      	bne.n	8007e96 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6819      	ldr	r1, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f000 fdf3 	bl	8008a58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 020c 	bic.w	r2, r2, #12
 8007e80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69d9      	ldr	r1, [r3, #28]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	61da      	str	r2, [r3, #28]
 8007e94:	e021      	b.n	8007eda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b0c      	cmp	r3, #12
 8007e9a:	d11c      	bne.n	8007ed6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f000 fe10 	bl	8008ad0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	69da      	ldr	r2, [r3, #28]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ebe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69d9      	ldr	r1, [r3, #28]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	021a      	lsls	r2, r3, #8
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	61da      	str	r2, [r3, #28]
 8007ed4:	e001      	b.n	8007eda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e0ae      	b.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b0c      	cmp	r3, #12
 8007f16:	f200 809f 	bhi.w	8008058 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f55 	.word	0x08007f55
 8007f24:	08008059 	.word	0x08008059
 8007f28:	08008059 	.word	0x08008059
 8007f2c:	08008059 	.word	0x08008059
 8007f30:	08007f95 	.word	0x08007f95
 8007f34:	08008059 	.word	0x08008059
 8007f38:	08008059 	.word	0x08008059
 8007f3c:	08008059 	.word	0x08008059
 8007f40:	08007fd7 	.word	0x08007fd7
 8007f44:	08008059 	.word	0x08008059
 8007f48:	08008059 	.word	0x08008059
 8007f4c:	08008059 	.word	0x08008059
 8007f50:	08008017 	.word	0x08008017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 faec 	bl	8008538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0208 	orr.w	r2, r2, #8
 8007f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0204 	bic.w	r2, r2, #4
 8007f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6999      	ldr	r1, [r3, #24]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	619a      	str	r2, [r3, #24]
      break;
 8007f92:	e064      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fb32 	bl	8008604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6999      	ldr	r1, [r3, #24]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	021a      	lsls	r2, r3, #8
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	619a      	str	r2, [r3, #24]
      break;
 8007fd4:	e043      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fb7d 	bl	80086dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0208 	orr.w	r2, r2, #8
 8007ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0204 	bic.w	r2, r2, #4
 8008000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69d9      	ldr	r1, [r3, #28]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	61da      	str	r2, [r3, #28]
      break;
 8008014:	e023      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fbc7 	bl	80087b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69d9      	ldr	r1, [r3, #28]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	021a      	lsls	r2, r3, #8
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	61da      	str	r2, [r3, #28]
      break;
 8008056:	e002      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
      break;
 800805c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008066:	7dfb      	ldrb	r3, [r7, #23]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_TIM_ConfigClockSource+0x1c>
 8008088:	2302      	movs	r3, #2
 800808a:	e0b4      	b.n	80081f6 <HAL_TIM_ConfigClockSource+0x186>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c4:	d03e      	beq.n	8008144 <HAL_TIM_ConfigClockSource+0xd4>
 80080c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ca:	f200 8087 	bhi.w	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d2:	f000 8086 	beq.w	80081e2 <HAL_TIM_ConfigClockSource+0x172>
 80080d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080da:	d87f      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080dc:	2b70      	cmp	r3, #112	; 0x70
 80080de:	d01a      	beq.n	8008116 <HAL_TIM_ConfigClockSource+0xa6>
 80080e0:	2b70      	cmp	r3, #112	; 0x70
 80080e2:	d87b      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080e4:	2b60      	cmp	r3, #96	; 0x60
 80080e6:	d050      	beq.n	800818a <HAL_TIM_ConfigClockSource+0x11a>
 80080e8:	2b60      	cmp	r3, #96	; 0x60
 80080ea:	d877      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080ec:	2b50      	cmp	r3, #80	; 0x50
 80080ee:	d03c      	beq.n	800816a <HAL_TIM_ConfigClockSource+0xfa>
 80080f0:	2b50      	cmp	r3, #80	; 0x50
 80080f2:	d873      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d058      	beq.n	80081aa <HAL_TIM_ConfigClockSource+0x13a>
 80080f8:	2b40      	cmp	r3, #64	; 0x40
 80080fa:	d86f      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	d064      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008100:	2b30      	cmp	r3, #48	; 0x30
 8008102:	d86b      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 8008104:	2b20      	cmp	r3, #32
 8008106:	d060      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008108:	2b20      	cmp	r3, #32
 800810a:	d867      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d05c      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008110:	2b10      	cmp	r3, #16
 8008112:	d05a      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008114:	e062      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6899      	ldr	r1, [r3, #8]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	f000 fd2b 	bl	8008b80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	609a      	str	r2, [r3, #8]
      break;
 8008142:	e04f      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	6899      	ldr	r1, [r3, #8]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f000 fd14 	bl	8008b80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008166:	609a      	str	r2, [r3, #8]
      break;
 8008168:	e03c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6859      	ldr	r1, [r3, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	461a      	mov	r2, r3
 8008178:	f000 fbd2 	bl	8008920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2150      	movs	r1, #80	; 0x50
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fce1 	bl	8008b4a <TIM_ITRx_SetConfig>
      break;
 8008188:	e02c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	6859      	ldr	r1, [r3, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	461a      	mov	r2, r3
 8008198:	f000 fc2e 	bl	80089f8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2160      	movs	r1, #96	; 0x60
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fcd1 	bl	8008b4a <TIM_ITRx_SetConfig>
      break;
 80081a8:	e01c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6859      	ldr	r1, [r3, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f000 fbb2 	bl	8008920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fcc1 	bl	8008b4a <TIM_ITRx_SetConfig>
      break;
 80081c8:	e00c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	4610      	mov	r0, r2
 80081d6:	f000 fcb8 	bl	8008b4a <TIM_ITRx_SetConfig>
      break;
 80081da:	e003      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
      break;
 80081e0:	e000      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008262:	b480      	push	{r7}
 8008264:	b083      	sub	sp, #12
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800826a:	bf00      	nop
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d107      	bne.n	800829e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800829c:	e02a      	b.n	80082f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d107      	bne.n	80082b8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2202      	movs	r2, #2
 80082ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b6:	e01d      	b.n	80082f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d107      	bne.n	80082d2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2204      	movs	r2, #4
 80082c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082d0:	e010      	b.n	80082f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d107      	bne.n	80082ec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2208      	movs	r2, #8
 80082e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082ea:	e003      	b.n	80082f4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f7ff ffb4 	bl	8008262 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	429a      	cmp	r2, r3
 800831e:	d10f      	bne.n	8008340 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d146      	bne.n	80083bc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800833e:	e03d      	b.n	80083bc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d10f      	bne.n	800836a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2202      	movs	r2, #2
 800834e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d131      	bne.n	80083bc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008368:	e028      	b.n	80083bc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d10f      	bne.n	8008394 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2204      	movs	r2, #4
 8008378:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d11c      	bne.n	80083bc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008392:	e013      	b.n	80083bc <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	429a      	cmp	r2, r3
 800839c:	d10e      	bne.n	80083bc <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2208      	movs	r2, #8
 80083a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d107      	bne.n	80083bc <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f7ff ff28 	bl	8008212 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	771a      	strb	r2, [r3, #28]
}
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d103      	bne.n	80083f0 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	771a      	strb	r2, [r3, #28]
 80083ee:	e019      	b.n	8008424 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d103      	bne.n	8008402 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2202      	movs	r2, #2
 80083fe:	771a      	strb	r2, [r3, #28]
 8008400:	e010      	b.n	8008424 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	429a      	cmp	r2, r3
 800840a:	d103      	bne.n	8008414 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2204      	movs	r2, #4
 8008410:	771a      	strb	r2, [r3, #28]
 8008412:	e007      	b.n	8008424 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	429a      	cmp	r2, r3
 800841c:	d102      	bne.n	8008424 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2208      	movs	r2, #8
 8008422:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff fefe 	bl	8008226 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	771a      	strb	r2, [r3, #28]
}
 8008430:	bf00      	nop
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a34      	ldr	r2, [pc, #208]	; (800851c <TIM_Base_SetConfig+0xe4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00f      	beq.n	8008470 <TIM_Base_SetConfig+0x38>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008456:	d00b      	beq.n	8008470 <TIM_Base_SetConfig+0x38>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a31      	ldr	r2, [pc, #196]	; (8008520 <TIM_Base_SetConfig+0xe8>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d007      	beq.n	8008470 <TIM_Base_SetConfig+0x38>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a30      	ldr	r2, [pc, #192]	; (8008524 <TIM_Base_SetConfig+0xec>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d003      	beq.n	8008470 <TIM_Base_SetConfig+0x38>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a2f      	ldr	r2, [pc, #188]	; (8008528 <TIM_Base_SetConfig+0xf0>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d108      	bne.n	8008482 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a25      	ldr	r2, [pc, #148]	; (800851c <TIM_Base_SetConfig+0xe4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d01b      	beq.n	80084c2 <TIM_Base_SetConfig+0x8a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008490:	d017      	beq.n	80084c2 <TIM_Base_SetConfig+0x8a>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a22      	ldr	r2, [pc, #136]	; (8008520 <TIM_Base_SetConfig+0xe8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d013      	beq.n	80084c2 <TIM_Base_SetConfig+0x8a>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a21      	ldr	r2, [pc, #132]	; (8008524 <TIM_Base_SetConfig+0xec>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00f      	beq.n	80084c2 <TIM_Base_SetConfig+0x8a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a20      	ldr	r2, [pc, #128]	; (8008528 <TIM_Base_SetConfig+0xf0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d00b      	beq.n	80084c2 <TIM_Base_SetConfig+0x8a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a1f      	ldr	r2, [pc, #124]	; (800852c <TIM_Base_SetConfig+0xf4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d007      	beq.n	80084c2 <TIM_Base_SetConfig+0x8a>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1e      	ldr	r2, [pc, #120]	; (8008530 <TIM_Base_SetConfig+0xf8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d003      	beq.n	80084c2 <TIM_Base_SetConfig+0x8a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <TIM_Base_SetConfig+0xfc>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d108      	bne.n	80084d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a08      	ldr	r2, [pc, #32]	; (800851c <TIM_Base_SetConfig+0xe4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d103      	bne.n	8008508 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	615a      	str	r2, [r3, #20]
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	40010000 	.word	0x40010000
 8008520:	40000400 	.word	0x40000400
 8008524:	40000800 	.word	0x40000800
 8008528:	40000c00 	.word	0x40000c00
 800852c:	40014000 	.word	0x40014000
 8008530:	40014400 	.word	0x40014400
 8008534:	40014800 	.word	0x40014800

08008538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f023 0201 	bic.w	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f023 0302 	bic.w	r3, r3, #2
 8008580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4313      	orrs	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <TIM_OC1_SetConfig+0xc8>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d10c      	bne.n	80085ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 0308 	bic.w	r3, r3, #8
 800859a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f023 0304 	bic.w	r3, r3, #4
 80085ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a13      	ldr	r2, [pc, #76]	; (8008600 <TIM_OC1_SetConfig+0xc8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d111      	bne.n	80085da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	621a      	str	r2, [r3, #32]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40010000 	.word	0x40010000

08008604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f023 0210 	bic.w	r2, r3, #16
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800863a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f023 0320 	bic.w	r3, r3, #32
 800864e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a1e      	ldr	r2, [pc, #120]	; (80086d8 <TIM_OC2_SetConfig+0xd4>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d10d      	bne.n	8008680 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800866a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800867e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a15      	ldr	r2, [pc, #84]	; (80086d8 <TIM_OC2_SetConfig+0xd4>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d113      	bne.n	80086b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800868e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40010000 	.word	0x40010000

080086dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0303 	bic.w	r3, r3, #3
 8008712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	021b      	lsls	r3, r3, #8
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a1d      	ldr	r2, [pc, #116]	; (80087ac <TIM_OC3_SetConfig+0xd0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d10d      	bne.n	8008756 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	021b      	lsls	r3, r3, #8
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a14      	ldr	r2, [pc, #80]	; (80087ac <TIM_OC3_SetConfig+0xd0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d113      	bne.n	8008786 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800876c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	011b      	lsls	r3, r3, #4
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	693a      	ldr	r2, [r7, #16]
 8008782:	4313      	orrs	r3, r2
 8008784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	621a      	str	r2, [r3, #32]
}
 80087a0:	bf00      	nop
 80087a2:	371c      	adds	r7, #28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	40010000 	.word	0x40010000

080087b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	021b      	lsls	r3, r3, #8
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	031b      	lsls	r3, r3, #12
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	4313      	orrs	r3, r2
 8008806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a10      	ldr	r2, [pc, #64]	; (800884c <TIM_OC4_SetConfig+0x9c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d109      	bne.n	8008824 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	019b      	lsls	r3, r3, #6
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40010000 	.word	0x40010000

08008850 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f023 0201 	bic.w	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4a24      	ldr	r2, [pc, #144]	; (800890c <TIM_TI1_SetConfig+0xbc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d013      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008884:	d00f      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4a21      	ldr	r2, [pc, #132]	; (8008910 <TIM_TI1_SetConfig+0xc0>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00b      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a20      	ldr	r2, [pc, #128]	; (8008914 <TIM_TI1_SetConfig+0xc4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d007      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4a1f      	ldr	r2, [pc, #124]	; (8008918 <TIM_TI1_SetConfig+0xc8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d003      	beq.n	80088a6 <TIM_TI1_SetConfig+0x56>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4a1e      	ldr	r2, [pc, #120]	; (800891c <TIM_TI1_SetConfig+0xcc>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d101      	bne.n	80088aa <TIM_TI1_SetConfig+0x5a>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e000      	b.n	80088ac <TIM_TI1_SetConfig+0x5c>
 80088aa:	2300      	movs	r3, #0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d008      	beq.n	80088c2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f023 0303 	bic.w	r3, r3, #3
 80088b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e003      	b.n	80088ca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f043 0301 	orr.w	r3, r3, #1
 80088c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	011b      	lsls	r3, r3, #4
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f023 030a 	bic.w	r3, r3, #10
 80088e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f003 030a 	and.w	r3, r3, #10
 80088ec:	693a      	ldr	r2, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	621a      	str	r2, [r3, #32]
}
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	40010000 	.word	0x40010000
 8008910:	40000400 	.word	0x40000400
 8008914:	40000800 	.word	0x40000800
 8008918:	40000c00 	.word	0x40000c00
 800891c:	40014000 	.word	0x40014000

08008920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800894a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f023 030a 	bic.w	r3, r3, #10
 800895c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4313      	orrs	r3, r2
 8008964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	621a      	str	r2, [r3, #32]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800897e:	b480      	push	{r7}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	f023 0210 	bic.w	r2, r3, #16
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	031b      	lsls	r3, r3, #12
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4313      	orrs	r3, r2
 80089de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	621a      	str	r2, [r3, #32]
}
 80089ec:	bf00      	nop
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b087      	sub	sp, #28
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	f023 0210 	bic.w	r2, r3, #16
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	031b      	lsls	r3, r3, #12
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	693a      	ldr	r2, [r7, #16]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	621a      	str	r2, [r3, #32]
}
 8008a4c:	bf00      	nop
 8008a4e:	371c      	adds	r7, #28
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	021b      	lsls	r3, r3, #8
 8008aae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	621a      	str	r2, [r3, #32]
}
 8008ac4:	bf00      	nop
 8008ac6:	371c      	adds	r7, #28
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008afc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	031b      	lsls	r3, r3, #12
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008b22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	031b      	lsls	r3, r3, #12
 8008b28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	621a      	str	r2, [r3, #32]
}
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	f043 0307 	orr.w	r3, r3, #7
 8008b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	609a      	str	r2, [r3, #8]
}
 8008b74:	bf00      	nop
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	021a      	lsls	r2, r3, #8
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	609a      	str	r2, [r3, #8]
}
 8008bb4:	bf00      	nop
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a1a      	ldr	r2, [r3, #32]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	43db      	mvns	r3, r3
 8008be2:	401a      	ands	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a1a      	ldr	r2, [r3, #32]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f003 031f 	and.w	r3, r3, #31
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	621a      	str	r2, [r3, #32]
}
 8008bfe:	bf00      	nop
 8008c00:	371c      	adds	r7, #28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
	...

08008c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d101      	bne.n	8008c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c20:	2302      	movs	r3, #2
 8008c22:	e050      	b.n	8008cc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a1c      	ldr	r2, [pc, #112]	; (8008cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d018      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c70:	d013      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a18      	ldr	r2, [pc, #96]	; (8008cd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d00e      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a16      	ldr	r2, [pc, #88]	; (8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d009      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a15      	ldr	r2, [pc, #84]	; (8008ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d004      	beq.n	8008c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a13      	ldr	r2, [pc, #76]	; (8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d10c      	bne.n	8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40010000 	.word	0x40010000
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	40000800 	.word	0x40000800
 8008ce0:	40000c00 	.word	0x40000c00
 8008ce4:	40014000 	.word	0x40014000

08008ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e03f      	b.n	8008da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7f9 ff6a 	bl	8002c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2224      	movs	r2, #36	; 0x24
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fde9 	bl	800992c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	695a      	ldr	r2, [r3, #20]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b08a      	sub	sp, #40	; 0x28
 8008dae:	af02      	add	r7, sp, #8
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	603b      	str	r3, [r7, #0]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d17c      	bne.n	8008ec4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <HAL_UART_Transmit+0x2c>
 8008dd0:	88fb      	ldrh	r3, [r7, #6]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e075      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <HAL_UART_Transmit+0x3e>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e06e      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2221      	movs	r2, #33	; 0x21
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dfe:	f7fa f895 	bl	8002f2c <HAL_GetTick>
 8008e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	88fa      	ldrh	r2, [r7, #6]
 8008e08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	88fa      	ldrh	r2, [r7, #6]
 8008e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e18:	d108      	bne.n	8008e2c <HAL_UART_Transmit+0x82>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d104      	bne.n	8008e2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	e003      	b.n	8008e34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008e3c:	e02a      	b.n	8008e94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2200      	movs	r2, #0
 8008e46:	2180      	movs	r1, #128	; 0x80
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 fb29 	bl	80094a0 <UART_WaitOnFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e036      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10b      	bne.n	8008e76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	3302      	adds	r3, #2
 8008e72:	61bb      	str	r3, [r7, #24]
 8008e74:	e007      	b.n	8008e86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	781a      	ldrb	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3301      	adds	r3, #1
 8008e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1cf      	bne.n	8008e3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2140      	movs	r1, #64	; 0x40
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 faf9 	bl	80094a0 <UART_WaitOnFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e006      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e000      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ec4:	2302      	movs	r3, #2
  }
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d11d      	bne.n	8008f24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <HAL_UART_Receive_IT+0x26>
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e016      	b.n	8008f26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d101      	bne.n	8008f06 <HAL_UART_Receive_IT+0x38>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e00f      	b.n	8008f26 <HAL_UART_Receive_IT+0x58>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f14:	88fb      	ldrh	r3, [r7, #6]
 8008f16:	461a      	mov	r2, r3
 8008f18:	68b9      	ldr	r1, [r7, #8]
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fb2e 	bl	800957c <UART_Start_Receive_IT>
 8008f20:	4603      	mov	r3, r0
 8008f22:	e000      	b.n	8008f26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f24:	2302      	movs	r3, #2
  }
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b0ba      	sub	sp, #232	; 0xe8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10f      	bne.n	8008f96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d009      	beq.n	8008f96 <HAL_UART_IRQHandler+0x66>
 8008f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fc11 	bl	80097b6 <UART_Receive_IT>
      return;
 8008f94:	e256      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80de 	beq.w	800915c <HAL_UART_IRQHandler+0x22c>
 8008fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 80d1 	beq.w	800915c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_UART_IRQHandler+0xae>
 8008fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f043 0201 	orr.w	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00b      	beq.n	8009002 <HAL_UART_IRQHandler+0xd2>
 8008fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	f043 0202 	orr.w	r2, r3, #2
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <HAL_UART_IRQHandler+0xf6>
 800900e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	f043 0204 	orr.w	r2, r3, #4
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800902a:	f003 0308 	and.w	r3, r3, #8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d011      	beq.n	8009056 <HAL_UART_IRQHandler+0x126>
 8009032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d105      	bne.n	800904a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800903e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d005      	beq.n	8009056 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	f043 0208 	orr.w	r2, r3, #8
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 81ed 	beq.w	800943a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d008      	beq.n	800907e <HAL_UART_IRQHandler+0x14e>
 800906c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009070:	f003 0320 	and.w	r3, r3, #32
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fb9c 	bl	80097b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009088:	2b40      	cmp	r3, #64	; 0x40
 800908a:	bf0c      	ite	eq
 800908c:	2301      	moveq	r3, #1
 800908e:	2300      	movne	r3, #0
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	f003 0308 	and.w	r3, r3, #8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d103      	bne.n	80090aa <HAL_UART_IRQHandler+0x17a>
 80090a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d04f      	beq.n	800914a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 faa4 	bl	80095f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	d141      	bne.n	8009142 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3314      	adds	r3, #20
 80090c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3314      	adds	r3, #20
 80090e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1d9      	bne.n	80090be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	2b00      	cmp	r3, #0
 8009110:	d013      	beq.n	800913a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009116:	4a7d      	ldr	r2, [pc, #500]	; (800930c <HAL_UART_IRQHandler+0x3dc>)
 8009118:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	4618      	mov	r0, r3
 8009120:	f7fa f9bc 	bl	800349c <HAL_DMA_Abort_IT>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009138:	e00e      	b.n	8009158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f99a 	bl	8009474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009140:	e00a      	b.n	8009158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f996 	bl	8009474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009148:	e006      	b.n	8009158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f992 	bl	8009474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009156:	e170      	b.n	800943a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009158:	bf00      	nop
    return;
 800915a:	e16e      	b.n	800943a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	2b01      	cmp	r3, #1
 8009162:	f040 814a 	bne.w	80093fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916a:	f003 0310 	and.w	r3, r3, #16
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 8143 	beq.w	80093fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 813c 	beq.w	80093fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60bb      	str	r3, [r7, #8]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	60bb      	str	r3, [r7, #8]
 8009196:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	f040 80b4 	bne.w	8009310 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 8140 	beq.w	800943e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091c6:	429a      	cmp	r2, r3
 80091c8:	f080 8139 	bcs.w	800943e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091de:	f000 8088 	beq.w	80092f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	330c      	adds	r3, #12
 80091e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800920e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800921a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1d9      	bne.n	80091e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3314      	adds	r3, #20
 8009234:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800923e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3314      	adds	r3, #20
 800924e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009252:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009256:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800925a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e1      	bne.n	800922e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3314      	adds	r3, #20
 8009270:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800927a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800927c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3314      	adds	r3, #20
 800928a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800928e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009290:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009294:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800929c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e3      	bne.n	800926a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	330c      	adds	r3, #12
 80092b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c2:	f023 0310 	bic.w	r3, r3, #16
 80092c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80092d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80092d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e3      	bne.n	80092b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fa f865 	bl	80033bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	b29b      	uxth	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8c0 	bl	8009488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009308:	e099      	b.n	800943e <HAL_UART_IRQHandler+0x50e>
 800930a:	bf00      	nop
 800930c:	080096bf 	.word	0x080096bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009318:	b29b      	uxth	r3, r3
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009324:	b29b      	uxth	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 808b 	beq.w	8009442 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800932c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8086 	beq.w	8009442 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800934c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	330c      	adds	r3, #12
 8009356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800935a:	647a      	str	r2, [r7, #68]	; 0x44
 800935c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e3      	bne.n	8009336 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	623b      	str	r3, [r7, #32]
   return(result);
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3314      	adds	r3, #20
 800938e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009392:	633a      	str	r2, [r7, #48]	; 0x30
 8009394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e3      	bne.n	800936e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	330c      	adds	r3, #12
 80093ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0310 	bic.w	r3, r3, #16
 80093ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80093d8:	61fa      	str	r2, [r7, #28]
 80093da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	69b9      	ldr	r1, [r7, #24]
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	617b      	str	r3, [r7, #20]
   return(result);
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e3      	bne.n	80093b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f848 	bl	8009488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093f8:	e023      	b.n	8009442 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <HAL_UART_IRQHandler+0x4ea>
 8009406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800940a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f967 	bl	80096e6 <UART_Transmit_IT>
    return;
 8009418:	e014      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800941a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00e      	beq.n	8009444 <HAL_UART_IRQHandler+0x514>
 8009426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800942a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f9a7 	bl	8009786 <UART_EndTransmit_IT>
    return;
 8009438:	e004      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
    return;
 800943a:	bf00      	nop
 800943c:	e002      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
      return;
 800943e:	bf00      	nop
 8009440:	e000      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
      return;
 8009442:	bf00      	nop
  }
}
 8009444:	37e8      	adds	r7, #232	; 0xe8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop

0800944c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b090      	sub	sp, #64	; 0x40
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b0:	e050      	b.n	8009554 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b8:	d04c      	beq.n	8009554 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d007      	beq.n	80094d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80094c0:	f7f9 fd34 	bl	8002f2c <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d241      	bcs.n	8009554 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	330c      	adds	r3, #12
 80094d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	e853 3f00 	ldrex	r3, [r3]
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094f0:	637a      	str	r2, [r7, #52]	; 0x34
 80094f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e5      	bne.n	80094d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3314      	adds	r3, #20
 800950a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	e853 3f00 	ldrex	r3, [r3]
 8009512:	613b      	str	r3, [r7, #16]
   return(result);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f023 0301 	bic.w	r3, r3, #1
 800951a:	63bb      	str	r3, [r7, #56]	; 0x38
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3314      	adds	r3, #20
 8009522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009524:	623a      	str	r2, [r7, #32]
 8009526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	69f9      	ldr	r1, [r7, #28]
 800952a:	6a3a      	ldr	r2, [r7, #32]
 800952c:	e841 2300 	strex	r3, r2, [r1]
 8009530:	61bb      	str	r3, [r7, #24]
   return(result);
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e5      	bne.n	8009504 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2220      	movs	r2, #32
 8009544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e00f      	b.n	8009574 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	4013      	ands	r3, r2
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	429a      	cmp	r2, r3
 8009562:	bf0c      	ite	eq
 8009564:	2301      	moveq	r3, #1
 8009566:	2300      	movne	r3, #0
 8009568:	b2db      	uxtb	r3, r3
 800956a:	461a      	mov	r2, r3
 800956c:	79fb      	ldrb	r3, [r7, #7]
 800956e:	429a      	cmp	r2, r3
 8009570:	d09f      	beq.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3740      	adds	r7, #64	; 0x40
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	88fa      	ldrh	r2, [r7, #6]
 8009594:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	88fa      	ldrh	r2, [r7, #6]
 800959a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2222      	movs	r2, #34	; 0x22
 80095a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d007      	beq.n	80095ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	695a      	ldr	r2, [r3, #20]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f042 0201 	orr.w	r2, r2, #1
 80095d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68da      	ldr	r2, [r3, #12]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f042 0220 	orr.w	r2, r2, #32
 80095e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b095      	sub	sp, #84	; 0x54
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	330c      	adds	r3, #12
 800961e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009620:	643a      	str	r2, [r7, #64]	; 0x40
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009626:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e5      	bne.n	8009600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3314      	adds	r3, #20
 800963a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	61fb      	str	r3, [r7, #28]
   return(result);
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f023 0301 	bic.w	r3, r3, #1
 800964a:	64bb      	str	r3, [r7, #72]	; 0x48
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3314      	adds	r3, #20
 8009652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800965a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e5      	bne.n	8009634 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	2b01      	cmp	r3, #1
 800966e:	d119      	bne.n	80096a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	e853 3f00 	ldrex	r3, [r3]
 800967e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f023 0310 	bic.w	r3, r3, #16
 8009686:	647b      	str	r3, [r7, #68]	; 0x44
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	330c      	adds	r3, #12
 800968e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009690:	61ba      	str	r2, [r7, #24]
 8009692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	6979      	ldr	r1, [r7, #20]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	613b      	str	r3, [r7, #16]
   return(result);
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e5      	bne.n	8009670 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80096b2:	bf00      	nop
 80096b4:	3754      	adds	r7, #84	; 0x54
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff fecb 	bl	8009474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096de:	bf00      	nop
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b21      	cmp	r3, #33	; 0x21
 80096f8:	d13e      	bne.n	8009778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009702:	d114      	bne.n	800972e <UART_Transmit_IT+0x48>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d110      	bne.n	800972e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	1c9a      	adds	r2, r3, #2
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	621a      	str	r2, [r3, #32]
 800972c:	e008      	b.n	8009740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	1c59      	adds	r1, r3, #1
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	6211      	str	r1, [r2, #32]
 8009738:	781a      	ldrb	r2, [r3, #0]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29b      	uxth	r3, r3
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	4619      	mov	r1, r3
 800974e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10f      	bne.n	8009774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68da      	ldr	r2, [r3, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	e000      	b.n	800977a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009778:	2302      	movs	r3, #2
  }
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68da      	ldr	r2, [r3, #12]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800979c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2220      	movs	r2, #32
 80097a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fe50 	bl	800944c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b08c      	sub	sp, #48	; 0x30
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b22      	cmp	r3, #34	; 0x22
 80097c8:	f040 80ab 	bne.w	8009922 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d4:	d117      	bne.n	8009806 <UART_Receive_IT+0x50>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d113      	bne.n	8009806 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	1c9a      	adds	r2, r3, #2
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	629a      	str	r2, [r3, #40]	; 0x28
 8009804:	e026      	b.n	8009854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800980c:	2300      	movs	r3, #0
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009818:	d007      	beq.n	800982a <UART_Receive_IT+0x74>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10a      	bne.n	8009838 <UART_Receive_IT+0x82>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	b2da      	uxtb	r2, r3
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	e008      	b.n	800984a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009844:	b2da      	uxtb	r2, r3
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009858:	b29b      	uxth	r3, r3
 800985a:	3b01      	subs	r3, #1
 800985c:	b29b      	uxth	r3, r3
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	4619      	mov	r1, r3
 8009862:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009864:	2b00      	cmp	r3, #0
 8009866:	d15a      	bne.n	800991e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 0220 	bic.w	r2, r2, #32
 8009876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	695a      	ldr	r2, [r3, #20]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0201 	bic.w	r2, r2, #1
 8009896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2220      	movs	r2, #32
 800989c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d135      	bne.n	8009914 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	330c      	adds	r3, #12
 80098b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	613b      	str	r3, [r7, #16]
   return(result);
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	f023 0310 	bic.w	r3, r3, #16
 80098c4:	627b      	str	r3, [r7, #36]	; 0x24
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	330c      	adds	r3, #12
 80098cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ce:	623a      	str	r2, [r7, #32]
 80098d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	69f9      	ldr	r1, [r7, #28]
 80098d4:	6a3a      	ldr	r2, [r7, #32]
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	61bb      	str	r3, [r7, #24]
   return(result);
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e5      	bne.n	80098ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0310 	and.w	r3, r3, #16
 80098ec:	2b10      	cmp	r3, #16
 80098ee:	d10a      	bne.n	8009906 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800990a:	4619      	mov	r1, r3
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff fdbb 	bl	8009488 <HAL_UARTEx_RxEventCallback>
 8009912:	e002      	b.n	800991a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff fda3 	bl	8009460 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	e002      	b.n	8009924 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	e000      	b.n	8009924 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009922:	2302      	movs	r3, #2
  }
}
 8009924:	4618      	mov	r0, r3
 8009926:	3730      	adds	r7, #48	; 0x30
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800992c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009930:	b0c0      	sub	sp, #256	; 0x100
 8009932:	af00      	add	r7, sp, #0
 8009934:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009948:	68d9      	ldr	r1, [r3, #12]
 800994a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	ea40 0301 	orr.w	r3, r0, r1
 8009954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800995a:	689a      	ldr	r2, [r3, #8]
 800995c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	431a      	orrs	r2, r3
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	431a      	orrs	r2, r3
 800996c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	4313      	orrs	r3, r2
 8009974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009984:	f021 010c 	bic.w	r1, r1, #12
 8009988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009992:	430b      	orrs	r3, r1
 8009994:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80099a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a6:	6999      	ldr	r1, [r3, #24]
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	ea40 0301 	orr.w	r3, r0, r1
 80099b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	4b8f      	ldr	r3, [pc, #572]	; (8009bf8 <UART_SetConfig+0x2cc>)
 80099bc:	429a      	cmp	r2, r3
 80099be:	d005      	beq.n	80099cc <UART_SetConfig+0xa0>
 80099c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	4b8d      	ldr	r3, [pc, #564]	; (8009bfc <UART_SetConfig+0x2d0>)
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d104      	bne.n	80099d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80099cc:	f7fd fcca 	bl	8007364 <HAL_RCC_GetPCLK2Freq>
 80099d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80099d4:	e003      	b.n	80099de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80099d6:	f7fd fcb1 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 80099da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099e8:	f040 810c 	bne.w	8009c04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099f0:	2200      	movs	r2, #0
 80099f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80099fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80099fe:	4622      	mov	r2, r4
 8009a00:	462b      	mov	r3, r5
 8009a02:	1891      	adds	r1, r2, r2
 8009a04:	65b9      	str	r1, [r7, #88]	; 0x58
 8009a06:	415b      	adcs	r3, r3
 8009a08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a0e:	4621      	mov	r1, r4
 8009a10:	eb12 0801 	adds.w	r8, r2, r1
 8009a14:	4629      	mov	r1, r5
 8009a16:	eb43 0901 	adc.w	r9, r3, r1
 8009a1a:	f04f 0200 	mov.w	r2, #0
 8009a1e:	f04f 0300 	mov.w	r3, #0
 8009a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a2e:	4690      	mov	r8, r2
 8009a30:	4699      	mov	r9, r3
 8009a32:	4623      	mov	r3, r4
 8009a34:	eb18 0303 	adds.w	r3, r8, r3
 8009a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	eb49 0303 	adc.w	r3, r9, r3
 8009a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	18db      	adds	r3, r3, r3
 8009a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8009a60:	4613      	mov	r3, r2
 8009a62:	eb42 0303 	adc.w	r3, r2, r3
 8009a66:	657b      	str	r3, [r7, #84]	; 0x54
 8009a68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a70:	f7f7 f8de 	bl	8000c30 <__aeabi_uldivmod>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4b61      	ldr	r3, [pc, #388]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8009a7e:	095b      	lsrs	r3, r3, #5
 8009a80:	011c      	lsls	r4, r3, #4
 8009a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a86:	2200      	movs	r2, #0
 8009a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a94:	4642      	mov	r2, r8
 8009a96:	464b      	mov	r3, r9
 8009a98:	1891      	adds	r1, r2, r2
 8009a9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a9c:	415b      	adcs	r3, r3
 8009a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	eb12 0a01 	adds.w	sl, r2, r1
 8009aaa:	4649      	mov	r1, r9
 8009aac:	eb43 0b01 	adc.w	fp, r3, r1
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	f04f 0300 	mov.w	r3, #0
 8009ab8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009abc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ac4:	4692      	mov	sl, r2
 8009ac6:	469b      	mov	fp, r3
 8009ac8:	4643      	mov	r3, r8
 8009aca:	eb1a 0303 	adds.w	r3, sl, r3
 8009ace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ad2:	464b      	mov	r3, r9
 8009ad4:	eb4b 0303 	adc.w	r3, fp, r3
 8009ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ae8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009aec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009af0:	460b      	mov	r3, r1
 8009af2:	18db      	adds	r3, r3, r3
 8009af4:	643b      	str	r3, [r7, #64]	; 0x40
 8009af6:	4613      	mov	r3, r2
 8009af8:	eb42 0303 	adc.w	r3, r2, r3
 8009afc:	647b      	str	r3, [r7, #68]	; 0x44
 8009afe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009b06:	f7f7 f893 	bl	8000c30 <__aeabi_uldivmod>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4b3b      	ldr	r3, [pc, #236]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009b12:	fba3 2301 	umull	r2, r3, r3, r1
 8009b16:	095b      	lsrs	r3, r3, #5
 8009b18:	2264      	movs	r2, #100	; 0x64
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
 8009b1e:	1acb      	subs	r3, r1, r3
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b26:	4b36      	ldr	r3, [pc, #216]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009b28:	fba3 2302 	umull	r2, r3, r3, r2
 8009b2c:	095b      	lsrs	r3, r3, #5
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b34:	441c      	add	r4, r3
 8009b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009b44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009b48:	4642      	mov	r2, r8
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	1891      	adds	r1, r2, r2
 8009b4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b50:	415b      	adcs	r3, r3
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b58:	4641      	mov	r1, r8
 8009b5a:	1851      	adds	r1, r2, r1
 8009b5c:	6339      	str	r1, [r7, #48]	; 0x30
 8009b5e:	4649      	mov	r1, r9
 8009b60:	414b      	adcs	r3, r1
 8009b62:	637b      	str	r3, [r7, #52]	; 0x34
 8009b64:	f04f 0200 	mov.w	r2, #0
 8009b68:	f04f 0300 	mov.w	r3, #0
 8009b6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b70:	4659      	mov	r1, fp
 8009b72:	00cb      	lsls	r3, r1, #3
 8009b74:	4651      	mov	r1, sl
 8009b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b7a:	4651      	mov	r1, sl
 8009b7c:	00ca      	lsls	r2, r1, #3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	4619      	mov	r1, r3
 8009b82:	4603      	mov	r3, r0
 8009b84:	4642      	mov	r2, r8
 8009b86:	189b      	adds	r3, r3, r2
 8009b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	460a      	mov	r2, r1
 8009b90:	eb42 0303 	adc.w	r3, r2, r3
 8009b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ba4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ba8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009bac:	460b      	mov	r3, r1
 8009bae:	18db      	adds	r3, r3, r3
 8009bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	eb42 0303 	adc.w	r3, r2, r3
 8009bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009bc2:	f7f7 f835 	bl	8000c30 <__aeabi_uldivmod>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4b0d      	ldr	r3, [pc, #52]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8009bd0:	095b      	lsrs	r3, r3, #5
 8009bd2:	2164      	movs	r1, #100	; 0x64
 8009bd4:	fb01 f303 	mul.w	r3, r1, r3
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	3332      	adds	r3, #50	; 0x32
 8009bde:	4a08      	ldr	r2, [pc, #32]	; (8009c00 <UART_SetConfig+0x2d4>)
 8009be0:	fba2 2303 	umull	r2, r3, r2, r3
 8009be4:	095b      	lsrs	r3, r3, #5
 8009be6:	f003 0207 	and.w	r2, r3, #7
 8009bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4422      	add	r2, r4
 8009bf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009bf4:	e105      	b.n	8009e02 <UART_SetConfig+0x4d6>
 8009bf6:	bf00      	nop
 8009bf8:	40011000 	.word	0x40011000
 8009bfc:	40011400 	.word	0x40011400
 8009c00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009c12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009c16:	4642      	mov	r2, r8
 8009c18:	464b      	mov	r3, r9
 8009c1a:	1891      	adds	r1, r2, r2
 8009c1c:	6239      	str	r1, [r7, #32]
 8009c1e:	415b      	adcs	r3, r3
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
 8009c22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c26:	4641      	mov	r1, r8
 8009c28:	1854      	adds	r4, r2, r1
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	eb43 0501 	adc.w	r5, r3, r1
 8009c30:	f04f 0200 	mov.w	r2, #0
 8009c34:	f04f 0300 	mov.w	r3, #0
 8009c38:	00eb      	lsls	r3, r5, #3
 8009c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c3e:	00e2      	lsls	r2, r4, #3
 8009c40:	4614      	mov	r4, r2
 8009c42:	461d      	mov	r5, r3
 8009c44:	4643      	mov	r3, r8
 8009c46:	18e3      	adds	r3, r4, r3
 8009c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	eb45 0303 	adc.w	r3, r5, r3
 8009c52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c66:	f04f 0200 	mov.w	r2, #0
 8009c6a:	f04f 0300 	mov.w	r3, #0
 8009c6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009c72:	4629      	mov	r1, r5
 8009c74:	008b      	lsls	r3, r1, #2
 8009c76:	4621      	mov	r1, r4
 8009c78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	008a      	lsls	r2, r1, #2
 8009c80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c84:	f7f6 ffd4 	bl	8000c30 <__aeabi_uldivmod>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4b60      	ldr	r3, [pc, #384]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8009c92:	095b      	lsrs	r3, r3, #5
 8009c94:	011c      	lsls	r4, r3, #4
 8009c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ca0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ca4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ca8:	4642      	mov	r2, r8
 8009caa:	464b      	mov	r3, r9
 8009cac:	1891      	adds	r1, r2, r2
 8009cae:	61b9      	str	r1, [r7, #24]
 8009cb0:	415b      	adcs	r3, r3
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cb8:	4641      	mov	r1, r8
 8009cba:	1851      	adds	r1, r2, r1
 8009cbc:	6139      	str	r1, [r7, #16]
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	414b      	adcs	r3, r1
 8009cc2:	617b      	str	r3, [r7, #20]
 8009cc4:	f04f 0200 	mov.w	r2, #0
 8009cc8:	f04f 0300 	mov.w	r3, #0
 8009ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009cd0:	4659      	mov	r1, fp
 8009cd2:	00cb      	lsls	r3, r1, #3
 8009cd4:	4651      	mov	r1, sl
 8009cd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cda:	4651      	mov	r1, sl
 8009cdc:	00ca      	lsls	r2, r1, #3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4642      	mov	r2, r8
 8009ce6:	189b      	adds	r3, r3, r2
 8009ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cec:	464b      	mov	r3, r9
 8009cee:	460a      	mov	r2, r1
 8009cf0:	eb42 0303 	adc.w	r3, r2, r3
 8009cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d04:	f04f 0200 	mov.w	r2, #0
 8009d08:	f04f 0300 	mov.w	r3, #0
 8009d0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009d10:	4649      	mov	r1, r9
 8009d12:	008b      	lsls	r3, r1, #2
 8009d14:	4641      	mov	r1, r8
 8009d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	008a      	lsls	r2, r1, #2
 8009d1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d22:	f7f6 ff85 	bl	8000c30 <__aeabi_uldivmod>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	4b39      	ldr	r3, [pc, #228]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d30:	095b      	lsrs	r3, r3, #5
 8009d32:	2164      	movs	r1, #100	; 0x64
 8009d34:	fb01 f303 	mul.w	r3, r1, r3
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	011b      	lsls	r3, r3, #4
 8009d3c:	3332      	adds	r3, #50	; 0x32
 8009d3e:	4a34      	ldr	r2, [pc, #208]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009d40:	fba2 2303 	umull	r2, r3, r2, r3
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d4a:	441c      	add	r4, r3
 8009d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d50:	2200      	movs	r2, #0
 8009d52:	673b      	str	r3, [r7, #112]	; 0x70
 8009d54:	677a      	str	r2, [r7, #116]	; 0x74
 8009d56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d5a:	4642      	mov	r2, r8
 8009d5c:	464b      	mov	r3, r9
 8009d5e:	1891      	adds	r1, r2, r2
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	415b      	adcs	r3, r3
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d6a:	4641      	mov	r1, r8
 8009d6c:	1851      	adds	r1, r2, r1
 8009d6e:	6039      	str	r1, [r7, #0]
 8009d70:	4649      	mov	r1, r9
 8009d72:	414b      	adcs	r3, r1
 8009d74:	607b      	str	r3, [r7, #4]
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d82:	4659      	mov	r1, fp
 8009d84:	00cb      	lsls	r3, r1, #3
 8009d86:	4651      	mov	r1, sl
 8009d88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d8c:	4651      	mov	r1, sl
 8009d8e:	00ca      	lsls	r2, r1, #3
 8009d90:	4610      	mov	r0, r2
 8009d92:	4619      	mov	r1, r3
 8009d94:	4603      	mov	r3, r0
 8009d96:	4642      	mov	r2, r8
 8009d98:	189b      	adds	r3, r3, r2
 8009d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	460a      	mov	r2, r1
 8009da0:	eb42 0303 	adc.w	r3, r2, r3
 8009da4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	663b      	str	r3, [r7, #96]	; 0x60
 8009db0:	667a      	str	r2, [r7, #100]	; 0x64
 8009db2:	f04f 0200 	mov.w	r2, #0
 8009db6:	f04f 0300 	mov.w	r3, #0
 8009dba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	008b      	lsls	r3, r1, #2
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dc8:	4641      	mov	r1, r8
 8009dca:	008a      	lsls	r2, r1, #2
 8009dcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009dd0:	f7f6 ff2e 	bl	8000c30 <__aeabi_uldivmod>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009dda:	fba3 1302 	umull	r1, r3, r3, r2
 8009dde:	095b      	lsrs	r3, r3, #5
 8009de0:	2164      	movs	r1, #100	; 0x64
 8009de2:	fb01 f303 	mul.w	r3, r1, r3
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	3332      	adds	r3, #50	; 0x32
 8009dec:	4a08      	ldr	r2, [pc, #32]	; (8009e10 <UART_SetConfig+0x4e4>)
 8009dee:	fba2 2303 	umull	r2, r3, r2, r3
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4422      	add	r2, r4
 8009e00:	609a      	str	r2, [r3, #8]
}
 8009e02:	bf00      	nop
 8009e04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e0e:	bf00      	nop
 8009e10:	51eb851f 	.word	0x51eb851f

08009e14 <__libc_init_array>:
 8009e14:	b570      	push	{r4, r5, r6, lr}
 8009e16:	4d0d      	ldr	r5, [pc, #52]	; (8009e4c <__libc_init_array+0x38>)
 8009e18:	4c0d      	ldr	r4, [pc, #52]	; (8009e50 <__libc_init_array+0x3c>)
 8009e1a:	1b64      	subs	r4, r4, r5
 8009e1c:	10a4      	asrs	r4, r4, #2
 8009e1e:	2600      	movs	r6, #0
 8009e20:	42a6      	cmp	r6, r4
 8009e22:	d109      	bne.n	8009e38 <__libc_init_array+0x24>
 8009e24:	4d0b      	ldr	r5, [pc, #44]	; (8009e54 <__libc_init_array+0x40>)
 8009e26:	4c0c      	ldr	r4, [pc, #48]	; (8009e58 <__libc_init_array+0x44>)
 8009e28:	f000 f820 	bl	8009e6c <_init>
 8009e2c:	1b64      	subs	r4, r4, r5
 8009e2e:	10a4      	asrs	r4, r4, #2
 8009e30:	2600      	movs	r6, #0
 8009e32:	42a6      	cmp	r6, r4
 8009e34:	d105      	bne.n	8009e42 <__libc_init_array+0x2e>
 8009e36:	bd70      	pop	{r4, r5, r6, pc}
 8009e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3c:	4798      	blx	r3
 8009e3e:	3601      	adds	r6, #1
 8009e40:	e7ee      	b.n	8009e20 <__libc_init_array+0xc>
 8009e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e46:	4798      	blx	r3
 8009e48:	3601      	adds	r6, #1
 8009e4a:	e7f2      	b.n	8009e32 <__libc_init_array+0x1e>
 8009e4c:	08009eac 	.word	0x08009eac
 8009e50:	08009eac 	.word	0x08009eac
 8009e54:	08009eac 	.word	0x08009eac
 8009e58:	08009eb0 	.word	0x08009eb0

08009e5c <memset>:
 8009e5c:	4402      	add	r2, r0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d100      	bne.n	8009e66 <memset+0xa>
 8009e64:	4770      	bx	lr
 8009e66:	f803 1b01 	strb.w	r1, [r3], #1
 8009e6a:	e7f9      	b.n	8009e60 <memset+0x4>

08009e6c <_init>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

08009e78 <_fini>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr
