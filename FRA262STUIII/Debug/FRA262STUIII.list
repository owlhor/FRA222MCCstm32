
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001efd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801f178  0801f178  0002f178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a27c  0802a27c  00040250  2**0
                  CONTENTS
  4 .ARM          00000008  0802a27c  0802a27c  0003a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a284  0802a284  00040250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a284  0802a284  0003a284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a28c  0802a28c  0003a28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0802a290  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000250  0802a4e0  00040250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  0802a4e0  00040808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00105295  00000000  00000000  00040280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da4  00000000  00000000  00145515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a30  00000000  00000000  001482c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004980  00000000  00000000  0014ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb84  00000000  00000000  00151670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002236b  00000000  00000000  0016e1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00478591  00000000  00000000  0019055f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00608af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000164e8  00000000  00000000  00608b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801f160 	.word	0x0801f160

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0801f160 	.word	0x0801f160

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fba:	f01c f9d3 	bl	801d364 <sqrtf>
 8000fbe:	eef0 7a40 	vmov.f32	s15, s0
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */

///////////////////// [UART UI Base System] /////////////////////

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a4a      	ldr	r2, [pc, #296]	; (8001138 <HAL_UARTEx_RxEventCallback+0x13c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	f040 808d 	bne.w	800112e <HAL_UARTEx_RxEventCallback+0x132>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8001014:	4b49      	ldr	r3, [pc, #292]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	4b49      	ldr	r3, [pc, #292]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 800101a:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_UARTEx_RxEventCallback+0x148>)
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	8013      	strh	r3, [r2, #0]
		// If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		// This is to maintain the circular buffer
		// The old data in the main buffer will be overlapped

		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	4413      	add	r3, r2
 800102c:	2b20      	cmp	r3, #32
 800102e:	dd14      	ble.n	800105a <HAL_UARTEx_RxEventCallback+0x5e>
		{
			oldPos_uart = 0;  // point to the start of the buffer
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 8001032:	2200      	movs	r2, #0
 8001034:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8001036:	4b42      	ldr	r3, [pc, #264]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	4b42      	ldr	r3, [pc, #264]	; (8001148 <HAL_UARTEx_RxEventCallback+0x14c>)
 800103e:	4413      	add	r3, r2
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	4942      	ldr	r1, [pc, #264]	; (800114c <HAL_UARTEx_RxEventCallback+0x150>)
 8001044:	4618      	mov	r0, r3
 8001046:	f01d f8b3 	bl	801e1b0 <memcpy>
			newPos_uart = Size + oldPos_uart;
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	4413      	add	r3, r2
 8001052:	b29a      	uxth	r2, r3
 8001054:	4b39      	ldr	r3, [pc, #228]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 8001056:	801a      	strh	r2, [r3, #0]
 8001058:	e010      	b.n	800107c <HAL_UARTEx_RxEventCallback+0x80>
		}
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	4b39      	ldr	r3, [pc, #228]	; (8001148 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001062:	4413      	add	r3, r2
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	4939      	ldr	r1, [pc, #228]	; (800114c <HAL_UARTEx_RxEventCallback+0x150>)
 8001068:	4618      	mov	r0, r3
 800106a:	f01d f8a1 	bl	801e1b0 <memcpy>
			newPos_uart = Size + oldPos_uart;
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <HAL_UARTEx_RxEventCallback+0x144>)
 8001070:	881a      	ldrh	r2, [r3, #0]
 8001072:	887b      	ldrh	r3, [r7, #2]
 8001074:	4413      	add	r3, r2
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 800107a:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <HAL_UARTEx_RxEventCallback+0x148>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	4a2f      	ldr	r2, [pc, #188]	; (8001148 <HAL_UARTEx_RxEventCallback+0x14c>)
 800108a:	5cd2      	ldrb	r2, [r2, r3]
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 800108e:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <HAL_UARTEx_RxEventCallback+0x158>)
 800109a:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 80010a8:	701a      	strb	r2, [r3, #0]
		if (chkStart == 9){ // 0b1001
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_UARTEx_RxEventCallback+0x158>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b09      	cmp	r3, #9
 80010b0:	d10a      	bne.n	80010c8 <HAL_UARTEx_RxEventCallback+0xcc>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 80010b2:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d02c      	beq.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b0e      	cmp	r3, #14
 80010c0:	d828      	bhi.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
				All_mode_UARTUI();
 80010c2:	f000 f851 	bl	8001168 <_Z15All_mode_UARTUIv>
 80010c6:	e025      	b.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
			}
		}
		else if (StartM == 88) {
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b58      	cmp	r3, #88	; 0x58
 80010ce:	d121      	bne.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
			StartM = MainBuf[newPos_uart-2];
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_UARTEx_RxEventCallback+0x140>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	3b02      	subs	r3, #2
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_UARTEx_RxEventCallback+0x14c>)
 80010d8:	5cd2      	ldrb	r2, [r2, r3]
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 80010dc:	701a      	strb	r2, [r3, #0]
		    chkStart = StartM >> 4;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_UARTEx_RxEventCallback+0x158>)
 80010e8:	701a      	strb	r2, [r3, #0]
		    NameM = (StartM & 15);
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_UARTEx_RxEventCallback+0x154>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 80010f6:	701a      	strb	r2, [r3, #0]
		    if (chkStart == 9){
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_UARTEx_RxEventCallback+0x158>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b09      	cmp	r3, #9
 80010fe:	d109      	bne.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
		    	if (NameM >= 1 && NameM <= 14){
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_UARTEx_RxEventCallback+0x15c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b0e      	cmp	r3, #14
 800110e:	d801      	bhi.n	8001114 <HAL_UARTEx_RxEventCallback+0x118>
		    		All_mode_UARTUI();
 8001110:	f000 f82a 	bl	8001168 <_Z15All_mode_UARTUIv>
		        }
		    }
		}

		// start the DMA again
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001114:	2220      	movs	r2, #32
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <HAL_UARTEx_RxEventCallback+0x150>)
 8001118:	4810      	ldr	r0, [pc, #64]	; (800115c <HAL_UARTEx_RxEventCallback+0x160>)
 800111a:	f01a ff18 	bl	801bf4e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_UARTEx_RxEventCallback+0x164>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_UARTEx_RxEventCallback+0x164>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0208 	bic.w	r2, r2, #8
 800112c:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004400 	.word	0x40004400
 800113c:	20000792 	.word	0x20000792
 8001140:	20000790 	.word	0x20000790
 8001144:	200007d0 	.word	0x200007d0
 8001148:	20000770 	.word	0x20000770
 800114c:	20000750 	.word	0x20000750
 8001150:	200007d4 	.word	0x200007d4
 8001154:	200007d2 	.word	0x200007d2
 8001158:	200007d3 	.word	0x200007d3
 800115c:	200003f4 	.word	0x200003f4
 8001160:	20000438 	.word	0x20000438
 8001164:	00000000 	.word	0x00000000

08001168 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
	int yur;
	int zur;
	int kur; // counter

	// NameM => 15 mode
		switch (NameM){
 800116e:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <_Z15All_mode_UARTUIv+0x1f8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3b01      	subs	r3, #1
 8001174:	2b0d      	cmp	r3, #13
 8001176:	f200 845b 	bhi.w	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <_Z15All_mode_UARTUIv+0x18>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	080011b9 	.word	0x080011b9
 8001184:	08001219 	.word	0x08001219
 8001188:	08001253 	.word	0x08001253
 800118c:	0800129d 	.word	0x0800129d
 8001190:	080013a9 	.word	0x080013a9
 8001194:	080014a7 	.word	0x080014a7
 8001198:	08001531 	.word	0x08001531
 800119c:	08001701 	.word	0x08001701
 80011a0:	0800173b 	.word	0x0800173b
 80011a4:	0800177b 	.word	0x0800177b
 80011a8:	08001817 	.word	0x08001817
 80011ac:	08001941 	.word	0x08001941
 80011b0:	08001979 	.word	0x08001979
 80011b4:	080019c3 	.word	0x080019c3
		////==============[Test Command]===========
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 80011b8:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a6a      	ldr	r2, [pc, #424]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80011c0:	5cd2      	ldrb	r2, [r2, r3]
 80011c2:	4b6a      	ldr	r3, [pc, #424]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 80011c4:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 80011c6:	4b67      	ldr	r3, [pc, #412]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	3b02      	subs	r3, #2
 80011cc:	4a66      	ldr	r2, [pc, #408]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80011ce:	5cd2      	ldrb	r2, [r2, r3]
 80011d0:	4b67      	ldr	r3, [pc, #412]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80011d2:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 80011d4:	4b63      	ldr	r3, [pc, #396]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	3b03      	subs	r3, #3
 80011da:	4a63      	ldr	r2, [pc, #396]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80011dc:	5cd2      	ldrb	r2, [r2, r3]
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80011e0:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 80011e2:	4b65      	ldr	r3, [pc, #404]	; (8001378 <_Z15All_mode_UARTUIv+0x210>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b63      	ldr	r3, [pc, #396]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b60      	ldr	r3, [pc, #384]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b60      	ldr	r3, [pc, #384]	; (800137c <_Z15All_mode_UARTUIv+0x214>)
 80011fc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80011fe:	4b5b      	ldr	r3, [pc, #364]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b5e      	ldr	r3, [pc, #376]	; (800137c <_Z15All_mode_UARTUIv+0x214>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	f040 83f7 	bne.w	80019fa <_Z15All_mode_UARTUIv+0x892>
					M_state = 1;
 800120c:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <_Z15All_mode_UARTUIv+0x218>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001212:	f000 fc27 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 8001216:	e3f0      	b.n	80019fa <_Z15All_mode_UARTUIv+0x892>
		////==============[Connect MCU]===========
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 8001218:	4b52      	ldr	r3, [pc, #328]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	3b01      	subs	r3, #1
 800121e:	4a52      	ldr	r2, [pc, #328]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 8001220:	5cd2      	ldrb	r2, [r2, r3]
 8001222:	4b52      	ldr	r3, [pc, #328]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 8001224:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001226:	4b54      	ldr	r3, [pc, #336]	; (8001378 <_Z15All_mode_UARTUIv+0x210>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	43db      	mvns	r3, r3
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b55      	ldr	r3, [pc, #340]	; (8001384 <_Z15All_mode_UARTUIv+0x21c>)
 8001230:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001232:	4b4e      	ldr	r3, [pc, #312]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	4b53      	ldr	r3, [pc, #332]	; (8001384 <_Z15All_mode_UARTUIv+0x21c>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	f040 83df 	bne.w	80019fe <_Z15All_mode_UARTUIv+0x896>
					M_state = 2;
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <_Z15All_mode_UARTUIv+0x218>)
 8001242:	2202      	movs	r2, #2
 8001244:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					// check efft
					flag_efftActi = 1;
 8001246:	4b50      	ldr	r3, [pc, #320]	; (8001388 <_Z15All_mode_UARTUIv+0x220>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 800124c:	f000 fc0a 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 8001250:	e3d5      	b.n	80019fe <_Z15All_mode_UARTUIv+0x896>
		////==============[Disconnect MCU]===========
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 8001252:	4b44      	ldr	r3, [pc, #272]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	3b01      	subs	r3, #1
 8001258:	4a43      	ldr	r2, [pc, #268]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 800125a:	5cd2      	ldrb	r2, [r2, r3]
 800125c:	4b43      	ldr	r3, [pc, #268]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 800125e:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8001260:	4b45      	ldr	r3, [pc, #276]	; (8001378 <_Z15All_mode_UARTUIv+0x210>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	43db      	mvns	r3, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <_Z15All_mode_UARTUIv+0x21c>)
 800126a:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	4b44      	ldr	r3, [pc, #272]	; (8001384 <_Z15All_mode_UARTUIv+0x21c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 83c4 	bne.w	8001a02 <_Z15All_mode_UARTUIv+0x89a>
					M_state = 3;
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <_Z15All_mode_UARTUIv+0x218>)
 800127c:	2203      	movs	r2, #3
 800127e:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					ResetParam();
 8001280:	f001 fed0 	bl	8003024 <_Z10ResetParamv>
					grandState = Ready;
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <_Z15All_mode_UARTUIv+0x224>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	2202      	movs	r2, #2
 800128e:	4940      	ldr	r1, [pc, #256]	; (8001390 <_Z15All_mode_UARTUIv+0x228>)
 8001290:	4840      	ldr	r0, [pc, #256]	; (8001394 <_Z15All_mode_UARTUIv+0x22c>)
 8001292:	f01a fdca 	bl	801be2a <HAL_UART_Transmit>

					xu_Uart();
 8001296:	f000 fbe5 	bl	8001a64 <_Z7xu_Uartv>

				}
				break;
 800129a:	e3b2      	b.n	8001a02 <_Z15All_mode_UARTUIv+0x89a>
		////==============[Angular Velo Set]===========
			case 4:
					chksum = MainBuf[newPos_uart-1];
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4a31      	ldr	r2, [pc, #196]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80012a4:	5cd2      	ldrb	r2, [r2, r3]
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 80012a8:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	3b02      	subs	r3, #2
 80012b0:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80012b2:	5cd2      	ldrb	r2, [r2, r3]
 80012b4:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80012b6:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <_Z15All_mode_UARTUIv+0x1fc>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	3b03      	subs	r3, #3
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <_Z15All_mode_UARTUIv+0x200>)
 80012c0:	5cd2      	ldrb	r2, [r2, r3]
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80012c4:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <_Z15All_mode_UARTUIv+0x230>)
 80012cc:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 80012ce:	4b28      	ldr	r3, [pc, #160]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <_Z15All_mode_UARTUIv+0x230>)
 80012d4:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <_Z15All_mode_UARTUIv+0x210>)
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <_Z15All_mode_UARTUIv+0x20c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <_Z15All_mode_UARTUIv+0x208>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <_Z15All_mode_UARTUIv+0x214>)
 80012f0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <_Z15All_mode_UARTUIv+0x204>)
 80012f4:	781a      	ldrb	r2, [r3, #0]
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <_Z15All_mode_UARTUIv+0x214>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	f040 8383 	bne.w	8001a06 <_Z15All_mode_UARTUIv+0x89e>
					M_state = 4;
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <_Z15All_mode_UARTUIv+0x218>)
 8001302:	2204      	movs	r2, #4
 8001304:	701a      	strb	r2, [r3, #0]
					DataProtocol_SetVelo = Set_AngVelo[1];
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <_Z15All_mode_UARTUIv+0x230>)
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <_Z15All_mode_UARTUIv+0x234>)
 8001314:	edc3 7a00 	vstr	s15, [r3]
					//////// RPM to Rad/s => 2PI/60
					Velocity =((DataProtocol_SetVelo * 10)/255) * (2 * M_PI / 60);
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <_Z15All_mode_UARTUIv+0x234>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001322:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001326:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80013a0 <_Z15All_mode_UARTUIv+0x238>
 800132a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800132e:	ee16 0a90 	vmov	r0, s13
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	a308      	add	r3, pc, #32	; (adr r3, 8001358 <_Z15All_mode_UARTUIv+0x1f0>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f95c 	bl	80005f8 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc4e 	bl	8000be8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <_Z15All_mode_UARTUIv+0x23c>)
 8001350:	6013      	str	r3, [r2, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001352:	f000 fb87 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 8001356:	e356      	b.n	8001a06 <_Z15All_mode_UARTUIv+0x89e>
 8001358:	f37bebd5 	.word	0xf37bebd5
 800135c:	3fbacee9 	.word	0x3fbacee9
 8001360:	200007d3 	.word	0x200007d3
 8001364:	20000792 	.word	0x20000792
 8001368:	20000770 	.word	0x20000770
 800136c:	200007d5 	.word	0x200007d5
 8001370:	200007da 	.word	0x200007da
 8001374:	200007d9 	.word	0x200007d9
 8001378:	200007d4 	.word	0x200007d4
 800137c:	200007d7 	.word	0x200007d7
 8001380:	200007db 	.word	0x200007db
 8001384:	200007d6 	.word	0x200007d6
 8001388:	2000073b 	.word	0x2000073b
 800138c:	200004fc 	.word	0x200004fc
 8001390:	200001b4 	.word	0x200001b4
 8001394:	200003f4 	.word	0x200003f4
 8001398:	2000079c 	.word	0x2000079c
 800139c:	200007a0 	.word	0x200007a0
 80013a0:	437f0000 	.word	0x437f0000
 80013a4:	20000588 	.word	0x20000588
		////==============[Angular Position Set]===========
			case 5:
					chksum = MainBuf[newPos_uart-1];
 80013a8:	4b9f      	ldr	r3, [pc, #636]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	4a9f      	ldr	r2, [pc, #636]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80013b0:	5cd2      	ldrb	r2, [r2, r3]
 80013b2:	4b9f      	ldr	r3, [pc, #636]	; (8001630 <_Z15All_mode_UARTUIv+0x4c8>)
 80013b4:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80013b6:	4b9c      	ldr	r3, [pc, #624]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3b02      	subs	r3, #2
 80013bc:	4a9b      	ldr	r2, [pc, #620]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80013be:	5cd2      	ldrb	r2, [r2, r3]
 80013c0:	4b9c      	ldr	r3, [pc, #624]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80013c2:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80013c4:	4b98      	ldr	r3, [pc, #608]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	4a98      	ldr	r2, [pc, #608]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80013cc:	5cd2      	ldrb	r2, [r2, r3]
 80013ce:	4b9a      	ldr	r3, [pc, #616]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80013d0:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 80013d2:	4b99      	ldr	r3, [pc, #612]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80013d4:	781a      	ldrb	r2, [r3, #0]
 80013d6:	4b99      	ldr	r3, [pc, #612]	; (800163c <_Z15All_mode_UARTUIv+0x4d4>)
 80013d8:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 80013da:	4b96      	ldr	r3, [pc, #600]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b97      	ldr	r3, [pc, #604]	; (800163c <_Z15All_mode_UARTUIv+0x4d4>)
 80013e0:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80013e2:	4b97      	ldr	r3, [pc, #604]	; (8001640 <_Z15All_mode_UARTUIv+0x4d8>)
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	4b94      	ldr	r3, [pc, #592]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b91      	ldr	r3, [pc, #580]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b92      	ldr	r3, [pc, #584]	; (8001644 <_Z15All_mode_UARTUIv+0x4dc>)
 80013fc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80013fe:	4b8c      	ldr	r3, [pc, #560]	; (8001630 <_Z15All_mode_UARTUIv+0x4c8>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b90      	ldr	r3, [pc, #576]	; (8001644 <_Z15All_mode_UARTUIv+0x4dc>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	f040 82ff 	bne.w	8001a0a <_Z15All_mode_UARTUIv+0x8a2>
					M_state = 5;
 800140c:	4b8e      	ldr	r3, [pc, #568]	; (8001648 <_Z15All_mode_UARTUIv+0x4e0>)
 800140e:	2205      	movs	r2, #5
 8001410:	701a      	strb	r2, [r3, #0]

					DataProtocol_SetAngPosi = (Set_AngPosi[0]*256) + Set_AngPosi[1];
 8001412:	4b8a      	ldr	r3, [pc, #552]	; (800163c <_Z15All_mode_UARTUIv+0x4d4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4a88      	ldr	r2, [pc, #544]	; (800163c <_Z15All_mode_UARTUIv+0x4d4>)
 800141a:	7852      	ldrb	r2, [r2, #1]
 800141c:	4413      	add	r3, r2
 800141e:	4a8b      	ldr	r2, [pc, #556]	; (800164c <_Z15All_mode_UARTUIv+0x4e4>)
 8001420:	6013      	str	r3, [r2, #0]
					//int degree_Uart;
					degree_Uart = round((DataProtocol_SetAngPosi / (M_PI * 10000) * 180));
 8001422:	4b8a      	ldr	r3, [pc, #552]	; (800164c <_Z15All_mode_UARTUIv+0x4e4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f87c 	bl	8000524 <__aeabi_i2d>
 800142c:	a37a      	add	r3, pc, #488	; (adr r3, 8001618 <_Z15All_mode_UARTUIv+0x4b0>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff fa0b 	bl	800084c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b83      	ldr	r3, [pc, #524]	; (8001650 <_Z15All_mode_UARTUIv+0x4e8>)
 8001444:	f7ff f8d8 	bl	80005f8 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	ec43 2b17 	vmov	d7, r2, r3
 8001450:	eeb0 0a47 	vmov.f32	s0, s14
 8001454:	eef0 0a67 	vmov.f32	s1, s15
 8001458:	f01b fece 	bl	801d1f8 <round>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb78 	bl	8000b58 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	4a7a      	ldr	r2, [pc, #488]	; (8001654 <_Z15All_mode_UARTUIv+0x4ec>)
 800146c:	6013      	str	r3, [r2, #0]
					positionlog[0] = (float)(degree_Uart * M_PI) / 180;
 800146e:	4b79      	ldr	r3, [pc, #484]	; (8001654 <_Z15All_mode_UARTUIv+0x4ec>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f856 	bl	8000524 <__aeabi_i2d>
 8001478:	a369      	add	r3, pc, #420	; (adr r3, 8001620 <_Z15All_mode_UARTUIv+0x4b8>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f8bb 	bl	80005f8 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fbad 	bl	8000be8 <__aeabi_d2f>
 800148e:	ee06 0a90 	vmov	s13, r0
 8001492:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001658 <_Z15All_mode_UARTUIv+0x4f0>
 8001496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149a:	4b70      	ldr	r3, [pc, #448]	; (800165c <_Z15All_mode_UARTUIv+0x4f4>)
 800149c:	edc3 7a00 	vstr	s15, [r3]
					//positionlog[0] = (float)(DataProtocol_SetAngPosi / 10000.0);
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80014a0:	f000 fae0 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 80014a4:	e2b1      	b.n	8001a0a <_Z15All_mode_UARTUIv+0x8a2>
		////==============[Goal 1 station]===========
			case 6:
					chksum = MainBuf[newPos_uart-1];
 80014a6:	4b60      	ldr	r3, [pc, #384]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	4a5f      	ldr	r2, [pc, #380]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80014ae:	5cd2      	ldrb	r2, [r2, r3]
 80014b0:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <_Z15All_mode_UARTUIv+0x4c8>)
 80014b2:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80014b4:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	3b02      	subs	r3, #2
 80014ba:	4a5c      	ldr	r2, [pc, #368]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80014bc:	5cd2      	ldrb	r2, [r2, r3]
 80014be:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80014c0:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	3b03      	subs	r3, #3
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80014ca:	5cd2      	ldrb	r2, [r2, r3]
 80014cc:	4b5a      	ldr	r3, [pc, #360]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80014ce:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 80014d0:	4b59      	ldr	r3, [pc, #356]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	4b62      	ldr	r3, [pc, #392]	; (8001660 <_Z15All_mode_UARTUIv+0x4f8>)
 80014d6:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 80014d8:	4b56      	ldr	r3, [pc, #344]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80014da:	781a      	ldrb	r2, [r3, #0]
 80014dc:	4b60      	ldr	r3, [pc, #384]	; (8001660 <_Z15All_mode_UARTUIv+0x4f8>)
 80014de:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80014e0:	4b57      	ldr	r3, [pc, #348]	; (8001640 <_Z15All_mode_UARTUIv+0x4d8>)
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <_Z15All_mode_UARTUIv+0x4d0>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b51      	ldr	r3, [pc, #324]	; (8001634 <_Z15All_mode_UARTUIv+0x4cc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b52      	ldr	r3, [pc, #328]	; (8001644 <_Z15All_mode_UARTUIv+0x4dc>)
 80014fa:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80014fc:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <_Z15All_mode_UARTUIv+0x4c8>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	4b50      	ldr	r3, [pc, #320]	; (8001644 <_Z15All_mode_UARTUIv+0x4dc>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8282 	bne.w	8001a0e <_Z15All_mode_UARTUIv+0x8a6>
					M_state = 6;
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <_Z15All_mode_UARTUIv+0x4e0>)
 800150c:	2206      	movs	r2, #6
 800150e:	701a      	strb	r2, [r3, #0]

					///////// Load 1 station Data /////////////
					positionlog[0] = PosDataSet[Set_Goal_1Sta[1]];
 8001510:	4b53      	ldr	r3, [pc, #332]	; (8001660 <_Z15All_mode_UARTUIv+0x4f8>)
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	4a53      	ldr	r2, [pc, #332]	; (8001664 <_Z15All_mode_UARTUIv+0x4fc>)
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a4f      	ldr	r2, [pc, #316]	; (800165c <_Z15All_mode_UARTUIv+0x4f4>)
 800151e:	6013      	str	r3, [r2, #0]
					Set1_Sta = Set_Goal_1Sta[1];
 8001520:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <_Z15All_mode_UARTUIv+0x4f8>)
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	461a      	mov	r2, r3
 8001526:	4b50      	ldr	r3, [pc, #320]	; (8001668 <_Z15All_mode_UARTUIv+0x500>)
 8001528:	601a      	str	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);

					xu_Uart();
 800152a:	f000 fa9b 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 800152e:	e26e      	b.n	8001a0e <_Z15All_mode_UARTUIv+0x8a6>
		////==============[Goal n station]===========
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <_Z15All_mode_UARTUIv+0x4c0>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <_Z15All_mode_UARTUIv+0x504>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	3301      	adds	r3, #1
 800153e:	4a3b      	ldr	r2, [pc, #236]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 8001540:	5cd2      	ldrb	r2, [r2, r3]
 8001542:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <_Z15All_mode_UARTUIv+0x508>)
 8001544:	701a      	strb	r2, [r3, #0]
				yur = Nstation;
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <_Z15All_mode_UARTUIv+0x508>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]
				zur = ( yur / 2 ) + yur % 2;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	0fda      	lsrs	r2, r3, #31
 8001550:	4413      	add	r3, r2
 8001552:	105b      	asrs	r3, r3, #1
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	bfb8      	it	lt
 8001560:	425b      	neglt	r3, r3
 8001562:	4413      	add	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
				kur = 0; // counter
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]

				for(int i = 0; i < zur; i++ ){
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	da1e      	bge.n	80015b4 <_Z15All_mode_UARTUIv+0x44c>
					dataFSum += MainBuf[oldPos_uart + (i+2)];
 8001576:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <_Z15All_mode_UARTUIv+0x50c>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	3302      	adds	r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	4a2a      	ldr	r2, [pc, #168]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 8001584:	5cd2      	ldrb	r2, [r2, r3]
 8001586:	4b3c      	ldr	r3, [pc, #240]	; (8001678 <_Z15All_mode_UARTUIv+0x510>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <_Z15All_mode_UARTUIv+0x510>)
 8001590:	701a      	strb	r2, [r3, #0]
					Goal_nSta[i] = MainBuf[oldPos_uart + (i+2)];
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <_Z15All_mode_UARTUIv+0x50c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	3302      	adds	r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <_Z15All_mode_UARTUIv+0x4c4>)
 80015a0:	5cd1      	ldrb	r1, [r2, r3]
 80015a2:	4a36      	ldr	r2, [pc, #216]	; (800167c <_Z15All_mode_UARTUIv+0x514>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < zur; i++ ){
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	e7dc      	b.n	800156e <_Z15All_mode_UARTUIv+0x406>
				}
				for(int x = 1; x < Nstation+1; x++){
 80015b4:	2301      	movs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <_Z15All_mode_UARTUIv+0x508>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	dc5f      	bgt.n	8001684 <_Z15All_mode_UARTUIv+0x51c>
                    if(x % 2 == 1){
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	bfb8      	it	lt
 80015ce:	425b      	neglt	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10b      	bne.n	80015ec <_Z15All_mode_UARTUIv+0x484>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] % 16);
 80015d4:	4a29      	ldr	r2, [pc, #164]	; (800167c <_Z15All_mode_UARTUIv+0x514>)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f002 020f 	and.w	r2, r2, #15
 80015e4:	b2d1      	uxtb	r1, r2
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <_Z15All_mode_UARTUIv+0x518>)
 80015e8:	54d1      	strb	r1, [r2, r3]
 80015ea:	e011      	b.n	8001610 <_Z15All_mode_UARTUIv+0x4a8>
                    }else if(x % 2 == 0){
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10c      	bne.n	8001610 <_Z15All_mode_UARTUIv+0x4a8>
                        Set_Goal_nSta[x-1] = (Goal_nSta[kur] / 16);
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <_Z15All_mode_UARTUIv+0x514>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	4413      	add	r3, r2
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3b01      	subs	r3, #1
 8001602:	0912      	lsrs	r2, r2, #4
 8001604:	b2d1      	uxtb	r1, r2
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <_Z15All_mode_UARTUIv+0x518>)
 8001608:	54d1      	strb	r1, [r2, r3]
                        kur++;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
				for(int x = 1; x < Nstation+1; x++){
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e7cf      	b.n	80015b8 <_Z15All_mode_UARTUIv+0x450>
 8001618:	4c5d390c 	.word	0x4c5d390c
 800161c:	40deadfb 	.word	0x40deadfb
 8001620:	54442d18 	.word	0x54442d18
 8001624:	400921fb 	.word	0x400921fb
 8001628:	20000792 	.word	0x20000792
 800162c:	20000770 	.word	0x20000770
 8001630:	200007d5 	.word	0x200007d5
 8001634:	200007da 	.word	0x200007da
 8001638:	200007d9 	.word	0x200007d9
 800163c:	200007a4 	.word	0x200007a4
 8001640:	200007d4 	.word	0x200007d4
 8001644:	200007d7 	.word	0x200007d7
 8001648:	200007db 	.word	0x200007db
 800164c:	200007a8 	.word	0x200007a8
 8001650:	40668000 	.word	0x40668000
 8001654:	200007e0 	.word	0x200007e0
 8001658:	43340000 	.word	0x43340000
 800165c:	20000144 	.word	0x20000144
 8001660:	200007ac 	.word	0x200007ac
 8001664:	20000518 	.word	0x20000518
 8001668:	200007cc 	.word	0x200007cc
 800166c:	200007d0 	.word	0x200007d0
 8001670:	200007dc 	.word	0x200007dc
 8001674:	20000790 	.word	0x20000790
 8001678:	200007dd 	.word	0x200007dd
 800167c:	200007b0 	.word	0x200007b0
 8001680:	200007b8 	.word	0x200007b8
                    }
                }

				chksum = MainBuf[newPos_uart-1];
 8001684:	4b96      	ldr	r3, [pc, #600]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	4a96      	ldr	r2, [pc, #600]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 800168c:	5cd2      	ldrb	r2, [r2, r3]
 800168e:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001690:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 8001692:	4b96      	ldr	r3, [pc, #600]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b96      	ldr	r3, [pc, #600]	; (80018f0 <_Z15All_mode_UARTUIv+0x788>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b95      	ldr	r3, [pc, #596]	; (80018f4 <_Z15All_mode_UARTUIv+0x78c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <_Z15All_mode_UARTUIv+0x790>)
 80016ac:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 80016ae:	4b8e      	ldr	r3, [pc, #568]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	4b91      	ldr	r3, [pc, #580]	; (80018f8 <_Z15All_mode_UARTUIv+0x790>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	f040 81ab 	bne.w	8001a12 <_Z15All_mode_UARTUIv+0x8aa>
					M_state = 7;
 80016bc:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 80016be:	2207      	movs	r2, #7
 80016c0:	701a      	strb	r2, [r3, #0]

					/////////// Load n station-> positionlog  //////////
					//for(int j = 0; j <= len(PosDataSet); j++){
					for(int j = 0; j <= Nstation; j++){
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b8a      	ldr	r3, [pc, #552]	; (80018f0 <_Z15All_mode_UARTUIv+0x788>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	dc10      	bgt.n	80016f4 <_Z15All_mode_UARTUIv+0x58c>
						positionlog[j] = PosDataSet[Set_Goal_nSta[j]];
 80016d2:	4a8b      	ldr	r2, [pc, #556]	; (8001900 <_Z15All_mode_UARTUIv+0x798>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4a8a      	ldr	r2, [pc, #552]	; (8001904 <_Z15All_mode_UARTUIv+0x79c>)
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4989      	ldr	r1, [pc, #548]	; (8001908 <_Z15All_mode_UARTUIv+0x7a0>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	601a      	str	r2, [r3, #0]
					for(int j = 0; j <= Nstation; j++){
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	3301      	adds	r3, #1
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e7e8      	b.n	80016c6 <_Z15All_mode_UARTUIv+0x55e>
						//Set_Goal_nSta -> raw index from UART
					}

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 80016f4:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <_Z15All_mode_UARTUIv+0x78c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
					xu_Uart();
 80016fa:	f000 f9b3 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 80016fe:	e188      	b.n	8001a12 <_Z15All_mode_UARTUIv+0x8aa>
		////==============[RUN Go to Goal station Order to Work]===========
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 8001700:	4b77      	ldr	r3, [pc, #476]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	3b01      	subs	r3, #1
 8001706:	4a77      	ldr	r2, [pc, #476]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 8001708:	5cd2      	ldrb	r2, [r2, r3]
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 800170c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800170e:	4b77      	ldr	r3, [pc, #476]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	43db      	mvns	r3, r3
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b7d      	ldr	r3, [pc, #500]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001718:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800171a:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	f040 8177 	bne.w	8001a16 <_Z15All_mode_UARTUIv+0x8ae>
					M_state = 8;
 8001728:	4b74      	ldr	r3, [pc, #464]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 800172a:	2208      	movs	r2, #8
 800172c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 800172e:	f000 f999 	bl	8001a64 <_Z7xu_Uartv>

		///////// Order to Work !!! ///
					grandState = work;
 8001732:	4b77      	ldr	r3, [pc, #476]	; (8001910 <_Z15All_mode_UARTUIv+0x7a8>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
					//if(grandState == Ready){grandState = work;}
					//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
				}
				break;
 8001738:	e16d      	b.n	8001a16 <_Z15All_mode_UARTUIv+0x8ae>
		////==============[Request Current station]===========
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 800173a:	4b69      	ldr	r3, [pc, #420]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	3b01      	subs	r3, #1
 8001740:	4a68      	ldr	r2, [pc, #416]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 8001742:	5cd2      	ldrb	r2, [r2, r3]
 8001744:	4b68      	ldr	r3, [pc, #416]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001746:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	43db      	mvns	r3, r3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b6e      	ldr	r3, [pc, #440]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001752:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	4b6c      	ldr	r3, [pc, #432]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	f040 815c 	bne.w	8001a1a <_Z15All_mode_UARTUIv+0x8b2>
					M_state = 9;
 8001762:	4b66      	ldr	r3, [pc, #408]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 8001764:	2209      	movs	r2, #9
 8001766:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001768:	f000 f97c 	bl	8001a64 <_Z7xu_Uartv>
					//Req_sta[1] = 0;
					//Req_sta[2] = x;
					//Req_sta[3] = ~(Req_sta[0] + Req_sta[1] + Req_sta[2]);
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,100);
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	2204      	movs	r2, #4
 8001770:	4968      	ldr	r1, [pc, #416]	; (8001914 <_Z15All_mode_UARTUIv+0x7ac>)
 8001772:	4869      	ldr	r0, [pc, #420]	; (8001918 <_Z15All_mode_UARTUIv+0x7b0>)
 8001774:	f01a fb59 	bl	801be2a <HAL_UART_Transmit>
				}
				break;
 8001778:	e14f      	b.n	8001a1a <_Z15All_mode_UARTUIv+0x8b2>
		////==============[Request Angular Position]===========
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 800177a:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 8001782:	5cd2      	ldrb	r2, [r2, r3]
 8001784:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001786:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	43db      	mvns	r3, r3
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b5e      	ldr	r3, [pc, #376]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001792:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001796:	781a      	ldrb	r2, [r3, #0]
 8001798:	4b5c      	ldr	r3, [pc, #368]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 813e 	bne.w	8001a1e <_Z15All_mode_UARTUIv+0x8b6>
					M_state = 10;
 80017a2:	4b56      	ldr	r3, [pc, #344]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 80017a8:	f000 f95c 	bl	8001a64 <_Z7xu_Uartv>
					DataProtocol_AngPosi = (CurrentEn * 10000); //KalP
 80017ac:	4b5b      	ldr	r3, [pc, #364]	; (800191c <_Z15All_mode_UARTUIv+0x7b4>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001920 <_Z15All_mode_UARTUIv+0x7b8>
 80017b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017be:	ee17 2a90 	vmov	r2, s15
 80017c2:	4b58      	ldr	r3, [pc, #352]	; (8001924 <_Z15All_mode_UARTUIv+0x7bc>)
 80017c4:	601a      	str	r2, [r3, #0]
					Req_AngPosi[1] = (DataProtocol_AngPosi / 256);
 80017c6:	4b57      	ldr	r3, [pc, #348]	; (8001924 <_Z15All_mode_UARTUIv+0x7bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da00      	bge.n	80017d0 <_Z15All_mode_UARTUIv+0x668>
 80017ce:	33ff      	adds	r3, #255	; 0xff
 80017d0:	121b      	asrs	r3, r3, #8
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b54      	ldr	r3, [pc, #336]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017d6:	705a      	strb	r2, [r3, #1]
					Req_AngPosi[2] = (DataProtocol_AngPosi % 256);
 80017d8:	4b52      	ldr	r3, [pc, #328]	; (8001924 <_Z15All_mode_UARTUIv+0x7bc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	425a      	negs	r2, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	bf58      	it	pl
 80017e4:	4253      	negpl	r3, r2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017ea:	709a      	strb	r2, [r3, #2]
					Req_AngPosi[3] = ~(Req_AngPosi[0] + Req_AngPosi[1] + Req_AngPosi[2]);
 80017ec:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017ee:	781a      	ldrb	r2, [r3, #0]
 80017f0:	4b4d      	ldr	r3, [pc, #308]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	4413      	add	r3, r2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	4413      	add	r3, r2
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	b2da      	uxtb	r2, r3
 8001804:	4b48      	ldr	r3, [pc, #288]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 8001806:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,100);
 8001808:	2364      	movs	r3, #100	; 0x64
 800180a:	2204      	movs	r2, #4
 800180c:	4946      	ldr	r1, [pc, #280]	; (8001928 <_Z15All_mode_UARTUIv+0x7c0>)
 800180e:	4842      	ldr	r0, [pc, #264]	; (8001918 <_Z15All_mode_UARTUIv+0x7b0>)
 8001810:	f01a fb0b 	bl	801be2a <HAL_UART_Transmit>
				}
				break;
 8001814:	e103      	b.n	8001a1e <_Z15All_mode_UARTUIv+0x8b6>
		////==============[Request MAX Angular velo]===========
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <_Z15All_mode_UARTUIv+0x778>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	3b01      	subs	r3, #1
 800181c:	4a31      	ldr	r2, [pc, #196]	; (80018e4 <_Z15All_mode_UARTUIv+0x77c>)
 800181e:	5cd2      	ldrb	r2, [r2, r3]
 8001820:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001822:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001824:	4b31      	ldr	r3, [pc, #196]	; (80018ec <_Z15All_mode_UARTUIv+0x784>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	43db      	mvns	r3, r3
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 800182e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <_Z15All_mode_UARTUIv+0x780>)
 8001832:	781a      	ldrb	r2, [r3, #0]
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <_Z15All_mode_UARTUIv+0x7a4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 80f2 	bne.w	8001a22 <_Z15All_mode_UARTUIv+0x8ba>
					M_state = 11;
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <_Z15All_mode_UARTUIv+0x794>)
 8001840:	220b      	movs	r2, #11
 8001842:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001844:	f000 f90e 	bl	8001a64 <_Z7xu_Uartv>
					DataProtocol_Velo = (KalV/(2 * 3.14)) * 60;
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <_Z15All_mode_UARTUIv+0x7c4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe7b 	bl	8000548 <__aeabi_f2d>
 8001852:	a321      	add	r3, pc, #132	; (adr r3, 80018d8 <_Z15All_mode_UARTUIv+0x770>)
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	f7fe fff8 	bl	800084c <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <_Z15All_mode_UARTUIv+0x7c8>)
 800186a:	f7fe fec5 	bl	80005f8 <__aeabi_dmul>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff f9b7 	bl	8000be8 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	4a2d      	ldr	r2, [pc, #180]	; (8001934 <_Z15All_mode_UARTUIv+0x7cc>)
 800187e:	6013      	str	r3, [r2, #0]
					Req_MaxVelo[1] = 0;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 8001882:	2200      	movs	r2, #0
 8001884:	705a      	strb	r2, [r3, #1]
					Req_MaxVelo[2] = (DataProtocol_Velo * 255) / 10;
 8001886:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <_Z15All_mode_UARTUIv+0x7cc>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800193c <_Z15All_mode_UARTUIv+0x7d4>
 8001890:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001894:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80018a4:	793b      	ldrb	r3, [r7, #4]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018aa:	709a      	strb	r2, [r3, #2]
					Req_MaxVelo[3] = ~(Req_MaxVelo[0] + Req_MaxVelo[1] + Req_MaxVelo[2]);
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018ae:	781a      	ldrb	r2, [r3, #0]
 80018b0:	4b21      	ldr	r3, [pc, #132]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	4413      	add	r3, r2
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018ba:	789b      	ldrb	r3, [r3, #2]
 80018bc:	4413      	add	r3, r2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018c6:	70da      	strb	r2, [r3, #3]
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 80018c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018cc:	2204      	movs	r2, #4
 80018ce:	491a      	ldr	r1, [pc, #104]	; (8001938 <_Z15All_mode_UARTUIv+0x7d0>)
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <_Z15All_mode_UARTUIv+0x7b0>)
 80018d2:	f01a faaa 	bl	801be2a <HAL_UART_Transmit>
				}
				break;
 80018d6:	e0a4      	b.n	8001a22 <_Z15All_mode_UARTUIv+0x8ba>
 80018d8:	51eb851f 	.word	0x51eb851f
 80018dc:	40191eb8 	.word	0x40191eb8
 80018e0:	20000792 	.word	0x20000792
 80018e4:	20000770 	.word	0x20000770
 80018e8:	200007d5 	.word	0x200007d5
 80018ec:	200007d4 	.word	0x200007d4
 80018f0:	200007dc 	.word	0x200007dc
 80018f4:	200007dd 	.word	0x200007dd
 80018f8:	200007d8 	.word	0x200007d8
 80018fc:	200007db 	.word	0x200007db
 8001900:	200007b8 	.word	0x200007b8
 8001904:	20000518 	.word	0x20000518
 8001908:	20000144 	.word	0x20000144
 800190c:	200007d6 	.word	0x200007d6
 8001910:	200004fc 	.word	0x200004fc
 8001914:	200001b8 	.word	0x200001b8
 8001918:	200003f4 	.word	0x200003f4
 800191c:	200006e4 	.word	0x200006e4
 8001920:	461c4000 	.word	0x461c4000
 8001924:	20000794 	.word	0x20000794
 8001928:	200001bc 	.word	0x200001bc
 800192c:	200006c8 	.word	0x200006c8
 8001930:	404e0000 	.word	0x404e0000
 8001934:	20000798 	.word	0x20000798
 8001938:	200001c0 	.word	0x200001c0
 800193c:	437f0000 	.word	0x437f0000
		////==============[Enable end effector]================
			case 12: //// 12  10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <_Z15All_mode_UARTUIv+0x8d0>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	4a3d      	ldr	r2, [pc, #244]	; (8001a3c <_Z15All_mode_UARTUIv+0x8d4>)
 8001948:	5cd2      	ldrb	r2, [r2, r3]
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 800194c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <_Z15All_mode_UARTUIv+0x8dc>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	43db      	mvns	r3, r3
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 8001958:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d15f      	bne.n	8001a26 <_Z15All_mode_UARTUIv+0x8be>
					M_state = 12;
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <_Z15All_mode_UARTUIv+0x8e4>)
 8001968:	220c      	movs	r2, #12
 800196a:	701a      	strb	r2, [r3, #0]

					flag_efftDis = 0;
 800196c:	4b38      	ldr	r3, [pc, #224]	; (8001a50 <_Z15All_mode_UARTUIv+0x8e8>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]

					//flag_efftActi = 1;

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					xu_Uart();
 8001972:	f000 f877 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 8001976:	e056      	b.n	8001a26 <_Z15All_mode_UARTUIv+0x8be>
		////==============[Disable end effector]================
			case 13: // 13 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 8001978:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <_Z15All_mode_UARTUIv+0x8d0>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <_Z15All_mode_UARTUIv+0x8d4>)
 8001980:	5cd2      	ldrb	r2, [r2, r3]
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 8001984:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <_Z15All_mode_UARTUIv+0x8dc>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	43db      	mvns	r3, r3
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 8001990:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d145      	bne.n	8001a2a <_Z15All_mode_UARTUIv+0x8c2>
					M_state = 13;
 800199e:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <_Z15All_mode_UARTUIv+0x8e4>)
 80019a0:	220d      	movs	r2, #13
 80019a2:	701a      	strb	r2, [r3, #0]
					//// End Effector Kill
					trig_efftRead = 0;
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <_Z15All_mode_UARTUIv+0x8ec>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <_Z15All_mode_UARTUIv+0x8f0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 0;
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <_Z15All_mode_UARTUIv+0x8f4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
					flag_efftDis = 1;
 80019b6:	4b26      	ldr	r3, [pc, #152]	; (8001a50 <_Z15All_mode_UARTUIv+0x8e8>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 80019bc:	f000 f852 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 80019c0:	e033      	b.n	8001a2a <_Z15All_mode_UARTUIv+0x8c2>
		////==============[Set Home Zero]================
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <_Z15All_mode_UARTUIv+0x8d0>)
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <_Z15All_mode_UARTUIv+0x8d4>)
 80019ca:	5cd2      	ldrb	r2, [r2, r3]
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 80019ce:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <_Z15All_mode_UARTUIv+0x8dc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 80019da:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <_Z15All_mode_UARTUIv+0x8d8>)
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <_Z15All_mode_UARTUIv+0x8e0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d122      	bne.n	8001a2e <_Z15All_mode_UARTUIv+0x8c6>
					M_state = 14;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <_Z15All_mode_UARTUIv+0x8e4>)
 80019ea:	220e      	movs	r2, #14
 80019ec:	701a      	strb	r2, [r3, #0]
					//act as set zero interrupt
//					position_order = 0;
//					positionlog[position_order] = 0.0;
//					Velocity = 7.0;
					grandState = SetZeroBf;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <_Z15All_mode_UARTUIv+0x8f8>)
 80019f0:	2206      	movs	r2, #6
 80019f2:	701a      	strb	r2, [r3, #0]

					xu_Uart();
 80019f4:	f000 f836 	bl	8001a64 <_Z7xu_Uartv>
				}
				break;
 80019f8:	e019      	b.n	8001a2e <_Z15All_mode_UARTUIv+0x8c6>
				break;
 80019fa:	bf00      	nop
 80019fc:	e018      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 80019fe:	bf00      	nop
 8001a00:	e016      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a02:	bf00      	nop
 8001a04:	e014      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a06:	bf00      	nop
 8001a08:	e012      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a0a:	bf00      	nop
 8001a0c:	e010      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a0e:	bf00      	nop
 8001a10:	e00e      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a12:	bf00      	nop
 8001a14:	e00c      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a16:	bf00      	nop
 8001a18:	e00a      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a1a:	bf00      	nop
 8001a1c:	e008      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a1e:	bf00      	nop
 8001a20:	e006      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a22:	bf00      	nop
 8001a24:	e004      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a26:	bf00      	nop
 8001a28:	e002      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a2a:	bf00      	nop
 8001a2c:	e000      	b.n	8001a30 <_Z15All_mode_UARTUIv+0x8c8>
				break;
 8001a2e:	bf00      	nop
			}
}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000792 	.word	0x20000792
 8001a3c:	20000770 	.word	0x20000770
 8001a40:	200007d5 	.word	0x200007d5
 8001a44:	200007d4 	.word	0x200007d4
 8001a48:	200007d6 	.word	0x200007d6
 8001a4c:	200007db 	.word	0x200007db
 8001a50:	200001ac 	.word	0x200001ac
 8001a54:	2000073d 	.word	0x2000073d
 8001a58:	2000073c 	.word	0x2000073c
 8001a5c:	2000073b 	.word	0x2000073b
 8001a60:	200004fc 	.word	0x200004fc

08001a64 <_Z7xu_Uartv>:

void xu_Uart(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 , 200); //Xu
 8001a68:	23c8      	movs	r3, #200	; 0xc8
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4902      	ldr	r1, [pc, #8]	; (8001a78 <_Z7xu_Uartv+0x14>)
 8001a6e:	4803      	ldr	r0, [pc, #12]	; (8001a7c <_Z7xu_Uartv+0x18>)
 8001a70:	f01a f9db 	bl	801be2a <HAL_UART_Transmit>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200001b0 	.word	0x200001b0
 8001a7c:	200003f4 	.word	0x200003f4

08001a80 <_Z7fn_Uartv>:

void fn_Uart(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
 8001a84:	2364      	movs	r3, #100	; 0x64
 8001a86:	2202      	movs	r2, #2
 8001a88:	4902      	ldr	r1, [pc, #8]	; (8001a94 <_Z7fn_Uartv+0x14>)
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <_Z7fn_Uartv+0x18>)
 8001a8c:	f01a f9cd 	bl	801be2a <HAL_UART_Transmit>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200001b4 	.word	0x200001b4
 8001a98:	200003f4 	.word	0x200003f4

08001a9c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fd3c 	bl	8000524 <__aeabi_i2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f7fe fd37 	bl	8000524 <__aeabi_i2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	ec43 2b11 	vmov	d1, r2, r3
 8001abe:	ec45 4b10 	vmov	d0, r4, r5
 8001ac2:	f01b fbdf 	bl	801d284 <pow>
 8001ac6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aca:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001ace:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad2:	eef0 0a67 	vmov.f32	s1, s15
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bdb0      	pop	{r4, r5, r7, pc}

08001adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae0:	b0f2      	sub	sp, #456	; 0x1c8
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001ae4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ae8:	f5a3 72c2 	sub.w	r2, r3, #388	; 0x184
 8001aec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001af6:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 8001afa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001afe:	461a      	mov	r2, r3
 8001b00:	49ed      	ldr	r1, [pc, #948]	; (8001eb8 <main+0x3dc>)
 8001b02:	f002 fd0e 	bl	8004522 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001b06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b0a:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8001b0e:	4beb      	ldr	r3, [pc, #940]	; (8001ebc <main+0x3e0>)
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001b16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 fd1b 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b26:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001b2a:	4be5      	ldr	r3, [pc, #916]	; (8001ec0 <main+0x3e4>)
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b32:	4619      	mov	r1, r3
 8001b34:	f002 fd10 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 ,    1    ,      Dt    ,
 8001b38:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b3c:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f002 fd04 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b50:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b54:	f5a3 72ba 	sub.w	r2, r3, #372	; 0x174
 8001b58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b62:	4619      	mov	r1, r3
 8001b64:	f002 fcf8 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b68:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b6c:	f5a3 72b8 	sub.w	r2, r3, #368	; 0x170
 8001b70:	4bd2      	ldr	r3, [pc, #840]	; (8001ebc <main+0x3e0>)
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f002 fced 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 ,    0    ,      1     ;
 8001b7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b82:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b90:	4619      	mov	r1, r3
 8001b92:	f002 fce1 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b96:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001b9a:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f002 fcd5 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001bae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bb2:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8001bb6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f002 fcc9 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 8001bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fcb8 	bl	8004540 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001bd0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bd4:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001be2:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8001be6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bea:	461a      	mov	r2, r3
 8001bec:	49b5      	ldr	r1, [pc, #724]	; (8001ec4 <main+0x3e8>)
 8001bee:	f002 fd23 	bl	8004638 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001bf2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001bf6:	f5a3 72a6 	sub.w	r2, r3, #332	; 0x14c
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001c04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fd30 	bl	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c10:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c14:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c22:	4619      	mov	r1, r3
 8001c24:	f002 fd24 	bl	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fd12 	bl	8004656 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 8001c32:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c36:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c44:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 8001c48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	499e      	ldr	r1, [pc, #632]	; (8001ec8 <main+0x3ec>)
 8001c50:	f002 fcf2 	bl	8004638 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001c54:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c58:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001c66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fcff 	bl	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c76:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c84:	4619      	mov	r1, r3
 8001c86:	f002 fcf3 	bl	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c8a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fce1 	bl	8004656 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001c94:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c98:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8001c9c:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <main+0x3f0>)
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001ca4:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 8001ca8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cac:	461a      	mov	r2, r3
 8001cae:	4988      	ldr	r1, [pc, #544]	; (8001ed0 <main+0x3f4>)
 8001cb0:	f002 fc37 	bl	8004522 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001cb4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001cb8:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001cc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fc43 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001cd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001cd6:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f002 fc37 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		     0 		 ,    0.000001    ,  		0     ,
 8001cea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001cee:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f002 fc2b 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d02:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d06:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001d0a:	4b70      	ldr	r3, [pc, #448]	; (8001ecc <main+0x3f0>)
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d12:	4619      	mov	r1, r3
 8001d14:	f002 fc20 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d18:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d1c:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f002 fc14 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
			 0 		 ,    		0    ,      0.000001     ;
 8001d30:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001d34:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d42:	4619      	mov	r1, r3
 8001d44:	f002 fc08 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f002 fbfd 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b5a      	ldr	r3, [pc, #360]	; (8001ecc <main+0x3f0>)
 8001d62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	f002 fbf3 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 8001d72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fbe2 	bl	8004540 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d84:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8001d88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4951      	ldr	r1, [pc, #324]	; (8001ed4 <main+0x3f8>)
 8001d90:	f002 fbc7 	bl	8004522 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d9c:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001da0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f002 fbd6 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001db6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f002 fbcb 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dc2:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001dcc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f002 fbc0 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001de2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f002 fbb5 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001df8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f002 fbaa 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e04:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001e0e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f002 fb9f 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001e24:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f002 fb94 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e3a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f002 fb89 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001e46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 fb78 	bl	8004540 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001e50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001e58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001e5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e60:	461a      	mov	r2, r3
 8001e62:	491d      	ldr	r1, [pc, #116]	; (8001ed8 <main+0x3fc>)
 8001e64:	f002 fb5d 	bl	8004522 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e70:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f002 fb6c 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4610      	mov	r0, r2
 8001e92:	f002 fb61 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001e96:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ea0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f002 fb56 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001eb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001eb6:	e011      	b.n	8001edc <main+0x400>
 8001eb8:	200005b8 	.word	0x200005b8
 8001ebc:	3c23d70a 	.word	0x3c23d70a
 8001ec0:	3851b717 	.word	0x3851b717
 8001ec4:	200006a0 	.word	0x200006a0
 8001ec8:	200006ac 	.word	0x200006ac
 8001ecc:	358637bd 	.word	0x358637bd
 8001ed0:	200005dc 	.word	0x200005dc
 8001ed4:	20000600 	.word	0x20000600
 8001ed8:	20000624 	.word	0x20000624
 8001edc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f002 fb38 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ef2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f002 fb2d 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001efe:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f002 fb22 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001f1e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001f22:	4619      	mov	r1, r3
 8001f24:	4610      	mov	r0, r2
 8001f26:	f002 fb17 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f30:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001f34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f002 fb0c 	bl	8004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f44:	4618      	mov	r0, r3
 8001f46:	f002 fafb 	bl	8004540 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10, 0);
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	200a      	movs	r0, #10
 8001f4e:	f7ff fda5 	bl	8001a9c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f52:	ec53 2b10 	vmov	r2, r3, d0
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7fe fe45 	bl	8000be8 <__aeabi_d2f>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f64:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001f68:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	499c      	ldr	r1, [pc, #624]	; (80021e0 <main+0x704>)
 8001f70:	f002 fbee 	bl	8004750 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001f74:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fbf8 	bl	800476e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001f86:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001f8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4994      	ldr	r1, [pc, #592]	; (80021e4 <main+0x708>)
 8001f92:	f002 fbdd 	bl	8004750 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001f96:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fbe7 	bl	800476e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001fa8:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8001fac:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	498d      	ldr	r1, [pc, #564]	; (80021e8 <main+0x70c>)
 8001fb4:	f002 fb40 	bl	8004638 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001fc0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001fc4:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f002 fb50 	bl	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001fda:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f002 fb45 	bl	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001fe6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fb33 	bl	8004656 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001ff0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ff4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001ff8:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001ffc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002000:	461a      	mov	r2, r3
 8002002:	497a      	ldr	r1, [pc, #488]	; (80021ec <main+0x710>)
 8002004:	f002 fbbf 	bl	8004786 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002010:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8002014:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f002 fbce 	bl	80047bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8002020:	4602      	mov	r2, r0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800202a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800202e:	4619      	mov	r1, r3
 8002030:	4610      	mov	r0, r2
 8002032:	f002 fbc3 	bl	80047bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8002036:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800203a:	4618      	mov	r0, r3
 800203c:	f002 fbb2 	bl	80047a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8002040:	4b6b      	ldr	r3, [pc, #428]	; (80021f0 <main+0x714>)
 8002042:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002046:	f507 70ce 	add.w	r0, r7, #412	; 0x19c
 800204a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800204e:	461a      	mov	r2, r3
 8002050:	4968      	ldr	r1, [pc, #416]	; (80021f4 <main+0x718>)
 8002052:	f002 faf1 	bl	8004638 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8002056:	4b68      	ldr	r3, [pc, #416]	; (80021f8 <main+0x71c>)
 8002058:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800205c:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 8002060:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fb02 	bl	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 800206c:	4602      	mov	r2, r0
 800206e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002072:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002076:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800207a:	4619      	mov	r1, r3
 800207c:	4610      	mov	r0, r2
 800207e:	f002 faf7 	bl	8004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8002082:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8002086:	4618      	mov	r0, r3
 8002088:	f002 fae5 	bl	8004656 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800208c:	f014 fbe6 	bl	801685c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002090:	f000 f9a4 	bl	80023dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002094:	f000 fbb4 	bl	8002800 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002098:	f000 fb8a 	bl	80027b0 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 800209c:	f000 fa10 	bl	80024c0 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 80020a0:	f000 fb2e 	bl	8002700 <_ZL13MX_TIM11_Initv>
  MX_TIM4_Init();
 80020a4:	f000 fa74 	bl	8002590 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 80020a8:	f000 fa3e 	bl	8002528 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 80020ac:	f000 fb50 	bl	8002750 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 80020b0:	f000 fafe 	bl	80026b0 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT(&htim10); // milli timer
 80020b4:	4851      	ldr	r0, [pc, #324]	; (80021fc <main+0x720>)
 80020b6:	f018 fef7 	bl	801aea8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 80020ba:	4851      	ldr	r0, [pc, #324]	; (8002200 <main+0x724>)
 80020bc:	f018 fef4 	bl	801aea8 <HAL_TIM_Base_Start_IT>

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 80020c0:	4850      	ldr	r0, [pc, #320]	; (8002204 <main+0x728>)
 80020c2:	f018 fe97 	bl	801adf4 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80020c6:	2100      	movs	r1, #0
 80020c8:	484e      	ldr	r0, [pc, #312]	; (8002204 <main+0x728>)
 80020ca:	f018 ffa9 	bl	801b020 <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 80020ce:	2220      	movs	r2, #32
 80020d0:	494d      	ldr	r1, [pc, #308]	; (8002208 <main+0x72c>)
 80020d2:	484e      	ldr	r0, [pc, #312]	; (800220c <main+0x730>)
 80020d4:	f019 ff3b 	bl	801bf4e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80020d8:	4b4d      	ldr	r3, [pc, #308]	; (8002210 <main+0x734>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <main+0x734>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	f021 0308 	bic.w	r3, r1, #8
 80020e6:	6013      	str	r3, [r2, #0]

    ////// ===== Select DataPosition Dataset =================
    switch(NumPosDataSetx){
 80020e8:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <main+0x738>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	f200 809d 	bhi.w	800222e <main+0x752>
 80020f4:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <main+0x620>)
 80020f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fa:	bf00      	nop
 80020fc:	0800210d 	.word	0x0800210d
 8002100:	0800213f 	.word	0x0800213f
 8002104:	08002171 	.word	0x08002171
 8002108:	080021a3 	.word	0x080021a3

    case 1:
    	for(int t = 0;t <= PosBufSize ;t++){
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002112:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002116:	2b14      	cmp	r3, #20
 8002118:	dc5c      	bgt.n	80021d4 <main+0x6f8>
		PosDataSet[t] = rawPossw_1[t];
 800211a:	4a3f      	ldr	r2, [pc, #252]	; (8002218 <main+0x73c>)
 800211c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	6819      	ldr	r1, [r3, #0]
 8002126:	4a3d      	ldr	r2, [pc, #244]	; (800221c <main+0x740>)
 8002128:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8002132:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002136:	3301      	adds	r3, #1
 8002138:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800213c:	e7e9      	b.n	8002112 <main+0x636>
		} break;

    case 2:
    	for(int t = 0;t <= PosBufSize ;t++){
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002144:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002148:	2b14      	cmp	r3, #20
 800214a:	dc45      	bgt.n	80021d8 <main+0x6fc>
		PosDataSet[t] = rawPossw_2[t];
 800214c:	4a34      	ldr	r2, [pc, #208]	; (8002220 <main+0x744>)
 800214e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	6819      	ldr	r1, [r3, #0]
 8002158:	4a30      	ldr	r2, [pc, #192]	; (800221c <main+0x740>)
 800215a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8002164:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002168:	3301      	adds	r3, #1
 800216a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800216e:	e7e9      	b.n	8002144 <main+0x668>
		} break;

    case 3:
    	for(int t = 0;t <= PosBufSize ;t++){
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002176:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800217a:	2b14      	cmp	r3, #20
 800217c:	dc2e      	bgt.n	80021dc <main+0x700>
    	PosDataSet[t] = rawPossw_3[t];
 800217e:	4a29      	ldr	r2, [pc, #164]	; (8002224 <main+0x748>)
 8002180:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	6819      	ldr	r1, [r3, #0]
 800218a:	4a24      	ldr	r2, [pc, #144]	; (800221c <main+0x740>)
 800218c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	6019      	str	r1, [r3, #0]
    	for(int t = 0;t <= PosBufSize ;t++){
 8002196:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800219a:	3301      	adds	r3, #1
 800219c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021a0:	e7e9      	b.n	8002176 <main+0x69a>
    	} break;

    case 4:
		for(int t = 0;t <= PosBufSize ;t++){
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80021a8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80021ac:	2b14      	cmp	r3, #20
 80021ae:	dc3d      	bgt.n	800222c <main+0x750>
		PosDataSet[t] = rawPossw_4[t];
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <main+0x74c>)
 80021b2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	6819      	ldr	r1, [r3, #0]
 80021bc:	4a17      	ldr	r2, [pc, #92]	; (800221c <main+0x740>)
 80021be:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	6019      	str	r1, [r3, #0]
		for(int t = 0;t <= PosBufSize ;t++){
 80021c8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80021cc:	3301      	adds	r3, #1
 80021ce:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80021d2:	e7e9      	b.n	80021a8 <main+0x6cc>
		} break;
 80021d4:	bf00      	nop
 80021d6:	e02a      	b.n	800222e <main+0x752>
		} break;
 80021d8:	bf00      	nop
 80021da:	e028      	b.n	800222e <main+0x752>
    	} break;
 80021dc:	bf00      	nop
 80021de:	e026      	b.n	800222e <main+0x752>
 80021e0:	2000064c 	.word	0x2000064c
 80021e4:	20000650 	.word	0x20000650
 80021e8:	200006b8 	.word	0x200006b8
 80021ec:	20000664 	.word	0x20000664
 80021f0:	3851b717 	.word	0x3851b717
 80021f4:	20000670 	.word	0x20000670
 80021f8:	3c23d70a 	.word	0x3c23d70a
 80021fc:	20000364 	.word	0x20000364
 8002200:	200003ac 	.word	0x200003ac
 8002204:	2000031c 	.word	0x2000031c
 8002208:	20000750 	.word	0x20000750
 800220c:	200003f4 	.word	0x200003f4
 8002210:	20000438 	.word	0x20000438
 8002214:	20000000 	.word	0x20000000
 8002218:	20000004 	.word	0x20000004
 800221c:	20000518 	.word	0x20000518
 8002220:	20000054 	.word	0x20000054
 8002224:	200000a4 	.word	0x200000a4
 8002228:	200000f4 	.word	0x200000f4
		} break;
 800222c:	bf00      	nop
    }

    PosoffsetMon = 0 + POSOFFSET; // for send to cubeMon
 800222e:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <main+0x8c8>)
 8002230:	f240 337f 	movw	r3, #895	; 0x37f
 8002234:	6013      	str	r3, [r2, #0]
    ////============position buffer Set Default===================
    //for(int f = 0; f <= PosBufSize; f++){
    //		positionlog[f] = -1.0;
    //	}
    //MCP23017 setting init
    HAL_Delay(50);
 8002236:	2032      	movs	r0, #50	; 0x32
 8002238:	f014 fb82 	bl	8016940 <HAL_Delay>
    IOExpenderInit();
 800223c:	f001 ff2c 	bl	8004098 <_Z14IOExpenderInitv>
	      ///// IT test
	 //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	  	  ///// GrandState ///////////////////

	  	  if(micros() - TimeStampGrand >= 1000){
 8002240:	f002 f898 	bl	8004374 <_Z6microsv>
 8002244:	4b58      	ldr	r3, [pc, #352]	; (80023a8 <main+0x8cc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
 800224c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	ebb0 0803 	subs.w	r8, r0, r3
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	eb61 0903 	sbc.w	r9, r1, r3
 800225a:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 800225e:	f179 0300 	sbcs.w	r3, r9, #0
 8002262:	bf2c      	ite	cs
 8002264:	2301      	movcs	r3, #1
 8002266:	2300      	movcc	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <main+0x7a2>
	  		TimeStampGrand = micros();
 800226e:	f002 f881 	bl	8004374 <_Z6microsv>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <main+0x8cc>)
 8002278:	601a      	str	r2, [r3, #0]
	  		GrandStatumix();
 800227a:	f000 fbad 	bl	80029d8 <_Z13GrandStatumixv>
	  		//CurrentEn = BinPosXI * 0.006136;
	  	  }

	  	  // Encoder I2CRead

	  	  if (micros()-timeStampSR >= 10000)      // don't use 1
 800227e:	f002 f879 	bl	8004374 <_Z6microsv>
 8002282:	4b4a      	ldr	r3, [pc, #296]	; (80023ac <main+0x8d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	627a      	str	r2, [r7, #36]	; 0x24
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	1ac3      	subs	r3, r0, r3
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	eb61 0303 	sbc.w	r3, r1, r3
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	f242 7310 	movw	r3, #10000	; 0x2710
 800229e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022a2:	4602      	mov	r2, r0
 80022a4:	429a      	cmp	r2, r3
 80022a6:	460b      	mov	r3, r1
 80022a8:	f173 0300 	sbcs.w	r3, r3, #0
 80022ac:	bf2c      	ite	cs
 80022ae:	2301      	movcs	r3, #1
 80022b0:	2300      	movcc	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <main+0x7ee>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 80022b8:	f002 f85c 	bl	8004374 <_Z6microsv>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <main+0x8d0>)
 80022c2:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 80022c4:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <main+0x8d4>)
 80022c6:	2301      	movs	r3, #1
 80022c8:	7013      	strb	r3, [r2, #0]
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 80022ca:	483a      	ldr	r0, [pc, #232]	; (80023b4 <main+0x8d8>)
 80022cc:	f001 fefa 	bl	80040c4 <_Z14AbsEncI2CReadxPh>
	  	  //Unwrapping();
	  	  //Kalmanfilter();

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 80022d0:	f002 f850 	bl	8004374 <_Z6microsv>
 80022d4:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <main+0x8dc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2200      	movs	r2, #0
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	61fa      	str	r2, [r7, #28]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	ebb0 0a03 	subs.w	sl, r0, r3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	eb61 0b03 	sbc.w	fp, r1, r3
 80022ea:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 80022ee:	f17b 0300 	sbcs.w	r3, fp, #0
 80022f2:	bf2c      	ite	cs
 80022f4:	2301      	movcs	r3, #1
 80022f6:	2300      	movcc	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d01a      	beq.n	8002334 <main+0x858>
	  		  	  timestampPWM = micros(); // stamp
 80022fe:	f002 f839 	bl	8004374 <_Z6microsv>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <main+0x8dc>)
 8002308:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <main+0x8e0>)
 800230c:	8819      	ldrh	r1, [r3, #0]
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <main+0x8e4>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	460b      	mov	r3, r1
 8002314:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;

	  	  		///// Mot Driver ///// 0 => CCW /// 1 => CW
	  	  		if (mot_dirctn == 0){
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <main+0x8e8>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <main+0x84e>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 800231e:	2201      	movs	r2, #1
 8002320:	2104      	movs	r1, #4
 8002322:	4829      	ldr	r0, [pc, #164]	; (80023c8 <main+0x8ec>)
 8002324:	f015 f9ee 	bl	8017704 <HAL_GPIO_WritePin>
 8002328:	e004      	b.n	8002334 <main+0x858>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	2104      	movs	r1, #4
 800232e:	4826      	ldr	r0, [pc, #152]	; (80023c8 <main+0x8ec>)
 8002330:	f015 f9e8 	bl	8017704 <HAL_GPIO_WritePin>
				controlloop();
			 }
	  	    */

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8002334:	f001 ff1a 	bl	800416c <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 8002338:	4824      	ldr	r0, [pc, #144]	; (80023cc <main+0x8f0>)
 800233a:	f001 ff6f 	bl	800421c <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state

	  	 if(trig_efftRead != 0 && millis() - timestamp_efft >= 500){
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <main+0x8f4>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d014      	beq.n	8002370 <main+0x894>
 8002346:	f002 f82f 	bl	80043a8 <_Z6millisv>
 800234a:	4603      	mov	r3, r0
 800234c:	2200      	movs	r2, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	617a      	str	r2, [r7, #20]
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <main+0x8f8>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	6939      	ldr	r1, [r7, #16]
 800235a:	1a8c      	subs	r4, r1, r2
 800235c:	6979      	ldr	r1, [r7, #20]
 800235e:	eb61 0503 	sbc.w	r5, r1, r3
 8002362:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8002366:	f175 0300 	sbcs.w	r3, r5, #0
 800236a:	d301      	bcc.n	8002370 <main+0x894>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <main+0x896>
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	f43f af64 	beq.w	8002240 <main+0x764>
	  		 timestamp_efft = millis();
 8002378:	f002 f816 	bl	80043a8 <_Z6millisv>
 800237c:	4603      	mov	r3, r0
 800237e:	2200      	movs	r2, #0
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <main+0x8f8>)
 8002386:	e9d7 1200 	ldrd	r1, r2, [r7]
 800238a:	e9c3 1200 	strd	r1, r2, [r3]
	  		 flag_efftRead = 1;
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <main+0x8fc>)
 8002390:	2301      	movs	r3, #1
 8002392:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <main+0x8f4>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	4a0c      	ldr	r2, [pc, #48]	; (80023d0 <main+0x8f4>)
 800239e:	7013      	strb	r3, [r2, #0]
	  	  if(micros() - TimeStampGrand >= 1000){
 80023a0:	e74e      	b.n	8002240 <main+0x764>
 80023a2:	bf00      	nop
 80023a4:	200004f8 	.word	0x200004f8
 80023a8:	20000500 	.word	0x20000500
 80023ac:	20000568 	.word	0x20000568
 80023b0:	20000572 	.word	0x20000572
 80023b4:	2000056c 	.word	0x2000056c
 80023b8:	20000578 	.word	0x20000578
 80023bc:	20000574 	.word	0x20000574
 80023c0:	2000031c 	.word	0x2000031c
 80023c4:	2000057c 	.word	0x2000057c
 80023c8:	40020400 	.word	0x40020400
 80023cc:	2000073a 	.word	0x2000073a
 80023d0:	2000073d 	.word	0x2000073d
 80023d4:	20000740 	.word	0x20000740
 80023d8:	2000073c 	.word	0x2000073c

080023dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b094      	sub	sp, #80	; 0x50
 80023e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	2230      	movs	r2, #48	; 0x30
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f01b feee 	bl	801e1cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <_Z18SystemClock_Configv+0xdc>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <_Z18SystemClock_Configv+0xdc>)
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240e:	6413      	str	r3, [r2, #64]	; 0x40
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <_Z18SystemClock_Configv+0xdc>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	4b26      	ldr	r3, [pc, #152]	; (80024bc <_Z18SystemClock_Configv+0xe0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a25      	ldr	r2, [pc, #148]	; (80024bc <_Z18SystemClock_Configv+0xe0>)
 8002426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b23      	ldr	r3, [pc, #140]	; (80024bc <_Z18SystemClock_Configv+0xe0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002438:	2302      	movs	r3, #2
 800243a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800243c:	2301      	movs	r3, #1
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002440:	2310      	movs	r3, #16
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002444:	2302      	movs	r3, #2
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002448:	2300      	movs	r3, #0
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800244c:	2308      	movs	r3, #8
 800244e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002450:	2364      	movs	r3, #100	; 0x64
 8002452:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002454:	2302      	movs	r3, #2
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002458:	2304      	movs	r3, #4
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	4618      	mov	r0, r3
 8002462:	f017 ffdf 	bl	801a424 <HAL_RCC_OscConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf14      	ite	ne
 800246c:	2301      	movne	r3, #1
 800246e:	2300      	moveq	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002476:	f001 ffcd 	bl	8004414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800247a:	230f      	movs	r3, #15
 800247c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800247e:	2302      	movs	r3, #2
 8002480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002490:	f107 030c 	add.w	r3, r7, #12
 8002494:	2103      	movs	r1, #3
 8002496:	4618      	mov	r0, r3
 8002498:	f018 fa3c 	bl	801a914 <HAL_RCC_ClockConfig>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf14      	ite	ne
 80024a2:	2301      	movne	r3, #1
 80024a4:	2300      	moveq	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80024ac:	f001 ffb2 	bl	8004414 <Error_Handler>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3750      	adds	r7, #80	; 0x50
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40007000 	.word	0x40007000

080024c0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024c6:	4a16      	ldr	r2, [pc, #88]	; (8002520 <_ZL12MX_I2C1_Initv+0x60>)
 80024c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <_ZL12MX_I2C1_Initv+0x64>)
 80024ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024fc:	4807      	ldr	r0, [pc, #28]	; (800251c <_ZL12MX_I2C1_Initv+0x5c>)
 80024fe:	f015 f933 	bl	8017768 <HAL_I2C_Init>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf14      	ite	ne
 8002508:	2301      	movne	r3, #1
 800250a:	2300      	moveq	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002512:	f001 ff7f 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000274 	.word	0x20000274
 8002520:	40005400 	.word	0x40005400
 8002524:	00061a80 	.word	0x00061a80

08002528 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <_ZL12MX_I2C3_Initv+0x60>)
 8002530:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 8002534:	4a15      	ldr	r2, [pc, #84]	; (800258c <_ZL12MX_I2C3_Initv+0x64>)
 8002536:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 8002546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800254a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002564:	4807      	ldr	r0, [pc, #28]	; (8002584 <_ZL12MX_I2C3_Initv+0x5c>)
 8002566:	f015 f8ff 	bl	8017768 <HAL_I2C_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800257a:	f001 ff4b 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200002c8 	.word	0x200002c8
 8002588:	40005c00 	.word	0x40005c00
 800258c:	00061a80 	.word	0x00061a80

08002590 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	; 0x38
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	f107 0320 	add.w	r3, r7, #32
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	615a      	str	r2, [r3, #20]
 80025be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 80025c2:	4a3a      	ldr	r2, [pc, #232]	; (80026ac <_ZL12MX_TIM4_Initv+0x11c>)
 80025c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80025d2:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 80025d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80025d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025da:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 80025dc:	2200      	movs	r2, #0
 80025de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e0:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025e6:	4830      	ldr	r0, [pc, #192]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 80025e8:	f018 fbb4 	bl	801ad54 <HAL_TIM_Base_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 80025fc:	f001 ff0a 	bl	8004414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800260a:	4619      	mov	r1, r3
 800260c:	4826      	ldr	r0, [pc, #152]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 800260e:	f018 ff81 	bl	801b514 <HAL_TIM_ConfigClockSource>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8002622:	f001 fef7 	bl	8004414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002626:	4820      	ldr	r0, [pc, #128]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 8002628:	f018 fca0 	bl	801af6c <HAL_TIM_PWM_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 800263c:	f001 feea 	bl	8004414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002648:	f107 0320 	add.w	r3, r7, #32
 800264c:	4619      	mov	r1, r3
 800264e:	4816      	ldr	r0, [pc, #88]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 8002650:	f019 fb1c 	bl	801bc8c <HAL_TIMEx_MasterConfigSynchronization>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8002664:	f001 fed6 	bl	8004414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002668:	2360      	movs	r3, #96	; 0x60
 800266a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2200      	movs	r2, #0
 800267c:	4619      	mov	r1, r3
 800267e:	480a      	ldr	r0, [pc, #40]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 8002680:	f018 fe86 	bl	801b390 <HAL_TIM_PWM_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8002694:	f001 febe 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002698:	4803      	ldr	r0, [pc, #12]	; (80026a8 <_ZL12MX_TIM4_Initv+0x118>)
 800269a:	f013 fe53 	bl	8016344 <HAL_TIM_MspPostInit>

}
 800269e:	bf00      	nop
 80026a0:	3738      	adds	r7, #56	; 0x38
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000031c 	.word	0x2000031c
 80026ac:	40000800 	.word	0x40000800

080026b0 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_ZL13MX_TIM10_Initv+0x48>)
 80026b6:	4a11      	ldr	r2, [pc, #68]	; (80026fc <_ZL13MX_TIM10_Initv+0x4c>)
 80026b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <_ZL13MX_TIM10_Initv+0x48>)
 80026bc:	2263      	movs	r2, #99	; 0x63
 80026be:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <_ZL13MX_TIM10_Initv+0x48>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <_ZL13MX_TIM10_Initv+0x48>)
 80026c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026cc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <_ZL13MX_TIM10_Initv+0x48>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <_ZL13MX_TIM10_Initv+0x48>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026da:	4807      	ldr	r0, [pc, #28]	; (80026f8 <_ZL13MX_TIM10_Initv+0x48>)
 80026dc:	f018 fb3a 	bl	801ad54 <HAL_TIM_Base_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 80026f0:	f001 fe90 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000364 	.word	0x20000364
 80026fc:	40014400 	.word	0x40014400

08002700 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <_ZL13MX_TIM11_Initv+0x48>)
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <_ZL13MX_TIM11_Initv+0x4c>)
 8002708:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <_ZL13MX_TIM11_Initv+0x48>)
 800270c:	2263      	movs	r2, #99	; 0x63
 800270e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <_ZL13MX_TIM11_Initv+0x48>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <_ZL13MX_TIM11_Initv+0x48>)
 8002718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <_ZL13MX_TIM11_Initv+0x48>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <_ZL13MX_TIM11_Initv+0x48>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800272a:	4807      	ldr	r0, [pc, #28]	; (8002748 <_ZL13MX_TIM11_Initv+0x48>)
 800272c:	f018 fb12 	bl	801ad54 <HAL_TIM_Base_Init>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002740:	f001 fe68 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200003ac 	.word	0x200003ac
 800274c:	40014800 	.word	0x40014800

08002750 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002756:	4a15      	ldr	r2, [pc, #84]	; (80027ac <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 800275c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002768:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 800276c:	2200      	movs	r2, #0
 800276e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 800277a:	220c      	movs	r2, #12
 800277c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800278a:	4807      	ldr	r0, [pc, #28]	; (80027a8 <_ZL19MX_USART2_UART_Initv+0x58>)
 800278c:	f019 fb00 	bl	801bd90 <HAL_UART_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf14      	ite	ne
 8002796:	2301      	movne	r3, #1
 8002798:	2300      	moveq	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 80027a0:	f001 fe38 	bl	8004414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200003f4 	.word	0x200003f4
 80027ac:	40004400 	.word	0x40004400

080027b0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <_ZL11MX_DMA_Initv+0x4c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <_ZL11MX_DMA_Initv+0x4c>)
 80027c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <_ZL11MX_DMA_Initv+0x4c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2011      	movs	r0, #17
 80027d8:	f014 f9b1 	bl	8016b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027dc:	2011      	movs	r0, #17
 80027de:	f014 f9ca 	bl	8016b76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2100      	movs	r1, #0
 80027e6:	202f      	movs	r0, #47	; 0x2f
 80027e8:	f014 f9a9 	bl	8016b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80027ec:	202f      	movs	r0, #47	; 0x2f
 80027ee:	f014 f9c2 	bl	8016b76 <HAL_NVIC_EnableIRQ>

}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800

08002800 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b69      	ldr	r3, [pc, #420]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a68      	ldr	r2, [pc, #416]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a61      	ldr	r2, [pc, #388]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 800283c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b5f      	ldr	r3, [pc, #380]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a5a      	ldr	r2, [pc, #360]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b58      	ldr	r3, [pc, #352]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	4b54      	ldr	r3, [pc, #336]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a53      	ldr	r2, [pc, #332]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <_ZL12MX_GPIO_Initv+0x1c0>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2120      	movs	r1, #32
 80028a6:	4847      	ldr	r0, [pc, #284]	; (80029c4 <_ZL12MX_GPIO_Initv+0x1c4>)
 80028a8:	f014 ff2c 	bl	8017704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	f24e 0104 	movw	r1, #57348	; 0xe004
 80028b2:	4845      	ldr	r0, [pc, #276]	; (80029c8 <_ZL12MX_GPIO_Initv+0x1c8>)
 80028b4:	f014 ff26 	bl	8017704 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 80028b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80028bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80028c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	483f      	ldr	r0, [pc, #252]	; (80029cc <_ZL12MX_GPIO_Initv+0x1cc>)
 80028d0:	f014 fd7c 	bl	80173cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM2_CH1_VINCp_Pin */
  GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 80028d4:	2301      	movs	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028e4:	2301      	movs	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4835      	ldr	r0, [pc, #212]	; (80029c4 <_ZL12MX_GPIO_Initv+0x1c4>)
 80028f0:	f014 fd6c 	bl	80173cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80028f4:	2320      	movs	r3, #32
 80028f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	482e      	ldr	r0, [pc, #184]	; (80029c4 <_ZL12MX_GPIO_Initv+0x1c4>)
 800290c:	f014 fd5e 	bl	80173cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8002910:	2302      	movs	r3, #2
 8002912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002914:	2300      	movs	r3, #0
 8002916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	4829      	ldr	r0, [pc, #164]	; (80029c8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8002924:	f014 fd52 	bl	80173cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8002928:	f24e 0304 	movw	r3, #57348	; 0xe004
 800292c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	4821      	ldr	r0, [pc, #132]	; (80029c8 <_ZL12MX_GPIO_Initv+0x1c8>)
 8002942:	f014 fd43 	bl	80173cc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 8002946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800294a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800294c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	481b      	ldr	r0, [pc, #108]	; (80029cc <_ZL12MX_GPIO_Initv+0x1cc>)
 800295e:	f014 fd35 	bl	80173cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8002962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	4815      	ldr	r0, [pc, #84]	; (80029cc <_ZL12MX_GPIO_Initv+0x1cc>)
 8002978:	f014 fd28 	bl	80173cc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 800297c:	2304      	movs	r3, #4
 800297e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002980:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	480f      	ldr	r0, [pc, #60]	; (80029d0 <_ZL12MX_GPIO_Initv+0x1d0>)
 8002992:	f014 fd1b 	bl	80173cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2008      	movs	r0, #8
 800299c:	f014 f8cf 	bl	8016b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029a0:	2008      	movs	r0, #8
 80029a2:	f014 f8e8 	bl	8016b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2028      	movs	r0, #40	; 0x28
 80029ac:	f014 f8c7 	bl	8016b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029b0:	2028      	movs	r0, #40	; 0x28
 80029b2:	f014 f8e0 	bl	8016b76 <HAL_NVIC_EnableIRQ>

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40020800 	.word	0x40020800
 80029d0:	40020c00 	.word	0x40020c00
 80029d4:	00000000 	.word	0x00000000

080029d8 <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================

void GrandStatumix(){
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80029dc:	4ba0      	ldr	r3, [pc, #640]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80029e4:	2200      	movs	r2, #0
 80029e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ea:	489e      	ldr	r0, [pc, #632]	; (8002c64 <_Z13GrandStatumixv+0x28c>)
 80029ec:	f014 fe8a 	bl	8017704 <HAL_GPIO_WritePin>
	}
	if (grandState != work || grandState != SetZeroBf || grandState != SetZeroGr){
 80029f0:	4b9b      	ldr	r3, [pc, #620]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d107      	bne.n	8002a08 <_Z13GrandStatumixv+0x30>
 80029f8:	4b99      	ldr	r3, [pc, #612]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b06      	cmp	r3, #6
 80029fe:	d103      	bne.n	8002a08 <_Z13GrandStatumixv+0x30>
 8002a00:	4b97      	ldr	r3, [pc, #604]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d005      	beq.n	8002a14 <_Z13GrandStatumixv+0x3c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a0e:	4895      	ldr	r0, [pc, #596]	; (8002c64 <_Z13GrandStatumixv+0x28c>)
 8002a10:	f014 fe78 	bl	8017704 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 8002a14:	4b92      	ldr	r3, [pc, #584]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d103      	bne.n	8002a24 <_Z13GrandStatumixv+0x4c>
 8002a1c:	4b90      	ldr	r3, [pc, #576]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d005      	beq.n	8002a30 <_Z13GrandStatumixv+0x58>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002a24:	2200      	movs	r2, #0
 8002a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2a:	488e      	ldr	r0, [pc, #568]	; (8002c64 <_Z13GrandStatumixv+0x28c>)
 8002a2c:	f014 fe6a 	bl	8017704 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8002a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a34:	488c      	ldr	r0, [pc, #560]	; (8002c68 <_Z13GrandStatumixv+0x290>)
 8002a36:	f014 fe4d 	bl	80176d4 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b8b      	ldr	r3, [pc, #556]	; (8002c6c <_Z13GrandStatumixv+0x294>)
 8002a40:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002a42:	2102      	movs	r1, #2
 8002a44:	4887      	ldr	r0, [pc, #540]	; (8002c64 <_Z13GrandStatumixv+0x28c>)
 8002a46:	f014 fe45 	bl	80176d4 <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <_Z13GrandStatumixv+0x298>)
 8002a50:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 8002a52:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d80f      	bhi.n	8002a7c <_Z13GrandStatumixv+0xa4>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <_Z13GrandStatumixv+0x8c>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002ab1 	.word	0x08002ab1
 8002a68:	08002d1d 	.word	0x08002d1d
 8002a6c:	08002db3 	.word	0x08002db3
 8002a70:	08002d6d 	.word	0x08002d6d
 8002a74:	08002c8d 	.word	0x08002c8d
 8002a78:	08002af7 	.word	0x08002af7
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a82:	4878      	ldr	r0, [pc, #480]	; (8002c64 <_Z13GrandStatumixv+0x28c>)
 8002a84:	f014 fe3e 	bl	8017704 <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 8002a88:	f000 fe7a 	bl	8003780 <_Z10Unwrappingv>
		Kalmanfilter();
 8002a8c:	f000 ff30 	bl	80038f0 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 8002a90:	4b77      	ldr	r3, [pc, #476]	; (8002c70 <_Z13GrandStatumixv+0x298>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <_Z13GrandStatumixv+0xc6>
 8002a98:	4b71      	ldr	r3, [pc, #452]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8002a9e:	4b73      	ldr	r3, [pc, #460]	; (8002c6c <_Z13GrandStatumixv+0x294>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 8194 	bne.w	8002dd0 <_Z13GrandStatumixv+0x3f8>
 8002aa8:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
		/// [From UART] run when get {HOME} , {RUN}
		//if (bluecounter != 0){grandState = work;} // can go work from ready only
	break;
 8002aae:	e18f      	b.n	8002dd0 <_Z13GrandStatumixv+0x3f8>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ab6:	486b      	ldr	r0, [pc, #428]	; (8002c64 <_Z13GrandStatumixv+0x28c>)
 8002ab8:	f014 fe24 	bl	8017704 <HAL_GPIO_WritePin>
		LaserTrajex_workflow();
 8002abc:	f000 f9b4 	bl	8002e28 <_Z20LaserTrajex_workflowv>

		if (pwr_sense == 1){
 8002ac0:	4b6b      	ldr	r3, [pc, #428]	; (8002c70 <_Z13GrandStatumixv+0x298>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <_Z13GrandStatumixv+0xfe>
			grandState = emer;
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002aca:	2203      	movs	r2, #3
 8002acc:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 8002ace:	4b69      	ldr	r3, [pc, #420]	; (8002c74 <_Z13GrandStatumixv+0x29c>)
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 8002ad6:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <_Z13GrandStatumixv+0x294>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 817a 	bne.w	8002dd4 <_Z13GrandStatumixv+0x3fc>
			PWMOut = 0;
 8002ae0:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002ae8:	2204      	movs	r2, #4
 8002aea:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 8002aec:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <_Z13GrandStatumixv+0x29c>)
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
		}
	break;
 8002af4:	e16e      	b.n	8002dd4 <_Z13GrandStatumixv+0x3fc>

	case SetZeroBf:
		static uint8_t counter_Z = 0;
		//// Cat cat set zero
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002af6:	2201      	movs	r2, #1
 8002af8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002afc:	4859      	ldr	r0, [pc, #356]	; (8002c64 <_Z13GrandStatumixv+0x28c>)
 8002afe:	f014 fe01 	bl	8017704 <HAL_GPIO_WritePin>

		//PWMOut = 2500;
		//mot_dirctn = 0;
		Unwrapping();
 8002b02:	f000 fe3d 	bl	8003780 <_Z10Unwrappingv>
		Kalmanfilter();
 8002b06:	f000 fef3 	bl	80038f0 <_Z12Kalmanfilterv>

		if(KalP >= 2.00){
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <_Z13GrandStatumixv+0x2a4>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	db07      	blt.n	8002b2e <_Z13GrandStatumixv+0x156>
			PWMOut = 4800;
 8002b1e:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002b20:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002b24:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <_Z13GrandStatumixv+0x2a8>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e072      	b.n	8002c14 <_Z13GrandStatumixv+0x23c>
		}else if (2.00 >= KalP && KalP >= 1.00) {
 8002b2e:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <_Z13GrandStatumixv+0x2a4>)
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b40:	d811      	bhi.n	8002b66 <_Z13GrandStatumixv+0x18e>
 8002b42:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <_Z13GrandStatumixv+0x2a4>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	db07      	blt.n	8002b66 <_Z13GrandStatumixv+0x18e>
					PWMOut = 2400;
 8002b56:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002b58:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002b5c:	801a      	strh	r2, [r3, #0]
					mot_dirctn = 0;
 8002b5e:	4b48      	ldr	r3, [pc, #288]	; (8002c80 <_Z13GrandStatumixv+0x2a8>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e056      	b.n	8002c14 <_Z13GrandStatumixv+0x23c>
		}else if (1.00 >= KalP && KalP >= 0.2) {
 8002b66:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <_Z13GrandStatumixv+0x2a4>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	d814      	bhi.n	8002ba4 <_Z13GrandStatumixv+0x1cc>
 8002b7a:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <_Z13GrandStatumixv+0x2a4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fce2 	bl	8000548 <__aeabi_f2d>
 8002b84:	a332      	add	r3, pc, #200	; (adr r3, 8002c50 <_Z13GrandStatumixv+0x278>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd ffbb 	bl	8000b04 <__aeabi_dcmpge>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <_Z13GrandStatumixv+0x1cc>
			PWMOut = 1200;
 8002b94:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002b96:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002b9a:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002b9c:	4b38      	ldr	r3, [pc, #224]	; (8002c80 <_Z13GrandStatumixv+0x2a8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e037      	b.n	8002c14 <_Z13GrandStatumixv+0x23c>
		}else if (0.2 >= KalP && KalP >= 0.006) {
 8002ba4:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <_Z13GrandStatumixv+0x2a4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fccd 	bl	8000548 <__aeabi_f2d>
 8002bae:	a328      	add	r3, pc, #160	; (adr r3, 8002c50 <_Z13GrandStatumixv+0x278>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd ff9c 	bl	8000af0 <__aeabi_dcmple>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <_Z13GrandStatumixv+0x210>
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <_Z13GrandStatumixv+0x2a4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fcc0 	bl	8000548 <__aeabi_f2d>
 8002bc8:	a323      	add	r3, pc, #140	; (adr r3, 8002c58 <_Z13GrandStatumixv+0x280>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd ff99 	bl	8000b04 <__aeabi_dcmpge>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d007      	beq.n	8002be8 <_Z13GrandStatumixv+0x210>
			PWMOut = 950;
 8002bd8:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002bda:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002bde:	801a      	strh	r2, [r3, #0]
			mot_dirctn = 0;
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <_Z13GrandStatumixv+0x2a8>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	e015      	b.n	8002c14 <_Z13GrandStatumixv+0x23c>
		}else if (1000 <= BinPosXI && BinPosXI <= 1023) {
 8002be8:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <_Z13GrandStatumixv+0x2ac>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf0:	d30c      	bcc.n	8002c0c <_Z13GrandStatumixv+0x234>
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <_Z13GrandStatumixv+0x2ac>)
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfa:	d207      	bcs.n	8002c0c <_Z13GrandStatumixv+0x234>
				PWMOut = 950;
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002bfe:	f240 32b6 	movw	r2, #950	; 0x3b6
 8002c02:	801a      	strh	r2, [r3, #0]
				mot_dirctn = 1;
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <_Z13GrandStatumixv+0x2a8>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e003      	b.n	8002c14 <_Z13GrandStatumixv+0x23c>
			}
		else{PWMOut = PWMOut;}
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002c0e:	881a      	ldrh	r2, [r3, #0]
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002c12:	801a      	strh	r2, [r3, #0]

		if(BinPosXI == 0){
 8002c14:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <_Z13GrandStatumixv+0x2ac>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d108      	bne.n	8002c2e <_Z13GrandStatumixv+0x256>
			PWMOut = 0;
 8002c1c:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	801a      	strh	r2, [r3, #0]
			counter_Z++;
 8002c22:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <_Z13GrandStatumixv+0x2b0>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <_Z13GrandStatumixv+0x2b0>)
 8002c2c:	701a      	strb	r2, [r3, #0]
		}
		if(counter_Z >= 100){
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <_Z13GrandStatumixv+0x2b0>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b63      	cmp	r3, #99	; 0x63
 8002c34:	f240 80d0 	bls.w	8002dd8 <_Z13GrandStatumixv+0x400>
			counter_Z = 0;
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <_Z13GrandStatumixv+0x2b0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
			PWMOut = 0;
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <_Z13GrandStatumixv+0x2a0>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	801a      	strh	r2, [r3, #0]
			fn_Uart();
 8002c44:	f7fe ff1c 	bl	8001a80 <_Z7fn_Uartv>
			grandState = Ready;
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <_Z13GrandStatumixv+0x288>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;
//		}
		break;
 8002c4e:	e0c3      	b.n	8002dd8 <_Z13GrandStatumixv+0x400>
 8002c50:	9999999a 	.word	0x9999999a
 8002c54:	3fc99999 	.word	0x3fc99999
 8002c58:	bc6a7efa 	.word	0xbc6a7efa
 8002c5c:	3f789374 	.word	0x3f789374
 8002c60:	200004fc 	.word	0x200004fc
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	200004fe 	.word	0x200004fe
 8002c70:	200004fd 	.word	0x200004fd
 8002c74:	20000730 	.word	0x20000730
 8002c78:	20000574 	.word	0x20000574
 8002c7c:	200006c4 	.word	0x200006c4
 8002c80:	2000057c 	.word	0x2000057c
 8002c84:	20000570 	.word	0x20000570
 8002c88:	200007e4 	.word	0x200007e4

	case SetZeroGr:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c92:	4857      	ldr	r0, [pc, #348]	; (8002df0 <_Z13GrandStatumixv+0x418>)
 8002c94:	f014 fd36 	bl	8017704 <HAL_GPIO_WritePin>

			////////>>>SetZeroStp/////////////////
		Unwrapping();
 8002c98:	f000 fd72 	bl	8003780 <_Z10Unwrappingv>

		 if(flagNewpos==0){
 8002c9c:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <_Z13GrandStatumixv+0x41c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d111      	bne.n	8002cc8 <_Z13GrandStatumixv+0x2f0>
			Currentpos = CurrentEn;
 8002ca4:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <_Z13GrandStatumixv+0x420>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a54      	ldr	r2, [pc, #336]	; (8002dfc <_Z13GrandStatumixv+0x424>)
 8002caa:	6013      	str	r3, [r2, #0]
			Distance = Finalposition - Currentpos;
 8002cac:	4b54      	ldr	r3, [pc, #336]	; (8002e00 <_Z13GrandStatumixv+0x428>)
 8002cae:	ed93 7a00 	vldr	s14, [r3]
 8002cb2:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <_Z13GrandStatumixv+0x424>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cbc:	4b51      	ldr	r3, [pc, #324]	; (8002e04 <_Z13GrandStatumixv+0x42c>)
 8002cbe:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002cc2:	4b4c      	ldr	r3, [pc, #304]	; (8002df4 <_Z13GrandStatumixv+0x41c>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
		 }
		Trajectory();
 8002cc8:	f000 f9f6 	bl	80030b8 <_Z10Trajectoryv>
		Kalmanfilter();
 8002ccc:	f000 fe10 	bl	80038f0 <_Z12Kalmanfilterv>
		controlloop();
 8002cd0:	f001 f86a 	bl	8003da8 <_Z11controlloopv>

		//// <> Zero finish
		if (flag_finishTra == 1){
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <_Z13GrandStatumixv+0x430>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d109      	bne.n	8002cf0 <_Z13GrandStatumixv+0x318>
			flag_finishTra = 0;
 8002cdc:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <_Z13GrandStatumixv+0x430>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
			fn_Uart();
 8002ce2:	f7fe fecd 	bl	8001a80 <_Z7fn_Uartv>
			grandState = Ready;
 8002ce6:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <_Z13GrandStatumixv+0x434>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
			ResetParam();
 8002cec:	f000 f99a 	bl	8003024 <_Z10ResetParamv>
		}
		////////<<<SetZeroStp/////////////////
//		}

		if (pwr_sense == 1){grandState = emer;}
 8002cf0:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <_Z13GrandStatumixv+0x438>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <_Z13GrandStatumixv+0x326>
 8002cf8:	4b44      	ldr	r3, [pc, #272]	; (8002e0c <_Z13GrandStatumixv+0x434>)
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){
 8002cfe:	4b45      	ldr	r3, [pc, #276]	; (8002e14 <_Z13GrandStatumixv+0x43c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d16a      	bne.n	8002ddc <_Z13GrandStatumixv+0x404>
					PWMOut = 0;
 8002d06:	4b44      	ldr	r3, [pc, #272]	; (8002e18 <_Z13GrandStatumixv+0x440>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
					grandState = stopnd;
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <_Z13GrandStatumixv+0x434>)
 8002d0e:	2204      	movs	r2, #4
 8002d10:	701a      	strb	r2, [r3, #0]
					u_contr = 0;
 8002d12:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <_Z13GrandStatumixv+0x444>)
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
				}
	break;
 8002d1a:	e05f      	b.n	8002ddc <_Z13GrandStatumixv+0x404>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d22:	4833      	ldr	r0, [pc, #204]	; (8002df0 <_Z13GrandStatumixv+0x418>)
 8002d24:	f014 fcee 	bl	8017704 <HAL_GPIO_WritePin>
		PWMOut = 0;
 8002d28:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <_Z13GrandStatumixv+0x440>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	801a      	strh	r2, [r3, #0]

		X(1,0)=0;
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2101      	movs	r1, #1
 8002d32:	483b      	ldr	r0, [pc, #236]	; (8002e20 <_Z13GrandStatumixv+0x448>)
 8002d34:	f001 fdb2 	bl	800489c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2101      	movs	r1, #1
 8002d44:	4836      	ldr	r0, [pc, #216]	; (8002e20 <_Z13GrandStatumixv+0x448>)
 8002d46:	f001 fda9 	bl	800489c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <_Z13GrandStatumixv+0x44c>)
 8002d50:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002d52:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <_Z13GrandStatumixv+0x43c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d142      	bne.n	8002de0 <_Z13GrandStatumixv+0x408>
			grandState = Ready;
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <_Z13GrandStatumixv+0x434>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
			IOExpenderInit();
 8002d60:	f001 f99a 	bl	8004098 <_Z14IOExpenderInitv>
			HAL_Delay(100);
 8002d64:	2064      	movs	r0, #100	; 0x64
 8002d66:	f013 fdeb 	bl	8016940 <HAL_Delay>
			//== rotation change for dummy test
			//mot_dirctn++; mot_dirctn%=2;
		}
	break;
 8002d6a:	e039      	b.n	8002de0 <_Z13GrandStatumixv+0x408>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d72:	481f      	ldr	r0, [pc, #124]	; (8002df0 <_Z13GrandStatumixv+0x418>)
 8002d74:	f014 fcc6 	bl	8017704 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <_Z13GrandStatumixv+0x440>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	801a      	strh	r2, [r3, #0]
			//Integral = 0;
			X(1,0)=0;
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2101      	movs	r1, #1
 8002d82:	4827      	ldr	r0, [pc, #156]	; (8002e20 <_Z13GrandStatumixv+0x448>)
 8002d84:	f001 fd8a 	bl	800489c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
			KalV = X(1,0);
 8002d90:	2200      	movs	r2, #0
 8002d92:	2101      	movs	r1, #1
 8002d94:	4822      	ldr	r0, [pc, #136]	; (8002e20 <_Z13GrandStatumixv+0x448>)
 8002d96:	f001 fd81 	bl	800489c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <_Z13GrandStatumixv+0x44c>)
 8002da0:	6013      	str	r3, [r2, #0]


			if (stop_sense == 1){
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <_Z13GrandStatumixv+0x43c>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d11c      	bne.n	8002de4 <_Z13GrandStatumixv+0x40c>

//				Currentpos = CurrentEn;
//				Distance = Finalposition - Currentpos;
//				flagNewpos = 1;
//				check = 0;
				grandState = work;
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <_Z13GrandStatumixv+0x434>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002db0:	e018      	b.n	8002de4 <_Z13GrandStatumixv+0x40c>

	case emer:
		ResetParam();
 8002db2:	f000 f937 	bl	8003024 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <_Z13GrandStatumixv+0x438>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d114      	bne.n	8002de8 <_Z13GrandStatumixv+0x410>
			grandState = Ready;
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <_Z13GrandStatumixv+0x434>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(250); // wait for emer release shock power
 8002dc4:	20fa      	movs	r0, #250	; 0xfa
 8002dc6:	f013 fdbb 	bl	8016940 <HAL_Delay>
			IOExpenderInit();
 8002dca:	f001 f965 	bl	8004098 <_Z14IOExpenderInitv>

		}
	break;
 8002dce:	e00b      	b.n	8002de8 <_Z13GrandStatumixv+0x410>
	break;
 8002dd0:	bf00      	nop
 8002dd2:	e00a      	b.n	8002dea <_Z13GrandStatumixv+0x412>
	break;
 8002dd4:	bf00      	nop
 8002dd6:	e008      	b.n	8002dea <_Z13GrandStatumixv+0x412>
		break;
 8002dd8:	bf00      	nop
 8002dda:	e006      	b.n	8002dea <_Z13GrandStatumixv+0x412>
	break;
 8002ddc:	bf00      	nop
 8002dde:	e004      	b.n	8002dea <_Z13GrandStatumixv+0x412>
	break;
 8002de0:	bf00      	nop
 8002de2:	e002      	b.n	8002dea <_Z13GrandStatumixv+0x412>
		break;
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <_Z13GrandStatumixv+0x412>
	break;
 8002de8:	bf00      	nop
	}
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40020400 	.word	0x40020400
 8002df4:	200005ac 	.word	0x200005ac
 8002df8:	200006e4 	.word	0x200006e4
 8002dfc:	200005a8 	.word	0x200005a8
 8002e00:	20000580 	.word	0x20000580
 8002e04:	20000584 	.word	0x20000584
 8002e08:	20000504 	.word	0x20000504
 8002e0c:	200004fc 	.word	0x200004fc
 8002e10:	200004fd 	.word	0x200004fd
 8002e14:	200004fe 	.word	0x200004fe
 8002e18:	20000574 	.word	0x20000574
 8002e1c:	20000730 	.word	0x20000730
 8002e20:	200006a0 	.word	0x200006a0
 8002e24:	200006c8 	.word	0x200006c8

08002e28 <_Z20LaserTrajex_workflowv>:

void LaserTrajex_workflow(){ // 1, n loop go to shoot laser run
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
	// -1 means no position value
	//if (Finalposition == -1){flag_LasxTraj = 0;}
	static uint16_t timeouttt = 5050;
	//static uint8_t missst = 0;

	switch(flag_LasxTraj){
 8002e30:	4b6b      	ldr	r3, [pc, #428]	; (8002fe0 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d012      	beq.n	8002e5e <_Z20LaserTrajex_workflowv+0x36>
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d05b      	beq.n	8002ef4 <_Z20LaserTrajex_workflowv+0xcc>
	default:
	case 0: // wait go flag
		////////// raise flag to 1 if need to drive the state

		if (grandState == work){ //flag_LasxTraj != 0 ||
 8002e3c:	4b69      	ldr	r3, [pc, #420]	; (8002fe4 <_Z20LaserTrajex_workflowv+0x1bc>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	f040 80c3 	bne.w	8002fcc <_Z20LaserTrajex_workflowv+0x1a4>
			flag_LasxTraj = 1;
 8002e46:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
			Finalposition = positionlog[position_order]; // receive in rad
 8002e4c:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4a66      	ldr	r2, [pc, #408]	; (8002fec <_Z20LaserTrajex_workflowv+0x1c4>)
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002e5a:	6013      	str	r3, [r2, #0]

		}
		break;
 8002e5c:	e0b6      	b.n	8002fcc <_Z20LaserTrajex_workflowv+0x1a4>
	case 1: //-------------traject-----
		//====flag_LasxTraj will trig trajex in while;
		//////// raise flag to 2 and flag_efftActi = 1; if reach the target the position

		Unwrapping();
 8002e5e:	f000 fc8f 	bl	8003780 <_Z10Unwrappingv>
		 if(flagNewpos == 0){
 8002e62:	4b64      	ldr	r3, [pc, #400]	; (8002ff4 <_Z20LaserTrajex_workflowv+0x1cc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d114      	bne.n	8002e94 <_Z20LaserTrajex_workflowv+0x6c>
			Currentpos = CurrentEn;
 8002e6a:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <_Z20LaserTrajex_workflowv+0x1d0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a63      	ldr	r2, [pc, #396]	; (8002ffc <_Z20LaserTrajex_workflowv+0x1d4>)
 8002e70:	6013      	str	r3, [r2, #0]
			//Finalposition = 300*0.006136; // Put goal position here in rad
			Distance = Finalposition - Currentpos;
 8002e72:	4b5f      	ldr	r3, [pc, #380]	; (8002ff0 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002e74:	ed93 7a00 	vldr	s14, [r3]
 8002e78:	4b60      	ldr	r3, [pc, #384]	; (8002ffc <_Z20LaserTrajex_workflowv+0x1d4>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e82:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <_Z20LaserTrajex_workflowv+0x1d8>)
 8002e84:	edc3 7a00 	vstr	s15, [r3]
			flagNewpos = 1;
 8002e88:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <_Z20LaserTrajex_workflowv+0x1cc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
			check = 0;
 8002e8e:	4b5d      	ldr	r3, [pc, #372]	; (8003004 <_Z20LaserTrajex_workflowv+0x1dc>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
		 }
		Trajectory();
 8002e94:	f000 f910 	bl	80030b8 <_Z10Trajectoryv>
		Kalmanfilter();
 8002e98:	f000 fd2a 	bl	80038f0 <_Z12Kalmanfilterv>
		controlloop();
 8002e9c:	f000 ff84 	bl	8003da8 <_Z11controlloopv>

		//HAL_Delay(2500); // Simulate workload
		//flag_finishTra = 1;

		if(flag_finishTra == 1){
 8002ea0:	4b59      	ldr	r3, [pc, #356]	; (8003008 <_Z20LaserTrajex_workflowv+0x1e0>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 8093 	bne.w	8002fd0 <_Z20LaserTrajex_workflowv+0x1a8>
			flag_finishTra = 0;
 8002eaa:	4b57      	ldr	r3, [pc, #348]	; (8003008 <_Z20LaserTrajex_workflowv+0x1e0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]

			flag_efftActi = 1;
 8002eb0:	4b56      	ldr	r3, [pc, #344]	; (800300c <_Z20LaserTrajex_workflowv+0x1e4>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
			flag_LasxTraj = 2;
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]

			timeout_efft = millis();
 8002ebc:	f001 fa74 	bl	80043a8 <_Z6millisv>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	60fa      	str	r2, [r7, #12]
 8002ec8:	4b51      	ldr	r3, [pc, #324]	; (8003010 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002eca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002ece:	e9c3 1200 	strd	r1, r2, [r3]

			if(flag_efftDis == 1){
 8002ed2:	4b50      	ldr	r3, [pc, #320]	; (8003014 <_Z20LaserTrajex_workflowv+0x1ec>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <_Z20LaserTrajex_workflowv+0xc2>
				timeouttt = 500;
 8002eda:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002edc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ee0:	801a      	strh	r2, [r3, #0]
				efft_status = 0x78;}
 8002ee2:	4b4e      	ldr	r3, [pc, #312]	; (800301c <_Z20LaserTrajex_workflowv+0x1f4>)
 8002ee4:	2278      	movs	r2, #120	; 0x78
 8002ee6:	701a      	strb	r2, [r3, #0]
			else{timeouttt = 5050;}

		}
		break;
 8002ee8:	e072      	b.n	8002fd0 <_Z20LaserTrajex_workflowv+0x1a8>
			else{timeouttt = 5050;}
 8002eea:	4b4b      	ldr	r3, [pc, #300]	; (8003018 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002eec:	f241 32ba 	movw	r2, #5050	; 0x13ba
 8002ef0:	801a      	strh	r2, [r3, #0]
		break;
 8002ef2:	e06d      	b.n	8002fd0 <_Z20LaserTrajex_workflowv+0x1a8>
	case 2: //---------------Laserwork--------------
		trig_efftRead = 1;
 8002ef4:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <_Z20LaserTrajex_workflowv+0x1f8>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]

		// if laser finished work or tomeout and not too fast shift state
		if((efft_status == 0x78 || millis() - timeout_efft >= timeouttt) && millis() - timeout_efft >= 1000){
 8002efa:	4b48      	ldr	r3, [pc, #288]	; (800301c <_Z20LaserTrajex_workflowv+0x1f4>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b78      	cmp	r3, #120	; 0x78
 8002f00:	d01c      	beq.n	8002f3c <_Z20LaserTrajex_workflowv+0x114>
 8002f02:	f001 fa51 	bl	80043a8 <_Z6millisv>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2200      	movs	r2, #0
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	617a      	str	r2, [r7, #20]
 8002f0e:	4b40      	ldr	r3, [pc, #256]	; (8003010 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	6939      	ldr	r1, [r7, #16]
 8002f16:	ebb1 0802 	subs.w	r8, r1, r2
 8002f1a:	6979      	ldr	r1, [r7, #20]
 8002f1c:	eb61 0903 	sbc.w	r9, r1, r3
 8002f20:	4b3d      	ldr	r3, [pc, #244]	; (8003018 <_Z20LaserTrajex_workflowv+0x1f0>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2200      	movs	r2, #0
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f30:	460b      	mov	r3, r1
 8002f32:	4598      	cmp	r8, r3
 8002f34:	4613      	mov	r3, r2
 8002f36:	eb79 0303 	sbcs.w	r3, r9, r3
 8002f3a:	d313      	bcc.n	8002f64 <_Z20LaserTrajex_workflowv+0x13c>
 8002f3c:	f001 fa34 	bl	80043a8 <_Z6millisv>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2200      	movs	r2, #0
 8002f44:	469a      	mov	sl, r3
 8002f46:	4693      	mov	fp, r2
 8002f48:	4b31      	ldr	r3, [pc, #196]	; (8003010 <_Z20LaserTrajex_workflowv+0x1e8>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	ebba 0402 	subs.w	r4, sl, r2
 8002f52:	eb6b 0503 	sbc.w	r5, fp, r3
 8002f56:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002f5a:	f175 0300 	sbcs.w	r3, r5, #0
 8002f5e:	d301      	bcc.n	8002f64 <_Z20LaserTrajex_workflowv+0x13c>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <_Z20LaserTrajex_workflowv+0x13e>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d034      	beq.n	8002fd4 <_Z20LaserTrajex_workflowv+0x1ac>
		//// force encoder to work
		//if(efft_status == 0x78 || millis() - timeout_efft >= timeouttt){
		//// cheat force
		//if(millis() - timeout_efft >= timeouttt){
			efft_status = 0x00;
 8002f6a:	4b2c      	ldr	r3, [pc, #176]	; (800301c <_Z20LaserTrajex_workflowv+0x1f4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 0;
 8002f70:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <_Z20LaserTrajex_workflowv+0x1f8>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
			position_order++; // go to next obtained position
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002f80:	701a      	strb	r2, [r3, #0]

			if (positionlog[position_order] == -1){
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	4a19      	ldr	r2, [pc, #100]	; (8002fec <_Z20LaserTrajex_workflowv+0x1c4>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002f94:	eef4 7a47 	vcmp.f32	s15, s14
 8002f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9c:	d10a      	bne.n	8002fb4 <_Z20LaserTrajex_workflowv+0x18c>
				//Real end, reset all position parameter
				// back to ready
				//HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2, 100);
				fn_Uart();
 8002f9e:	f7fe fd6f 	bl	8001a80 <_Z7fn_Uartv>
				flag_LasxTraj = 0;
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
				ResetParam();
 8002fa8:	f000 f83c 	bl	8003024 <_Z10ResetParamv>
				grandState = Ready;
 8002fac:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <_Z20LaserTrajex_workflowv+0x1bc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
			else {
				Finalposition = positionlog[position_order];
				flag_LasxTraj = 1;
			} // continue next pos if have
		}
		break;
 8002fb2:	e00f      	b.n	8002fd4 <_Z20LaserTrajex_workflowv+0x1ac>
				Finalposition = positionlog[position_order];
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <_Z20LaserTrajex_workflowv+0x1c0>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <_Z20LaserTrajex_workflowv+0x1c4>)
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	; (8002ff0 <_Z20LaserTrajex_workflowv+0x1c8>)
 8002fc2:	6013      	str	r3, [r2, #0]
				flag_LasxTraj = 1;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <_Z20LaserTrajex_workflowv+0x1b8>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
		break;
 8002fca:	e003      	b.n	8002fd4 <_Z20LaserTrajex_workflowv+0x1ac>
		break;
 8002fcc:	bf00      	nop
 8002fce:	e002      	b.n	8002fd6 <_Z20LaserTrajex_workflowv+0x1ae>
		break;
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <_Z20LaserTrajex_workflowv+0x1ae>
		break;
 8002fd4:	bf00      	nop
	}
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe0:	20000514 	.word	0x20000514
 8002fe4:	200004fc 	.word	0x200004fc
 8002fe8:	20000515 	.word	0x20000515
 8002fec:	20000144 	.word	0x20000144
 8002ff0:	20000580 	.word	0x20000580
 8002ff4:	200005ac 	.word	0x200005ac
 8002ff8:	200006e4 	.word	0x200006e4
 8002ffc:	200005a8 	.word	0x200005a8
 8003000:	20000584 	.word	0x20000584
 8003004:	20000739 	.word	0x20000739
 8003008:	20000504 	.word	0x20000504
 800300c:	2000073b 	.word	0x2000073b
 8003010:	20000748 	.word	0x20000748
 8003014:	200001ac 	.word	0x200001ac
 8003018:	200001c4 	.word	0x200001c4
 800301c:	2000073a 	.word	0x2000073a
 8003020:	2000073d 	.word	0x2000073d

08003024 <_Z10ResetParamv>:

void ResetParam(){
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <_Z10ResetParamv+0x6c>)
 800302c:	2200      	movs	r2, #0
 800302e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 8003030:	2300      	movs	r3, #0
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	4b17      	ldr	r3, [pc, #92]	; (8003094 <_Z10ResetParamv+0x70>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4293      	cmp	r3, r2
 800303e:	dc09      	bgt.n	8003054 <_Z10ResetParamv+0x30>
			positionlog[i] = -1.0;
 8003040:	4a15      	ldr	r2, [pc, #84]	; (8003098 <_Z10ResetParamv+0x74>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <_Z10ResetParamv+0x78>)
 800304a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3301      	adds	r3, #1
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	e7ef      	b.n	8003034 <_Z10ResetParamv+0x10>
		}
	position_order = 0;
 8003054:	4b0f      	ldr	r3, [pc, #60]	; (8003094 <_Z10ResetParamv+0x70>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
	flag_LasxTraj = 0;
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <_Z10ResetParamv+0x7c>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
	trig_efftRead = 0;
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <_Z10ResetParamv+0x80>)
 8003062:	2200      	movs	r2, #0
 8003064:	701a      	strb	r2, [r3, #0]
	bluecounter = 0;
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <_Z10ResetParamv+0x84>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
	Distance = 0;
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <_Z10ResetParamv+0x88>)
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
	Currentpos = 0;
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <_Z10ResetParamv+0x8c>)
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
	efft_status = 0x00;
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <_Z10ResetParamv+0x90>)
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
	IOExpenderInit();
 8003082:	f001 f809 	bl	8004098 <_Z14IOExpenderInitv>
	//Integral = 0;
	//u_contr = 0;
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000574 	.word	0x20000574
 8003094:	20000515 	.word	0x20000515
 8003098:	20000144 	.word	0x20000144
 800309c:	bf800000 	.word	0xbf800000
 80030a0:	20000514 	.word	0x20000514
 80030a4:	2000073d 	.word	0x2000073d
 80030a8:	200006f0 	.word	0x200006f0
 80030ac:	20000584 	.word	0x20000584
 80030b0:	200005a8 	.word	0x200005a8
 80030b4:	2000073a 	.word	0x2000073a

080030b8 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 80030b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030bc:	ed2d 8b04 	vpush	{d8-d9}
 80030c0:	af00      	add	r7, sp, #0

	if(micros() - TimeStampTraject >= 10000){
 80030c2:	f001 f957 	bl	8004374 <_Z6microsv>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	49c5      	ldr	r1, [pc, #788]	; (80033e0 <_Z10Trajectoryv+0x328>)
 80030cc:	6809      	ldr	r1, [r1, #0]
 80030ce:	2000      	movs	r0, #0
 80030d0:	4688      	mov	r8, r1
 80030d2:	4681      	mov	r9, r0
 80030d4:	ebb2 0408 	subs.w	r4, r2, r8
 80030d8:	eb63 0509 	sbc.w	r5, r3, r9
 80030dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80030e0:	429c      	cmp	r4, r3
 80030e2:	f175 0300 	sbcs.w	r3, r5, #0
 80030e6:	bf2c      	ite	cs
 80030e8:	2301      	movcs	r3, #1
 80030ea:	2300      	movcc	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8310 	beq.w	8003714 <_Z10Trajectoryv+0x65c>
		TimeStampTraject = micros();
 80030f4:	f001 f93e 	bl	8004374 <_Z6microsv>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4bb8      	ldr	r3, [pc, #736]	; (80033e0 <_Z10Trajectoryv+0x328>)
 80030fe:	601a      	str	r2, [r3, #0]

		Acceleration = 0.5;
 8003100:	4bb8      	ldr	r3, [pc, #736]	; (80033e4 <_Z10Trajectoryv+0x32c>)
 8003102:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8003106:	601a      	str	r2, [r3, #0]
//		}
		////////=======>>> Quintic ============///////////

		////////=======<<< Tapezoidal==========//////////

      timeFinal = (4*abs(Velocity)) + ((abs(Distance)-(2*abs(Velocity)*abs(Velocity)))/abs(Velocity));
 8003108:	4bb7      	ldr	r3, [pc, #732]	; (80033e8 <_Z10Trajectoryv+0x330>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	eeb0 0a67 	vmov.f32	s0, s15
 8003112:	f7fd ff3b 	bl	8000f8c <_ZSt3absf>
 8003116:	eef0 7a40 	vmov.f32	s15, s0
 800311a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800311e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003122:	4bb2      	ldr	r3, [pc, #712]	; (80033ec <_Z10Trajectoryv+0x334>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	eeb0 0a67 	vmov.f32	s0, s15
 800312c:	f7fd ff2e 	bl	8000f8c <_ZSt3absf>
 8003130:	eeb0 9a40 	vmov.f32	s18, s0
 8003134:	4bac      	ldr	r3, [pc, #688]	; (80033e8 <_Z10Trajectoryv+0x330>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	eeb0 0a67 	vmov.f32	s0, s15
 800313e:	f7fd ff25 	bl	8000f8c <_ZSt3absf>
 8003142:	eef0 7a40 	vmov.f32	s15, s0
 8003146:	ee77 8aa7 	vadd.f32	s17, s15, s15
 800314a:	4ba7      	ldr	r3, [pc, #668]	; (80033e8 <_Z10Trajectoryv+0x330>)
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	eeb0 0a67 	vmov.f32	s0, s15
 8003154:	f7fd ff1a 	bl	8000f8c <_ZSt3absf>
 8003158:	eef0 7a40 	vmov.f32	s15, s0
 800315c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003160:	ee79 8a67 	vsub.f32	s17, s18, s15
 8003164:	4ba0      	ldr	r3, [pc, #640]	; (80033e8 <_Z10Trajectoryv+0x330>)
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eeb0 0a67 	vmov.f32	s0, s15
 800316e:	f7fd ff0d 	bl	8000f8c <_ZSt3absf>
 8003172:	eeb0 7a40 	vmov.f32	s14, s0
 8003176:	eec8 7a87 	vdiv.f32	s15, s17, s14
 800317a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800317e:	4b9c      	ldr	r3, [pc, #624]	; (80033f0 <_Z10Trajectoryv+0x338>)
 8003180:	edc3 7a00 	vstr	s15, [r3]

		if (Distance/Velocity > Velocity/Acceleration){
 8003184:	4b99      	ldr	r3, [pc, #612]	; (80033ec <_Z10Trajectoryv+0x334>)
 8003186:	edd3 6a00 	vldr	s13, [r3]
 800318a:	4b97      	ldr	r3, [pc, #604]	; (80033e8 <_Z10Trajectoryv+0x330>)
 800318c:	edd3 7a00 	vldr	s15, [r3]
 8003190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003194:	4b94      	ldr	r3, [pc, #592]	; (80033e8 <_Z10Trajectoryv+0x330>)
 8003196:	ed93 6a00 	vldr	s12, [r3]
 800319a:	4b92      	ldr	r3, [pc, #584]	; (80033e4 <_Z10Trajectoryv+0x32c>)
 800319c:	edd3 6a00 	vldr	s13, [r3]
 80031a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80031a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	dd0b      	ble.n	80031c6 <_Z10Trajectoryv+0x10e>
			Tb = Velocity/Acceleration;
 80031ae:	4b8e      	ldr	r3, [pc, #568]	; (80033e8 <_Z10Trajectoryv+0x330>)
 80031b0:	edd3 6a00 	vldr	s13, [r3]
 80031b4:	4b8b      	ldr	r3, [pc, #556]	; (80033e4 <_Z10Trajectoryv+0x32c>)
 80031b6:	ed93 7a00 	vldr	s14, [r3]
 80031ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031be:	4b8d      	ldr	r3, [pc, #564]	; (80033f4 <_Z10Trajectoryv+0x33c>)
 80031c0:	edc3 7a00 	vstr	s15, [r3]
 80031c4:	e029      	b.n	800321a <_Z10Trajectoryv+0x162>
		}
		else {
			Tb = sqrt(2*abs(Distance));
 80031c6:	4b89      	ldr	r3, [pc, #548]	; (80033ec <_Z10Trajectoryv+0x334>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	eeb0 0a67 	vmov.f32	s0, s15
 80031d0:	f7fd fedc 	bl	8000f8c <_ZSt3absf>
 80031d4:	eef0 7a40 	vmov.f32	s15, s0
 80031d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80031dc:	eeb0 0a67 	vmov.f32	s0, s15
 80031e0:	f7fd fee4 	bl	8000fac <_ZSt4sqrtf>
 80031e4:	eef0 7a40 	vmov.f32	s15, s0
 80031e8:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <_Z10Trajectoryv+0x33c>)
 80031ea:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(abs(Distance)/2);
 80031ee:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <_Z10Trajectoryv+0x334>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	eeb0 0a67 	vmov.f32	s0, s15
 80031f8:	f7fd fec8 	bl	8000f8c <_ZSt3absf>
 80031fc:	eeb0 7a40 	vmov.f32	s14, s0
 8003200:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003208:	eeb0 0a67 	vmov.f32	s0, s15
 800320c:	f7fd fece 	bl	8000fac <_ZSt4sqrtf>
 8003210:	eef0 7a40 	vmov.f32	s15, s0
 8003214:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <_Z10Trajectoryv+0x330>)
 8003216:	edc3 7a00 	vstr	s15, [r3]
		}
		if (TimeinS < Tb){
 800321a:	4b77      	ldr	r3, [pc, #476]	; (80033f8 <_Z10Trajectoryv+0x340>)
 800321c:	ed93 7a00 	vldr	s14, [r3]
 8003220:	4b74      	ldr	r3, [pc, #464]	; (80033f4 <_Z10Trajectoryv+0x33c>)
 8003222:	edd3 7a00 	vldr	s15, [r3]
 8003226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	d55c      	bpl.n	80032ea <_Z10Trajectoryv+0x232>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 8003230:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <_Z10Trajectoryv+0x32c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f987 	bl	8000548 <__aeabi_f2d>
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <_Z10Trajectoryv+0x344>)
 8003240:	f7fd f9da 	bl	80005f8 <__aeabi_dmul>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4614      	mov	r4, r2
 800324a:	461d      	mov	r5, r3
 800324c:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <_Z10Trajectoryv+0x340>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd f979 	bl	8000548 <__aeabi_f2d>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4620      	mov	r0, r4
 800325c:	4629      	mov	r1, r5
 800325e:	f7fd f9cb 	bl	80005f8 <__aeabi_dmul>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4614      	mov	r4, r2
 8003268:	461d      	mov	r5, r3
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <_Z10Trajectoryv+0x340>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f96a 	bl	8000548 <__aeabi_f2d>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4620      	mov	r0, r4
 800327a:	4629      	mov	r1, r5
 800327c:	f7fd f9bc 	bl	80005f8 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4614      	mov	r4, r2
 8003286:	461d      	mov	r5, r3
 8003288:	4b5d      	ldr	r3, [pc, #372]	; (8003400 <_Z10Trajectoryv+0x348>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd f95b 	bl	8000548 <__aeabi_f2d>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4620      	mov	r0, r4
 8003298:	4629      	mov	r1, r5
 800329a:	f7fc fff7 	bl	800028c <__adddf3>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	f7fd fc9f 	bl	8000be8 <__aeabi_d2f>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a55      	ldr	r2, [pc, #340]	; (8003404 <_Z10Trajectoryv+0x34c>)
 80032ae:	6013      	str	r3, [r2, #0]
			OutVelocity = Acceleration*TimeinS;
 80032b0:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <_Z10Trajectoryv+0x32c>)
 80032b2:	ed93 7a00 	vldr	s14, [r3]
 80032b6:	4b50      	ldr	r3, [pc, #320]	; (80033f8 <_Z10Trajectoryv+0x340>)
 80032b8:	edd3 7a00 	vldr	s15, [r3]
 80032bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c0:	4b51      	ldr	r3, [pc, #324]	; (8003408 <_Z10Trajectoryv+0x350>)
 80032c2:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = Acceleration;
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <_Z10Trajectoryv+0x32c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a50      	ldr	r2, [pc, #320]	; (800340c <_Z10Trajectoryv+0x354>)
 80032cc:	6013      	str	r3, [r2, #0]
			K_P_V = 2.5;
 80032ce:	4b50      	ldr	r3, [pc, #320]	; (8003410 <_Z10Trajectoryv+0x358>)
 80032d0:	4a50      	ldr	r2, [pc, #320]	; (8003414 <_Z10Trajectoryv+0x35c>)
 80032d2:	601a      	str	r2, [r3, #0]
			K_I_V = 0.25;
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <_Z10Trajectoryv+0x360>)
 80032d6:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80032da:	601a      	str	r2, [r3, #0]
			K_D_V = 1.2;
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <_Z10Trajectoryv+0x364>)
 80032de:	4a50      	ldr	r2, [pc, #320]	; (8003420 <_Z10Trajectoryv+0x368>)
 80032e0:	601a      	str	r2, [r3, #0]
			ch = 1;
 80032e2:	4b50      	ldr	r3, [pc, #320]	; (8003424 <_Z10Trajectoryv+0x36c>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e1c8      	b.n	800367c <_Z10Trajectoryv+0x5c4>
			}
		else if(TimeinS < (timeFinal-Tb)){
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <_Z10Trajectoryv+0x338>)
 80032ec:	ed93 7a00 	vldr	s14, [r3]
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <_Z10Trajectoryv+0x33c>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032fa:	4b3f      	ldr	r3, [pc, #252]	; (80033f8 <_Z10Trajectoryv+0x340>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	f340 8092 	ble.w	8003430 <_Z10Trajectoryv+0x378>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <_Z10Trajectoryv+0x32c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f919 	bl	8000548 <__aeabi_f2d>
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	4b38      	ldr	r3, [pc, #224]	; (80033fc <_Z10Trajectoryv+0x344>)
 800331c:	f7fd f96c 	bl	80005f8 <__aeabi_dmul>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4614      	mov	r4, r2
 8003326:	461d      	mov	r5, r3
 8003328:	4b32      	ldr	r3, [pc, #200]	; (80033f4 <_Z10Trajectoryv+0x33c>)
 800332a:	ed93 7a00 	vldr	s14, [r3]
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <_Z10Trajectoryv+0x33c>)
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	ee17 0a90 	vmov	r0, s15
 800333c:	f7fd f904 	bl	8000548 <__aeabi_f2d>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4620      	mov	r0, r4
 8003346:	4629      	mov	r1, r5
 8003348:	f7fd f956 	bl	80005f8 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4614      	mov	r4, r2
 8003352:	461d      	mov	r5, r3
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <_Z10Trajectoryv+0x340>)
 8003356:	ed93 7a00 	vldr	s14, [r3]
 800335a:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <_Z10Trajectoryv+0x33c>)
 800335c:	edd3 7a00 	vldr	s15, [r3]
 8003360:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <_Z10Trajectoryv+0x330>)
 8003366:	edd3 7a00 	vldr	s15, [r3]
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	ee17 0a90 	vmov	r0, s15
 8003372:	f7fd f8e9 	bl	8000548 <__aeabi_f2d>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4620      	mov	r0, r4
 800337c:	4629      	mov	r1, r5
 800337e:	f7fc ff85 	bl	800028c <__adddf3>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4614      	mov	r4, r2
 8003388:	461d      	mov	r5, r3
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <_Z10Trajectoryv+0x348>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd f8da 	bl	8000548 <__aeabi_f2d>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4620      	mov	r0, r4
 800339a:	4629      	mov	r1, r5
 800339c:	f7fc ff76 	bl	800028c <__adddf3>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	f7fd fc1e 	bl	8000be8 <__aeabi_d2f>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <_Z10Trajectoryv+0x34c>)
 80033b0:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity;
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <_Z10Trajectoryv+0x330>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a14      	ldr	r2, [pc, #80]	; (8003408 <_Z10Trajectoryv+0x350>)
 80033b8:	6013      	str	r3, [r2, #0]
			OutAcceleration = 0;
 80033ba:	4b14      	ldr	r3, [pc, #80]	; (800340c <_Z10Trajectoryv+0x354>)
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
			K_P_V = 2.0;
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <_Z10Trajectoryv+0x358>)
 80033c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033c8:	601a      	str	r2, [r3, #0]
			K_I_V = 0.215;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <_Z10Trajectoryv+0x360>)
 80033cc:	4a16      	ldr	r2, [pc, #88]	; (8003428 <_Z10Trajectoryv+0x370>)
 80033ce:	601a      	str	r2, [r3, #0]
			K_D_V = 1.7;
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <_Z10Trajectoryv+0x364>)
 80033d2:	4a16      	ldr	r2, [pc, #88]	; (800342c <_Z10Trajectoryv+0x374>)
 80033d4:	601a      	str	r2, [r3, #0]
			ch = 2;
 80033d6:	4b13      	ldr	r3, [pc, #76]	; (8003424 <_Z10Trajectoryv+0x36c>)
 80033d8:	2202      	movs	r2, #2
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	e14e      	b.n	800367c <_Z10Trajectoryv+0x5c4>
 80033de:	bf00      	nop
 80033e0:	200005b0 	.word	0x200005b0
 80033e4:	2000058c 	.word	0x2000058c
 80033e8:	20000588 	.word	0x20000588
 80033ec:	20000584 	.word	0x20000584
 80033f0:	200005a0 	.word	0x200005a0
 80033f4:	2000059c 	.word	0x2000059c
 80033f8:	200005a4 	.word	0x200005a4
 80033fc:	3fe00000 	.word	0x3fe00000
 8003400:	200005a8 	.word	0x200005a8
 8003404:	20000590 	.word	0x20000590
 8003408:	20000594 	.word	0x20000594
 800340c:	20000598 	.word	0x20000598
 8003410:	2000071c 	.word	0x2000071c
 8003414:	40200000 	.word	0x40200000
 8003418:	20000720 	.word	0x20000720
 800341c:	20000724 	.word	0x20000724
 8003420:	3f99999a 	.word	0x3f99999a
 8003424:	20000738 	.word	0x20000738
 8003428:	3e5c28f6 	.word	0x3e5c28f6
 800342c:	3fd9999a 	.word	0x3fd9999a
			}
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 8003430:	4bbd      	ldr	r3, [pc, #756]	; (8003728 <_Z10Trajectoryv+0x670>)
 8003432:	ed93 7a00 	vldr	s14, [r3]
 8003436:	4bbd      	ldr	r3, [pc, #756]	; (800372c <_Z10Trajectoryv+0x674>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003440:	4bbb      	ldr	r3, [pc, #748]	; (8003730 <_Z10Trajectoryv+0x678>)
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	f200 80ef 	bhi.w	8003630 <_Z10Trajectoryv+0x578>
 8003452:	4bb7      	ldr	r3, [pc, #732]	; (8003730 <_Z10Trajectoryv+0x678>)
 8003454:	ed93 7a00 	vldr	s14, [r3]
 8003458:	4bb3      	ldr	r3, [pc, #716]	; (8003728 <_Z10Trajectoryv+0x670>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	f200 80e3 	bhi.w	8003630 <_Z10Trajectoryv+0x578>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 800346a:	4bb2      	ldr	r3, [pc, #712]	; (8003734 <_Z10Trajectoryv+0x67c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd f86a 	bl	8000548 <__aeabi_f2d>
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	4baf      	ldr	r3, [pc, #700]	; (8003738 <_Z10Trajectoryv+0x680>)
 800347a:	f7fd f8bd 	bl	80005f8 <__aeabi_dmul>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4614      	mov	r4, r2
 8003484:	461d      	mov	r5, r3
 8003486:	4ba9      	ldr	r3, [pc, #676]	; (800372c <_Z10Trajectoryv+0x674>)
 8003488:	ed93 7a00 	vldr	s14, [r3]
 800348c:	4ba7      	ldr	r3, [pc, #668]	; (800372c <_Z10Trajectoryv+0x674>)
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003496:	ee17 0a90 	vmov	r0, s15
 800349a:	f7fd f855 	bl	8000548 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4620      	mov	r0, r4
 80034a4:	4629      	mov	r1, r5
 80034a6:	f7fd f8a7 	bl	80005f8 <__aeabi_dmul>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4614      	mov	r4, r2
 80034b0:	461d      	mov	r5, r3
 80034b2:	4b9d      	ldr	r3, [pc, #628]	; (8003728 <_Z10Trajectoryv+0x670>)
 80034b4:	ed93 7a00 	vldr	s14, [r3]
 80034b8:	4b9c      	ldr	r3, [pc, #624]	; (800372c <_Z10Trajectoryv+0x674>)
 80034ba:	edd3 7a00 	vldr	s15, [r3]
 80034be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034c6:	4b9d      	ldr	r3, [pc, #628]	; (800373c <_Z10Trajectoryv+0x684>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d0:	ee17 0a90 	vmov	r0, s15
 80034d4:	f7fd f838 	bl	8000548 <__aeabi_f2d>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4620      	mov	r0, r4
 80034de:	4629      	mov	r1, r5
 80034e0:	f7fc fed4 	bl	800028c <__adddf3>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	4b90      	ldr	r3, [pc, #576]	; (8003730 <_Z10Trajectoryv+0x678>)
 80034ee:	ed93 7a00 	vldr	s14, [r3]
 80034f2:	4b8d      	ldr	r3, [pc, #564]	; (8003728 <_Z10Trajectoryv+0x670>)
 80034f4:	edd3 6a00 	vldr	s13, [r3]
 80034f8:	4b8c      	ldr	r3, [pc, #560]	; (800372c <_Z10Trajectoryv+0x674>)
 80034fa:	edd3 7a00 	vldr	s15, [r3]
 80034fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003506:	4b8d      	ldr	r3, [pc, #564]	; (800373c <_Z10Trajectoryv+0x684>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003510:	ee17 0a90 	vmov	r0, s15
 8003514:	f7fd f818 	bl	8000548 <__aeabi_f2d>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f7fc feb4 	bl	800028c <__adddf3>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4614      	mov	r4, r2
 800352a:	461d      	mov	r5, r3
 800352c:	4b81      	ldr	r3, [pc, #516]	; (8003734 <_Z10Trajectoryv+0x67c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f809 	bl	8000548 <__aeabi_f2d>
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <_Z10Trajectoryv+0x680>)
 800353c:	f7fd f85c 	bl	80005f8 <__aeabi_dmul>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4690      	mov	r8, r2
 8003546:	4699      	mov	r9, r3
 8003548:	4b79      	ldr	r3, [pc, #484]	; (8003730 <_Z10Trajectoryv+0x678>)
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	4b76      	ldr	r3, [pc, #472]	; (8003728 <_Z10Trajectoryv+0x670>)
 8003550:	edd3 6a00 	vldr	s13, [r3]
 8003554:	4b75      	ldr	r3, [pc, #468]	; (800372c <_Z10Trajectoryv+0x674>)
 8003556:	edd3 7a00 	vldr	s15, [r3]
 800355a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800355e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003562:	4b73      	ldr	r3, [pc, #460]	; (8003730 <_Z10Trajectoryv+0x678>)
 8003564:	edd3 6a00 	vldr	s13, [r3]
 8003568:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <_Z10Trajectoryv+0x670>)
 800356a:	ed93 6a00 	vldr	s12, [r3]
 800356e:	4b6f      	ldr	r3, [pc, #444]	; (800372c <_Z10Trajectoryv+0x674>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003578:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800357c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003580:	ee17 0a90 	vmov	r0, s15
 8003584:	f7fc ffe0 	bl	8000548 <__aeabi_f2d>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4640      	mov	r0, r8
 800358e:	4649      	mov	r1, r9
 8003590:	f7fd f832 	bl	80005f8 <__aeabi_dmul>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4620      	mov	r0, r4
 800359a:	4629      	mov	r1, r5
 800359c:	f7fc fe74 	bl	8000288 <__aeabi_dsub>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4614      	mov	r4, r2
 80035a6:	461d      	mov	r5, r3
 80035a8:	4b65      	ldr	r3, [pc, #404]	; (8003740 <_Z10Trajectoryv+0x688>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc ffcb 	bl	8000548 <__aeabi_f2d>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4620      	mov	r0, r4
 80035b8:	4629      	mov	r1, r5
 80035ba:	f7fc fe67 	bl	800028c <__adddf3>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4610      	mov	r0, r2
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fd fb0f 	bl	8000be8 <__aeabi_d2f>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <_Z10Trajectoryv+0x68c>)
 80035ce:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 80035d0:	4b5a      	ldr	r3, [pc, #360]	; (800373c <_Z10Trajectoryv+0x684>)
 80035d2:	ed93 7a00 	vldr	s14, [r3]
 80035d6:	4b56      	ldr	r3, [pc, #344]	; (8003730 <_Z10Trajectoryv+0x678>)
 80035d8:	edd3 6a00 	vldr	s13, [r3]
 80035dc:	4b52      	ldr	r3, [pc, #328]	; (8003728 <_Z10Trajectoryv+0x670>)
 80035de:	ed93 6a00 	vldr	s12, [r3]
 80035e2:	4b52      	ldr	r3, [pc, #328]	; (800372c <_Z10Trajectoryv+0x674>)
 80035e4:	edd3 7a00 	vldr	s15, [r3]
 80035e8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80035ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <_Z10Trajectoryv+0x67c>)
 80035f2:	edd3 7a00 	vldr	s15, [r3]
 80035f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035fe:	4b52      	ldr	r3, [pc, #328]	; (8003748 <_Z10Trajectoryv+0x690>)
 8003600:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = -Acceleration;
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <_Z10Trajectoryv+0x67c>)
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	eef1 7a67 	vneg.f32	s15, s15
 800360e:	4b4f      	ldr	r3, [pc, #316]	; (800374c <_Z10Trajectoryv+0x694>)
 8003610:	edc3 7a00 	vstr	s15, [r3]
			K_P_V = 2.0;
 8003614:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <_Z10Trajectoryv+0x698>)
 8003616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800361a:	601a      	str	r2, [r3, #0]
			K_I_V = 0.215;
 800361c:	4b4d      	ldr	r3, [pc, #308]	; (8003754 <_Z10Trajectoryv+0x69c>)
 800361e:	4a4e      	ldr	r2, [pc, #312]	; (8003758 <_Z10Trajectoryv+0x6a0>)
 8003620:	601a      	str	r2, [r3, #0]
			K_D_V = 1.2;
 8003622:	4b4e      	ldr	r3, [pc, #312]	; (800375c <_Z10Trajectoryv+0x6a4>)
 8003624:	4a4e      	ldr	r2, [pc, #312]	; (8003760 <_Z10Trajectoryv+0x6a8>)
 8003626:	601a      	str	r2, [r3, #0]
			ch = 3;
 8003628:	4b4e      	ldr	r3, [pc, #312]	; (8003764 <_Z10Trajectoryv+0x6ac>)
 800362a:	2203      	movs	r2, #3
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e025      	b.n	800367c <_Z10Trajectoryv+0x5c4>
			}
		else if(TimeinS > timeFinal){
 8003630:	4b3f      	ldr	r3, [pc, #252]	; (8003730 <_Z10Trajectoryv+0x678>)
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	4b3c      	ldr	r3, [pc, #240]	; (8003728 <_Z10Trajectoryv+0x670>)
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003644:	dd1a      	ble.n	800367c <_Z10Trajectoryv+0x5c4>
			OutPosition = Distance+Currentpos;
 8003646:	4b48      	ldr	r3, [pc, #288]	; (8003768 <_Z10Trajectoryv+0x6b0>)
 8003648:	ed93 7a00 	vldr	s14, [r3]
 800364c:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <_Z10Trajectoryv+0x688>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <_Z10Trajectoryv+0x68c>)
 8003658:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = 0;
 800365c:	4b3b      	ldr	r3, [pc, #236]	; (800374c <_Z10Trajectoryv+0x694>)
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
			K_P_V = 2.5;
 8003664:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <_Z10Trajectoryv+0x698>)
 8003666:	4a41      	ldr	r2, [pc, #260]	; (800376c <_Z10Trajectoryv+0x6b4>)
 8003668:	601a      	str	r2, [r3, #0]
			K_I_V = 0.2;
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <_Z10Trajectoryv+0x69c>)
 800366c:	4a40      	ldr	r2, [pc, #256]	; (8003770 <_Z10Trajectoryv+0x6b8>)
 800366e:	601a      	str	r2, [r3, #0]
			K_D_V = 1.4;
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <_Z10Trajectoryv+0x6a4>)
 8003672:	4a40      	ldr	r2, [pc, #256]	; (8003774 <_Z10Trajectoryv+0x6bc>)
 8003674:	601a      	str	r2, [r3, #0]
			ch = 4;
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <_Z10Trajectoryv+0x6ac>)
 8003678:	2204      	movs	r2, #4
 800367a:	701a      	strb	r2, [r3, #0]
//			//Velocity = 1.04719755; // [From UART] Put Max Velo here
//			//Acceleration= 0.5;   // recieve frol UART
//			check = 50;
//		}
//		else
		if(Distance < 0){
 800367c:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <_Z10Trajectoryv+0x6b0>)
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368a:	d530      	bpl.n	80036ee <_Z10Trajectoryv+0x636>
			//Velocity=-1.04719755; // [From UART] Put Max Velo here  (negative)
			//Velocity= -1 * Velocity;
			OutVelocity = OutVelocity * -1.0;
 800368c:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <_Z10Trajectoryv+0x690>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fc ff59 	bl	8000548 <__aeabi_f2d>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4692      	mov	sl, r2
 800369c:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80036a0:	4650      	mov	r0, sl
 80036a2:	4659      	mov	r1, fp
 80036a4:	f7fd faa0 	bl	8000be8 <__aeabi_d2f>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <_Z10Trajectoryv+0x690>)
 80036ac:	6013      	str	r3, [r2, #0]
			if(ch==4){
 80036ae:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <_Z10Trajectoryv+0x6ac>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d10b      	bne.n	80036ce <_Z10Trajectoryv+0x616>
				OutPosition = Distance+Currentpos;
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <_Z10Trajectoryv+0x6b0>)
 80036b8:	ed93 7a00 	vldr	s14, [r3]
 80036bc:	4b20      	ldr	r3, [pc, #128]	; (8003740 <_Z10Trajectoryv+0x688>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <_Z10Trajectoryv+0x68c>)
 80036c8:	edc3 7a00 	vstr	s15, [r3]
 80036cc:	e00c      	b.n	80036e8 <_Z10Trajectoryv+0x630>
			}
			else{
				OutPosition = (OutPosition * -1.0)+(2*Currentpos) ;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <_Z10Trajectoryv+0x688>)
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <_Z10Trajectoryv+0x68c>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e2:	4b18      	ldr	r3, [pc, #96]	; (8003744 <_Z10Trajectoryv+0x68c>)
 80036e4:	edc3 7a00 	vstr	s15, [r3]
			}

		    //Acceleration= -0.5;   // recieve frol UART (negative)
		    check = 100;
 80036e8:	4b23      	ldr	r3, [pc, #140]	; (8003778 <_Z10Trajectoryv+0x6c0>)
 80036ea:	2264      	movs	r2, #100	; 0x64
 80036ec:	701a      	strb	r2, [r3, #0]
		}

		////////=======>>> Tapezoidal==========//////////

		TimeinS = TimeinS + Dt;
 80036ee:	4b10      	ldr	r3, [pc, #64]	; (8003730 <_Z10Trajectoryv+0x678>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff28 	bl	8000548 <__aeabi_f2d>
 80036f8:	a309      	add	r3, pc, #36	; (adr r3, 8003720 <_Z10Trajectoryv+0x668>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f7fc fdc5 	bl	800028c <__adddf3>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd fa6d 	bl	8000be8 <__aeabi_d2f>
 800370e:	4603      	mov	r3, r0
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <_Z10Trajectoryv+0x678>)
 8003712:	6013      	str	r3, [r2, #0]
		//////<<< PID Tuning
		//OutVelocity = 0.523598775 ;
		//////>>> PID Tuning

		}
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	ecbd 8b04 	vpop	{d8-d9}
 800371c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003720:	47ae147b 	.word	0x47ae147b
 8003724:	3f847ae1 	.word	0x3f847ae1
 8003728:	200005a0 	.word	0x200005a0
 800372c:	2000059c 	.word	0x2000059c
 8003730:	200005a4 	.word	0x200005a4
 8003734:	2000058c 	.word	0x2000058c
 8003738:	3fe00000 	.word	0x3fe00000
 800373c:	20000588 	.word	0x20000588
 8003740:	200005a8 	.word	0x200005a8
 8003744:	20000590 	.word	0x20000590
 8003748:	20000594 	.word	0x20000594
 800374c:	20000598 	.word	0x20000598
 8003750:	2000071c 	.word	0x2000071c
 8003754:	20000720 	.word	0x20000720
 8003758:	3e5c28f6 	.word	0x3e5c28f6
 800375c:	20000724 	.word	0x20000724
 8003760:	3f99999a 	.word	0x3f99999a
 8003764:	20000738 	.word	0x20000738
 8003768:	20000584 	.word	0x20000584
 800376c:	40200000 	.word	0x40200000
 8003770:	3e4ccccd 	.word	0x3e4ccccd
 8003774:	3fb33333 	.word	0x3fb33333
 8003778:	20000739 	.word	0x20000739
 800377c:	00000000 	.word	0x00000000

08003780 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8003780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003784:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 10000){
 8003786:	f000 fdf5 	bl	8004374 <_Z6microsv>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	494e      	ldr	r1, [pc, #312]	; (80038c8 <_Z10Unwrappingv+0x148>)
 8003790:	6809      	ldr	r1, [r1, #0]
 8003792:	2000      	movs	r0, #0
 8003794:	4688      	mov	r8, r1
 8003796:	4681      	mov	r9, r0
 8003798:	ebb2 0408 	subs.w	r4, r2, r8
 800379c:	eb63 0509 	sbc.w	r5, r3, r9
 80037a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80037a4:	429c      	cmp	r4, r3
 80037a6:	f175 0300 	sbcs.w	r3, r5, #0
 80037aa:	bf2c      	ite	cs
 80037ac:	2301      	movcs	r3, #1
 80037ae:	2300      	movcc	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d07c      	beq.n	80038b0 <_Z10Unwrappingv+0x130>
		TimeUnwrap = micros();
 80037b6:	f000 fddd 	bl	8004374 <_Z6microsv>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <_Z10Unwrappingv+0x148>)
 80037c0:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI * 0.006136;
 80037c2:	4b42      	ldr	r3, [pc, #264]	; (80038cc <_Z10Unwrappingv+0x14c>)
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fc feac 	bl	8000524 <__aeabi_i2d>
 80037cc:	a33a      	add	r3, pc, #232	; (adr r3, 80038b8 <_Z10Unwrappingv+0x138>)
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	f7fc ff11 	bl	80005f8 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	f7fd fa03 	bl	8000be8 <__aeabi_d2f>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4a3a      	ldr	r2, [pc, #232]	; (80038d0 <_Z10Unwrappingv+0x150>)
 80037e6:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 80037e8:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <_Z10Unwrappingv+0x150>)
 80037ea:	ed93 7a00 	vldr	s14, [r3]
 80037ee:	4b39      	ldr	r3, [pc, #228]	; (80038d4 <_Z10Unwrappingv+0x154>)
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037f8:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <_Z10Unwrappingv+0x158>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	eef1 7a67 	vneg.f32	s15, s15
 8003802:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380a:	d80b      	bhi.n	8003824 <_Z10Unwrappingv+0xa4>
			P0 = P_0 + P_max;
 800380c:	4b33      	ldr	r3, [pc, #204]	; (80038dc <_Z10Unwrappingv+0x15c>)
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <_Z10Unwrappingv+0x160>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800381c:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <_Z10Unwrappingv+0x164>)
 800381e:	edc3 7a00 	vstr	s15, [r3]
 8003822:	e01f      	b.n	8003864 <_Z10Unwrappingv+0xe4>
		}
		else if(Pn - P_n >= e){
 8003824:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <_Z10Unwrappingv+0x150>)
 8003826:	ed93 7a00 	vldr	s14, [r3]
 800382a:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <_Z10Unwrappingv+0x154>)
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003834:	4b28      	ldr	r3, [pc, #160]	; (80038d8 <_Z10Unwrappingv+0x158>)
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	db0b      	blt.n	800385c <_Z10Unwrappingv+0xdc>
			P0 = P_0 - P_max;
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <_Z10Unwrappingv+0x15c>)
 8003846:	ed93 7a00 	vldr	s14, [r3]
 800384a:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <_Z10Unwrappingv+0x160>)
 800384c:	edd3 7a00 	vldr	s15, [r3]
 8003850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <_Z10Unwrappingv+0x164>)
 8003856:	edc3 7a00 	vstr	s15, [r3]
 800385a:	e003      	b.n	8003864 <_Z10Unwrappingv+0xe4>
		}
		else{
			P0 = P_0;
 800385c:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <_Z10Unwrappingv+0x15c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a20      	ldr	r2, [pc, #128]	; (80038e4 <_Z10Unwrappingv+0x164>)
 8003862:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <_Z10Unwrappingv+0x150>)
 8003866:	ed93 7a00 	vldr	s14, [r3]
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <_Z10Unwrappingv+0x164>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <_Z10Unwrappingv+0x168>)
 8003876:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.00613592;
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <_Z10Unwrappingv+0x14c>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fe50 	bl	8000524 <__aeabi_i2d>
 8003884:	a30e      	add	r3, pc, #56	; (adr r3, 80038c0 <_Z10Unwrappingv+0x140>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f7fc feb5 	bl	80005f8 <__aeabi_dmul>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4610      	mov	r0, r2
 8003894:	4619      	mov	r1, r3
 8003896:	f7fd f9a7 	bl	8000be8 <__aeabi_d2f>
 800389a:	4603      	mov	r3, r0
 800389c:	4a13      	ldr	r2, [pc, #76]	; (80038ec <_Z10Unwrappingv+0x16c>)
 800389e:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <_Z10Unwrappingv+0x150>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <_Z10Unwrappingv+0x154>)
 80038a6:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <_Z10Unwrappingv+0x164>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0b      	ldr	r2, [pc, #44]	; (80038dc <_Z10Unwrappingv+0x15c>)
 80038ae:	6013      	str	r3, [r2, #0]
	}
}
 80038b0:	bf00      	nop
 80038b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038b6:	bf00      	nop
 80038b8:	f540895d 	.word	0xf540895d
 80038bc:	3f79220f 	.word	0x3f79220f
 80038c0:	7bb1a72c 	.word	0x7bb1a72c
 80038c4:	3f7921fa 	.word	0x3f7921fa
 80038c8:	200006e8 	.word	0x200006e8
 80038cc:	20000570 	.word	0x20000570
 80038d0:	200006d8 	.word	0x200006d8
 80038d4:	200006dc 	.word	0x200006dc
 80038d8:	2000019c 	.word	0x2000019c
 80038dc:	200006d4 	.word	0x200006d4
 80038e0:	20000198 	.word	0x20000198
 80038e4:	200006d0 	.word	0x200006d0
 80038e8:	200006e0 	.word	0x200006e0
 80038ec:	200006e4 	.word	0x200006e4

080038f0 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 80038f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038f4:	b0d2      	sub	sp, #328	; 0x148
 80038f6:	af00      	add	r7, sp, #0

	if(micros() - TimeStampKalman >= 10000){
 80038f8:	f000 fd3c 	bl	8004374 <_Z6microsv>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4992      	ldr	r1, [pc, #584]	; (8003b4c <_Z12Kalmanfilterv+0x25c>)
 8003902:	6809      	ldr	r1, [r1, #0]
 8003904:	2000      	movs	r0, #0
 8003906:	4688      	mov	r8, r1
 8003908:	4681      	mov	r9, r0
 800390a:	ebb2 0408 	subs.w	r4, r2, r8
 800390e:	eb63 0509 	sbc.w	r5, r3, r9
 8003912:	f242 7310 	movw	r3, #10000	; 0x2710
 8003916:	429c      	cmp	r4, r3
 8003918:	f175 0300 	sbcs.w	r3, r5, #0
 800391c:	bf2c      	ite	cs
 800391e:	2301      	movcs	r3, #1
 8003920:	2300      	movcc	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 810a 	beq.w	8003b3e <_Z12Kalmanfilterv+0x24e>
		 TimeStampKalman = micros();
 800392a:	f000 fd23 	bl	8004374 <_Z6microsv>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4b86      	ldr	r3, [pc, #536]	; (8003b4c <_Z12Kalmanfilterv+0x25c>)
 8003934:	601a      	str	r2, [r3, #0]
	//if(millis() - TimeStampKalman >= 10){
	//	TimeStampKalman = millis();
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 8003936:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800393a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800393e:	4a84      	ldr	r2, [pc, #528]	; (8003b50 <_Z12Kalmanfilterv+0x260>)
 8003940:	4984      	ldr	r1, [pc, #528]	; (8003b54 <_Z12Kalmanfilterv+0x264>)
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ffee 	bl	8004924 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8003948:	4882      	ldr	r0, [pc, #520]	; (8003b54 <_Z12Kalmanfilterv+0x264>)
 800394a:	f001 f824 	bl	8004996 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 800394e:	4602      	mov	r2, r0
 8003950:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003954:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800395e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003962:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003966:	f107 0114 	add.w	r1, r7, #20
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f845 	bl	80049fa <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8003970:	463b      	mov	r3, r7
 8003972:	4619      	mov	r1, r3
 8003974:	4878      	ldr	r0, [pc, #480]	; (8003b58 <_Z12Kalmanfilterv+0x268>)
 8003976:	f001 f857 	bl	8004a28 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 800397a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800397e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003982:	4a76      	ldr	r2, [pc, #472]	; (8003b5c <_Z12Kalmanfilterv+0x26c>)
 8003984:	4976      	ldr	r1, [pc, #472]	; (8003b60 <_Z12Kalmanfilterv+0x270>)
 8003986:	4618      	mov	r0, r3
 8003988:	f001 f85d 	bl	8004a46 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 800398c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003990:	4619      	mov	r1, r3
 8003992:	4874      	ldr	r0, [pc, #464]	; (8003b64 <_Z12Kalmanfilterv+0x274>)
 8003994:	f001 f86e 	bl	8004a74 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8003998:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800399c:	4a72      	ldr	r2, [pc, #456]	; (8003b68 <_Z12Kalmanfilterv+0x278>)
 800399e:	4970      	ldr	r1, [pc, #448]	; (8003b60 <_Z12Kalmanfilterv+0x270>)
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 f876 	bl	8004a92 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 80039a6:	486e      	ldr	r0, [pc, #440]	; (8003b60 <_Z12Kalmanfilterv+0x270>)
 80039a8:	f001 f88a 	bl	8004ac0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 80039ac:	4603      	mov	r3, r0
 80039ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80039b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80039b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80039bc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 f890 	bl	8004ae6 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 80039c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80039ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80039d2:	4a61      	ldr	r2, [pc, #388]	; (8003b58 <_Z12Kalmanfilterv+0x268>)
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 f89d 	bl	8004b14 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 80039da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039de:	4619      	mov	r1, r3
 80039e0:	4862      	ldr	r0, [pc, #392]	; (8003b6c <_Z12Kalmanfilterv+0x27c>)
 80039e2:	f001 f8b5 	bl	8004b50 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 80039e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039ea:	4a61      	ldr	r2, [pc, #388]	; (8003b70 <_Z12Kalmanfilterv+0x280>)
 80039ec:	4961      	ldr	r1, [pc, #388]	; (8003b74 <_Z12Kalmanfilterv+0x284>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 feae 	bl	8004750 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 80039f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 feb8 	bl	800476e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 80039fe:	485e      	ldr	r0, [pc, #376]	; (8003b78 <_Z12Kalmanfilterv+0x288>)
 8003a00:	f001 f8b5 	bl	8004b6e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a0a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a0e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8003a12:	4956      	ldr	r1, [pc, #344]	; (8003b6c <_Z12Kalmanfilterv+0x27c>)
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 f8bd 	bl	8004b94 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 8003a1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a1e:	4a53      	ldr	r2, [pc, #332]	; (8003b6c <_Z12Kalmanfilterv+0x27c>)
 8003a20:	4955      	ldr	r1, [pc, #340]	; (8003b78 <_Z12Kalmanfilterv+0x288>)
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 f8cd 	bl	8004bc2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003a28:	4853      	ldr	r0, [pc, #332]	; (8003b78 <_Z12Kalmanfilterv+0x288>)
 8003a2a:	f001 f8a0 	bl	8004b6e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003a38:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003a3c:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f8d5 	bl	8004bf0 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 8003a46:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003a4a:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8003a4e:	4a4b      	ldr	r2, [pc, #300]	; (8003b7c <_Z12Kalmanfilterv+0x28c>)
 8003a50:	4618      	mov	r0, r3
 8003a52:	f001 f8e4 	bl	8004c1e <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8003a56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a5a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 f937 	bl	8004cd4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8003a66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a6a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003a6e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f966 	bl	8004d44 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003a78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4840      	ldr	r0, [pc, #256]	; (8003b80 <_Z12Kalmanfilterv+0x290>)
 8003a80:	f001 f977 	bl	8004d72 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8003a84:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003a88:	4a36      	ldr	r2, [pc, #216]	; (8003b64 <_Z12Kalmanfilterv+0x274>)
 8003a8a:	493b      	ldr	r1, [pc, #236]	; (8003b78 <_Z12Kalmanfilterv+0x288>)
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 f97f 	bl	8004d90 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003a92:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003a96:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003a9a:	4936      	ldr	r1, [pc, #216]	; (8003b74 <_Z12Kalmanfilterv+0x284>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 f98e 	bl	8004dbe <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003aa2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003aa6:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8003aaa:	4935      	ldr	r1, [pc, #212]	; (8003b80 <_Z12Kalmanfilterv+0x290>)
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 f9c3 	bl	8004e38 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 8003ab2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ab6:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8003aba:	492a      	ldr	r1, [pc, #168]	; (8003b64 <_Z12Kalmanfilterv+0x274>)
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 f9e8 	bl	8004e92 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 8003ac2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4824      	ldr	r0, [pc, #144]	; (8003b5c <_Z12Kalmanfilterv+0x26c>)
 8003aca:	f001 fa00 	bl	8004ece <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 8003ace:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8003ad2:	4a29      	ldr	r2, [pc, #164]	; (8003b78 <_Z12Kalmanfilterv+0x288>)
 8003ad4:	492a      	ldr	r1, [pc, #168]	; (8003b80 <_Z12Kalmanfilterv+0x290>)
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fa08 	bl	8004eec <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003adc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ae0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8003ae4:	4927      	ldr	r1, [pc, #156]	; (8003b84 <_Z12Kalmanfilterv+0x294>)
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fa17 	bl	8004f1a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003aec:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003af0:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <_Z12Kalmanfilterv+0x27c>)
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fa4c 	bl	8004f94 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 8003afc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003b00:	4619      	mov	r1, r3
 8003b02:	4819      	ldr	r0, [pc, #100]	; (8003b68 <_Z12Kalmanfilterv+0x278>)
 8003b04:	f001 fa5d 	bl	8004fc2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4815      	ldr	r0, [pc, #84]	; (8003b64 <_Z12Kalmanfilterv+0x274>)
 8003b0e:	f000 fec5 	bl	800489c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003b12:	4603      	mov	r3, r0
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <_Z12Kalmanfilterv+0x298>)
 8003b18:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4811      	ldr	r0, [pc, #68]	; (8003b64 <_Z12Kalmanfilterv+0x274>)
 8003b20:	f000 febc 	bl	800489c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003b24:	4603      	mov	r3, r0
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <_Z12Kalmanfilterv+0x29c>)
 8003b2a:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2102      	movs	r1, #2
 8003b30:	480c      	ldr	r0, [pc, #48]	; (8003b64 <_Z12Kalmanfilterv+0x274>)
 8003b32:	f000 feb3 	bl	800489c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003b36:	4603      	mov	r3, r0
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <_Z12Kalmanfilterv+0x2a0>)
 8003b3c:	6013      	str	r3, [r2, #0]
		 //runtime = micros()-TimeStampKalman;

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 8003b3e:	bf00      	nop
 8003b40:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200005b4 	.word	0x200005b4
 8003b50:	20000194 	.word	0x20000194
 8003b54:	20000670 	.word	0x20000670
 8003b58:	2000067c 	.word	0x2000067c
 8003b5c:	200006ac 	.word	0x200006ac
 8003b60:	200005b8 	.word	0x200005b8
 8003b64:	200006a0 	.word	0x200006a0
 8003b68:	20000600 	.word	0x20000600
 8003b6c:	200005dc 	.word	0x200005dc
 8003b70:	200006e0 	.word	0x200006e0
 8003b74:	20000654 	.word	0x20000654
 8003b78:	20000664 	.word	0x20000664
 8003b7c:	2000064c 	.word	0x2000064c
 8003b80:	20000658 	.word	0x20000658
 8003b84:	20000624 	.word	0x20000624
 8003b88:	200006c4 	.word	0x200006c4
 8003b8c:	200006c8 	.word	0x200006c8
 8003b90:	200006cc 	.word	0x200006cc

08003b94 <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 8003b94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b98:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 10000){
 8003b9a:	f000 fbeb 	bl	8004374 <_Z6microsv>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4936      	ldr	r1, [pc, #216]	; (8003c7c <_Z11PIDPositionv+0xe8>)
 8003ba4:	6809      	ldr	r1, [r1, #0]
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	4688      	mov	r8, r1
 8003baa:	4681      	mov	r9, r0
 8003bac:	ebb2 0408 	subs.w	r4, r2, r8
 8003bb0:	eb63 0509 	sbc.w	r5, r3, r9
 8003bb4:	f242 7310 	movw	r3, #10000	; 0x2710
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	f175 0300 	sbcs.w	r3, r5, #0
 8003bbe:	bf2c      	ite	cs
 8003bc0:	2301      	movcs	r3, #1
 8003bc2:	2300      	movcc	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d055      	beq.n	8003c76 <_Z11PIDPositionv+0xe2>
		TimeStampPID_P = micros();
 8003bca:	f000 fbd3 	bl	8004374 <_Z6microsv>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <_Z11PIDPositionv+0xe8>)
 8003bd4:	601a      	str	r2, [r3, #0]

	//if(millis() - TimeStampPID_P >= 10){
	//	TimeStampPID_P = millis();

		ErrPos[0] = OutPosition - KalP;
 8003bd6:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <_Z11PIDPositionv+0xec>)
 8003bd8:	ed93 7a00 	vldr	s14, [r3]
 8003bdc:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <_Z11PIDPositionv+0xf0>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be6:	4b28      	ldr	r3, [pc, #160]	; (8003c88 <_Z11PIDPositionv+0xf4>)
 8003be8:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 8003bec:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <_Z11PIDPositionv+0xf4>)
 8003bee:	ed93 7a00 	vldr	s14, [r3]
 8003bf2:	4b26      	ldr	r3, [pc, #152]	; (8003c8c <_Z11PIDPositionv+0xf8>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <_Z11PIDPositionv+0xf8>)
 8003bfe:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <_Z11PIDPositionv+0xf4>)
 8003c04:	ed93 7a00 	vldr	s14, [r3]
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <_Z11PIDPositionv+0xfc>)
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <_Z11PIDPositionv+0x100>)
 8003c14:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 8003c18:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <_Z11PIDPositionv+0x104>)
 8003c1a:	ed93 7a00 	vldr	s14, [r3]
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <_Z11PIDPositionv+0xf8>)
 8003c20:	edd3 7a00 	vldr	s15, [r3]
 8003c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c28:	4b1c      	ldr	r3, [pc, #112]	; (8003c9c <_Z11PIDPositionv+0x108>)
 8003c2a:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8003c2e:	4b16      	ldr	r3, [pc, #88]	; (8003c88 <_Z11PIDPositionv+0xf4>)
 8003c30:	ed93 7a00 	vldr	s14, [r3]
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <_Z11PIDPositionv+0xf4>)
 8003c36:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c3e:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <_Z11PIDPositionv+0x10c>)
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c48:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <_Z11PIDPositionv+0x110>)
 8003c4a:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 8003c4e:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <_Z11PIDPositionv+0x100>)
 8003c50:	ed93 7a00 	vldr	s14, [r3]
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <_Z11PIDPositionv+0x108>)
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c5e:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <_Z11PIDPositionv+0x110>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <_Z11PIDPositionv+0x114>)
 8003c6a:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <_Z11PIDPositionv+0xf4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <_Z11PIDPositionv+0xf4>)
 8003c74:	6053      	str	r3, [r2, #4]
	}
}
 8003c76:	bf00      	nop
 8003c78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c7c:	200006ec 	.word	0x200006ec
 8003c80:	20000590 	.word	0x20000590
 8003c84:	200006c4 	.word	0x200006c4
 8003c88:	200006f4 	.word	0x200006f4
 8003c8c:	20000700 	.word	0x20000700
 8003c90:	200001a0 	.word	0x200001a0
 8003c94:	20000704 	.word	0x20000704
 8003c98:	200001a4 	.word	0x200001a4
 8003c9c:	20000708 	.word	0x20000708
 8003ca0:	200001a8 	.word	0x200001a8
 8003ca4:	2000070c 	.word	0x2000070c
 8003ca8:	200006fc 	.word	0x200006fc

08003cac <_Z11PIDVelocityv>:

void PIDVelocity(){
 8003cac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cb0:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 10000){
 8003cb2:	f000 fb5f 	bl	8004374 <_Z6microsv>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4930      	ldr	r1, [pc, #192]	; (8003d7c <_Z11PIDVelocityv+0xd0>)
 8003cbc:	6809      	ldr	r1, [r1, #0]
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	4688      	mov	r8, r1
 8003cc2:	4681      	mov	r9, r0
 8003cc4:	ebb2 0408 	subs.w	r4, r2, r8
 8003cc8:	eb63 0509 	sbc.w	r5, r3, r9
 8003ccc:	f242 7310 	movw	r3, #10000	; 0x2710
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	f175 0300 	sbcs.w	r3, r5, #0
 8003cd6:	bf2c      	ite	cs
 8003cd8:	2301      	movcs	r3, #1
 8003cda:	2300      	movcc	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d048      	beq.n	8003d74 <_Z11PIDVelocityv+0xc8>
		TimeStampPID_V = micros();
 8003ce2:	f000 fb47 	bl	8004374 <_Z6microsv>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <_Z11PIDVelocityv+0xd0>)
 8003cec:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8003cee:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <_Z11PIDVelocityv+0xd4>)
 8003cf0:	ed93 7a00 	vldr	s14, [r3]
 8003cf4:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <_Z11PIDVelocityv+0xd8>)
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <_Z11PIDVelocityv+0xdc>)
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <_Z11PIDVelocityv+0xe0>)
 8003d0a:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	; (8003d8c <_Z11PIDVelocityv+0xe0>)
 8003d10:	ed93 7a00 	vldr	s14, [r3]
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <_Z11PIDVelocityv+0xe4>)
 8003d16:	edd3 7a00 	vldr	s15, [r3]
 8003d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <_Z11PIDVelocityv+0xe4>)
 8003d20:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <_Z11PIDVelocityv+0xe0>)
 8003d26:	ed93 7a00 	vldr	s14, [r3]
 8003d2a:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <_Z11PIDVelocityv+0xe8>)
 8003d2c:	edd3 7a00 	vldr	s15, [r3]
 8003d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d34:	4b18      	ldr	r3, [pc, #96]	; (8003d98 <_Z11PIDVelocityv+0xec>)
 8003d36:	edd3 6a00 	vldr	s13, [r3]
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <_Z11PIDVelocityv+0xe4>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <_Z11PIDVelocityv+0xe0>)
 8003d4a:	edd3 6a00 	vldr	s13, [r3]
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <_Z11PIDVelocityv+0xe0>)
 8003d50:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d58:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <_Z11PIDVelocityv+0xf0>)
 8003d5a:	edd3 7a00 	vldr	s15, [r3]
 8003d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <_Z11PIDVelocityv+0xf4>)
 8003d68:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <_Z11PIDVelocityv+0xe0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <_Z11PIDVelocityv+0xe0>)
 8003d72:	6053      	str	r3, [r2, #4]
		}
}
 8003d74:	bf00      	nop
 8003d76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2000072c 	.word	0x2000072c
 8003d80:	20000594 	.word	0x20000594
 8003d84:	200006fc 	.word	0x200006fc
 8003d88:	200006c8 	.word	0x200006c8
 8003d8c:	20000710 	.word	0x20000710
 8003d90:	20000728 	.word	0x20000728
 8003d94:	2000071c 	.word	0x2000071c
 8003d98:	20000720 	.word	0x20000720
 8003d9c:	200001a8 	.word	0x200001a8
 8003da0:	20000730 	.word	0x20000730
 8003da4:	00000000 	.word	0x00000000

08003da8 <_Z11controlloopv>:

void controlloop(){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	static uint16_t counter_ctl = 0;
	uint16_t FinalBitX = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	80fb      	strh	r3, [r7, #6]
	FinalBitX = round(Finalposition * 512 / M_PI);
 8003db2:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <_Z11controlloopv+0x158>)
 8003db4:	edd3 7a00 	vldr	s15, [r3]
 8003db8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003f04 <_Z11controlloopv+0x15c>
 8003dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dc0:	ee17 0a90 	vmov	r0, s15
 8003dc4:	f7fc fbc0 	bl	8000548 <__aeabi_f2d>
 8003dc8:	a347      	add	r3, pc, #284	; (adr r3, 8003ee8 <_Z11controlloopv+0x140>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fd3d 	bl	800084c <__aeabi_ddiv>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	ec43 2b17 	vmov	d7, r2, r3
 8003dda:	eeb0 0a47 	vmov.f32	s0, s14
 8003dde:	eef0 0a67 	vmov.f32	s1, s15
 8003de2:	f019 fa09 	bl	801d1f8 <round>
 8003de6:	ec53 2b10 	vmov	r2, r3, d0
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	f7fc fedb 	bl	8000ba8 <__aeabi_d2uiz>
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
	///// Conv FinalPos back to bit1024:
	///// FinalPos x (Pi / 180) x (1024/360) ==> FinalPos x 512/pi


	if( abs( Finalposition - KalP) < 0.001 && abs(KalV) < 0.0005){
 8003df6:	4b42      	ldr	r3, [pc, #264]	; (8003f00 <_Z11controlloopv+0x158>)
 8003df8:	ed93 7a00 	vldr	s14, [r3]
 8003dfc:	4b42      	ldr	r3, [pc, #264]	; (8003f08 <_Z11controlloopv+0x160>)
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e06:	eeb0 0a67 	vmov.f32	s0, s15
 8003e0a:	f7fd f8bf 	bl	8000f8c <_ZSt3absf>
 8003e0e:	ee10 3a10 	vmov	r3, s0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fb98 	bl	8000548 <__aeabi_f2d>
 8003e18:	a335      	add	r3, pc, #212	; (adr r3, 8003ef0 <_Z11controlloopv+0x148>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc fe5d 	bl	8000adc <__aeabi_dcmplt>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d015      	beq.n	8003e54 <_Z11controlloopv+0xac>
 8003e28:	4b38      	ldr	r3, [pc, #224]	; (8003f0c <_Z11controlloopv+0x164>)
 8003e2a:	edd3 7a00 	vldr	s15, [r3]
 8003e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e32:	f7fd f8ab 	bl	8000f8c <_ZSt3absf>
 8003e36:	ee10 3a10 	vmov	r3, s0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc fb84 	bl	8000548 <__aeabi_f2d>
 8003e40:	a32d      	add	r3, pc, #180	; (adr r3, 8003ef8 <_Z11controlloopv+0x150>)
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f7fc fe49 	bl	8000adc <__aeabi_dcmplt>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <_Z11controlloopv+0xac>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <_Z11controlloopv+0xae>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <_Z11controlloopv+0xd4>
		PWMOut = 0;
 8003e5a:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <_Z11controlloopv+0x168>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	801a      	strh	r2, [r3, #0]
		check = 8;
 8003e60:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <_Z11controlloopv+0x16c>)
 8003e62:	2208      	movs	r2, #8
 8003e64:	701a      	strb	r2, [r3, #0]

		flagNewpos = 0;
 8003e66:	4b2c      	ldr	r3, [pc, #176]	; (8003f18 <_Z11controlloopv+0x170>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <_Z11controlloopv+0x174>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 8003e72:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <_Z11controlloopv+0x178>)
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
		PIDVelocity();
		MotDrvCytron();
	}


}
 8003e7a:	e030      	b.n	8003ede <_Z11controlloopv+0x136>
	else if( abs(FinalBitX- BinPosXI) <= 1){
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	4a29      	ldr	r2, [pc, #164]	; (8003f24 <_Z11controlloopv+0x17c>)
 8003e80:	8812      	ldrh	r2, [r2, #0]
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bfb8      	it	lt
 8003e88:	425b      	neglt	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	dc21      	bgt.n	8003ed2 <_Z11controlloopv+0x12a>
		counter_ctl++;
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <_Z11controlloopv+0x180>)
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <_Z11controlloopv+0x180>)
 8003e98:	801a      	strh	r2, [r3, #0]
		check = 9;
 8003e9a:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <_Z11controlloopv+0x16c>)
 8003e9c:	2209      	movs	r2, #9
 8003e9e:	701a      	strb	r2, [r3, #0]
		if(counter_ctl >= 800){
 8003ea0:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <_Z11controlloopv+0x180>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003ea8:	d319      	bcc.n	8003ede <_Z11controlloopv+0x136>
		counter_ctl = 0;
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <_Z11controlloopv+0x180>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	801a      	strh	r2, [r3, #0]
		PWMOut = 0;
 8003eb0:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <_Z11controlloopv+0x168>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	801a      	strh	r2, [r3, #0]
		check = 10;
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <_Z11controlloopv+0x16c>)
 8003eb8:	220a      	movs	r2, #10
 8003eba:	701a      	strb	r2, [r3, #0]
		flagNewpos = 0;
 8003ebc:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <_Z11controlloopv+0x170>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
		flag_finishTra = 1;
 8003ec2:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <_Z11controlloopv+0x174>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]
		TimeinS = 0;
 8003ec8:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <_Z11controlloopv+0x178>)
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	e005      	b.n	8003ede <_Z11controlloopv+0x136>
		PIDPosition();
 8003ed2:	f7ff fe5f 	bl	8003b94 <_Z11PIDPositionv>
		PIDVelocity();
 8003ed6:	f7ff fee9 	bl	8003cac <_Z11PIDVelocityv>
		MotDrvCytron();
 8003eda:	f000 f829 	bl	8003f30 <_Z12MotDrvCytronv>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	54442d18 	.word	0x54442d18
 8003eec:	400921fb 	.word	0x400921fb
 8003ef0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ef4:	3f50624d 	.word	0x3f50624d
 8003ef8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003efc:	3f40624d 	.word	0x3f40624d
 8003f00:	20000580 	.word	0x20000580
 8003f04:	44000000 	.word	0x44000000
 8003f08:	200006c4 	.word	0x200006c4
 8003f0c:	200006c8 	.word	0x200006c8
 8003f10:	20000574 	.word	0x20000574
 8003f14:	20000739 	.word	0x20000739
 8003f18:	200005ac 	.word	0x200005ac
 8003f1c:	20000504 	.word	0x20000504
 8003f20:	200005a4 	.word	0x200005a4
 8003f24:	20000570 	.word	0x20000570
 8003f28:	200007e6 	.word	0x200007e6
 8003f2c:	00000000 	.word	0x00000000

08003f30 <_Z12MotDrvCytronv>:

void MotDrvCytron(){
 8003f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f34:	af00      	add	r7, sp, #0
	//   direction chk
	//if(u_contr > 0){mot_dirctn= 0;}
	//else if(u_contr < 0) {mot_dirctn = 1;}
	//else{PWMOut = 0;}

	if(micros() - TimeDrive >= 10000){
 8003f36:	f000 fa1d 	bl	8004374 <_Z6microsv>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4932      	ldr	r1, [pc, #200]	; (8004008 <_Z12MotDrvCytronv+0xd8>)
 8003f40:	6809      	ldr	r1, [r1, #0]
 8003f42:	2000      	movs	r0, #0
 8003f44:	4688      	mov	r8, r1
 8003f46:	4681      	mov	r9, r0
 8003f48:	ebb2 0408 	subs.w	r4, r2, r8
 8003f4c:	eb63 0509 	sbc.w	r5, r3, r9
 8003f50:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f54:	429c      	cmp	r4, r3
 8003f56:	f175 0300 	sbcs.w	r3, r5, #0
 8003f5a:	bf2c      	ite	cs
 8003f5c:	2301      	movcs	r3, #1
 8003f5e:	2300      	movcc	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d049      	beq.n	8003ffa <_Z12MotDrvCytronv+0xca>
			TimeDrive = micros();
 8003f66:	f000 fa05 	bl	8004374 <_Z6microsv>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4b26      	ldr	r3, [pc, #152]	; (8004008 <_Z12MotDrvCytronv+0xd8>)
 8003f70:	601a      	str	r2, [r3, #0]
			u_contr = u_contr * 833.3;
 8003f72:	4b26      	ldr	r3, [pc, #152]	; (800400c <_Z12MotDrvCytronv+0xdc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fae6 	bl	8000548 <__aeabi_f2d>
 8003f7c:	a320      	add	r3, pc, #128	; (adr r3, 8004000 <_Z12MotDrvCytronv+0xd0>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc fb39 	bl	80005f8 <__aeabi_dmul>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7fc fe2b 	bl	8000be8 <__aeabi_d2f>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a1d      	ldr	r2, [pc, #116]	; (800400c <_Z12MotDrvCytronv+0xdc>)
 8003f96:	6013      	str	r3, [r2, #0]
			// u_contr = 2500;
			if(u_contr > 0){
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <_Z12MotDrvCytronv+0xdc>)
 8003f9a:	edd3 7a00 	vldr	s15, [r3]
 8003f9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa6:	dd03      	ble.n	8003fb0 <_Z12MotDrvCytronv+0x80>
				mot_dirctn= 1;
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <_Z12MotDrvCytronv+0xe0>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	e00e      	b.n	8003fce <_Z12MotDrvCytronv+0x9e>
			}
			else if(u_contr < 0) {
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <_Z12MotDrvCytronv+0xdc>)
 8003fb2:	edd3 7a00 	vldr	s15, [r3]
 8003fb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbe:	d503      	bpl.n	8003fc8 <_Z12MotDrvCytronv+0x98>
				mot_dirctn = 0;
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <_Z12MotDrvCytronv+0xe0>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e002      	b.n	8003fce <_Z12MotDrvCytronv+0x9e>
			}
			else{
				PWMOut = 0;
 8003fc8:	4b12      	ldr	r3, [pc, #72]	; (8004014 <_Z12MotDrvCytronv+0xe4>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	801a      	strh	r2, [r3, #0]
			}
	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <_Z12MotDrvCytronv+0xdc>)
 8003fd0:	edd3 7a00 	vldr	s15, [r3]
 8003fd4:	eef0 7ae7 	vabs.f32	s15, s15
 8003fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fdc:	ee17 3a90 	vmov	r3, s15
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <_Z12MotDrvCytronv+0xe4>)
 8003fe4:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <_Z12MotDrvCytronv+0xe4>)
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d903      	bls.n	8003ffa <_Z12MotDrvCytronv+0xca>
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <_Z12MotDrvCytronv+0xe4>)
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	801a      	strh	r2, [r3, #0]
	//if(PWMOut < 1600 ){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
	//&& fabsf(ErrPos[0]) >= 4
	//if(flag_finishTra == 1){PWMOut = 0;}
	}
}
 8003ffa:	bf00      	nop
 8003ffc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004000:	66666666 	.word	0x66666666
 8004004:	408a0a66 	.word	0x408a0a66
 8004008:	20000734 	.word	0x20000734
 800400c:	20000730 	.word	0x20000730
 8004010:	2000057c 	.word	0x2000057c
 8004014:	20000574 	.word	0x20000574

08004018 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	460a      	mov	r2, r1
 8004022:	80fb      	strh	r3, [r7, #6]
 8004024:	4613      	mov	r3, r2
 8004026:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8004028:	2300      	movs	r3, #0
 800402a:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 800402c:	88fa      	ldrh	r2, [r7, #6]
 800402e:	797b      	ldrb	r3, [r7, #5]
 8004030:	3b01      	subs	r3, #1
 8004032:	fa42 f303 	asr.w	r3, r2, r3
 8004036:	b29b      	uxth	r3, r3
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 800403e:	2301      	movs	r3, #1
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	797b      	ldrb	r3, [r7, #5]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	429a      	cmp	r2, r3
 8004048:	da1e      	bge.n	8004088 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 8004052:	88fa      	ldrh	r2, [r7, #6]
 8004054:	7979      	ldrb	r1, [r7, #5]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3301      	adds	r3, #1
 800405a:	1acb      	subs	r3, r1, r3
 800405c:	fa42 f303 	asr.w	r3, r2, r3
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d103      	bne.n	8004076 <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 800406e:	8afb      	ldrh	r3, [r7, #22]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	82fb      	strh	r3, [r7, #22]
 8004074:	e004      	b.n	8004080 <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8004076:	8afb      	ldrh	r3, [r7, #22]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	b29b      	uxth	r3, r3
 800407c:	3301      	adds	r3, #1
 800407e:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3301      	adds	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e7dc      	b.n	8004042 <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8004088:	8afb      	ldrh	r3, [r7, #22]
}
 800408a:	4618      	mov	r0, r3
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Xetting,
 800409e:	2364      	movs	r3, #100	; 0x64
 80040a0:	9302      	str	r3, [sp, #8]
 80040a2:	2316      	movs	r3, #22
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <_Z14IOExpenderInitv+0x24>)
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2301      	movs	r3, #1
 80040ac:	2200      	movs	r2, #0
 80040ae:	2140      	movs	r1, #64	; 0x40
 80040b0:	4803      	ldr	r0, [pc, #12]	; (80040c0 <_Z14IOExpenderInitv+0x28>)
 80040b2:	f013 fc9d 	bl	80179f0 <HAL_I2C_Mem_Write>
			0x16, 100);

}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	200001c8 	.word	0x200001c8
 80040c0:	20000274 	.word	0x20000274

080040c4 <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af04      	add	r7, sp, #16
 80040ca:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <_Z14AbsEncI2CReadxPh+0x94>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <_Z14AbsEncI2CReadxPh+0x20>
 80040d4:	4b21      	ldr	r3, [pc, #132]	; (800415c <_Z14AbsEncI2CReadxPh+0x98>)
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d101      	bne.n	80040e4 <_Z14AbsEncI2CReadxPh+0x20>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <_Z14AbsEncI2CReadxPh+0x22>
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d032      	beq.n	8004150 <_Z14AbsEncI2CReadxPh+0x8c>

		HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 80040ea:	2364      	movs	r3, #100	; 0x64
 80040ec:	9302      	str	r3, [sp, #8]
 80040ee:	2302      	movs	r3, #2
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2301      	movs	r3, #1
 80040f8:	2212      	movs	r2, #18
 80040fa:	2140      	movs	r1, #64	; 0x40
 80040fc:	4817      	ldr	r0, [pc, #92]	; (800415c <_Z14AbsEncI2CReadxPh+0x98>)
 80040fe:	f013 fd71 	bl	8017be4 <HAL_I2C_Mem_Read>
								RawRAB, 2, 100);

		GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8004102:	4b17      	ldr	r3, [pc, #92]	; (8004160 <_Z14AbsEncI2CReadxPh+0x9c>)
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	b21a      	sxth	r2, r3
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <_Z14AbsEncI2CReadxPh+0x9c>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b21b      	sxth	r3, r3
 8004110:	4313      	orrs	r3, r2
 8004112:	b21b      	sxth	r3, r3
 8004114:	b29a      	uxth	r2, r3
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <_Z14AbsEncI2CReadxPh+0xa0>)
 8004118:	801a      	strh	r2, [r3, #0]
		// 1023- to reverse
		BinPosXI = 1023 - (GraytoBinario(GrayCBitXI, 10) + POSOFFSET) ;//
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <_Z14AbsEncI2CReadxPh+0xa0>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	210a      	movs	r1, #10
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff79 	bl	8004018 <_Z13GraytoBinarioth>
 8004126:	4603      	mov	r3, r0
 8004128:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800412c:	b29a      	uxth	r2, r3
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <_Z14AbsEncI2CReadxPh+0xa4>)
 8004130:	801a      	strh	r2, [r3, #0]
		if (BinPosXI >= 1024){BinPosXI %= 1024;}
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <_Z14AbsEncI2CReadxPh+0xa4>)
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413a:	d306      	bcc.n	800414a <_Z14AbsEncI2CReadxPh+0x86>
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <_Z14AbsEncI2CReadxPh+0xa4>)
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004144:	b29a      	uxth	r2, r3
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <_Z14AbsEncI2CReadxPh+0xa4>)
 8004148:	801a      	strh	r2, [r3, #0]

		flag_absenc = 0;
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <_Z14AbsEncI2CReadxPh+0x94>)
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
//			flag_absenc = 0;
//		break;
//
//		}
	}
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000572 	.word	0x20000572
 800415c:	20000274 	.word	0x20000274
 8004160:	2000056c 	.word	0x2000056c
 8004164:	2000056e 	.word	0x2000056e
 8004168:	20000570 	.word	0x20000570

0800416c <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////

void Efft_activate(){
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8004172:	2345      	movs	r3, #69	; 0x45
 8004174:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;


	switch(efshoot){
 8004176:	4b25      	ldr	r3, [pc, #148]	; (800420c <_Z13Efft_activatev+0xa0>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d025      	beq.n	80041ca <_Z13Efft_activatev+0x5e>
	default:
	case ef_INIT:
		if(flag_efftDis == 1){
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <_Z13Efft_activatev+0xa4>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d106      	bne.n	8004194 <_Z13Efft_activatev+0x28>
			flag_efftActi = 0;
 8004186:	4b23      	ldr	r3, [pc, #140]	; (8004214 <_Z13Efft_activatev+0xa8>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
			efshoot = ef_INIT;
 800418c:	4b1f      	ldr	r3, [pc, #124]	; (800420c <_Z13Efft_activatev+0xa0>)
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
			}
		}
	break;
 8004192:	e034      	b.n	80041fe <_Z13Efft_activatev+0x92>
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <_Z13Efft_activatev+0xa8>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <_Z13Efft_activatev+0x40>
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <_Z13Efft_activatev+0xac>)
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d101      	bne.n	80041ac <_Z13Efft_activatev+0x40>
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <_Z13Efft_activatev+0x42>
 80041ac:	2300      	movs	r3, #0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d025      	beq.n	80041fe <_Z13Efft_activatev+0x92>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 80041b2:	1dfa      	adds	r2, r7, #7
 80041b4:	2301      	movs	r3, #1
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	2146      	movs	r1, #70	; 0x46
 80041bc:	4816      	ldr	r0, [pc, #88]	; (8004218 <_Z13Efft_activatev+0xac>)
 80041be:	f013 ff37 	bl	8018030 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_shoot;
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <_Z13Efft_activatev+0xa0>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
	break;
 80041c8:	e019      	b.n	80041fe <_Z13Efft_activatev+0x92>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <_Z13Efft_activatev+0xac>)
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <_Z13Efft_activatev+0x96>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 80041e0:	1dfa      	adds	r2, r7, #7
 80041e2:	2320      	movs	r3, #32
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	2301      	movs	r3, #1
 80041e8:	2146      	movs	r1, #70	; 0x46
 80041ea:	480b      	ldr	r0, [pc, #44]	; (8004218 <_Z13Efft_activatev+0xac>)
 80041ec:	f013 ff20 	bl	8018030 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <_Z13Efft_activatev+0xa0>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <_Z13Efft_activatev+0xa8>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	701a      	strb	r2, [r3, #0]
			//trig_efftRead = 1;
		}
	break;
 80041fc:	e001      	b.n	8004202 <_Z13Efft_activatev+0x96>
	break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <_Z13Efft_activatev+0x98>
	break;
 8004202:	bf00      	nop
	}
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200007e8 	.word	0x200007e8
 8004210:	200001ac 	.word	0x200001ac
 8004214:	2000073b 	.word	0x2000073b
 8004218:	200002c8 	.word	0x200002c8

0800421c <_Z9Efft_readPh>:

void Efft_read(uint8_t *Rddata){
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af02      	add	r7, sp, #8
 8004222:	6078      	str	r0, [r7, #4]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <_Z9Efft_readPh+0x88>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d01a      	beq.n	8004262 <_Z9Efft_readPh+0x46>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <_Z9Efft_readPh+0x8c>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d007      	beq.n	8004244 <_Z9Efft_readPh+0x28>
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <_Z9Efft_readPh+0x90>)
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	d101      	bne.n	8004244 <_Z9Efft_readPh+0x28>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <_Z9Efft_readPh+0x2a>
 8004244:	2300      	movs	r3, #0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d025      	beq.n	8004296 <_Z9Efft_readPh+0x7a>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 800424a:	2302      	movs	r3, #2
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	2301      	movs	r3, #1
 8004250:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <_Z9Efft_readPh+0x94>)
 8004252:	2146      	movs	r1, #70	; 0x46
 8004254:	4815      	ldr	r0, [pc, #84]	; (80042ac <_Z9Efft_readPh+0x90>)
 8004256:	f013 feeb 	bl	8018030 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <_Z9Efft_readPh+0x88>)
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
		}
	break;
 8004260:	e019      	b.n	8004296 <_Z9Efft_readPh+0x7a>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8004262:	4b12      	ldr	r3, [pc, #72]	; (80042ac <_Z9Efft_readPh+0x90>)
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b20      	cmp	r3, #32
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d010      	beq.n	800429a <_Z9Efft_readPh+0x7e>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8004278:	2320      	movs	r3, #32
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2301      	movs	r3, #1
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	2146      	movs	r1, #70	; 0x46
 8004282:	480a      	ldr	r0, [pc, #40]	; (80042ac <_Z9Efft_readPh+0x90>)
 8004284:	f013 ff9a 	bl	80181bc <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8004288:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <_Z9Efft_readPh+0x8c>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <_Z9Efft_readPh+0x88>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
			}
	break;
 8004294:	e001      	b.n	800429a <_Z9Efft_readPh+0x7e>
	break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <_Z9Efft_readPh+0x80>
	break;
 800429a:	bf00      	nop
	}

}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	200007e9 	.word	0x200007e9
 80042a8:	2000073c 	.word	0x2000073c
 80042ac:	200002c8 	.word	0x200002c8
 80042b0:	200001de 	.word	0x200001de

080042b4 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	80fb      	strh	r3, [r7, #6]
	//============// EMER ////=====================
	if(GPIO_Pin == GPIO_PIN_11){
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c4:	d108      	bne.n	80042d8 <HAL_GPIO_EXTI_Callback+0x24>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		grandState = emer;
 80042c6:	4b27      	ldr	r3, [pc, #156]	; (8004364 <HAL_GPIO_EXTI_Callback+0xb0>)
 80042c8:	2203      	movs	r2, #3
 80042ca:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <HAL_GPIO_EXTI_Callback+0xb4>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <HAL_GPIO_EXTI_Callback+0xb8>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//=============// Stop ////======================
	if(GPIO_Pin == GPIO_PIN_10){
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042de:	d110      	bne.n	8004302 <HAL_GPIO_EXTI_Callback+0x4e>
		PWMOut = 0;
 80042e0:	4b22      	ldr	r3, [pc, #136]	; (800436c <HAL_GPIO_EXTI_Callback+0xb8>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_GPIO_EXTI_Callback+0xb4>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_GPIO_EXTI_Callback+0xb0>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d103      	bne.n	80042fc <HAL_GPIO_EXTI_Callback+0x48>
 80042f4:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <HAL_GPIO_EXTI_Callback+0xb0>)
 80042f6:	2204      	movs	r2, #4
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e002      	b.n	8004302 <HAL_GPIO_EXTI_Callback+0x4e>
		else{grandState = stop;}
 80042fc:	4b19      	ldr	r3, [pc, #100]	; (8004364 <HAL_GPIO_EXTI_Callback+0xb0>)
 80042fe:	2202      	movs	r2, #2
 8004300:	701a      	strb	r2, [r3, #0]

		}
	//=========// work Blue button //=========//
	if(GPIO_Pin == GPIO_PIN_13){
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004308:	d120      	bne.n	800434c <HAL_GPIO_EXTI_Callback+0x98>
		bluecounter++;
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <HAL_GPIO_EXTI_Callback+0xb4>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004314:	701a      	strb	r2, [r3, #0]

		////===== Zero Calibrate Func /////////////
		if (bluecounter % 2 == 0){
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_GPIO_EXTI_Callback+0xb4>)
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d111      	bne.n	8004346 <HAL_GPIO_EXTI_Callback+0x92>
			PWMOut = 1100;
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004324:	f240 424c 	movw	r2, #1100	; 0x44c
 8004328:	801a      	strh	r2, [r3, #0]
			mot_dirctn++; mot_dirctn%=2;
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_GPIO_EXTI_Callback+0xbc>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_GPIO_EXTI_Callback+0xbc>)
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e002      	b.n	800434c <HAL_GPIO_EXTI_Callback+0x98>

		}else{PWMOut = 0;}
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_GPIO_EXTI_Callback+0xb8>)
 8004348:	2200      	movs	r2, #0
 800434a:	801a      	strh	r2, [r3, #0]
		//flag_efftActi = 1;
		//trig_efftRead = 1;
	}

	//=============// setzero //================//
		if(GPIO_Pin == GPIO_PIN_2){
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d102      	bne.n	8004358 <HAL_GPIO_EXTI_Callback+0xa4>
//			position_order = 0;
//			positionlog[position_order] = 0.00; // 0.000613 - 0.0122 => 1-2/1024
//			Velocity = 7.0;
//			grandState = SetZeroGr;

			grandState = SetZeroBf;
 8004352:	4b04      	ldr	r3, [pc, #16]	; (8004364 <HAL_GPIO_EXTI_Callback+0xb0>)
 8004354:	2206      	movs	r2, #6
 8004356:	701a      	strb	r2, [r3, #0]
		}
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	200004fc 	.word	0x200004fc
 8004368:	200006f0 	.word	0x200006f0
 800436c:	20000574 	.word	0x20000574
 8004370:	2000057c 	.word	0x2000057c

08004374 <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8004374:	b4b0      	push	{r4, r5, r7}
 8004376:	af00      	add	r7, sp, #0
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <_Z6microsv+0x2c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2200      	movs	r2, #0
 8004380:	4618      	mov	r0, r3
 8004382:	4611      	mov	r1, r2
 8004384:	4b07      	ldr	r3, [pc, #28]	; (80043a4 <_Z6microsv+0x30>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	1884      	adds	r4, r0, r2
 800438c:	eb41 0503 	adc.w	r5, r1, r3
 8004390:	4622      	mov	r2, r4
 8004392:	462b      	mov	r3, r5
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	bcb0      	pop	{r4, r5, r7}
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	200003ac 	.word	0x200003ac
 80043a4:	20000508 	.word	0x20000508

080043a8 <_Z6millisv>:
uint32_t millis()
{return _millis;}// + htim10.Instance->CNT
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <_Z6millisv+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000510 	.word	0x20000510

080043c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80043c0:	b4b0      	push	{r4, r5, r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10a      	bne.n	80043e6 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 80043d0:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80043da:	1854      	adds	r4, r2, r1
 80043dc:	f143 0500 	adc.w	r5, r3, #0
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80043e2:	e9c3 4500 	strd	r4, r5, [r3]
 if(htim == &htim10)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a08      	ldr	r2, [pc, #32]	; (800440c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d104      	bne.n	80043f8 <HAL_TIM_PeriodElapsedCallback+0x38>
 {_millis++;}
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	4a06      	ldr	r2, [pc, #24]	; (8004410 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80043f6:	6013      	str	r3, [r2, #0]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bcb0      	pop	{r4, r5, r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	200003ac 	.word	0x200003ac
 8004408:	20000508 	.word	0x20000508
 800440c:	20000364 	.word	0x20000364
 8004410:	20000510 	.word	0x20000510

08004414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004418:	b672      	cpsid	i
}
 800441a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800441c:	e7fe      	b.n	800441c <Error_Handler+0x8>

0800441e <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	bf00      	nop
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8004460:	b5b0      	push	{r4, r5, r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fdb8 	bl	8004fe0 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8004470:	4604      	mov	r4, r0
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fdbd 	bl	8004ff6 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 800447c:	f107 020c 	add.w	r2, r7, #12
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	4621      	mov	r1, r4
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fdc0 	bl	800500c <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 800448c:	bf00      	nop
 800448e:	4628      	mov	r0, r5
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bdb0      	pop	{r4, r5, r7, pc}

08004496 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fdc2 	bl	800503e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 80044ba:	f000 fdd0 	bl	800505e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fdd6 	bl	8005084 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 80044d8:	f000 fde4 	bl	80050a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fdea 	bl	80050ca <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80044f6:	f000 fdf8 	bl	80050ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fdfe 	bl	8005110 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8004514:	f000 fe0c 	bl	8005130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fe04 	bl	8005140 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
    finished();
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fe39 	bl	80051c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004558:	b590      	push	{r4, r7, lr}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689c      	ldr	r4, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fe5e 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004570:	4603      	mov	r3, r0
 8004572:	429c      	cmp	r4, r3
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01d      	beq.n	80045bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	441a      	add	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	605a      	str	r2, [r3, #4]
      m_col = 0;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685c      	ldr	r4, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fe4d 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80045a8:	4603      	mov	r3, r0
 80045aa:	429c      	cmp	r4, r3
 80045ac:	db05      	blt.n	80045ba <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 80045ae:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 80045b0:	4a1d      	ldr	r2, [pc, #116]	; (8004628 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80045b2:	2148      	movs	r1, #72	; 0x48
 80045b4:	481d      	ldr	r0, [pc, #116]	; (800462c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80045b6:	f019 fda1 	bl	801e0fc <__assert_func>
 80045ba:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689c      	ldr	r4, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fe31 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80045ca:	4603      	mov	r3, r0
 80045cc:	429c      	cmp	r4, r3
 80045ce:	db05      	blt.n	80045dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80045d4:	214b      	movs	r1, #75	; 0x4b
 80045d6:	4815      	ldr	r0, [pc, #84]	; (800462c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80045d8:	f019 fd90 	bl	801e0fc <__assert_func>
 80045dc:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d005      	beq.n	80045f2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 80045e8:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 80045ea:	214d      	movs	r1, #77	; 0x4d
 80045ec:	480f      	ldr	r0, [pc, #60]	; (800462c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 80045ee:	f019 fd85 	bl	801e0fc <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461c      	mov	r4, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6858      	ldr	r0, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	1c59      	adds	r1, r3, #1
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6091      	str	r1, [r2, #8]
 8004606:	461a      	mov	r2, r3
 8004608:	4601      	mov	r1, r0
 800460a:	4620      	mov	r0, r4
 800460c:	f000 fe24 	bl	8005258 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004610:	4602      	mov	r2, r0
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6013      	str	r3, [r2, #0]
    return *this;
 8004618:	687b      	ldr	r3, [r7, #4]
  }
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}
 8004622:	bf00      	nop
 8004624:	0801f178 	.word	0x0801f178
 8004628:	0801f1c8 	.word	0x0801f1c8
 800462c:	0801f28c 	.word	0x0801f28c
 8004630:	0801f2e8 	.word	0x0801f2e8
 8004634:	0801f340 	.word	0x0801f340

08004638 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fe1f 	bl	800528c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
    finished();
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fe54 	bl	800530c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689c      	ldr	r4, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fe78 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004688:	4603      	mov	r3, r0
 800468a:	429c      	cmp	r4, r3
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01d      	beq.n	80046d4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	441a      	add	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685c      	ldr	r4, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fe67 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80046c0:	4603      	mov	r3, r0
 80046c2:	429c      	cmp	r4, r3
 80046c4:	db05      	blt.n	80046d2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 80046c6:	4b1d      	ldr	r3, [pc, #116]	; (800473c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 80046c8:	4a1d      	ldr	r2, [pc, #116]	; (8004740 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80046ca:	2148      	movs	r1, #72	; 0x48
 80046cc:	481d      	ldr	r0, [pc, #116]	; (8004744 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80046ce:	f019 fd15 	bl	801e0fc <__assert_func>
 80046d2:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689c      	ldr	r4, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fe4b 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80046e2:	4603      	mov	r3, r0
 80046e4:	429c      	cmp	r4, r3
 80046e6:	db05      	blt.n	80046f4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 80046ec:	214b      	movs	r1, #75	; 0x4b
 80046ee:	4815      	ldr	r0, [pc, #84]	; (8004744 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 80046f0:	f019 fd04 	bl	801e0fc <__assert_func>
 80046f4:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d005      	beq.n	800470a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 8004700:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8004702:	214d      	movs	r1, #77	; 0x4d
 8004704:	480f      	ldr	r0, [pc, #60]	; (8004744 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8004706:	f019 fcf9 	bl	801e0fc <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461c      	mov	r4, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6858      	ldr	r0, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	1c59      	adds	r1, r3, #1
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6091      	str	r1, [r2, #8]
 800471e:	461a      	mov	r2, r3
 8004720:	4601      	mov	r1, r0
 8004722:	4620      	mov	r0, r4
 8004724:	f000 fe3e 	bl	80053a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8004728:	4602      	mov	r2, r0
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6013      	str	r3, [r2, #0]
    return *this;
 8004730:	687b      	ldr	r3, [r7, #4]
  }
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bd90      	pop	{r4, r7, pc}
 800473a:	bf00      	nop
 800473c:	0801f178 	.word	0x0801f178
 8004740:	0801f358 	.word	0x0801f358
 8004744:	0801f28c 	.word	0x0801f28c
 8004748:	0801f2e8 	.word	0x0801f2e8
 800474c:	0801f340 	.word	0x0801f340

08004750 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fe39 	bl	80053d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
    finished();
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fe6e 	bl	8005458 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fe94 	bl	80054c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
    finished();
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fec9 	bl	8005544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689c      	ldr	r4, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 feee 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80047d4:	4603      	mov	r3, r0
 80047d6:	429c      	cmp	r4, r3
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01d      	beq.n	8004820 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	441a      	add	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	605a      	str	r2, [r3, #4]
      m_col = 0;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685c      	ldr	r4, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fedd 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800480c:	4603      	mov	r3, r0
 800480e:	429c      	cmp	r4, r3
 8004810:	db05      	blt.n	800481e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 8004812:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004816:	2148      	movs	r1, #72	; 0x48
 8004818:	481d      	ldr	r0, [pc, #116]	; (8004890 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800481a:	f019 fc6f 	bl	801e0fc <__assert_func>
 800481e:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689c      	ldr	r4, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fec1 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800482e:	4603      	mov	r3, r0
 8004830:	429c      	cmp	r4, r3
 8004832:	db05      	blt.n	8004840 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8004834:	4b17      	ldr	r3, [pc, #92]	; (8004894 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 8004836:	4a15      	ldr	r2, [pc, #84]	; (800488c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8004838:	214b      	movs	r1, #75	; 0x4b
 800483a:	4815      	ldr	r0, [pc, #84]	; (8004890 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 800483c:	f019 fc5e 	bl	801e0fc <__assert_func>
 8004840:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d005      	beq.n	8004856 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 800484c:	4a0f      	ldr	r2, [pc, #60]	; (800488c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 800484e:	214d      	movs	r1, #77	; 0x4d
 8004850:	480f      	ldr	r0, [pc, #60]	; (8004890 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8004852:	f019 fc53 	bl	801e0fc <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461c      	mov	r4, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6858      	ldr	r0, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	1c59      	adds	r1, r3, #1
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6091      	str	r1, [r2, #8]
 800486a:	461a      	mov	r2, r3
 800486c:	4601      	mov	r1, r0
 800486e:	4620      	mov	r0, r4
 8004870:	f000 feb4 	bl	80055dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8004874:	4602      	mov	r2, r0
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6013      	str	r3, [r2, #0]
    return *this;
 800487c:	687b      	ldr	r3, [r7, #4]
  }
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bd90      	pop	{r4, r7, pc}
 8004886:	bf00      	nop
 8004888:	0801f178 	.word	0x0801f178
 800488c:	0801f41c 	.word	0x0801f41c
 8004890:	0801f28c 	.word	0x0801f28c
 8004894:	0801f2e8 	.word	0x0801f2e8
 8004898:	0801f340 	.word	0x0801f340

0800489c <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	db10      	blt.n	80048d0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fead 	bl	800560e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	da09      	bge.n	80048d0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db06      	blt.n	80048d0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 feb3 	bl	800562e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80048c8:	4602      	mov	r2, r0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4293      	cmp	r3, r2
 80048ce:	db06      	blt.n	80048de <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 80048d0:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 80048d4:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80048d8:	4808      	ldr	r0, [pc, #32]	; (80048fc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 80048da:	f019 fc0f 	bl	801e0fc <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 fecc 	bl	8005680 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 80048e8:	4603      	mov	r3, r0
    }
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	0801f4e0 	.word	0x0801f4e0
 80048f8:	0801f518 	.word	0x0801f518
 80048fc:	0801f604 	.word	0x0801f604

08004900 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1d1a      	adds	r2, r3, #4
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	3304      	adds	r3, #4
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f000 ffaf 	bl	8005878 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 8004924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	68b8      	ldr	r0, [r7, #8]
 8004932:	f000 fec8 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004936:	4604      	mov	r4, r0
 8004938:	68b8      	ldr	r0, [r7, #8]
 800493a:	f000 fec4 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800493e:	4603      	mov	r3, r0
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fd24 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004946:	4605      	mov	r5, r0
 8004948:	68b8      	ldr	r0, [r7, #8]
 800494a:	f000 febc 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800494e:	4603      	mov	r3, r0
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fd11 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004956:	4606      	mov	r6, r0
 8004958:	f107 0318 	add.w	r3, r7, #24
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 febc 	bl	80056dc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 8004964:	f107 0318 	add.w	r3, r7, #24
 8004968:	f107 0010 	add.w	r0, r7, #16
 800496c:	4632      	mov	r2, r6
 800496e:	4629      	mov	r1, r5
 8004970:	f000 fed0 	bl	8005714 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 8004974:	f107 031c 	add.w	r3, r7, #28
 8004978:	4618      	mov	r0, r3
 800497a:	f000 ff03 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800497e:	f107 031c 	add.w	r3, r7, #28
 8004982:	f107 0210 	add.w	r2, r7, #16
 8004986:	4621      	mov	r1, r4
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 ff35 	bl	80057f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004996 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 ff86 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80049a4:	4602      	mov	r2, r0
 80049a6:	f107 030c 	add.w	r3, r7, #12
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 ffa2 	bl	80058f6 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 80049b2:	68fb      	ldr	r3, [r7, #12]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	1d1a      	adds	r2, r3, #4
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7ff ff91 	bl	8004900 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f103 020c 	add.w	r2, r3, #12
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	330c      	adds	r3, #12
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f000 ff54 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80049fa:	b590      	push	{r4, r7, lr}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004a06:	68b8      	ldr	r0, [r7, #8]
 8004a08:	f000 ff85 	bl	8005916 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 ff8c 	bl	800592c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461a      	mov	r2, r3
 8004a18:	4621      	mov	r1, r4
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 ffd2 	bl	80059c4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd90      	pop	{r4, r7, pc}

08004a28 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fff4 	bl	8005a24 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004a3c:	4603      	mov	r3, r0
    }
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004a46:	b590      	push	{r4, r7, lr}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004a52:	68b8      	ldr	r0, [r7, #8]
 8004a54:	f000 ffff 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fe33 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461a      	mov	r2, r3
 8004a64:	4621      	mov	r1, r4
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f001 f824 	bl	8005ab4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd90      	pop	{r4, r7, pc}

08004a74 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 f844 	bl	8005b10 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004a88:	4603      	mov	r3, r0
    }
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004a92:	b590      	push	{r4, r7, lr}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004a9e:	68b8      	ldr	r0, [r7, #8]
 8004aa0:	f000 ffd9 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 ffd5 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f001 f86a 	bl	8005b8c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd90      	pop	{r4, r7, pc}

08004ac0 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f001 f88d 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	f107 030c 	add.w	r3, r7, #12
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 f8a9 	bl	8005c2e <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 8004adc:	68fb      	ldr	r3, [r7, #12]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004ae6:	b590      	push	{r4, r7, lr}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004af2:	68b8      	ldr	r0, [r7, #8]
 8004af4:	f001 f8ab 	bl	8005c4e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8004af8:	4604      	mov	r4, r0
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f001 f8b2 	bl	8005c64 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	4621      	mov	r1, r4
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f001 f8f8 	bl	8005cfc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}

08004b14 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004b14:	b5b0      	push	{r4, r5, r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	68b8      	ldr	r0, [r7, #8]
 8004b22:	f001 f91b 	bl	8005d5c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004b26:	4604      	mov	r4, r0
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 ff94 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004b2e:	4605      	mov	r5, r0
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f91c 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004b3a:	f107 0314 	add.w	r3, r7, #20
 8004b3e:	462a      	mov	r2, r5
 8004b40:	4621      	mov	r1, r4
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f001 f954 	bl	8005df0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bdb0      	pop	{r4, r5, r7, pc}

08004b50 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 f992 	bl	8005e88 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 8004b64:	4603      	mov	r3, r0
    }
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 f99f 	bl	8005eba <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	f107 030c 	add.w	r3, r7, #12
 8004b82:	4611      	mov	r1, r2
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 f9bb 	bl	8005f00 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004ba0:	68b8      	ldr	r0, [r7, #8]
 8004ba2:	f000 ff58 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f001 f9b9 	bl	8005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f001 f9f1 	bl	8005f9c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd90      	pop	{r4, r7, pc}

08004bc2 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004bc2:	b590      	push	{r4, r7, lr}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004bce:	68b8      	ldr	r0, [r7, #8]
 8004bd0:	f001 fa12 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 ff3d 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	4621      	mov	r1, r4
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f001 fa38 	bl	8006058 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd90      	pop	{r4, r7, pc}

08004bf0 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004bfc:	68b8      	ldr	r0, [r7, #8]
 8004bfe:	f001 fa59 	bl	80060b4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8004c02:	4604      	mov	r4, r0
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f001 f98b 	bl	8005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4621      	mov	r1, r4
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f001 fa8d 	bl	8006130 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}

08004c1e <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 8004c1e:	b5b0      	push	{r4, r5, r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	68b8      	ldr	r0, [r7, #8]
 8004c2c:	f001 fab0 	bl	8006190 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8004c30:	4604      	mov	r4, r0
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f001 fab7 	bl	80061a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004c38:	4605      	mov	r5, r0
 8004c3a:	f107 0314 	add.w	r3, r7, #20
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 f897 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f001 faff 	bl	8006250 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bdb0      	pop	{r4, r5, r7, pc}

08004c5a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f001 fb34 	bl	80062d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fb3b 	bl	80062e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004c70:	4603      	mov	r3, r0
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 fb24 	bl	80062d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f001 fb38 	bl	8006300 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004caa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60da      	str	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f103 0210 	add.w	r2, r3, #16
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	3310      	adds	r3, #16
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f001 f8d4 	bl	8005e70 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 8004cde:	6838      	ldr	r0, [r7, #0]
 8004ce0:	f7ff ffbb 	bl	8004c5a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	6838      	ldr	r0, [r7, #0]
 8004ce8:	f7ff ffc7 	bl	8004c7a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8004cec:	4603      	mov	r3, r0
 8004cee:	429c      	cmp	r4, r3
 8004cf0:	d006      	beq.n	8004d00 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 8004cf2:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 8004cf4:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 8004cf6:	f240 115f 	movw	r1, #351	; 0x15f
 8004cfa:	4809      	ldr	r0, [pc, #36]	; (8004d20 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 8004cfc:	f019 f9fe 	bl	801e0fc <__assert_func>
  return Inverse<Derived>(derived());
 8004d00:	6838      	ldr	r0, [r7, #0]
 8004d02:	f001 fae5 	bl	80062d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 8004d06:	4603      	mov	r3, r0
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fb1d 	bl	800634a <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd90      	pop	{r4, r7, pc}
 8004d18:	0801f660 	.word	0x0801f660
 8004d1c:	0801f674 	.word	0x0801f674
 8004d20:	0801f7c8 	.word	0x0801f7c8

08004d24 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ffb0 	bl	8004c9a <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004d50:	68b8      	ldr	r0, [r7, #8]
 8004d52:	f001 fb0c 	bl	800636e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8004d56:	4604      	mov	r4, r0
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f001 fb13 	bl	8006384 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	4621      	mov	r1, r4
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f001 fb57 	bl	8006418 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd90      	pop	{r4, r7, pc}

08004d72 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f001 fb7b 	bl	800647c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004d86:	4603      	mov	r3, r0
    }
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004d9c:	68b8      	ldr	r0, [r7, #8]
 8004d9e:	f001 f92b 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004da2:	4604      	mov	r4, r0
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fc8e 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	4621      	mov	r1, r4
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f001 fba1 	bl	80064f8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd90      	pop	{r4, r7, pc}

08004dbe <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004dbe:	b5b0      	push	{r4, r5, r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	60f8      	str	r0, [r7, #12]
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f001 f9eb 	bl	80061a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fbbe 	bl	8006554 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8004dd8:	4605      	mov	r5, r0
 8004dda:	f107 0314 	add.w	r3, r7, #20
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fbc3 	bl	800656a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004de4:	f107 0314 	add.w	r3, r7, #20
 8004de8:	462a      	mov	r2, r5
 8004dea:	4621      	mov	r1, r4
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f001 fbfb 	bl	80065e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bdb0      	pop	{r4, r5, r7, pc}

08004dfa <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	3304      	adds	r3, #4
 8004e14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004e18:	e882 0003 	stmia.w	r2, {r0, r1}
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f103 020c 	add.w	r2, r3, #12
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f001 fc1f 	bl	800666c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004e44:	68b8      	ldr	r0, [r7, #8]
 8004e46:	f000 fc3e 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f001 fc19 	bl	8006684 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	4621      	mov	r1, r4
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f001 fc51 	bl	8006700 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd90      	pop	{r4, r7, pc}

08004e66 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1d1a      	adds	r2, r3, #4
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7ff ffb9 	bl	8004dfa <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004e92:	b5b0      	push	{r4, r5, r7, lr}
 8004e94:	b086      	sub	sp, #24
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	60f8      	str	r0, [r7, #12]
 8004e9a:	60b9      	str	r1, [r7, #8]
 8004e9c:	607a      	str	r2, [r7, #4]
 8004e9e:	68b8      	ldr	r0, [r7, #8]
 8004ea0:	f000 fc11 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 fc5a 	bl	8006760 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004eac:	4605      	mov	r5, r0
 8004eae:	f107 0314 	add.w	r3, r7, #20
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 ff5d 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004eb8:	f107 0314 	add.w	r3, r7, #20
 8004ebc:	462a      	mov	r2, r5
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f001 fc8d 	bl	80067e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bdb0      	pop	{r4, r5, r7, pc}

08004ece <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fcbf 	bl	8006860 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 8004ee2:	4603      	mov	r3, r0
    }
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004ef8:	68b8      	ldr	r0, [r7, #8]
 8004efa:	f000 fbe4 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004efe:	4604      	mov	r4, r0
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f879 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004f06:	4603      	mov	r3, r0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f001 fce5 	bl	80068dc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}

08004f1a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004f1a:	b5b0      	push	{r4, r5, r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	68b8      	ldr	r0, [r7, #8]
 8004f28:	f000 fd95 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 fd02 	bl	8006938 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 8004f34:	4605      	mov	r5, r0
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 fb15 	bl	800656a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004f40:	f107 0314 	add.w	r3, r7, #20
 8004f44:	462a      	mov	r2, r5
 8004f46:	4621      	mov	r1, r4
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f001 fd35 	bl	80069b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bdb0      	pop	{r4, r5, r7, pc}

08004f56 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f74:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f103 020c 	add.w	r2, r3, #12
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f001 fb71 	bl	800666c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004fa0:	68b8      	ldr	r0, [r7, #8]
 8004fa2:	f001 fd4b 	bl	8006a3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fd54 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f001 fd7f 	bl	8006ab8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd90      	pop	{r4, r7, pc}

08004fc2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 fd9f 	bl	8006b14 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8004fd6:	4603      	mov	r3, r0
    }
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 fd89 	bl	8006b46 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 800503e:	b580      	push	{r7, lr}
 8005040:	b082      	sub	sp, #8
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff ffed 	bl	8005026 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4618      	mov	r0, r3
 8005050:	f001 fd84 	bl	8006b5c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8005062:	bf00      	nop
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 fd7e 	bl	8006b76 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ffed 	bl	800506c <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4618      	mov	r0, r3
 8005096:	f001 fd79 	bl	8006b8c <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
    }
 80050a8:	bf00      	nop
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 fd73 	bl	8006ba6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff ffed 	bl	80050b2 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fd6e 	bl	8006bbc <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 80050ea:	b480      	push	{r7}
 80050ec:	af00      	add	r7, sp, #0
    }
 80050ee:	bf00      	nop
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f001 fd68 	bl	8006bd6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ffed 	bl	80050f8 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4618      	mov	r0, r3
 8005122:	f001 fd63 	bl	8006bec <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
    }
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2201      	movs	r2, #1
 800515c:	609a      	str	r2, [r3, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f86a 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	dd07      	ble.n	8005184 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f857 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	dc05      	bgt.n	8005190 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 8005186:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 8005188:	2124      	movs	r1, #36	; 0x24
 800518a:	480c      	ldr	r0, [pc, #48]	; (80051bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 800518c:	f018 ffb6 	bl	801e0fc <__assert_func>
 8005190:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f85c 	bl	8005258 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 80051a0:	4602      	mov	r2, r0
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6013      	str	r3, [r2, #0]
  }
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	0801f820 	.word	0x0801f820
 80051b8:	0801f87c 	.word	0x0801f87c
 80051bc:	0801f28c 	.word	0x0801f28c

080051c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	18d4      	adds	r4, r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 f833 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80051dc:	4603      	mov	r3, r0
 80051de:	429c      	cmp	r4, r3
 80051e0:	d007      	beq.n	80051f2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f820 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689c      	ldr	r4, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 f816 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005200:	4603      	mov	r3, r0
 8005202:	429c      	cmp	r4, r3
 8005204:	d005      	beq.n	8005212 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 8005208:	4a06      	ldr	r2, [pc, #24]	; (8005224 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 800520a:	217a      	movs	r1, #122	; 0x7a
 800520c:	4806      	ldr	r0, [pc, #24]	; (8005228 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 800520e:	f018 ff75 	bl	801e0fc <__assert_func>
 8005212:	bf00      	nop
      return m_xpr;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
  }
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bd90      	pop	{r4, r7, pc}
 8005220:	0801f92c 	.word	0x0801f92c
 8005224:	0801f9cc 	.word	0x0801f9cc
 8005228:	0801f28c 	.word	0x0801f28c

0800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	f001 fce7 	bl	8006c06 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 8005238:	4603      	mov	r3, r0
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	f001 fce4 	bl	8006c16 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 800524e:	4603      	mov	r3, r0
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fcdd 	bl	8006c26 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 800526c:	4604      	mov	r4, r0
 800526e:	f001 fcd2 	bl	8006c16 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8005272:	4602      	mov	r2, r0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	fb03 f202 	mul.w	r2, r3, r2
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4423      	add	r3, r4
    }
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	bd90      	pop	{r4, r7, pc}
	...

0800528c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	605a      	str	r2, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	609a      	str	r2, [r3, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f86a 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dd07      	ble.n	80052d0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f857 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dc05      	bgt.n	80052dc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 80052d2:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 80052d4:	2124      	movs	r1, #36	; 0x24
 80052d6:	480c      	ldr	r0, [pc, #48]	; (8005308 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 80052d8:	f018 ff10 	bl	801e0fc <__assert_func>
 80052dc:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2200      	movs	r2, #0
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f85c 	bl	80053a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 80052ec:	4602      	mov	r2, r0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6013      	str	r3, [r2, #0]
  }
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	0801f820 	.word	0x0801f820
 8005304:	0801fa34 	.word	0x0801fa34
 8005308:	0801f28c 	.word	0x0801f28c

0800530c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 800530c:	b590      	push	{r4, r7, lr}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	18d4      	adds	r4, r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f833 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005328:	4603      	mov	r3, r0
 800532a:	429c      	cmp	r4, r3
 800532c:	d007      	beq.n	800533e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f820 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689c      	ldr	r4, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f816 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800534c:	4603      	mov	r3, r0
 800534e:	429c      	cmp	r4, r3
 8005350:	d005      	beq.n	800535e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8005354:	4a06      	ldr	r2, [pc, #24]	; (8005370 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 8005356:	217a      	movs	r1, #122	; 0x7a
 8005358:	4806      	ldr	r0, [pc, #24]	; (8005374 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 800535a:	f018 fecf 	bl	801e0fc <__assert_func>
 800535e:	bf00      	nop
      return m_xpr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
  }
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bd90      	pop	{r4, r7, pc}
 800536c:	0801f92c 	.word	0x0801f92c
 8005370:	0801fae4 	.word	0x0801fae4
 8005374:	0801f28c 	.word	0x0801f28c

08005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	f001 fc5c 	bl	8006c3c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 8005384:	4603      	mov	r3, r0
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	f001 fc59 	bl	8006c4c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 800539a:	4603      	mov	r3, r0
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 fc52 	bl	8006c5c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 80053b8:	4604      	mov	r4, r0
 80053ba:	f001 fc47 	bl	8006c4c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 80053be:	4602      	mov	r2, r0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	fb03 f202 	mul.w	r2, r3, r2
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4423      	add	r3, r4
    }
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd90      	pop	{r4, r7, pc}
	...

080053d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	609a      	str	r2, [r3, #8]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 ff0e 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	dd07      	ble.n	800541c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 ff11 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	dc05      	bgt.n	8005428 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 800541e:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 8005420:	2124      	movs	r1, #36	; 0x24
 8005422:	480c      	ldr	r0, [pc, #48]	; (8005454 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 8005424:	f018 fe6a 	bl	801e0fc <__assert_func>
 8005428:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f001 fc1d 	bl	8006c72 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8005438:	4602      	mov	r2, r0
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6013      	str	r3, [r2, #0]
  }
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	0801f820 	.word	0x0801f820
 8005450:	0801fb4c 	.word	0x0801fb4c
 8005454:	0801f28c 	.word	0x0801f28c

08005458 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	18d4      	adds	r4, r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fed7 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005474:	4603      	mov	r3, r0
 8005476:	429c      	cmp	r4, r3
 8005478:	d007      	beq.n	800548a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 feda 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689c      	ldr	r4, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fed0 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005498:	4603      	mov	r3, r0
 800549a:	429c      	cmp	r4, r3
 800549c:	d005      	beq.n	80054aa <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 80054a0:	4a06      	ldr	r2, [pc, #24]	; (80054bc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 80054a2:	217a      	movs	r1, #122	; 0x7a
 80054a4:	4806      	ldr	r0, [pc, #24]	; (80054c0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 80054a6:	f018 fe29 	bl	801e0fc <__assert_func>
 80054aa:	bf00      	nop
      return m_xpr;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
  }
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd90      	pop	{r4, r7, pc}
 80054b8:	0801f92c 	.word	0x0801f92c
 80054bc:	0801fbfc 	.word	0x0801fbfc
 80054c0:	0801f28c 	.word	0x0801f28c

080054c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	609a      	str	r2, [r3, #8]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 f86a 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	dd07      	ble.n	8005508 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f857 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	dc05      	bgt.n	8005514 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 800550a:	4a0c      	ldr	r2, [pc, #48]	; (800553c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 800550c:	2124      	movs	r1, #36	; 0x24
 800550e:	480c      	ldr	r0, [pc, #48]	; (8005540 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 8005510:	f018 fdf4 	bl	801e0fc <__assert_func>
 8005514:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	2100      	movs	r1, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f85c 	bl	80055dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6013      	str	r3, [r2, #0]
  }
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	0801f820 	.word	0x0801f820
 800553c:	0801fc64 	.word	0x0801fc64
 8005540:	0801f28c 	.word	0x0801f28c

08005544 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8005544:	b590      	push	{r4, r7, lr}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	18d4      	adds	r4, r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 f833 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005560:	4603      	mov	r3, r0
 8005562:	429c      	cmp	r4, r3
 8005564:	d007      	beq.n	8005576 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f820 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689c      	ldr	r4, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f816 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005584:	4603      	mov	r3, r0
 8005586:	429c      	cmp	r4, r3
 8005588:	d005      	beq.n	8005596 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 800558c:	4a06      	ldr	r2, [pc, #24]	; (80055a8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 800558e:	217a      	movs	r1, #122	; 0x7a
 8005590:	4806      	ldr	r0, [pc, #24]	; (80055ac <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 8005592:	f018 fdb3 	bl	801e0fc <__assert_func>
 8005596:	bf00      	nop
      return m_xpr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
  }
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd90      	pop	{r4, r7, pc}
 80055a4:	0801f92c 	.word	0x0801f92c
 80055a8:	0801fd14 	.word	0x0801fd14
 80055ac:	0801f28c 	.word	0x0801f28c

080055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	f001 fb74 	bl	8006ca4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 80055bc:	4603      	mov	r3, r0
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	f001 fb71 	bl	8006cb4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 80055d2:	4603      	mov	r3, r0
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fb6a 	bl	8006cc4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 80055f0:	4604      	mov	r4, r0
 80055f2:	f001 fb57 	bl	8006ca4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	fb03 f202 	mul.w	r2, r3, r2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4423      	add	r3, r4
    }
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	bd90      	pop	{r4, r7, pc}

0800560e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f855 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800561c:	4603      	mov	r3, r0
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff feb5 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005624:	4603      	mov	r3, r0
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f845 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800563c:	4603      	mov	r3, r0
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff fe9a 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005644:	4603      	mov	r3, r0
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fb4f 	bl	8006cfa <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff ffec 	bl	800564e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f90f 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005692:	4602      	mov	r2, r0
 8005694:	f107 0314 	add.w	r3, r7, #20
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f001 fb1d 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 80056a0:	f107 0314 	add.w	r3, r7, #20
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 fb31 	bl	8006d10 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 80056ae:	4604      	mov	r4, r0
 80056b0:	bf00      	nop
 80056b2:	f107 0314 	add.w	r3, r7, #20
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff ffd5 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80056bc:	4623      	mov	r3, r4
    }
 80056be:	4618      	mov	r0, r3
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd90      	pop	{r4, r7, pc}

080056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fb1b 	bl	8006d40 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff ffea 	bl	80056fc <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fb13 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4618      	mov	r0, r3
 800573a:	f001 fb27 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3304      	adds	r3, #4
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 f897 	bl	8005878 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	db08      	blt.n	8005762 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b03      	cmp	r3, #3
 8005754:	d105      	bne.n	8005762 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	db02      	blt.n	8005762 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d005      	beq.n	800576e <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 8005764:	4a05      	ldr	r2, [pc, #20]	; (800577c <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 8005766:	2147      	movs	r1, #71	; 0x47
 8005768:	4805      	ldr	r0, [pc, #20]	; (8005780 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 800576a:	f018 fcc7 	bl	801e0fc <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	0801fd7c 	.word	0x0801fd7c
 800577c:	0801fe14 	.word	0x0801fe14
 8005780:	0801ff08 	.word	0x0801ff08

08005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f001 fb0c 	bl	8006dc0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff ffed 	bl	800579a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	f001 fb00 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	f001 fafd 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80057ec:	4603      	mov	r3, r0
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff ffd3 	bl	80057b2 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3304      	adds	r3, #4
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff f871 	bl	8004900 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	330c      	adds	r3, #12
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f837 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fdae 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005832:	4604      	mov	r4, r0
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7ff ffc8 	bl	80057ca <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800583a:	4603      	mov	r3, r0
 800583c:	429c      	cmp	r4, r3
 800583e:	d10a      	bne.n	8005856 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fd98 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005848:	4604      	mov	r4, r0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff ffc8 	bl	80057e0 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005850:	4603      	mov	r3, r0
 8005852:	429c      	cmp	r4, r3
 8005854:	d005      	beq.n	8005862 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 8005858:	4a05      	ldr	r2, [pc, #20]	; (8005870 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 800585a:	2174      	movs	r1, #116	; 0x74
 800585c:	4805      	ldr	r0, [pc, #20]	; (8005874 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 800585e:	f018 fc4d 	bl	801e0fc <__assert_func>
    }
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	bd90      	pop	{r4, r7, pc}
 800586c:	0801ff64 	.word	0x0801ff64
 8005870:	0801ffa0 	.word	0x0801ffa0
 8005874:	080201c8 	.word	0x080201c8

08005878 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f001 fa91 	bl	8006df6 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff ffed 	bl	80058c6 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff ffec 	bl	80058de <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 8005942:	b580      	push	{r7, lr}
 8005944:	b082      	sub	sp, #8
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 fa5e 	bl	8006e0c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff ffed 	bl	8005942 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff ffed 	bl	800595a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff fcee 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800599c:	4603      	mov	r3, r0
    }
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fce0 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80059b8:	4603      	mov	r3, r0
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff ffce 	bl	8005972 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe ffee 	bl	80049bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3310      	adds	r3, #16
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80059ea:	68b8      	ldr	r0, [r7, #8]
 80059ec:	f7ff ffcd 	bl	800598a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 80059f0:	4604      	mov	r4, r0
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff ffd7 	bl	80059a6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80059f8:	4603      	mov	r3, r0
 80059fa:	429c      	cmp	r4, r3
 80059fc:	d005      	beq.n	8005a0a <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 8005a00:	4a06      	ldr	r2, [pc, #24]	; (8005a1c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 8005a02:	2160      	movs	r1, #96	; 0x60
 8005a04:	4806      	ldr	r0, [pc, #24]	; (8005a20 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 8005a06:	f018 fb79 	bl	801e0fc <__assert_func>
 8005a0a:	bf00      	nop
    }
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd90      	pop	{r4, r7, pc}
 8005a16:	bf00      	nop
 8005a18:	08020224 	.word	0x08020224
 8005a1c:	080202b0 	.word	0x080202b0
 8005a20:	08020574 	.word	0x08020574

08005a24 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8da 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005a34:	4604      	mov	r4, r0
 8005a36:	6838      	ldr	r0, [r7, #0]
 8005a38:	f001 f9f3 	bl	8006e22 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4620      	mov	r0, r4
 8005a42:	f001 f9f9 	bl	8006e38 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f8ce 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005a4c:	4603      	mov	r3, r0
    }
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd90      	pop	{r4, r7, pc}

08005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 f9f4 	bl	8006e62 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff ffed 	bl	8005a6c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ffed 	bl	8005a84 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff ffeb 	bl	8005a9c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fba9 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005ada:	4604      	mov	r4, r0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fc55 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	429c      	cmp	r4, r3
 8005ae8:	d005      	beq.n	8005af6 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005aec:	4a06      	ldr	r2, [pc, #24]	; (8005b08 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005aee:	2160      	movs	r1, #96	; 0x60
 8005af0:	4806      	ldr	r0, [pc, #24]	; (8005b0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005af2:	f018 fb03 	bl	801e0fc <__assert_func>
 8005af6:	bf00      	nop
    }
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd90      	pop	{r4, r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08020224 	.word	0x08020224
 8005b08:	080205c8 	.word	0x080205c8
 8005b0c:	08020574 	.word	0x08020574

08005b10 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005b10:	b590      	push	{r4, r7, lr}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fec8 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005b20:	4604      	mov	r4, r0
 8005b22:	6838      	ldr	r0, [r7, #0]
 8005b24:	f001 f9a8 	bl	8006e78 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f001 f9ae 	bl	8006e8e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff febc 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005b38:	4603      	mov	r3, r0
    }
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd90      	pop	{r4, r7, pc}

08005b42 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 f9b4 	bl	8006eb8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b082      	sub	sp, #8
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff ffed 	bl	8005b42 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff ffed 	bl	8005b5a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff ffea 	bl	8005b72 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff fb3d 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff fb43 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	429c      	cmp	r4, r3
 8005bc0:	d005      	beq.n	8005bce <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 8005bc2:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 8005bc4:	4a06      	ldr	r2, [pc, #24]	; (8005be0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 8005bc6:	2160      	movs	r1, #96	; 0x60
 8005bc8:	4806      	ldr	r0, [pc, #24]	; (8005be4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 8005bca:	f018 fa97 	bl	801e0fc <__assert_func>
 8005bce:	bf00      	nop
    }
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	08020224 	.word	0x08020224
 8005be0:	080206f0 	.word	0x080206f0
 8005be4:	08020574 	.word	0x08020574

08005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 f961 	bl	8006ece <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ffed 	bl	8005bfe <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff ffec 	bl	8005c16 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f001 f92e 	bl	8006ee4 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7ff ffed 	bl	8005c7a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ffed 	bl	8005c92 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff faac 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff fa9e 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff ffce 	bl	8005caa <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d16:	e883 0003 	stmia.w	r3, {r0, r1}
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005d24:	68b8      	ldr	r0, [r7, #8]
 8005d26:	f7ff ffcc 	bl	8005cc2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ffd6 	bl	8005cde <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005d32:	4603      	mov	r3, r0
 8005d34:	429c      	cmp	r4, r3
 8005d36:	d005      	beq.n	8005d44 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 8005d3a:	4a06      	ldr	r2, [pc, #24]	; (8005d54 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8005d3c:	2160      	movs	r1, #96	; 0x60
 8005d3e:	4806      	ldr	r0, [pc, #24]	; (8005d58 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 8005d40:	f018 f9dc 	bl	801e0fc <__assert_func>
 8005d44:	bf00      	nop
    }
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd90      	pop	{r4, r7, pc}
 8005d50:	08020224 	.word	0x08020224
 8005d54:	08020818 	.word	0x08020818
 8005d58:	08020574 	.word	0x08020574

08005d5c <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f001 f8b2 	bl	8006efa <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff ffed 	bl	8005d88 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f8a4 	bl	8006f10 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 f8a4 	bl	8006f2c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005de4:	4603      	mov	r3, r0
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005df0:	b590      	push	{r4, r7, lr}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff ffce 	bl	8005da0 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	60da      	str	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3310      	adds	r3, #16
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 f828 	bl	8005e70 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005e20:	68b8      	ldr	r0, [r7, #8]
 8005e22:	f7ff ffc9 	bl	8005db8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8005e26:	4604      	mov	r4, r0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff fa09 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005e30:	4603      	mov	r3, r0
 8005e32:	429c      	cmp	r4, r3
 8005e34:	d10a      	bne.n	8005e4c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 8005e36:	68b8      	ldr	r0, [r7, #8]
 8005e38:	f7ff ffcb 	bl	8005dd2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff f9f3 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005e46:	4603      	mov	r3, r0
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d005      	beq.n	8005e58 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 8005e4e:	4a06      	ldr	r2, [pc, #24]	; (8005e68 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 8005e50:	2174      	movs	r1, #116	; 0x74
 8005e52:	4806      	ldr	r0, [pc, #24]	; (8005e6c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 8005e54:	f018 f952 	bl	801e0fc <__assert_func>
    }
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd90      	pop	{r4, r7, pc}
 8005e62:	bf00      	nop
 8005e64:	0801ff64 	.word	0x0801ff64
 8005e68:	080209c4 	.word	0x080209c4
 8005e6c:	080201c8 	.word	0x080201c8

08005e70 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005e88:	b590      	push	{r4, r7, lr}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fea8 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005e98:	4604      	mov	r4, r0
 8005e9a:	6838      	ldr	r0, [r7, #0]
 8005e9c:	f001 f854 	bl	8006f48 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f001 f85a 	bl	8006f5e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff fe9c 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005eb0:	4603      	mov	r3, r0
    }
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd90      	pop	{r4, r7, pc}

08005eba <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 f855 	bl	8006f88 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff ffed 	bl	8005ed0 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ffec 	bl	8005ee8 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 f82d 	bl	8006f9e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff ffed 	bl	8005f36 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ffed 	bl	8005f4e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fb10 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005f90:	4603      	mov	r3, r0
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff ffdc 	bl	8005f66 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff f933 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ffd8 	bl	8005f7e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	d005      	beq.n	8005fe0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 8005fd6:	4a06      	ldr	r2, [pc, #24]	; (8005ff0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 8005fd8:	2160      	movs	r1, #96	; 0x60
 8005fda:	4806      	ldr	r0, [pc, #24]	; (8005ff4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 8005fdc:	f018 f88e 	bl	801e0fc <__assert_func>
 8005fe0:	bf00      	nop
    }
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd90      	pop	{r4, r7, pc}
 8005fec:	08020224 	.word	0x08020224
 8005ff0:	08020c38 	.word	0x08020c38
 8005ff4:	08020574 	.word	0x08020574

08005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 ffcc 	bl	8006fb4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff ffed 	bl	800600e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ffed 	bl	8006026 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7ff ffea 	bl	800603e <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fa99 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800607e:	4604      	mov	r4, r0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff f8dd 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006088:	4603      	mov	r3, r0
 800608a:	429c      	cmp	r4, r3
 800608c:	d005      	beq.n	800609a <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006090:	4a06      	ldr	r2, [pc, #24]	; (80060ac <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006092:	2160      	movs	r1, #96	; 0x60
 8006094:	4806      	ldr	r0, [pc, #24]	; (80060b0 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8006096:	f018 f831 	bl	801e0fc <__assert_func>
 800609a:	bf00      	nop
    }
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd90      	pop	{r4, r7, pc}
 80060a6:	bf00      	nop
 80060a8:	08020224 	.word	0x08020224
 80060ac:	08020d84 	.word	0x08020d84
 80060b0:	08020574 	.word	0x08020574

080060b4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 ff79 	bl	8006fca <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff ffed 	bl	80060ca <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff ffed 	bl	80060e2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f884 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006124:	4603      	mov	r3, r0
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff ffdc 	bl	80060fa <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	e892 0003 	ldmia.w	r2, {r0, r1}
 800614a:	e883 0003 	stmia.w	r3, {r0, r1}
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3308      	adds	r3, #8
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8006158:	68b8      	ldr	r0, [r7, #8]
 800615a:	f7ff ffda 	bl	8006112 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 800615e:	4604      	mov	r4, r0
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ff0c 	bl	8005f7e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8006166:	4603      	mov	r3, r0
 8006168:	429c      	cmp	r4, r3
 800616a:	d005      	beq.n	8006178 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 800616c:	4b05      	ldr	r3, [pc, #20]	; (8006184 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 800616e:	4a06      	ldr	r2, [pc, #24]	; (8006188 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8006170:	2160      	movs	r1, #96	; 0x60
 8006172:	4806      	ldr	r0, [pc, #24]	; (800618c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 8006174:	f017 ffc2 	bl	801e0fc <__assert_func>
 8006178:	bf00      	nop
    }
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	bd90      	pop	{r4, r7, pc}
 8006184:	08020224 	.word	0x08020224
 8006188:	08020eac 	.word	0x08020eac
 800618c:	08020574 	.word	0x08020574

08006190 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 ff0b 	bl	8006fe0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ffed 	bl	80061bc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fefd 	bl	8006ff6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 80061fc:	4603      	mov	r3, r0
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3308      	adds	r3, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fefd 	bl	8007012 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8006218:	4603      	mov	r3, r0
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	f000 ff00 	bl	800702e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 800622e:	4603      	mov	r3, r0
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	f000 fefd 	bl	800703e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 8006244:	4603      	mov	r3, r0
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff ffb8 	bl	80061d4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	ca07      	ldmia	r2, {r0, r1, r2}
 800626a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3310      	adds	r3, #16
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fdf8 	bl	8005e70 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006280:	68b8      	ldr	r0, [r7, #8]
 8006282:	f7ff ffb3 	bl	80061ec <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8006286:	4604      	mov	r4, r0
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff ffc9 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006290:	4603      	mov	r3, r0
 8006292:	429c      	cmp	r4, r3
 8006294:	d10a      	bne.n	80062ac <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 8006296:	68b8      	ldr	r0, [r7, #8]
 8006298:	f7ff ffb5 	bl	8006206 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 800629c:	4604      	mov	r4, r0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff ffc9 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80062a6:	4603      	mov	r3, r0
 80062a8:	429c      	cmp	r4, r3
 80062aa:	d005      	beq.n	80062b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 80062ae:	4a06      	ldr	r2, [pc, #24]	; (80062c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 80062b0:	2174      	movs	r1, #116	; 0x74
 80062b2:	4806      	ldr	r0, [pc, #24]	; (80062cc <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 80062b4:	f017 ff22 	bl	801e0fc <__assert_func>
    }
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd90      	pop	{r4, r7, pc}
 80062c2:	bf00      	nop
 80062c4:	0801ff64 	.word	0x0801ff64
 80062c8:	08021058 	.word	0x08021058
 80062cc:	080201c8 	.word	0x080201c8

080062d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff ff7b 	bl	80061ec <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80062f6:	4603      	mov	r3, r0
    }
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff ff7b 	bl	8006206 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8006310:	4603      	mov	r3, r0
    }
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fe93 	bl	800704e <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff ffed 	bl	800631a <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ffec 	bl	8006332 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe fc9b 	bl	8004c9a <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fe5e 	bl	8007064 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff ffed 	bl	800639a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff ffed 	bl	80063b2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fe0f 	bl	8007012 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80063f4:	4603      	mov	r3, r0
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff ff79 	bl	8006300 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800640e:	4603      	mov	r3, r0
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f7ff ffd0 	bl	80063ca <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006432:	e883 0003 	stmia.w	r3, {r0, r1}
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3308      	adds	r3, #8
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe fc71 	bl	8004d24 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006442:	68b8      	ldr	r0, [r7, #8]
 8006444:	f7ff ffcd 	bl	80063e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8006448:	4604      	mov	r4, r0
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff ffd7 	bl	80063fe <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8006450:	4603      	mov	r3, r0
 8006452:	429c      	cmp	r4, r3
 8006454:	d005      	beq.n	8006462 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 8006456:	4b06      	ldr	r3, [pc, #24]	; (8006470 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 8006458:	4a06      	ldr	r2, [pc, #24]	; (8006474 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 800645a:	2160      	movs	r1, #96	; 0x60
 800645c:	4806      	ldr	r0, [pc, #24]	; (8006478 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 800645e:	f017 fe4d 	bl	801e0fc <__assert_func>
 8006462:	bf00      	nop
    }
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	bd90      	pop	{r4, r7, pc}
 800646e:	bf00      	nop
 8006470:	08020224 	.word	0x08020224
 8006474:	080212cc 	.word	0x080212cc
 8006478:	08020574 	.word	0x08020574

0800647c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fa12 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800648c:	4604      	mov	r4, r0
 800648e:	6838      	ldr	r0, [r7, #0]
 8006490:	f000 fdf3 	bl	800707a <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8006494:	4603      	mov	r3, r0
 8006496:	4619      	mov	r1, r3
 8006498:	4620      	mov	r0, r4
 800649a:	f000 fdf9 	bl	8007090 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fa06 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80064a4:	4603      	mov	r3, r0
    }
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd90      	pop	{r4, r7, pc}

080064ae <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fdff 	bl	80070ba <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff ffed 	bl	80064ae <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ffed 	bl	80064c6 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7ff ffea 	bl	80064de <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff f849 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800651e:	4604      	mov	r4, r0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe ff33 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006528:	4603      	mov	r3, r0
 800652a:	429c      	cmp	r4, r3
 800652c:	d005      	beq.n	800653a <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006530:	4a06      	ldr	r2, [pc, #24]	; (800654c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006532:	2160      	movs	r1, #96	; 0x60
 8006534:	4806      	ldr	r0, [pc, #24]	; (8006550 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8006536:	f017 fde1 	bl	801e0fc <__assert_func>
 800653a:	bf00      	nop
    }
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}
 8006546:	bf00      	nop
 8006548:	08020224 	.word	0x08020224
 800654c:	08021654 	.word	0x08021654
 8006550:	08020574 	.word	0x08020574

08006554 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4618      	mov	r0, r3
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fda1 	bl	80070d0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff ffed 	bl	8006580 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff f802 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80065c2:	4603      	mov	r3, r0
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fecd 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80065de:	4603      	mov	r3, r0
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff ffce 	bl	8006598 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3304      	adds	r3, #4
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800660c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	330c      	adds	r3, #12
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f828 	bl	800666c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fdff 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8006624:	4604      	mov	r4, r0
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7ff ffc2 	bl	80065b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800662c:	4603      	mov	r3, r0
 800662e:	429c      	cmp	r4, r3
 8006630:	d10a      	bne.n	8006648 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fdff 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800663a:	4604      	mov	r4, r0
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ffc5 	bl	80065cc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8006642:	4603      	mov	r3, r0
 8006644:	429c      	cmp	r4, r3
 8006646:	d005      	beq.n	8006654 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 800664a:	4a06      	ldr	r2, [pc, #24]	; (8006664 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 800664c:	2174      	movs	r1, #116	; 0x74
 800664e:	4806      	ldr	r0, [pc, #24]	; (8006668 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006650:	f017 fd54 	bl	801e0fc <__assert_func>
    }
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	bd90      	pop	{r4, r7, pc}
 800665e:	bf00      	nop
 8006660:	0801ff64 	.word	0x0801ff64
 8006664:	0802177c 	.word	0x0802177c
 8006668:	080201c8 	.word	0x080201c8

0800666c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fd1f 	bl	80070e6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff ffed 	bl	800669a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7ff ffed 	bl	80066b2 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fd97 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80066f4:	4603      	mov	r3, r0
    }
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006700:	b590      	push	{r4, r7, lr}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff ffdc 	bl	80066ca <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3304      	adds	r3, #4
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fb6b 	bl	8004dfa <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fe26 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800672c:	4604      	mov	r4, r0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff ffd7 	bl	80066e2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8006734:	4603      	mov	r3, r0
 8006736:	429c      	cmp	r4, r3
 8006738:	d005      	beq.n	8006746 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 800673c:	4a06      	ldr	r2, [pc, #24]	; (8006758 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 800673e:	2160      	movs	r1, #96	; 0x60
 8006740:	4806      	ldr	r0, [pc, #24]	; (800675c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 8006742:	f017 fcdb 	bl	801e0fc <__assert_func>
 8006746:	bf00      	nop
    }
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	bd90      	pop	{r4, r7, pc}
 8006752:	bf00      	nop
 8006754:	08020224 	.word	0x08020224
 8006758:	08021974 	.word	0x08021974
 800675c:	08020574 	.word	0x08020574

08006760 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fcbc 	bl	80070fc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ffed 	bl	8006776 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fdeb 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80067b8:	4603      	mov	r3, r0
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fc9f 	bl	8007112 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 80067d4:	4603      	mov	r3, r0
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff ffcd 	bl	800678e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3304      	adds	r3, #4
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fb30 	bl	8004e66 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3318      	adds	r3, #24
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff fb2f 	bl	8005e70 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe fdba 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800681a:	4604      	mov	r4, r0
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff ffc2 	bl	80067a6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8006822:	4603      	mov	r3, r0
 8006824:	429c      	cmp	r4, r3
 8006826:	d10a      	bne.n	800683e <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fda4 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006830:	4604      	mov	r4, r0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff ffc5 	bl	80067c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8006838:	4603      	mov	r3, r0
 800683a:	429c      	cmp	r4, r3
 800683c:	d005      	beq.n	800684a <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 8006840:	4a05      	ldr	r2, [pc, #20]	; (8006858 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 8006842:	2174      	movs	r1, #116	; 0x74
 8006844:	4805      	ldr	r0, [pc, #20]	; (800685c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 8006846:	f017 fc59 	bl	801e0fc <__assert_func>
    }
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	bd90      	pop	{r4, r7, pc}
 8006854:	0801ff64 	.word	0x0801ff64
 8006858:	08021be0 	.word	0x08021be0
 800685c:	080201c8 	.word	0x080201c8

08006860 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006860:	b590      	push	{r4, r7, lr}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff f820 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006870:	4604      	mov	r4, r0
 8006872:	6838      	ldr	r0, [r7, #0]
 8006874:	f000 fc5b 	bl	800712e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8006878:	4603      	mov	r3, r0
 800687a:	4619      	mov	r1, r3
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fc61 	bl	8007144 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7ff f814 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006888:	4603      	mov	r3, r0
    }
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	bd90      	pop	{r4, r7, pc}

08006892 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fc67 	bl	800716e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff ffed 	bl	8006892 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ffed 	bl	80068aa <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f7ff ffea 	bl	80068c2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fd3b 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006902:	4604      	mov	r4, r0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fe5d 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800690c:	4603      	mov	r3, r0
 800690e:	429c      	cmp	r4, r3
 8006910:	d005      	beq.n	800691e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8006912:	4b06      	ldr	r3, [pc, #24]	; (800692c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8006914:	4a06      	ldr	r2, [pc, #24]	; (8006930 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8006916:	2160      	movs	r1, #96	; 0x60
 8006918:	4806      	ldr	r0, [pc, #24]	; (8006934 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 800691a:	f017 fbef 	bl	801e0fc <__assert_func>
 800691e:	bf00      	nop
    }
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	bd90      	pop	{r4, r7, pc}
 800692a:	bf00      	nop
 800692c:	08020224 	.word	0x08020224
 8006930:	08021f14 	.word	0x08021f14
 8006934:	08020574 	.word	0x08020574

08006938 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fc14 	bl	8007184 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff ffed 	bl	800694e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fcff 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006990:	4603      	mov	r3, r0
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fe02 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80069ac:	4603      	mov	r3, r0
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80069b8:	b590      	push	{r4, r7, lr}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff ffcd 	bl	8006966 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3304      	adds	r3, #4
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	330c      	adds	r3, #12
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fe40 	bl	800666c <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fc27 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80069f4:	4604      	mov	r4, r0
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ffc1 	bl	800697e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 80069fc:	4603      	mov	r3, r0
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d10a      	bne.n	8006a18 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe fc11 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff ffc4 	bl	800699a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 8006a12:	4603      	mov	r3, r0
 8006a14:	429c      	cmp	r4, r3
 8006a16:	d005      	beq.n	8006a24 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8006a1a:	4a06      	ldr	r2, [pc, #24]	; (8006a34 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8006a1c:	2174      	movs	r1, #116	; 0x74
 8006a1e:	4806      	ldr	r0, [pc, #24]	; (8006a38 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8006a20:	f017 fb6c 	bl	801e0fc <__assert_func>
    }
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd90      	pop	{r4, r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	0801ff64 	.word	0x0801ff64
 8006a34:	0802203c 	.word	0x0802203c
 8006a38:	080201c8 	.word	0x080201c8

08006a3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fb9d 	bl	800719a <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff ffed 	bl	8006a52 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b082      	sub	sp, #8
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff ffed 	bl	8006a6a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fbc0 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006aac:	4603      	mov	r3, r0
    }
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff ffdc 	bl	8006a82 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fa41 	bl	8004f56 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8006ada:	68b8      	ldr	r0, [r7, #8]
 8006adc:	f7ff ffdd 	bl	8006a9a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fbac 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006aea:	4603      	mov	r3, r0
 8006aec:	429c      	cmp	r4, r3
 8006aee:	d005      	beq.n	8006afc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 8006af2:	4a06      	ldr	r2, [pc, #24]	; (8006b0c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8006af4:	2160      	movs	r1, #96	; 0x60
 8006af6:	4806      	ldr	r0, [pc, #24]	; (8006b10 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 8006af8:	f017 fb00 	bl	801e0fc <__assert_func>
 8006afc:	bf00      	nop
    }
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd90      	pop	{r4, r7, pc}
 8006b08:	08020224 	.word	0x08020224
 8006b0c:	08022234 	.word	0x08022234
 8006b10:	08020574 	.word	0x08020574

08006b14 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff f862 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006b24:	4604      	mov	r4, r0
 8006b26:	6838      	ldr	r0, [r7, #0]
 8006b28:	f000 fb42 	bl	80071b0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 fb48 	bl	80071c6 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff f856 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006b3c:	4603      	mov	r3, r0
    }
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd90      	pop	{r4, r7, pc}

08006b46 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fb42 	bl	80071f0 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
    }
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fb35 	bl	8007206 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
    }
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fb28 	bl	800721c <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
    }
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fb1b 	bl	8007232 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006c06:	b480      	push	{r7}
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4618      	mov	r0, r3
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	2301      	movs	r3, #1
 8006c42:	4618      	mov	r0, r3
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	2303      	movs	r3, #3
 8006c52:	4618      	mov	r0, r3
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8006c72:	b590      	push	{r4, r7, lr}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	60f8      	str	r0, [r7, #12]
 8006c7a:	60b9      	str	r1, [r7, #8]
 8006c7c:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fae1 	bl	8007248 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 8006c86:	4604      	mov	r4, r0
 8006c88:	f000 f9d1 	bl	800702e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	fb03 f202 	mul.w	r2, r3, r2
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4423      	add	r3, r4
    }
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd90      	pop	{r4, r7, pc}

08006ca4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	2303      	movs	r3, #3
 8006caa:	4618      	mov	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006cb4:	b480      	push	{r7}
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	2301      	movs	r3, #1
 8006cba:	4618      	mov	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fab7 	bl	800725e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8006d10:	b590      	push	{r4, r7, lr}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681c      	ldr	r4, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fab2 	bl	800728c <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	fb03 f202 	mul.w	r2, r3, r2
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4423      	add	r3, r4
  }
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd90      	pop	{r4, r7, pc}

08006d40 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
    }
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d005      	beq.n	8006d74 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 8006d68:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 8006d6a:	4a06      	ldr	r2, [pc, #24]	; (8006d84 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 8006d6c:	2185      	movs	r1, #133	; 0x85
 8006d6e:	4806      	ldr	r0, [pc, #24]	; (8006d88 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 8006d70:	f017 f9c4 	bl	801e0fc <__assert_func>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	080224a0 	.word	0x080224a0
 8006d84:	080224b0 	.word	0x080224b0
 8006d88:	08022518 	.word	0x08022518

08006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d005      	beq.n	8006da8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 8006d9e:	4a06      	ldr	r2, [pc, #24]	; (8006db8 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 8006da0:	2185      	movs	r1, #133	; 0x85
 8006da2:	4806      	ldr	r0, [pc, #24]	; (8006dbc <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006da4:	f017 f9aa 	bl	801e0fc <__assert_func>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	080224a0 	.word	0x080224a0
 8006db8:	08022574 	.word	0x08022574
 8006dbc:	08022518 	.word	0x08022518

08006dc0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
    }
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 8006dd6:	b480      	push	{r7}
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	2303      	movs	r3, #3
 8006ddc:	4618      	mov	r0, r3
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 8006de6:	b480      	push	{r7}
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	2301      	movs	r3, #1
 8006dec:	4618      	mov	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
    }
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
    }
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fa2b 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006e4c:	f107 020c 	add.w	r2, r7, #12
 8006e50:	2300      	movs	r3, #0
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa2f 	bl	80072b8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
    }
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fa00 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006ea2:	f107 020c 	add.w	r2, r7, #12
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa1c 	bl	80072e8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
    }
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
    }
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
    }
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
    }
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4618      	mov	r0, r3
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe f990 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006f22:	4603      	mov	r3, r0
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe f982 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006f68:	f107 030c 	add.w	r3, r7, #12
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 f998 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006f72:	f107 020c 	add.w	r2, r7, #12
 8006f76:	2300      	movs	r3, #0
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9cc 	bl	8007318 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
    }
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
    }
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
    }
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
    }
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
    }
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fadf 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8007008:	4603      	mov	r3, r0
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fad1 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8007024:	4603      	mov	r3, r0
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800702e:	b480      	push	{r7}
 8007030:	af00      	add	r7, sp, #0
 8007032:	2301      	movs	r3, #1
 8007034:	4618      	mov	r0, r3
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800703e:	b480      	push	{r7}
 8007040:	af00      	add	r7, sp, #0
 8007042:	2301      	movs	r3, #1
 8007044:	4618      	mov	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
    }
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
    }
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 800709a:	f107 030c 	add.w	r3, r7, #12
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f8ff 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80070a4:	f107 020c 	add.w	r2, r7, #12
 80070a8:	2300      	movs	r3, #0
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f943 	bl	8007338 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
    }
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
    }
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
    }
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
    }
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff f88a 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8007124:	4603      	mov	r3, r0
    }
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 800714e:	f107 030c 	add.w	r3, r7, #12
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f8a5 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007158:	f107 020c 	add.w	r2, r7, #12
 800715c:	2300      	movs	r3, #0
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f901 	bl	8007368 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
    }
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
    }
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
    }
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4618      	mov	r0, r3
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 80071d0:	f107 030c 	add.w	r3, r7, #12
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f864 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80071da:	f107 020c 	add.w	r2, r7, #12
 80071de:	2300      	movs	r3, #0
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f8d8 	bl	8007398 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 80071f8:	f000 f8e6 	bl	80073c8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800720e:	f000 f8e2 	bl	80073d6 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 8007224:	f000 f8de 	bl	80073e4 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800723a:	f000 f8d3 	bl	80073e4 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800725e:	b590      	push	{r4, r7, lr}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f8cf 	bl	800740c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 800726e:	687c      	ldr	r4, [r7, #4]
 8007270:	6838      	ldr	r0, [r7, #0]
 8007272:	f000 f8be 	bl	80073f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 8007276:	4603      	mov	r3, r0
 8007278:	2200      	movs	r2, #0
 800727a:	4619      	mov	r1, r3
 800727c:	4620      	mov	r0, r4
 800727e:	f000 f8d0 	bl	8007422 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	bd90      	pop	{r4, r7, pc}

0800728c <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	2300      	movs	r3, #0
 8007296:	4618      	mov	r0, r3
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 80072c6:	f107 0314 	add.w	r3, r7, #20
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 f8ba 	bl	8007446 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80072d2:	f107 0314 	add.w	r3, r7, #20
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4619      	mov	r1, r3
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f8c8 	bl	8007470 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80072e0:	bf00      	nop
 80072e2:	3738      	adds	r7, #56	; 0x38
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b088      	sub	sp, #32
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80072f6:	f107 0314 	add.w	r3, r7, #20
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f8c8 	bl	8007492 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	4619      	mov	r1, r3
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f000 f8d6 	bl	80074bc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007310:	bf00      	nop
 8007312:	3720      	adds	r7, #32
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f8d7 	bl	80074de <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8007346:	f107 0314 	add.w	r3, r7, #20
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 f8d7 	bl	8007500 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8007352:	f107 0314 	add.w	r3, r7, #20
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	4619      	mov	r1, r3
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f8ae 	bl	80074bc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007360:	bf00      	nop
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f000 f8d4 	bl	800752a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8007382:	f107 0314 	add.w	r3, r7, #20
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	4619      	mov	r1, r3
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f896 	bl	80074bc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8007390:	bf00      	nop
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 8007398:	b580      	push	{r7, lr}
 800739a:	b08e      	sub	sp, #56	; 0x38
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80073a6:	f107 0314 	add.w	r3, r7, #20
 80073aa:	68b9      	ldr	r1, [r7, #8]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 f8d1 	bl	8007554 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80073b2:	f107 0314 	add.w	r3, r7, #20
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	4619      	mov	r1, r3
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 f858 	bl	8007470 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80073c0:	bf00      	nop
 80073c2:	3738      	adds	r7, #56	; 0x38
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
}
 80073cc:	bf00      	nop
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 80073d6:	b480      	push	{r7}
 80073d8:	af00      	add	r7, sp, #0
}
 80073da:	bf00      	nop
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
}
 80073e8:	bf00      	nop
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 f8be 	bl	800757e <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 8007402:	4603      	mov	r3, r0
 8007404:	4618      	mov	r0, r3
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4618      	mov	r0, r3
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8007434:	1d3b      	adds	r3, r7, #4
 8007436:	4618      	mov	r0, r3
 8007438:	f7fd f82d 	bl	8004496 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
    {
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	f7fd fdf3 	bl	800503e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8007458:	f7fd fe01 	bl	800505e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 f8a3 	bl	80075ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	68b9      	ldr	r1, [r7, #8]
 8007484:	6978      	ldr	r0, [r7, #20]
 8007486:	f000 f89e 	bl	80075c6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800748a:	bf00      	nop
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
    {
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fd fe13 	bl	80050ca <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80074a4:	f7fd fe21 	bl	80050ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 f89d 	bl	80075ec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	6978      	ldr	r0, [r7, #20]
 80074d2:	f000 f898 	bl	8007606 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 80074d6:	bf00      	nop
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	6978      	ldr	r0, [r7, #20]
 80074f4:	f000 f89a 	bl	800762c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80074f8:	bf00      	nop
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
    {
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4618      	mov	r0, r3
 800750e:	f7fd fddc 	bl	80050ca <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8007512:	f7fd fdea 	bl	80050ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f899 	bl	8007652 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
    {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4618      	mov	r0, r3
 8007538:	f7fd fdc7 	bl	80050ca <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800753c:	f7fd fdd5 	bl	80050ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 f891 	bl	800766c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
    {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4618      	mov	r0, r3
 8007562:	f7fd fd6c 	bl	800503e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8007566:	f7fd fd7a 	bl	800505e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f000 f889 	bl	8007686 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f87f 	bl	80076a0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 80075a2:	4603      	mov	r3, r0
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f87d 	bl	80076b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 80075d2:	68b9      	ldr	r1, [r7, #8]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f890 	bl	80076fa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f8c4 	bl	800776c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80075e4:	bf00      	nop
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f8ef 	bl	80077dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f902 	bl	800781e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	68b9      	ldr	r1, [r7, #8]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 f908 	bl	8007834 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007624:	bf00      	nop
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f932 	bl	80078a4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	68b9      	ldr	r1, [r7, #8]
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 f9ca 	bl	80079de <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f9f5 	bl	8007a4e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fa09 	bl	8007a90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800767e:	bf00      	nop
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa1d 	bl	8007ad2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa33 	bl	8007b14 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 80076ae:	4603      	mov	r3, r0
    }
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80076b8:	b5b0      	push	{r4, r5, r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fe fa90 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80076c8:	4604      	mov	r4, r0
 80076ca:	6838      	ldr	r0, [r7, #0]
 80076cc:	f7ff fba9 	bl	8006e22 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 80076d0:	4605      	mov	r5, r0
 80076d2:	f107 030c 	add.w	r3, r7, #12
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff fde3 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	461a      	mov	r2, r3
 80076e2:	4629      	mov	r1, r5
 80076e4:	4620      	mov	r0, r4
 80076e6:	f000 fa27 	bl	8007b38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fe fa7c 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80076f0:	4603      	mov	r3, r0
    }
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bdb0      	pop	{r4, r5, r7, pc}

080076fa <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4618      	mov	r0, r3
 8007708:	f7fd fd9b 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	dd08      	ble.n	8007724 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd fd89 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800771a:	4603      	mov	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	dd01      	ble.n	8007724 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 8007724:	2300      	movs	r3, #0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fa14 	bl	8007b5a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa24 	bl	8007b90 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff ffec 	bl	800773a <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800776c:	b580      	push	{r7, lr}
 800776e:	b08c      	sub	sp, #48	; 0x30
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 f9f6 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 fa0d 	bl	8007ba8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800778e:	f107 0320 	add.w	r3, r7, #32
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f9eb 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fa50 	bl	8007c40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80077a6:	f107 0120 	add.w	r1, r7, #32
 80077aa:	f107 0010 	add.w	r0, r7, #16
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f000 fa50 	bl	8007c56 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80077b6:	f107 0310 	add.w	r3, r7, #16
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fa65 	bl	8007c8a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 80077c0:	f107 0320 	add.w	r3, r7, #32
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff ffc4 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80077ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff ffbf 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 80077d4:	bf00      	nop
 80077d6:	3728      	adds	r7, #40	; 0x28
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 80077dc:	b5b0      	push	{r4, r5, r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fe f862 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80077ec:	4604      	mov	r4, r0
 80077ee:	6838      	ldr	r0, [r7, #0]
 80077f0:	f7ff fb42 	bl	8006e78 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 80077f4:	4605      	mov	r5, r0
 80077f6:	f107 030c 	add.w	r3, r7, #12
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fd51 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007800:	f107 030c 	add.w	r3, r7, #12
 8007804:	461a      	mov	r2, r3
 8007806:	4629      	mov	r1, r5
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fa49 	bl	8007ca0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fe f84e 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007814:	4603      	mov	r3, r0
    }
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bdb0      	pop	{r4, r5, r7, pc}

0800781e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	6039      	str	r1, [r7, #0]
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8007834:	b580      	push	{r7, lr}
 8007836:	b08c      	sub	sp, #48	; 0x30
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8007840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff fa47 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	68b9      	ldr	r1, [r7, #8]
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 fa37 	bl	8007cc4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007856:	f107 0320 	add.w	r3, r7, #32
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fa3c 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fa7a 	bl	8007d5c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8007868:	4603      	mov	r3, r0
 800786a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800786e:	f107 0120 	add.w	r1, r7, #32
 8007872:	f107 0010 	add.w	r0, r7, #16
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f000 fa7a 	bl	8007d72 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800787e:	f107 0310 	add.w	r3, r7, #16
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fa8f 	bl	8007da6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8007888:	f107 0320 	add.w	r3, r7, #32
 800788c:	4618      	mov	r0, r3
 800788e:	f7fd feea 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007896:	4618      	mov	r0, r3
 8007898:	f7fd fee5 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 800789c:	bf00      	nop
 800789e:	3728      	adds	r7, #40	; 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fd fcc6 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	dd08      	ble.n	80078ce <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fd fcb4 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	dd01      	ble.n	80078ce <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 80078ce:	2300      	movs	r3, #0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fa70 	bl	8007dbc <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa8a 	bl	8007e06 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4618      	mov	r0, r3
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ffec 	bl	80078e4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff ffeb 	bl	80078fc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff ffeb 	bl	8007916 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff ffeb 	bl	8007930 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4618      	mov	r0, r3
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff feef 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	332c      	adds	r3, #44	; 0x2c
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff ffea 	bl	8007964 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff ffd8 	bl	800794a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff ffe5 	bl	800797e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fa1b 	bl	8007df0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff ffe8 	bl	80079a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80079de:	b580      	push	{r7, lr}
 80079e0:	b098      	sub	sp, #96	; 0x60
 80079e2:	af02      	add	r7, sp, #8
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80079ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f9ee 	bl	8007dd2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	68b9      	ldr	r1, [r7, #8]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fa28 	bl	8007e50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8007a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a04:	68f9      	ldr	r1, [r7, #12]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f8b2 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f917 	bl	8007c40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007a18:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007a1c:	f107 0014 	add.w	r0, r7, #20
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f000 fa5e 	bl	8007ee4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fa73 	bl	8007f18 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8007a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fe8b 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8007a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7ff ffbf 	bl	80079c4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 8007a46:	bf00      	nop
 8007a48:	3758      	adds	r7, #88	; 0x58
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007a4e:	b5b0      	push	{r4, r5, r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fd ff29 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007a5e:	4604      	mov	r4, r0
 8007a60:	6838      	ldr	r0, [r7, #0]
 8007a62:	f7ff fb0a 	bl	800707a <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8007a66:	4605      	mov	r5, r0
 8007a68:	f107 030c 	add.w	r3, r7, #12
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff fc18 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007a72:	f107 030c 	add.w	r3, r7, #12
 8007a76:	461a      	mov	r2, r3
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fa57 	bl	8007f2e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7fd ff15 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007a86:	4603      	mov	r3, r0
    }
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bdb0      	pop	{r4, r5, r7, pc}

08007a90 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007a90:	b5b0      	push	{r4, r5, r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fd ff08 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	6838      	ldr	r0, [r7, #0]
 8007aa4:	f7ff fb43 	bl	800712e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	f107 030c 	add.w	r3, r7, #12
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fbf7 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007ab4:	f107 030c 	add.w	r3, r7, #12
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4629      	mov	r1, r5
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 fa47 	bl	8007f50 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7fd fef4 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007ac8:	4603      	mov	r3, r0
    }
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bdb0      	pop	{r4, r5, r7, pc}

08007ad2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8007ad2:	b5b0      	push	{r4, r5, r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7fe f883 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	6838      	ldr	r0, [r7, #0]
 8007ae6:	f7ff fb63 	bl	80071b0 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8007aea:	4605      	mov	r5, r0
 8007aec:	f107 030c 	add.w	r3, r7, #12
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7ff fbd6 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007af6:	f107 030c 	add.w	r3, r7, #12
 8007afa:	461a      	mov	r2, r3
 8007afc:	4629      	mov	r1, r5
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 fa37 	bl	8007f72 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7fe f86f 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007b0a:	4603      	mov	r3, r0
    }
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bdb0      	pop	{r4, r5, r7, pc}

08007b14 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8007b14:	b590      	push	{r4, r7, lr}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7fd fd76 	bl	800560e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007b22:	4604      	mov	r4, r0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fd fd82 	bl	800562e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	fb04 f303 	mul.w	r3, r4, r3
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd90      	pop	{r4, r7, pc}

08007b38 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	6978      	ldr	r0, [r7, #20]
 8007b4e:	f000 fa3c 	bl	8007fca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8007b52:	bf00      	nop
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
    }
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 fa5c 	bl	800803e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fd fb43 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007bbc:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fd fb33 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007bc6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fd fb39 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d107      	bne.n	8007be8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd fb26 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d001      	beq.n	8007bec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007bec:	2300      	movs	r3, #0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	6979      	ldr	r1, [r7, #20]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fa3b 	bl	8008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fd fb1e 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007c06:	4602      	mov	r2, r0
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d107      	bne.n	8007c1e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fd fb0b 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007c16:	4602      	mov	r2, r0
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d006      	beq.n	8007c2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007c20:	4a05      	ldr	r2, [pc, #20]	; (8007c38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007c22:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007c26:	4805      	ldr	r0, [pc, #20]	; (8007c3c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007c28:	f016 fa68 	bl	801e0fc <__assert_func>
}
 8007c2c:	bf00      	nop
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	080225dc 	.word	0x080225dc
 8007c38:	0802260c 	.word	0x0802260c
 8007c3c:	080226f0 	.word	0x080226f0

08007c40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	605a      	str	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	609a      	str	r2, [r3, #8]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	60da      	str	r2, [r3, #12]
  }
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa20 	bl	80080d8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 8007c98:	bf00      	nop
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	68b9      	ldr	r1, [r7, #8]
 8007cb4:	6978      	ldr	r0, [r7, #20]
 8007cb6:	f000 fa3a 	bl	800812e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8007cba:	bf00      	nop
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fd fb5b 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007cd8:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd fb4b 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007ce2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fd fb51 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007cec:	4602      	mov	r2, r0
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d107      	bne.n	8007d04 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fd fb3e 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d001      	beq.n	8007d08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	6979      	ldr	r1, [r7, #20]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fa45 	bl	80081a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fd fb36 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007d22:	4602      	mov	r2, r0
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d107      	bne.n	8007d3a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fd fb23 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d006      	beq.n	8007d48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8007d3a:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007d3c:	4a05      	ldr	r2, [pc, #20]	; (8007d54 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007d3e:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007d42:	4805      	ldr	r0, [pc, #20]	; (8007d58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007d44:	f016 f9da 	bl	801e0fc <__assert_func>
}
 8007d48:	bf00      	nop
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	080225dc 	.word	0x080225dc
 8007d54:	0802274c 	.word	0x0802274c
 8007d58:	080226f0 	.word	0x080226f0

08007d5c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	605a      	str	r2, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	609a      	str	r2, [r3, #8]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	60da      	str	r2, [r3, #12]
  }
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa2a 	bl	8008208 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007db4:	bf00      	nop
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
    }
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fa20 	bl	8008226 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fd ffc6 	bl	8005db8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8007e2c:	4603      	mov	r3, r0
    }
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fd ffc6 	bl	8005dd2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8007e46:	4603      	mov	r3, r0
    }
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007e5c:	68b8      	ldr	r0, [r7, #8]
 8007e5e:	f7ff ffdd 	bl	8007e1c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 8007e62:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007e64:	68b8      	ldr	r0, [r7, #8]
 8007e66:	f7ff ffe6 	bl	8007e36 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 8007e6a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fd f9e7 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007e74:	4602      	mov	r2, r0
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d107      	bne.n	8007e8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fd f9d4 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d001      	beq.n	8007e90 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e000      	b.n	8007e92 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8007e90:	2300      	movs	r3, #0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d005      	beq.n	8007ea2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	6979      	ldr	r1, [r7, #20]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 f8e9 	bl	8008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fd f9cc 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d107      	bne.n	8007ec2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fd f9b9 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d006      	beq.n	8007ed0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8007ec2:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007ec4:	4a05      	ldr	r2, [pc, #20]	; (8007edc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007ec6:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007eca:	4805      	ldr	r0, [pc, #20]	; (8007ee0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007ecc:	f016 f916 	bl	801e0fc <__assert_func>
}
 8007ed0:	bf00      	nop
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	080225dc 	.word	0x080225dc
 8007edc:	08022830 	.word	0x08022830
 8007ee0:	080226f0 	.word	0x080226f0

08007ee4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	68ba      	ldr	r2, [r7, #8]
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	609a      	str	r2, [r3, #8]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	60da      	str	r2, [r3, #12]
  }
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f992 	bl	800824a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b086      	sub	sp, #24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	6978      	ldr	r0, [r7, #20]
 8007f44:	f000 f9ac 	bl	80082a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8007f48:	bf00      	nop
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	6978      	ldr	r0, [r7, #20]
 8007f66:	f000 f9d5 	bl	8008314 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 8007f6a:	bf00      	nop
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b086      	sub	sp, #24
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	f000 fa09 	bl	800839e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007f8c:	bf00      	nop
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fa37 	bl	8008412 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b082      	sub	sp, #8
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3310      	adds	r3, #16
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fa37 	bl	800842e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007fca:	b590      	push	{r4, r7, lr}
 8007fcc:	b087      	sub	sp, #28
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	60f8      	str	r0, [r7, #12]
 8007fd2:	60b9      	str	r1, [r7, #8]
 8007fd4:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 8007fd6:	68b8      	ldr	r0, [r7, #8]
 8007fd8:	f7ff ffdc 	bl	8007f94 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 8007fdc:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007fde:	68b8      	ldr	r0, [r7, #8]
 8007fe0:	f7ff ffe5 	bl	8007fae <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 8007fe4:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fd f92a 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d107      	bne.n	8008006 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fd f917 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007ffe:	4602      	mov	r2, r0
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	4293      	cmp	r3, r2
 8008004:	d001      	beq.n	800800a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800800a:	2300      	movs	r3, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	6979      	ldr	r1, [r7, #20]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f82c 	bl	8008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800801c:	68b8      	ldr	r0, [r7, #8]
 800801e:	f000 fa14 	bl	800844a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 8008022:	4604      	mov	r4, r0
 8008024:	68b8      	ldr	r0, [r7, #8]
 8008026:	f000 fa1b 	bl	8008460 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 800802a:	4603      	mov	r3, r0
 800802c:	461a      	mov	r2, r3
 800802e:	4621      	mov	r1, r4
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fa21 	bl	8008478 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 8008036:	bf00      	nop
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	bd90      	pop	{r4, r7, pc}

0800803e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800803e:	b5b0      	push	{r4, r5, r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fa50 	bl	80084ee <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 800804e:	687c      	ldr	r4, [r7, #4]
 8008050:	6838      	ldr	r0, [r7, #0]
 8008052:	f000 fa2f 	bl	80084b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8008056:	4605      	mov	r5, r0
 8008058:	6838      	ldr	r0, [r7, #0]
 800805a:	f000 fa38 	bl	80084ce <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 800805e:	4603      	mov	r3, r0
 8008060:	461a      	mov	r2, r3
 8008062:	4629      	mov	r1, r5
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fa4d 	bl	8008504 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bdb0      	pop	{r4, r5, r7, pc}

08008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b03      	cmp	r3, #3
 8008084:	d108      	bne.n	8008098 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b03      	cmp	r3, #3
 800808a:	d105      	bne.n	8008098 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	db02      	blt.n	8008098 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da06      	bge.n	80080a6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 8008098:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 800809a:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 800809c:	f240 1111 	movw	r1, #273	; 0x111
 80080a0:	480c      	ldr	r0, [pc, #48]	; (80080d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 80080a2:	f016 f82b 	bl	801e0fc <__assert_func>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	613b      	str	r3, [r7, #16]
  }
 80080ae:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	fb02 f103 	mul.w	r1, r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	f000 fa33 	bl	8008528 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 80080c2:	bf00      	nop
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	080229f4 	.word	0x080229f4
 80080d0:	08022b84 	.word	0x08022b84
 80080d4:	08022c10 	.word	0x08022c10

080080d8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fa2d 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fa48 	bl	800857e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4618      	mov	r0, r3
 8008104:	f7fd f89d 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008108:	4603      	mov	r3, r0
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	4618      	mov	r0, r3
 8008120:	f7fd f92a 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008124:	4603      	mov	r3, r0
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800812e:	b590      	push	{r4, r7, lr}
 8008130:	b087      	sub	sp, #28
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800813a:	68b8      	ldr	r0, [r7, #8]
 800813c:	f7ff ffdb 	bl	80080f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8008140:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8008142:	68b8      	ldr	r0, [r7, #8]
 8008144:	f7ff ffe5 	bl	8008112 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8008148:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4618      	mov	r0, r3
 800814e:	f7fd f91e 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008152:	4602      	mov	r2, r0
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	4293      	cmp	r3, r2
 8008158:	d107      	bne.n	800816a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd f90b 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008162:	4602      	mov	r2, r0
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	4293      	cmp	r3, r2
 8008168:	d001      	beq.n	800816e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 800816e:	2300      	movs	r3, #0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	6979      	ldr	r1, [r7, #20]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f812 	bl	80081a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8008180:	68b8      	ldr	r0, [r7, #8]
 8008182:	f000 fa0b 	bl	800859c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 8008186:	4604      	mov	r4, r0
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f000 fa13 	bl	80085b4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800818e:	4603      	mov	r3, r0
 8008190:	461a      	mov	r2, r3
 8008192:	4621      	mov	r1, r4
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fa19 	bl	80085cc <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd90      	pop	{r4, r7, pc}
	...

080081a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d108      	bne.n	80081c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d105      	bne.n	80081c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	db02      	blt.n	80081c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	da06      	bge.n	80081d6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 80081c8:	4b0c      	ldr	r3, [pc, #48]	; (80081fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 80081ca:	4a0d      	ldr	r2, [pc, #52]	; (8008200 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 80081cc:	f240 1111 	movw	r1, #273	; 0x111
 80081d0:	480c      	ldr	r0, [pc, #48]	; (8008204 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 80081d2:	f015 ff93 	bl	801e0fc <__assert_func>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	613b      	str	r3, [r7, #16]
  }
 80081de:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	fb02 f103 	mul.w	r1, r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	f000 fa0b 	bl	8008608 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 80081f2:	bf00      	nop
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	080229f4 	.word	0x080229f4
 8008200:	08022c6c 	.word	0x08022c6c
 8008204:	08022c10 	.word	0x08022c10

08008208 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008210:	2100      	movs	r1, #0
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa05 	bl	8008622 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fa20 	bl	800865e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	6039      	str	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa23 	bl	800867c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fa29 	bl	8008692 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008252:	2200      	movs	r2, #0
 8008254:	2100      	movs	r1, #0
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa43 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fa59 	bl	8008714 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fa5d 	bl	8008734 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800827a:	4603      	mov	r3, r0
 800827c:	4618      	mov	r0, r3
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3308      	adds	r3, #8
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fa5d 	bl	8008750 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8008296:	4603      	mov	r3, r0
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80082a0:	b590      	push	{r4, r7, lr}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80082ac:	68b8      	ldr	r0, [r7, #8]
 80082ae:	f7ff ffdc 	bl	800826a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 80082b2:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80082b4:	68b8      	ldr	r0, [r7, #8]
 80082b6:	f7ff ffe5 	bl	8008284 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 80082ba:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fd f865 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80082c4:	4602      	mov	r2, r0
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d107      	bne.n	80082dc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fd f852 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80082d4:	4602      	mov	r2, r0
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	4293      	cmp	r3, r2
 80082da:	d001      	beq.n	80082e0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 80082dc:	2301      	movs	r3, #1
 80082de:	e000      	b.n	80082e2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 80082e0:	2300      	movs	r3, #0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	6979      	ldr	r1, [r7, #20]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff ff59 	bl	80081a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80082f2:	68b8      	ldr	r0, [r7, #8]
 80082f4:	f000 fa39 	bl	800876a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 80082f8:	4604      	mov	r4, r0
 80082fa:	68b8      	ldr	r0, [r7, #8]
 80082fc:	f000 fa40 	bl	8008780 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 8008300:	4603      	mov	r3, r0
 8008302:	461a      	mov	r2, r3
 8008304:	4621      	mov	r1, r4
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fa46 	bl	8008798 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 800830c:	bf00      	nop
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	bd90      	pop	{r4, r7, pc}

08008314 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 8008314:	b590      	push	{r4, r7, lr}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 8008320:	68b8      	ldr	r0, [r7, #8]
 8008322:	f000 fa57 	bl	80087d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 8008326:	4604      	mov	r4, r0
 8008328:	f107 0310 	add.w	r3, r7, #16
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe ffb8 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8008332:	f107 0310 	add.w	r3, r7, #16
 8008336:	461a      	mov	r2, r3
 8008338:	4621      	mov	r1, r4
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff f8be 	bl	80074bc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8008340:	68b8      	ldr	r0, [r7, #8]
 8008342:	f000 fa53 	bl	80087ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 8008346:	4604      	mov	r4, r0
 8008348:	f107 0314 	add.w	r3, r7, #20
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fa59 	bl	8008804 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8008352:	f107 0314 	add.w	r3, r7, #20
 8008356:	461a      	mov	r2, r3
 8008358:	4621      	mov	r1, r4
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 fa5d 	bl	800881a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008360:	bf00      	nop
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	bd90      	pop	{r4, r7, pc}

08008368 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fa62 	bl	800883c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8008378:	4603      	mov	r3, r0
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	4618      	mov	r0, r3
 8008390:	f7fc ff4c 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008394:	4603      	mov	r3, r0
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800839e:	b590      	push	{r4, r7, lr}
 80083a0:	b087      	sub	sp, #28
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80083aa:	68b8      	ldr	r0, [r7, #8]
 80083ac:	f7ff ffdc 	bl	8008368 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 80083b0:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80083b2:	68b8      	ldr	r0, [r7, #8]
 80083b4:	f7ff ffe5 	bl	8008382 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 80083b8:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fc ff40 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80083c2:	4602      	mov	r2, r0
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d107      	bne.n	80083da <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fc ff2d 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d001      	beq.n	80083de <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 80083da:	2301      	movs	r3, #1
 80083dc:	e000      	b.n	80083e0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 80083de:	2300      	movs	r3, #0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	6979      	ldr	r1, [r7, #20]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff fe42 	bl	8008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80083f0:	68b8      	ldr	r0, [r7, #8]
 80083f2:	f000 fa31 	bl	8008858 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 80083f6:	4604      	mov	r4, r0
 80083f8:	68b8      	ldr	r0, [r7, #8]
 80083fa:	f000 fa38 	bl	800886e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 80083fe:	4603      	mov	r3, r0
 8008400:	461a      	mov	r2, r3
 8008402:	4621      	mov	r1, r4
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 fa3e 	bl	8008886 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	bd90      	pop	{r4, r7, pc}

08008412 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f7fc ffb5 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008424:	4603      	mov	r3, r0
    }
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f7fc ffa7 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008440:	4603      	mov	r3, r0
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3310      	adds	r3, #16
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008484:	f107 0310 	add.w	r3, r7, #16
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	68b9      	ldr	r1, [r7, #8]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 fa18 	bl	80088c2 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 8008492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe ff03 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800849c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80084a0:	f107 0310 	add.w	r3, r7, #16
 80084a4:	4619      	mov	r1, r3
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fa22 	bl	80088f0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80084ac:	bf00      	nop
 80084ae:	3728      	adds	r7, #40	; 0x28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fa27 	bl	8008912 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 80084c4:	4603      	mov	r3, r0
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b082      	sub	sp, #8
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7fd fabd 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80084dc:	4603      	mov	r3, r0
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fa22 	bl	8008928 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80084e4:	4603      	mov	r3, r0
    }
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4618      	mov	r0, r3
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	4618      	mov	r0, r3
 800851a:	f7fb ffbc 	bl	8004496 <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	bf00      	nop
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8008542:	b5b0      	push	{r4, r5, r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689c      	ldr	r4, [r3, #8]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f9f2 	bl	8008940 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 800855c:	4605      	mov	r5, r0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 f9fb 	bl	8008960 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 800856a:	4603      	mov	r3, r0
 800856c:	461a      	mov	r2, r3
 800856e:	4629      	mov	r1, r5
 8008570:	4620      	mov	r0, r4
 8008572:	f000 fa05 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bdb0      	pop	{r4, r5, r7, pc}

0800857e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008586:	2101      	movs	r1, #1
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff ffda 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa06 	bl	80089a0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80085d8:	f107 0314 	add.w	r3, r7, #20
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 f9ec 	bl	80089be <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 80085e6:	f107 031c 	add.w	r3, r7, #28
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fe59 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80085f0:	f107 021c 	add.w	r2, r7, #28
 80085f4:	f107 0314 	add.w	r3, r7, #20
 80085f8:	4619      	mov	r1, r3
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 f9f6 	bl	80089ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008600:	bf00      	nop
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8008622:	b5b0      	push	{r4, r5, r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689c      	ldr	r4, [r3, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f9e9 	bl	8008a0e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800863c:	4605      	mov	r5, r0
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 f9f2 	bl	8008a2e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 800864a:	4603      	mov	r3, r0
 800864c:	461a      	mov	r2, r3
 800864e:	4629      	mov	r1, r5
 8008650:	4620      	mov	r0, r4
 8008652:	f000 f995 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bdb0      	pop	{r4, r5, r7, pc}

0800865e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800865e:	b580      	push	{r7, lr}
 8008660:	b082      	sub	sp, #8
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008666:	2101      	movs	r1, #1
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff ffda 	bl	8008622 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f9ed 	bl	8008a4e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8008692:	b590      	push	{r4, r7, lr}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
 800869c:	687c      	ldr	r4, [r7, #4]
 800869e:	6838      	ldr	r0, [r7, #0]
 80086a0:	f000 f9e4 	bl	8008a6c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 80086a4:	4603      	mov	r3, r0
 80086a6:	4619      	mov	r1, r3
 80086a8:	4620      	mov	r0, r4
 80086aa:	f7fd fbe1 	bl	8005e70 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	1d1c      	adds	r4, r3, #4
 80086b2:	6838      	ldr	r0, [r7, #0]
 80086b4:	f000 f9e6 	bl	8008a84 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 80086b8:	4603      	mov	r3, r0
 80086ba:	4619      	mov	r1, r3
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 f9f8 	bl	8008ab2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80086c8:	6838      	ldr	r0, [r7, #0]
 80086ca:	f000 f9e6 	bl	8008a9a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 80086ce:	4603      	mov	r3, r0
 80086d0:	4619      	mov	r1, r3
 80086d2:	4620      	mov	r0, r4
 80086d4:	f000 f9fc 	bl	8008ad0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd90      	pop	{r4, r7, pc}

080086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b086      	sub	sp, #24
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	68b8      	ldr	r0, [r7, #8]
 80086f2:	f000 f9fc 	bl	8008aee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 80086f6:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	68b8      	ldr	r0, [r7, #8]
 80086fc:	f000 fa03 	bl	8008b06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8008700:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	6979      	ldr	r1, [r7, #20]
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f000 fa09 	bl	8008b1e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800870c:	bf00      	nop
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800871c:	2201      	movs	r2, #1
 800871e:	2100      	movs	r1, #0
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff ffde 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa1f 	bl	8008b6a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f7fc fd7e 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008746:	4603      	mov	r3, r0
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4618      	mov	r0, r3
 800875c:	f7fd fdc3 	bl	80062e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8008760:	4603      	mov	r3, r0
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3308      	adds	r3, #8
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008798:	b580      	push	{r7, lr}
 800879a:	b08c      	sub	sp, #48	; 0x30
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 80087a4:	f107 0310 	add.w	r3, r7, #16
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 f9ec 	bl	8008b8a <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 80087b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe fd73 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80087bc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80087c0:	f107 0310 	add.w	r3, r7, #16
 80087c4:	4619      	mov	r1, r3
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f9f6 	bl	8008bb8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80087cc:	bf00      	nop
 80087ce:	3730      	adds	r7, #48	; 0x30
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3304      	adds	r3, #4
 80087f8:	4618      	mov	r0, r3
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800881a:	b580      	push	{r7, lr}
 800881c:	b086      	sub	sp, #24
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	68b9      	ldr	r1, [r7, #8]
 800882e:	6978      	ldr	r0, [r7, #20]
 8008830:	f000 f9d4 	bl	8008bdc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008834:	bf00      	nop
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4618      	mov	r0, r3
 800884a:	f7fc fcfa 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800884e:	4603      	mov	r3, r0
    }
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008886:	b580      	push	{r7, lr}
 8008888:	b08a      	sub	sp, #40	; 0x28
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8008892:	f107 0310 	add.w	r3, r7, #16
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 f9d8 	bl	8008c50 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 80088a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe fcfc 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80088aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80088ae:	f107 0310 	add.w	r3, r7, #16
 80088b2:	4619      	mov	r1, r3
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f9e2 	bl	8008c7e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80088ba:	bf00      	nop
 80088bc:	3728      	adds	r7, #40	; 0x28
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80088c2:	b590      	push	{r4, r7, lr}
 80088c4:	b085      	sub	sp, #20
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80088ce:	68b8      	ldr	r0, [r7, #8]
 80088d0:	f7fd f821 	bl	8005916 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 80088d4:	4604      	mov	r4, r0
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fd f828 	bl	800592c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	4621      	mov	r1, r4
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fa00 	bl	8008ce8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd90      	pop	{r4, r7, pc}

080088f0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	6978      	ldr	r0, [r7, #20]
 8008906:	f000 fa1f 	bl	8008d48 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800890a:	bf00      	nop
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fa1c 	bl	8008d6e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 8008936:	4603      	mov	r3, r0
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
  }
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
  }
 8008974:	4618      	mov	r0, r3
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80089a8:	2102      	movs	r1, #2
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff fdc9 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f9e8 	bl	8008d86 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80089be:	b590      	push	{r4, r7, lr}
 80089c0:	b085      	sub	sp, #20
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80089ca:	68b8      	ldr	r0, [r7, #8]
 80089cc:	f7fd f843 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80089d0:	4604      	mov	r4, r0
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fc fe77 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	4621      	mov	r1, r4
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fa04 	bl	8008dec <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd90      	pop	{r4, r7, pc}

080089ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	6978      	ldr	r0, [r7, #20]
 8008a02:	f000 fa21 	bl	8008e48 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8008a06:	bf00      	nop
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
  }
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
  }
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008a56:	2102      	movs	r1, #2
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7ff fde2 	bl	8008622 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa05 	bl	8008e6e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3310      	adds	r3, #16
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b082      	sub	sp, #8
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 f9de 	bl	8008e82 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff f846 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8008aee:	b480      	push	{r7}
 8008af0:	b083      	sub	sp, #12
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
      : inner;
 8008af8:	683b      	ldr	r3, [r7, #0]
  }
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
      : outer;
 8008b10:	687b      	ldr	r3, [r7, #4]
  }
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8008b1e:	b5b0      	push	{r4, r5, r7, lr}
 8008b20:	b086      	sub	sp, #24
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689c      	ldr	r4, [r3, #8]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	68b9      	ldr	r1, [r7, #8]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f9b2 	bl	8008ea0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f9c2 	bl	8008ed0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 8008b4c:	eef0 7a40 	vmov.f32	s15, s0
 8008b50:	edc7 7a05 	vstr	s15, [r7, #20]
 8008b54:	f107 0314 	add.w	r3, r7, #20
 8008b58:	461a      	mov	r2, r3
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f7ff ff0f 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008b62:	bf00      	nop
 8008b64:	3718      	adds	r7, #24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bdb0      	pop	{r4, r5, r7, pc}

08008b6a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008b72:	2202      	movs	r2, #2
 8008b74:	2100      	movs	r1, #0
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff fdb3 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f9ce 	bl	8008f1e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008b8a:	b590      	push	{r4, r7, lr}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008b96:	68b8      	ldr	r0, [r7, #8]
 8008b98:	f7fd fbe9 	bl	800636e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fd fbf0 	bl	8006384 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	4621      	mov	r1, r4
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f9ec 	bl	8008f88 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd90      	pop	{r4, r7, pc}

08008bb8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	6978      	ldr	r0, [r7, #20]
 8008bce:	f000 fa0d 	bl	8008fec <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8008bd2:	bf00      	nop
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 8008bdc:	b590      	push	{r4, r7, lr}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fc fbcf 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	68b8      	ldr	r0, [r7, #8]
 8008bf4:	f7fd fdd7 	bl	80067a6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	429c      	cmp	r4, r3
 8008bfc:	d10a      	bne.n	8008c14 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fc fbb9 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008c06:	4604      	mov	r4, r0
 8008c08:	68b8      	ldr	r0, [r7, #8]
 8008c0a:	f7fd fdda 	bl	80067c2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	429c      	cmp	r4, r3
 8008c12:	d005      	beq.n	8008c20 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 8008c14:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 8008c16:	4a0c      	ldr	r2, [pc, #48]	; (8008c48 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 8008c18:	21a1      	movs	r1, #161	; 0xa1
 8008c1a:	480c      	ldr	r0, [pc, #48]	; (8008c4c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 8008c1c:	f015 fa6e 	bl	801e0fc <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 8008c20:	68b8      	ldr	r0, [r7, #8]
 8008c22:	f000 f9f6 	bl	8009012 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 8008c26:	4604      	mov	r4, r0
 8008c28:	68b8      	ldr	r0, [r7, #8]
 8008c2a:	f000 f9fe 	bl	800902a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	461a      	mov	r2, r3
 8008c32:	4621      	mov	r1, r4
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fa04 	bl	8009042 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 8008c3a:	bf00      	nop
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd90      	pop	{r4, r7, pc}
 8008c42:	bf00      	nop
 8008c44:	08022cf8 	.word	0x08022cf8
 8008c48:	08022d30 	.word	0x08022d30
 8008c4c:	080231f0 	.word	0x080231f0

08008c50 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008c5c:	68b8      	ldr	r0, [r7, #8]
 8008c5e:	f7fd feed 	bl	8006a3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8008c62:	4604      	mov	r4, r0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fc fef6 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4621      	mov	r1, r4
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fa29 	bl	80090c8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd90      	pop	{r4, r7, pc}

08008c7e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	6978      	ldr	r0, [r7, #20]
 8008c94:	f000 fa46 	bl	8009124 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008c98:	bf00      	nop
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa4e 	bl	800914a <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff ffed 	bl	8008ca0 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff ffed 	bl	8008cb8 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008ce8:	b590      	push	{r4, r7, lr}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7ff ffeb 	bl	8008cd0 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fb fe5c 	bl	80049bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3310      	adds	r3, #16
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	6812      	ldr	r2, [r2, #0]
 8008d0c:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8008d0e:	68b8      	ldr	r0, [r7, #8]
 8008d10:	f7fc fe3b 	bl	800598a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8008d14:	4604      	mov	r4, r0
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7fc fe45 	bl	80059a6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	429c      	cmp	r4, r3
 8008d20:	d005      	beq.n	8008d2e <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 8008d22:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 8008d24:	4a06      	ldr	r2, [pc, #24]	; (8008d40 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 8008d26:	2160      	movs	r1, #96	; 0x60
 8008d28:	4806      	ldr	r0, [pc, #24]	; (8008d44 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 8008d2a:	f015 f9e7 	bl	801e0fc <__assert_func>
 8008d2e:	bf00      	nop
    }
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	08020224 	.word	0x08020224
 8008d40:	08023250 	.word	0x08023250
 8008d44:	08020574 	.word	0x08020574

08008d48 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008d54:	68b9      	ldr	r1, [r7, #8]
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fa02 	bl	8009160 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	68b9      	ldr	r1, [r7, #8]
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 fab3 	bl	80092cc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fae0 	bl	800933c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008d7c:	4603      	mov	r3, r0
    }
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008d8e:	2103      	movs	r1, #3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7ff fbd6 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fae0 	bl	800935c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fae4 	bl	800937a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7ff ffed 	bl	8008da4 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ffed 	bl	8008dbc <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008dec:	b590      	push	{r4, r7, lr}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f7ff ffeb 	bl	8008dd4 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fc fa0d 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008e12:	4604      	mov	r4, r0
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fc fab9 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d005      	beq.n	8008e2e <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 8008e22:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 8008e24:	4a06      	ldr	r2, [pc, #24]	; (8008e40 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 8008e26:	2160      	movs	r1, #96	; 0x60
 8008e28:	4806      	ldr	r0, [pc, #24]	; (8008e44 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 8008e2a:	f015 f967 	bl	801e0fc <__assert_func>
 8008e2e:	bf00      	nop
    }
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd90      	pop	{r4, r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	08020224 	.word	0x08020224
 8008e40:	08023514 	.word	0x08023514
 8008e44:	08020574 	.word	0x08020574

08008e48 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 fa9a 	bl	8009390 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	68b9      	ldr	r1, [r7, #8]
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 fac3 	bl	80093ec <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008e66:	bf00      	nop
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	bf00      	nop
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fae3 	bl	800945c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8008ea0:	b590      	push	{r4, r7, lr}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681c      	ldr	r4, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fb0f 	bl	80094d6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	fb03 f202 	mul.w	r2, r3, r2
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4423      	add	r3, r4
  }
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3714      	adds	r7, #20
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd90      	pop	{r4, r7, pc}

08008ed0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008ed0:	b5b0      	push	{r4, r5, r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 fb04 	bl	80094ec <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fb07 	bl	8009502 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 8008ef4:	4605      	mov	r5, r0
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	332c      	adds	r3, #44	; 0x2c
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fb17 	bl	8009532 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 8008f04:	4603      	mov	r3, r0
 8008f06:	461a      	mov	r2, r3
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 fb29 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8008f10:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008f14:	eeb0 0a67 	vmov.f32	s0, s15
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bdb0      	pop	{r4, r5, r7, pc}

08008f1e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008f26:	2200      	movs	r2, #0
 8008f28:	2101      	movs	r1, #1
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff fbd9 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fb2b 	bl	800958c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 8008f36:	bf00      	nop
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b082      	sub	sp, #8
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fb30 	bl	80095ac <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7ff ffed 	bl	8008f3e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff ffed 	bl	8008f56 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8008f88:	b590      	push	{r4, r7, lr}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff ffea 	bl	8008f6e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3308      	adds	r3, #8
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fb feb9 	bl	8004d24 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008fb2:	68b8      	ldr	r0, [r7, #8]
 8008fb4:	f7fd fa15 	bl	80063e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7fd fa1f 	bl	80063fe <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d005      	beq.n	8008fd2 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 8008fc6:	4b06      	ldr	r3, [pc, #24]	; (8008fe0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 8008fc8:	4a06      	ldr	r2, [pc, #24]	; (8008fe4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 8008fca:	2160      	movs	r1, #96	; 0x60
 8008fcc:	4806      	ldr	r0, [pc, #24]	; (8008fe8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8008fce:	f015 f895 	bl	801e0fc <__assert_func>
 8008fd2:	bf00      	nop
    }
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd90      	pop	{r4, r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	08020224 	.word	0x08020224
 8008fe4:	0802363c 	.word	0x0802363c
 8008fe8:	08020574 	.word	0x08020574

08008fec <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008ff8:	68b9      	ldr	r1, [r7, #8]
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 fae1 	bl	80095c2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	68b9      	ldr	r1, [r7, #8]
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 fb23 	bl	8009650 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800900a:	bf00      	nop
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	3304      	adds	r3, #4
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8009042:	b580      	push	{r7, lr}
 8009044:	b08a      	sub	sp, #40	; 0x28
 8009046:	af00      	add	r7, sp, #0
 8009048:	60f8      	str	r0, [r7, #12]
 800904a:	60b9      	str	r1, [r7, #8]
 800904c:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 800904e:	f107 0310 	add.w	r3, r7, #16
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	68b9      	ldr	r1, [r7, #8]
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fb32 	bl	80096c0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 800905c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fbcf 	bl	8008804 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8009066:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800906a:	f107 0310 	add.w	r3, r7, #16
 800906e:	4619      	mov	r1, r3
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fb3c 	bl	80096ee <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009076:	bf00      	nop
 8009078:	3728      	adds	r7, #40	; 0x28
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fb42 	bl	8009710 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4618      	mov	r0, r3
 8009090:	3708      	adds	r7, #8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff ffed 	bl	800907e <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff ffed 	bl	8009096 <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80090c8:	b590      	push	{r4, r7, lr}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f7ff ffea 	bl	80090ae <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fb ff39 	bl	8004f56 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 80090ea:	68b8      	ldr	r0, [r7, #8]
 80090ec:	f7fd fcd5 	bl	8006a9a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 80090f0:	4604      	mov	r4, r0
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fc f8a4 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80090fa:	4603      	mov	r3, r0
 80090fc:	429c      	cmp	r4, r3
 80090fe:	d005      	beq.n	800910c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 8009102:	4a06      	ldr	r2, [pc, #24]	; (800911c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 8009104:	2160      	movs	r1, #96	; 0x60
 8009106:	4806      	ldr	r0, [pc, #24]	; (8009120 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 8009108:	f014 fff8 	bl	801e0fc <__assert_func>
 800910c:	bf00      	nop
    }
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	bd90      	pop	{r4, r7, pc}
 8009118:	08020224 	.word	0x08020224
 800911c:	080239c4 	.word	0x080239c4
 8009120:	08020574 	.word	0x08020574

08009124 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 faf7 	bl	8009726 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 fb35 	bl	80097ac <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
    }
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4618      	mov	r0, r3
 800916e:	f7fc f868 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009172:	4603      	mov	r3, r0
 8009174:	2b01      	cmp	r3, #1
 8009176:	dd08      	ble.n	800918a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4618      	mov	r0, r3
 800917c:	f7fc f856 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009180:	4603      	mov	r3, r0
 8009182:	2b01      	cmp	r3, #1
 8009184:	dd01      	ble.n	800918a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 800918a:	2300      	movs	r3, #0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb42 	bl	800981c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fc fa5b 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fb5a 	bl	800987c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4618      	mov	r0, r3
 80091de:	f7ff ffec 	bl	80091ba <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3308      	adds	r3, #8
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff ffea 	bl	80091d2 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3304      	adds	r3, #4
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff ffcc 	bl	80091a0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff ffe5 	bl	80091ec <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fb1f 	bl	8009866 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff ffe8 	bl	8009212 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4618      	mov	r0, r3
 8009258:	f7fc fa05 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fb18 	bl	8009892 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff ffe8 	bl	800924c <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	3324      	adds	r3, #36	; 0x24
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff ffea 	bl	800926c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3314      	adds	r3, #20
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff ffc8 	bl	8009232 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fad4 	bl	8009850 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff ffe2 	bl	8009286 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4618      	mov	r0, r3
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b096      	sub	sp, #88	; 0x58
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80092d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092dc:	68b9      	ldr	r1, [r7, #8]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 faa7 	bl	8009832 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 faf9 	bl	80098e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80092ee:	f107 0320 	add.w	r3, r7, #32
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe fc3b 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7fe fca0 	bl	8007c40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8009300:	4603      	mov	r3, r0
 8009302:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009306:	f107 0120 	add.w	r1, r7, #32
 800930a:	f107 0010 	add.w	r0, r7, #16
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f000 fb2f 	bl	8009974 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009316:	f107 0310 	add.w	r3, r7, #16
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fb44 	bl	80099a8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 8009320:	f107 0320 	add.w	r3, r7, #32
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe fa14 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800932a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff ffbf 	bl	80092b2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 8009334:	bf00      	nop
 8009336:	3750      	adds	r7, #80	; 0x50
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7fc fb86 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800934a:	4603      	mov	r3, r0
 800934c:	4618      	mov	r0, r3
 800934e:	f7fb ff78 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009352:	4603      	mov	r3, r0
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009364:	2104      	movs	r1, #4
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7ff f8eb 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb26 	bl	80099be <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 8009372:	bf00      	nop
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
    }
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4618      	mov	r0, r3
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	330c      	adds	r3, #12
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fc f957 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3308      	adds	r3, #8
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe f9c8 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fb19 	bl	80099fa <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b082      	sub	sp, #8
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff ffe2 	bl	80093a6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b090      	sub	sp, #64	; 0x40
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80093f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093fc:	68b9      	ldr	r1, [r7, #8]
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 faec 	bl	80099dc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	68b9      	ldr	r1, [r7, #8]
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fb1d 	bl	8009a48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800940e:	f107 0320 	add.w	r3, r7, #32
 8009412:	68f9      	ldr	r1, [r7, #12]
 8009414:	4618      	mov	r0, r3
 8009416:	f7fd fc60 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7fe fc9e 	bl	8007d5c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009420:	4603      	mov	r3, r0
 8009422:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009426:	f107 0120 	add.w	r1, r7, #32
 800942a:	f107 0010 	add.w	r0, r7, #16
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f000 fb53 	bl	8009adc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8009436:	f107 0310 	add.w	r3, r7, #16
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fb68 	bl	8009b10 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8009440:	f107 0320 	add.w	r3, r7, #32
 8009444:	4618      	mov	r0, r3
 8009446:	f7fc f90e 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800944a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff ffbf 	bl	80093d2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 8009454:	bf00      	nop
 8009456:	3738      	adds	r7, #56	; 0x38
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800945c:	b5b0      	push	{r4, r5, r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 fb5c 	bl	8009b26 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	1d1c      	adds	r4, r3, #4
 8009472:	6838      	ldr	r0, [r7, #0]
 8009474:	f7fc fca0 	bl	8005db8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8009478:	4603      	mov	r3, r0
 800947a:	60bb      	str	r3, [r7, #8]
 800947c:	6838      	ldr	r0, [r7, #0]
 800947e:	f7fc fca8 	bl	8005dd2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8009482:	4603      	mov	r3, r0
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	f107 020c 	add.w	r2, r7, #12
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	4619      	mov	r1, r3
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fb55 	bl	8009b40 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4619      	mov	r1, r3
 800949a:	2004      	movs	r0, #4
 800949c:	f7f7 fd96 	bl	8000fcc <_ZnwjPv>
 80094a0:	4602      	mov	r2, r0
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f000 fb62 	bl	8009b72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	1d1c      	adds	r4, r3, #4
 80094b2:	6838      	ldr	r0, [r7, #0]
 80094b4:	f000 fb6d 	bl	8009b92 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 80094b8:	4605      	mov	r5, r0
 80094ba:	6838      	ldr	r0, [r7, #0]
 80094bc:	f000 fb74 	bl	8009ba8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	4629      	mov	r1, r5
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 fb7a 	bl	8009bc0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bdb0      	pop	{r4, r5, r7, pc}

080094d6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 80094d6:	b480      	push	{r7}
 80094d8:	b083      	sub	sp, #12
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	2303      	movs	r3, #3
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4618      	mov	r0, r3
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8009502:	b590      	push	{r4, r7, lr}
 8009504:	b085      	sub	sp, #20
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681c      	ldr	r4, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff ffde 	bl	80094d6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800951a:	4602      	mov	r2, r0
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	fb03 f202 	mul.w	r2, r3, r2
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4413      	add	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4423      	add	r3, r4
  }
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	bd90      	pop	{r4, r7, pc}

08009532 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8009532:	b590      	push	{r4, r7, lr}
 8009534:	b085      	sub	sp, #20
 8009536:	af00      	add	r7, sp, #0
 8009538:	60f8      	str	r0, [r7, #12]
 800953a:	60b9      	str	r1, [r7, #8]
 800953c:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681c      	ldr	r4, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff ffc6 	bl	80094d6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800954a:	4602      	mov	r2, r0
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	fb03 f202 	mul.w	r2, r3, r2
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4423      	add	r3, r4
  }
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	bd90      	pop	{r4, r7, pc}

08009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	ed93 7a00 	vldr	s14, [r3]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	edd3 7a00 	vldr	s15, [r3]
 800957a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800957e:	eeb0 0a67 	vmov.f32	s0, s15
 8009582:	3714      	adds	r7, #20
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009594:	2201      	movs	r2, #1
 8009596:	2101      	movs	r1, #1
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff f8a2 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb2c 	bl	8009bfc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
    }
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4618      	mov	r0, r3
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fb35 	bl	8009c50 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff ffec 	bl	80095d8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3314      	adds	r3, #20
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff ffea 	bl	80095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3310      	adds	r3, #16
 8009620:	4618      	mov	r0, r3
 8009622:	f7fc f820 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fb07 	bl	8009c3a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4618      	mov	r0, r3
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009636:	b580      	push	{r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4618      	mov	r0, r3
 8009642:	f7ff ffe2 	bl	800960a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8009650:	b580      	push	{r7, lr}
 8009652:	b092      	sub	sp, #72	; 0x48
 8009654:	af02      	add	r7, sp, #8
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800965c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009660:	68b9      	ldr	r1, [r7, #8]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 fada 	bl	8009c1c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 fb15 	bl	8009c9c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8009672:	f107 0320 	add.w	r3, r7, #32
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	4618      	mov	r0, r3
 800967a:	f7fd fb2e 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f7fe fb6c 	bl	8007d5c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009684:	4603      	mov	r3, r0
 8009686:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800968a:	f107 0120 	add.w	r1, r7, #32
 800968e:	f107 0010 	add.w	r0, r7, #16
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f000 fb4b 	bl	8009d30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800969a:	f107 0310 	add.w	r3, r7, #16
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fb60 	bl	8009d64 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 80096a4:	f107 0320 	add.w	r3, r7, #32
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fb ffdc 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80096ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff ffbf 	bl	8009636 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 80096b8:	bf00      	nop
 80096ba:	3740      	adds	r7, #64	; 0x40
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80096c0:	b590      	push	{r4, r7, lr}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80096cc:	68b8      	ldr	r0, [r7, #8]
 80096ce:	f7fb fffa 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80096d2:	4604      	mov	r4, r0
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7fc ffd5 	bl	8006684 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 80096da:	4603      	mov	r3, r0
 80096dc:	461a      	mov	r2, r3
 80096de:	4621      	mov	r1, r4
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 fb6f 	bl	8009dc4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd90      	pop	{r4, r7, pc}

080096ee <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b086      	sub	sp, #24
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	68b9      	ldr	r1, [r7, #8]
 8009702:	6978      	ldr	r0, [r7, #20]
 8009704:	f000 fb8e 	bl	8009e24 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8009708:	bf00      	nop
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
    }
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4618      	mov	r0, r3
 8009734:	f7fb fd85 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009738:	4603      	mov	r3, r0
 800973a:	2b01      	cmp	r3, #1
 800973c:	dd08      	ble.n	8009750 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	f7fb fd73 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009746:	4603      	mov	r3, r0
 8009748:	2b01      	cmp	r3, #1
 800974a:	dd01      	ble.n	8009750 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 8009750:	2300      	movs	r3, #0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fb76 	bl	8009e4a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	332c      	adds	r3, #44	; 0x2c
 8009772:	4618      	mov	r0, r3
 8009774:	f7fd ffed 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	3328      	adds	r3, #40	; 0x28
 800977c:	4618      	mov	r0, r3
 800977e:	f7fd ffe8 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 fb7b 	bl	8009e7e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff ffe2 	bl	8009766 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b098      	sub	sp, #96	; 0x60
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80097b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097bc:	68b9      	ldr	r1, [r7, #8]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fb4e 	bl	8009e60 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 fb7f 	bl	8009ecc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80097ce:	f107 0320 	add.w	r3, r7, #32
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe f9cb 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7fe fa30 	bl	8007c40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80097e6:	f107 0120 	add.w	r1, r7, #32
 80097ea:	f107 0010 	add.w	r0, r7, #16
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f000 fbb5 	bl	8009f60 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80097f6:	f107 0310 	add.w	r3, r7, #16
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fbca 	bl	8009f94 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009800:	f107 0320 	add.w	r3, r7, #32
 8009804:	4618      	mov	r0, r3
 8009806:	f7fd ffa4 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800980a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800980e:	4618      	mov	r0, r3
 8009810:	f7ff ffbf 	bl	8009792 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8009814:	bf00      	nop
 8009816:	3758      	adds	r7, #88	; 0x58
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
    }
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009832:	b580      	push	{r7, lr}
 8009834:	b082      	sub	sp, #8
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fbb2 	bl	8009faa <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 8009866:	b480      	push	{r7}
 8009868:	b083      	sub	sp, #12
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fdad 	bl	8008412 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 80098b8:	4603      	mov	r3, r0
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3310      	adds	r3, #16
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fdad 	bl	800842e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80098ec:	68b8      	ldr	r0, [r7, #8]
 80098ee:	f7ff ffdb 	bl	80098a8 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 80098f2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80098f4:	68b8      	ldr	r0, [r7, #8]
 80098f6:	f7ff ffe4 	bl	80098c2 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 80098fa:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fb fc9f 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009904:	4602      	mov	r2, r0
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	4293      	cmp	r3, r2
 800990a:	d107      	bne.n	800991c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4618      	mov	r0, r3
 8009910:	f7fb fc8c 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009914:	4602      	mov	r2, r0
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	4293      	cmp	r3, r2
 800991a:	d001      	beq.n	8009920 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800991c:	2301      	movs	r3, #1
 800991e:	e000      	b.n	8009922 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009920:	2300      	movs	r3, #0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	6979      	ldr	r1, [r7, #20]
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fba1 	bl	8008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4618      	mov	r0, r3
 8009936:	f7fb fc84 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800993a:	4602      	mov	r2, r0
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	4293      	cmp	r3, r2
 8009940:	d107      	bne.n	8009952 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4618      	mov	r0, r3
 8009946:	f7fb fc71 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800994a:	4602      	mov	r2, r0
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	4293      	cmp	r3, r2
 8009950:	d006      	beq.n	8009960 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009952:	4b05      	ldr	r3, [pc, #20]	; (8009968 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009954:	4a05      	ldr	r2, [pc, #20]	; (800996c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009956:	f240 21fd 	movw	r1, #765	; 0x2fd
 800995a:	4805      	ldr	r0, [pc, #20]	; (8009970 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800995c:	f014 fbce 	bl	801e0fc <__assert_func>
}
 8009960:	bf00      	nop
 8009962:	3718      	adds	r7, #24
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	080225dc 	.word	0x080225dc
 800996c:	08023c30 	.word	0x08023c30
 8009970:	080226f0 	.word	0x080226f0

08009974 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	605a      	str	r2, [r3, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	683a      	ldr	r2, [r7, #0]
 8009992:	609a      	str	r2, [r3, #8]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	69ba      	ldr	r2, [r7, #24]
 8009998:	60da      	str	r2, [r3, #12]
  }
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fb32 	bl	800a01a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 80099b6:	bf00      	nop
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80099c6:	2105      	movs	r1, #5
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fe fdba 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fb33 	bl	800a03a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 fb34 	bl	800a058 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4618      	mov	r0, r3
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fb fc10 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009a22:	4603      	mov	r3, r0
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fb fc9d 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009a54:	68b8      	ldr	r0, [r7, #8]
 8009a56:	f7ff ffdb 	bl	8009a10 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 8009a5a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009a5c:	68b8      	ldr	r0, [r7, #8]
 8009a5e:	f7ff ffe5 	bl	8009a2c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 8009a62:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fb fc91 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d107      	bne.n	8009a84 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fb fc7e 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d001      	beq.n	8009a88 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e000      	b.n	8009a8a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	6979      	ldr	r1, [r7, #20]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe fb85 	bl	80081a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fb fc76 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d107      	bne.n	8009aba <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fb fc63 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d006      	beq.n	8009ac8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009abc:	4a05      	ldr	r2, [pc, #20]	; (8009ad4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009abe:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009ac2:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009ac4:	f014 fb1a 	bl	801e0fc <__assert_func>
}
 8009ac8:	bf00      	nop
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	080225dc 	.word	0x080225dc
 8009ad4:	08023e10 	.word	0x08023e10
 8009ad8:	080226f0 	.word	0x080226f0

08009adc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	605a      	str	r2, [r3, #4]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	609a      	str	r2, [r3, #8]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	60da      	str	r2, [r3, #12]
  }
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 fad2 	bl	800a0c2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b082      	sub	sp, #8
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 fad5 	bl	800a0e0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
    {
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fae4 	bl	800a11c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8009b54:	f000 faf2 	bl	800a13c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	6819      	ldr	r1, [r3, #0]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	2300      	movs	r3, #0
 8009b64:	f000 faf1 	bl	800a14a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b082      	sub	sp, #8
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	4611      	mov	r1, r2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 faf5 	bl	800a172 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009b92:	b480      	push	{r7}
 8009b94:	b083      	sub	sp, #12
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b088      	sub	sp, #32
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8009bcc:	f107 0310 	add.w	r3, r7, #16
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 fae7 	bl	800a1a8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 8009bda:	f107 031c 	add.w	r3, r7, #28
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fd fb5f 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8009be4:	f107 021c 	add.w	r2, r7, #28
 8009be8:	f107 0310 	add.w	r3, r7, #16
 8009bec:	4619      	mov	r1, r3
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 faf1 	bl	800a1d6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009bf4:	bf00      	nop
 8009bf6:	3720      	adds	r7, #32
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009c04:	2202      	movs	r2, #2
 8009c06:	2101      	movs	r1, #1
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7fe fd6a 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 faf2 	bl	800a1f8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 faf4 	bl	800a218 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	370c      	adds	r7, #12
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b082      	sub	sp, #8
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe fd5f 	bl	8008734 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 8009c76:	4603      	mov	r3, r0
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fe fd5f 	bl	8008750 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8009c92:	4603      	mov	r3, r0
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009ca8:	68b8      	ldr	r0, [r7, #8]
 8009caa:	f7ff ffdc 	bl	8009c66 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 8009cae:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009cb0:	68b8      	ldr	r0, [r7, #8]
 8009cb2:	f7ff ffe5 	bl	8009c80 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 8009cb6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fb fb67 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d107      	bne.n	8009cd8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fb fb54 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d001      	beq.n	8009cdc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e000      	b.n	8009cde <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d005      	beq.n	8009cee <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	6979      	ldr	r1, [r7, #20]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fa5b 	bl	80081a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fb fb4c 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d107      	bne.n	8009d0e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fb fb39 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009d06:	4602      	mov	r2, r0
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d006      	beq.n	8009d1c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009d10:	4a05      	ldr	r2, [pc, #20]	; (8009d28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009d12:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009d16:	4805      	ldr	r0, [pc, #20]	; (8009d2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009d18:	f014 f9f0 	bl	801e0fc <__assert_func>
}
 8009d1c:	bf00      	nop
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	080225dc 	.word	0x080225dc
 8009d28:	08023f24 	.word	0x08023f24
 8009d2c:	080226f0 	.word	0x080226f0

08009d30 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	609a      	str	r2, [r3, #8]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	60da      	str	r2, [r3, #12]
  }
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fa8e 	bl	800a28e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fa92 	bl	800a2ac <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b082      	sub	sp, #8
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff ffed 	bl	8009d7a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff ffed 	bl	8009d92 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009dc4:	b590      	push	{r4, r7, lr}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7ff ffea 	bl	8009daa <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3304      	adds	r3, #4
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fb f809 	bl	8004dfa <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fb fac4 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009df0:	4604      	mov	r4, r0
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fc fc75 	bl	80066e2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	d005      	beq.n	8009e0a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 8009dfe:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 8009e00:	4a06      	ldr	r2, [pc, #24]	; (8009e1c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 8009e02:	2160      	movs	r1, #96	; 0x60
 8009e04:	4806      	ldr	r0, [pc, #24]	; (8009e20 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 8009e06:	f014 f979 	bl	801e0fc <__assert_func>
 8009e0a:	bf00      	nop
    }
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd90      	pop	{r4, r7, pc}
 8009e16:	bf00      	nop
 8009e18:	08020224 	.word	0x08020224
 8009e1c:	08024168 	.word	0x08024168
 8009e20:	08020574 	.word	0x08020574

08009e24 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 fa45 	bl	800a2c2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	68b9      	ldr	r1, [r7, #8]
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f000 fa6e 	bl	800a31e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009e42:	bf00      	nop
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
    }
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fa8d 	bl	800a38e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe fccc 	bl	800883c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fb f9b6 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
	...

08009ecc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8009ed8:	68b8      	ldr	r0, [r7, #8]
 8009eda:	f7ff ffdb 	bl	8009e94 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 8009ede:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009ee0:	68b8      	ldr	r0, [r7, #8]
 8009ee2:	f7ff ffe4 	bl	8009eae <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 8009ee6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fb f9a9 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d107      	bne.n	8009f08 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fb f996 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009f00:	4602      	mov	r2, r0
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d001      	beq.n	8009f0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d005      	beq.n	8009f1e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	6979      	ldr	r1, [r7, #20]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe f8ab 	bl	8008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fb f98e 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009f26:	4602      	mov	r2, r0
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d107      	bne.n	8009f3e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7fb f97b 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009f36:	4602      	mov	r2, r0
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d006      	beq.n	8009f4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009f3e:	4b05      	ldr	r3, [pc, #20]	; (8009f54 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009f40:	4a05      	ldr	r2, [pc, #20]	; (8009f58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009f42:	f240 21fd 	movw	r1, #765	; 0x2fd
 8009f46:	4805      	ldr	r0, [pc, #20]	; (8009f5c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8009f48:	f014 f8d8 	bl	801e0fc <__assert_func>
}
 8009f4c:	bf00      	nop
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	080225dc 	.word	0x080225dc
 8009f58:	080243d4 	.word	0x080243d4
 8009f5c:	080226f0 	.word	0x080226f0

08009f60 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	605a      	str	r2, [r3, #4]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	609a      	str	r2, [r3, #8]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	69ba      	ldr	r2, [r7, #24]
 8009f84:	60da      	str	r2, [r3, #12]
  }
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fa2c 	bl	800a3fa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 8009faa:	b590      	push	{r4, r7, lr}
 8009fac:	b083      	sub	sp, #12
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fa47 	bl	800a448 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8009fba:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009fbc:	6838      	ldr	r0, [r7, #0]
 8009fbe:	f000 fa2c 	bl	800a41a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009fc2:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f7fa fcf8 	bl	80049bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8009fcc:	6838      	ldr	r0, [r7, #0]
 8009fce:	f000 fa2f 	bl	800a430 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8009fd2:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	3310      	adds	r3, #16
 8009fd8:	6812      	ldr	r2, [r2, #0]
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009fe0:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fa3a 	bl	800a45e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f000 fa40 	bl	800a47c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 8009ffc:	6838      	ldr	r0, [r7, #0]
 8009ffe:	f000 fa0c 	bl	800a41a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 800a002:	4603      	mov	r3, r0
 800a004:	4618      	mov	r0, r3
 800a006:	f7fb fcc0 	bl	800598a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 800a00a:	4602      	mov	r2, r0
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	bd90      	pop	{r4, r7, pc}

0800a01a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a022:	2200      	movs	r2, #0
 800a024:	2100      	movs	r1, #0
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa37 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fa4d 	bl	800a4cc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a042:	2106      	movs	r1, #6
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7fe fa7c 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fa4e 	bl	800a4ec <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa69 	bl	800a53a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800a068:	6838      	ldr	r0, [r7, #0]
 800a06a:	f000 fa4e 	bl	800a50a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 800a06e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800a074:	6838      	ldr	r0, [r7, #0]
 800a076:	f000 fa54 	bl	800a522 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 800a07a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	605a      	str	r2, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800a08a:	4619      	mov	r1, r3
 800a08c:	4610      	mov	r0, r2
 800a08e:	f7fd fd6f 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7fc fe1b 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a0a4:	6838      	ldr	r0, [r7, #0]
 800a0a6:	f000 fa30 	bl	800a50a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fb f8bd 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	611a      	str	r2, [r3, #16]
  }
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fa3f 	bl	800a550 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fa5f 	bl	800a596 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fa63 	bl	800a5b4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fa05 	bl	8008504 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fa5c 	bl	800a5ca <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7ff ffed 	bl	800a104 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 fa57 	bl	800a5e0 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
    }
 800a140:	bf00      	nop
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b086      	sub	sp, #24
 800a14e:	af00      	add	r7, sp, #0
 800a150:	60f8      	str	r0, [r7, #12]
 800a152:	60b9      	str	r1, [r7, #8]
 800a154:	607a      	str	r2, [r7, #4]
 800a156:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 800a158:	2301      	movs	r3, #1
 800a15a:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 800a15c:	2301      	movs	r3, #1
 800a15e:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	68b9      	ldr	r1, [r7, #8]
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 fa49 	bl	800a5fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 800a16a:	bf00      	nop
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800a172:	b5b0      	push	{r4, r5, r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fa19 	bl	800a5b4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 800a182:	687c      	ldr	r4, [r7, #4]
 800a184:	6838      	ldr	r0, [r7, #0]
 800a186:	f000 fa6b 	bl	800a660 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 800a18a:	4605      	mov	r5, r0
 800a18c:	6838      	ldr	r0, [r7, #0]
 800a18e:	f000 fa74 	bl	800a67a <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 800a192:	4603      	mov	r3, r0
 800a194:	461a      	mov	r2, r3
 800a196:	4629      	mov	r1, r5
 800a198:	4620      	mov	r0, r4
 800a19a:	f7fe f9b3 	bl	8008504 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bdb0      	pop	{r4, r5, r7, pc}

0800a1a8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800a1a8:	b590      	push	{r4, r7, lr}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800a1b4:	68b8      	ldr	r0, [r7, #8]
 800a1b6:	f7fb fd4a 	bl	8005c4e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7fb fd51 	bl	8005c64 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fa8b 	bl	800a6e4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd90      	pop	{r4, r7, pc}

0800a1d6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b086      	sub	sp, #24
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	60b9      	str	r1, [r7, #8]
 800a1e0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	6978      	ldr	r0, [r7, #20]
 800a1ec:	f000 faaa 	bl	800a744 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800a1f0:	bf00      	nop
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a200:	2200      	movs	r2, #0
 800a202:	2102      	movs	r1, #2
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7fe fa6c 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 faad 	bl	800a76a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 800a218:	b590      	push	{r4, r7, lr}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fac8 	bl	800a7b8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 800a228:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a22a:	6838      	ldr	r0, [r7, #0]
 800a22c:	f000 faad 	bl	800a78a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800a230:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a232:	4619      	mov	r1, r3
 800a234:	4620      	mov	r0, r4
 800a236:	f000 faca 	bl	800a7ce <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 800a240:	6838      	ldr	r0, [r7, #0]
 800a242:	f000 faad 	bl	800a7a0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 800a246:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a248:	4619      	mov	r1, r3
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 fad4 	bl	800a7f8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a254:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a256:	4611      	mov	r1, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fc fd3e 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 800a268:	4619      	mov	r1, r3
 800a26a:	4610      	mov	r0, r2
 800a26c:	f000 fad9 	bl	800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800a270:	6838      	ldr	r0, [r7, #0]
 800a272:	f000 fa8a 	bl	800a78a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800a276:	4603      	mov	r3, r0
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fc f8b2 	bl	80063e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800a27e:	4602      	mov	r2, r0
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	619a      	str	r2, [r3, #24]
  }
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd90      	pop	{r4, r7, pc}

0800a28e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a28e:	b580      	push	{r7, lr}
 800a290:	b082      	sub	sp, #8
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a296:	2100      	movs	r1, #0
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fad2 	bl	800a842 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 faf2 	bl	800a888 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
    }
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	6039      	str	r1, [r7, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	330c      	adds	r3, #12
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff f983 	bl	80095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fb f9b9 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fae5 	bl	800a8c4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff ffe2 	bl	800a2d8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a31e:	b580      	push	{r7, lr}
 800a320:	b090      	sub	sp, #64	; 0x40
 800a322:	af02      	add	r7, sp, #8
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a32a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a32e:	68b9      	ldr	r1, [r7, #8]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fab8 	bl	800a8a6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	68b9      	ldr	r1, [r7, #8]
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f000 faea 	bl	800a914 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 800a340:	f107 0320 	add.w	r3, r7, #32
 800a344:	68f9      	ldr	r1, [r7, #12]
 800a346:	4618      	mov	r0, r3
 800a348:	f7fc fcc7 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7fd fd05 	bl	8007d5c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800a352:	4603      	mov	r3, r0
 800a354:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a358:	f107 0120 	add.w	r1, r7, #32
 800a35c:	f107 0010 	add.w	r0, r7, #16
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f000 fb04 	bl	800a970 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a368:	f107 0310 	add.w	r3, r7, #16
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fb19 	bl	800a9a4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 800a372:	f107 0320 	add.w	r3, r7, #32
 800a376:	4618      	mov	r0, r3
 800a378:	f7fb f975 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a37c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff ffbf 	bl	800a304 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 800a386:	bf00      	nop
 800a388:	3738      	adds	r7, #56	; 0x38
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800a38e:	b590      	push	{r4, r7, lr}
 800a390:	b083      	sub	sp, #12
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fb25 	bl	800a9e8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 800a39e:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800a3a0:	6838      	ldr	r0, [r7, #0]
 800a3a2:	f000 fb0a 	bl	800a9ba <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a3a6:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f000 fb27 	bl	800a9fe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 800a3b0:	6838      	ldr	r0, [r7, #0]
 800a3b2:	f000 fb0d 	bl	800a9d0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 800a3b6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	625a      	str	r2, [r3, #36]	; 0x24
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a3c0:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fd fbd3 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	f7fd fbca 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800a3dc:	6838      	ldr	r0, [r7, #0]
 800a3de:	f000 faec 	bl	800a9ba <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fc fb58 	bl	8006a9a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd90      	pop	{r4, r7, pc}

0800a3fa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a402:	2200      	movs	r2, #0
 800a404:	2100      	movs	r1, #0
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fb0e 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fb24 	bl	800aa5a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 800a412:	bf00      	nop
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3310      	adds	r3, #16
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	6039      	str	r1, [r7, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 fb04 	bl	800aa7a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 fb07 	bl	800aa9e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b086      	sub	sp, #24
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	68b8      	ldr	r0, [r7, #8]
 800a4aa:	f000 fb0e 	bl	800aaca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800a4ae:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	f000 fb15 	bl	800aae2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800a4b8:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	6979      	ldr	r1, [r7, #20]
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 fb1b 	bl	800aafa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800a4c4:	bf00      	nop
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff ffde 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fb31 	bl	800ab46 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a4f4:	2107      	movs	r1, #7
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7fe f823 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fb32 	bl	800ab66 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4618      	mov	r0, r3
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	4618      	mov	r0, r3
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr

0800a53a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a53a:	b480      	push	{r7}
 800a53c:	b083      	sub	sp, #12
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a550:	b5b0      	push	{r4, r5, r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	689c      	ldr	r4, [r3, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe fa52 	bl	8008a0e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a56a:	4605      	mov	r5, r0
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	6839      	ldr	r1, [r7, #0]
 800a572:	4618      	mov	r0, r3
 800a574:	f000 fb06 	bl	800ab84 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 800a578:	eef0 7a40 	vmov.f32	s15, s0
 800a57c:	edc7 7a03 	vstr	s15, [r7, #12]
 800a580:	f107 030c 	add.w	r3, r7, #12
 800a584:	461a      	mov	r2, r3
 800a586:	4629      	mov	r1, r5
 800a588:	4620      	mov	r0, r4
 800a58a:	f7fe f9f9 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bdb0      	pop	{r4, r5, r7, pc}

0800a596 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a59e:	2101      	movs	r1, #1
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ffd5 	bl	800a550 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fb25 	bl	800abf6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
    }
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 fb12 	bl	800ac14 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d108      	bne.n	800a620 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b03      	cmp	r3, #3
 800a612:	d105      	bne.n	800a620 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	db02      	blt.n	800a620 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	da06      	bge.n	800a62e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 800a620:	4b0c      	ldr	r3, [pc, #48]	; (800a654 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 800a622:	4a0d      	ldr	r2, [pc, #52]	; (800a658 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 800a624:	f240 1111 	movw	r1, #273	; 0x111
 800a628:	480c      	ldr	r0, [pc, #48]	; (800a65c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 800a62a:	f013 fd67 	bl	801e0fc <__assert_func>
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	613b      	str	r3, [r7, #16]
  }
 800a636:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	fb02 f103 	mul.w	r1, r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	f000 faf0 	bl	800ac2a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 800a64a:	bf00      	nop
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	080229f4 	.word	0x080229f4
 800a658:	0802458c 	.word	0x0802458c
 800a65c:	08022c10 	.word	0x08022c10

0800a660 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 faea 	bl	800ac44 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 800a670:	4603      	mov	r3, r0
 800a672:	4618      	mov	r0, r3
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fae9 	bl	800ac5a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800a688:	4603      	mov	r3, r0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 faf0 	bl	800ac70 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 800a690:	4603      	mov	r3, r0
    }
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b082      	sub	sp, #8
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 faf0 	bl	800ac88 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b082      	sub	sp, #8
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7ff ffed 	bl	800a69a <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff ffed 	bl	800a6b2 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
	...

0800a6e4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800a6e4:	b590      	push	{r4, r7, lr}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff ffea 	bl	800a6ca <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6fe:	e883 0003 	stmia.w	r3, {r0, r1}
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3308      	adds	r3, #8
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	6812      	ldr	r2, [r2, #0]
 800a70a:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800a70c:	68b8      	ldr	r0, [r7, #8]
 800a70e:	f7fb fad8 	bl	8005cc2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800a712:	4604      	mov	r4, r0
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7fb fae2 	bl	8005cde <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800a71a:	4603      	mov	r3, r0
 800a71c:	429c      	cmp	r4, r3
 800a71e:	d005      	beq.n	800a72c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 800a720:	4b05      	ldr	r3, [pc, #20]	; (800a738 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 800a722:	4a06      	ldr	r2, [pc, #24]	; (800a73c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 800a724:	2160      	movs	r1, #96	; 0x60
 800a726:	4806      	ldr	r0, [pc, #24]	; (800a740 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 800a728:	f013 fce8 	bl	801e0fc <__assert_func>
 800a72c:	bf00      	nop
    }
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	bd90      	pop	{r4, r7, pc}
 800a738:	08020224 	.word	0x08020224
 800a73c:	08024620 	.word	0x08024620
 800a740:	08020574 	.word	0x08020574

0800a744 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800a750:	68b9      	ldr	r1, [r7, #8]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 fab9 	bl	800acca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f000 fb14 	bl	800ad8a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a772:	2201      	movs	r2, #1
 800a774:	2102      	movs	r1, #2
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7fd ffb3 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fb3c 	bl	800adfa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
    {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fa fc75 	bl	80050ca <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a7e0:	f7fa fc83 	bl	80050ea <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fb16 	bl	800ae1a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
    {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4618      	mov	r0, r3
 800a806:	f7fa fc3d 	bl	8005084 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800a80a:	f7fa fc4b 	bl	80050a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6839      	ldr	r1, [r7, #0]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fb0e 	bl	800ae34 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 800a822:	b580      	push	{r7, lr}
 800a824:	b082      	sub	sp, #8
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f000 fb0b 	bl	800ae4e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800a842:	b5b0      	push	{r4, r5, r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
 800a84a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	689c      	ldr	r4, [r3, #8]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe f8d9 	bl	8008a0e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800a85c:	4605      	mov	r5, r0
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	4618      	mov	r0, r3
 800a866:	f000 fb09 	bl	800ae7c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 800a86a:	eef0 7a40 	vmov.f32	s15, s0
 800a86e:	edc7 7a03 	vstr	s15, [r7, #12]
 800a872:	f107 030c 	add.w	r3, r7, #12
 800a876:	461a      	mov	r2, r3
 800a878:	4629      	mov	r1, r5
 800a87a:	4620      	mov	r0, r4
 800a87c:	f7fe f880 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a880:	bf00      	nop
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bdb0      	pop	{r4, r5, r7, pc}

0800a888 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a890:	2101      	movs	r1, #1
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f7ff ffd5 	bl	800a842 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fb28 	bl	800aeee <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 800a89e:	bf00      	nop
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fb29 	bl	800af0c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	370c      	adds	r7, #12
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr

0800a8da <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b082      	sub	sp, #8
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fa fd51 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3304      	adds	r3, #4
 800a902:	4618      	mov	r0, r3
 800a904:	f7fc fc05 	bl	8007112 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 800a908:	4603      	mov	r3, r0
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 800a914:	b590      	push	{r4, r7, lr}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4618      	mov	r0, r3
 800a924:	f7fa fd33 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800a928:	4604      	mov	r4, r0
 800a92a:	68b8      	ldr	r0, [r7, #8]
 800a92c:	f7ff ffd5 	bl	800a8da <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 800a930:	4603      	mov	r3, r0
 800a932:	429c      	cmp	r4, r3
 800a934:	d10a      	bne.n	800a94c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fa fd1d 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a93e:	4604      	mov	r4, r0
 800a940:	68b8      	ldr	r0, [r7, #8]
 800a942:	f7ff ffd8 	bl	800a8f6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 800a946:	4603      	mov	r3, r0
 800a948:	429c      	cmp	r4, r3
 800a94a:	d006      	beq.n	800a95a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 800a94e:	4a06      	ldr	r2, [pc, #24]	; (800a968 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 800a950:	f240 21f2 	movw	r1, #754	; 0x2f2
 800a954:	4805      	ldr	r0, [pc, #20]	; (800a96c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 800a956:	f013 fbd1 	bl	801e0fc <__assert_func>
}
 800a95a:	bf00      	nop
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd90      	pop	{r4, r7, pc}
 800a962:	bf00      	nop
 800a964:	08022cf8 	.word	0x08022cf8
 800a968:	080247cc 	.word	0x080247cc
 800a96c:	080226f0 	.word	0x080226f0

0800a970 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	605a      	str	r2, [r3, #4]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	609a      	str	r2, [r3, #8]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	60da      	str	r2, [r3, #12]
  }
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fae6 	bl	800af7e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
    {
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fa fb17 	bl	800503e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800aa10:	f7fa fb25 	bl	800505e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fabf 	bl	800af9c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800aa34:	6879      	ldr	r1, [r7, #4]
 800aa36:	68b8      	ldr	r0, [r7, #8]
 800aa38:	f000 fabd 	bl	800afb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800aa3c:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	68b8      	ldr	r0, [r7, #8]
 800aa42:	f000 fac4 	bl	800afce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800aa46:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	6979      	ldr	r1, [r7, #20]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 faca 	bl	800afe6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800aa52:	bf00      	nop
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800aa62:	2201      	movs	r2, #1
 800aa64:	2100      	movs	r1, #0
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7ff ffde 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fae0 	bl	800b032 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 800aa72:	bf00      	nop
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fae4 	bl	800b052 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 faea 	bl	800b068 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800aa9e:	b590      	push	{r4, r7, lr}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fb11 	bl	800b0d0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800aaae:	687c      	ldr	r4, [r7, #4]
 800aab0:	6838      	ldr	r0, [r7, #0]
 800aab2:	f000 fb01 	bl	800b0b8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800aab6:	4603      	mov	r3, r0
 800aab8:	4619      	mov	r1, r3
 800aaba:	4620      	mov	r0, r4
 800aabc:	f7fc f90d 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd90      	pop	{r4, r7, pc}

0800aaca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800aaca:	b480      	push	{r7}
 800aacc:	b083      	sub	sp, #12
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
      : inner;
 800aad4:	683b      	ldr	r3, [r7, #0]
  }
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
      : outer;
 800aaec:	687b      	ldr	r3, [r7, #4]
  }
 800aaee:	4618      	mov	r0, r3
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800aafa:	b5b0      	push	{r4, r5, r7, lr}
 800aafc:	b086      	sub	sp, #24
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	60b9      	str	r1, [r7, #8]
 800ab04:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	689c      	ldr	r4, [r3, #8]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	68b9      	ldr	r1, [r7, #8]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe f9c4 	bl	8008ea0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800ab18:	4605      	mov	r5, r0
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	68b9      	ldr	r1, [r7, #8]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 fadf 	bl	800b0e6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 800ab28:	eef0 7a40 	vmov.f32	s15, s0
 800ab2c:	edc7 7a05 	vstr	s15, [r7, #20]
 800ab30:	f107 0314 	add.w	r3, r7, #20
 800ab34:	461a      	mov	r2, r3
 800ab36:	4629      	mov	r1, r5
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f7fd ff21 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800ab3e:	bf00      	nop
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bdb0      	pop	{r4, r5, r7, pc}

0800ab46 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ab4e:	2202      	movs	r2, #2
 800ab50:	2100      	movs	r1, #0
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7ff fca1 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 faf7 	bl	800b14c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800ab5e:	bf00      	nop
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ab6e:	2108      	movs	r1, #8
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7fd fce6 	bl	8008542 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 faf8 	bl	800b16c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b0a4      	sub	sp, #144	; 0x90
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6819      	ldr	r1, [r3, #0]
 800ab9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800aba2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 faea 	bl	800b180 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800abac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800abb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 faf5 	bl	800b1a6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6859      	ldr	r1, [r3, #4]
 800abc0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800abc4:	2200      	movs	r2, #0
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 fafe 	bl	800b1c8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800abcc:	f107 030c 	add.w	r3, r7, #12
 800abd0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800abd4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fb08 	bl	800b1ee <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800abde:	f107 030c 	add.w	r3, r7, #12
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 fb31 	bl	800b24a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800abe8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800abec:	eeb0 0a67 	vmov.f32	s0, s15
 800abf0:	3790      	adds	r7, #144	; 0x90
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800abfe:	2102      	movs	r1, #2
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7ff fca5 	bl	800a550 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fb3a 	bl	800b280 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800ac1c:	f7fc fbd4 	bl	80073c8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800ac2a:	b480      	push	{r7}
 800ac2c:	b085      	sub	sp, #20
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	60f8      	str	r0, [r7, #12]
 800ac32:	60b9      	str	r1, [r7, #8]
 800ac34:	607a      	str	r2, [r7, #4]
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	bf00      	nop
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fb0b 	bl	800b294 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
    }
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	f000 fb01 	bl	800b2ac <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800acaa:	4603      	mov	r3, r0
 800acac:	4618      	mov	r0, r3
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	f000 fafe 	bl	800b2bc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800acc0:	4603      	mov	r3, r0
 800acc2:	4618      	mov	r0, r3
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800acca:	b580      	push	{r7, lr}
 800accc:	b082      	sub	sp, #8
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7ff ffe1 	bl	800ac9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b01      	cmp	r3, #1
 800ace0:	dd08      	ble.n	800acf4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff ffe5 	bl	800acb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800acea:	4603      	mov	r3, r0
 800acec:	2b01      	cmp	r3, #1
 800acee:	dd01      	ble.n	800acf4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800acf0:	2301      	movs	r3, #1
 800acf2:	e000      	b.n	800acf6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800acf4:	2300      	movs	r3, #0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fae5 	bl	800b2cc <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800ad02:	bf00      	nop
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fc fd1c 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fafb 	bl	800b316 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff ffe8 	bl	800ad0a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	332c      	adds	r3, #44	; 0x2c
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff ffea 	bl	800ad2a <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3328      	adds	r3, #40	; 0x28
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fc fcf9 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 facd 	bl	800b300 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff ffe2 	bl	800ad44 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b098      	sub	sp, #96	; 0x60
 800ad8e:	af02      	add	r7, sp, #8
 800ad90:	60f8      	str	r0, [r7, #12]
 800ad92:	60b9      	str	r1, [r7, #8]
 800ad94:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800ad96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad9a:	68b9      	ldr	r1, [r7, #8]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 faa0 	bl	800b2e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	68b9      	ldr	r1, [r7, #8]
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 fadc 	bl	800b364 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800adac:	f107 0320 	add.w	r3, r7, #32
 800adb0:	68f9      	ldr	r1, [r7, #12]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fedd 	bl	8009b72 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 fb1d 	bl	800b3f8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800adbe:	4603      	mov	r3, r0
 800adc0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800adc4:	f107 0120 	add.w	r1, r7, #32
 800adc8:	f107 0010 	add.w	r0, r7, #16
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f000 fb1d 	bl	800b40e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800add4:	f107 0310 	add.w	r3, r7, #16
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fb32 	bl	800b442 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800adde:	f107 0320 	add.w	r3, r7, #32
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fc fd8a 	bl	80078fc <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800ade8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff ffbf 	bl	800ad70 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800adf2:	bf00      	nop
 800adf4:	3758      	adds	r7, #88	; 0x58
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b082      	sub	sp, #8
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ae02:	2202      	movs	r2, #2
 800ae04:	2102      	movs	r1, #2
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7fd fc6b 	bl	80086e2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fb23 	bl	800b458 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fb20 	bl	800b46c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fb34 	bl	800b4ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800ae46:	bf00      	nop
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800ae4e:	b590      	push	{r4, r7, lr}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fb56 	bl	800b50a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800ae5e:	687c      	ldr	r4, [r7, #4]
 800ae60:	6838      	ldr	r0, [r7, #0]
 800ae62:	f000 fb45 	bl	800b4f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2200      	movs	r2, #0
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f7fc fad8 	bl	8007422 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd90      	pop	{r4, r7, pc}

0800ae7c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b0a2      	sub	sp, #136	; 0x88
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ae98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fb3f 	bl	800b520 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800aea2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aea6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800aeaa:	4611      	mov	r1, r2
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 fb4a 	bl	800b546 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f103 010c 	add.w	r1, r3, #12
 800aeb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800aebc:	2200      	movs	r2, #0
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fb52 	bl	800b568 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800aec4:	f107 030c 	add.w	r3, r7, #12
 800aec8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800aecc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 fb5c 	bl	800b58e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800aed6:	f107 030c 	add.w	r3, r7, #12
 800aeda:	4618      	mov	r0, r3
 800aedc:	f000 fb85 	bl	800b5ea <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800aee0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800aee4:	eeb0 0a67 	vmov.f32	s0, s15
 800aee8:	3788      	adds	r7, #136	; 0x88
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b082      	sub	sp, #8
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800aef6:	2102      	movs	r1, #2
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff fca2 	bl	800a842 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fb8e 	bl	800b620 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800af0c:	b590      	push	{r4, r7, lr}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fba4 	bl	800b664 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800af1c:	6838      	ldr	r0, [r7, #0]
 800af1e:	f000 fb89 	bl	800b634 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800af22:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	601a      	str	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800af2c:	6838      	ldr	r0, [r7, #0]
 800af2e:	f000 fb8d 	bl	800b64c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800af32:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800af34:	4619      	mov	r1, r3
 800af36:	4620      	mov	r0, r4
 800af38:	f000 fb9f 	bl	800b67a <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800af46:	4619      	mov	r1, r3
 800af48:	4610      	mov	r0, r2
 800af4a:	f7fb fec6 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800af58:	4619      	mov	r1, r3
 800af5a:	4610      	mov	r0, r2
 800af5c:	f7ff fc61 	bl	800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800af60:	6838      	ldr	r0, [r7, #0]
 800af62:	f000 fb67 	bl	800b634 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800af66:	4603      	mov	r3, r0
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fa fa05 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800af6e:	4602      	mov	r2, r0
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	611a      	str	r2, [r3, #16]
  }
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd90      	pop	{r4, r7, pc}

0800af7e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800af7e:	b580      	push	{r7, lr}
 800af80:	b082      	sub	sp, #8
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800af86:	2100      	movs	r1, #0
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fb8b 	bl	800b6a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fbab 	bl	800b6ea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fbad 	bl	800b708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800afae:	bf00      	nop
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800afb6:	b480      	push	{r7}
 800afb8:	b083      	sub	sp, #12
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
      : inner;
 800afc0:	683b      	ldr	r3, [r7, #0]
  }
 800afc2:	4618      	mov	r0, r3
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	6039      	str	r1, [r7, #0]
      : outer;
 800afd8:	687b      	ldr	r3, [r7, #4]
  }
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800afe6:	b5b0      	push	{r4, r5, r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	689c      	ldr	r4, [r3, #8]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	68b9      	ldr	r1, [r7, #8]
 800affe:	4618      	mov	r0, r3
 800b000:	f7fd ff4e 	bl	8008ea0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800b004:	4605      	mov	r5, r0
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	68b9      	ldr	r1, [r7, #8]
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 fb9b 	bl	800b74a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800b014:	eef0 7a40 	vmov.f32	s15, s0
 800b018:	edc7 7a05 	vstr	s15, [r7, #20]
 800b01c:	f107 0314 	add.w	r3, r7, #20
 800b020:	461a      	mov	r2, r3
 800b022:	4629      	mov	r1, r5
 800b024:	4620      	mov	r0, r4
 800b026:	f7fd fcab 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800b02a:	bf00      	nop
 800b02c:	3718      	adds	r7, #24
 800b02e:	46bd      	mov	sp, r7
 800b030:	bdb0      	pop	{r4, r5, r7, pc}

0800b032 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b03a:	2202      	movs	r2, #2
 800b03c:	2100      	movs	r1, #0
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff fcf2 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fbb2 	bl	800b7ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b052:	b480      	push	{r7}
 800b054:	b083      	sub	sp, #12
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4618      	mov	r0, r3
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800b068:	b590      	push	{r4, r7, lr}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
 800b072:	687c      	ldr	r4, [r7, #4]
 800b074:	6838      	ldr	r0, [r7, #0]
 800b076:	f000 fbaa 	bl	800b7ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800b07a:	4603      	mov	r3, r0
 800b07c:	4619      	mov	r1, r3
 800b07e:	4620      	mov	r0, r4
 800b080:	f7fa fc0a 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	1d1c      	adds	r4, r3, #4
 800b088:	6838      	ldr	r0, [r7, #0]
 800b08a:	f000 fbac 	bl	800b7e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800b08e:	4603      	mov	r3, r0
 800b090:	4619      	mov	r1, r3
 800b092:	4620      	mov	r0, r4
 800b094:	f000 fbbf 	bl	800b816 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f103 0408 	add.w	r4, r3, #8
 800b09e:	6838      	ldr	r0, [r7, #0]
 800b0a0:	f000 fbad 	bl	800b7fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fbc3 	bl	800b834 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd90      	pop	{r4, r7, pc}

0800b0b8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b0a4      	sub	sp, #144	; 0x90
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b0f2:	68f9      	ldr	r1, [r7, #12]
 800b0f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fbde 	bl	800b8bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800b100:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b104:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fbf9 	bl	800b902 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f103 0110 	add.w	r1, r3, #16
 800b116:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 fc01 	bl	800b924 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800b122:	f107 0310 	add.w	r3, r7, #16
 800b126:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b12a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fc0b 	bl	800b94a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800b134:	f107 0310 	add.w	r3, r7, #16
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 fc34 	bl	800b9a6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800b13e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b142:	eeb0 0a67 	vmov.f32	s0, s15
 800b146:	3790      	adds	r7, #144	; 0x90
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b154:	2200      	movs	r2, #0
 800b156:	2101      	movs	r1, #1
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff f99e 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fc3c 	bl	800b9dc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800b18c:	68b8      	ldr	r0, [r7, #8]
 800b18e:	f7fa fc62 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b192:	4603      	mov	r3, r0
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	4619      	mov	r1, r3
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 fc2f 	bl	800b9fc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b1b0:	6838      	ldr	r0, [r7, #0]
 800b1b2:	f000 fc4d 	bl	800ba50 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 fc6b 	bl	800ba96 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b1d4:	68b8      	ldr	r0, [r7, #8]
 800b1d6:	f7fa fa76 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f000 fc6f 	bl	800bac4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b1ee:	b5b0      	push	{r4, r5, r7, lr}
 800b1f0:	b086      	sub	sp, #24
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b1fa:	68b8      	ldr	r0, [r7, #8]
 800b1fc:	f000 fc8a 	bl	800bb14 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800b200:	4604      	mov	r4, r0
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fc91 	bl	800bb2a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800b208:	4605      	mov	r5, r0
 800b20a:	f107 0314 	add.w	r3, r7, #20
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fa fab8 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b214:	f107 0314 	add.w	r3, r7, #20
 800b218:	462a      	mov	r2, r5
 800b21a:	4621      	mov	r1, r4
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 fcd7 	bl	800bbd0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bdb0      	pop	{r4, r5, r7, pc}

0800b22a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fd2a 	bl	800bc8c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b238:	4603      	mov	r3, r0
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fd31 	bl	800bca2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800b240:	4603      	mov	r3, r0
 800b242:	4618      	mov	r0, r3
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800b24a:	b590      	push	{r4, r7, lr}
 800b24c:	b085      	sub	sp, #20
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fd1a 	bl	800bc8c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b258:	4604      	mov	r4, r0
 800b25a:	f107 030c 	add.w	r3, r7, #12
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fa fd87 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b264:	f107 030c 	add.w	r3, r7, #12
 800b268:	4619      	mov	r1, r3
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 fdf4 	bl	800be58 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b270:	eef0 7a40 	vmov.f32	s15, s0
 800b274:	bf00      	nop
}
 800b276:	eeb0 0a67 	vmov.f32	s0, s15
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd90      	pop	{r4, r7, pc}

0800b280 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fe21 	bl	800bee4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b2a2:	4603      	mov	r3, r0
    }
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800b2ac:	b480      	push	{r7}
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
    }
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
 800b2ea:	6039      	str	r1, [r7, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 fe07 	bl	800bf04 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4618      	mov	r0, r3
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800b316:	b480      	push	{r7}
 800b318:	b083      	sub	sp, #12
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4618      	mov	r0, r3
 800b338:	f7fb fdea 	bl	8006f10 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800b33c:	4603      	mov	r3, r0
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	3308      	adds	r3, #8
 800b352:	4618      	mov	r0, r3
 800b354:	f7fb fdea 	bl	8006f2c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800b358:	4603      	mov	r3, r0
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
	...

0800b364 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800b370:	68b8      	ldr	r0, [r7, #8]
 800b372:	f7ff ffdb 	bl	800b32c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800b376:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800b378:	68b8      	ldr	r0, [r7, #8]
 800b37a:	f7ff ffe4 	bl	800b346 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800b37e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff fc8b 	bl	800ac9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b388:	4602      	mov	r2, r0
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d107      	bne.n	800b3a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff fc8e 	bl	800acb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b398:	4602      	mov	r2, r0
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d001      	beq.n	800b3a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e000      	b.n	800b3a6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d005      	beq.n	800b3b6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	6979      	ldr	r1, [r7, #20]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff f923 	bl	800a5fc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7ff fc70 	bl	800ac9e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d107      	bne.n	800b3d6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7ff fc73 	bl	800acb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d006      	beq.n	800b3e4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800b3d6:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800b3d8:	4a05      	ldr	r2, [pc, #20]	; (800b3f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800b3da:	f240 21fd 	movw	r1, #765	; 0x2fd
 800b3de:	4805      	ldr	r0, [pc, #20]	; (800b3f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800b3e0:	f012 fe8c 	bl	801e0fc <__assert_func>
}
 800b3e4:	bf00      	nop
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	080225dc 	.word	0x080225dc
 800b3f0:	08024988 	.word	0x08024988
 800b3f4:	080226f0 	.word	0x080226f0

0800b3f8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4618      	mov	r0, r3
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr

0800b40e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800b40e:	b480      	push	{r7}
 800b410:	b085      	sub	sp, #20
 800b412:	af00      	add	r7, sp, #0
 800b414:	60f8      	str	r0, [r7, #12]
 800b416:	60b9      	str	r1, [r7, #8]
 800b418:	607a      	str	r2, [r7, #4]
 800b41a:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	605a      	str	r2, [r3, #4]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	609a      	str	r2, [r3, #8]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	60da      	str	r2, [r3, #12]
  }
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b442:	b580      	push	{r7, lr}
 800b444:	b082      	sub	sp, #8
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fd92 	bl	800bf74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b46c:	b5b0      	push	{r4, r5, r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f7fa fa1a 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b47c:	4604      	mov	r4, r0
 800b47e:	6838      	ldr	r0, [r7, #0]
 800b480:	f7fa ff75 	bl	800636e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800b484:	4605      	mov	r5, r0
 800b486:	f107 030c 	add.w	r3, r7, #12
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fb ff09 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b490:	f107 030c 	add.w	r3, r7, #12
 800b494:	461a      	mov	r2, r3
 800b496:	4629      	mov	r1, r5
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 fd7b 	bl	800bf94 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7fa fa06 	bl	80058b0 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b4a4:	4603      	mov	r3, r0
    }
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bdb0      	pop	{r4, r5, r7, pc}

0800b4ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b4ae:	b5b0      	push	{r4, r5, r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fd7c 	bl	800bfb6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b4be:	4604      	mov	r4, r0
 800b4c0:	6838      	ldr	r0, [r7, #0]
 800b4c2:	f7fa ff5f 	bl	8006384 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	f107 030c 	add.w	r3, r7, #12
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fb fee8 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b4d2:	f107 030c 	add.w	r3, r7, #12
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	4629      	mov	r1, r5
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 fd76 	bl	800bfcc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fd68 	bl	800bfb6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b4e6:	4603      	mov	r3, r0
    }
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bdb0      	pop	{r4, r5, r7, pc}

0800b4f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f000 fd77 	bl	800bfee <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800b500:	4603      	mov	r3, r0
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b52c:	68b8      	ldr	r0, [r7, #8]
 800b52e:	f7fa f8ca 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800b532:	4603      	mov	r3, r0
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	4619      	mov	r1, r3
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 fd6f 	bl	800c01c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b546:	b580      	push	{r7, lr}
 800b548:	b082      	sub	sp, #8
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b550:	6838      	ldr	r0, [r7, #0]
 800b552:	f000 fd8d 	bl	800c070 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800b556:	4603      	mov	r3, r0
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fdab 	bl	800c0b6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b574:	68b8      	ldr	r0, [r7, #8]
 800b576:	f7fa fe16 	bl	80061a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800b57a:	4603      	mov	r3, r0
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	4619      	mov	r1, r3
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 fdaf 	bl	800c0e4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b58e:	b5b0      	push	{r4, r5, r7, lr}
 800b590:	b086      	sub	sp, #24
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b59a:	68b8      	ldr	r0, [r7, #8]
 800b59c:	f000 fdd4 	bl	800c148 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fddb 	bl	800c15e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	f107 0314 	add.w	r3, r7, #20
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fa f8e8 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b5b4:	f107 0314 	add.w	r3, r7, #20
 800b5b8:	462a      	mov	r2, r5
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f000 fe21 	bl	800c204 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	3718      	adds	r7, #24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bdb0      	pop	{r4, r5, r7, pc}

0800b5ca <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fe72 	bl	800c2bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 fe79 	bl	800c2d2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b5ea:	b590      	push	{r4, r7, lr}
 800b5ec:	b085      	sub	sp, #20
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fe62 	bl	800c2bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	f107 030c 	add.w	r3, r7, #12
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fa fbb7 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b604:	f107 030c 	add.w	r3, r7, #12
 800b608:	4619      	mov	r1, r3
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 ff3c 	bl	800c488 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b610:	eef0 7a40 	vmov.f32	s15, s0
 800b614:	bf00      	nop
}
 800b616:	eeb0 0a67 	vmov.f32	s0, s15
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd90      	pop	{r4, r7, pc}

0800b620 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3304      	adds	r3, #4
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4618      	mov	r0, r3
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	6039      	str	r1, [r7, #0]
    {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4618      	mov	r0, r3
 800b688:	f7f9 fcfc 	bl	8005084 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800b68c:	f7f9 fd0a 	bl	80050a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	4618      	mov	r0, r3
 800b696:	f000 ff3d 	bl	800c514 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800b6a4:	b5b0      	push	{r4, r5, r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689c      	ldr	r4, [r3, #8]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fd f9a8 	bl	8008a0e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800b6be:	4605      	mov	r5, r0
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 ff31 	bl	800c52e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800b6cc:	eef0 7a40 	vmov.f32	s15, s0
 800b6d0:	edc7 7a03 	vstr	s15, [r7, #12]
 800b6d4:	f107 030c 	add.w	r3, r7, #12
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f000 ff5f 	bl	800c5a0 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bdb0      	pop	{r4, r5, r7, pc}

0800b6ea <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7ff ffd5 	bl	800b6a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 ff67 	bl	800c5ce <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800b700:	bf00      	nop
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800b708:	b5b0      	push	{r4, r5, r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7fa fa68 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b718:	4604      	mov	r4, r0
 800b71a:	6838      	ldr	r0, [r7, #0]
 800b71c:	f7fb f98e 	bl	8006a3c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800b720:	4605      	mov	r5, r0
 800b722:	f107 030c 	add.w	r3, r7, #12
 800b726:	4618      	mov	r0, r3
 800b728:	f7fb fdbb 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800b72c:	f107 030c 	add.w	r3, r7, #12
 800b730:	461a      	mov	r2, r3
 800b732:	4629      	mov	r1, r5
 800b734:	4620      	mov	r0, r4
 800b736:	f000 ff59 	bl	800c5ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7fa fa54 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800b740:	4603      	mov	r3, r0
    }
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bdb0      	pop	{r4, r5, r7, pc}

0800b74a <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b0a4      	sub	sp, #144	; 0x90
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800b756:	68f9      	ldr	r1, [r7, #12]
 800b758:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff fd0e 	bl	800b180 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800b764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b768:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b76c:	4611      	mov	r1, r2
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fd19 	bl	800b1a6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b778:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 ff45 	bl	800c60e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800b784:	f107 0314 	add.w	r3, r7, #20
 800b788:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800b78c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b790:	4618      	mov	r0, r3
 800b792:	f000 ff4f 	bl	800c634 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800b796:	f107 0314 	add.w	r3, r7, #20
 800b79a:	4618      	mov	r0, r3
 800b79c:	f000 ff78 	bl	800c690 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800b7a0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800b7a4:	eeb0 0a67 	vmov.f32	s0, s15
 800b7a8:	3790      	adds	r7, #144	; 0x90
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b082      	sub	sp, #8
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7ff f934 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 ff80 	bl	800c6c6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800b7c6:	bf00      	nop
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800b7ce:	b480      	push	{r7}
 800b7d0:	b083      	sub	sp, #12
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	330c      	adds	r3, #12
 800b7da:	4618      	mov	r0, r3
 800b7dc:	370c      	adds	r7, #12
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800b7e6:	b480      	push	{r7}
 800b7e8:	b083      	sub	sp, #12
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3304      	adds	r3, #4
 800b80a:	4618      	mov	r0, r3
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	4618      	mov	r0, r3
 800b826:	f7fb fa58 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4618      	mov	r0, r3
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	4618      	mov	r0, r3
 800b844:	f000 ff4f 	bl	800c6e6 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800b852:	b580      	push	{r7, lr}
 800b854:	b082      	sub	sp, #8
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	6039      	str	r1, [r7, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	4611      	mov	r1, r2
 800b862:	4618      	mov	r0, r3
 800b864:	f7f9 f8aa 	bl	80049bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	3310      	adds	r3, #16
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	6912      	ldr	r2, [r2, #16]
 800b870:	601a      	str	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff ffe0 	bl	800b852 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff ffe5 	bl	800b87c <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800b8c8:	68b8      	ldr	r0, [r7, #8]
 800b8ca:	f7fa f824 	bl	8005916 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 ff1d 	bl	800c714 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	6039      	str	r1, [r7, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff ffd2 	bl	800b89c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800b902:	b580      	push	{r7, lr}
 800b904:	b082      	sub	sp, #8
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800b90c:	6838      	ldr	r0, [r7, #0]
 800b90e:	f000 ff29 	bl	800c764 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800b912:	4603      	mov	r3, r0
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 ff47 	bl	800c7aa <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800b930:	68b8      	ldr	r0, [r7, #8]
 800b932:	f7f9 fffb 	bl	800592c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800b936:	4603      	mov	r3, r0
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	4619      	mov	r1, r3
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 ff47 	bl	800c7d0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800b94a:	b5b0      	push	{r4, r5, r7, lr}
 800b94c:	b086      	sub	sp, #24
 800b94e:	af00      	add	r7, sp, #0
 800b950:	60f8      	str	r0, [r7, #12]
 800b952:	60b9      	str	r1, [r7, #8]
 800b954:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800b956:	68b8      	ldr	r0, [r7, #8]
 800b958:	f000 ff62 	bl	800c820 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800b95c:	4604      	mov	r4, r0
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 ff69 	bl	800c836 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800b964:	4605      	mov	r5, r0
 800b966:	f107 0314 	add.w	r3, r7, #20
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7f9 ff0a 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800b970:	f107 0314 	add.w	r3, r7, #20
 800b974:	462a      	mov	r2, r5
 800b976:	4621      	mov	r1, r4
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f000 ffaf 	bl	800c8dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bdb0      	pop	{r4, r5, r7, pc}

0800b986 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800b986:	b580      	push	{r7, lr}
 800b988:	b082      	sub	sp, #8
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fffe 	bl	800c990 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b994:	4603      	mov	r3, r0
 800b996:	4618      	mov	r0, r3
 800b998:	f001 f805 	bl	800c9a6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800b99c:	4603      	mov	r3, r0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800b9a6:	b590      	push	{r4, r7, lr}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 ffee 	bl	800c990 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	f107 030c 	add.w	r3, r7, #12
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fa f9d9 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800b9c0:	f107 030c 	add.w	r3, r7, #12
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f001 f8da 	bl	800cb80 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800b9cc:	eef0 7a40 	vmov.f32	s15, s0
 800b9d0:	bf00      	nop
}
 800b9d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd90      	pop	{r4, r7, pc}

0800b9dc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7fe fd56 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f001 f90c 	bl	800cc0c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800b9f4:	bf00      	nop
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	68b9      	ldr	r1, [r7, #8]
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f001 f90c 	bl	800cc2c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	db07      	blt.n	800ba2a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7f9 fc10 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800ba22:	4602      	mov	r2, r0
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4293      	cmp	r3, r2
 800ba28:	db05      	blt.n	800ba36 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800ba2a:	4b06      	ldr	r3, [pc, #24]	; (800ba44 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800ba2c:	4a06      	ldr	r2, [pc, #24]	; (800ba48 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800ba2e:	2178      	movs	r1, #120	; 0x78
 800ba30:	4806      	ldr	r0, [pc, #24]	; (800ba4c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800ba32:	f012 fb63 	bl	801e0fc <__assert_func>
 800ba36:	bf00      	nop
    }
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	08024ae8 	.word	0x08024ae8
 800ba48:	08024b90 	.word	0x08024b90
 800ba4c:	08024c6c 	.word	0x08024c6c

0800ba50 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	370c      	adds	r7, #12
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr

0800ba66 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b082      	sub	sp, #8
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f001 f8ed 	bl	800cc4e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	4618      	mov	r0, r3
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b082      	sub	sp, #8
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff ffed 	bl	800ba66 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800ba96:	b5b0      	push	{r4, r5, r7, lr}
 800ba98:	b082      	sub	sp, #8
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	6039      	str	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ffec 	bl	800ba7e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	4614      	mov	r4, r2
 800baac:	461d      	mov	r5, r3
 800baae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bab2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bab6:	e884 0003 	stmia.w	r4, {r0, r1}
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bdb0      	pop	{r4, r5, r7, pc}

0800bac4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	68b9      	ldr	r1, [r7, #8]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 f8c4 	bl	800cc64 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	db07      	blt.n	800baf2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7f9 fc47 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800baea:	4602      	mov	r2, r0
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4293      	cmp	r3, r2
 800baf0:	db05      	blt.n	800bafe <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800baf2:	4b05      	ldr	r3, [pc, #20]	; (800bb08 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800baf4:	4a05      	ldr	r2, [pc, #20]	; (800bb0c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800baf6:	2178      	movs	r1, #120	; 0x78
 800baf8:	4805      	ldr	r0, [pc, #20]	; (800bb10 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800bafa:	f012 faff 	bl	801e0fc <__assert_func>
    }
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	08024ae8 	.word	0x08024ae8
 800bb0c:	08024cc0 	.word	0x08024cc0
 800bb10:	08024c6c 	.word	0x08024c6c

0800bb14 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800bb2a:	b480      	push	{r7}
 800bb2c:	b083      	sub	sp, #12
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f001 f89c 	bl	800cc86 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4618      	mov	r0, r3
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f7ff ffed 	bl	800bb40 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 f88e 	bl	800cc9c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800bb80:	4603      	mov	r3, r0
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 f88c 	bl	800ccb2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	f7fb f913 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b082      	sub	sp, #8
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	f7fb f910 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800bbd0:	b5b0      	push	{r4, r5, r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
 800bbdc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f7ff ffba 	bl	800bb58 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	4614      	mov	r4, r2
 800bbea:	461d      	mov	r5, r3
 800bbec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbf0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bbf4:	e884 0003 	stmia.w	r4, {r0, r1}
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f103 0218 	add.w	r2, r3, #24
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4614      	mov	r4, r2
 800bc02:	461d      	mov	r5, r3
 800bc04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc08:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bc0c:	e884 0003 	stmia.w	r4, {r0, r1}
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3330      	adds	r3, #48	; 0x30
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7f9 fe3e 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800bc1c:	68b8      	ldr	r0, [r7, #8]
 800bc1e:	f7ff ffa7 	bl	800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800bc22:	4604      	mov	r4, r0
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff ffbc 	bl	800bba4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	429c      	cmp	r4, r3
 800bc30:	d10a      	bne.n	800bc48 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800bc32:	68b8      	ldr	r0, [r7, #8]
 800bc34:	f7ff ffa9 	bl	800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800bc38:	4604      	mov	r4, r0
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff ffbc 	bl	800bbba <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800bc42:	4603      	mov	r3, r0
 800bc44:	429c      	cmp	r4, r3
 800bc46:	d005      	beq.n	800bc54 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800bc48:	4b05      	ldr	r3, [pc, #20]	; (800bc60 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800bc4a:	4a06      	ldr	r2, [pc, #24]	; (800bc64 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800bc4c:	2174      	movs	r1, #116	; 0x74
 800bc4e:	4806      	ldr	r0, [pc, #24]	; (800bc68 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800bc50:	f012 fa54 	bl	801e0fc <__assert_func>
    }
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	0801ff64 	.word	0x0801ff64
 800bc64:	08024d9c 	.word	0x08024d9c
 800bc68:	080201c8 	.word	0x080201c8

0800bc6c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f809 	bl	800bc8c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f001 f823 	bl	800ccc8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800bc82:	4603      	mov	r3, r0
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4618      	mov	r0, r3
 800bc98:	370c      	adds	r7, #12
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b082      	sub	sp, #8
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff ff5f 	bl	800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800bcb2:	4603      	mov	r3, r0
    }
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f001 f831 	bl	800cd2c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4618      	mov	r0, r3
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff ffec 	bl	800bcbc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff ffeb 	bl	800bcd4 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff ffeb 	bl	800bcee <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7ff ffeb 	bl	800bd08 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 ffef 	bl	800cd16 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7ff ffe8 	bl	800bd22 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4618      	mov	r0, r3
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff ffeb 	bl	800bd42 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b082      	sub	sp, #8
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 ffdf 	bl	800cd42 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	4618      	mov	r0, r3
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b082      	sub	sp, #8
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff ffec 	bl	800bd76 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4618      	mov	r0, r3
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff ffeb 	bl	800bd8e <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7ff ffeb 	bl	800bda8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	330c      	adds	r3, #12
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7ff ffea 	bl	800bdc2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7ff ffb2 	bl	800bd5c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff ffe5 	bl	800bddc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 ff74 	bl	800cd00 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800be22:	b580      	push	{r7, lr}
 800be24:	b082      	sub	sp, #8
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7ff ffe8 	bl	800be02 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4618      	mov	r0, r3
 800be48:	f7ff ffeb 	bl	800be22 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4618      	mov	r0, r3
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
	...

0800be58 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800be58:	b580      	push	{r7, lr}
 800be5a:	ed2d 8b02 	vpush	{d8}
 800be5e:	b088      	sub	sp, #32
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff f9df 	bl	800b22a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dd05      	ble.n	800be7e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff fefa 	bl	800bc6c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dc06      	bgt.n	800be8c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800be7e:	4b16      	ldr	r3, [pc, #88]	; (800bed8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800be80:	4a16      	ldr	r2, [pc, #88]	; (800bedc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800be82:	f240 119b 	movw	r1, #411	; 0x19b
 800be86:	4816      	ldr	r0, [pc, #88]	; (800bee0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800be88:	f012 f938 	bl	801e0fc <__assert_func>
 800be8c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff fefc 	bl	800bc8c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800be94:	4602      	mov	r2, r0
 800be96:	f107 030c 	add.w	r3, r7, #12
 800be9a:	4611      	mov	r1, r2
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 ff20 	bl	800cce2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7ff fef2 	bl	800bc8c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800bea8:	4602      	mov	r2, r0
 800beaa:	f107 030c 	add.w	r3, r7, #12
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 ff51 	bl	800cd58 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800beb6:	eeb0 8a40 	vmov.f32	s16, s0
 800beba:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff ffbb 	bl	800be3c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800bec6:	eef0 7a48 	vmov.f32	s15, s16
}
 800beca:	eeb0 0a67 	vmov.f32	s0, s15
 800bece:	3720      	adds	r7, #32
 800bed0:	46bd      	mov	sp, r7
 800bed2:	ecbd 8b02 	vpop	{d8}
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	08024fe4 	.word	0x08024fe4
 800bedc:	08025028 	.word	0x08025028
 800bee0:	080251f0 	.word	0x080251f0

0800bee4 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7fe feb4 	bl	800ac5a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800bef2:	4603      	mov	r3, r0
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fe fedd 	bl	800acb4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800befa:	4603      	mov	r3, r0
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800bf04:	b590      	push	{r4, r7, lr}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 ff4a 	bl	800cda8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800bf14:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800bf16:	6838      	ldr	r0, [r7, #0]
 800bf18:	f000 ff2f 	bl	800cd7a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bf1c:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800bf1e:	4619      	mov	r1, r3
 800bf20:	4620      	mov	r0, r4
 800bf22:	f000 ff4c 	bl	800cdbe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800bf26:	6838      	ldr	r0, [r7, #0]
 800bf28:	f000 ff32 	bl	800cd90 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800bf2c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	3324      	adds	r3, #36	; 0x24
 800bf32:	6812      	ldr	r2, [r2, #0]
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800bf3a:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fb fe16 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800bf4e:	4619      	mov	r1, r3
 800bf50:	4610      	mov	r0, r2
 800bf52:	f000 ff49 	bl	800cde8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800bf56:	6838      	ldr	r0, [r7, #0]
 800bf58:	f000 ff0f 	bl	800cd7a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7f9 feaf 	bl	8005cc2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800bf64:	4602      	mov	r2, r0
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd90      	pop	{r4, r7, pc}

0800bf74 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	2100      	movs	r1, #0
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 ff40 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 ff56 	bl	800ce38 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800bf8c:	bf00      	nop
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b086      	sub	sp, #24
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	68b9      	ldr	r1, [r7, #8]
 800bfa8:	6978      	ldr	r0, [r7, #20]
 800bfaa:	f000 ff55 	bl	800ce58 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800bfae:	bf00      	nop
 800bfb0:	3718      	adds	r7, #24
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800bfb6:	b480      	push	{r7}
 800bfb8:	b083      	sub	sp, #12
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b086      	sub	sp, #24
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	6978      	ldr	r0, [r7, #20]
 800bfe2:	f000 ff73 	bl	800cecc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800bfe6:	bf00      	nop
 800bfe8:	3718      	adds	r7, #24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800bfee:	b480      	push	{r7}
 800bff0:	b083      	sub	sp, #12
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4618      	mov	r0, r3
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 ff9c 	bl	800cf4a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800c012:	4603      	mov	r3, r0
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	68b9      	ldr	r1, [r7, #8]
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 ff97 	bl	800cf62 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	db07      	blt.n	800c04a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7f9 f9a6 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800c042:	4602      	mov	r2, r0
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4293      	cmp	r3, r2
 800c048:	db05      	blt.n	800c056 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800c04a:	4b06      	ldr	r3, [pc, #24]	; (800c064 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800c04c:	4a06      	ldr	r2, [pc, #24]	; (800c068 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800c04e:	2178      	movs	r1, #120	; 0x78
 800c050:	4806      	ldr	r0, [pc, #24]	; (800c06c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800c052:	f012 f853 	bl	801e0fc <__assert_func>
 800c056:	bf00      	nop
    }
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	08024ae8 	.word	0x08024ae8
 800c068:	08025244 	.word	0x08025244
 800c06c:	08024c6c 	.word	0x08024c6c

0800c070 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4618      	mov	r0, r3
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800c086:	b580      	push	{r7, lr}
 800c088:	b082      	sub	sp, #8
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 ff78 	bl	800cf84 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4618      	mov	r0, r3
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7ff ffed 	bl	800c086 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c0b6:	b5b0      	push	{r4, r5, r7, lr}
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff ffec 	bl	800c09e <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	4614      	mov	r4, r2
 800c0cc:	461d      	mov	r5, r3
 800c0ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c0d6:	e884 0003 	stmia.w	r4, {r0, r1}
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bdb0      	pop	{r4, r5, r7, pc}

0800c0e4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	60f8      	str	r0, [r7, #12]
 800c0ec:	60b9      	str	r1, [r7, #8]
 800c0ee:	607a      	str	r2, [r7, #4]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	68b9      	ldr	r1, [r7, #8]
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f000 ff4f 	bl	800cf9a <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	db0f      	blt.n	800c122 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	4618      	mov	r0, r3
 800c106:	f7fa f88c 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800c10a:	4602      	mov	r2, r0
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4293      	cmp	r3, r2
 800c110:	db0d      	blt.n	800c12e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	4618      	mov	r0, r3
 800c116:	f7fa f88f 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800c11a:	4602      	mov	r2, r0
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4293      	cmp	r3, r2
 800c120:	db05      	blt.n	800c12e <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800c122:	4b06      	ldr	r3, [pc, #24]	; (800c13c <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800c124:	4a06      	ldr	r2, [pc, #24]	; (800c140 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800c126:	2178      	movs	r1, #120	; 0x78
 800c128:	4806      	ldr	r0, [pc, #24]	; (800c144 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800c12a:	f011 ffe7 	bl	801e0fc <__assert_func>
 800c12e:	bf00      	nop
    }
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	08024ae8 	.word	0x08024ae8
 800c140:	08025320 	.word	0x08025320
 800c144:	08024c6c 	.word	0x08024c6c

0800c148 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4618      	mov	r0, r3
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800c15e:	b480      	push	{r7}
 800c160:	b083      	sub	sp, #12
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4618      	mov	r0, r3
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 ff1d 	bl	800cfbc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff ffed 	bl	800c174 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4618      	mov	r0, r3
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 ff0f 	bl	800cfd2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f000 ff0d 	bl	800cfe8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	f7fa fe01 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b082      	sub	sp, #8
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	f7fa fdf6 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c204:	b5b0      	push	{r4, r5, r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
 800c210:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f7ff ffba 	bl	800c18c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	4614      	mov	r4, r2
 800c21e:	461d      	mov	r5, r3
 800c220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c224:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c228:	e884 0003 	stmia.w	r4, {r0, r1}
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f103 0218 	add.w	r2, r3, #24
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4614      	mov	r4, r2
 800c236:	461d      	mov	r5, r3
 800c238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c23a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	332c      	adds	r3, #44	; 0x2c
 800c244:	6839      	ldr	r1, [r7, #0]
 800c246:	4618      	mov	r0, r3
 800c248:	f7f9 fb26 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c24c:	68b8      	ldr	r0, [r7, #8]
 800c24e:	f7ff ffa9 	bl	800c1a4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800c252:	4604      	mov	r4, r0
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff ffbe 	bl	800c1d8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800c25c:	4603      	mov	r3, r0
 800c25e:	429c      	cmp	r4, r3
 800c260:	d10a      	bne.n	800c278 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800c262:	68b8      	ldr	r0, [r7, #8]
 800c264:	f7ff ffab 	bl	800c1be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800c268:	4604      	mov	r4, r0
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff ffbe 	bl	800c1ee <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800c272:	4603      	mov	r3, r0
 800c274:	429c      	cmp	r4, r3
 800c276:	d005      	beq.n	800c284 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800c278:	4b05      	ldr	r3, [pc, #20]	; (800c290 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800c27a:	4a06      	ldr	r2, [pc, #24]	; (800c294 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800c27c:	2174      	movs	r1, #116	; 0x74
 800c27e:	4806      	ldr	r0, [pc, #24]	; (800c298 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800c280:	f011 ff3c 	bl	801e0fc <__assert_func>
    }
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bdb0      	pop	{r4, r5, r7, pc}
 800c28e:	bf00      	nop
 800c290:	0801ff64 	.word	0x0801ff64
 800c294:	080253fc 	.word	0x080253fc
 800c298:	080201c8 	.word	0x080201c8

0800c29c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f809 	bl	800c2bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 fea6 	bl	800cffe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	370c      	adds	r7, #12
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b082      	sub	sp, #8
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff ff61 	bl	800c1a4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800c2e2:	4603      	mov	r3, r0
    }
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 feb4 	bl	800d062 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff ffec 	bl	800c2ec <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4618      	mov	r0, r3
 800c32a:	f7ff ffeb 	bl	800c304 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4618      	mov	r0, r3
 800c344:	f7ff ffeb 	bl	800c31e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800c352:	b580      	push	{r7, lr}
 800c354:	b082      	sub	sp, #8
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff ffeb 	bl	800c338 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fe72 	bl	800d04c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4618      	mov	r0, r3
 800c36c:	3708      	adds	r7, #8
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800c372:	b580      	push	{r7, lr}
 800c374:	b082      	sub	sp, #8
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff ffe8 	bl	800c352 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4618      	mov	r0, r3
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4618      	mov	r0, r3
 800c398:	f7ff ffeb 	bl	800c372 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b082      	sub	sp, #8
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fe62 	bl	800d078 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff ffec 	bl	800c3a6 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7ff ffeb 	bl	800c3be <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3708      	adds	r7, #8
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b082      	sub	sp, #8
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7ff ffeb 	bl	800c3d8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	4618      	mov	r0, r3
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	330c      	adds	r3, #12
 800c418:	4618      	mov	r0, r3
 800c41a:	f7ff ffea 	bl	800c3f2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	3304      	adds	r3, #4
 800c422:	4618      	mov	r0, r3
 800c424:	f7ff ffb2 	bl	800c38c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4618      	mov	r0, r3
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff ffe5 	bl	800c40c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fdf7 	bl	800d036 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4618      	mov	r0, r3
 800c44c:	3708      	adds	r7, #8
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c452:	b580      	push	{r7, lr}
 800c454:	b082      	sub	sp, #8
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff ffe8 	bl	800c432 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	4618      	mov	r0, r3
 800c478:	f7ff ffeb 	bl	800c452 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4618      	mov	r0, r3
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c488:	b580      	push	{r7, lr}
 800c48a:	ed2d 8b02 	vpush	{d8}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff f897 	bl	800b5ca <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	dd05      	ble.n	800c4ae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff fefa 	bl	800c29c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	dc06      	bgt.n	800c4bc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c4ae:	4b16      	ldr	r3, [pc, #88]	; (800c508 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c4b0:	4a16      	ldr	r2, [pc, #88]	; (800c50c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c4b2:	f240 119b 	movw	r1, #411	; 0x19b
 800c4b6:	4816      	ldr	r0, [pc, #88]	; (800c510 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c4b8:	f011 fe20 	bl	801e0fc <__assert_func>
 800c4bc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f7ff fefc 	bl	800c2bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	f107 030c 	add.w	r3, r7, #12
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 fda3 	bl	800d018 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7ff fef2 	bl	800c2bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	f107 030c 	add.w	r3, r7, #12
 800c4de:	6839      	ldr	r1, [r7, #0]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fdd4 	bl	800d08e <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800c4e6:	eeb0 8a40 	vmov.f32	s16, s0
 800c4ea:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff ffbb 	bl	800c46c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c4f6:	eef0 7a48 	vmov.f32	s15, s16
}
 800c4fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c4fe:	3720      	adds	r7, #32
 800c500:	46bd      	mov	sp, r7
 800c502:	ecbd 8b02 	vpop	{d8}
 800c506:	bd80      	pop	{r7, pc}
 800c508:	08024fe4 	.word	0x08024fe4
 800c50c:	08025644 	.word	0x08025644
 800c510:	080251f0 	.word	0x080251f0

0800c514 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fdc5 	bl	800d0b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800c526:	bf00      	nop
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800c52e:	b580      	push	{r7, lr}
 800c530:	b0a2      	sub	sp, #136	; 0x88
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800c53e:	2300      	movs	r3, #0
 800c540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6819      	ldr	r1, [r3, #0]
 800c548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c54c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c550:	4618      	mov	r0, r3
 800c552:	f7fe ffe5 	bl	800b520 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800c556:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c55a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800c55e:	4611      	mov	r1, r2
 800c560:	4618      	mov	r0, r3
 800c562:	f7fe fff0 	bl	800b546 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	1d19      	adds	r1, r3, #4
 800c56a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c56e:	2200      	movs	r2, #0
 800c570:	4618      	mov	r0, r3
 800c572:	f7fe fff9 	bl	800b568 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800c576:	f107 030c 	add.w	r3, r7, #12
 800c57a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c57e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff f803 	bl	800b58e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800c588:	f107 030c 	add.w	r3, r7, #12
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff f82c 	bl	800b5ea <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800c592:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c596:	eeb0 0a67 	vmov.f32	s0, s15
 800c59a:	3788      	adds	r7, #136	; 0x88
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	ed93 7a00 	vldr	s14, [r3]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	edd3 7a00 	vldr	s15, [r3]
 800c5b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	edc3 7a00 	vstr	s15, [r3]
 800c5c2:	bf00      	nop
 800c5c4:	3714      	adds	r7, #20
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800c5d6:	2102      	movs	r1, #2
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff f863 	bl	800b6a4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fd87 	bl	800d0f2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800c5e4:	bf00      	nop
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	68b9      	ldr	r1, [r7, #8]
 800c600:	6978      	ldr	r0, [r7, #20]
 800c602:	f000 fd80 	bl	800d106 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800c606:	bf00      	nop
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	60f8      	str	r0, [r7, #12]
 800c616:	60b9      	str	r1, [r7, #8]
 800c618:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800c61a:	68b8      	ldr	r0, [r7, #8]
 800c61c:	f7f9 fa1b 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800c620:	4603      	mov	r3, r0
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	4619      	mov	r1, r3
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f000 fd98 	bl	800d15c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800c634:	b5b0      	push	{r4, r5, r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800c640:	68b8      	ldr	r0, [r7, #8]
 800c642:	f7ff fa67 	bl	800bb14 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800c646:	4604      	mov	r4, r0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fdaf 	bl	800d1ac <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800c64e:	4605      	mov	r5, r0
 800c650:	f107 0314 	add.w	r3, r7, #20
 800c654:	4618      	mov	r0, r3
 800c656:	f7f9 f895 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800c65a:	f107 0314 	add.w	r3, r7, #20
 800c65e:	462a      	mov	r2, r5
 800c660:	4621      	mov	r1, r4
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f000 fddc 	bl	800d220 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	3718      	adds	r7, #24
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bdb0      	pop	{r4, r5, r7, pc}

0800c670 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fe2f 	bl	800d2dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c67e:	4603      	mov	r3, r0
 800c680:	4618      	mov	r0, r3
 800c682:	f000 fe36 	bl	800d2f2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800c686:	4603      	mov	r3, r0
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800c690:	b590      	push	{r4, r7, lr}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fe1f 	bl	800d2dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c69e:	4604      	mov	r4, r0
 800c6a0:	f107 030c 	add.w	r3, r7, #12
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7f9 fb64 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800c6aa:	f107 030c 	add.w	r3, r7, #12
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f000 fe9b 	bl	800d3ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800c6b6:	eef0 7a40 	vmov.f32	s15, s0
 800c6ba:	bf00      	nop
}
 800c6bc:	eeb0 0a67 	vmov.f32	s0, s15
 800c6c0:	3714      	adds	r7, #20
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd90      	pop	{r4, r7, pc}

0800c6c6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7fe f9a8 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fecd 	bl	800d478 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800c6de:	bf00      	nop
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800c6e6:	b590      	push	{r4, r7, lr}
 800c6e8:	b083      	sub	sp, #12
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fedd 	bl	800d4b0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800c6f6:	687c      	ldr	r4, [r7, #4]
 800c6f8:	6838      	ldr	r0, [r7, #0]
 800c6fa:	f000 fecd 	bl	800d498 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800c6fe:	4603      	mov	r3, r0
 800c700:	4619      	mov	r1, r3
 800c702:	4620      	mov	r0, r4
 800c704:	f7f9 f8b8 	bl	8005878 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4618      	mov	r0, r3
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd90      	pop	{r4, r7, pc}
	...

0800c714 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	68b9      	ldr	r1, [r7, #8]
 800c726:	4618      	mov	r0, r3
 800c728:	f000 fecd 	bl	800d4c6 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	db06      	blt.n	800c740 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800c732:	68b8      	ldr	r0, [r7, #8]
 800c734:	f7fb fe6d 	bl	8008412 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800c738:	4602      	mov	r2, r0
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	4293      	cmp	r3, r2
 800c73e:	db05      	blt.n	800c74c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800c740:	4b05      	ldr	r3, [pc, #20]	; (800c758 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800c742:	4a06      	ldr	r2, [pc, #24]	; (800c75c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800c744:	2178      	movs	r1, #120	; 0x78
 800c746:	4806      	ldr	r0, [pc, #24]	; (800c760 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800c748:	f011 fcd8 	bl	801e0fc <__assert_func>
 800c74c:	bf00      	nop
    }
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	08024ae8 	.word	0x08024ae8
 800c75c:	0802580c 	.word	0x0802580c
 800c760:	08024c6c 	.word	0x08024c6c

0800c764 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b082      	sub	sp, #8
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 feb0 	bl	800d4e8 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4618      	mov	r0, r3
 800c78c:	3708      	adds	r7, #8
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800c792:	b580      	push	{r7, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7ff ffed 	bl	800c77a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	6039      	str	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff ffec 	bl	800c792 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff f86c 	bl	800b89c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
	...

0800c7d0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	68b9      	ldr	r1, [r7, #8]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fe8b 	bl	800d4fe <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	db06      	blt.n	800c7fc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800c7ee:	68b8      	ldr	r0, [r7, #8]
 800c7f0:	f7fb fe1d 	bl	800842e <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	db05      	blt.n	800c808 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800c7fc:	4b05      	ldr	r3, [pc, #20]	; (800c814 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800c7fe:	4a06      	ldr	r2, [pc, #24]	; (800c818 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800c800:	2178      	movs	r1, #120	; 0x78
 800c802:	4806      	ldr	r0, [pc, #24]	; (800c81c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800c804:	f011 fc7a 	bl	801e0fc <__assert_func>
    }
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	4618      	mov	r0, r3
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	08024ae8 	.word	0x08024ae8
 800c818:	080259a4 	.word	0x080259a4
 800c81c:	08024c6c 	.word	0x08024c6c

0800c820 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4618      	mov	r0, r3
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800c836:	b480      	push	{r7}
 800c838:	b083      	sub	sp, #12
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4618      	mov	r0, r3
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fe63 	bl	800d520 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4618      	mov	r0, r3
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff ffed 	bl	800c84c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4618      	mov	r0, r3
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4618      	mov	r0, r3
 800c888:	f000 fe55 	bl	800d536 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800c88c:	4603      	mov	r3, r0
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 fe53 	bl	800d54c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	f7fa fa95 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b082      	sub	sp, #8
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	f7fa fa8a 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c8dc:	b5b0      	push	{r4, r5, r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
 800c8e8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f7ff ffba 	bl	800c864 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	68b9      	ldr	r1, [r7, #8]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fe fff3 	bl	800b8e2 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f103 021c 	add.w	r2, r3, #28
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4614      	mov	r4, r2
 800c906:	461d      	mov	r5, r3
 800c908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c90a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c90c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c910:	e884 0003 	stmia.w	r4, {r0, r1}
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	3334      	adds	r3, #52	; 0x34
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7f8 ffbc 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c920:	68b8      	ldr	r0, [r7, #8]
 800c922:	f7ff ffab 	bl	800c87c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c926:	4604      	mov	r4, r0
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7ff ffc0 	bl	800c8b0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800c930:	4603      	mov	r3, r0
 800c932:	429c      	cmp	r4, r3
 800c934:	d10a      	bne.n	800c94c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800c936:	68b8      	ldr	r0, [r7, #8]
 800c938:	f7ff ffad 	bl	800c896 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800c93c:	4604      	mov	r4, r0
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff ffc0 	bl	800c8c6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800c946:	4603      	mov	r3, r0
 800c948:	429c      	cmp	r4, r3
 800c94a:	d005      	beq.n	800c958 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800c94c:	4b05      	ldr	r3, [pc, #20]	; (800c964 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800c94e:	4a06      	ldr	r2, [pc, #24]	; (800c968 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800c950:	2174      	movs	r1, #116	; 0x74
 800c952:	4806      	ldr	r0, [pc, #24]	; (800c96c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800c954:	f011 fbd2 	bl	801e0fc <__assert_func>
    }
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bdb0      	pop	{r4, r5, r7, pc}
 800c962:	bf00      	nop
 800c964:	0801ff64 	.word	0x0801ff64
 800c968:	08025a94 	.word	0x08025a94
 800c96c:	080201c8 	.word	0x080201c8

0800c970 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f809 	bl	800c990 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c97e:	4603      	mov	r3, r0
 800c980:	4618      	mov	r0, r3
 800c982:	f000 fdee 	bl	800d562 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800c986:	4603      	mov	r3, r0
 800c988:	4618      	mov	r0, r3
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4618      	mov	r0, r3
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff ff62 	bl	800c87c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800c9b8:	4603      	mov	r3, r0
    }
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fc fc30 	bl	8009232 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7ff ffeb 	bl	800c9c2 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 fdeb 	bl	800d5c8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7ff ffe8 	bl	800c9dc <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b082      	sub	sp, #8
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff ffeb 	bl	800c9fc <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3708      	adds	r7, #8
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7ff ffeb 	bl	800ca16 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4618      	mov	r0, r3
 800ca44:	3708      	adds	r7, #8
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b082      	sub	sp, #8
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7ff ffeb 	bl	800ca30 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fda9 	bl	800d5b2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800ca6a:	b580      	push	{r7, lr}
 800ca6c:	b082      	sub	sp, #8
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7ff ffe8 	bl	800ca4a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7ff ffeb 	bl	800ca6a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4618      	mov	r0, r3
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b082      	sub	sp, #8
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fd99 	bl	800d5de <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4618      	mov	r0, r3
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b082      	sub	sp, #8
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff ffec 	bl	800ca9e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4618      	mov	r0, r3
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4618      	mov	r0, r3
 800cadc:	f7ff ffeb 	bl	800cab6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800caea:	b580      	push	{r7, lr}
 800caec:	b082      	sub	sp, #8
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7ff ffeb 	bl	800cad0 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3320      	adds	r3, #32
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7ff ffea 	bl	800caea <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3304      	adds	r3, #4
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff ffb2 	bl	800ca84 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7ff ffe5 	bl	800cb04 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fd2e 	bl	800d59c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	4618      	mov	r0, r3
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff ffe8 	bl	800cb2a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7ff ffeb 	bl	800cb4a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800cb80:	b580      	push	{r7, lr}
 800cb82:	ed2d 8b02 	vpush	{d8}
 800cb86:	b08c      	sub	sp, #48	; 0x30
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7fe fef9 	bl	800b986 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	dd05      	ble.n	800cba6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff fee8 	bl	800c970 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	dc06      	bgt.n	800cbb4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800cba6:	4b16      	ldr	r3, [pc, #88]	; (800cc00 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800cba8:	4a16      	ldr	r2, [pc, #88]	; (800cc04 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800cbaa:	f240 119b 	movw	r1, #411	; 0x19b
 800cbae:	4816      	ldr	r0, [pc, #88]	; (800cc08 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800cbb0:	f011 faa4 	bl	801e0fc <__assert_func>
 800cbb4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7ff feea 	bl	800c990 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	f107 0308 	add.w	r3, r7, #8
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fcda 	bl	800d57e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff fee0 	bl	800c990 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	f107 0308 	add.w	r3, r7, #8
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 fd0b 	bl	800d5f4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800cbde:	eeb0 8a40 	vmov.f32	s16, s0
 800cbe2:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800cbe4:	f107 0308 	add.w	r3, r7, #8
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff ffbb 	bl	800cb64 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800cbee:	eef0 7a48 	vmov.f32	s15, s16
}
 800cbf2:	eeb0 0a67 	vmov.f32	s0, s15
 800cbf6:	3730      	adds	r7, #48	; 0x30
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	ecbd 8b02 	vpop	{d8}
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	08024fe4 	.word	0x08024fe4
 800cc04:	08025e7c 	.word	0x08025e7c
 800cc08:	080251f0 	.word	0x080251f0

0800cc0c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cc14:	2202      	movs	r2, #2
 800cc16:	2101      	movs	r1, #1
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7fd fc3e 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 fcf9 	bl	800d616 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	68b9      	ldr	r1, [r7, #8]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 fcf9 	bl	800d636 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cc4e:	b480      	push	{r7}
 800cc50:	b083      	sub	sp, #12
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
    }
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	68b9      	ldr	r1, [r7, #8]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 fd13 	bl	800d6a2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cc86:	b480      	push	{r7}
 800cc88:	b083      	sub	sp, #12
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
    }
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4618      	mov	r0, r3
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	f7fa f897 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b082      	sub	sp, #8
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
 800ccba:	f7fa f894 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7fe ff59 	bl	800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ccd8:	4603      	mov	r3, r0
    }
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	6039      	str	r1, [r7, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 fd0c 	bl	800d70e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800cd42:	b480      	push	{r7}
 800cd44:	b083      	sub	sp, #12
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	f000 fce0 	bl	800d72c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800cd6c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cd70:	eeb0 0a67 	vmov.f32	s0, s15
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800cd7a:	b480      	push	{r7}
 800cd7c:	b083      	sub	sp, #12
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4618      	mov	r0, r3
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	3308      	adds	r3, #8
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	6039      	str	r1, [r7, #0]
    {
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f8 f937 	bl	800503e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800cdd0:	f7f8 f945 	bl	800505e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 fccb 	bl	800d774 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 fcc9 	bl	800d78e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b086      	sub	sp, #24
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800ce12:	6879      	ldr	r1, [r7, #4]
 800ce14:	68b8      	ldr	r0, [r7, #8]
 800ce16:	f000 fcd0 	bl	800d7ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800ce1a:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	68b8      	ldr	r0, [r7, #8]
 800ce20:	f000 fcd7 	bl	800d7d2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800ce24:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	6979      	ldr	r1, [r7, #20]
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f000 fcdd 	bl	800d7ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800ce30:	bf00      	nop
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ce40:	2201      	movs	r2, #1
 800ce42:	2100      	movs	r1, #0
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f7ff ffde 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 fcf3 	bl	800d836 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800ce50:	bf00      	nop
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800ce58:	b590      	push	{r4, r7, lr}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800ce64:	68b8      	ldr	r0, [r7, #8]
 800ce66:	f7fb fc65 	bl	8008734 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800ce6a:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800ce6c:	68b8      	ldr	r0, [r7, #8]
 800ce6e:	f7f9 fab8 	bl	80063e2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800ce72:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7f8 fa89 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d107      	bne.n	800ce94 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7f8 fa76 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d001      	beq.n	800ce98 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800ce94:	2301      	movs	r3, #1
 800ce96:	e000      	b.n	800ce9a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800ce98:	2300      	movs	r3, #0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d005      	beq.n	800ceaa <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	693a      	ldr	r2, [r7, #16]
 800cea2:	6979      	ldr	r1, [r7, #20]
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fb f97d 	bl	80081a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800ceaa:	68b8      	ldr	r0, [r7, #8]
 800ceac:	f000 fcd3 	bl	800d856 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	68b8      	ldr	r0, [r7, #8]
 800ceb4:	f000 fcdb 	bl	800d86e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	461a      	mov	r2, r3
 800cebc:	4621      	mov	r1, r4
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f000 fce1 	bl	800d886 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800cec4:	bf00      	nop
 800cec6:	371c      	adds	r7, #28
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd90      	pop	{r4, r7, pc}

0800cecc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800cecc:	b580      	push	{r7, lr}
 800cece:	b088      	sub	sp, #32
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800ced8:	68b8      	ldr	r0, [r7, #8]
 800ceda:	f7f9 fa90 	bl	80063fe <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800cede:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800cee0:	68b8      	ldr	r0, [r7, #8]
 800cee2:	f7fb fc35 	bl	8008750 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800cee6:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7f9 f999 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800cef0:	4602      	mov	r2, r0
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d107      	bne.n	800cf08 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7f9 f99c 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800cf00:	4602      	mov	r2, r0
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d001      	beq.n	800cf0c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e000      	b.n	800cf0e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d005      	beq.n	800cf1e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	69f9      	ldr	r1, [r7, #28]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f000 fcd3 	bl	800d8c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800cf1e:	2301      	movs	r3, #1
 800cf20:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800cf22:	68b8      	ldr	r0, [r7, #8]
 800cf24:	f000 fd00 	bl	800d928 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	f107 0310 	add.w	r3, r7, #16
 800cf2e:	4611      	mov	r1, r2
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 fd04 	bl	800d93e <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800cf36:	f107 0310 	add.w	r3, r7, #16
 800cf3a:	68f9      	ldr	r1, [r7, #12]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f000 fd13 	bl	800d968 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800cf42:	bf00      	nop
 800cf44:	3720      	adds	r7, #32
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b082      	sub	sp, #8
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fd47 	bl	800d9e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800cf58:	4603      	mov	r3, r0
    }
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b084      	sub	sp, #16
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	607a      	str	r2, [r7, #4]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	68b9      	ldr	r1, [r7, #8]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f000 fd58 	bl	800da2a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
    }
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	60f8      	str	r0, [r7, #12]
 800cfa2:	60b9      	str	r1, [r7, #8]
 800cfa4:	607a      	str	r2, [r7, #4]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fd6d 	bl	800da8c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
    }
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b082      	sub	sp, #8
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	f7f9 ff04 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	f7f9 fef9 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800cff4:	4603      	mov	r3, r0
 800cff6:	4618      	mov	r0, r3
 800cff8:	3708      	adds	r7, #8
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800cffe:	b580      	push	{r7, lr}
 800d000:	b082      	sub	sp, #8
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4618      	mov	r0, r3
 800d00a:	f7ff f8d8 	bl	800c1be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800d00e:	4603      	mov	r3, r0
    }
 800d010:	4618      	mov	r0, r3
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	4618      	mov	r0, r3
 800d028:	f000 fd61 	bl	800daee <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4618      	mov	r0, r3
 800d030:	3708      	adds	r7, #8
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d036:	b480      	push	{r7}
 800d038:	b083      	sub	sp, #12
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4618      	mov	r0, r3
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800d062:	b480      	push	{r7}
 800d064:	b083      	sub	sp, #12
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4618      	mov	r0, r3
 800d06e:	370c      	adds	r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4618      	mov	r0, r3
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d08e:	b580      	push	{r7, lr}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	60f8      	str	r0, [r7, #12]
 800d096:	60b9      	str	r1, [r7, #8]
 800d098:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d09a:	68b9      	ldr	r1, [r7, #8]
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f000 fd35 	bl	800db0c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d0a2:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800d0b0:	b5b0      	push	{r4, r5, r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7fe ff7b 	bl	800bfb6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	6838      	ldr	r0, [r7, #0]
 800d0c4:	f7f9 fade 	bl	8006684 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	f107 030c 	add.w	r3, r7, #12
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fa f8e7 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d0d4:	f107 030c 	add.w	r3, r7, #12
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4629      	mov	r1, r5
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 fd26 	bl	800db2e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7fe ff67 	bl	800bfb6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d0e8:	4603      	mov	r3, r0
    }
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bdb0      	pop	{r4, r5, r7, pc}

0800d0f2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800d0f2:	b480      	push	{r7}
 800d0f4:	b083      	sub	sp, #12
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	bf00      	nop
 800d0fc:	370c      	adds	r7, #12
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800d106:	b590      	push	{r4, r7, lr}
 800d108:	b087      	sub	sp, #28
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	60f8      	str	r0, [r7, #12]
 800d10e:	60b9      	str	r1, [r7, #8]
 800d110:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800d112:	68b8      	ldr	r0, [r7, #8]
 800d114:	f000 fd1c 	bl	800db50 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800d118:	4604      	mov	r4, r0
 800d11a:	f107 0310 	add.w	r3, r7, #16
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fa f8bf 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d124:	f107 0310 	add.w	r3, r7, #16
 800d128:	461a      	mov	r2, r3
 800d12a:	4621      	mov	r1, r4
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	f7fa f99f 	bl	8007470 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800d132:	68b8      	ldr	r0, [r7, #8]
 800d134:	f000 fd18 	bl	800db68 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800d138:	4604      	mov	r4, r0
 800d13a:	f107 0314 	add.w	r3, r7, #20
 800d13e:	4618      	mov	r0, r3
 800d140:	f000 fd1e 	bl	800db80 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800d144:	f107 0314 	add.w	r3, r7, #20
 800d148:	461a      	mov	r2, r3
 800d14a:	4621      	mov	r1, r4
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 fd22 	bl	800db96 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d152:	bf00      	nop
 800d154:	371c      	adds	r7, #28
 800d156:	46bd      	mov	sp, r7
 800d158:	bd90      	pop	{r4, r7, pc}
	...

0800d15c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	68b9      	ldr	r1, [r7, #8]
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 fd22 	bl	800dbb8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	db07      	blt.n	800d18a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7f8 f855 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d182:	4602      	mov	r2, r0
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4293      	cmp	r3, r2
 800d188:	db05      	blt.n	800d196 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800d18a:	4b05      	ldr	r3, [pc, #20]	; (800d1a0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800d18c:	4a05      	ldr	r2, [pc, #20]	; (800d1a4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800d18e:	2178      	movs	r1, #120	; 0x78
 800d190:	4805      	ldr	r0, [pc, #20]	; (800d1a8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800d192:	f010 ffb3 	bl	801e0fc <__assert_func>
    }
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	4618      	mov	r0, r3
 800d19a:	3710      	adds	r7, #16
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	08024ae8 	.word	0x08024ae8
 800d1a4:	08026110 	.word	0x08026110
 800d1a8:	08024c6c 	.word	0x08024c6c

0800d1ac <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr

0800d1c2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b082      	sub	sp, #8
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 fd05 	bl	800dbda <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3708      	adds	r7, #8
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b082      	sub	sp, #8
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7ff ffed 	bl	800d1c2 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b082      	sub	sp, #8
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
 800d1fa:	f7f9 fdec 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800d1fe:	4603      	mov	r3, r0
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	f7f9 fde9 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d214:	4603      	mov	r3, r0
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800d220:	b5b0      	push	{r4, r5, r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
 800d22c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f7ff ffd3 	bl	800d1da <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	4614      	mov	r4, r2
 800d23a:	461d      	mov	r5, r3
 800d23c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d23e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d240:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d244:	e884 0003 	stmia.w	r4, {r0, r1}
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f103 0218 	add.w	r2, r3, #24
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4614      	mov	r4, r2
 800d252:	461d      	mov	r5, r3
 800d254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d258:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d25c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	3330      	adds	r3, #48	; 0x30
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	4618      	mov	r0, r3
 800d268:	f7f8 fb16 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800d26c:	68b8      	ldr	r0, [r7, #8]
 800d26e:	f7fe fc7f 	bl	800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800d272:	4604      	mov	r4, r0
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4618      	mov	r0, r3
 800d278:	f7ff ffbb 	bl	800d1f2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800d27c:	4603      	mov	r3, r0
 800d27e:	429c      	cmp	r4, r3
 800d280:	d10a      	bne.n	800d298 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800d282:	68b8      	ldr	r0, [r7, #8]
 800d284:	f7fe fc81 	bl	800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d288:	4604      	mov	r4, r0
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7ff ffbb 	bl	800d208 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800d292:	4603      	mov	r3, r0
 800d294:	429c      	cmp	r4, r3
 800d296:	d005      	beq.n	800d2a4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800d298:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800d29a:	4a06      	ldr	r2, [pc, #24]	; (800d2b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800d29c:	2174      	movs	r1, #116	; 0x74
 800d29e:	4806      	ldr	r0, [pc, #24]	; (800d2b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800d2a0:	f010 ff2c 	bl	801e0fc <__assert_func>
    }
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bdb0      	pop	{r4, r5, r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	0801ff64 	.word	0x0801ff64
 800d2b4:	080261ec 	.word	0x080261ec
 800d2b8:	080201c8 	.word	0x080201c8

0800d2bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f809 	bl	800d2dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 fc8f 	bl	800dbf0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	370c      	adds	r7, #12
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe fc37 	bl	800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800d302:	4603      	mov	r3, r0
    }
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fc92 	bl	800dc3e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff ffec 	bl	800d30c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4618      	mov	r0, r3
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800d33e:	b580      	push	{r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff ffeb 	bl	800d324 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4618      	mov	r0, r3
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff ffeb 	bl	800d33e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4618      	mov	r0, r3
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}

0800d372 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800d372:	b580      	push	{r7, lr}
 800d374:	b082      	sub	sp, #8
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	330c      	adds	r3, #12
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff ffea 	bl	800d358 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	3304      	adds	r3, #4
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fe fce7 	bl	800bd5c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4618      	mov	r0, r3
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7ff ffe5 	bl	800d372 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 fc3d 	bl	800dc28 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7ff ffe8 	bl	800d398 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b082      	sub	sp, #8
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff ffeb 	bl	800d3b8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	ed2d 8b02 	vpush	{d8}
 800d3f2:	b088      	sub	sp, #32
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff f938 	bl	800c670 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	dd05      	ble.n	800d412 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f7ff ff58 	bl	800d2bc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	dc06      	bgt.n	800d420 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800d412:	4b16      	ldr	r3, [pc, #88]	; (800d46c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800d414:	4a16      	ldr	r2, [pc, #88]	; (800d470 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800d416:	f240 119b 	movw	r1, #411	; 0x19b
 800d41a:	4816      	ldr	r0, [pc, #88]	; (800d474 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800d41c:	f010 fe6e 	bl	801e0fc <__assert_func>
 800d420:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff ff5a 	bl	800d2dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d428:	4602      	mov	r2, r0
 800d42a:	f107 030c 	add.w	r3, r7, #12
 800d42e:	4611      	mov	r1, r2
 800d430:	4618      	mov	r0, r3
 800d432:	f000 fbea 	bl	800dc0a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7ff ff50 	bl	800d2dc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800d43c:	4602      	mov	r2, r0
 800d43e:	f107 030c 	add.w	r3, r7, #12
 800d442:	6839      	ldr	r1, [r7, #0]
 800d444:	4618      	mov	r0, r3
 800d446:	f000 fc05 	bl	800dc54 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800d44a:	eeb0 8a40 	vmov.f32	s16, s0
 800d44e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800d450:	f107 030c 	add.w	r3, r7, #12
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff ffbc 	bl	800d3d2 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800d45a:	eef0 7a48 	vmov.f32	s15, s16
}
 800d45e:	eeb0 0a67 	vmov.f32	s0, s15
 800d462:	3720      	adds	r7, #32
 800d464:	46bd      	mov	sp, r7
 800d466:	ecbd 8b02 	vpop	{d8}
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	08024fe4 	.word	0x08024fe4
 800d470:	08026434 	.word	0x08026434
 800d474:	080251f0 	.word	0x080251f0

0800d478 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d480:	2202      	movs	r2, #2
 800d482:	2101      	movs	r1, #1
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7fd facf 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fbf3 	bl	800dc76 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b084      	sub	sp, #16
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	60f8      	str	r0, [r7, #12]
 800d4ce:	60b9      	str	r1, [r7, #8]
 800d4d0:	607a      	str	r2, [r7, #4]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	68b9      	ldr	r1, [r7, #8]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f000 fbe8 	bl	800dcae <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
    }
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	370c      	adds	r7, #12
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b084      	sub	sp, #16
 800d502:	af00      	add	r7, sp, #0
 800d504:	60f8      	str	r0, [r7, #12]
 800d506:	60b9      	str	r1, [r7, #8]
 800d508:	607a      	str	r2, [r7, #4]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	68b9      	ldr	r1, [r7, #8]
 800d510:	4618      	mov	r0, r3
 800d512:	f000 fbf7 	bl	800dd04 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4618      	mov	r0, r3
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
    }
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4618      	mov	r0, r3
 800d52c:	370c      	adds	r7, #12
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800d536:	b580      	push	{r7, lr}
 800d538:	b082      	sub	sp, #8
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	f7f9 fc52 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d542:	4603      	mov	r3, r0
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	f7f9 fc47 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800d558:	4603      	mov	r3, r0
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d562:	b580      	push	{r7, lr}
 800d564:	b082      	sub	sp, #8
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	3304      	adds	r3, #4
 800d56e:	4618      	mov	r0, r3
 800d570:	f7ff f991 	bl	800c896 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800d574:	4603      	mov	r3, r0
    }
 800d576:	4618      	mov	r0, r3
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d57e:	b580      	push	{r7, lr}
 800d580:	b082      	sub	sp, #8
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	6039      	str	r1, [r7, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6839      	ldr	r1, [r7, #0]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 fbeb 	bl	800dd68 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800d5b2:	b480      	push	{r7}
 800d5b4:	b083      	sub	sp, #12
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800d5de:	b480      	push	{r7}
 800d5e0:	b083      	sub	sp, #12
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	370c      	adds	r7, #12
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr

0800d5f4 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d600:	68b9      	ldr	r1, [r7, #8]
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f000 fbbf 	bl	800dd86 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800d608:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d60c:	eeb0 0a67 	vmov.f32	s0, s15
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d61e:	2200      	movs	r2, #0
 800d620:	2102      	movs	r1, #2
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7fc ff39 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 fbbd 	bl	800dda8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800d62e:	bf00      	nop
 800d630:	3708      	adds	r7, #8
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800d636:	b5b0      	push	{r4, r5, r7, lr}
 800d638:	b084      	sub	sp, #16
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	60f8      	str	r0, [r7, #12]
 800d63e:	60b9      	str	r1, [r7, #8]
 800d640:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d642:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	4618      	mov	r0, r3
 800d648:	f7fa ff34 	bl	80084b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d64c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d64e:	68b8      	ldr	r0, [r7, #8]
 800d650:	f000 fbba 	bl	800ddc8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d654:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	fb02 f303 	mul.w	r3, r2, r3
 800d65c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d65e:	441d      	add	r5, r3
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	4618      	mov	r0, r3
 800d664:	f7f7 fde2 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d668:	4603      	mov	r3, r0
 800d66a:	2201      	movs	r2, #1
 800d66c:	4629      	mov	r1, r5
 800d66e:	4620      	mov	r0, r4
 800d670:	f000 fbc2 	bl	800ddf8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	68ba      	ldr	r2, [r7, #8]
 800d678:	609a      	str	r2, [r3, #8]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	330c      	adds	r3, #12
 800d67e:	6879      	ldr	r1, [r7, #4]
 800d680:	4618      	mov	r0, r3
 800d682:	f000 fbf7 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	3310      	adds	r3, #16
 800d68a:	2100      	movs	r1, #0
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 fbf1 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f000 fbfd 	bl	800de92 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bdb0      	pop	{r4, r5, r7, pc}

0800d6a2 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d6a2:	b5b0      	push	{r4, r5, r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	60f8      	str	r0, [r7, #12]
 800d6aa:	60b9      	str	r1, [r7, #8]
 800d6ac:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d6ae:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7f9 fe9d 	bl	80073f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800d6b8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d6ba:	68b8      	ldr	r0, [r7, #8]
 800d6bc:	f7f9 ff6a 	bl	8007594 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d6c0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	fb02 f303 	mul.w	r3, r2, r3
 800d6c8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d6ca:	441d      	add	r5, r3
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7f7 fe5d 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	4629      	mov	r1, r5
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f000 fc00 	bl	800dee0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	609a      	str	r2, [r3, #8]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	330c      	adds	r3, #12
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f000 fbc1 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	3310      	adds	r3, #16
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 fc2f 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f000 fc46 	bl	800df90 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bdb0      	pop	{r4, r5, r7, pc}

0800d70e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d70e:	b580      	push	{r7, lr}
 800d710:	b082      	sub	sp, #8
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	4618      	mov	r0, r3
 800d71e:	f000 fc47 	bl	800dfb0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fc4b 	bl	800dfd4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800d73e:	eef0 7a40 	vmov.f32	s15, s0
 800d742:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d746:	6839      	ldr	r1, [r7, #0]
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 fc54 	bl	800dff6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800d74e:	eef0 7a40 	vmov.f32	s15, s0
 800d752:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d756:	f107 020c 	add.w	r2, r7, #12
 800d75a:	f107 0308 	add.w	r3, r7, #8
 800d75e:	4619      	mov	r1, r3
 800d760:	6838      	ldr	r0, [r7, #0]
 800d762:	f7fb fefe 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d766:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d76a:	eeb0 0a67 	vmov.f32	s0, s15
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fc5c 	bl	800e03e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d786:	bf00      	nop
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800d78e:	b590      	push	{r4, r7, lr}
 800d790:	b083      	sub	sp, #12
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	6039      	str	r1, [r7, #0]
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 fc7d 	bl	800e098 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800d79e:	687c      	ldr	r4, [r7, #4]
 800d7a0:	6838      	ldr	r0, [r7, #0]
 800d7a2:	f000 fc6d 	bl	800e080 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	f7fa f9e0 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd90      	pop	{r4, r7, pc}

0800d7ba <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800d7ba:	b480      	push	{r7}
 800d7bc:	b083      	sub	sp, #12
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	6039      	str	r1, [r7, #0]
      : inner;
 800d7c4:	687b      	ldr	r3, [r7, #4]
  }
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	370c      	adds	r7, #12
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800d7d2:	b480      	push	{r7}
 800d7d4:	b083      	sub	sp, #12
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
      : outer;
 800d7dc:	683b      	ldr	r3, [r7, #0]
  }
 800d7de:	4618      	mov	r0, r3
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800d7ea:	b5b0      	push	{r4, r5, r7, lr}
 800d7ec:	b086      	sub	sp, #24
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	60f8      	str	r0, [r7, #12]
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	689c      	ldr	r4, [r3, #8]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	68b9      	ldr	r1, [r7, #8]
 800d802:	4618      	mov	r0, r3
 800d804:	f000 fc53 	bl	800e0ae <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800d808:	4605      	mov	r5, r0
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	68b9      	ldr	r1, [r7, #8]
 800d812:	4618      	mov	r0, r3
 800d814:	f000 fc63 	bl	800e0de <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800d818:	eef0 7a40 	vmov.f32	s15, s0
 800d81c:	edc7 7a05 	vstr	s15, [r7, #20]
 800d820:	f107 0314 	add.w	r3, r7, #20
 800d824:	461a      	mov	r2, r3
 800d826:	4629      	mov	r1, r5
 800d828:	4620      	mov	r0, r4
 800d82a:	f7fb f8a9 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800d82e:	bf00      	nop
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bdb0      	pop	{r4, r5, r7, pc}

0800d836 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d83e:	2202      	movs	r2, #2
 800d840:	2100      	movs	r1, #0
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff fadf 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fc7b 	bl	800e144 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800d84e:	bf00      	nop
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800d856:	b480      	push	{r7}
 800d858:	b083      	sub	sp, #12
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4618      	mov	r0, r3
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800d86e:	b480      	push	{r7}
 800d870:	b083      	sub	sp, #12
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	3304      	adds	r3, #4
 800d87a:	4618      	mov	r0, r3
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800d886:	b580      	push	{r7, lr}
 800d888:	b088      	sub	sp, #32
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	60f8      	str	r0, [r7, #12]
 800d88e:	60b9      	str	r1, [r7, #8]
 800d890:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800d892:	f107 0314 	add.w	r3, r7, #20
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	68b9      	ldr	r1, [r7, #8]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 fc62 	bl	800e164 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800d8a0:	f107 031c 	add.w	r3, r7, #28
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7f9 fcfc 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d8aa:	f107 021c 	add.w	r2, r7, #28
 800d8ae:	f107 0314 	add.w	r3, r7, #20
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	68f8      	ldr	r0, [r7, #12]
 800d8b6:	f000 fc6c 	bl	800e192 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d8ba:	bf00      	nop
 800d8bc:	3720      	adds	r7, #32
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
	...

0800d8c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d108      	bne.n	800d8e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d105      	bne.n	800d8e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	db02      	blt.n	800d8e8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	da06      	bge.n	800d8f6 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800d8e8:	4b0c      	ldr	r3, [pc, #48]	; (800d91c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800d8ea:	4a0d      	ldr	r2, [pc, #52]	; (800d920 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800d8ec:	f240 1111 	movw	r1, #273	; 0x111
 800d8f0:	480c      	ldr	r0, [pc, #48]	; (800d924 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800d8f2:	f010 fc03 	bl	801e0fc <__assert_func>
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	617b      	str	r3, [r7, #20]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	613b      	str	r3, [r7, #16]
  }
 800d8fe:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	fb02 f103 	mul.w	r1, r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	f000 fc51 	bl	800e1b4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800d912:	bf00      	nop
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	080229f4 	.word	0x080229f4
 800d920:	080265fc 	.word	0x080265fc
 800d924:	08022c10 	.word	0x08022c10

0800d928 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4618      	mov	r0, r3
 800d934:	370c      	adds	r7, #12
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr

0800d93e <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800d93e:	b580      	push	{r7, lr}
 800d940:	b082      	sub	sp, #8
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	6039      	str	r1, [r7, #0]
    {
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7f7 fb9a 	bl	8005084 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800d950:	f7f7 fba8 	bl	80050a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6839      	ldr	r1, [r7, #0]
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 fc38 	bl	800e1ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800d968:	b580      	push	{r7, lr}
 800d96a:	ed2d 8b02 	vpush	{d8}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d976:	f107 030c 	add.w	r3, r7, #12
 800d97a:	6879      	ldr	r1, [r7, #4]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fc ff50 	bl	800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800d982:	f107 030c 	add.w	r3, r7, #12
 800d986:	2200      	movs	r2, #0
 800d988:	2100      	movs	r1, #0
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 fc2c 	bl	800e1e8 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800d990:	4603      	mov	r3, r0
 800d992:	ed93 8a00 	vldr	s16, [r3]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2200      	movs	r2, #0
 800d99a:	2100      	movs	r1, #0
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7f9 f968 	bl	8006c72 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9a8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800d9ac:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800d9b0:	f107 030c 	add.w	r3, r7, #12
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fb fe1b 	bl	80095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800d9ba:	bf00      	nop
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	ecbd 8b02 	vpop	{d8}
 800d9c4:	bd80      	pop	{r7, pc}

0800d9c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b082      	sub	sp, #8
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7f8 fbe9 	bl	80061a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7f8 fc23 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800d9e6:	b590      	push	{r4, r7, lr}
 800d9e8:	b083      	sub	sp, #12
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f7ff ffe9 	bl	800d9c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 f807 	bl	800da0a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	fb04 f303 	mul.w	r3, r4, r3
 800da02:	4618      	mov	r0, r3
 800da04:	370c      	adds	r7, #12
 800da06:	46bd      	mov	sp, r7
 800da08:	bd90      	pop	{r4, r7, pc}

0800da0a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b082      	sub	sp, #8
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7f8 fbc7 	bl	80061a6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800da18:	4603      	mov	r3, r0
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7f8 fc0c 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800da20:	4603      	mov	r3, r0
 800da22:	4618      	mov	r0, r3
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800da2a:	b5b0      	push	{r4, r5, r7, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	af00      	add	r7, sp, #0
 800da30:	60f8      	str	r0, [r7, #12]
 800da32:	60b9      	str	r1, [r7, #8]
 800da34:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800da36:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7f9 fcd9 	bl	80073f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800da40:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800da42:	68b8      	ldr	r0, [r7, #8]
 800da44:	f000 fa35 	bl	800deb2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800da48:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	fb02 f303 	mul.w	r3, r2, r3
 800da50:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800da52:	18e9      	adds	r1, r5, r3
 800da54:	2301      	movs	r3, #1
 800da56:	2201      	movs	r2, #1
 800da58:	4620      	mov	r0, r4
 800da5a:	f000 fbe9 	bl	800e230 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	609a      	str	r2, [r3, #8]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	330c      	adds	r3, #12
 800da68:	6879      	ldr	r1, [r7, #4]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 fa02 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	3310      	adds	r3, #16
 800da74:	2100      	movs	r1, #0
 800da76:	4618      	mov	r0, r3
 800da78:	f000 fa70 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 fc15 	bl	800e2ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bdb0      	pop	{r4, r5, r7, pc}

0800da8c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800da8c:	b5b0      	push	{r4, r5, r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800da98:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fd fd27 	bl	800b4f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800daa2:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800daa4:	68b8      	ldr	r0, [r7, #8]
 800daa6:	f000 fc11 	bl	800e2cc <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800daaa:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	fb02 f303 	mul.w	r3, r2, r3
 800dab2:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800dab4:	18e9      	adds	r1, r5, r3
 800dab6:	2301      	movs	r3, #1
 800dab8:	2201      	movs	r2, #1
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 fc1e 	bl	800e2fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	609a      	str	r2, [r3, #8]
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	330c      	adds	r3, #12
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	4618      	mov	r0, r3
 800dace:	f000 fa45 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	330d      	adds	r3, #13
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 fa3f 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f000 fc4a 	bl	800e378 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bdb0      	pop	{r4, r5, r7, pc}

0800daee <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800daee:	b580      	push	{r7, lr}
 800daf0:	b082      	sub	sp, #8
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	4618      	mov	r0, r3
 800dafe:	f000 fc4b 	bl	800e398 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4618      	mov	r0, r3
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800db16:	2200      	movs	r2, #0
 800db18:	2100      	movs	r1, #0
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 fc4e 	bl	800e3bc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800db20:	eef0 7a40 	vmov.f32	s15, s0
  }
 800db24:	eeb0 0a67 	vmov.f32	s0, s15
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800db2e:	b580      	push	{r7, lr}
 800db30:	b086      	sub	sp, #24
 800db32:	af00      	add	r7, sp, #0
 800db34:	60f8      	str	r0, [r7, #12]
 800db36:	60b9      	str	r1, [r7, #8]
 800db38:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	68b9      	ldr	r1, [r7, #8]
 800db42:	6978      	ldr	r0, [r7, #20]
 800db44:	f000 fc4d 	bl	800e3e2 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800db48:	bf00      	nop
 800db4a:	3718      	adds	r7, #24
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4618      	mov	r0, r3
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	3304      	adds	r3, #4
 800db74:	4618      	mov	r0, r3
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	4618      	mov	r0, r3
 800db8c:	370c      	adds	r7, #12
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800db96:	b580      	push	{r7, lr}
 800db98:	b086      	sub	sp, #24
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	60f8      	str	r0, [r7, #12]
 800db9e:	60b9      	str	r1, [r7, #8]
 800dba0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	68b9      	ldr	r1, [r7, #8]
 800dbaa:	6978      	ldr	r0, [r7, #20]
 800dbac:	f000 fc44 	bl	800e438 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800dbb0:	bf00      	nop
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	68b9      	ldr	r1, [r7, #8]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f000 fc6e 	bl	800e4ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800dbda:	b480      	push	{r7}
 800dbdc:	b083      	sub	sp, #12
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
    }
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fd ffc5 	bl	800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800dc00:	4603      	mov	r3, r0
    }
 800dc02:	4618      	mov	r0, r3
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b082      	sub	sp, #8
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 fc7d 	bl	800e518 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4618      	mov	r0, r3
 800dc34:	370c      	adds	r7, #12
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800dc3e:	b480      	push	{r7}
 800dc40:	b083      	sub	sp, #12
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800dc60:	68b9      	ldr	r1, [r7, #8]
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f000 fc67 	bl	800e536 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800dc68:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dc6c:	eeb0 0a67 	vmov.f32	s0, s15
 800dc70:	3710      	adds	r7, #16
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b082      	sub	sp, #8
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dc7e:	2200      	movs	r2, #0
 800dc80:	2102      	movs	r1, #2
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7fc fed0 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 fc78 	bl	800e57e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800dc8e:	bf00      	nop
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b082      	sub	sp, #8
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 fc7d 	bl	800e59e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b084      	sub	sp, #16
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	60f8      	str	r0, [r7, #12]
 800dcb6:	60b9      	str	r1, [r7, #8]
 800dcb8:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f7ff ffeb 	bl	800dc96 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68b9      	ldr	r1, [r7, #8]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7f6 fe79 	bl	80049bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	3310      	adds	r3, #16
 800dcce:	6879      	ldr	r1, [r7, #4]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f000 f8cf 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	3314      	adds	r3, #20
 800dcda:	2100      	movs	r1, #0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 f93d 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	3315      	adds	r3, #21
 800dce6:	2101      	movs	r1, #1
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7f9 f84f 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3316      	adds	r3, #22
 800dcf2:	2101      	movs	r1, #1
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7f9 f849 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800dd04:	b5b0      	push	{r4, r5, r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800dd10:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800dd12:	68b8      	ldr	r0, [r7, #8]
 800dd14:	f000 fc4e 	bl	800e5b4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800dd18:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800dd1a:	68b8      	ldr	r0, [r7, #8]
 800dd1c:	f000 fc5e 	bl	800e5dc <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800dd20:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	fb02 f303 	mul.w	r3, r2, r3
 800dd28:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800dd2a:	18e9      	adds	r1, r5, r3
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	2201      	movs	r2, #1
 800dd30:	4620      	mov	r0, r4
 800dd32:	f000 fc87 	bl	800e644 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3308      	adds	r3, #8
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	6812      	ldr	r2, [r2, #0]
 800dd3e:	601a      	str	r2, [r3, #0]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	330c      	adds	r3, #12
 800dd44:	2100      	movs	r1, #0
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 f908 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	3310      	adds	r3, #16
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 f88e 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f000 fcb1 	bl	800e6c0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bdb0      	pop	{r4, r5, r7, pc}

0800dd68 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 fcb2 	bl	800e6e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b082      	sub	sp, #8
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dd90:	2200      	movs	r2, #0
 800dd92:	2100      	movs	r1, #0
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fcb5 	bl	800e704 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800dd9a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dd9e:	eeb0 0a67 	vmov.f32	s0, s15
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	2102      	movs	r1, #2
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7fc fb70 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fcb5 	bl	800e72a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800ddc0:	bf00      	nop
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 fcaf 	bl	800e74a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
	...

0800ddf8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
 800de04:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7ff ffe9 	bl	800ddde <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	68ba      	ldr	r2, [r7, #8]
 800de10:	601a      	str	r2, [r3, #0]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3304      	adds	r3, #4
 800de16:	6879      	ldr	r1, [r7, #4]
 800de18:	4618      	mov	r0, r3
 800de1a:	f7f8 ffb7 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3305      	adds	r3, #5
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	4618      	mov	r0, r3
 800de26:	f7f8 ff97 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d011      	beq.n	800de54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	db08      	blt.n	800de48 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d105      	bne.n	800de48 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	db02      	blt.n	800de48 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	2b03      	cmp	r3, #3
 800de46:	d005      	beq.n	800de54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800de48:	4b07      	ldr	r3, [pc, #28]	; (800de68 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800de4a:	4a08      	ldr	r2, [pc, #32]	; (800de6c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800de4c:	21b0      	movs	r1, #176	; 0xb0
 800de4e:	4808      	ldr	r0, [pc, #32]	; (800de70 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800de50:	f010 f954 	bl	801e0fc <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800de54:	2100      	movs	r1, #0
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f000 fc82 	bl	800e760 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4618      	mov	r0, r3
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	08026688 	.word	0x08026688
 800de6c:	08026734 	.word	0x08026734
 800de70:	08026838 	.word	0x08026838

0800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	601a      	str	r2, [r3, #0]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4618      	mov	r0, r3
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff ff92 	bl	800ddc8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800dea4:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	615a      	str	r2, [r3, #20]
    }
 800deaa:	bf00      	nop
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800deb2:	b480      	push	{r7}
 800deb4:	b083      	sub	sp, #12
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
 800deba:	2301      	movs	r3, #1
 800debc:	4618      	mov	r0, r3
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 fc50 	bl	800e776 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4618      	mov	r0, r3
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f7ff ffea 	bl	800dec8 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3304      	adds	r3, #4
 800defe:	6879      	ldr	r1, [r7, #4]
 800df00:	4618      	mov	r0, r3
 800df02:	f7f8 ff29 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3305      	adds	r3, #5
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7f8 ff3d 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d011      	beq.n	800df3c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	db08      	blt.n	800df30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2b03      	cmp	r3, #3
 800df22:	d105      	bne.n	800df30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	db02      	blt.n	800df30 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d005      	beq.n	800df3c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800df30:	4b07      	ldr	r3, [pc, #28]	; (800df50 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800df32:	4a08      	ldr	r2, [pc, #32]	; (800df54 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800df34:	21b0      	movs	r1, #176	; 0xb0
 800df36:	4808      	ldr	r0, [pc, #32]	; (800df58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800df38:	f010 f8e0 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 800df3c:	2100      	movs	r1, #0
 800df3e:	68f8      	ldr	r0, [r7, #12]
 800df40:	f000 fc24 	bl	800e78c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	08026688 	.word	0x08026688
 800df54:	0802688c 	.word	0x0802688c
 800df58:	08026838 	.word	0x08026838

0800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800df6c:	4b05      	ldr	r3, [pc, #20]	; (800df84 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800df6e:	4a06      	ldr	r2, [pc, #24]	; (800df88 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800df70:	2185      	movs	r1, #133	; 0x85
 800df72:	4806      	ldr	r0, [pc, #24]	; (800df8c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800df74:	f010 f8c2 	bl	801e0fc <__assert_func>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	080224a0 	.word	0x080224a0
 800df88:	08026990 	.word	0x08026990
 800df8c:	08022518 	.word	0x08022518

0800df90 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7f9 faf9 	bl	8007594 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800dfa2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	615a      	str	r2, [r3, #20]
    }
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fbf1 	bl	800e7a2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6839      	ldr	r1, [r7, #0]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 fbf7 	bl	800e7b8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3708      	adds	r7, #8
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fc10 	bl	800e808 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800dfe8:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dfec:	eeb0 0a67 	vmov.f32	s0, s15
 800dff0:	3708      	adds	r7, #8
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b084      	sub	sp, #16
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
 800dffe:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fc13 	bl	800e82e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800e008:	eef0 7a40 	vmov.f32	s15, s0
 800e00c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e010:	6839      	ldr	r1, [r7, #0]
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 fc1c 	bl	800e850 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800e018:	eef0 7a40 	vmov.f32	s15, s0
 800e01c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e020:	f107 020c 	add.w	r2, r7, #12
 800e024:	f107 0308 	add.w	r3, r7, #8
 800e028:	4619      	mov	r1, r3
 800e02a:	6838      	ldr	r0, [r7, #0]
 800e02c:	f7fb fa99 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e030:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e034:	eeb0 0a67 	vmov.f32	s0, s15
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800e03e:	b5b0      	push	{r4, r5, r7, lr}
 800e040:	b084      	sub	sp, #16
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
 800e046:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f7f7 fdcd 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800e04e:	4604      	mov	r4, r0
 800e050:	6838      	ldr	r0, [r7, #0]
 800e052:	f7f7 fdfc 	bl	8005c4e <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800e056:	4605      	mov	r5, r0
 800e058:	f107 030c 	add.w	r3, r7, #12
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7f9 f920 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e062:	f107 030c 	add.w	r3, r7, #12
 800e066:	461a      	mov	r2, r3
 800e068:	4629      	mov	r1, r5
 800e06a:	4620      	mov	r0, r4
 800e06c:	f000 fc01 	bl	800e872 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7f7 fdb9 	bl	8005be8 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800e076:	4603      	mov	r3, r0
    }
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bdb0      	pop	{r4, r5, r7, pc}

0800e080 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4618      	mov	r0, r3
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	370c      	adds	r7, #12
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800e0ae:	b590      	push	{r4, r7, lr}
 800e0b0:	b085      	sub	sp, #20
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	60f8      	str	r0, [r7, #12]
 800e0b6:	60b9      	str	r1, [r7, #8]
 800e0b8:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681c      	ldr	r4, [r3, #0]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7fb fa08 	bl	80094d6 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	fb03 f202 	mul.w	r2, r3, r2
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4423      	add	r3, r4
  }
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3714      	adds	r7, #20
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd90      	pop	{r4, r7, pc}

0800e0de <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b0a4      	sub	sp, #144	; 0x90
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	60f8      	str	r0, [r7, #12]
 800e0e6:	60b9      	str	r1, [r7, #8]
 800e0e8:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800e0ea:	68f9      	ldr	r1, [r7, #12]
 800e0ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e0f0:	68ba      	ldr	r2, [r7, #8]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fd f844 	bl	800b180 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800e0f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e0fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e100:	4611      	mov	r1, r2
 800e102:	4618      	mov	r0, r3
 800e104:	f7fd f84f 	bl	800b1a6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e10e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	4618      	mov	r0, r3
 800e116:	f000 fbbd 	bl	800e894 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800e11a:	f107 0314 	add.w	r3, r7, #20
 800e11e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800e122:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800e126:	4618      	mov	r0, r3
 800e128:	f000 fbc7 	bl	800e8ba <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800e12c:	f107 0314 	add.w	r3, r7, #20
 800e130:	4618      	mov	r0, r3
 800e132:	f000 fbf0 	bl	800e916 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800e136:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e13a:	eeb0 0a67 	vmov.f32	s0, s15
 800e13e:	3790      	adds	r7, #144	; 0x90
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e14c:	2200      	movs	r2, #0
 800e14e:	2101      	movs	r1, #1
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7fe fe58 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fbf8 	bl	800e94c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800e164:	b590      	push	{r4, r7, lr}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800e170:	68b8      	ldr	r0, [r7, #8]
 800e172:	f7f7 fc70 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800e176:	4604      	mov	r4, r0
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7f7 fed1 	bl	8005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800e17e:	4603      	mov	r3, r0
 800e180:	461a      	mov	r2, r3
 800e182:	4621      	mov	r1, r4
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f000 fc15 	bl	800e9b4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	3714      	adds	r7, #20
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd90      	pop	{r4, r7, pc}

0800e192 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e192:	b580      	push	{r7, lr}
 800e194:	b086      	sub	sp, #24
 800e196:	af00      	add	r7, sp, #0
 800e198:	60f8      	str	r0, [r7, #12]
 800e19a:	60b9      	str	r1, [r7, #8]
 800e19c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	68b9      	ldr	r1, [r7, #8]
 800e1a6:	6978      	ldr	r0, [r7, #20]
 800e1a8:	f000 fc32 	bl	800ea10 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800e1ac:	bf00      	nop
 800e1ae:	3718      	adds	r7, #24
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
 800e1c0:	603b      	str	r3, [r7, #0]
 800e1c2:	bf00      	nop
 800e1c4:	3714      	adds	r7, #20
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr

0800e1ce <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b082      	sub	sp, #8
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
 800e1d6:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fc2b 	bl	800ea36 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e1e8:	b590      	push	{r4, r7, lr}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681c      	ldr	r4, [r3, #0]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7f9 f846 	bl	800728c <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800e200:	4602      	mov	r2, r0
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	fb03 f202 	mul.w	r2, r3, r2
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	4413      	add	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4423      	add	r3, r4
  }
 800e210:	4618      	mov	r0, r3
 800e212:	3714      	adds	r7, #20
 800e214:	46bd      	mov	sp, r7
 800e216:	bd90      	pop	{r4, r7, pc}

0800e218 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fc29 	bl	800ea78 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	4618      	mov	r0, r3
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
 800e23c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7ff ffea 	bl	800e218 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	601a      	str	r2, [r3, #0]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	3304      	adds	r3, #4
 800e24e:	6879      	ldr	r1, [r7, #4]
 800e250:	4618      	mov	r0, r3
 800e252:	f7f8 fd9b 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	3305      	adds	r3, #5
 800e25a:	6839      	ldr	r1, [r7, #0]
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7f8 fd95 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d011      	beq.n	800e28c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	db08      	blt.n	800e280 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d105      	bne.n	800e280 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	db02      	blt.n	800e280 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d005      	beq.n	800e28c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e280:	4b07      	ldr	r3, [pc, #28]	; (800e2a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e282:	4a08      	ldr	r2, [pc, #32]	; (800e2a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e284:	21b0      	movs	r1, #176	; 0xb0
 800e286:	4808      	ldr	r0, [pc, #32]	; (800e2a8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e288:	f00f ff38 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 800e28c:	2100      	movs	r1, #0
 800e28e:	68f8      	ldr	r0, [r7, #12]
 800e290:	f000 fbfd 	bl	800ea8e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	08026688 	.word	0x08026688
 800e2a4:	080269f8 	.word	0x080269f8
 800e2a8:	08026838 	.word	0x08026838

0800e2ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7f9 f96b 	bl	8007594 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e2be:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	615a      	str	r2, [r3, #20]
    }
 800e2c4:	bf00      	nop
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	370c      	adds	r7, #12
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 fbda 	bl	800eaa4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3708      	adds	r7, #8
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
	...

0800e2fc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	607a      	str	r2, [r7, #4]
 800e308:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f7ff ffe9 	bl	800e2e2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	601a      	str	r2, [r3, #0]
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	3304      	adds	r3, #4
 800e31a:	6879      	ldr	r1, [r7, #4]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7f8 fd35 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	3305      	adds	r3, #5
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	4618      	mov	r0, r3
 800e32a:	f7f8 fd2f 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d011      	beq.n	800e358 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	db08      	blt.n	800e34c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d105      	bne.n	800e34c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	db02      	blt.n	800e34c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d005      	beq.n	800e358 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e34c:	4b07      	ldr	r3, [pc, #28]	; (800e36c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e34e:	4a08      	ldr	r2, [pc, #32]	; (800e370 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e350:	21b0      	movs	r1, #176	; 0xb0
 800e352:	4808      	ldr	r0, [pc, #32]	; (800e374 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e354:	f00f fed2 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 800e358:	2100      	movs	r1, #0
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f000 fbad 	bl	800eaba <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	08026688 	.word	0x08026688
 800e370:	08026afc 	.word	0x08026afc
 800e374:	08026838 	.word	0x08026838

0800e378 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	4618      	mov	r0, r3
 800e386:	f7fd fe3d 	bl	800c004 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800e38a:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	611a      	str	r2, [r3, #16]
    }
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fb94 	bl	800ead0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6839      	ldr	r1, [r7, #0]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f000 fb9a 	bl	800eae6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	68b9      	ldr	r1, [r7, #8]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 fbb1 	bl	800eb36 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e3d4:	eef0 7a40 	vmov.f32	s15, s0
 800e3d8:	eeb0 0a67 	vmov.f32	s0, s15
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800e3e2:	b590      	push	{r4, r7, lr}
 800e3e4:	b087      	sub	sp, #28
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	60f8      	str	r0, [r7, #12]
 800e3ea:	60b9      	str	r1, [r7, #8]
 800e3ec:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800e3ee:	68b8      	ldr	r0, [r7, #8]
 800e3f0:	f000 fbd1 	bl	800eb96 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	f107 0310 	add.w	r3, r7, #16
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7f8 ff51 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800e400:	f107 0310 	add.w	r3, r7, #16
 800e404:	461a      	mov	r2, r3
 800e406:	4621      	mov	r1, r4
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f000 fbd0 	bl	800ebae <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800e40e:	68b8      	ldr	r0, [r7, #8]
 800e410:	f000 fbde 	bl	800ebd0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800e414:	4604      	mov	r4, r0
 800e416:	f107 0314 	add.w	r3, r7, #20
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7ff fbb0 	bl	800db80 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e420:	f107 0314 	add.w	r3, r7, #20
 800e424:	461a      	mov	r2, r3
 800e426:	4621      	mov	r1, r4
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f000 fbdd 	bl	800ebe8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e42e:	bf00      	nop
 800e430:	371c      	adds	r7, #28
 800e432:	46bd      	mov	sp, r7
 800e434:	bd90      	pop	{r4, r7, pc}
	...

0800e438 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800e438:	b590      	push	{r4, r7, lr}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	4618      	mov	r0, r3
 800e448:	f7f6 fefb 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e44c:	4604      	mov	r4, r0
 800e44e:	68b8      	ldr	r0, [r7, #8]
 800e450:	f7f8 fa95 	bl	800697e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800e454:	4603      	mov	r3, r0
 800e456:	429c      	cmp	r4, r3
 800e458:	d10a      	bne.n	800e470 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7f6 fee5 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e462:	4604      	mov	r4, r0
 800e464:	68b8      	ldr	r0, [r7, #8]
 800e466:	f7f8 fa98 	bl	800699a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800e46a:	4603      	mov	r3, r0
 800e46c:	429c      	cmp	r4, r3
 800e46e:	d005      	beq.n	800e47c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800e470:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800e472:	4a0c      	ldr	r2, [pc, #48]	; (800e4a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800e474:	21b0      	movs	r1, #176	; 0xb0
 800e476:	480c      	ldr	r0, [pc, #48]	; (800e4a8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800e478:	f00f fe40 	bl	801e0fc <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800e47c:	68b8      	ldr	r0, [r7, #8]
 800e47e:	f000 fbc4 	bl	800ec0a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800e482:	4604      	mov	r4, r0
 800e484:	68b8      	ldr	r0, [r7, #8]
 800e486:	f000 fbcc 	bl	800ec22 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800e48a:	4603      	mov	r3, r0
 800e48c:	461a      	mov	r2, r3
 800e48e:	4621      	mov	r1, r4
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	f000 fbd2 	bl	800ec3a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800e496:	bf00      	nop
 800e498:	3714      	adds	r7, #20
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd90      	pop	{r4, r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	08022cf8 	.word	0x08022cf8
 800e4a4:	08026c00 	.word	0x08026c00
 800e4a8:	080231f0 	.word	0x080231f0

0800e4ac <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800e4ac:	b5b0      	push	{r4, r5, r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e4b8:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7f9 fff9 	bl	80084b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800e4c2:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800e4c4:	68b8      	ldr	r0, [r7, #8]
 800e4c6:	f7fa fa2f 	bl	8008928 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e4ca:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	fb02 f303 	mul.w	r3, r2, r3
 800e4d2:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800e4d4:	441d      	add	r5, r3
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7f6 feb2 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	4629      	mov	r1, r5
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f000 fbd3 	bl	800ec90 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	68ba      	ldr	r2, [r7, #8]
 800e4ee:	609a      	str	r2, [r3, #8]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	330c      	adds	r3, #12
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7ff fcbc 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	3310      	adds	r3, #16
 800e500:	6879      	ldr	r1, [r7, #4]
 800e502:	4618      	mov	r0, r3
 800e504:	f7ff fcb6 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 fbff 	bl	800ed0c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bdb0      	pop	{r4, r5, r7, pc}

0800e518 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	4618      	mov	r0, r3
 800e528:	f000 fc00 	bl	800ed2c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4618      	mov	r0, r3
 800e530:	3708      	adds	r7, #8
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e536:	b580      	push	{r7, lr}
 800e538:	b084      	sub	sp, #16
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e540:	6839      	ldr	r1, [r7, #0]
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 fc04 	bl	800ed50 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800e548:	eef0 7a40 	vmov.f32	s15, s0
 800e54c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e550:	6839      	ldr	r1, [r7, #0]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fc0d 	bl	800ed72 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800e558:	eef0 7a40 	vmov.f32	s15, s0
 800e55c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e560:	f107 020c 	add.w	r2, r7, #12
 800e564:	f107 0308 	add.w	r3, r7, #8
 800e568:	4619      	mov	r1, r3
 800e56a:	6838      	ldr	r0, [r7, #0]
 800e56c:	f7fa fff9 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e570:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e574:	eeb0 0a67 	vmov.f32	s0, s15
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e57e:	b580      	push	{r7, lr}
 800e580:	b082      	sub	sp, #8
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e586:	2201      	movs	r2, #1
 800e588:	2102      	movs	r1, #2
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7fc fa4c 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 fc12 	bl	800edba <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800e596:	bf00      	nop
 800e598:	3708      	adds	r7, #8
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e59e:	b480      	push	{r7}
 800e5a0:	b083      	sub	sp, #12
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
    }
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr

0800e5b4 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7f7 f9b5 	bl	800592c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fc fd77 	bl	800b0b8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7f8 ff10 	bl	80073f2 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7f7 f9a1 	bl	800592c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f7fc fd63 	bl	800b0b8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7ff fc5c 	bl	800deb2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7f7 f98d 	bl	800592c <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800e612:	4603      	mov	r3, r0
 800e614:	4618      	mov	r0, r3
 800e616:	f7fc fd4f 	bl	800b0b8 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800e61a:	4603      	mov	r3, r0
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7f8 ffb9 	bl	8007594 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800e622:	4603      	mov	r3, r0
 800e624:	4618      	mov	r0, r3
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 fbd0 	bl	800edda <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4618      	mov	r0, r3
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f7ff ffea 	bl	800e62c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	601a      	str	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3304      	adds	r3, #4
 800e662:	6879      	ldr	r1, [r7, #4]
 800e664:	4618      	mov	r0, r3
 800e666:	f7f8 fb91 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	3305      	adds	r3, #5
 800e66e:	6839      	ldr	r1, [r7, #0]
 800e670:	4618      	mov	r0, r3
 800e672:	f7f8 fb8b 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d011      	beq.n	800e6a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	db08      	blt.n	800e694 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2b01      	cmp	r3, #1
 800e686:	d105      	bne.n	800e694 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	db02      	blt.n	800e694 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	2b01      	cmp	r3, #1
 800e692:	d005      	beq.n	800e6a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800e694:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800e696:	4a08      	ldr	r2, [pc, #32]	; (800e6b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800e698:	21b0      	movs	r1, #176	; 0xb0
 800e69a:	4808      	ldr	r0, [pc, #32]	; (800e6bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800e69c:	f00f fd2e 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	68f8      	ldr	r0, [r7, #12]
 800e6a4:	f000 fba4 	bl	800edf0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	08026688 	.word	0x08026688
 800e6b8:	08026f7c 	.word	0x08026f7c
 800e6bc:	08026838 	.word	0x08026838

0800e6c0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	3308      	adds	r3, #8
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7ff ff99 	bl	800e604 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800e6d2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	615a      	str	r2, [r3, #20]
    }
 800e6d8:	bf00      	nop
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f000 fb8b 	bl	800ee06 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6839      	ldr	r1, [r7, #0]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 fb91 	bl	800ee1c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	60f8      	str	r0, [r7, #12]
 800e70c:	60b9      	str	r1, [r7, #8]
 800e70e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	68b9      	ldr	r1, [r7, #8]
 800e716:	4618      	mov	r0, r3
 800e718:	f000 fba8 	bl	800ee6c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800e71c:	eef0 7a40 	vmov.f32	s15, s0
 800e720:	eeb0 0a67 	vmov.f32	s0, s15
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b082      	sub	sp, #8
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e732:	2202      	movs	r2, #2
 800e734:	2102      	movs	r1, #2
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7fb feaf 	bl	800a49a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fbc5 	bl	800eecc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800e742:	bf00      	nop
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e74a:	b480      	push	{r7}
 800e74c:	b083      	sub	sp, #12
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
    }
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4618      	mov	r0, r3
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
    {}
 800e76a:	bf00      	nop
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
    }
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
    {}
 800e796:	bf00      	nop
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr

0800e7a2 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e7a2:	b480      	push	{r7}
 800e7a4:	b083      	sub	sp, #12
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e7b8:	b590      	push	{r4, r7, lr}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
 800e7c2:	687c      	ldr	r4, [r7, #4]
 800e7c4:	6838      	ldr	r0, [r7, #0]
 800e7c6:	f000 fb8b 	bl	800eee0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f7f7 f862 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	1d1c      	adds	r4, r3, #4
 800e7d8:	6838      	ldr	r0, [r7, #0]
 800e7da:	f000 fb8d 	bl	800eef8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 fb9f 	bl	800ef26 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f103 040c 	add.w	r4, r3, #12
 800e7ee:	6838      	ldr	r0, [r7, #0]
 800e7f0:	f000 fb8d 	bl	800ef0e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f000 fba3 	bl	800ef44 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4618      	mov	r0, r3
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	bd90      	pop	{r4, r7, pc}

0800e808 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	6879      	ldr	r1, [r7, #4]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 fba1 	bl	800ef62 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800e820:	eef0 7a40 	vmov.f32	s15, s0
 800e824:	eeb0 0a67 	vmov.f32	s0, s15
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e82e:	b580      	push	{r7, lr}
 800e830:	b082      	sub	sp, #8
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e838:	2201      	movs	r2, #1
 800e83a:	2100      	movs	r1, #0
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7ff ffe3 	bl	800e808 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e842:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e846:	eeb0 0a67 	vmov.f32	s0, s15
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e85a:	2202      	movs	r2, #2
 800e85c:	2100      	movs	r1, #0
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f7ff ffd2 	bl	800e808 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e864:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e868:	eeb0 0a67 	vmov.f32	s0, s15
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e872:	b580      	push	{r7, lr}
 800e874:	b086      	sub	sp, #24
 800e876:	af00      	add	r7, sp, #0
 800e878:	60f8      	str	r0, [r7, #12]
 800e87a:	60b9      	str	r1, [r7, #8]
 800e87c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	68b9      	ldr	r1, [r7, #8]
 800e886:	6978      	ldr	r0, [r7, #20]
 800e888:	f000 fb9b 	bl	800efc2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800e88c:	bf00      	nop
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800e894:	b580      	push	{r7, lr}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800e8a0:	68b8      	ldr	r0, [r7, #8]
 800e8a2:	f7f7 f9df 	bl	8005c64 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f000 fbc3 	bl	800f038 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800e8b2:	68f8      	ldr	r0, [r7, #12]
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800e8ba:	b5b0      	push	{r4, r5, r7, lr}
 800e8bc:	b086      	sub	sp, #24
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	60f8      	str	r0, [r7, #12]
 800e8c2:	60b9      	str	r1, [r7, #8]
 800e8c4:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800e8c6:	68b8      	ldr	r0, [r7, #8]
 800e8c8:	f7fd f924 	bl	800bb14 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800e8cc:	4604      	mov	r4, r0
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 fbda 	bl	800f088 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	f107 0314 	add.w	r3, r7, #20
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7f6 ff52 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800e8e0:	f107 0314 	add.w	r3, r7, #20
 800e8e4:	462a      	mov	r2, r5
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f000 fc07 	bl	800f0fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	3718      	adds	r7, #24
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bdb0      	pop	{r4, r5, r7, pc}

0800e8f6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b082      	sub	sp, #8
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 fc5a 	bl	800f1b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e904:	4603      	mov	r3, r0
 800e906:	4618      	mov	r0, r3
 800e908:	f000 fc61 	bl	800f1ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800e90c:	4603      	mov	r3, r0
 800e90e:	4618      	mov	r0, r3
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800e916:	b590      	push	{r4, r7, lr}
 800e918:	b085      	sub	sp, #20
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 fc4a 	bl	800f1b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e924:	4604      	mov	r4, r0
 800e926:	f107 030c 	add.w	r3, r7, #12
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7f7 fa21 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800e930:	f107 030c 	add.w	r3, r7, #12
 800e934:	4619      	mov	r1, r3
 800e936:	4620      	mov	r0, r4
 800e938:	f000 fcc6 	bl	800f2c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800e93c:	eef0 7a40 	vmov.f32	s15, s0
 800e940:	bf00      	nop
}
 800e942:	eeb0 0a67 	vmov.f32	s0, s15
 800e946:	3714      	adds	r7, #20
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd90      	pop	{r4, r7, pc}

0800e94c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e954:	2201      	movs	r2, #1
 800e956:	2101      	movs	r1, #1
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f7fe fa54 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fcf8 	bl	800f354 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800e964:	bf00      	nop
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 fcfd 	bl	800f374 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4618      	mov	r0, r3
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7ff ffed 	bl	800e96c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff ffed 	bl	800e984 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3708      	adds	r7, #8
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800e9b4:	b590      	push	{r4, r7, lr}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f7ff ffeb 	bl	800e99c <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	68ba      	ldr	r2, [r7, #8]
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	3304      	adds	r3, #4
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	6812      	ldr	r2, [r2, #0]
 800e9d4:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7f6 fc27 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e9de:	4604      	mov	r4, r0
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7f7 facc 	bl	8005f7e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	429c      	cmp	r4, r3
 800e9ea:	d005      	beq.n	800e9f8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800e9ec:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800e9ee:	4a06      	ldr	r2, [pc, #24]	; (800ea08 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800e9f0:	2160      	movs	r1, #96	; 0x60
 800e9f2:	4806      	ldr	r0, [pc, #24]	; (800ea0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800e9f4:	f00f fb82 	bl	801e0fc <__assert_func>
 800e9f8:	bf00      	nop
    }
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3714      	adds	r7, #20
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd90      	pop	{r4, r7, pc}
 800ea04:	08020224 	.word	0x08020224
 800ea08:	08027094 	.word	0x08027094
 800ea0c:	08020574 	.word	0x08020574

0800ea10 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800ea1c:	68b9      	ldr	r1, [r7, #8]
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	f000 fcb3 	bl	800f38a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	68b9      	ldr	r1, [r7, #8]
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f000 fd12 	bl	800f452 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ea2e:	bf00      	nop
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800ea36:	b5b0      	push	{r4, r5, r7, lr}
 800ea38:	b084      	sub	sp, #16
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7fd fab8 	bl	800bfb6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800ea46:	4604      	mov	r4, r0
 800ea48:	6838      	ldr	r0, [r7, #0]
 800ea4a:	f7f7 fc41 	bl	80062d0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800ea4e:	4605      	mov	r5, r0
 800ea50:	f107 030c 	add.w	r3, r7, #12
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f8 fc24 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800ea5a:	f107 030c 	add.w	r3, r7, #12
 800ea5e:	461a      	mov	r2, r3
 800ea60:	4629      	mov	r1, r5
 800ea62:	4620      	mov	r0, r4
 800ea64:	f000 fd2d 	bl	800f4c2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7fd faa4 	bl	800bfb6 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800ea6e:	4603      	mov	r3, r0
    }
 800ea70:	4618      	mov	r0, r3
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bdb0      	pop	{r4, r5, r7, pc}

0800ea78 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
    }
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	4618      	mov	r0, r3
 800ea84:	370c      	adds	r7, #12
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ea8e:	b480      	push	{r7}
 800ea90:	b083      	sub	sp, #12
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
 800ea96:	6039      	str	r1, [r7, #0]
    {}
 800ea98:	bf00      	nop
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
    }
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4618      	mov	r0, r3
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr

0800eaba <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800eaba:	b480      	push	{r7}
 800eabc:	b083      	sub	sp, #12
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	6039      	str	r1, [r7, #0]
    {}
 800eac4:	bf00      	nop
 800eac6:	370c      	adds	r7, #12
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4618      	mov	r0, r3
 800eadc:	370c      	adds	r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800eae6:	b590      	push	{r4, r7, lr}
 800eae8:	b083      	sub	sp, #12
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	6039      	str	r1, [r7, #0]
 800eaf0:	687c      	ldr	r4, [r7, #4]
 800eaf2:	6838      	ldr	r0, [r7, #0]
 800eaf4:	f000 fcf6 	bl	800f4e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	4619      	mov	r1, r3
 800eafc:	4620      	mov	r0, r4
 800eafe:	f7f6 fecb 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	1d1c      	adds	r4, r3, #4
 800eb06:	6838      	ldr	r0, [r7, #0]
 800eb08:	f000 fcf8 	bl	800f4fc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	4619      	mov	r1, r3
 800eb10:	4620      	mov	r0, r4
 800eb12:	f000 fd0a 	bl	800f52a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f103 040c 	add.w	r4, r3, #12
 800eb1c:	6838      	ldr	r0, [r7, #0]
 800eb1e:	f000 fcf8 	bl	800f512 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800eb22:	4603      	mov	r3, r0
 800eb24:	4619      	mov	r1, r3
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 fd0e 	bl	800f548 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd90      	pop	{r4, r7, pc}

0800eb36 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800eb36:	b590      	push	{r4, r7, lr}
 800eb38:	b087      	sub	sp, #28
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	60f8      	str	r0, [r7, #12]
 800eb3e:	60b9      	str	r1, [r7, #8]
 800eb40:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f000 fd0e 	bl	800f566 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	68b9      	ldr	r1, [r7, #8]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 fd11 	bl	800f57c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800eb5a:	eef0 7a40 	vmov.f32	s15, s0
 800eb5e:	edc7 7a04 	vstr	s15, [r7, #16]
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	330c      	adds	r3, #12
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	68b9      	ldr	r1, [r7, #8]
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f000 fd19 	bl	800f5a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800eb70:	eef0 7a40 	vmov.f32	s15, s0
 800eb74:	edc7 7a05 	vstr	s15, [r7, #20]
 800eb78:	f107 0214 	add.w	r2, r7, #20
 800eb7c:	f107 0310 	add.w	r3, r7, #16
 800eb80:	4619      	mov	r1, r3
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 fd2e 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800eb88:	eef0 7a40 	vmov.f32	s15, s0
  }
 800eb8c:	eeb0 0a67 	vmov.f32	s0, s15
 800eb90:	371c      	adds	r7, #28
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd90      	pop	{r4, r7, pc}

0800eb96 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800eb96:	b480      	push	{r7}
 800eb98:	b083      	sub	sp, #12
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b086      	sub	sp, #24
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	60f8      	str	r0, [r7, #12]
 800ebb6:	60b9      	str	r1, [r7, #8]
 800ebb8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	68b9      	ldr	r1, [r7, #8]
 800ebc2:	6978      	ldr	r0, [r7, #20]
 800ebc4:	f000 fd23 	bl	800f60e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800ebc8:	bf00      	nop
 800ebca:	3718      	adds	r7, #24
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ebd0:	b480      	push	{r7}
 800ebd2:	b083      	sub	sp, #12
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	3304      	adds	r3, #4
 800ebdc:	4618      	mov	r0, r3
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	68b9      	ldr	r1, [r7, #8]
 800ebfc:	6978      	ldr	r0, [r7, #20]
 800ebfe:	f000 fd19 	bl	800f634 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800ec02:	bf00      	nop
 800ec04:	3718      	adds	r7, #24
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800ec0a:	b480      	push	{r7}
 800ec0c:	b083      	sub	sp, #12
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4618      	mov	r0, r3
 800ec18:	370c      	adds	r7, #12
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr

0800ec22 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800ec22:	b480      	push	{r7}
 800ec24:	b083      	sub	sp, #12
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr

0800ec3a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b088      	sub	sp, #32
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	60f8      	str	r0, [r7, #12]
 800ec42:	60b9      	str	r1, [r7, #8]
 800ec44:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800ec46:	f107 0314 	add.w	r3, r7, #20
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	68b9      	ldr	r1, [r7, #8]
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 fd2a 	bl	800f6a8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800ec54:	f107 031c 	add.w	r3, r7, #28
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7fe ff91 	bl	800db80 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800ec5e:	f107 021c 	add.w	r2, r7, #28
 800ec62:	f107 0314 	add.w	r3, r7, #20
 800ec66:	4619      	mov	r1, r3
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f000 fd34 	bl	800f6d6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ec6e:	bf00      	nop
 800ec70:	3720      	adds	r7, #32
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b082      	sub	sp, #8
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 fd3a 	bl	800f6f8 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4618      	mov	r0, r3
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
	...

0800ec90 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
 800ec9c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f7ff ffe9 	bl	800ec76 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	601a      	str	r2, [r3, #0]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	3304      	adds	r3, #4
 800ecae:	6879      	ldr	r1, [r7, #4]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f8 f851 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	3305      	adds	r3, #5
 800ecba:	6839      	ldr	r1, [r7, #0]
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7f8 f865 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d011      	beq.n	800ecec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	db08      	blt.n	800ece0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2b03      	cmp	r3, #3
 800ecd2:	d105      	bne.n	800ece0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	db02      	blt.n	800ece0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d005      	beq.n	800ecec <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800ece0:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800ece2:	4a08      	ldr	r2, [pc, #32]	; (800ed04 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800ece4:	21b0      	movs	r1, #176	; 0xb0
 800ece6:	4808      	ldr	r0, [pc, #32]	; (800ed08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800ece8:	f00f fa08 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 800ecec:	2100      	movs	r1, #0
 800ecee:	68f8      	ldr	r0, [r7, #12]
 800ecf0:	f000 fd0d 	bl	800f70e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	08026688 	.word	0x08026688
 800ed04:	080271e0 	.word	0x080271e0
 800ed08:	08026838 	.word	0x08026838

0800ed0c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7f9 fe05 	bl	8008928 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800ed1e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	615a      	str	r2, [r3, #20]
    }
 800ed24:	bf00      	nop
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fcf4 	bl	800f724 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f000 fcfa 	bl	800f73a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 fd13 	bl	800f78a <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800ed64:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ed68:	eeb0 0a67 	vmov.f32	s0, s15
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b084      	sub	sp, #16
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f000 fd16 	bl	800f7b0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800ed84:	eef0 7a40 	vmov.f32	s15, s0
 800ed88:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800ed8c:	6839      	ldr	r1, [r7, #0]
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 fd1f 	bl	800f7d2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800ed94:	eef0 7a40 	vmov.f32	s15, s0
 800ed98:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800ed9c:	f107 020c 	add.w	r2, r7, #12
 800eda0:	f107 0308 	add.w	r3, r7, #8
 800eda4:	4619      	mov	r1, r3
 800eda6:	6838      	ldr	r0, [r7, #0]
 800eda8:	f7fa fbdb 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800edac:	eef0 7a40 	vmov.f32	s15, s0
  }
 800edb0:	eeb0 0a67 	vmov.f32	s0, s15
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800edba:	b580      	push	{r7, lr}
 800edbc:	b082      	sub	sp, #8
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800edc2:	2202      	movs	r2, #2
 800edc4:	2102      	movs	r1, #2
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7fb fe2e 	bl	800aa28 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fd11 	bl	800f7f4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800edd2:	bf00      	nop
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800edda:	b480      	push	{r7}
 800eddc:	b083      	sub	sp, #12
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
    }
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4618      	mov	r0, r3
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
    {}
 800edfa:	bf00      	nop
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ee06:	b480      	push	{r7}
 800ee08:	b083      	sub	sp, #12
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4618      	mov	r0, r3
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800ee1c:	b590      	push	{r4, r7, lr}
 800ee1e:	b083      	sub	sp, #12
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
 800ee26:	687c      	ldr	r4, [r7, #4]
 800ee28:	6838      	ldr	r0, [r7, #0]
 800ee2a:	f000 fced 	bl	800f808 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	4619      	mov	r1, r3
 800ee32:	4620      	mov	r0, r4
 800ee34:	f7f6 fd30 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	1d1c      	adds	r4, r3, #4
 800ee3c:	6838      	ldr	r0, [r7, #0]
 800ee3e:	f000 fcef 	bl	800f820 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800ee42:	4603      	mov	r3, r0
 800ee44:	4619      	mov	r1, r3
 800ee46:	4620      	mov	r0, r4
 800ee48:	f000 fd02 	bl	800f850 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f103 0420 	add.w	r4, r3, #32
 800ee52:	6838      	ldr	r0, [r7, #0]
 800ee54:	f000 fcf0 	bl	800f838 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f000 fd06 	bl	800f86e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4618      	mov	r0, r3
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd90      	pop	{r4, r7, pc}

0800ee6c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ee6c:	b590      	push	{r4, r7, lr}
 800ee6e:	b087      	sub	sp, #28
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60f8      	str	r0, [r7, #12]
 800ee74:	60b9      	str	r1, [r7, #8]
 800ee76:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f000 fd06 	bl	800f88c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800ee80:	4604      	mov	r4, r0
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	3304      	adds	r3, #4
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	68b9      	ldr	r1, [r7, #8]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 fd09 	bl	800f8a2 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ee90:	eef0 7a40 	vmov.f32	s15, s0
 800ee94:	edc7 7a04 	vstr	s15, [r7, #16]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	3320      	adds	r3, #32
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	68b9      	ldr	r1, [r7, #8]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 fd11 	bl	800f8c8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800eea6:	eef0 7a40 	vmov.f32	s15, s0
 800eeaa:	edc7 7a05 	vstr	s15, [r7, #20]
 800eeae:	f107 0214 	add.w	r2, r7, #20
 800eeb2:	f107 0310 	add.w	r3, r7, #16
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f000 fb93 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800eebe:	eef0 7a40 	vmov.f32	s15, s0
  }
 800eec2:	eeb0 0a67 	vmov.f32	s0, s15
 800eec6:	371c      	adds	r7, #28
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd90      	pop	{r4, r7, pc}

0800eecc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	3330      	adds	r3, #48	; 0x30
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4618      	mov	r0, r3
 800ef04:	370c      	adds	r7, #12
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ef0e:	b480      	push	{r7}
 800ef10:	b083      	sub	sp, #12
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	3318      	adds	r3, #24
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	370c      	adds	r7, #12
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr

0800ef26 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b082      	sub	sp, #8
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	6039      	str	r1, [r7, #0]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6839      	ldr	r1, [r7, #0]
 800ef34:	4618      	mov	r0, r3
 800ef36:	f000 fce8 	bl	800f90a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6839      	ldr	r1, [r7, #0]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f000 fce8 	bl	800f928 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ef62:	b590      	push	{r4, r7, lr}
 800ef64:	b087      	sub	sp, #28
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	60f8      	str	r0, [r7, #12]
 800ef6a:	60b9      	str	r1, [r7, #8]
 800ef6c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f000 fce8 	bl	800f946 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800ef76:	4604      	mov	r4, r0
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	687a      	ldr	r2, [r7, #4]
 800ef7e:	68b9      	ldr	r1, [r7, #8]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fceb 	bl	800f95c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ef86:	eef0 7a40 	vmov.f32	s15, s0
 800ef8a:	edc7 7a04 	vstr	s15, [r7, #16]
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	330c      	adds	r3, #12
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	68b9      	ldr	r1, [r7, #8]
 800ef96:	4618      	mov	r0, r3
 800ef98:	f000 fcf3 	bl	800f982 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800ef9c:	eef0 7a40 	vmov.f32	s15, s0
 800efa0:	edc7 7a05 	vstr	s15, [r7, #20]
 800efa4:	f107 0214 	add.w	r2, r7, #20
 800efa8:	f107 0310 	add.w	r3, r7, #16
 800efac:	4619      	mov	r1, r3
 800efae:	4620      	mov	r0, r4
 800efb0:	f000 fb18 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800efb4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800efb8:	eeb0 0a67 	vmov.f32	s0, s15
 800efbc:	371c      	adds	r7, #28
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd90      	pop	{r4, r7, pc}

0800efc2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800efc2:	b590      	push	{r4, r7, lr}
 800efc4:	b087      	sub	sp, #28
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	60f8      	str	r0, [r7, #12]
 800efca:	60b9      	str	r1, [r7, #8]
 800efcc:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800efce:	68b8      	ldr	r0, [r7, #8]
 800efd0:	f7f7 ff9e 	bl	8006f10 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800efd4:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800efd6:	68b8      	ldr	r0, [r7, #8]
 800efd8:	f7f6 fe73 	bl	8005cc2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800efdc:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7f6 f92e 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800efe6:	4602      	mov	r2, r0
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	4293      	cmp	r3, r2
 800efec:	d107      	bne.n	800effe <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7f6 f91b 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800eff6:	4602      	mov	r2, r0
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	4293      	cmp	r3, r2
 800effc:	d001      	beq.n	800f002 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800effe:	2301      	movs	r3, #1
 800f000:	e000      	b.n	800f004 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800f002:	2300      	movs	r3, #0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d005      	beq.n	800f014 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	693a      	ldr	r2, [r7, #16]
 800f00c:	6979      	ldr	r1, [r7, #20]
 800f00e:	4618      	mov	r0, r3
 800f010:	f7f9 f830 	bl	8008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800f014:	68b8      	ldr	r0, [r7, #8]
 800f016:	f000 fcd5 	bl	800f9c4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800f01a:	4604      	mov	r4, r0
 800f01c:	68b8      	ldr	r0, [r7, #8]
 800f01e:	f000 fcdd 	bl	800f9dc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800f022:	4603      	mov	r3, r0
 800f024:	461a      	mov	r2, r3
 800f026:	4621      	mov	r1, r4
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 fce3 	bl	800f9f4 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800f02e:	bf00      	nop
 800f030:	371c      	adds	r7, #28
 800f032:	46bd      	mov	sp, r7
 800f034:	bd90      	pop	{r4, r7, pc}
	...

0800f038 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	68b9      	ldr	r1, [r7, #8]
 800f04a:	4618      	mov	r0, r3
 800f04c:	f000 fcf0 	bl	800fa30 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	db06      	blt.n	800f064 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800f056:	68b8      	ldr	r0, [r7, #8]
 800f058:	f7f7 ff68 	bl	8006f2c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800f05c:	4602      	mov	r2, r0
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4293      	cmp	r3, r2
 800f062:	db05      	blt.n	800f070 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800f064:	4b05      	ldr	r3, [pc, #20]	; (800f07c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800f066:	4a06      	ldr	r2, [pc, #24]	; (800f080 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800f068:	2178      	movs	r1, #120	; 0x78
 800f06a:	4806      	ldr	r0, [pc, #24]	; (800f084 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800f06c:	f00f f846 	bl	801e0fc <__assert_func>
    }
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	08024ae8 	.word	0x08024ae8
 800f080:	080272e4 	.word	0x080272e4
 800f084:	08024c6c 	.word	0x08024c6c

0800f088 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800f088:	b480      	push	{r7}
 800f08a:	b083      	sub	sp, #12
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4618      	mov	r0, r3
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr

0800f09e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b082      	sub	sp, #8
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fcd3 	bl	800fa52 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}

0800f0b6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800f0b6:	b580      	push	{r7, lr}
 800f0b8:	b082      	sub	sp, #8
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff ffed 	bl	800f09e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b082      	sub	sp, #8
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	f7f7 fe7e 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	f7f7 fe7b 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
	...

0800f0fc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800f0fc:	b5b0      	push	{r4, r5, r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800f10a:	68f8      	ldr	r0, [r7, #12]
 800f10c:	f7ff ffd3 	bl	800f0b6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	4614      	mov	r4, r2
 800f116:	461d      	mov	r5, r3
 800f118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f11a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f11c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f120:	e884 0003 	stmia.w	r4, {r0, r1}
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f103 0218 	add.w	r2, r3, #24
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	4614      	mov	r4, r2
 800f12e:	461d      	mov	r5, r3
 800f130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f134:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f138:	e884 0003 	stmia.w	r4, {r0, r1}
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3330      	adds	r3, #48	; 0x30
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	4618      	mov	r0, r3
 800f144:	f7f6 fba8 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800f148:	68b8      	ldr	r0, [r7, #8]
 800f14a:	f7fc fd11 	bl	800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800f14e:	4604      	mov	r4, r0
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4618      	mov	r0, r3
 800f154:	f7ff ffbb 	bl	800f0ce <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800f158:	4603      	mov	r3, r0
 800f15a:	429c      	cmp	r4, r3
 800f15c:	d10a      	bne.n	800f174 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800f15e:	68b8      	ldr	r0, [r7, #8]
 800f160:	f7fc fd13 	bl	800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800f164:	4604      	mov	r4, r0
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff ffbb 	bl	800f0e4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800f16e:	4603      	mov	r3, r0
 800f170:	429c      	cmp	r4, r3
 800f172:	d005      	beq.n	800f180 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800f174:	4b05      	ldr	r3, [pc, #20]	; (800f18c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800f176:	4a06      	ldr	r2, [pc, #24]	; (800f190 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800f178:	2174      	movs	r1, #116	; 0x74
 800f17a:	4806      	ldr	r0, [pc, #24]	; (800f194 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800f17c:	f00e ffbe 	bl	801e0fc <__assert_func>
    }
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	4618      	mov	r0, r3
 800f184:	3710      	adds	r7, #16
 800f186:	46bd      	mov	sp, r7
 800f188:	bdb0      	pop	{r4, r5, r7, pc}
 800f18a:	bf00      	nop
 800f18c:	0801ff64 	.word	0x0801ff64
 800f190:	080273d4 	.word	0x080273d4
 800f194:	080201c8 	.word	0x080201c8

0800f198 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 f809 	bl	800f1b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f000 fc5d 	bl	800fa68 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800f1b8:	b480      	push	{r7}
 800f1ba:	b083      	sub	sp, #12
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	370c      	adds	r7, #12
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr

0800f1ce <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800f1ce:	b580      	push	{r7, lr}
 800f1d0:	b082      	sub	sp, #8
 800f1d2:	af00      	add	r7, sp, #0
 800f1d4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7fc fcc9 	bl	800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800f1de:	4603      	mov	r3, r0
    }
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fc60 	bl	800fab6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3708      	adds	r7, #8
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd80      	pop	{r7, pc}

0800f200 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff ffec 	bl	800f1e8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	4618      	mov	r0, r3
 800f214:	3708      	adds	r7, #8
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b082      	sub	sp, #8
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff ffeb 	bl	800f200 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4618      	mov	r0, r3
 800f240:	f7ff ffeb 	bl	800f21a <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800f24e:	b580      	push	{r7, lr}
 800f250:	b082      	sub	sp, #8
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	330c      	adds	r3, #12
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7ff ffea 	bl	800f234 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	3304      	adds	r3, #4
 800f264:	4618      	mov	r0, r3
 800f266:	f7fc fd79 	bl	800bd5c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4618      	mov	r0, r3
 800f26e:	3708      	adds	r7, #8
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff ffe5 	bl	800f24e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 fc0b 	bl	800faa0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4618      	mov	r0, r3
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7ff ffe8 	bl	800f274 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff ffeb 	bl	800f294 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	ed2d 8b02 	vpush	{d8}
 800f2ce:	b088      	sub	sp, #32
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7ff fb0d 	bl	800e8f6 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	dd05      	ble.n	800f2ee <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7ff ff58 	bl	800f198 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	dc06      	bgt.n	800f2fc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800f2ee:	4b16      	ldr	r3, [pc, #88]	; (800f348 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800f2f0:	4a16      	ldr	r2, [pc, #88]	; (800f34c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800f2f2:	f240 119b 	movw	r1, #411	; 0x19b
 800f2f6:	4816      	ldr	r0, [pc, #88]	; (800f350 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800f2f8:	f00e ff00 	bl	801e0fc <__assert_func>
 800f2fc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7ff ff5a 	bl	800f1b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f304:	4602      	mov	r2, r0
 800f306:	f107 030c 	add.w	r3, r7, #12
 800f30a:	4611      	mov	r1, r2
 800f30c:	4618      	mov	r0, r3
 800f30e:	f000 fbb8 	bl	800fa82 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff ff50 	bl	800f1b8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800f318:	4602      	mov	r2, r0
 800f31a:	f107 030c 	add.w	r3, r7, #12
 800f31e:	6839      	ldr	r1, [r7, #0]
 800f320:	4618      	mov	r0, r3
 800f322:	f000 fbd3 	bl	800facc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800f326:	eeb0 8a40 	vmov.f32	s16, s0
 800f32a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800f32c:	f107 030c 	add.w	r3, r7, #12
 800f330:	4618      	mov	r0, r3
 800f332:	f7ff ffbc 	bl	800f2ae <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800f336:	eef0 7a48 	vmov.f32	s15, s16
}
 800f33a:	eeb0 0a67 	vmov.f32	s0, s15
 800f33e:	3720      	adds	r7, #32
 800f340:	46bd      	mov	sp, r7
 800f342:	ecbd 8b02 	vpop	{d8}
 800f346:	bd80      	pop	{r7, pc}
 800f348:	08024fe4 	.word	0x08024fe4
 800f34c:	08027644 	.word	0x08027644
 800f350:	080251f0 	.word	0x080251f0

0800f354 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f35c:	2202      	movs	r2, #2
 800f35e:	2101      	movs	r1, #1
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7fd fd50 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 fbc1 	bl	800faee <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800f36c:	bf00      	nop
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
    }
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4618      	mov	r0, r3
 800f380:	370c      	adds	r7, #12
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f38a:	b480      	push	{r7}
 800f38c:	b083      	sub	sp, #12
 800f38e:	af00      	add	r7, sp, #0
 800f390:	6078      	str	r0, [r7, #4]
 800f392:	6039      	str	r1, [r7, #0]
}
 800f394:	bf00      	nop
 800f396:	370c      	adds	r7, #12
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 fbd5 	bl	800fb58 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3708      	adds	r7, #8
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b082      	sub	sp, #8
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7ff ffec 	bl	800f3a0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3708      	adds	r7, #8
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b082      	sub	sp, #8
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7ff ffeb 	bl	800f3b8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 fbad 	bl	800fb42 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b082      	sub	sp, #8
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7ff ffe8 	bl	800f3d2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	330c      	adds	r3, #12
 800f418:	4618      	mov	r0, r3
 800f41a:	f7ff ffea 	bl	800f3f2 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	3308      	adds	r3, #8
 800f422:	4618      	mov	r0, r3
 800f424:	f7f8 f995 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fb7f 	bl	800fb2c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4618      	mov	r0, r3
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4618      	mov	r0, r3
 800f444:	f7ff ffe2 	bl	800f40c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4618      	mov	r0, r3
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f452:	b580      	push	{r7, lr}
 800f454:	b090      	sub	sp, #64	; 0x40
 800f456:	af02      	add	r7, sp, #8
 800f458:	60f8      	str	r0, [r7, #12]
 800f45a:	60b9      	str	r1, [r7, #8]
 800f45c:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f45e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f462:	68b9      	ldr	r1, [r7, #8]
 800f464:	4618      	mov	r0, r3
 800f466:	f000 fb52 	bl	800fb0e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	68b9      	ldr	r1, [r7, #8]
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f000 fb9a 	bl	800fba8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f474:	f107 0320 	add.w	r3, r7, #32
 800f478:	68f9      	ldr	r1, [r7, #12]
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7f7 fc2d 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f7f8 fc6b 	bl	8007d5c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800f486:	4603      	mov	r3, r0
 800f488:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f48c:	f107 0120 	add.w	r1, r7, #32
 800f490:	f107 0010 	add.w	r0, r7, #16
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f000 fbd0 	bl	800fc3c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f49c:	f107 0310 	add.w	r3, r7, #16
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f000 fbe5 	bl	800fc70 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800f4a6:	f107 0320 	add.w	r3, r7, #32
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7f6 f8db 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f4b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7ff ffbf 	bl	800f438 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800f4ba:	bf00      	nop
 800f4bc:	3738      	adds	r7, #56	; 0x38
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b086      	sub	sp, #24
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	60f8      	str	r0, [r7, #12]
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	68b9      	ldr	r1, [r7, #8]
 800f4d6:	6978      	ldr	r0, [r7, #20]
 800f4d8:	f000 fbd5 	bl	800fc86 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800f4dc:	bf00      	nop
 800f4de:	3718      	adds	r7, #24
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f4e4:	b480      	push	{r7}
 800f4e6:	b083      	sub	sp, #12
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	332c      	adds	r3, #44	; 0x2c
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4618      	mov	r0, r3
 800f508:	370c      	adds	r7, #12
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f512:	b480      	push	{r7}
 800f514:	b083      	sub	sp, #12
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	3318      	adds	r3, #24
 800f51e:	4618      	mov	r0, r3
 800f520:	370c      	adds	r7, #12
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr

0800f52a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b082      	sub	sp, #8
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	6039      	str	r1, [r7, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6839      	ldr	r1, [r7, #0]
 800f538:	4618      	mov	r0, r3
 800f53a:	f000 fbb7 	bl	800fcac <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4618      	mov	r0, r3
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6839      	ldr	r1, [r7, #0]
 800f556:	4618      	mov	r0, r3
 800f558:	f000 fbb7 	bl	800fcca <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f566:	b480      	push	{r7}
 800f568:	b083      	sub	sp, #12
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4618      	mov	r0, r3
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	6879      	ldr	r1, [r7, #4]
 800f58e:	4618      	mov	r0, r3
 800f590:	f000 fbaa 	bl	800fce8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800f594:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f598:	eeb0 0a67 	vmov.f32	s0, s15
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f5a2:	b5b0      	push	{r4, r5, r7, lr}
 800f5a4:	b084      	sub	sp, #16
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	60f8      	str	r0, [r7, #12]
 800f5aa:	60b9      	str	r1, [r7, #8]
 800f5ac:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681c      	ldr	r4, [r3, #0]
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f000 fbb9 	bl	800fd2a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	fb03 f502 	mul.w	r5, r3, r2
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f000 fbbd 	bl	800fd40 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	fb02 f303 	mul.w	r3, r2, r3
 800f5ce:	442b      	add	r3, r5
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	4423      	add	r3, r4
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	ee07 3a90 	vmov	s15, r3
  }
 800f5da:	eeb0 0a67 	vmov.f32	s0, s15
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bdb0      	pop	{r4, r5, r7, pc}

0800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800f5e4:	b480      	push	{r7}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	607a      	str	r2, [r7, #4]
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	ed93 7a00 	vldr	s14, [r3]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	edd3 7a00 	vldr	s15, [r3]
 800f5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f600:	eeb0 0a67 	vmov.f32	s0, s15
 800f604:	3714      	adds	r7, #20
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f60e:	b580      	push	{r7, lr}
 800f610:	b084      	sub	sp, #16
 800f612:	af00      	add	r7, sp, #0
 800f614:	60f8      	str	r0, [r7, #12]
 800f616:	60b9      	str	r1, [r7, #8]
 800f618:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f61a:	68b9      	ldr	r1, [r7, #8]
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f000 fb9a 	bl	800fd56 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	68b9      	ldr	r1, [r7, #8]
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f000 fba0 	bl	800fd6c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f62c:	bf00      	nop
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800f634:	b590      	push	{r4, r7, lr}
 800f636:	b085      	sub	sp, #20
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4618      	mov	r0, r3
 800f644:	f7f6 fded 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f648:	4604      	mov	r4, r0
 800f64a:	68b8      	ldr	r0, [r7, #8]
 800f64c:	f7f6 ffb0 	bl	80065b0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800f650:	4603      	mov	r3, r0
 800f652:	429c      	cmp	r4, r3
 800f654:	d10a      	bne.n	800f66c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f6 fded 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f65e:	4604      	mov	r4, r0
 800f660:	68b8      	ldr	r0, [r7, #8]
 800f662:	f7f6 ffb3 	bl	80065cc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800f666:	4603      	mov	r3, r0
 800f668:	429c      	cmp	r4, r3
 800f66a:	d005      	beq.n	800f678 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800f66c:	4b0b      	ldr	r3, [pc, #44]	; (800f69c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800f66e:	4a0c      	ldr	r2, [pc, #48]	; (800f6a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800f670:	21b0      	movs	r1, #176	; 0xb0
 800f672:	480c      	ldr	r0, [pc, #48]	; (800f6a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800f674:	f00e fd42 	bl	801e0fc <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800f678:	68b8      	ldr	r0, [r7, #8]
 800f67a:	f000 fbaf 	bl	800fddc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800f67e:	4604      	mov	r4, r0
 800f680:	68b8      	ldr	r0, [r7, #8]
 800f682:	f000 fbb7 	bl	800fdf4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800f686:	4603      	mov	r3, r0
 800f688:	461a      	mov	r2, r3
 800f68a:	4621      	mov	r1, r4
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f000 fbbd 	bl	800fe0c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800f692:	bf00      	nop
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	bd90      	pop	{r4, r7, pc}
 800f69a:	bf00      	nop
 800f69c:	08022cf8 	.word	0x08022cf8
 800f6a0:	08027820 	.word	0x08027820
 800f6a4:	080231f0 	.word	0x080231f0

0800f6a8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f6a8:	b590      	push	{r4, r7, lr}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f6b4:	68b8      	ldr	r0, [r7, #8]
 800f6b6:	f7f6 f806 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f7f6 fc9b 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	68f8      	ldr	r0, [r7, #12]
 800f6ca:	f000 fbf3 	bl	800feb4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	3714      	adds	r7, #20
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd90      	pop	{r4, r7, pc}

0800f6d6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b086      	sub	sp, #24
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	68b9      	ldr	r1, [r7, #8]
 800f6ea:	6978      	ldr	r0, [r7, #20]
 800f6ec:	f000 fc10 	bl	800ff10 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800f6f0:	bf00      	nop
 800f6f2:	3718      	adds	r7, #24
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
    }
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4618      	mov	r0, r3
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800f70e:	b480      	push	{r7}
 800f710:	b083      	sub	sp, #12
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
 800f716:	6039      	str	r1, [r7, #0]
    {}
 800f718:	bf00      	nop
 800f71a:	370c      	adds	r7, #12
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4618      	mov	r0, r3
 800f730:	370c      	adds	r7, #12
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800f73a:	b590      	push	{r4, r7, lr}
 800f73c:	b083      	sub	sp, #12
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	6039      	str	r1, [r7, #0]
 800f744:	687c      	ldr	r4, [r7, #4]
 800f746:	6838      	ldr	r0, [r7, #0]
 800f748:	f000 fbf5 	bl	800ff36 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800f74c:	4603      	mov	r3, r0
 800f74e:	4619      	mov	r1, r3
 800f750:	4620      	mov	r0, r4
 800f752:	f7f6 f8a1 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	1d1c      	adds	r4, r3, #4
 800f75a:	6838      	ldr	r0, [r7, #0]
 800f75c:	f000 fbf7 	bl	800ff4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800f760:	4603      	mov	r3, r0
 800f762:	4619      	mov	r1, r3
 800f764:	4620      	mov	r0, r4
 800f766:	f7ff fbde 	bl	800ef26 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f103 040c 	add.w	r4, r3, #12
 800f770:	6838      	ldr	r0, [r7, #0]
 800f772:	f000 fbf7 	bl	800ff64 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800f776:	4603      	mov	r3, r0
 800f778:	4619      	mov	r1, r3
 800f77a:	4620      	mov	r0, r4
 800f77c:	f000 fbfe 	bl	800ff7c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	4618      	mov	r0, r3
 800f784:	370c      	adds	r7, #12
 800f786:	46bd      	mov	sp, r7
 800f788:	bd90      	pop	{r4, r7, pc}

0800f78a <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b084      	sub	sp, #16
 800f78e:	af00      	add	r7, sp, #0
 800f790:	60f8      	str	r0, [r7, #12]
 800f792:	60b9      	str	r1, [r7, #8]
 800f794:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	68ba      	ldr	r2, [r7, #8]
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f000 fbfc 	bl	800ff9a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800f7a2:	eef0 7a40 	vmov.f32	s15, s0
 800f7a6:	eeb0 0a67 	vmov.f32	s0, s15
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	2100      	movs	r1, #0
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7ff ffe3 	bl	800f78a <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f7c4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f7c8:	eeb0 0a67 	vmov.f32	s0, s15
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b082      	sub	sp, #8
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800f7dc:	2202      	movs	r2, #2
 800f7de:	2100      	movs	r1, #0
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7ff ffd2 	bl	800f78a <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800f7e6:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f7ea:	eeb0 0a67 	vmov.f32	s0, s15
 800f7ee:	3708      	adds	r7, #8
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800f7f4:	b480      	push	{r7}
 800f7f6:	b083      	sub	sp, #12
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	bf00      	nop
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	3334      	adds	r3, #52	; 0x34
 800f814:	4618      	mov	r0, r3
 800f816:	370c      	adds	r7, #12
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	3304      	adds	r3, #4
 800f82c:	4618      	mov	r0, r3
 800f82e:	370c      	adds	r7, #12
 800f830:	46bd      	mov	sp, r7
 800f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f836:	4770      	bx	lr

0800f838 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f838:	b480      	push	{r7}
 800f83a:	b083      	sub	sp, #12
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	331c      	adds	r3, #28
 800f844:	4618      	mov	r0, r3
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6839      	ldr	r1, [r7, #0]
 800f85e:	4618      	mov	r0, r3
 800f860:	f000 fbcb 	bl	800fffa <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4618      	mov	r0, r3
 800f868:	3708      	adds	r7, #8
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800f86e:	b580      	push	{r7, lr}
 800f870:	b082      	sub	sp, #8
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
 800f876:	6039      	str	r1, [r7, #0]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6839      	ldr	r1, [r7, #0]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f000 fbcb 	bl	8010018 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	4618      	mov	r0, r3
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4618      	mov	r0, r3
 800f898:	370c      	adds	r7, #12
 800f89a:	46bd      	mov	sp, r7
 800f89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a0:	4770      	bx	lr

0800f8a2 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f8a2:	b580      	push	{r7, lr}
 800f8a4:	b084      	sub	sp, #16
 800f8a6:	af00      	add	r7, sp, #0
 800f8a8:	60f8      	str	r0, [r7, #12]
 800f8aa:	60b9      	str	r1, [r7, #8]
 800f8ac:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	6879      	ldr	r1, [r7, #4]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f000 fbc6 	bl	8010046 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800f8ba:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f8be:	eeb0 0a67 	vmov.f32	s0, s15
 800f8c2:	3710      	adds	r7, #16
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f8c8:	b5b0      	push	{r4, r5, r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681c      	ldr	r4, [r3, #0]
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f000 fbd4 	bl	8010086 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	fb03 f502 	mul.w	r5, r3, r2
 800f8e6:	68f8      	ldr	r0, [r7, #12]
 800f8e8:	f000 fbd8 	bl	801009c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	fb02 f303 	mul.w	r3, r2, r3
 800f8f4:	442b      	add	r3, r5
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4423      	add	r3, r4
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	ee07 3a90 	vmov	s15, r3
  }
 800f900:	eeb0 0a67 	vmov.f32	s0, s15
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bdb0      	pop	{r4, r5, r7, pc}

0800f90a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b082      	sub	sp, #8
 800f90e:	af00      	add	r7, sp, #0
 800f910:	6078      	str	r0, [r7, #4]
 800f912:	6039      	str	r1, [r7, #0]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	4618      	mov	r0, r3
 800f91a:	f000 fbca 	bl	80100b2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4618      	mov	r0, r3
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6839      	ldr	r1, [r7, #0]
 800f936:	4618      	mov	r0, r3
 800f938:	f000 fbd1 	bl	80100de <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4618      	mov	r0, r3
 800f940:	3708      	adds	r7, #8
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}

0800f946 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800f946:	b480      	push	{r7}
 800f948:	b083      	sub	sp, #12
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4618      	mov	r0, r3
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	60b9      	str	r1, [r7, #8]
 800f966:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	68ba      	ldr	r2, [r7, #8]
 800f96c:	6879      	ldr	r1, [r7, #4]
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 fbc9 	bl	8010106 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800f974:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f978:	eeb0 0a67 	vmov.f32	s0, s15
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f982:	b5b0      	push	{r4, r5, r7, lr}
 800f984:	b084      	sub	sp, #16
 800f986:	af00      	add	r7, sp, #0
 800f988:	60f8      	str	r0, [r7, #12]
 800f98a:	60b9      	str	r1, [r7, #8]
 800f98c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681c      	ldr	r4, [r3, #0]
 800f992:	68f8      	ldr	r0, [r7, #12]
 800f994:	f000 fbd8 	bl	8010148 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800f998:	4602      	mov	r2, r0
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	fb03 f502 	mul.w	r5, r3, r2
 800f9a0:	68f8      	ldr	r0, [r7, #12]
 800f9a2:	f000 fbdc 	bl	801015e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800f9a6:	4602      	mov	r2, r0
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	fb02 f303 	mul.w	r3, r2, r3
 800f9ae:	442b      	add	r3, r5
 800f9b0:	009b      	lsls	r3, r3, #2
 800f9b2:	4423      	add	r3, r4
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	ee07 3a90 	vmov	s15, r3
  }
 800f9ba:	eeb0 0a67 	vmov.f32	s0, s15
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bdb0      	pop	{r4, r5, r7, pc}

0800f9c4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	370c      	adds	r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800fa00:	f107 0314 	add.w	r3, r7, #20
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	68b9      	ldr	r1, [r7, #8]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 fbb3 	bl	8010174 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800fa0e:	f107 031c 	add.w	r3, r7, #28
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7f7 fc45 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800fa18:	f107 021c 	add.w	r2, r7, #28
 800fa1c:	f107 0314 	add.w	r3, r7, #20
 800fa20:	4619      	mov	r1, r3
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f000 fbbd 	bl	80101a2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fa28:	bf00      	nop
 800fa2a:	3720      	adds	r7, #32
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	68b9      	ldr	r1, [r7, #8]
 800fa42:	4618      	mov	r0, r3
 800fa44:	f000 fbbe 	bl	80101c4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800fa52:	b480      	push	{r7}
 800fa54:	b083      	sub	sp, #12
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
    }
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fc f889 	bl	800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800fa78:	4603      	mov	r3, r0
    }
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b082      	sub	sp, #8
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	6039      	str	r1, [r7, #0]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6839      	ldr	r1, [r7, #0]
 800fa90:	4618      	mov	r0, r3
 800fa92:	f000 fbcd 	bl	8010230 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	4618      	mov	r0, r3
 800faac:	370c      	adds	r7, #12
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr

0800fab6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800fab6:	b480      	push	{r7}
 800fab8:	b083      	sub	sp, #12
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800fad8:	68b9      	ldr	r1, [r7, #8]
 800fada:	68f8      	ldr	r0, [r7, #12]
 800fadc:	f000 fbb7 	bl	801024e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800fae0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fae4:	eeb0 0a67 	vmov.f32	s0, s15
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800faee:	b580      	push	{r7, lr}
 800faf0:	b082      	sub	sp, #8
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800faf6:	2200      	movs	r2, #0
 800faf8:	2102      	movs	r1, #2
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f7fd f983 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f000 fbc8 	bl	8010296 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800fb06:	bf00      	nop
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	b082      	sub	sp, #8
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
 800fb16:	6039      	str	r1, [r7, #0]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	6839      	ldr	r1, [r7, #0]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f000 fbca 	bl	80102b6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4618      	mov	r0, r3
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800fb42:	b480      	push	{r7}
 800fb44:	b083      	sub	sp, #12
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	370c      	adds	r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr

0800fb58 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4618      	mov	r0, r3
 800fb64:	370c      	adds	r7, #12
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr

0800fb6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b082      	sub	sp, #8
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f7f5 fb61 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fb80:	4603      	mov	r3, r0
 800fb82:	4618      	mov	r0, r3
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3304      	adds	r3, #4
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7f7 fa3b 	bl	8007012 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	4618      	mov	r0, r3
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
	...

0800fba8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b086      	sub	sp, #24
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800fbb4:	68b8      	ldr	r0, [r7, #8]
 800fbb6:	f7ff ffda 	bl	800fb6e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800fbba:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800fbbc:	68b8      	ldr	r0, [r7, #8]
 800fbbe:	f7ff ffe4 	bl	800fb8a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800fbc2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f5 fbe1 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d107      	bne.n	800fbe4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7f5 fbce 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d001      	beq.n	800fbe8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e000      	b.n	800fbea <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800fbe8:	2300      	movs	r3, #0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d005      	beq.n	800fbfa <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	693a      	ldr	r2, [r7, #16]
 800fbf2:	6979      	ldr	r1, [r7, #20]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7f8 fad5 	bl	80081a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7f5 fbc6 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800fc02:	4602      	mov	r2, r0
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d107      	bne.n	800fc1a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f5 fbb3 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800fc12:	4602      	mov	r2, r0
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d006      	beq.n	800fc28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800fc1a:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800fc1c:	4a05      	ldr	r2, [pc, #20]	; (800fc34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800fc1e:	f240 21fd 	movw	r1, #765	; 0x2fd
 800fc22:	4805      	ldr	r0, [pc, #20]	; (800fc38 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800fc24:	f00e fa6a 	bl	801e0fc <__assert_func>
}
 800fc28:	bf00      	nop
 800fc2a:	3718      	adds	r7, #24
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	080225dc 	.word	0x080225dc
 800fc34:	08027b9c 	.word	0x08027b9c
 800fc38:	080226f0 	.word	0x080226f0

0800fc3c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
 800fc48:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	601a      	str	r2, [r3, #0]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	605a      	str	r2, [r3, #4]
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	683a      	ldr	r2, [r7, #0]
 800fc5a:	609a      	str	r2, [r3, #8]
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	69ba      	ldr	r2, [r7, #24]
 800fc60:	60da      	str	r2, [r3, #12]
  }
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	4618      	mov	r0, r3
 800fc66:	3714      	adds	r7, #20
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 fb53 	bl	8010324 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800fc7e:	bf00      	nop
 800fc80:	3708      	adds	r7, #8
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800fc86:	b580      	push	{r7, lr}
 800fc88:	b084      	sub	sp, #16
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	60f8      	str	r0, [r7, #12]
 800fc8e:	60b9      	str	r1, [r7, #8]
 800fc90:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800fc92:	68b9      	ldr	r1, [r7, #8]
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f000 fb54 	bl	8010342 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	68b9      	ldr	r1, [r7, #8]
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	f000 fbbe 	bl	8010420 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800fca4:	bf00      	nop
 800fca6:	3710      	adds	r7, #16
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6839      	ldr	r1, [r7, #0]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f000 fbe8 	bl	8010490 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3708      	adds	r7, #8
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}

0800fcca <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fcca:	b580      	push	{r7, lr}
 800fccc:	b082      	sub	sp, #8
 800fcce:	af00      	add	r7, sp, #0
 800fcd0:	6078      	str	r0, [r7, #4]
 800fcd2:	6039      	str	r1, [r7, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6839      	ldr	r1, [r7, #0]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f000 fbef 	bl	80104bc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	4618      	mov	r0, r3
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fce8:	b5b0      	push	{r4, r5, r7, lr}
 800fcea:	b084      	sub	sp, #16
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681c      	ldr	r4, [r3, #0]
 800fcf8:	68f8      	ldr	r0, [r7, #12]
 800fcfa:	f000 fbf3 	bl	80104e4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	fb03 f502 	mul.w	r5, r3, r2
 800fd06:	68f8      	ldr	r0, [r7, #12]
 800fd08:	f000 fbf7 	bl	80104fa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	fb02 f303 	mul.w	r3, r2, r3
 800fd14:	442b      	add	r3, r5
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4423      	add	r3, r4
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	ee07 3a90 	vmov	s15, r3
  }
 800fd20:	eeb0 0a67 	vmov.f32	s0, s15
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bdb0      	pop	{r4, r5, r7, pc}

0800fd2a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b082      	sub	sp, #8
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fd32:	f7f7 f858 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fd36:	4603      	mov	r3, r0
  }
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3708      	adds	r7, #8
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fd48:	f7f7 f84d 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fd4c:	4603      	mov	r3, r0
  }
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fd56:	b480      	push	{r7}
 800fd58:	b083      	sub	sp, #12
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
 800fd5e:	6039      	str	r1, [r7, #0]
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b08c      	sub	sp, #48	; 0x30
 800fd70:	af02      	add	r7, sp, #8
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fd78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd7c:	68b9      	ldr	r1, [r7, #8]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fa fd4f 	bl	800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	68b9      	ldr	r1, [r7, #8]
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f000 fbc1 	bl	8010510 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800fd8e:	f107 0320 	add.w	r3, r7, #32
 800fd92:	68f9      	ldr	r1, [r7, #12]
 800fd94:	4618      	mov	r0, r3
 800fd96:	f7fa fd44 	bl	800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800fd9a:	68f8      	ldr	r0, [r7, #12]
 800fd9c:	f000 fc04 	bl	80105a8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800fda0:	4603      	mov	r3, r0
 800fda2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fda6:	f107 0120 	add.w	r1, r7, #32
 800fdaa:	f107 0010 	add.w	r0, r7, #16
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f000 fc04 	bl	80105be <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fdb6:	f107 0310 	add.w	r3, r7, #16
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f000 fc19 	bl	80105f2 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800fdc0:	f107 0320 	add.w	r3, r7, #32
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7f9 fc13 	bl	80095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fdca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7f9 fc0e 	bl	80095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800fdd4:	bf00      	nop
 800fdd6:	3728      	adds	r7, #40	; 0x28
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4618      	mov	r0, r3
 800fdea:	370c      	adds	r7, #12
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800fdf4:	b480      	push	{r7}
 800fdf6:	b083      	sub	sp, #12
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	4618      	mov	r0, r3
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	ed2d 8b02 	vpush	{d8}
 800fe12:	b088      	sub	sp, #32
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800fe1c:	68b8      	ldr	r0, [r7, #8]
 800fe1e:	f000 fbf3 	bl	8010608 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800fe22:	4603      	mov	r3, r0
 800fe24:	61fb      	str	r3, [r7, #28]
 800fe26:	f107 0310 	add.w	r3, r7, #16
 800fe2a:	f107 011c 	add.w	r1, r7, #28
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f000 fbfc 	bl	801062e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800fe36:	f107 0310 	add.w	r3, r7, #16
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f000 fc25 	bl	801068a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800fe40:	eeb0 8a40 	vmov.f32	s16, s0
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2200      	movs	r2, #0
 800fe48:	2100      	movs	r1, #0
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7f6 ff11 	bl	8006c72 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800fe50:	4603      	mov	r3, r0
 800fe52:	edd3 7a00 	vldr	s15, [r3]
 800fe56:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800fe5a:	edc3 7a00 	vstr	s15, [r3]
 800fe5e:	bf00      	nop
 800fe60:	3720      	adds	r7, #32
 800fe62:	46bd      	mov	sp, r7
 800fe64:	ecbd 8b02 	vpop	{d8}
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b082      	sub	sp, #8
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	6078      	str	r0, [r7, #4]
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 fc24 	bl	80106c0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b082      	sub	sp, #8
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7ff ffed 	bl	800fe6a <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	4618      	mov	r0, r3
 800fe94:	3708      	adds	r7, #8
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800fe9a:	b580      	push	{r7, lr}
 800fe9c:	b082      	sub	sp, #8
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7ff ffed 	bl	800fe82 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	4618      	mov	r0, r3
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
	...

0800feb4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800feb4:	b590      	push	{r4, r7, lr}
 800feb6:	b085      	sub	sp, #20
 800feb8:	af00      	add	r7, sp, #0
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	607a      	str	r2, [r7, #4]
 800fec0:	68f8      	ldr	r0, [r7, #12]
 800fec2:	f7ff ffea 	bl	800fe9a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	601a      	str	r2, [r3, #0]
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7f5 fa4f 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800feda:	4604      	mov	r4, r0
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	4618      	mov	r0, r3
 800fee0:	f7f5 fb71 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800fee4:	4603      	mov	r3, r0
 800fee6:	429c      	cmp	r4, r3
 800fee8:	d005      	beq.n	800fef6 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800feea:	4b06      	ldr	r3, [pc, #24]	; (800ff04 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800feec:	4a06      	ldr	r2, [pc, #24]	; (800ff08 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800feee:	2160      	movs	r1, #96	; 0x60
 800fef0:	4806      	ldr	r0, [pc, #24]	; (800ff0c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800fef2:	f00e f903 	bl	801e0fc <__assert_func>
 800fef6:	bf00      	nop
    }
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	4618      	mov	r0, r3
 800fefc:	3714      	adds	r7, #20
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd90      	pop	{r4, r7, pc}
 800ff02:	bf00      	nop
 800ff04:	08020224 	.word	0x08020224
 800ff08:	08027cc4 	.word	0x08027cc4
 800ff0c:	08020574 	.word	0x08020574

0800ff10 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800ff1c:	68b9      	ldr	r1, [r7, #8]
 800ff1e:	68f8      	ldr	r0, [r7, #12]
 800ff20:	f000 fbd9 	bl	80106d6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	68b9      	ldr	r1, [r7, #8]
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f000 fc17 	bl	801075c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ff2e:	bf00      	nop
 800ff30:	3710      	adds	r7, #16
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ff36:	b480      	push	{r7}
 800ff38:	b083      	sub	sp, #12
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	3330      	adds	r3, #48	; 0x30
 800ff42:	4618      	mov	r0, r3
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ff4e:	b480      	push	{r7}
 800ff50:	b083      	sub	sp, #12
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	3318      	adds	r3, #24
 800ff70:	4618      	mov	r0, r3
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6839      	ldr	r1, [r7, #0]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f000 fc1e 	bl	80107cc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4618      	mov	r0, r3
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ff9a:	b590      	push	{r4, r7, lr}
 800ff9c:	b087      	sub	sp, #28
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	60f8      	str	r0, [r7, #12]
 800ffa2:	60b9      	str	r1, [r7, #8]
 800ffa4:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f000 fc1e 	bl	80107ea <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800ffae:	4604      	mov	r4, r0
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	68b9      	ldr	r1, [r7, #8]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7ff fccf 	bl	800f95c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800ffbe:	eef0 7a40 	vmov.f32	s15, s0
 800ffc2:	edc7 7a04 	vstr	s15, [r7, #16]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	330c      	adds	r3, #12
 800ffca:	687a      	ldr	r2, [r7, #4]
 800ffcc:	68b9      	ldr	r1, [r7, #8]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 fc16 	bl	8010800 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800ffd4:	eef0 7a40 	vmov.f32	s15, s0
 800ffd8:	edc7 7a05 	vstr	s15, [r7, #20]
 800ffdc:	f107 0214 	add.w	r2, r7, #20
 800ffe0:	f107 0310 	add.w	r3, r7, #16
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7ff fafc 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800ffec:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fff0:	eeb0 0a67 	vmov.f32	s0, s15
 800fff4:	371c      	adds	r7, #28
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd90      	pop	{r4, r7, pc}

0800fffa <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b082      	sub	sp, #8
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
 8010002:	6039      	str	r1, [r7, #0]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6839      	ldr	r1, [r7, #0]
 8010008:	4618      	mov	r0, r3
 801000a:	f000 fc1a 	bl	8010842 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4618      	mov	r0, r3
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6839      	ldr	r1, [r7, #0]
 8010026:	4618      	mov	r0, r3
 8010028:	f000 fc21 	bl	801086e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	4618      	mov	r0, r3
 8010030:	3708      	adds	r7, #8
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 8010036:	b480      	push	{r7}
 8010038:	af00      	add	r7, sp, #0
 801003a:	2300      	movs	r3, #0
 801003c:	4618      	mov	r0, r3
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr

08010046 <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010046:	b5b0      	push	{r4, r5, r7, lr}
 8010048:	b084      	sub	sp, #16
 801004a:	af00      	add	r7, sp, #0
 801004c:	60f8      	str	r0, [r7, #12]
 801004e:	60b9      	str	r1, [r7, #8]
 8010050:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 8010052:	68fc      	ldr	r4, [r7, #12]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	3310      	adds	r3, #16
 8010058:	4618      	mov	r0, r3
 801005a:	f000 fc1c 	bl	8010896 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 801005e:	4602      	mov	r2, r0
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	18d5      	adds	r5, r2, r3
 8010064:	f7ff ffe7 	bl	8010036 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 8010068:	4602      	mov	r2, r0
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4413      	add	r3, r2
 801006e:	461a      	mov	r2, r3
 8010070:	4629      	mov	r1, r5
 8010072:	4620      	mov	r0, r4
 8010074:	f000 fc1b 	bl	80108ae <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 8010078:	eef0 7a40 	vmov.f32	s15, s0
  }
 801007c:	eeb0 0a67 	vmov.f32	s0, s15
 8010080:	3710      	adds	r7, #16
 8010082:	46bd      	mov	sp, r7
 8010084:	bdb0      	pop	{r4, r5, r7, pc}

08010086 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010086:	b580      	push	{r7, lr}
 8010088:	b082      	sub	sp, #8
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801008e:	f7f6 feaa 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010092:	4603      	mov	r3, r0
  }
 8010094:	4618      	mov	r0, r3
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80100a4:	f7f6 fe97 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80100a8:	4603      	mov	r3, r0
  }
 80100aa:	4618      	mov	r0, r3
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80100b2:	b590      	push	{r4, r7, lr}
 80100b4:	b083      	sub	sp, #12
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
 80100ba:	6039      	str	r1, [r7, #0]
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 fc2d 	bl	801091c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 80100c2:	687c      	ldr	r4, [r7, #4]
 80100c4:	6838      	ldr	r0, [r7, #0]
 80100c6:	f000 fc1e 	bl	8010906 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 80100ca:	4603      	mov	r3, r0
 80100cc:	4619      	mov	r1, r3
 80100ce:	4620      	mov	r0, r4
 80100d0:	f000 fc2f 	bl	8010932 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	4618      	mov	r0, r3
 80100d8:	370c      	adds	r7, #12
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd90      	pop	{r4, r7, pc}

080100de <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 80100de:	b580      	push	{r7, lr}
 80100e0:	b082      	sub	sp, #8
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6839      	ldr	r1, [r7, #0]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 fc2f 	bl	8010950 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f000 fc55 	bl	80109a4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 80100fa:	bf00      	nop
  }
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	4618      	mov	r0, r3
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010106:	b5b0      	push	{r4, r5, r7, lr}
 8010108:	b084      	sub	sp, #16
 801010a:	af00      	add	r7, sp, #0
 801010c:	60f8      	str	r0, [r7, #12]
 801010e:	60b9      	str	r1, [r7, #8]
 8010110:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681c      	ldr	r4, [r3, #0]
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f000 fc50 	bl	80109bc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 801011c:	4602      	mov	r2, r0
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	fb03 f502 	mul.w	r5, r3, r2
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f000 fc54 	bl	80109d2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 801012a:	4602      	mov	r2, r0
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	fb02 f303 	mul.w	r3, r2, r3
 8010132:	442b      	add	r3, r5
 8010134:	009b      	lsls	r3, r3, #2
 8010136:	4423      	add	r3, r4
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	ee07 3a90 	vmov	s15, r3
  }
 801013e:	eeb0 0a67 	vmov.f32	s0, s15
 8010142:	3710      	adds	r7, #16
 8010144:	46bd      	mov	sp, r7
 8010146:	bdb0      	pop	{r4, r5, r7, pc}

08010148 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8010150:	f7f6 fe41 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8010154:	4603      	mov	r3, r0
  }
 8010156:	4618      	mov	r0, r3
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 801015e:	b580      	push	{r7, lr}
 8010160:	b082      	sub	sp, #8
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010166:	f7f6 fe3e 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801016a:	4603      	mov	r3, r0
  }
 801016c:	4618      	mov	r0, r3
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8010174:	b590      	push	{r4, r7, lr}
 8010176:	b085      	sub	sp, #20
 8010178:	af00      	add	r7, sp, #0
 801017a:	60f8      	str	r0, [r7, #12]
 801017c:	60b9      	str	r1, [r7, #8]
 801017e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8010180:	68b8      	ldr	r0, [r7, #8]
 8010182:	f7f5 fc68 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8010186:	4604      	mov	r4, r0
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f7f5 fc64 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 801018e:	4603      	mov	r3, r0
 8010190:	461a      	mov	r2, r3
 8010192:	4621      	mov	r1, r4
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f000 fc4b 	bl	8010a30 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd90      	pop	{r4, r7, pc}

080101a2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b086      	sub	sp, #24
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	60f8      	str	r0, [r7, #12]
 80101aa:	60b9      	str	r1, [r7, #8]
 80101ac:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	68b9      	ldr	r1, [r7, #8]
 80101b6:	6978      	ldr	r0, [r7, #20]
 80101b8:	f000 fc68 	bl	8010a8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 80101bc:	bf00      	nop
 80101be:	3718      	adds	r7, #24
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80101c4:	b5b0      	push	{r4, r5, r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	60b9      	str	r1, [r7, #8]
 80101ce:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80101d0:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80101d2:	68b8      	ldr	r0, [r7, #8]
 80101d4:	f000 fc6d 	bl	8010ab2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 80101d8:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80101da:	68b8      	ldr	r0, [r7, #8]
 80101dc:	f000 fc7d 	bl	8010ada <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 80101e0:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	fb02 f303 	mul.w	r3, r2, r3
 80101e8:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80101ea:	441d      	add	r5, r3
 80101ec:	68b8      	ldr	r0, [r7, #8]
 80101ee:	f7f5 fd76 	bl	8005cde <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80101f2:	4602      	mov	r2, r0
 80101f4:	2301      	movs	r3, #1
 80101f6:	4629      	mov	r1, r5
 80101f8:	4620      	mov	r0, r4
 80101fa:	f000 fca3 	bl	8010b44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	3308      	adds	r3, #8
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	6812      	ldr	r2, [r2, #0]
 8010206:	601a      	str	r2, [r3, #0]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	330c      	adds	r3, #12
 801020c:	2100      	movs	r1, #0
 801020e:	4618      	mov	r0, r3
 8010210:	f7fd fe30 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	3310      	adds	r3, #16
 8010218:	6879      	ldr	r1, [r7, #4]
 801021a:	4618      	mov	r0, r3
 801021c:	f7fd fe2a 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	f000 fccd 	bl	8010bc0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	4618      	mov	r0, r3
 801022a:	3710      	adds	r7, #16
 801022c:	46bd      	mov	sp, r7
 801022e:	bdb0      	pop	{r4, r5, r7, pc}

08010230 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6839      	ldr	r1, [r7, #0]
 801023e:	4618      	mov	r0, r3
 8010240:	f000 fcce 	bl	8010be0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	4618      	mov	r0, r3
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801024e:	b580      	push	{r7, lr}
 8010250:	b084      	sub	sp, #16
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010258:	6839      	ldr	r1, [r7, #0]
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 fcd2 	bl	8010c04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8010260:	eef0 7a40 	vmov.f32	s15, s0
 8010264:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010268:	6839      	ldr	r1, [r7, #0]
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 fcdb 	bl	8010c26 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8010270:	eef0 7a40 	vmov.f32	s15, s0
 8010274:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010278:	f107 020c 	add.w	r2, r7, #12
 801027c:	f107 0308 	add.w	r3, r7, #8
 8010280:	4619      	mov	r1, r3
 8010282:	6838      	ldr	r0, [r7, #0]
 8010284:	f7f9 f96d 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8010288:	eef0 7a40 	vmov.f32	s15, s0
  }
 801028c:	eeb0 0a67 	vmov.f32	s0, s15
 8010290:	3710      	adds	r7, #16
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010296:	b580      	push	{r7, lr}
 8010298:	b082      	sub	sp, #8
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801029e:	2201      	movs	r2, #1
 80102a0:	2102      	movs	r1, #2
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f7fc fdaf 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 fce0 	bl	8010c6e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 80102ae:	bf00      	nop
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 fcfc 	bl	8010cbe <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80102c6:	6838      	ldr	r0, [r7, #0]
 80102c8:	f000 fce1 	bl	8010c8e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 80102cc:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 80102d2:	6838      	ldr	r0, [r7, #0]
 80102d4:	f000 fce7 	bl	8010ca6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 80102d8:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	3304      	adds	r3, #4
 80102de:	6812      	ldr	r2, [r2, #0]
 80102e0:	601a      	str	r2, [r3, #0]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 80102ec:	4619      	mov	r1, r3
 80102ee:	4610      	mov	r0, r2
 80102f0:	f7f7 fc3e 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 80102fe:	4619      	mov	r1, r3
 8010300:	4610      	mov	r0, r2
 8010302:	f000 fce7 	bl	8010cd4 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8010306:	6838      	ldr	r0, [r7, #0]
 8010308:	f000 fcc1 	bl	8010c8e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 801030c:	4603      	mov	r3, r0
 801030e:	4618      	mov	r0, r3
 8010310:	f7f4 ff8c 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010314:	4602      	mov	r2, r0
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	611a      	str	r2, [r3, #16]
  }
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801032c:	2100      	movs	r1, #0
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 fcdf 	bl	8010cf2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 fcff 	bl	8010d38 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 801033a:	bf00      	nop
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010342:	b480      	push	{r7}
 8010344:	b083      	sub	sp, #12
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	6039      	str	r1, [r7, #0]
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4618      	mov	r0, r3
 8010364:	f7f9 f944 	bl	80095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	4618      	mov	r0, r3
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010372:	b580      	push	{r7, lr}
 8010374:	b082      	sub	sp, #8
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4618      	mov	r0, r3
 801037e:	f7ff ffeb 	bl	8010358 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	4618      	mov	r0, r3
 8010386:	3708      	adds	r7, #8
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4618      	mov	r0, r3
 8010398:	f7ff ffeb 	bl	8010372 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4618      	mov	r0, r3
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 80103a6:	b580      	push	{r7, lr}
 80103a8:	b082      	sub	sp, #8
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7f9 f91d 	bl	80095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	330c      	adds	r3, #12
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7ff ffea 	bl	80103a6 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	3304      	adds	r3, #4
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7ff ffd8 	bl	801038c <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4618      	mov	r0, r3
 80103e0:	3708      	adds	r7, #8
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b082      	sub	sp, #8
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff ffe5 	bl	80103c0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f000 fcbc 	bl	8010d74 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4618      	mov	r0, r3
 8010400:	3708      	adds	r7, #8
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010406:	b580      	push	{r7, lr}
 8010408:	b082      	sub	sp, #8
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff ffe8 	bl	80103e6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	4618      	mov	r0, r3
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8010420:	b580      	push	{r7, lr}
 8010422:	b090      	sub	sp, #64	; 0x40
 8010424:	af02      	add	r7, sp, #8
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801042c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010430:	68b9      	ldr	r1, [r7, #8]
 8010432:	4618      	mov	r0, r3
 8010434:	f000 fc8f 	bl	8010d56 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	68b9      	ldr	r1, [r7, #8]
 801043c:	68f8      	ldr	r0, [r7, #12]
 801043e:	f000 fca5 	bl	8010d8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8010442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010446:	68f9      	ldr	r1, [r7, #12]
 8010448:	4618      	mov	r0, r3
 801044a:	f7fa f9ea 	bl	800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f000 f8aa 	bl	80105a8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 8010454:	4603      	mov	r3, r0
 8010456:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801045a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 801045e:	f107 0014 	add.w	r0, r7, #20
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f000 fcdb 	bl	8010e20 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 801046a:	f107 0314 	add.w	r3, r7, #20
 801046e:	4618      	mov	r0, r3
 8010470:	f000 fcf0 	bl	8010e54 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 8010474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010478:	4618      	mov	r0, r3
 801047a:	f7f9 f8b9 	bl	80095f0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 801047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010482:	4618      	mov	r0, r3
 8010484:	f7ff ffbf 	bl	8010406 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 8010488:	bf00      	nop
 801048a:	3738      	adds	r7, #56	; 0x38
 801048c:	46bd      	mov	sp, r7
 801048e:	bd80      	pop	{r7, pc}

08010490 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8010490:	b590      	push	{r4, r7, lr}
 8010492:	b083      	sub	sp, #12
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f000 fcf0 	bl	8010e80 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 80104a0:	687c      	ldr	r4, [r7, #4]
 80104a2:	6838      	ldr	r0, [r7, #0]
 80104a4:	f000 fce1 	bl	8010e6a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 80104a8:	4603      	mov	r3, r0
 80104aa:	4619      	mov	r1, r3
 80104ac:	4620      	mov	r0, r4
 80104ae:	f000 fcf2 	bl	8010e96 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4618      	mov	r0, r3
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd90      	pop	{r4, r7, pc}

080104bc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6839      	ldr	r1, [r7, #0]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f000 fcf2 	bl	8010eb4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f000 fd18 	bl	8010f08 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 80104d8:	bf00      	nop
  }
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4618      	mov	r0, r3
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80104ec:	f7f6 fc73 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80104f0:	4603      	mov	r3, r0
  }
 80104f2:	4618      	mov	r0, r3
 80104f4:	3708      	adds	r7, #8
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}

080104fa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80104fa:	b580      	push	{r7, lr}
 80104fc:	b082      	sub	sp, #8
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010502:	f7f6 fc70 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010506:	4603      	mov	r3, r0
  }
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	4618      	mov	r0, r3
 8010520:	f7f5 fe7f 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010524:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	4618      	mov	r0, r3
 801052a:	f7f5 fe85 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801052e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	4618      	mov	r0, r3
 8010534:	f7f5 fe75 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010538:	4602      	mov	r2, r0
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	4293      	cmp	r3, r2
 801053e:	d107      	bne.n	8010550 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	4618      	mov	r0, r3
 8010544:	f7f5 fe78 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010548:	4602      	mov	r2, r0
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	4293      	cmp	r3, r2
 801054e:	d001      	beq.n	8010554 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 8010550:	2301      	movs	r3, #1
 8010552:	e000      	b.n	8010556 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 8010554:	2300      	movs	r3, #0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d005      	beq.n	8010566 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	6979      	ldr	r1, [r7, #20]
 8010560:	4618      	mov	r0, r3
 8010562:	f7fd f9af 	bl	800d8c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	4618      	mov	r0, r3
 801056a:	f7f5 fe5a 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 801056e:	4602      	mov	r2, r0
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	4293      	cmp	r3, r2
 8010574:	d107      	bne.n	8010586 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	4618      	mov	r0, r3
 801057a:	f7f5 fe5d 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801057e:	4602      	mov	r2, r0
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	4293      	cmp	r3, r2
 8010584:	d006      	beq.n	8010594 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 8010586:	4b05      	ldr	r3, [pc, #20]	; (801059c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010588:	4a05      	ldr	r2, [pc, #20]	; (80105a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 801058a:	f240 21fd 	movw	r1, #765	; 0x2fd
 801058e:	4805      	ldr	r0, [pc, #20]	; (80105a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8010590:	f00d fdb4 	bl	801e0fc <__assert_func>
}
 8010594:	bf00      	nop
 8010596:	3718      	adds	r7, #24
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	080225dc 	.word	0x080225dc
 80105a0:	08027dec 	.word	0x08027dec
 80105a4:	080226f0 	.word	0x080226f0

080105a8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4618      	mov	r0, r3
 80105b4:	370c      	adds	r7, #12
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr

080105be <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80105be:	b480      	push	{r7}
 80105c0:	b085      	sub	sp, #20
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	60f8      	str	r0, [r7, #12]
 80105c6:	60b9      	str	r1, [r7, #8]
 80105c8:	607a      	str	r2, [r7, #4]
 80105ca:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	68ba      	ldr	r2, [r7, #8]
 80105d0:	601a      	str	r2, [r3, #0]
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	605a      	str	r2, [r3, #4]
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	609a      	str	r2, [r3, #8]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	69ba      	ldr	r2, [r7, #24]
 80105e2:	60da      	str	r2, [r3, #12]
  }
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	4618      	mov	r0, r3
 80105e8:	3714      	adds	r7, #20
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr

080105f2 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b082      	sub	sp, #8
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 fc90 	bl	8010f20 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 8010600:	bf00      	nop
 8010602:	3708      	adds	r7, #8
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7f5 fcf1 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8010616:	4602      	mov	r2, r0
 8010618:	f107 030c 	add.w	r3, r7, #12
 801061c:	4611      	mov	r1, r2
 801061e:	4618      	mov	r0, r3
 8010620:	f000 fca5 	bl	8010f6e <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 8010624:	68fb      	ldr	r3, [r7, #12]
}
 8010626:	4618      	mov	r0, r3
 8010628:	3710      	adds	r7, #16
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801062e:	b5b0      	push	{r4, r5, r7, lr}
 8010630:	b086      	sub	sp, #24
 8010632:	af00      	add	r7, sp, #0
 8010634:	60f8      	str	r0, [r7, #12]
 8010636:	60b9      	str	r1, [r7, #8]
 8010638:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 801063a:	68b8      	ldr	r0, [r7, #8]
 801063c:	f000 fca7 	bl	8010f8e <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8010640:	4604      	mov	r4, r0
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7f5 f83f 	bl	80056c6 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8010648:	4605      	mov	r5, r0
 801064a:	f107 0314 	add.w	r3, r7, #20
 801064e:	4618      	mov	r0, r3
 8010650:	f7f5 f898 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8010654:	f107 0314 	add.w	r3, r7, #20
 8010658:	462a      	mov	r2, r5
 801065a:	4621      	mov	r1, r4
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f000 fcd5 	bl	801100c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 8010662:	68f8      	ldr	r0, [r7, #12]
 8010664:	3718      	adds	r7, #24
 8010666:	46bd      	mov	sp, r7
 8010668:	bdb0      	pop	{r4, r5, r7, pc}

0801066a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801066a:	b580      	push	{r7, lr}
 801066c:	b082      	sub	sp, #8
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f000 fd18 	bl	80110a8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010678:	4603      	mov	r3, r0
 801067a:	4618      	mov	r0, r3
 801067c:	f000 fd1f 	bl	80110be <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8010680:	4603      	mov	r3, r0
 8010682:	4618      	mov	r0, r3
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 801068a:	b590      	push	{r4, r7, lr}
 801068c:	b085      	sub	sp, #20
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f000 fd08 	bl	80110a8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8010698:	4604      	mov	r4, r0
 801069a:	f107 030c 	add.w	r3, r7, #12
 801069e:	4618      	mov	r0, r3
 80106a0:	f7f5 fb67 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80106a4:	f107 030c 	add.w	r3, r7, #12
 80106a8:	4619      	mov	r1, r3
 80106aa:	4620      	mov	r0, r4
 80106ac:	f000 fd88 	bl	80111c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80106b0:	eef0 7a40 	vmov.f32	s15, s0
 80106b4:	bf00      	nop
}
 80106b6:	eeb0 0a67 	vmov.f32	s0, s15
 80106ba:	3714      	adds	r7, #20
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd90      	pop	{r4, r7, pc}

080106c0 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
    }
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	4618      	mov	r0, r3
 80106cc:	370c      	adds	r7, #12
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr

080106d6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b082      	sub	sp, #8
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
 80106de:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7f4 fdad 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	dd08      	ble.n	8010700 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7f4 fd9b 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	dd01      	ble.n	8010700 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 80106fc:	2301      	movs	r3, #1
 80106fe:	e000      	b.n	8010702 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 8010700:	2300      	movs	r3, #0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d003      	beq.n	801070e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8010706:	6839      	ldr	r1, [r7, #0]
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f000 fd9f 	bl	801124c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 801070e:	bf00      	nop
 8010710:	3708      	adds	r7, #8
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}

08010716 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010716:	b580      	push	{r7, lr}
 8010718:	b082      	sub	sp, #8
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	330c      	adds	r3, #12
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe fe48 	bl	800f3b8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3308      	adds	r3, #8
 801072c:	4618      	mov	r0, r3
 801072e:	f7f4 ff9a 	bl	8005666 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 fda4 	bl	8011280 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	4618      	mov	r0, r3
 801073c:	3708      	adds	r7, #8
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010742:	b580      	push	{r7, lr}
 8010744:	b082      	sub	sp, #8
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	4618      	mov	r0, r3
 801074e:	f7ff ffe2 	bl	8010716 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 801075c:	b580      	push	{r7, lr}
 801075e:	b090      	sub	sp, #64	; 0x40
 8010760:	af02      	add	r7, sp, #8
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801076c:	68b9      	ldr	r1, [r7, #8]
 801076e:	4618      	mov	r0, r3
 8010770:	f000 fd77 	bl	8011262 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8010774:	687a      	ldr	r2, [r7, #4]
 8010776:	68b9      	ldr	r1, [r7, #8]
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	f000 fda9 	bl	80112d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 801077e:	f107 0320 	add.w	r3, r7, #32
 8010782:	68f9      	ldr	r1, [r7, #12]
 8010784:	4618      	mov	r0, r3
 8010786:	f7f7 f9f3 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 801078a:	68f8      	ldr	r0, [r7, #12]
 801078c:	f7f7 fa58 	bl	8007c40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8010790:	4603      	mov	r3, r0
 8010792:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010796:	f107 0120 	add.w	r1, r7, #32
 801079a:	f107 0010 	add.w	r0, r7, #16
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f000 fdc3 	bl	801132c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80107a6:	f107 0310 	add.w	r3, r7, #16
 80107aa:	4618      	mov	r0, r3
 80107ac:	f000 fdd8 	bl	8011360 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 80107b0:	f107 0320 	add.w	r3, r7, #32
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7f6 ffcc 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80107ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107be:	4618      	mov	r0, r3
 80107c0:	f7ff ffbf 	bl	8010742 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 80107c4:	bf00      	nop
 80107c6:	3738      	adds	r7, #56	; 0x38
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6839      	ldr	r1, [r7, #0]
 80107da:	4618      	mov	r0, r3
 80107dc:	f000 fdcb 	bl	8011376 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4618      	mov	r0, r3
 80107e4:	3708      	adds	r7, #8
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80107ea:	b480      	push	{r7}
 80107ec:	b083      	sub	sp, #12
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4618      	mov	r0, r3
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8010800:	b5b0      	push	{r4, r5, r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	60f8      	str	r0, [r7, #12]
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681c      	ldr	r4, [r3, #0]
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f000 fdc4 	bl	801139e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8010816:	4602      	mov	r2, r0
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	fb03 f502 	mul.w	r5, r3, r2
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f000 fdc8 	bl	80113b4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8010824:	4602      	mov	r2, r0
 8010826:	68bb      	ldr	r3, [r7, #8]
 8010828:	fb02 f303 	mul.w	r3, r2, r3
 801082c:	442b      	add	r3, r5
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	4423      	add	r3, r4
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	ee07 3a90 	vmov	s15, r3
  }
 8010838:	eeb0 0a67 	vmov.f32	s0, s15
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bdb0      	pop	{r4, r5, r7, pc}

08010842 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8010842:	b590      	push	{r4, r7, lr}
 8010844:	b083      	sub	sp, #12
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
 801084a:	6039      	str	r1, [r7, #0]
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f000 fdc7 	bl	80113e0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 8010852:	687c      	ldr	r4, [r7, #4]
 8010854:	6838      	ldr	r0, [r7, #0]
 8010856:	f000 fdb8 	bl	80113ca <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 801085a:	4603      	mov	r3, r0
 801085c:	4619      	mov	r1, r3
 801085e:	4620      	mov	r0, r4
 8010860:	f000 fdc9 	bl	80113f6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	370c      	adds	r7, #12
 801086a:	46bd      	mov	sp, r7
 801086c:	bd90      	pop	{r4, r7, pc}

0801086e <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 801086e:	b580      	push	{r7, lr}
 8010870:	b082      	sub	sp, #8
 8010872:	af00      	add	r7, sp, #0
 8010874:	6078      	str	r0, [r7, #4]
 8010876:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	4618      	mov	r0, r3
 801087e:	f000 fdc9 	bl	8011414 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	4618      	mov	r0, r3
 8010886:	f000 fdef 	bl	8011468 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 801088a:	bf00      	nop
  }
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	4618      	mov	r0, r3
 8010890:	3708      	adds	r7, #8
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}

08010896 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 8010896:	b480      	push	{r7}
 8010898:	b083      	sub	sp, #12
 801089a:	af00      	add	r7, sp, #0
 801089c:	6078      	str	r0, [r7, #4]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4618      	mov	r0, r3
 80108a4:	370c      	adds	r7, #12
 80108a6:	46bd      	mov	sp, r7
 80108a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ac:	4770      	bx	lr

080108ae <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80108ae:	b5b0      	push	{r4, r5, r7, lr}
 80108b0:	b086      	sub	sp, #24
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	60f8      	str	r0, [r7, #12]
 80108b6:	60b9      	str	r1, [r7, #8]
 80108b8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	4618      	mov	r0, r3
 80108be:	f000 fddf 	bl	8011480 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 80108c2:	4604      	mov	r4, r0
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	3304      	adds	r3, #4
 80108c8:	687a      	ldr	r2, [r7, #4]
 80108ca:	68b9      	ldr	r1, [r7, #8]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f000 fde2 	bl	8011496 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 80108d2:	4605      	mov	r5, r0
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	3308      	adds	r3, #8
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	68b9      	ldr	r1, [r7, #8]
 80108dc:	4618      	mov	r0, r3
 80108de:	f000 fdf2 	bl	80114c6 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 80108e2:	eef0 7a40 	vmov.f32	s15, s0
 80108e6:	edc7 7a05 	vstr	s15, [r7, #20]
 80108ea:	f107 0314 	add.w	r3, r7, #20
 80108ee:	461a      	mov	r2, r3
 80108f0:	4629      	mov	r1, r5
 80108f2:	4620      	mov	r0, r4
 80108f4:	f7fe fe76 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80108f8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80108fc:	eeb0 0a67 	vmov.f32	s0, s15
 8010900:	3718      	adds	r7, #24
 8010902:	46bd      	mov	sp, r7
 8010904:	bdb0      	pop	{r4, r5, r7, pc}

08010906 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010906:	b480      	push	{r7}
 8010908:	b083      	sub	sp, #12
 801090a:	af00      	add	r7, sp, #0
 801090c:	6078      	str	r0, [r7, #4]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	4618      	mov	r0, r3
 8010912:	370c      	adds	r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091a:	4770      	bx	lr

0801091c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801091c:	b480      	push	{r7}
 801091e:	b083      	sub	sp, #12
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	4618      	mov	r0, r3
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	6039      	str	r1, [r7, #0]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6839      	ldr	r1, [r7, #0]
 8010940:	4618      	mov	r0, r3
 8010942:	f000 fdd4 	bl	80114ee <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4618      	mov	r0, r3
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010950:	b590      	push	{r4, r7, lr}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 fdf2 	bl	8011544 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	4618      	mov	r0, r3
 8010964:	f000 f81e 	bl	80109a4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010968:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	1d1c      	adds	r4, r3, #4
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	4618      	mov	r0, r3
 8010976:	f000 fdc9 	bl	801150c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 801097a:	4603      	mov	r3, r0
 801097c:	4619      	mov	r1, r3
 801097e:	4620      	mov	r0, r4
 8010980:	f7f6 fa04 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	1d5c      	adds	r4, r3, #5
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	4618      	mov	r0, r3
 801098c:	f000 fdcc 	bl	8011528 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8010990:	4603      	mov	r3, r0
 8010992:	4619      	mov	r1, r3
 8010994:	4620      	mov	r0, r4
 8010996:	f7f6 f9df 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	4618      	mov	r0, r3
 801099e:	370c      	adds	r7, #12
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd90      	pop	{r4, r7, pc}

080109a4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	4618      	mov	r0, r3
 80109b2:	370c      	adds	r7, #12
 80109b4:	46bd      	mov	sp, r7
 80109b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ba:	4770      	bx	lr

080109bc <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80109c4:	f7f6 fa07 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80109c8:	4603      	mov	r3, r0
  }
 80109ca:	4618      	mov	r0, r3
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b082      	sub	sp, #8
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80109da:	f7f6 fa04 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80109de:	4603      	mov	r3, r0
  }
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f000 fdb2 	bl	801155a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	4618      	mov	r0, r3
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7ff ffed 	bl	80109e8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	4618      	mov	r0, r3
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff ffed 	bl	8010a00 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8010a30:	b590      	push	{r4, r7, lr}
 8010a32:	b085      	sub	sp, #20
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	607a      	str	r2, [r7, #4]
 8010a3c:	68f8      	ldr	r0, [r7, #12]
 8010a3e:	f7ff ffeb 	bl	8010a18 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	68ba      	ldr	r2, [r7, #8]
 8010a46:	601a      	str	r2, [r3, #0]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7f4 fbeb 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010a56:	4604      	mov	r4, r0
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7f4 fbf1 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010a60:	4603      	mov	r3, r0
 8010a62:	429c      	cmp	r4, r3
 8010a64:	d005      	beq.n	8010a72 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 8010a66:	4b06      	ldr	r3, [pc, #24]	; (8010a80 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 8010a68:	4a06      	ldr	r2, [pc, #24]	; (8010a84 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 8010a6a:	2160      	movs	r1, #96	; 0x60
 8010a6c:	4806      	ldr	r0, [pc, #24]	; (8010a88 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 8010a6e:	f00d fb45 	bl	801e0fc <__assert_func>
 8010a72:	bf00      	nop
    }
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	4618      	mov	r0, r3
 8010a78:	3714      	adds	r7, #20
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd90      	pop	{r4, r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	08020224 	.word	0x08020224
 8010a84:	08027ed0 	.word	0x08027ed0
 8010a88:	08020574 	.word	0x08020574

08010a8c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	60f8      	str	r0, [r7, #12]
 8010a94:	60b9      	str	r1, [r7, #8]
 8010a96:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8010a98:	68b9      	ldr	r1, [r7, #8]
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	f000 fd68 	bl	8011570 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8010aa0:	687a      	ldr	r2, [r7, #4]
 8010aa2:	68b9      	ldr	r1, [r7, #8]
 8010aa4:	68f8      	ldr	r0, [r7, #12]
 8010aa6:	f000 fda6 	bl	80115f6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8010aaa:	bf00      	nop
 8010aac:	3710      	adds	r7, #16
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}

08010ab2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b082      	sub	sp, #8
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f7f5 f8d2 	bl	8005c64 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7fd fadc 	bl	800e080 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7f7 fcf2 	bl	80084b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3708      	adds	r7, #8
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b082      	sub	sp, #8
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7f5 f8be 	bl	8005c64 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fd fac8 	bl	800e080 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010af0:	4603      	mov	r3, r0
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fd f968 	bl	800ddc8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8010af8:	4603      	mov	r3, r0
 8010afa:	4618      	mov	r0, r3
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b082      	sub	sp, #8
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7f5 f8aa 	bl	8005c64 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8010b10:	4603      	mov	r3, r0
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fd fab4 	bl	800e080 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7f7 ff04 	bl	8008928 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8010b20:	4603      	mov	r3, r0
 8010b22:	4618      	mov	r0, r3
 8010b24:	3708      	adds	r7, #8
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b082      	sub	sp, #8
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 fd97 	bl	8011666 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3708      	adds	r7, #8
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
	...

08010b44 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
 8010b50:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f7ff ffe9 	bl	8010b2a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	601a      	str	r2, [r3, #0]
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	3304      	adds	r3, #4
 8010b62:	6879      	ldr	r1, [r7, #4]
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7f6 f8f7 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	3305      	adds	r3, #5
 8010b6e:	6839      	ldr	r1, [r7, #0]
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7f6 f90b 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d011      	beq.n	8010ba0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	db08      	blt.n	8010b94 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2b03      	cmp	r3, #3
 8010b86:	d105      	bne.n	8010b94 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	db02      	blt.n	8010b94 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d005      	beq.n	8010ba0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010b94:	4b07      	ldr	r3, [pc, #28]	; (8010bb4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8010b96:	4a08      	ldr	r2, [pc, #32]	; (8010bb8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8010b98:	21b0      	movs	r1, #176	; 0xb0
 8010b9a:	4808      	ldr	r0, [pc, #32]	; (8010bbc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8010b9c:	f00d faae 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f000 fd6a 	bl	801167c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	4618      	mov	r0, r3
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	08026688 	.word	0x08026688
 8010bb8:	08027ff8 	.word	0x08027ff8
 8010bbc:	08026838 	.word	0x08026838

08010bc0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7ff ff84 	bl	8010ada <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010bd2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	615a      	str	r2, [r3, #20]
    }
 8010bd8:	bf00      	nop
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 fd51 	bl	8011692 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6839      	ldr	r1, [r7, #0]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f000 fd57 	bl	80116a8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010c0e:	2200      	movs	r2, #0
 8010c10:	2100      	movs	r1, #0
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 fd70 	bl	80116f8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010c18:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b084      	sub	sp, #16
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
 8010c2e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010c30:	6839      	ldr	r1, [r7, #0]
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f000 fd73 	bl	801171e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8010c38:	eef0 7a40 	vmov.f32	s15, s0
 8010c3c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010c40:	6839      	ldr	r1, [r7, #0]
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f000 fd7c 	bl	8011740 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8010c48:	eef0 7a40 	vmov.f32	s15, s0
 8010c4c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010c50:	f107 020c 	add.w	r2, r7, #12
 8010c54:	f107 0308 	add.w	r3, r7, #8
 8010c58:	4619      	mov	r1, r3
 8010c5a:	6838      	ldr	r0, [r7, #0]
 8010c5c:	f7f8 fc81 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8010c60:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010c64:	eeb0 0a67 	vmov.f32	s0, s15
 8010c68:	3710      	adds	r7, #16
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b082      	sub	sp, #8
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8010c76:	2202      	movs	r2, #2
 8010c78:	2102      	movs	r1, #2
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f7fc f8c3 	bl	800ce06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 fd6e 	bl	8011762 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 8010c86:	bf00      	nop
 8010c88:	3708      	adds	r7, #8
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}

08010c8e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8010c8e:	b480      	push	{r7}
 8010c90:	b083      	sub	sp, #12
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6078      	str	r0, [r7, #4]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	370c      	adds	r7, #12
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr

08010ca6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8010ca6:	b480      	push	{r7}
 8010ca8:	b083      	sub	sp, #12
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	3304      	adds	r3, #4
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	370c      	adds	r7, #12
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr

08010cbe <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010cbe:	b480      	push	{r7}
 8010cc0:	b083      	sub	sp, #12
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	370c      	adds	r7, #12
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6839      	ldr	r1, [r7, #0]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f000 fd47 	bl	8011776 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010cf2:	b5b0      	push	{r4, r5, r7, lr}
 8010cf4:	b084      	sub	sp, #16
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
 8010cfa:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	689c      	ldr	r4, [r3, #8]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	6839      	ldr	r1, [r7, #0]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7f7 fe81 	bl	8008a0e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8010d0c:	4605      	mov	r5, r0
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	6839      	ldr	r1, [r7, #0]
 8010d14:	4618      	mov	r0, r3
 8010d16:	f000 fd44 	bl	80117a2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 8010d1a:	eef0 7a40 	vmov.f32	s15, s0
 8010d1e:	edc7 7a03 	vstr	s15, [r7, #12]
 8010d22:	f107 030c 	add.w	r3, r7, #12
 8010d26:	461a      	mov	r2, r3
 8010d28:	4629      	mov	r1, r5
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f7f7 fe28 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010d30:	bf00      	nop
 8010d32:	3710      	adds	r7, #16
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bdb0      	pop	{r4, r5, r7, pc}

08010d38 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010d40:	2101      	movs	r1, #1
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f7ff ffd5 	bl	8010cf2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 fd63 	bl	8011814 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 8010d4e:	bf00      	nop
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
 8010d5e:	6039      	str	r1, [r7, #0]
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6839      	ldr	r1, [r7, #0]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f000 fd64 	bl	8011832 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3708      	adds	r7, #8
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010d74:	b480      	push	{r7}
 8010d76:	b083      	sub	sp, #12
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	370c      	adds	r7, #12
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr
	...

08010d8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8010d98:	68b8      	ldr	r0, [r7, #8]
 8010d9a:	f7f5 faa4 	bl	80062e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010d9e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010da0:	68b8      	ldr	r0, [r7, #8]
 8010da2:	f7f5 faad 	bl	8006300 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010da6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7f5 fa39 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010db0:	4602      	mov	r2, r0
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d107      	bne.n	8010dc8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7f5 fa3c 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d001      	beq.n	8010dcc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8010dc8:	2301      	movs	r3, #1
 8010dca:	e000      	b.n	8010dce <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010dcc:	2300      	movs	r3, #0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d005      	beq.n	8010dde <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	693a      	ldr	r2, [r7, #16]
 8010dd6:	6979      	ldr	r1, [r7, #20]
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fc fd73 	bl	800d8c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f5 fa1e 	bl	8006222 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010de6:	4602      	mov	r2, r0
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d107      	bne.n	8010dfe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7f5 fa21 	bl	8006238 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010df6:	4602      	mov	r2, r0
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d006      	beq.n	8010e0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8010dfe:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8010e00:	4a05      	ldr	r2, [pc, #20]	; (8010e18 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8010e02:	f240 21fd 	movw	r1, #765	; 0x2fd
 8010e06:	4805      	ldr	r0, [pc, #20]	; (8010e1c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8010e08:	f00d f978 	bl	801e0fc <__assert_func>
}
 8010e0c:	bf00      	nop
 8010e0e:	3718      	adds	r7, #24
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}
 8010e14:	080225dc 	.word	0x080225dc
 8010e18:	08028110 	.word	0x08028110
 8010e1c:	080226f0 	.word	0x080226f0

08010e20 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8010e20:	b480      	push	{r7}
 8010e22:	b085      	sub	sp, #20
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	607a      	str	r2, [r7, #4]
 8010e2c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	68ba      	ldr	r2, [r7, #8]
 8010e32:	601a      	str	r2, [r3, #0]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	605a      	str	r2, [r3, #4]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	683a      	ldr	r2, [r7, #0]
 8010e3e:	609a      	str	r2, [r3, #8]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	69ba      	ldr	r2, [r7, #24]
 8010e44:	60da      	str	r2, [r3, #12]
  }
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3714      	adds	r7, #20
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 fcfa 	bl	8011856 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 8010e62:	bf00      	nop
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8010e6a:	b480      	push	{r7}
 8010e6c:	b083      	sub	sp, #12
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4618      	mov	r0, r3
 8010e76:	370c      	adds	r7, #12
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7e:	4770      	bx	lr

08010e80 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010e80:	b480      	push	{r7}
 8010e82:	b083      	sub	sp, #12
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr

08010e96 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b082      	sub	sp, #8
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
 8010e9e:	6039      	str	r1, [r7, #0]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6839      	ldr	r1, [r7, #0]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f000 fce5 	bl	8011874 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	4618      	mov	r0, r3
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010eb4:	b590      	push	{r4, r7, lr}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 fd03 	bl	80118ca <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f000 f81e 	bl	8010f08 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010ecc:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	1d1c      	adds	r4, r3, #4
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f000 fcda 	bl	8011892 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f7f5 ff52 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	1d5c      	adds	r4, r3, #5
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f000 fcdd 	bl	80118ae <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	4620      	mov	r0, r4
 8010efa:	f7f5 ff47 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4618      	mov	r0, r3
 8010f02:	370c      	adds	r7, #12
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd90      	pop	{r4, r7, pc}

08010f08 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	4618      	mov	r0, r3
 8010f16:	370c      	adds	r7, #12
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1e:	4770      	bx	lr

08010f20 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010f28:	2100      	movs	r1, #0
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 fcd8 	bl	80118e0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f000 fcf3 	bl	801191c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 8010f36:	bf00      	nop
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}

08010f3e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8010f3e:	b580      	push	{r7, lr}
 8010f40:	b082      	sub	sp, #8
 8010f42:	af00      	add	r7, sp, #0
 8010f44:	6078      	str	r0, [r7, #4]
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 fcf2 	bl	8011930 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b082      	sub	sp, #8
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7ff ffed 	bl	8010f3e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	4618      	mov	r0, r3
 8010f68:	3708      	adds	r7, #8
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b082      	sub	sp, #8
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
 8010f76:	6039      	str	r1, [r7, #0]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f7ff ffec 	bl	8010f56 <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	683a      	ldr	r2, [r7, #0]
 8010f82:	601a      	str	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	4618      	mov	r0, r3
 8010f88:	3708      	adds	r7, #8
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}

08010f8e <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010f8e:	b480      	push	{r7}
 8010f90:	b083      	sub	sp, #12
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6078      	str	r0, [r7, #4]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa2:	4770      	bx	lr

08010fa4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 fcca 	bl	8011946 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3708      	adds	r7, #8
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7ff ffed 	bl	8010fa4 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f4 fae5 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7f4 fae2 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8011002:	4603      	mov	r3, r0
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 801100c:	b590      	push	{r4, r7, lr}
 801100e:	b085      	sub	sp, #20
 8011010:	af00      	add	r7, sp, #0
 8011012:	60f8      	str	r0, [r7, #12]
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
 8011018:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	f7ff ffce 	bl	8010fbc <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	68ba      	ldr	r2, [r7, #8]
 8011024:	6812      	ldr	r2, [r2, #0]
 8011026:	601a      	str	r2, [r3, #0]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	605a      	str	r2, [r3, #4]
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	3308      	adds	r3, #8
 8011032:	6839      	ldr	r1, [r7, #0]
 8011034:	4618      	mov	r0, r3
 8011036:	f7f4 fc2f 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 801103a:	68b8      	ldr	r0, [r7, #8]
 801103c:	f7ff ffca 	bl	8010fd4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8011040:	4604      	mov	r4, r0
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	4618      	mov	r0, r3
 8011046:	f7f4 f9a2 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 801104a:	4603      	mov	r3, r0
 801104c:	429c      	cmp	r4, r3
 801104e:	d10a      	bne.n	8011066 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8011050:	68b8      	ldr	r0, [r7, #8]
 8011052:	f7ff ffcd 	bl	8010ff0 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011056:	4604      	mov	r4, r0
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	4618      	mov	r0, r3
 801105c:	f7f4 f98c 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8011060:	4603      	mov	r3, r0
 8011062:	429c      	cmp	r4, r3
 8011064:	d005      	beq.n	8011072 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 8011066:	4b05      	ldr	r3, [pc, #20]	; (801107c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 8011068:	4a05      	ldr	r2, [pc, #20]	; (8011080 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 801106a:	2174      	movs	r1, #116	; 0x74
 801106c:	4805      	ldr	r0, [pc, #20]	; (8011084 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 801106e:	f00d f845 	bl	801e0fc <__assert_func>
    }
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	4618      	mov	r0, r3
 8011076:	3714      	adds	r7, #20
 8011078:	46bd      	mov	sp, r7
 801107a:	bd90      	pop	{r4, r7, pc}
 801107c:	0801ff64 	.word	0x0801ff64
 8011080:	080282d4 	.word	0x080282d4
 8011084:	080201c8 	.word	0x080201c8

08011088 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 f809 	bl	80110a8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8011096:	4603      	mov	r3, r0
 8011098:	4618      	mov	r0, r3
 801109a:	f000 fc5f 	bl	801195c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 801109e:	4603      	mov	r3, r0
 80110a0:	4618      	mov	r0, r3
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80110a8:	b480      	push	{r7}
 80110aa:	b083      	sub	sp, #12
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4618      	mov	r0, r3
 80110b4:	370c      	adds	r7, #12
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr

080110be <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80110be:	b580      	push	{r7, lr}
 80110c0:	b082      	sub	sp, #8
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7ff ff83 	bl	8010fd4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80110ce:	4603      	mov	r3, r0
    }
 80110d0:	4618      	mov	r0, r3
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7fe f968 	bl	800f3b8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	4618      	mov	r0, r3
 80110ec:	3708      	adds	r7, #8
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}

080110f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80110f2:	b580      	push	{r7, lr}
 80110f4:	b082      	sub	sp, #8
 80110f6:	af00      	add	r7, sp, #0
 80110f8:	6078      	str	r0, [r7, #4]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7ff ffeb 	bl	80110d8 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f000 fc51 	bl	80119aa <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	4618      	mov	r0, r3
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}

08011112 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8011112:	b580      	push	{r7, lr}
 8011114:	b082      	sub	sp, #8
 8011116:	af00      	add	r7, sp, #0
 8011118:	6078      	str	r0, [r7, #4]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	4618      	mov	r0, r3
 801111e:	f7ff ffe8 	bl	80110f2 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4618      	mov	r0, r3
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	4618      	mov	r0, r3
 8011138:	f7ff ffeb 	bl	8011112 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4618      	mov	r0, r3
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 8011146:	b580      	push	{r7, lr}
 8011148:	b082      	sub	sp, #8
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	3308      	adds	r3, #8
 8011152:	4618      	mov	r0, r3
 8011154:	f7f8 f824 	bl	80091a0 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	3304      	adds	r3, #4
 801115c:	4618      	mov	r0, r3
 801115e:	f7ff ffe5 	bl	801112c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	4618      	mov	r0, r3
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	4618      	mov	r0, r3
 8011178:	f7ff ffe5 	bl	8011146 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 fc09 	bl	8011994 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	4618      	mov	r0, r3
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}

0801118c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	4618      	mov	r0, r3
 8011198:	f7ff ffe8 	bl	801116c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	4618      	mov	r0, r3
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b082      	sub	sp, #8
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7ff ffeb 	bl	801118c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	4618      	mov	r0, r3
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}

080111c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80111c0:	b580      	push	{r7, lr}
 80111c2:	ed2d 8b02 	vpush	{d8}
 80111c6:	b086      	sub	sp, #24
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7ff fa4b 	bl	801066a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	dd05      	ble.n	80111e6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7ff ff54 	bl	8011088 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	dc06      	bgt.n	80111f4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80111e6:	4b16      	ldr	r3, [pc, #88]	; (8011240 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80111e8:	4a16      	ldr	r2, [pc, #88]	; (8011244 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80111ea:	f240 119b 	movw	r1, #411	; 0x19b
 80111ee:	4816      	ldr	r0, [pc, #88]	; (8011248 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80111f0:	f00c ff84 	bl	801e0fc <__assert_func>
 80111f4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f7ff ff56 	bl	80110a8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80111fc:	4602      	mov	r2, r0
 80111fe:	f107 030c 	add.w	r3, r7, #12
 8011202:	4611      	mov	r1, r2
 8011204:	4618      	mov	r0, r3
 8011206:	f000 fbb6 	bl	8011976 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff ff4c 	bl	80110a8 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8011210:	4602      	mov	r2, r0
 8011212:	f107 030c 	add.w	r3, r7, #12
 8011216:	6839      	ldr	r1, [r7, #0]
 8011218:	4618      	mov	r0, r3
 801121a:	f000 fbd1 	bl	80119c0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 801121e:	eeb0 8a40 	vmov.f32	s16, s0
 8011222:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011224:	f107 030c 	add.w	r3, r7, #12
 8011228:	4618      	mov	r0, r3
 801122a:	f7ff ffbc 	bl	80111a6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801122e:	eef0 7a48 	vmov.f32	s15, s16
}
 8011232:	eeb0 0a67 	vmov.f32	s0, s15
 8011236:	3718      	adds	r7, #24
 8011238:	46bd      	mov	sp, r7
 801123a:	ecbd 8b02 	vpop	{d8}
 801123e:	bd80      	pop	{r7, pc}
 8011240:	08024fe4 	.word	0x08024fe4
 8011244:	0802849c 	.word	0x0802849c
 8011248:	080251f0 	.word	0x080251f0

0801124c <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
    }
 8011256:	bf00      	nop
 8011258:	370c      	adds	r7, #12
 801125a:	46bd      	mov	sp, r7
 801125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011260:	4770      	bx	lr

08011262 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011262:	b580      	push	{r7, lr}
 8011264:	b082      	sub	sp, #8
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
 801126a:	6039      	str	r1, [r7, #0]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6839      	ldr	r1, [r7, #0]
 8011270:	4618      	mov	r0, r3
 8011272:	f000 fbb6 	bl	80119e2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	4618      	mov	r0, r3
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	4618      	mov	r0, r3
 801128c:	370c      	adds	r7, #12
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr

08011296 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8011296:	b580      	push	{r7, lr}
 8011298:	b082      	sub	sp, #8
 801129a:	af00      	add	r7, sp, #0
 801129c:	6078      	str	r0, [r7, #4]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7f4 f873 	bl	800538e <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80112a8:	4603      	mov	r3, r0
 80112aa:	4618      	mov	r0, r3
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b082      	sub	sp, #8
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	4618      	mov	r0, r3
 80112c0:	f7f4 f976 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80112c4:	4603      	mov	r3, r0
 80112c6:	4618      	mov	r0, r3
 80112c8:	3708      	adds	r7, #8
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
	...

080112d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 80112d0:	b590      	push	{r4, r7, lr}
 80112d2:	b085      	sub	sp, #20
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	4618      	mov	r0, r3
 80112e0:	f7f3 ffaf 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80112e4:	4604      	mov	r4, r0
 80112e6:	68b8      	ldr	r0, [r7, #8]
 80112e8:	f7ff ffd5 	bl	8011296 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 80112ec:	4603      	mov	r3, r0
 80112ee:	429c      	cmp	r4, r3
 80112f0:	d10a      	bne.n	8011308 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7f3 ff99 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80112fa:	4604      	mov	r4, r0
 80112fc:	68b8      	ldr	r0, [r7, #8]
 80112fe:	f7ff ffd8 	bl	80112b2 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 8011302:	4603      	mov	r3, r0
 8011304:	429c      	cmp	r4, r3
 8011306:	d006      	beq.n	8011316 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8011308:	4b05      	ldr	r3, [pc, #20]	; (8011320 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 801130a:	4a06      	ldr	r2, [pc, #24]	; (8011324 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 801130c:	f240 21f2 	movw	r1, #754	; 0x2f2
 8011310:	4805      	ldr	r0, [pc, #20]	; (8011328 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8011312:	f00c fef3 	bl	801e0fc <__assert_func>
}
 8011316:	bf00      	nop
 8011318:	3714      	adds	r7, #20
 801131a:	46bd      	mov	sp, r7
 801131c:	bd90      	pop	{r4, r7, pc}
 801131e:	bf00      	nop
 8011320:	08022cf8 	.word	0x08022cf8
 8011324:	08028620 	.word	0x08028620
 8011328:	080226f0 	.word	0x080226f0

0801132c <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
 8011338:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	68ba      	ldr	r2, [r7, #8]
 801133e:	601a      	str	r2, [r3, #0]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	687a      	ldr	r2, [r7, #4]
 8011344:	605a      	str	r2, [r3, #4]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	683a      	ldr	r2, [r7, #0]
 801134a:	609a      	str	r2, [r3, #8]
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	69ba      	ldr	r2, [r7, #24]
 8011350:	60da      	str	r2, [r3, #12]
  }
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	4618      	mov	r0, r3
 8011356:	3714      	adds	r7, #20
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr

08011360 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f000 fb6f 	bl	8011a4c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 801136e:	bf00      	nop
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}

08011376 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8011376:	b580      	push	{r7, lr}
 8011378:	b082      	sub	sp, #8
 801137a:	af00      	add	r7, sp, #0
 801137c:	6078      	str	r0, [r7, #4]
 801137e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6839      	ldr	r1, [r7, #0]
 8011384:	4618      	mov	r0, r3
 8011386:	f000 fb71 	bl	8011a6c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	4618      	mov	r0, r3
 801138e:	f000 fb97 	bl	8011ac0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8011392:	bf00      	nop
  }
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4618      	mov	r0, r3
 8011398:	3708      	adds	r7, #8
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 801139e:	b580      	push	{r7, lr}
 80113a0:	b082      	sub	sp, #8
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80113a6:	f7f5 fd16 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80113aa:	4603      	mov	r3, r0
  }
 80113ac:	4618      	mov	r0, r3
 80113ae:	3708      	adds	r7, #8
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80113bc:	f7f5 fd13 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80113c0:	4603      	mov	r3, r0
  }
 80113c2:	4618      	mov	r0, r3
 80113c4:	3708      	adds	r7, #8
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}

080113ca <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80113ca:	b480      	push	{r7}
 80113cc:	b083      	sub	sp, #12
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	4618      	mov	r0, r3
 80113d6:	370c      	adds	r7, #12
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr

080113e0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	4618      	mov	r0, r3
 80113ec:	370c      	adds	r7, #12
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr

080113f6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80113f6:	b580      	push	{r7, lr}
 80113f8:	b082      	sub	sp, #8
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	6039      	str	r1, [r7, #0]
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6839      	ldr	r1, [r7, #0]
 8011404:	4618      	mov	r0, r3
 8011406:	f000 fb67 	bl	8011ad8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	4618      	mov	r0, r3
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8011414:	b590      	push	{r4, r7, lr}
 8011416:	b083      	sub	sp, #12
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f000 fb85 	bl	8011b2e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	4618      	mov	r0, r3
 8011428:	f000 f81e 	bl	8011468 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 801142c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	601a      	str	r2, [r3, #0]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	1d1c      	adds	r4, r3, #4
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	4618      	mov	r0, r3
 801143a:	f000 fb5c 	bl	8011af6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 801143e:	4603      	mov	r3, r0
 8011440:	4619      	mov	r1, r3
 8011442:	4620      	mov	r0, r4
 8011444:	f7f5 fca2 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	1d5c      	adds	r4, r3, #5
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	4618      	mov	r0, r3
 8011450:	f000 fb5f 	bl	8011b12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8011454:	4603      	mov	r3, r0
 8011456:	4619      	mov	r1, r3
 8011458:	4620      	mov	r0, r4
 801145a:	f7f5 fc7d 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4618      	mov	r0, r3
 8011462:	370c      	adds	r7, #12
 8011464:	46bd      	mov	sp, r7
 8011466:	bd90      	pop	{r4, r7, pc}

08011468 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4618      	mov	r0, r3
 8011476:	370c      	adds	r7, #12
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr

08011480 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011480:	b480      	push	{r7}
 8011482:	b083      	sub	sp, #12
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	4618      	mov	r0, r3
 801148c:	370c      	adds	r7, #12
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr

08011496 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011496:	b590      	push	{r4, r7, lr}
 8011498:	b085      	sub	sp, #20
 801149a:	af00      	add	r7, sp, #0
 801149c:	60f8      	str	r0, [r7, #12]
 801149e:	60b9      	str	r1, [r7, #8]
 80114a0:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	681c      	ldr	r4, [r3, #0]
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7f5 feef 	bl	800728c <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 80114ae:	4602      	mov	r2, r0
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	fb03 f202 	mul.w	r2, r3, r2
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	4413      	add	r3, r2
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	4423      	add	r3, r4
  }
 80114be:	4618      	mov	r0, r3
 80114c0:	3714      	adds	r7, #20
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd90      	pop	{r4, r7, pc}

080114c6 <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b084      	sub	sp, #16
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	60f8      	str	r0, [r7, #12]
 80114ce:	60b9      	str	r1, [r7, #8]
 80114d0:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	1d18      	adds	r0, r3, #4
 80114d6:	68f9      	ldr	r1, [r7, #12]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	f000 fb32 	bl	8011b44 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 80114e0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80114e4:	eeb0 0a67 	vmov.f32	s0, s15
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b082      	sub	sp, #8
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
 80114f6:	6039      	str	r1, [r7, #0]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6839      	ldr	r1, [r7, #0]
 80114fc:	4618      	mov	r0, r3
 80114fe:	f000 fb32 	bl	8011b66 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	4618      	mov	r0, r3
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	689b      	ldr	r3, [r3, #8]
 8011518:	4618      	mov	r0, r3
 801151a:	f7fc fcca 	bl	800deb2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 801151e:	4603      	mov	r3, r0
    }
 8011520:	4618      	mov	r0, r3
 8011522:	3708      	adds	r7, #8
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011528:	b580      	push	{r7, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	4618      	mov	r0, r3
 8011536:	f7f6 f82d 	bl	8007594 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 801153a:	4603      	mov	r3, r0
    }
 801153c:	4618      	mov	r0, r3
 801153e:	3708      	adds	r7, #8
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011544:	b480      	push	{r7}
 8011546:	b083      	sub	sp, #12
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	4618      	mov	r0, r3
 8011550:	370c      	adds	r7, #12
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr

0801155a <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801155a:	b480      	push	{r7}
 801155c:	b083      	sub	sp, #12
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
    }
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	4618      	mov	r0, r3
 801157e:	f7f3 fe60 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011582:	4603      	mov	r3, r0
 8011584:	2b01      	cmp	r3, #1
 8011586:	dd08      	ble.n	801159a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	4618      	mov	r0, r3
 801158c:	f7f3 fe4e 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011590:	4603      	mov	r3, r0
 8011592:	2b01      	cmp	r3, #1
 8011594:	dd01      	ble.n	801159a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8011596:	2301      	movs	r3, #1
 8011598:	e000      	b.n	801159c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 801159a:	2300      	movs	r3, #0
 801159c:	2b00      	cmp	r3, #0
 801159e:	d003      	beq.n	80115a8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 80115a0:	6839      	ldr	r1, [r7, #0]
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 faf3 	bl	8011b8e <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 80115a8:	bf00      	nop
 80115aa:	3708      	adds	r7, #8
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	330c      	adds	r3, #12
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f6 f8c8 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	3308      	adds	r3, #8
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7f6 f8c3 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f000 faf8 	bl	8011bc2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	4618      	mov	r0, r3
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff ffe2 	bl	80115b0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4618      	mov	r0, r3
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b090      	sub	sp, #64	; 0x40
 80115fa:	af02      	add	r7, sp, #8
 80115fc:	60f8      	str	r0, [r7, #12]
 80115fe:	60b9      	str	r1, [r7, #8]
 8011600:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8011602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011606:	68b9      	ldr	r1, [r7, #8]
 8011608:	4618      	mov	r0, r3
 801160a:	f000 facb 	bl	8011ba4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	68b9      	ldr	r1, [r7, #8]
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	f000 fafc 	bl	8011c10 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8011618:	f107 0320 	add.w	r3, r7, #32
 801161c:	68f9      	ldr	r1, [r7, #12]
 801161e:	4618      	mov	r0, r3
 8011620:	f7f6 faa6 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f7f6 fb0b 	bl	8007c40 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 801162a:	4603      	mov	r3, r0
 801162c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011630:	f107 0120 	add.w	r1, r7, #32
 8011634:	f107 0010 	add.w	r0, r7, #16
 8011638:	9300      	str	r3, [sp, #0]
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f000 fb32 	bl	8011ca4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8011640:	f107 0310 	add.w	r3, r7, #16
 8011644:	4618      	mov	r0, r3
 8011646:	f000 fb47 	bl	8011cd8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 801164a:	f107 0320 	add.w	r3, r7, #32
 801164e:	4618      	mov	r0, r3
 8011650:	f7f6 f87f 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8011654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff ffbf 	bl	80115dc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 801165e:	bf00      	nop
 8011660:	3738      	adds	r7, #56	; 0x38
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}

08011666 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011666:	b480      	push	{r7}
 8011668:	b083      	sub	sp, #12
 801166a:	af00      	add	r7, sp, #0
 801166c:	6078      	str	r0, [r7, #4]
    }
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4618      	mov	r0, r3
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr

0801167c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 801167c:	b480      	push	{r7}
 801167e:	b083      	sub	sp, #12
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
    {}
 8011686:	bf00      	nop
 8011688:	370c      	adds	r7, #12
 801168a:	46bd      	mov	sp, r7
 801168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011690:	4770      	bx	lr

08011692 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 8011692:	b480      	push	{r7}
 8011694:	b083      	sub	sp, #12
 8011696:	af00      	add	r7, sp, #0
 8011698:	6078      	str	r0, [r7, #4]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4618      	mov	r0, r3
 801169e:	370c      	adds	r7, #12
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr

080116a8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80116a8:	b590      	push	{r4, r7, lr}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
 80116b2:	687c      	ldr	r4, [r7, #4]
 80116b4:	6838      	ldr	r0, [r7, #0]
 80116b6:	f000 fb1a 	bl	8011cee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 80116ba:	4603      	mov	r3, r0
 80116bc:	4619      	mov	r1, r3
 80116be:	4620      	mov	r0, r4
 80116c0:	f7f4 f8ea 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	1d1c      	adds	r4, r3, #4
 80116c8:	6838      	ldr	r0, [r7, #0]
 80116ca:	f000 fb1c 	bl	8011d06 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 80116ce:	4603      	mov	r3, r0
 80116d0:	4619      	mov	r1, r3
 80116d2:	4620      	mov	r0, r4
 80116d4:	f7fd fc27 	bl	800ef26 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f103 040c 	add.w	r4, r3, #12
 80116de:	6838      	ldr	r0, [r7, #0]
 80116e0:	f000 fb1c 	bl	8011d1c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 80116e4:	4603      	mov	r3, r0
 80116e6:	4619      	mov	r1, r3
 80116e8:	4620      	mov	r0, r4
 80116ea:	f000 fb23 	bl	8011d34 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	4618      	mov	r0, r3
 80116f2:	370c      	adds	r7, #12
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd90      	pop	{r4, r7, pc}

080116f8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	60b9      	str	r1, [r7, #8]
 8011702:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	68ba      	ldr	r2, [r7, #8]
 8011708:	6879      	ldr	r1, [r7, #4]
 801170a:	4618      	mov	r0, r3
 801170c:	f000 fb21 	bl	8011d52 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8011710:	eef0 7a40 	vmov.f32	s15, s0
 8011714:	eeb0 0a67 	vmov.f32	s0, s15
 8011718:	3710      	adds	r7, #16
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801171e:	b580      	push	{r7, lr}
 8011720:	b082      	sub	sp, #8
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
 8011726:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011728:	2201      	movs	r2, #1
 801172a:	2100      	movs	r1, #0
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f7ff ffe3 	bl	80116f8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8011732:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011736:	eeb0 0a67 	vmov.f32	s0, s15
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801174a:	2202      	movs	r2, #2
 801174c:	2100      	movs	r1, #0
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f7ff ffd2 	bl	80116f8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8011754:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011758:	eeb0 0a67 	vmov.f32	s0, s15
 801175c:	3708      	adds	r7, #8
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011762:	b480      	push	{r7}
 8011764:	b083      	sub	sp, #12
 8011766:	af00      	add	r7, sp, #0
 8011768:	6078      	str	r0, [r7, #4]
 801176a:	bf00      	nop
 801176c:	370c      	adds	r7, #12
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr

08011776 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8011776:	b590      	push	{r4, r7, lr}
 8011778:	b083      	sub	sp, #12
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
 801177e:	6039      	str	r1, [r7, #0]
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f000 fb22 	bl	8011dca <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8011786:	687c      	ldr	r4, [r7, #4]
 8011788:	6838      	ldr	r0, [r7, #0]
 801178a:	f000 fb12 	bl	8011db2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801178e:	4603      	mov	r3, r0
 8011790:	4619      	mov	r1, r3
 8011792:	4620      	mov	r0, r4
 8011794:	f000 fb24 	bl	8011de0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4618      	mov	r0, r3
 801179c:	370c      	adds	r7, #12
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd90      	pop	{r4, r7, pc}

080117a2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 80117a2:	b580      	push	{r7, lr}
 80117a4:	b0a4      	sub	sp, #144	; 0x90
 80117a6:	af00      	add	r7, sp, #0
 80117a8:	6078      	str	r0, [r7, #4]
 80117aa:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 80117b2:	2300      	movs	r3, #0
 80117b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6819      	ldr	r1, [r3, #0]
 80117bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80117c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7f9 fcdb 	bl	800b180 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 80117ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80117ce:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80117d2:	4611      	mov	r1, r2
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7f9 fce6 	bl	800b1a6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	1d19      	adds	r1, r3, #4
 80117de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80117e2:	2200      	movs	r2, #0
 80117e4:	4618      	mov	r0, r3
 80117e6:	f000 fb0b 	bl	8011e00 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 80117ea:	f107 030c 	add.w	r3, r7, #12
 80117ee:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80117f2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80117f6:	4618      	mov	r0, r3
 80117f8:	f000 fb15 	bl	8011e26 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 80117fc:	f107 030c 	add.w	r3, r7, #12
 8011800:	4618      	mov	r0, r3
 8011802:	f000 fb3e 	bl	8011e82 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 8011806:	eef0 7a40 	vmov.f32	s15, s0
  }
 801180a:	eeb0 0a67 	vmov.f32	s0, s15
 801180e:	3790      	adds	r7, #144	; 0x90
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801181c:	2102      	movs	r1, #2
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7ff fa67 	bl	8010cf2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f000 fb47 	bl	8011eb8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 801182a:	bf00      	nop
 801182c:	3708      	adds	r7, #8
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}

08011832 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8011832:	b580      	push	{r7, lr}
 8011834:	b082      	sub	sp, #8
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
 801183a:	6039      	str	r1, [r7, #0]
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 fb45 	bl	8011ecc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6839      	ldr	r1, [r7, #0]
 8011846:	4618      	mov	r0, r3
 8011848:	f000 fb4b 	bl	8011ee2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	4618      	mov	r0, r3
 8011850:	3708      	adds	r7, #8
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}

08011856 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8011856:	b580      	push	{r7, lr}
 8011858:	b082      	sub	sp, #8
 801185a:	af00      	add	r7, sp, #0
 801185c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 801185e:	2100      	movs	r1, #0
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f000 fb66 	bl	8011f32 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f000 fb86 	bl	8011f78 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 801186c:	bf00      	nop
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	6839      	ldr	r1, [r7, #0]
 8011882:	4618      	mov	r0, r3
 8011884:	f000 fb82 	bl	8011f8c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	4618      	mov	r0, r3
 801188c:	3708      	adds	r7, #8
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011892:	b580      	push	{r7, lr}
 8011894:	b082      	sub	sp, #8
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	689b      	ldr	r3, [r3, #8]
 801189e:	4618      	mov	r0, r3
 80118a0:	f7fc fd14 	bl	800e2cc <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 80118a4:	4603      	mov	r3, r0
    }
 80118a6:	4618      	mov	r0, r3
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}

080118ae <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80118ae:	b580      	push	{r7, lr}
 80118b0:	b082      	sub	sp, #8
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	689b      	ldr	r3, [r3, #8]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7fa fba2 	bl	800c004 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 80118c0:	4603      	mov	r3, r0
    }
 80118c2:	4618      	mov	r0, r3
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80118ca:	b480      	push	{r7}
 80118cc:	b083      	sub	sp, #12
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	4618      	mov	r0, r3
 80118d6:	370c      	adds	r7, #12
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80118e0:	b5b0      	push	{r4, r5, r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	689c      	ldr	r4, [r3, #8]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	6839      	ldr	r1, [r7, #0]
 80118f4:	4618      	mov	r0, r3
 80118f6:	f000 fb5d 	bl	8011fb4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 80118fa:	4605      	mov	r5, r0
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	6839      	ldr	r1, [r7, #0]
 8011902:	4618      	mov	r0, r3
 8011904:	f000 fb66 	bl	8011fd4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011908:	4603      	mov	r3, r0
 801190a:	461a      	mov	r2, r3
 801190c:	4629      	mov	r1, r5
 801190e:	4620      	mov	r0, r4
 8011910:	f7f7 f836 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011914:	bf00      	nop
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bdb0      	pop	{r4, r5, r7, pc}

0801191c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801191c:	b480      	push	{r7}
 801191e:	b083      	sub	sp, #12
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	bf00      	nop
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011930:	b480      	push	{r7}
 8011932:	b083      	sub	sp, #12
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
    }
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4618      	mov	r0, r3
 801193c:	370c      	adds	r7, #12
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr

08011946 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011946:	b480      	push	{r7}
 8011948:	b083      	sub	sp, #12
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
    }
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	4618      	mov	r0, r3
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr

0801195c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	4618      	mov	r0, r3
 8011968:	f7ff fb42 	bl	8010ff0 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801196c:	4603      	mov	r3, r0
    }
 801196e:	4618      	mov	r0, r3
 8011970:	3708      	adds	r7, #8
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}

08011976 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8011976:	b580      	push	{r7, lr}
 8011978:	b082      	sub	sp, #8
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]
 801197e:	6039      	str	r1, [r7, #0]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6839      	ldr	r1, [r7, #0]
 8011984:	4618      	mov	r0, r3
 8011986:	f000 fb35 	bl	8011ff4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4618      	mov	r0, r3
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	4618      	mov	r0, r3
 80119a0:	370c      	adds	r7, #12
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr

080119aa <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 80119aa:	b480      	push	{r7}
 80119ac:	b083      	sub	sp, #12
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	4618      	mov	r0, r3
 80119b6:	370c      	adds	r7, #12
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80119cc:	68b9      	ldr	r1, [r7, #8]
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	f000 fb1f 	bl	8012012 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 80119d4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80119d8:	eeb0 0a67 	vmov.f32	s0, s15
 80119dc:	3710      	adds	r7, #16
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}

080119e2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80119e2:	b580      	push	{r7, lr}
 80119e4:	b082      	sub	sp, #8
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
 80119ea:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80119ec:	6878      	ldr	r0, [r7, #4]
 80119ee:	f000 fb4c 	bl	801208a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80119f2:	6838      	ldr	r0, [r7, #0]
 80119f4:	f000 fb31 	bl	801205a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 80119f8:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 80119fe:	6838      	ldr	r0, [r7, #0]
 8011a00:	f000 fb37 	bl	8012072 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8011a04:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	605a      	str	r2, [r3, #4]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8011a14:	4619      	mov	r1, r3
 8011a16:	4610      	mov	r0, r2
 8011a18:	f7f5 f95f 	bl	8006cda <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8011a26:	4619      	mov	r1, r3
 8011a28:	4610      	mov	r0, r2
 8011a2a:	f000 f9d9 	bl	8011de0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8011a2e:	6838      	ldr	r0, [r7, #0]
 8011a30:	f000 fb13 	bl	801205a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8011a34:	4603      	mov	r3, r0
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7f3 fc9e 	bl	8005378 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	611a      	str	r2, [r3, #16]
  }
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4618      	mov	r0, r3
 8011a46:	3708      	adds	r7, #8
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011a54:	2200      	movs	r2, #0
 8011a56:	2100      	movs	r1, #0
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 fb21 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 fb37 	bl	80120d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 8011a64:	bf00      	nop
 8011a66:	3708      	adds	r7, #8
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011a6c:	b590      	push	{r4, r7, lr}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 fb57 	bl	801212a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f000 f81e 	bl	8011ac0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8011a84:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	601a      	str	r2, [r3, #0]
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	1d1c      	adds	r4, r3, #4
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f000 fb2e 	bl	80120f2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8011a96:	4603      	mov	r3, r0
 8011a98:	4619      	mov	r1, r3
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f7f5 f976 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	1d5c      	adds	r4, r3, #5
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f000 fb31 	bl	801210e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8011aac:	4603      	mov	r3, r0
 8011aae:	4619      	mov	r1, r3
 8011ab0:	4620      	mov	r0, r4
 8011ab2:	f7f5 f951 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	370c      	adds	r7, #12
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd90      	pop	{r4, r7, pc}

08011ac0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4618      	mov	r0, r3
 8011ace:	370c      	adds	r7, #12
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad6:	4770      	bx	lr

08011ad8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
 8011ae0:	6039      	str	r1, [r7, #0]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	6839      	ldr	r1, [r7, #0]
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f000 fb2a 	bl	8012140 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	4618      	mov	r0, r3
 8011af0:	3708      	adds	r7, #8
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}

08011af6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011af6:	b580      	push	{r7, lr}
 8011af8:	b082      	sub	sp, #8
 8011afa:	af00      	add	r7, sp, #0
 8011afc:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	3308      	adds	r3, #8
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fc fd6a 	bl	800e5dc <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 8011b08:	4603      	mov	r3, r0
    }
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}

08011b12 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011b12:	b580      	push	{r7, lr}
 8011b14:	b082      	sub	sp, #8
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	3308      	adds	r3, #8
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fc fd70 	bl	800e604 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8011b24:	4603      	mov	r3, r0
    }
 8011b26:	4618      	mov	r0, r3
 8011b28:	3708      	adds	r7, #8
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}

08011b2e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011b2e:	b480      	push	{r7}
 8011b30:	b083      	sub	sp, #12
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	6078      	str	r0, [r7, #4]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	370c      	adds	r7, #12
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	60f8      	str	r0, [r7, #12]
 8011b4c:	60b9      	str	r1, [r7, #8]
 8011b4e:	607a      	str	r2, [r7, #4]
 8011b50:	603b      	str	r3, [r7, #0]
 8011b52:	68b8      	ldr	r0, [r7, #8]
 8011b54:	f000 fb03 	bl	801215e <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 8011b58:	eef0 7a40 	vmov.f32	s15, s0
 8011b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b082      	sub	sp, #8
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6839      	ldr	r1, [r7, #0]
 8011b74:	4618      	mov	r0, r3
 8011b76:	f000 fb01 	bl	801217c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011b7a:	683b      	ldr	r3, [r7, #0]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f000 fb27 	bl	80121d0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011b82:	bf00      	nop
  }
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	4618      	mov	r0, r3
 8011b88:	3708      	adds	r7, #8
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}

08011b8e <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 8011b8e:	b480      	push	{r7}
 8011b90:	b083      	sub	sp, #12
 8011b92:	af00      	add	r7, sp, #0
 8011b94:	6078      	str	r0, [r7, #4]
 8011b96:	6039      	str	r1, [r7, #0]
    }
 8011b98:	bf00      	nop
 8011b9a:	370c      	adds	r7, #12
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr

08011ba4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	6039      	str	r1, [r7, #0]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6839      	ldr	r1, [r7, #0]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f000 fb18 	bl	80121e8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011bc2:	b480      	push	{r7}
 8011bc4:	b083      	sub	sp, #12
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	370c      	adds	r7, #12
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	4770      	bx	lr

08011bd8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7f3 fb2c 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011bea:	4603      	mov	r3, r0
 8011bec:	4618      	mov	r0, r3
 8011bee:	3708      	adds	r7, #8
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7f3 fb13 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011c06:	4603      	mov	r3, r0
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3708      	adds	r7, #8
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b086      	sub	sp, #24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8011c1c:	68b8      	ldr	r0, [r7, #8]
 8011c1e:	f7ff ffdb 	bl	8011bd8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 8011c22:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8011c24:	68b8      	ldr	r0, [r7, #8]
 8011c26:	f7ff ffe5 	bl	8011bf4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 8011c2a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7f3 fb07 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011c34:	4602      	mov	r2, r0
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d107      	bne.n	8011c4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7f3 faf4 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011c44:	4602      	mov	r2, r0
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d001      	beq.n	8011c50 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e000      	b.n	8011c52 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8011c50:	2300      	movs	r3, #0
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d005      	beq.n	8011c62 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	693a      	ldr	r2, [r7, #16]
 8011c5a:	6979      	ldr	r1, [r7, #20]
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7f6 fa09 	bl	8008074 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7f3 faec 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8011c6a:	4602      	mov	r2, r0
 8011c6c:	697b      	ldr	r3, [r7, #20]
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d107      	bne.n	8011c82 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7f3 fad9 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	693b      	ldr	r3, [r7, #16]
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	d006      	beq.n	8011c90 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8011c82:	4b05      	ldr	r3, [pc, #20]	; (8011c98 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8011c84:	4a05      	ldr	r2, [pc, #20]	; (8011c9c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8011c86:	f240 21fd 	movw	r1, #765	; 0x2fd
 8011c8a:	4805      	ldr	r0, [pc, #20]	; (8011ca0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8011c8c:	f00c fa36 	bl	801e0fc <__assert_func>
}
 8011c90:	bf00      	nop
 8011c92:	3718      	adds	r7, #24
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	080225dc 	.word	0x080225dc
 8011c9c:	08028738 	.word	0x08028738
 8011ca0:	080226f0 	.word	0x080226f0

08011ca4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011ca4:	b480      	push	{r7}
 8011ca6:	b085      	sub	sp, #20
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	60b9      	str	r1, [r7, #8]
 8011cae:	607a      	str	r2, [r7, #4]
 8011cb0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	68ba      	ldr	r2, [r7, #8]
 8011cb6:	601a      	str	r2, [r3, #0]
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	605a      	str	r2, [r3, #4]
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	683a      	ldr	r2, [r7, #0]
 8011cc2:	609a      	str	r2, [r3, #8]
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	69ba      	ldr	r2, [r7, #24]
 8011cc8:	60da      	str	r2, [r3, #12]
  }
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3714      	adds	r7, #20
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 fab6 	bl	8012252 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 8011ce6:	bf00      	nop
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}

08011cee <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8011cee:	b480      	push	{r7}
 8011cf0:	b083      	sub	sp, #12
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	3330      	adds	r3, #48	; 0x30
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr

08011d06 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011d06:	b480      	push	{r7}
 8011d08:	b083      	sub	sp, #12
 8011d0a:	af00      	add	r7, sp, #0
 8011d0c:	6078      	str	r0, [r7, #4]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	4618      	mov	r0, r3
 8011d12:	370c      	adds	r7, #12
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr

08011d1c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	3318      	adds	r3, #24
 8011d28:	4618      	mov	r0, r3
 8011d2a:	370c      	adds	r7, #12
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6039      	str	r1, [r7, #0]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6839      	ldr	r1, [r7, #0]
 8011d42:	4618      	mov	r0, r3
 8011d44:	f000 fa95 	bl	8012272 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3708      	adds	r7, #8
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}

08011d52 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011d52:	b590      	push	{r4, r7, lr}
 8011d54:	b087      	sub	sp, #28
 8011d56:	af00      	add	r7, sp, #0
 8011d58:	60f8      	str	r0, [r7, #12]
 8011d5a:	60b9      	str	r1, [r7, #8]
 8011d5c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	4618      	mov	r0, r3
 8011d62:	f000 fa95 	bl	8012290 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8011d66:	4604      	mov	r4, r0
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	3304      	adds	r3, #4
 8011d6c:	687a      	ldr	r2, [r7, #4]
 8011d6e:	68b9      	ldr	r1, [r7, #8]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7fd fdf3 	bl	800f95c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8011d76:	eef0 7a40 	vmov.f32	s15, s0
 8011d7a:	edc7 7a04 	vstr	s15, [r7, #16]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	330c      	adds	r3, #12
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	68b9      	ldr	r1, [r7, #8]
 8011d86:	4618      	mov	r0, r3
 8011d88:	f000 fa8d 	bl	80122a6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8011d8c:	eef0 7a40 	vmov.f32	s15, s0
 8011d90:	edc7 7a05 	vstr	s15, [r7, #20]
 8011d94:	f107 0214 	add.w	r2, r7, #20
 8011d98:	f107 0310 	add.w	r3, r7, #16
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f7fd fc20 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011da4:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011da8:	eeb0 0a67 	vmov.f32	s0, s15
 8011dac:	371c      	adds	r7, #28
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd90      	pop	{r4, r7, pc}

08011db2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011db2:	b480      	push	{r7}
 8011db4:	b083      	sub	sp, #12
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	6078      	str	r0, [r7, #4]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	370c      	adds	r7, #12
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr

08011dca <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011dca:	b480      	push	{r7}
 8011dcc:	b083      	sub	sp, #12
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	370c      	adds	r7, #12
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr

08011de0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	683a      	ldr	r2, [r7, #0]
 8011dee:	4611      	mov	r1, r2
 8011df0:	4618      	mov	r0, r3
 8011df2:	f000 fa79 	bl	80122e8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3708      	adds	r7, #8
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 8011e0c:	68b8      	ldr	r0, [r7, #8]
 8011e0e:	f7f4 f887 	bl	8005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8011e12:	4603      	mov	r3, r0
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	4619      	mov	r1, r3
 8011e18:	68f8      	ldr	r0, [r7, #12]
 8011e1a:	f000 fa7d 	bl	8012318 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}

08011e26 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8011e26:	b5b0      	push	{r4, r5, r7, lr}
 8011e28:	b086      	sub	sp, #24
 8011e2a:	af00      	add	r7, sp, #0
 8011e2c:	60f8      	str	r0, [r7, #12]
 8011e2e:	60b9      	str	r1, [r7, #8]
 8011e30:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8011e32:	68b8      	ldr	r0, [r7, #8]
 8011e34:	f7f9 fe6e 	bl	800bb14 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 8011e38:	4604      	mov	r4, r0
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 fa94 	bl	8012368 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 8011e40:	4605      	mov	r5, r0
 8011e42:	f107 0314 	add.w	r3, r7, #20
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7f3 fc9c 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8011e4c:	f107 0314 	add.w	r3, r7, #20
 8011e50:	462a      	mov	r2, r5
 8011e52:	4621      	mov	r1, r4
 8011e54:	68f8      	ldr	r0, [r7, #12]
 8011e56:	f000 fac1 	bl	80123dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 8011e5a:	68f8      	ldr	r0, [r7, #12]
 8011e5c:	3718      	adds	r7, #24
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bdb0      	pop	{r4, r5, r7, pc}

08011e62 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b082      	sub	sp, #8
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 fb14 	bl	8012498 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011e70:	4603      	mov	r3, r0
 8011e72:	4618      	mov	r0, r3
 8011e74:	f000 fb1b 	bl	80124ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3708      	adds	r7, #8
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}

08011e82 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8011e82:	b590      	push	{r4, r7, lr}
 8011e84:	b085      	sub	sp, #20
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 fb04 	bl	8012498 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011e90:	4604      	mov	r4, r0
 8011e92:	f107 030c 	add.w	r3, r7, #12
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7f3 ff6b 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011e9c:	f107 030c 	add.w	r3, r7, #12
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	f000 fb80 	bl	80125a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8011ea8:	eef0 7a40 	vmov.f32	s15, s0
 8011eac:	bf00      	nop
}
 8011eae:	eeb0 0a67 	vmov.f32	s0, s15
 8011eb2:	3714      	adds	r7, #20
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd90      	pop	{r4, r7, pc}

08011eb8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	bf00      	nop
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	370c      	adds	r7, #12
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr

08011ee2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8011ee2:	b590      	push	{r4, r7, lr}
 8011ee4:	b083      	sub	sp, #12
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
 8011eea:	6039      	str	r1, [r7, #0]
 8011eec:	687c      	ldr	r4, [r7, #4]
 8011eee:	6838      	ldr	r0, [r7, #0]
 8011ef0:	f000 fba0 	bl	8012634 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f7f3 ffb9 	bl	8005e70 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	1d1c      	adds	r4, r3, #4
 8011f02:	6838      	ldr	r0, [r7, #0]
 8011f04:	f000 fba2 	bl	801264c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f000 fbb4 	bl	801267a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f103 040c 	add.w	r4, r3, #12
 8011f18:	6838      	ldr	r0, [r7, #0]
 8011f1a:	f000 fba2 	bl	8012662 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	4619      	mov	r1, r3
 8011f22:	4620      	mov	r0, r4
 8011f24:	f000 fbb8 	bl	8012698 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	370c      	adds	r7, #12
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd90      	pop	{r4, r7, pc}

08011f32 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8011f32:	b5b0      	push	{r4, r5, r7, lr}
 8011f34:	b084      	sub	sp, #16
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
 8011f3a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	689c      	ldr	r4, [r3, #8]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	6839      	ldr	r1, [r7, #0]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 f834 	bl	8011fb4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011f4c:	4605      	mov	r5, r0
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	6839      	ldr	r1, [r7, #0]
 8011f54:	4618      	mov	r0, r3
 8011f56:	f000 fbae 	bl	80126b6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 8011f5a:	eef0 7a40 	vmov.f32	s15, s0
 8011f5e:	edc7 7a03 	vstr	s15, [r7, #12]
 8011f62:	f107 030c 	add.w	r3, r7, #12
 8011f66:	461a      	mov	r2, r3
 8011f68:	4629      	mov	r1, r5
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	f7f6 fd08 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011f70:	bf00      	nop
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bdb0      	pop	{r4, r5, r7, pc}

08011f78 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	bf00      	nop
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr

08011f8c <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6839      	ldr	r1, [r7, #0]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f000 fbaf 	bl	80126fe <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f000 fbd5 	bl	8012752 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011fa8:	bf00      	nop
  }
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	4618      	mov	r0, r3
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	009b      	lsls	r3, r3, #2
 8011fc6:	4413      	add	r3, r2
  }
 8011fc8:	4618      	mov	r0, r3
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011fd4:	b480      	push	{r7}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	4413      	add	r3, r2
  }
 8011fe8:	4618      	mov	r0, r3
 8011fea:	370c      	adds	r7, #12
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr

08011ff4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b082      	sub	sp, #8
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	6039      	str	r1, [r7, #0]
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6839      	ldr	r1, [r7, #0]
 8012002:	4618      	mov	r0, r3
 8012004:	f000 fbb1 	bl	801276a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	4618      	mov	r0, r3
 801200c:	3708      	adds	r7, #8
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}

08012012 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012012:	b580      	push	{r7, lr}
 8012014:	b084      	sub	sp, #16
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]
 801201a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801201c:	6839      	ldr	r1, [r7, #0]
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f000 fbb5 	bl	801278e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 8012024:	eef0 7a40 	vmov.f32	s15, s0
 8012028:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 801202c:	6839      	ldr	r1, [r7, #0]
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 fbbe 	bl	80127b0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 8012034:	eef0 7a40 	vmov.f32	s15, s0
 8012038:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 801203c:	f107 020c 	add.w	r2, r7, #12
 8012040:	f107 0308 	add.w	r3, r7, #8
 8012044:	4619      	mov	r1, r3
 8012046:	6838      	ldr	r0, [r7, #0]
 8012048:	f7f7 fa8b 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 801204c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012050:	eeb0 0a67 	vmov.f32	s0, s15
 8012054:	3710      	adds	r7, #16
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}

0801205a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 801205a:	b480      	push	{r7}
 801205c:	b083      	sub	sp, #12
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4618      	mov	r0, r3
 8012068:	370c      	adds	r7, #12
 801206a:	46bd      	mov	sp, r7
 801206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012070:	4770      	bx	lr

08012072 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8012072:	b480      	push	{r7}
 8012074:	b083      	sub	sp, #12
 8012076:	af00      	add	r7, sp, #0
 8012078:	6078      	str	r0, [r7, #4]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	4618      	mov	r0, r3
 8012080:	370c      	adds	r7, #12
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr

0801208a <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801208a:	b480      	push	{r7}
 801208c:	b083      	sub	sp, #12
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	4618      	mov	r0, r3
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr

080120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b086      	sub	sp, #24
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	60f8      	str	r0, [r7, #12]
 80120a8:	60b9      	str	r1, [r7, #8]
 80120aa:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 80120ac:	6879      	ldr	r1, [r7, #4]
 80120ae:	68b8      	ldr	r0, [r7, #8]
 80120b0:	f000 fba2 	bl	80127f8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 80120b4:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 80120b6:	6879      	ldr	r1, [r7, #4]
 80120b8:	68b8      	ldr	r0, [r7, #8]
 80120ba:	f000 fba9 	bl	8012810 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 80120be:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 80120c0:	693a      	ldr	r2, [r7, #16]
 80120c2:	6979      	ldr	r1, [r7, #20]
 80120c4:	68f8      	ldr	r0, [r7, #12]
 80120c6:	f000 fbaf 	bl	8012828 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 80120ca:	bf00      	nop
 80120cc:	3718      	adds	r7, #24
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}

080120d2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b082      	sub	sp, #8
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80120da:	2201      	movs	r2, #1
 80120dc:	2100      	movs	r1, #0
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f7ff ffde 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f000 fbc5 	bl	8012874 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 80120ea:	bf00      	nop
 80120ec:	3708      	adds	r7, #8
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b082      	sub	sp, #8
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	689b      	ldr	r3, [r3, #8]
 80120fe:	4618      	mov	r0, r3
 8012100:	f7fb fe62 	bl	800ddc8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8012104:	4603      	mov	r3, r0
    }
 8012106:	4618      	mov	r0, r3
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801210e:	b580      	push	{r7, lr}
 8012110:	b082      	sub	sp, #8
 8012112:	af00      	add	r7, sp, #0
 8012114:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	4618      	mov	r0, r3
 801211c:	f7f6 fc04 	bl	8008928 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8012120:	4603      	mov	r3, r0
    }
 8012122:	4618      	mov	r0, r3
 8012124:	3708      	adds	r7, #8
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}

0801212a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 801212a:	b480      	push	{r7}
 801212c:	b083      	sub	sp, #12
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	4618      	mov	r0, r3
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr

08012140 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6839      	ldr	r1, [r7, #0]
 801214e:	4618      	mov	r0, r3
 8012150:	f000 fbb9 	bl	80128c6 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	4618      	mov	r0, r3
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 801215e:	b480      	push	{r7}
 8012160:	b083      	sub	sp, #12
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	ee07 3a90 	vmov	s15, r3
 801216e:	eeb0 0a67 	vmov.f32	s0, s15
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 801217c:	b590      	push	{r4, r7, lr}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 fc05 	bl	8012996 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	4618      	mov	r0, r3
 8012190:	f000 f81e 	bl	80121d0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8012194:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	601a      	str	r2, [r3, #0]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	1d1c      	adds	r4, r3, #4
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f000 fbdc 	bl	801295e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 80121a6:	4603      	mov	r3, r0
 80121a8:	4619      	mov	r1, r3
 80121aa:	4620      	mov	r0, r4
 80121ac:	f7f4 fdd4 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	1d5c      	adds	r4, r3, #5
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f000 fbdf 	bl	801297a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 80121bc:	4603      	mov	r3, r0
 80121be:	4619      	mov	r1, r3
 80121c0:	4620      	mov	r0, r4
 80121c2:	f7f4 fde3 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	4618      	mov	r0, r3
 80121ca:	370c      	adds	r7, #12
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd90      	pop	{r4, r7, pc}

080121d0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4618      	mov	r0, r3
 80121de:	370c      	adds	r7, #12
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr

080121e8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 fbf2 	bl	80129dc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80121f8:	6838      	ldr	r0, [r7, #0]
 80121fa:	f000 fbd7 	bl	80129ac <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 80121fe:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8012204:	6838      	ldr	r0, [r7, #0]
 8012206:	f000 fbdd 	bl	80129c4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 801220a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	605a      	str	r2, [r3, #4]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 801221a:	4619      	mov	r1, r3
 801221c:	4610      	mov	r0, r2
 801221e:	f7f5 fca7 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 801222c:	4619      	mov	r1, r3
 801222e:	4610      	mov	r0, r2
 8012230:	f7f5 fc9e 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8012234:	6838      	ldr	r0, [r7, #0]
 8012236:	f000 fbb9 	bl	80129ac <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 801223a:	4603      	mov	r3, r0
 801223c:	4618      	mov	r0, r3
 801223e:	f7f2 fff5 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8012242:	4602      	mov	r2, r0
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	611a      	str	r2, [r3, #16]
  }
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	4618      	mov	r0, r3
 801224c:	3708      	adds	r7, #8
 801224e:	46bd      	mov	sp, r7
 8012250:	bd80      	pop	{r7, pc}

08012252 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012252:	b580      	push	{r7, lr}
 8012254:	b082      	sub	sp, #8
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801225a:	2200      	movs	r2, #0
 801225c:	2100      	movs	r1, #0
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 fbc7 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f000 fbdd 	bl	8012a24 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 801226a:	bf00      	nop
 801226c:	3708      	adds	r7, #8
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8012272:	b580      	push	{r7, lr}
 8012274:	b082      	sub	sp, #8
 8012276:	af00      	add	r7, sp, #0
 8012278:	6078      	str	r0, [r7, #4]
 801227a:	6039      	str	r1, [r7, #0]
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	6839      	ldr	r1, [r7, #0]
 8012280:	4618      	mov	r0, r3
 8012282:	f000 fbdf 	bl	8012a44 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	4618      	mov	r0, r3
 801228a:	3708      	adds	r7, #8
 801228c:	46bd      	mov	sp, r7
 801228e:	bd80      	pop	{r7, pc}

08012290 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012290:	b480      	push	{r7}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	4618      	mov	r0, r3
 801229c:	370c      	adds	r7, #12
 801229e:	46bd      	mov	sp, r7
 80122a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a4:	4770      	bx	lr

080122a6 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80122a6:	b5b0      	push	{r4, r5, r7, lr}
 80122a8:	b084      	sub	sp, #16
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	60f8      	str	r0, [r7, #12]
 80122ae:	60b9      	str	r1, [r7, #8]
 80122b0:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681c      	ldr	r4, [r3, #0]
 80122b6:	68f8      	ldr	r0, [r7, #12]
 80122b8:	f000 fbd8 	bl	8012a6c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 80122bc:	4602      	mov	r2, r0
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	fb03 f502 	mul.w	r5, r3, r2
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f000 fbdc 	bl	8012a82 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 80122ca:	4602      	mov	r2, r0
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	fb02 f303 	mul.w	r3, r2, r3
 80122d2:	442b      	add	r3, r5
 80122d4:	009b      	lsls	r3, r3, #2
 80122d6:	4423      	add	r3, r4
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	ee07 3a90 	vmov	s15, r3
  }
 80122de:	eeb0 0a67 	vmov.f32	s0, s15
 80122e2:	3710      	adds	r7, #16
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bdb0      	pop	{r4, r5, r7, pc}

080122e8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 80122e8:	b590      	push	{r4, r7, lr}
 80122ea:	b083      	sub	sp, #12
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 fbdd 	bl	8012ab2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80122f8:	687c      	ldr	r4, [r7, #4]
 80122fa:	6838      	ldr	r0, [r7, #0]
 80122fc:	f000 fbcc 	bl	8012a98 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8012300:	4603      	mov	r3, r0
 8012302:	2200      	movs	r2, #0
 8012304:	4619      	mov	r1, r3
 8012306:	4620      	mov	r0, r4
 8012308:	f7f5 f88b 	bl	8007422 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	bd90      	pop	{r4, r7, pc}
	...

08012318 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8012318:	b580      	push	{r7, lr}
 801231a:	b084      	sub	sp, #16
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	68b9      	ldr	r1, [r7, #8]
 801232a:	4618      	mov	r0, r3
 801232c:	f000 fbcc 	bl	8012ac8 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2b00      	cmp	r3, #0
 8012334:	db06      	blt.n	8012344 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 8012336:	68b8      	ldr	r0, [r7, #8]
 8012338:	f7f4 fe6b 	bl	8007012 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801233c:	4602      	mov	r2, r0
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	4293      	cmp	r3, r2
 8012342:	db05      	blt.n	8012350 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 8012344:	4b05      	ldr	r3, [pc, #20]	; (801235c <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 8012346:	4a06      	ldr	r2, [pc, #24]	; (8012360 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 8012348:	2178      	movs	r1, #120	; 0x78
 801234a:	4806      	ldr	r0, [pc, #24]	; (8012364 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 801234c:	f00b fed6 	bl	801e0fc <__assert_func>
    }
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	4618      	mov	r0, r3
 8012354:	3710      	adds	r7, #16
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	08024ae8 	.word	0x08024ae8
 8012360:	0802884c 	.word	0x0802884c
 8012364:	08024c6c 	.word	0x08024c6c

08012368 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	4618      	mov	r0, r3
 8012374:	370c      	adds	r7, #12
 8012376:	46bd      	mov	sp, r7
 8012378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237c:	4770      	bx	lr

0801237e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 801237e:	b580      	push	{r7, lr}
 8012380:	b082      	sub	sp, #8
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f000 fbaf 	bl	8012aea <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	4618      	mov	r0, r3
 8012390:	3708      	adds	r7, #8
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8012396:	b580      	push	{r7, lr}
 8012398:	b082      	sub	sp, #8
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7ff ffed 	bl	801237e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	4618      	mov	r0, r3
 80123a8:	3708      	adds	r7, #8
 80123aa:	46bd      	mov	sp, r7
 80123ac:	bd80      	pop	{r7, pc}

080123ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b082      	sub	sp, #8
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
 80123b6:	f7f4 fd0e 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80123ba:	4603      	mov	r3, r0
 80123bc:	4618      	mov	r0, r3
 80123be:	3708      	adds	r7, #8
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	f7f4 fd0b 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80123d0:	4603      	mov	r3, r0
 80123d2:	4618      	mov	r0, r3
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
	...

080123dc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80123dc:	b5b0      	push	{r4, r5, r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
 80123e8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80123ea:	68f8      	ldr	r0, [r7, #12]
 80123ec:	f7ff ffd3 	bl	8012396 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 80123f0:	68fa      	ldr	r2, [r7, #12]
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	4614      	mov	r4, r2
 80123f6:	461d      	mov	r5, r3
 80123f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80123fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80123fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012400:	e884 0003 	stmia.w	r4, {r0, r1}
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f103 0218 	add.w	r2, r3, #24
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4614      	mov	r4, r2
 801240e:	461d      	mov	r5, r3
 8012410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012414:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012418:	e884 0003 	stmia.w	r4, {r0, r1}
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	3330      	adds	r3, #48	; 0x30
 8012420:	6839      	ldr	r1, [r7, #0]
 8012422:	4618      	mov	r0, r3
 8012424:	f7f3 fa38 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8012428:	68b8      	ldr	r0, [r7, #8]
 801242a:	f7f9 fba1 	bl	800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 801242e:	4604      	mov	r4, r0
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4618      	mov	r0, r3
 8012434:	f7ff ffbb 	bl	80123ae <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 8012438:	4603      	mov	r3, r0
 801243a:	429c      	cmp	r4, r3
 801243c:	d10a      	bne.n	8012454 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 801243e:	68b8      	ldr	r0, [r7, #8]
 8012440:	f7f9 fba3 	bl	800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012444:	4604      	mov	r4, r0
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	f7ff ffbb 	bl	80123c4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 801244e:	4603      	mov	r3, r0
 8012450:	429c      	cmp	r4, r3
 8012452:	d005      	beq.n	8012460 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 8012454:	4b05      	ldr	r3, [pc, #20]	; (801246c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 8012456:	4a06      	ldr	r2, [pc, #24]	; (8012470 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 8012458:	2174      	movs	r1, #116	; 0x74
 801245a:	4806      	ldr	r0, [pc, #24]	; (8012474 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 801245c:	f00b fe4e 	bl	801e0fc <__assert_func>
    }
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	4618      	mov	r0, r3
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bdb0      	pop	{r4, r5, r7, pc}
 801246a:	bf00      	nop
 801246c:	0801ff64 	.word	0x0801ff64
 8012470:	0802893c 	.word	0x0802893c
 8012474:	080201c8 	.word	0x080201c8

08012478 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f000 f809 	bl	8012498 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8012486:	4603      	mov	r3, r0
 8012488:	4618      	mov	r0, r3
 801248a:	f000 fb39 	bl	8012b00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 801248e:	4603      	mov	r3, r0
 8012490:	4618      	mov	r0, r3
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	4618      	mov	r0, r3
 80124a4:	370c      	adds	r7, #12
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr

080124ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b082      	sub	sp, #8
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7f9 fb59 	bl	800bb70 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 80124be:	4603      	mov	r3, r0
    }
 80124c0:	4618      	mov	r0, r3
 80124c2:	3708      	adds	r7, #8
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}

080124c8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 fb3c 	bl	8012b4e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4618      	mov	r0, r3
 80124da:	3708      	adds	r7, #8
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}

080124e0 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7ff ffec 	bl	80124c8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	4618      	mov	r0, r3
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b082      	sub	sp, #8
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	4618      	mov	r0, r3
 8012506:	f7ff ffeb 	bl	80124e0 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	4618      	mov	r0, r3
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4618      	mov	r0, r3
 8012520:	f7ff ffeb 	bl	80124fa <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4618      	mov	r0, r3
 8012528:	3708      	adds	r7, #8
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 801252e:	b580      	push	{r7, lr}
 8012530:	b082      	sub	sp, #8
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	330c      	adds	r3, #12
 801253a:	4618      	mov	r0, r3
 801253c:	f7ff ffea 	bl	8012514 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	3304      	adds	r3, #4
 8012544:	4618      	mov	r0, r3
 8012546:	f7f9 fc09 	bl	800bd5c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4618      	mov	r0, r3
 801254e:	3708      	adds	r7, #8
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8012554:	b580      	push	{r7, lr}
 8012556:	b082      	sub	sp, #8
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	4618      	mov	r0, r3
 8012560:	f7ff ffe5 	bl	801252e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f000 fae7 	bl	8012b38 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	4618      	mov	r0, r3
 8012580:	f7ff ffe8 	bl	8012554 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801258e:	b580      	push	{r7, lr}
 8012590:	b082      	sub	sp, #8
 8012592:	af00      	add	r7, sp, #0
 8012594:	6078      	str	r0, [r7, #4]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4618      	mov	r0, r3
 801259a:	f7ff ffeb 	bl	8012574 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4618      	mov	r0, r3
 80125a2:	3708      	adds	r7, #8
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}

080125a8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 80125a8:	b580      	push	{r7, lr}
 80125aa:	ed2d 8b02 	vpush	{d8}
 80125ae:	b088      	sub	sp, #32
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7ff fc53 	bl	8011e62 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	dd05      	ble.n	80125ce <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f7ff ff58 	bl	8012478 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 80125c8:	4603      	mov	r3, r0
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	dc06      	bgt.n	80125dc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80125ce:	4b16      	ldr	r3, [pc, #88]	; (8012628 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80125d0:	4a16      	ldr	r2, [pc, #88]	; (801262c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80125d2:	f240 119b 	movw	r1, #411	; 0x19b
 80125d6:	4816      	ldr	r0, [pc, #88]	; (8012630 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80125d8:	f00b fd90 	bl	801e0fc <__assert_func>
 80125dc:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f7ff ff5a 	bl	8012498 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80125e4:	4602      	mov	r2, r0
 80125e6:	f107 030c 	add.w	r3, r7, #12
 80125ea:	4611      	mov	r1, r2
 80125ec:	4618      	mov	r0, r3
 80125ee:	f000 fa94 	bl	8012b1a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f7ff ff50 	bl	8012498 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 80125f8:	4602      	mov	r2, r0
 80125fa:	f107 030c 	add.w	r3, r7, #12
 80125fe:	6839      	ldr	r1, [r7, #0]
 8012600:	4618      	mov	r0, r3
 8012602:	f000 faaf 	bl	8012b64 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 8012606:	eeb0 8a40 	vmov.f32	s16, s0
 801260a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801260c:	f107 030c 	add.w	r3, r7, #12
 8012610:	4618      	mov	r0, r3
 8012612:	f7ff ffbc 	bl	801258e <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012616:	eef0 7a48 	vmov.f32	s15, s16
}
 801261a:	eeb0 0a67 	vmov.f32	s0, s15
 801261e:	3720      	adds	r7, #32
 8012620:	46bd      	mov	sp, r7
 8012622:	ecbd 8b02 	vpop	{d8}
 8012626:	bd80      	pop	{r7, pc}
 8012628:	08024fe4 	.word	0x08024fe4
 801262c:	08028bac 	.word	0x08028bac
 8012630:	080251f0 	.word	0x080251f0

08012634 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	3310      	adds	r3, #16
 8012640:	4618      	mov	r0, r3
 8012642:	370c      	adds	r7, #12
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr

0801264c <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	4618      	mov	r0, r3
 8012658:	370c      	adds	r7, #12
 801265a:	46bd      	mov	sp, r7
 801265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012660:	4770      	bx	lr

08012662 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8012662:	b480      	push	{r7}
 8012664:	b083      	sub	sp, #12
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	68db      	ldr	r3, [r3, #12]
 801266e:	4618      	mov	r0, r3
 8012670:	370c      	adds	r7, #12
 8012672:	46bd      	mov	sp, r7
 8012674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012678:	4770      	bx	lr

0801267a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801267a:	b580      	push	{r7, lr}
 801267c:	b082      	sub	sp, #8
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
 8012682:	6039      	str	r1, [r7, #0]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	4618      	mov	r0, r3
 801268a:	f000 fa7c 	bl	8012b86 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	4618      	mov	r0, r3
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6839      	ldr	r1, [r7, #0]
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7f8 f8bb 	bl	800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	4618      	mov	r0, r3
 80126b0:	3708      	adds	r7, #8
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}

080126b6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 80126b6:	b5b0      	push	{r4, r5, r7, lr}
 80126b8:	b082      	sub	sp, #8
 80126ba:	af00      	add	r7, sp, #0
 80126bc:	6078      	str	r0, [r7, #4]
 80126be:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f000 fa6e 	bl	8012ba4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 80126c8:	4604      	mov	r4, r0
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	3304      	adds	r3, #4
 80126ce:	6839      	ldr	r1, [r7, #0]
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7ff fc7f 	bl	8011fd4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80126d6:	4605      	mov	r5, r0
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	330c      	adds	r3, #12
 80126dc:	6839      	ldr	r1, [r7, #0]
 80126de:	4618      	mov	r0, r3
 80126e0:	f7ff fc78 	bl	8011fd4 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 80126e4:	4603      	mov	r3, r0
 80126e6:	461a      	mov	r2, r3
 80126e8:	4629      	mov	r1, r5
 80126ea:	4620      	mov	r0, r4
 80126ec:	f7f6 ff39 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80126f0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80126f4:	eeb0 0a67 	vmov.f32	s0, s15
 80126f8:	3708      	adds	r7, #8
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bdb0      	pop	{r4, r5, r7, pc}

080126fe <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80126fe:	b590      	push	{r4, r7, lr}
 8012700:	b083      	sub	sp, #12
 8012702:	af00      	add	r7, sp, #0
 8012704:	6078      	str	r0, [r7, #4]
 8012706:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f000 fa72 	bl	8012bf2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	4618      	mov	r0, r3
 8012712:	f000 f81e 	bl	8012752 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8012716:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	601a      	str	r2, [r3, #0]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	1d1c      	adds	r4, r3, #4
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	4618      	mov	r0, r3
 8012724:	f000 fa49 	bl	8012bba <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8012728:	4603      	mov	r3, r0
 801272a:	4619      	mov	r1, r3
 801272c:	4620      	mov	r0, r4
 801272e:	f7f4 fb2d 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	1d5c      	adds	r4, r3, #5
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	4618      	mov	r0, r3
 801273a:	f000 fa4c 	bl	8012bd6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 801273e:	4603      	mov	r3, r0
 8012740:	4619      	mov	r1, r3
 8012742:	4620      	mov	r0, r4
 8012744:	f7f4 fb08 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4618      	mov	r0, r3
 801274c:	370c      	adds	r7, #12
 801274e:	46bd      	mov	sp, r7
 8012750:	bd90      	pop	{r4, r7, pc}

08012752 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8012752:	b480      	push	{r7}
 8012754:	b083      	sub	sp, #12
 8012756:	af00      	add	r7, sp, #0
 8012758:	6078      	str	r0, [r7, #4]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4618      	mov	r0, r3
 8012760:	370c      	adds	r7, #12
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr

0801276a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801276a:	b580      	push	{r7, lr}
 801276c:	b082      	sub	sp, #8
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
 8012772:	6039      	str	r1, [r7, #0]
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 fa47 	bl	8012c08 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6839      	ldr	r1, [r7, #0]
 801277e:	4618      	mov	r0, r3
 8012780:	f000 fa4d 	bl	8012c1e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
 8012796:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012798:	2200      	movs	r2, #0
 801279a:	2100      	movs	r1, #0
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f000 fa66 	bl	8012c6e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 80127a2:	eef0 7a40 	vmov.f32	s15, s0
  }
 80127a6:	eeb0 0a67 	vmov.f32	s0, s15
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b084      	sub	sp, #16
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80127ba:	6839      	ldr	r1, [r7, #0]
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f000 fa69 	bl	8012c94 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 80127c2:	eef0 7a40 	vmov.f32	s15, s0
 80127c6:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80127ca:	6839      	ldr	r1, [r7, #0]
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f000 fa72 	bl	8012cb6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 80127d2:	eef0 7a40 	vmov.f32	s15, s0
 80127d6:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80127da:	f107 020c 	add.w	r2, r7, #12
 80127de:	f107 0308 	add.w	r3, r7, #8
 80127e2:	4619      	mov	r1, r3
 80127e4:	6838      	ldr	r0, [r7, #0]
 80127e6:	f7f6 febc 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80127ea:	eef0 7a40 	vmov.f32	s15, s0
  }
 80127ee:	eeb0 0a67 	vmov.f32	s0, s15
 80127f2:	3710      	adds	r7, #16
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
      : inner;
 8012802:	683b      	ldr	r3, [r7, #0]
  }
 8012804:	4618      	mov	r0, r3
 8012806:	370c      	adds	r7, #12
 8012808:	46bd      	mov	sp, r7
 801280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280e:	4770      	bx	lr

08012810 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012810:	b480      	push	{r7}
 8012812:	b083      	sub	sp, #12
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
      : outer;
 801281a:	687b      	ldr	r3, [r7, #4]
  }
 801281c:	4618      	mov	r0, r3
 801281e:	370c      	adds	r7, #12
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr

08012828 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012828:	b5b0      	push	{r4, r5, r7, lr}
 801282a:	b086      	sub	sp, #24
 801282c:	af00      	add	r7, sp, #0
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	60b9      	str	r1, [r7, #8]
 8012832:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	689c      	ldr	r4, [r3, #8]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	68b9      	ldr	r1, [r7, #8]
 8012840:	4618      	mov	r0, r3
 8012842:	f7f6 fb2d 	bl	8008ea0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012846:	4605      	mov	r5, r0
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	68b9      	ldr	r1, [r7, #8]
 8012850:	4618      	mov	r0, r3
 8012852:	f000 fa41 	bl	8012cd8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 8012856:	eef0 7a40 	vmov.f32	s15, s0
 801285a:	edc7 7a05 	vstr	s15, [r7, #20]
 801285e:	f107 0314 	add.w	r3, r7, #20
 8012862:	461a      	mov	r2, r3
 8012864:	4629      	mov	r1, r5
 8012866:	4620      	mov	r0, r4
 8012868:	f000 fa69 	bl	8012d3e <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 801286c:	bf00      	nop
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bdb0      	pop	{r4, r5, r7, pc}

08012874 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801287c:	2202      	movs	r2, #2
 801287e:	2100      	movs	r1, #0
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f7ff fc0d 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f000 fa70 	bl	8012d6c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 801288c:	bf00      	nop
 801288e:	3708      	adds	r7, #8
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	3310      	adds	r3, #16
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7fd fff8 	bl	8010896 <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 80128a6:	4603      	mov	r3, r0
    }
 80128a8:	4618      	mov	r0, r3
 80128aa:	3708      	adds	r7, #8
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b082      	sub	sp, #8
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 80128b8:	f7fd fbbd 	bl	8010036 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 80128bc:	4603      	mov	r3, r0
    }
 80128be:	4618      	mov	r0, r3
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}

080128c6 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 80128c6:	b5b0      	push	{r4, r5, r7, lr}
 80128c8:	b082      	sub	sp, #8
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	6078      	str	r0, [r7, #4]
 80128ce:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f000 fa66 	bl	8012da2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 80128d6:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	4618      	mov	r0, r3
 80128dc:	f000 fa56 	bl	8012d8c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 80128e0:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 80128e2:	4619      	mov	r1, r3
 80128e4:	4620      	mov	r0, r4
 80128e6:	f000 fa67 	bl	8012db8 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f103 0410 	add.w	r4, r3, #16
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7ff ffce 	bl	8012894 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 80128f8:	4603      	mov	r3, r0
 80128fa:	4619      	mov	r1, r3
 80128fc:	4620      	mov	r0, r4
 80128fe:	f7fb fab9 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f103 0414 	add.w	r4, r3, #20
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	4618      	mov	r0, r3
 801290c:	f7ff ffd0 	bl	80128b0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012910:	4603      	mov	r3, r0
 8012912:	4619      	mov	r1, r3
 8012914:	4620      	mov	r0, r4
 8012916:	f7fb fb21 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f103 0518 	add.w	r5, r3, #24
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	4618      	mov	r0, r3
 8012924:	f7ff ffc4 	bl	80128b0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8012928:	4604      	mov	r4, r0
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	4618      	mov	r0, r3
 801292e:	f000 fa2d 	bl	8012d8c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8012932:	4603      	mov	r3, r0
 8012934:	4618      	mov	r0, r3
 8012936:	f7f5 fd6c 	bl	8008412 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 801293a:	4603      	mov	r3, r0
 801293c:	fb03 f404 	mul.w	r4, r3, r4
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	4618      	mov	r0, r3
 8012944:	f7ff ffa6 	bl	8012894 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8012948:	4603      	mov	r3, r0
 801294a:	4423      	add	r3, r4
 801294c:	4619      	mov	r1, r3
 801294e:	4628      	mov	r0, r5
 8012950:	f7fb fa90 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	4618      	mov	r0, r3
 8012958:	3708      	adds	r7, #8
 801295a:	46bd      	mov	sp, r7
 801295c:	bdb0      	pop	{r4, r5, r7, pc}

0801295e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801295e:	b580      	push	{r7, lr}
 8012960:	b082      	sub	sp, #8
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 801296a:	4618      	mov	r0, r3
 801296c:	f7f5 ffdc 	bl	8008928 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8012970:	4603      	mov	r3, r0
    }
 8012972:	4618      	mov	r0, r3
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801297a:	b580      	push	{r7, lr}
 801297c:	b082      	sub	sp, #8
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 8012986:	4618      	mov	r0, r3
 8012988:	f7fb fa1e 	bl	800ddc8 <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 801298c:	4603      	mov	r3, r0
    }
 801298e:	4618      	mov	r0, r3
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012996:	b480      	push	{r7}
 8012998:	b083      	sub	sp, #12
 801299a:	af00      	add	r7, sp, #0
 801299c:	6078      	str	r0, [r7, #4]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	4618      	mov	r0, r3
 80129a2:	370c      	adds	r7, #12
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr

080129ac <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4618      	mov	r0, r3
 80129ba:	370c      	adds	r7, #12
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr

080129c4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	4618      	mov	r0, r3
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr

080129dc <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	4618      	mov	r0, r3
 80129e8:	370c      	adds	r7, #12
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr

080129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 80129f2:	b580      	push	{r7, lr}
 80129f4:	b086      	sub	sp, #24
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	60f8      	str	r0, [r7, #12]
 80129fa:	60b9      	str	r1, [r7, #8]
 80129fc:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 80129fe:	6879      	ldr	r1, [r7, #4]
 8012a00:	68b8      	ldr	r0, [r7, #8]
 8012a02:	f000 f9e8 	bl	8012dd6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8012a06:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8012a08:	6879      	ldr	r1, [r7, #4]
 8012a0a:	68b8      	ldr	r0, [r7, #8]
 8012a0c:	f000 f9ef 	bl	8012dee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8012a10:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8012a12:	693a      	ldr	r2, [r7, #16]
 8012a14:	6979      	ldr	r1, [r7, #20]
 8012a16:	68f8      	ldr	r0, [r7, #12]
 8012a18:	f000 f9f5 	bl	8012e06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8012a1c:	bf00      	nop
 8012a1e:	3718      	adds	r7, #24
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012a2c:	2201      	movs	r2, #1
 8012a2e:	2100      	movs	r1, #0
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f7ff ffde 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f000 fa0b 	bl	8012e52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 8012a3c:	bf00      	nop
 8012a3e:	3708      	adds	r7, #8
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	6839      	ldr	r1, [r7, #0]
 8012a52:	4618      	mov	r0, r3
 8012a54:	f000 fa0d 	bl	8012e72 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	f000 fa33 	bl	8012ec6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012a60:	bf00      	nop
  }
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	4618      	mov	r0, r3
 8012a66:	3708      	adds	r7, #8
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8012a74:	f7f4 f9b7 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012a78:	4603      	mov	r3, r0
  }
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3708      	adds	r7, #8
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}

08012a82 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8012a82:	b580      	push	{r7, lr}
 8012a84:	b082      	sub	sp, #8
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8012a8a:	f7f4 f9a4 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8012a8e:	4603      	mov	r3, r0
  }
 8012a90:	4618      	mov	r0, r3
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f000 fa1b 	bl	8012ede <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3708      	adds	r7, #8
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}

08012ab2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012ab2:	b480      	push	{r7}
 8012ab4:	b083      	sub	sp, #12
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	4618      	mov	r0, r3
 8012abe:	370c      	adds	r7, #12
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac6:	4770      	bx	lr

08012ac8 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	607a      	str	r2, [r7, #4]
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	68b9      	ldr	r1, [r7, #8]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f000 fa16 	bl	8012f0c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}

08012aea <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8012aea:	b480      	push	{r7}
 8012aec:	b083      	sub	sp, #12
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
    }
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4618      	mov	r0, r3
 8012af6:	370c      	adds	r7, #12
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr

08012b00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7f9 f83d 	bl	800bb8a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8012b10:	4603      	mov	r3, r0
    }
 8012b12:	4618      	mov	r0, r3
 8012b14:	3708      	adds	r7, #8
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}

08012b1a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b082      	sub	sp, #8
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
 8012b22:	6039      	str	r1, [r7, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6839      	ldr	r1, [r7, #0]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f000 fa25 	bl	8012f78 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	4618      	mov	r0, r3
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8012b38:	b480      	push	{r7}
 8012b3a:	b083      	sub	sp, #12
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	4618      	mov	r0, r3
 8012b44:	370c      	adds	r7, #12
 8012b46:	46bd      	mov	sp, r7
 8012b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4c:	4770      	bx	lr

08012b4e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 8012b4e:	b480      	push	{r7}
 8012b50:	b083      	sub	sp, #12
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	60b9      	str	r1, [r7, #8]
 8012b6e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8012b70:	68b9      	ldr	r1, [r7, #8]
 8012b72:	68f8      	ldr	r0, [r7, #12]
 8012b74:	f000 fa0f 	bl	8012f96 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 8012b78:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8012b80:	3710      	adds	r7, #16
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}

08012b86 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012b86:	b580      	push	{r7, lr}
 8012b88:	b082      	sub	sp, #8
 8012b8a:	af00      	add	r7, sp, #0
 8012b8c:	6078      	str	r0, [r7, #4]
 8012b8e:	6039      	str	r1, [r7, #0]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6839      	ldr	r1, [r7, #0]
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 fa22 	bl	8012fde <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	4618      	mov	r0, r3
 8012bb0:	370c      	adds	r7, #12
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb8:	4770      	bx	lr

08012bba <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012bba:	b580      	push	{r7, lr}
 8012bbc:	b082      	sub	sp, #8
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	689b      	ldr	r3, [r3, #8]
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fb f973 	bl	800deb2 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8012bcc:	4603      	mov	r3, r0
    }
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3708      	adds	r7, #8
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b082      	sub	sp, #8
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	689b      	ldr	r3, [r3, #8]
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7f4 fcd6 	bl	8007594 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 8012be8:	4603      	mov	r3, r0
    }
 8012bea:	4618      	mov	r0, r3
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012bf2:	b480      	push	{r7}
 8012bf4:	b083      	sub	sp, #12
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	370c      	adds	r7, #12
 8012c00:	46bd      	mov	sp, r7
 8012c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c06:	4770      	bx	lr

08012c08 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8012c08:	b480      	push	{r7}
 8012c0a:	b083      	sub	sp, #12
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	4618      	mov	r0, r3
 8012c14:	370c      	adds	r7, #12
 8012c16:	46bd      	mov	sp, r7
 8012c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1c:	4770      	bx	lr

08012c1e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8012c1e:	b590      	push	{r4, r7, lr}
 8012c20:	b083      	sub	sp, #12
 8012c22:	af00      	add	r7, sp, #0
 8012c24:	6078      	str	r0, [r7, #4]
 8012c26:	6039      	str	r1, [r7, #0]
 8012c28:	687c      	ldr	r4, [r7, #4]
 8012c2a:	6838      	ldr	r0, [r7, #0]
 8012c2c:	f000 fa14 	bl	8013058 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 8012c30:	4603      	mov	r3, r0
 8012c32:	4619      	mov	r1, r3
 8012c34:	4620      	mov	r0, r4
 8012c36:	f7f2 fe2f 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	1d1c      	adds	r4, r3, #4
 8012c3e:	6838      	ldr	r0, [r7, #0]
 8012c40:	f000 fa16 	bl	8013070 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 8012c44:	4603      	mov	r3, r0
 8012c46:	4619      	mov	r1, r3
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f000 fa28 	bl	801309e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f103 0408 	add.w	r4, r3, #8
 8012c54:	6838      	ldr	r0, [r7, #0]
 8012c56:	f000 fa16 	bl	8013086 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	4619      	mov	r1, r3
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f7f8 fdd9 	bl	800b816 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	4618      	mov	r0, r3
 8012c68:	370c      	adds	r7, #12
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd90      	pop	{r4, r7, pc}

08012c6e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8012c6e:	b580      	push	{r7, lr}
 8012c70:	b084      	sub	sp, #16
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	60f8      	str	r0, [r7, #12]
 8012c76:	60b9      	str	r1, [r7, #8]
 8012c78:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	68ba      	ldr	r2, [r7, #8]
 8012c7e:	6879      	ldr	r1, [r7, #4]
 8012c80:	4618      	mov	r0, r3
 8012c82:	f000 fa1b 	bl	80130bc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 8012c86:	eef0 7a40 	vmov.f32	s15, s0
 8012c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8012c8e:	3710      	adds	r7, #16
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7ff ffe3 	bl	8012c6e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012ca8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012cac:	eeb0 0a67 	vmov.f32	s0, s15
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}

08012cb6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012cb6:	b580      	push	{r7, lr}
 8012cb8:	b082      	sub	sp, #8
 8012cba:	af00      	add	r7, sp, #0
 8012cbc:	6078      	str	r0, [r7, #4]
 8012cbe:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012cc0:	2202      	movs	r2, #2
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7ff ffd2 	bl	8012c6e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8012cca:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012cce:	eeb0 0a67 	vmov.f32	s0, s15
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}

08012cd8 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b0a4      	sub	sp, #144	; 0x90
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	6819      	ldr	r1, [r3, #0]
 8012ce8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012cec:	68ba      	ldr	r2, [r7, #8]
 8012cee:	4618      	mov	r0, r3
 8012cf0:	f7f8 fc16 	bl	800b520 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 8012cf4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012cf8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8012cfc:	4611      	mov	r1, r2
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7f8 fc21 	bl	800b546 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	6859      	ldr	r1, [r3, #4]
 8012d08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f000 f9ff 	bl	8013112 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 8012d14:	f107 0314 	add.w	r3, r7, #20
 8012d18:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8012d1c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8012d20:	4618      	mov	r0, r3
 8012d22:	f000 fa09 	bl	8013138 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8012d26:	f107 0314 	add.w	r3, r7, #20
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f000 fa32 	bl	8013194 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 8012d30:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012d34:	eeb0 0a67 	vmov.f32	s0, s15
 8012d38:	3790      	adds	r7, #144	; 0x90
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}

08012d3e <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8012d3e:	b480      	push	{r7}
 8012d40:	b085      	sub	sp, #20
 8012d42:	af00      	add	r7, sp, #0
 8012d44:	60f8      	str	r0, [r7, #12]
 8012d46:	60b9      	str	r1, [r7, #8]
 8012d48:	607a      	str	r2, [r7, #4]
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	ed93 7a00 	vldr	s14, [r3]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	edd3 7a00 	vldr	s15, [r3]
 8012d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	edc3 7a00 	vstr	s15, [r3]
 8012d60:	bf00      	nop
 8012d62:	3714      	adds	r7, #20
 8012d64:	46bd      	mov	sp, r7
 8012d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6a:	4770      	bx	lr

08012d6c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b082      	sub	sp, #8
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012d74:	2200      	movs	r2, #0
 8012d76:	2101      	movs	r1, #1
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f7ff f991 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f000 fa23 	bl	80131ca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 8012d84:	bf00      	nop
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
      return m_xpr;
 8012d94:	687b      	ldr	r3, [r7, #4]
    }
 8012d96:	4618      	mov	r0, r3
 8012d98:	370c      	adds	r7, #12
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da0:	4770      	bx	lr

08012da2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012da2:	b480      	push	{r7}
 8012da4:	b083      	sub	sp, #12
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	4618      	mov	r0, r3
 8012dae:	370c      	adds	r7, #12
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr

08012db8 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6839      	ldr	r1, [r7, #0]
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7f7 fb49 	bl	800a45e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3708      	adds	r7, #8
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8012dd6:	b480      	push	{r7}
 8012dd8:	b083      	sub	sp, #12
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
 8012dde:	6039      	str	r1, [r7, #0]
      : inner;
 8012de0:	683b      	ldr	r3, [r7, #0]
  }
 8012de2:	4618      	mov	r0, r3
 8012de4:	370c      	adds	r7, #12
 8012de6:	46bd      	mov	sp, r7
 8012de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dec:	4770      	bx	lr

08012dee <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8012dee:	b480      	push	{r7}
 8012df0:	b083      	sub	sp, #12
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
 8012df6:	6039      	str	r1, [r7, #0]
      : outer;
 8012df8:	687b      	ldr	r3, [r7, #4]
  }
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	370c      	adds	r7, #12
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e04:	4770      	bx	lr

08012e06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8012e06:	b5b0      	push	{r4, r5, r7, lr}
 8012e08:	b086      	sub	sp, #24
 8012e0a:	af00      	add	r7, sp, #0
 8012e0c:	60f8      	str	r0, [r7, #12]
 8012e0e:	60b9      	str	r1, [r7, #8]
 8012e10:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	689c      	ldr	r4, [r3, #8]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	687a      	ldr	r2, [r7, #4]
 8012e1c:	68b9      	ldr	r1, [r7, #8]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7f6 f83e 	bl	8008ea0 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8012e24:	4605      	mov	r5, r0
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	685b      	ldr	r3, [r3, #4]
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	68b9      	ldr	r1, [r7, #8]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f000 f9db 	bl	80131ea <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 8012e34:	eef0 7a40 	vmov.f32	s15, s0
 8012e38:	edc7 7a05 	vstr	s15, [r7, #20]
 8012e3c:	f107 0314 	add.w	r3, r7, #20
 8012e40:	461a      	mov	r2, r3
 8012e42:	4629      	mov	r1, r5
 8012e44:	4620      	mov	r0, r4
 8012e46:	f7f5 fd9b 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8012e4a:	bf00      	nop
 8012e4c:	3718      	adds	r7, #24
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bdb0      	pop	{r4, r5, r7, pc}

08012e52 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012e52:	b580      	push	{r7, lr}
 8012e54:	b082      	sub	sp, #8
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012e5a:	2202      	movs	r2, #2
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f7ff fdc7 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f000 f9f3 	bl	8013250 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 8012e6a:	bf00      	nop
 8012e6c:	3708      	adds	r7, #8
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}

08012e72 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8012e72:	b590      	push	{r4, r7, lr}
 8012e74:	b083      	sub	sp, #12
 8012e76:	af00      	add	r7, sp, #0
 8012e78:	6078      	str	r0, [r7, #4]
 8012e7a:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f000 fa13 	bl	80132a8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	4618      	mov	r0, r3
 8012e86:	f000 f81e 	bl	8012ec6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8012e8a:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	601a      	str	r2, [r3, #0]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	1d1c      	adds	r4, r3, #4
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	4618      	mov	r0, r3
 8012e98:	f000 f9ea 	bl	8013270 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f7f3 ff59 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	1d5c      	adds	r4, r3, #5
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	4618      	mov	r0, r3
 8012eae:	f000 f9ed 	bl	801328c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	f7f3 ff68 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	370c      	adds	r7, #12
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd90      	pop	{r4, r7, pc}

08012ec6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 8012ec6:	b480      	push	{r7}
 8012ec8:	b083      	sub	sp, #12
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	6078      	str	r0, [r7, #4]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	370c      	adds	r7, #12
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr

08012ede <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8012ede:	b480      	push	{r7}
 8012ee0:	b083      	sub	sp, #12
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	370c      	adds	r7, #12
 8012eec:	46bd      	mov	sp, r7
 8012eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef2:	4770      	bx	lr

08012ef4 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f000 f9de 	bl	80132be <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 8012f02:	4603      	mov	r3, r0
 8012f04:	4618      	mov	r0, r3
 8012f06:	3708      	adds	r7, #8
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}

08012f0c <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8012f0c:	b5b0      	push	{r4, r5, r7, lr}
 8012f0e:	b084      	sub	sp, #16
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	60f8      	str	r0, [r7, #12]
 8012f14:	60b9      	str	r1, [r7, #8]
 8012f16:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012f18:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012f1a:	68b8      	ldr	r0, [r7, #8]
 8012f1c:	f000 f9db 	bl	80132d6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 8012f20:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8012f22:	68b8      	ldr	r0, [r7, #8]
 8012f24:	f000 f9ff 	bl	8013326 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8012f28:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	fb02 f303 	mul.w	r3, r2, r3
 8012f30:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8012f32:	441d      	add	r5, r3
 8012f34:	68b8      	ldr	r0, [r7, #8]
 8012f36:	f7f3 f822 	bl	8005f7e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012f3a:	4602      	mov	r2, r0
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	4629      	mov	r1, r5
 8012f40:	4620      	mov	r0, r4
 8012f42:	f000 fa11 	bl	8013368 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	3308      	adds	r3, #8
 8012f4a:	68ba      	ldr	r2, [r7, #8]
 8012f4c:	6812      	ldr	r2, [r2, #0]
 8012f4e:	601a      	str	r2, [r3, #0]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	330c      	adds	r3, #12
 8012f54:	2100      	movs	r1, #0
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7fa ff8c 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	3310      	adds	r3, #16
 8012f60:	6879      	ldr	r1, [r7, #4]
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fa fffa 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 8012f68:	68f8      	ldr	r0, [r7, #12]
 8012f6a:	f000 fa3b 	bl	80133e4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	4618      	mov	r0, r3
 8012f72:	3710      	adds	r7, #16
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bdb0      	pop	{r4, r5, r7, pc}

08012f78 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	6039      	str	r1, [r7, #0]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6839      	ldr	r1, [r7, #0]
 8012f86:	4618      	mov	r0, r3
 8012f88:	f000 fa3c 	bl	8013404 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3708      	adds	r7, #8
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8012f96:	b580      	push	{r7, lr}
 8012f98:	b084      	sub	sp, #16
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
 8012f9e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012fa0:	6839      	ldr	r1, [r7, #0]
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f000 fa40 	bl	8013428 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 8012fa8:	eef0 7a40 	vmov.f32	s15, s0
 8012fac:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012fb0:	6839      	ldr	r1, [r7, #0]
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 fa49 	bl	801344a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 8012fb8:	eef0 7a40 	vmov.f32	s15, s0
 8012fbc:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012fc0:	f107 020c 	add.w	r2, r7, #12
 8012fc4:	f107 0308 	add.w	r3, r7, #8
 8012fc8:	4619      	mov	r1, r3
 8012fca:	6838      	ldr	r0, [r7, #0]
 8012fcc:	f7f6 fac9 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012fd0:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8012fd8:	3710      	adds	r7, #16
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}

08012fde <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 8012fde:	b5b0      	push	{r4, r5, r7, lr}
 8012fe0:	b084      	sub	sp, #16
 8012fe2:	af00      	add	r7, sp, #0
 8012fe4:	6078      	str	r0, [r7, #4]
 8012fe6:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	4618      	mov	r0, r3
 8012fec:	f000 fa51 	bl	8013492 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	1d1c      	adds	r4, r3, #4
 8012ff4:	6838      	ldr	r0, [r7, #0]
 8012ff6:	f7f3 f8f9 	bl	80061ec <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	60bb      	str	r3, [r7, #8]
 8012ffe:	6838      	ldr	r0, [r7, #0]
 8013000:	f7f3 f901 	bl	8006206 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8013004:	4603      	mov	r3, r0
 8013006:	60fb      	str	r3, [r7, #12]
 8013008:	f107 020c 	add.w	r2, r7, #12
 801300c:	f107 0308 	add.w	r3, r7, #8
 8013010:	4619      	mov	r1, r3
 8013012:	4620      	mov	r0, r4
 8013014:	f000 fa4a 	bl	80134ac <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	4619      	mov	r1, r3
 801301c:	2004      	movs	r0, #4
 801301e:	f7ed ffd5 	bl	8000fcc <_ZnwjPv>
 8013022:	4602      	mov	r2, r0
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	3304      	adds	r3, #4
 8013028:	4619      	mov	r1, r3
 801302a:	4610      	mov	r0, r2
 801302c:	f7f7 fbf9 	bl	800a822 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	1d1c      	adds	r4, r3, #4
 8013034:	6838      	ldr	r0, [r7, #0]
 8013036:	f000 fa52 	bl	80134de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 801303a:	4605      	mov	r5, r0
 801303c:	6838      	ldr	r0, [r7, #0]
 801303e:	f000 fa59 	bl	80134f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8013042:	4603      	mov	r3, r0
 8013044:	461a      	mov	r2, r3
 8013046:	4629      	mov	r1, r5
 8013048:	4620      	mov	r0, r4
 801304a:	f000 fa5f 	bl	801350c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4618      	mov	r0, r3
 8013052:	3710      	adds	r7, #16
 8013054:	46bd      	mov	sp, r7
 8013056:	bdb0      	pop	{r4, r5, r7, pc}

08013058 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013058:	b480      	push	{r7}
 801305a:	b083      	sub	sp, #12
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	3308      	adds	r3, #8
 8013064:	4618      	mov	r0, r3
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013070:	b480      	push	{r7}
 8013072:	b083      	sub	sp, #12
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	4618      	mov	r0, r3
 801307c:	370c      	adds	r7, #12
 801307e:	46bd      	mov	sp, r7
 8013080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013084:	4770      	bx	lr

08013086 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013086:	b480      	push	{r7}
 8013088:	b083      	sub	sp, #12
 801308a:	af00      	add	r7, sp, #0
 801308c:	6078      	str	r0, [r7, #4]
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	4618      	mov	r0, r3
 8013094:	370c      	adds	r7, #12
 8013096:	46bd      	mov	sp, r7
 8013098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309c:	4770      	bx	lr

0801309e <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801309e:	b580      	push	{r7, lr}
 80130a0:	b082      	sub	sp, #8
 80130a2:	af00      	add	r7, sp, #0
 80130a4:	6078      	str	r0, [r7, #4]
 80130a6:	6039      	str	r1, [r7, #0]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6839      	ldr	r1, [r7, #0]
 80130ac:	4618      	mov	r0, r3
 80130ae:	f000 fa55 	bl	801355c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	4618      	mov	r0, r3
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80130bc:	b590      	push	{r4, r7, lr}
 80130be:	b087      	sub	sp, #28
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	4618      	mov	r0, r3
 80130cc:	f000 fa55 	bl	801357a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 80130d0:	4604      	mov	r4, r0
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	3304      	adds	r3, #4
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	68b9      	ldr	r1, [r7, #8]
 80130da:	4618      	mov	r0, r3
 80130dc:	f000 fa58 	bl	8013590 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 80130e0:	eef0 7a40 	vmov.f32	s15, s0
 80130e4:	edc7 7a05 	vstr	s15, [r7, #20]
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	3308      	adds	r3, #8
 80130ec:	687a      	ldr	r2, [r7, #4]
 80130ee:	68b9      	ldr	r1, [r7, #8]
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7fe f9d0 	bl	8011496 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 80130f6:	4602      	mov	r2, r0
 80130f8:	f107 0314 	add.w	r3, r7, #20
 80130fc:	4619      	mov	r1, r3
 80130fe:	4620      	mov	r0, r4
 8013100:	f7fc fa70 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013104:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013108:	eeb0 0a67 	vmov.f32	s0, s15
 801310c:	371c      	adds	r7, #28
 801310e:	46bd      	mov	sp, r7
 8013110:	bd90      	pop	{r4, r7, pc}

08013112 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 8013112:	b580      	push	{r7, lr}
 8013114:	b084      	sub	sp, #16
 8013116:	af00      	add	r7, sp, #0
 8013118:	60f8      	str	r0, [r7, #12]
 801311a:	60b9      	str	r1, [r7, #8]
 801311c:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 801311e:	68b8      	ldr	r0, [r7, #8]
 8013120:	f7f2 ff6a 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013124:	4603      	mov	r3, r0
 8013126:	687a      	ldr	r2, [r7, #4]
 8013128:	4619      	mov	r1, r3
 801312a:	68f8      	ldr	r0, [r7, #12]
 801312c:	f000 fa46 	bl	80135bc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 8013130:	68f8      	ldr	r0, [r7, #12]
 8013132:	3710      	adds	r7, #16
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8013138:	b5b0      	push	{r4, r5, r7, lr}
 801313a:	b086      	sub	sp, #24
 801313c:	af00      	add	r7, sp, #0
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	60b9      	str	r1, [r7, #8]
 8013142:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8013144:	68b8      	ldr	r0, [r7, #8]
 8013146:	f7f8 ffff 	bl	800c148 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 801314a:	4604      	mov	r4, r0
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f000 fa5d 	bl	801360c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 8013152:	4605      	mov	r5, r0
 8013154:	f107 0314 	add.w	r3, r7, #20
 8013158:	4618      	mov	r0, r3
 801315a:	f7f2 fb13 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 801315e:	f107 0314 	add.w	r3, r7, #20
 8013162:	462a      	mov	r2, r5
 8013164:	4621      	mov	r1, r4
 8013166:	68f8      	ldr	r0, [r7, #12]
 8013168:	f000 fa8a 	bl	8013680 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 801316c:	68f8      	ldr	r0, [r7, #12]
 801316e:	3718      	adds	r7, #24
 8013170:	46bd      	mov	sp, r7
 8013172:	bdb0      	pop	{r4, r5, r7, pc}

08013174 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f000 fadd 	bl	801373c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013182:	4603      	mov	r3, r0
 8013184:	4618      	mov	r0, r3
 8013186:	f000 fae4 	bl	8013752 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 801318a:	4603      	mov	r3, r0
 801318c:	4618      	mov	r0, r3
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8013194:	b590      	push	{r4, r7, lr}
 8013196:	b085      	sub	sp, #20
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f000 facd 	bl	801373c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 80131a2:	4604      	mov	r4, r0
 80131a4:	f107 030c 	add.w	r3, r7, #12
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7f2 fde2 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 80131ae:	f107 030c 	add.w	r3, r7, #12
 80131b2:	4619      	mov	r1, r3
 80131b4:	4620      	mov	r0, r4
 80131b6:	f000 fb49 	bl	801384c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 80131ba:	eef0 7a40 	vmov.f32	s15, s0
 80131be:	bf00      	nop
}
 80131c0:	eeb0 0a67 	vmov.f32	s0, s15
 80131c4:	3714      	adds	r7, #20
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd90      	pop	{r4, r7, pc}

080131ca <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80131ca:	b580      	push	{r7, lr}
 80131cc:	b082      	sub	sp, #8
 80131ce:	af00      	add	r7, sp, #0
 80131d0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80131d2:	2201      	movs	r2, #1
 80131d4:	2101      	movs	r1, #1
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f7fe ff62 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f000 fb7b 	bl	80138d8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 80131e2:	bf00      	nop
 80131e4:	3708      	adds	r7, #8
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}

080131ea <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 80131ea:	b580      	push	{r7, lr}
 80131ec:	b0a4      	sub	sp, #144	; 0x90
 80131ee:	af00      	add	r7, sp, #0
 80131f0:	60f8      	str	r0, [r7, #12]
 80131f2:	60b9      	str	r1, [r7, #8]
 80131f4:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	6819      	ldr	r1, [r3, #0]
 80131fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80131fe:	68ba      	ldr	r2, [r7, #8]
 8013200:	4618      	mov	r0, r3
 8013202:	f7f7 ffbd 	bl	800b180 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8013206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801320a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801320e:	4611      	mov	r1, r2
 8013210:	4618      	mov	r0, r3
 8013212:	f7f7 ffc8 	bl	800b1a6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	6859      	ldr	r1, [r3, #4]
 801321a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	4618      	mov	r0, r3
 8013222:	f7f9 f9f4 	bl	800c60e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 8013226:	f107 0314 	add.w	r3, r7, #20
 801322a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801322e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8013232:	4618      	mov	r0, r3
 8013234:	f7f9 f9fe 	bl	800c634 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8013238:	f107 0314 	add.w	r3, r7, #20
 801323c:	4618      	mov	r0, r3
 801323e:	f7f9 fa27 	bl	800c690 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 8013242:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013246:	eeb0 0a67 	vmov.f32	s0, s15
 801324a:	3790      	adds	r7, #144	; 0x90
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013258:	2200      	movs	r2, #0
 801325a:	2101      	movs	r1, #1
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f7ff fbc8 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f000 fb48 	bl	80138f8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 8013268:	bf00      	nop
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 801327c:	4618      	mov	r0, r3
 801327e:	f7fd fc40 	bl	8010b02 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 8013282:	4603      	mov	r3, r0
    }
 8013284:	4618      	mov	r0, r3
 8013286:	3708      	adds	r7, #8
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}

0801328c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801328c:	b580      	push	{r7, lr}
 801328e:	b082      	sub	sp, #8
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8013298:	4618      	mov	r0, r3
 801329a:	f7fd fc1e 	bl	8010ada <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 801329e:	4603      	mov	r3, r0
    }
 80132a0:	4618      	mov	r0, r3
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 80132be:	b580      	push	{r7, lr}
 80132c0:	b082      	sub	sp, #8
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f000 fb36 	bl	8013938 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 80132cc:	4603      	mov	r3, r0
    }
 80132ce:	4618      	mov	r0, r3
 80132d0:	3708      	adds	r7, #8
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}

080132d6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b082      	sub	sp, #8
 80132da:	af00      	add	r7, sp, #0
 80132dc:	6078      	str	r0, [r7, #4]
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7f2 fe1e 	bl	8005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80132e4:	4603      	mov	r3, r0
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7fe fd63 	bl	8011db2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80132ec:	4603      	mov	r3, r0
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7ff fbd2 	bl	8012a98 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80132f4:	4603      	mov	r3, r0
 80132f6:	4618      	mov	r0, r3
 80132f8:	3708      	adds	r7, #8
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}

080132fe <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 80132fe:	b580      	push	{r7, lr}
 8013300:	b082      	sub	sp, #8
 8013302:	af00      	add	r7, sp, #0
 8013304:	6078      	str	r0, [r7, #4]
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f7f2 fe0a 	bl	8005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 801330c:	4603      	mov	r3, r0
 801330e:	4618      	mov	r0, r3
 8013310:	f7fe fd4f 	bl	8011db2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013314:	4603      	mov	r3, r0
 8013316:	4618      	mov	r0, r3
 8013318:	f000 fb30 	bl	801397c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 801331c:	4603      	mov	r3, r0
 801331e:	4618      	mov	r0, r3
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}

08013326 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 8013326:	b580      	push	{r7, lr}
 8013328:	b082      	sub	sp, #8
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7f2 fdf6 	bl	8005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013334:	4603      	mov	r3, r0
 8013336:	4618      	mov	r0, r3
 8013338:	f7fe fd3b 	bl	8011db2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801333c:	4603      	mov	r3, r0
 801333e:	4618      	mov	r0, r3
 8013340:	f7ff fdd8 	bl	8012ef4 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8013344:	4603      	mov	r3, r0
 8013346:	4618      	mov	r0, r3
 8013348:	3708      	adds	r7, #8
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}

0801334e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 801334e:	b580      	push	{r7, lr}
 8013350:	b082      	sub	sp, #8
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f000 fb1b 	bl	8013992 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4618      	mov	r0, r3
 8013360:	3708      	adds	r7, #8
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
	...

08013368 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013368:	b580      	push	{r7, lr}
 801336a:	b084      	sub	sp, #16
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
 8013374:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8013376:	68f8      	ldr	r0, [r7, #12]
 8013378:	f7ff ffe9 	bl	801334e <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	601a      	str	r2, [r3, #0]
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	3304      	adds	r3, #4
 8013386:	6879      	ldr	r1, [r7, #4]
 8013388:	4618      	mov	r0, r3
 801338a:	f7f3 fce5 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	3305      	adds	r3, #5
 8013392:	6839      	ldr	r1, [r7, #0]
 8013394:	4618      	mov	r0, r3
 8013396:	f7f3 fcf9 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d011      	beq.n	80133c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	db08      	blt.n	80133b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b03      	cmp	r3, #3
 80133aa:	d105      	bne.n	80133b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	db02      	blt.n	80133b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	2b01      	cmp	r3, #1
 80133b6:	d005      	beq.n	80133c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 80133b8:	4b07      	ldr	r3, [pc, #28]	; (80133d8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 80133ba:	4a08      	ldr	r2, [pc, #32]	; (80133dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 80133bc:	21b0      	movs	r1, #176	; 0xb0
 80133be:	4808      	ldr	r0, [pc, #32]	; (80133e0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 80133c0:	f00a fe9c 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 80133c4:	2100      	movs	r1, #0
 80133c6:	68f8      	ldr	r0, [r7, #12]
 80133c8:	f000 faee 	bl	80139a8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	4618      	mov	r0, r3
 80133d0:	3710      	adds	r7, #16
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	08026688 	.word	0x08026688
 80133dc:	08028d84 	.word	0x08028d84
 80133e0:	08026838 	.word	0x08026838

080133e4 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	3308      	adds	r3, #8
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7ff ff98 	bl	8013326 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80133f6:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	615a      	str	r2, [r3, #20]
    }
 80133fc:	bf00      	nop
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}

08013404 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f000 fad5 	bl	80139be <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6839      	ldr	r1, [r7, #0]
 8013418:	4618      	mov	r0, r3
 801341a:	f000 fadb 	bl	80139d4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	4618      	mov	r0, r3
 8013422:	3708      	adds	r7, #8
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013428:	b580      	push	{r7, lr}
 801342a:	b082      	sub	sp, #8
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013432:	2200      	movs	r2, #0
 8013434:	2100      	movs	r1, #0
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f000 faf4 	bl	8013a24 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801343c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013440:	eeb0 0a67 	vmov.f32	s0, s15
 8013444:	3708      	adds	r7, #8
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}

0801344a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801344a:	b580      	push	{r7, lr}
 801344c:	b084      	sub	sp, #16
 801344e:	af00      	add	r7, sp, #0
 8013450:	6078      	str	r0, [r7, #4]
 8013452:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013454:	6839      	ldr	r1, [r7, #0]
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f000 faf7 	bl	8013a4a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 801345c:	eef0 7a40 	vmov.f32	s15, s0
 8013460:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013464:	6839      	ldr	r1, [r7, #0]
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 fb00 	bl	8013a6c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 801346c:	eef0 7a40 	vmov.f32	s15, s0
 8013470:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013474:	f107 020c 	add.w	r2, r7, #12
 8013478:	f107 0308 	add.w	r3, r7, #8
 801347c:	4619      	mov	r1, r3
 801347e:	6838      	ldr	r0, [r7, #0]
 8013480:	f7f6 f86f 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8013484:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013488:	eeb0 0a67 	vmov.f32	s0, s15
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}

08013492 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 8013492:	b580      	push	{r7, lr}
 8013494:	b082      	sub	sp, #8
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	4618      	mov	r0, r3
 801349e:	f000 faf6 	bl	8013a8e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	4618      	mov	r0, r3
 80134a6:	3708      	adds	r7, #8
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b084      	sub	sp, #16
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	60f8      	str	r0, [r7, #12]
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	607a      	str	r2, [r7, #4]
    {
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7f1 fde2 	bl	8005084 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 80134c0:	f7f1 fdf0 	bl	80050a4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80134c4:	68f8      	ldr	r0, [r7, #12]
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	6819      	ldr	r1, [r3, #0]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	2300      	movs	r3, #0
 80134d0:	f000 faef 	bl	8013ab2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	4618      	mov	r0, r3
 80134d8:	3710      	adds	r7, #16
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}

080134de <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80134de:	b480      	push	{r7}
 80134e0:	b083      	sub	sp, #12
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	6078      	str	r0, [r7, #4]
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	4618      	mov	r0, r3
 80134ea:	370c      	adds	r7, #12
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr

080134f4 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	3308      	adds	r3, #8
 8013500:	4618      	mov	r0, r3
 8013502:	370c      	adds	r7, #12
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr

0801350c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 801350c:	b590      	push	{r4, r7, lr}
 801350e:	b08b      	sub	sp, #44	; 0x2c
 8013510:	af00      	add	r7, sp, #0
 8013512:	60f8      	str	r0, [r7, #12]
 8013514:	60b9      	str	r1, [r7, #8]
 8013516:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 8013518:	f107 0320 	add.w	r3, r7, #32
 801351c:	68b9      	ldr	r1, [r7, #8]
 801351e:	4618      	mov	r0, r3
 8013520:	f000 fadb 	bl	8013ada <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 8013524:	f107 0310 	add.w	r3, r7, #16
 8013528:	f107 0120 	add.w	r1, r7, #32
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	4618      	mov	r0, r3
 8013530:	f000 fae4 	bl	8013afc <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2200      	movs	r2, #0
 8013538:	2100      	movs	r1, #0
 801353a:	4618      	mov	r0, r3
 801353c:	f7f3 fb99 	bl	8006c72 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8013540:	4604      	mov	r4, r0
 8013542:	f107 0310 	add.w	r3, r7, #16
 8013546:	4618      	mov	r0, r3
 8013548:	f000 fb06 	bl	8013b58 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 801354c:	eef0 7a40 	vmov.f32	s15, s0
 8013550:	edc4 7a00 	vstr	s15, [r4]
  }
 8013554:	bf00      	nop
 8013556:	372c      	adds	r7, #44	; 0x2c
 8013558:	46bd      	mov	sp, r7
 801355a:	bd90      	pop	{r4, r7, pc}

0801355c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 801355c:	b580      	push	{r7, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6839      	ldr	r1, [r7, #0]
 801356a:	4618      	mov	r0, r3
 801356c:	f000 fb0f 	bl	8013b8e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	4618      	mov	r0, r3
 8013574:	3708      	adds	r7, #8
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}

0801357a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801357a:	b480      	push	{r7}
 801357c:	b083      	sub	sp, #12
 801357e:	af00      	add	r7, sp, #0
 8013580:	6078      	str	r0, [r7, #4]
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	4618      	mov	r0, r3
 8013586:	370c      	adds	r7, #12
 8013588:	46bd      	mov	sp, r7
 801358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358e:	4770      	bx	lr

08013590 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013590:	b580      	push	{r7, lr}
 8013592:	b084      	sub	sp, #16
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	68ba      	ldr	r2, [r7, #8]
 80135a0:	6879      	ldr	r1, [r7, #4]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f000 fb09 	bl	8013bba <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 80135a8:	4603      	mov	r3, r0
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	ee07 3a90 	vmov	s15, r3
  }
 80135b0:	eeb0 0a67 	vmov.f32	s0, s15
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
	...

080135bc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	607a      	str	r2, [r7, #4]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	687a      	ldr	r2, [r7, #4]
 80135cc:	68b9      	ldr	r1, [r7, #8]
 80135ce:	4618      	mov	r0, r3
 80135d0:	f000 fb0b 	bl	8013bea <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	db07      	blt.n	80135ea <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	4618      	mov	r0, r3
 80135de:	f7f1 ffe7 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80135e2:	4602      	mov	r2, r0
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	4293      	cmp	r3, r2
 80135e8:	db05      	blt.n	80135f6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 80135ea:	4b05      	ldr	r3, [pc, #20]	; (8013600 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 80135ec:	4a05      	ldr	r2, [pc, #20]	; (8013604 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 80135ee:	2178      	movs	r1, #120	; 0x78
 80135f0:	4805      	ldr	r0, [pc, #20]	; (8013608 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 80135f2:	f00a fd83 	bl	801e0fc <__assert_func>
    }
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	4618      	mov	r0, r3
 80135fa:	3710      	adds	r7, #16
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	08024ae8 	.word	0x08024ae8
 8013604:	08028e98 	.word	0x08028e98
 8013608:	08024c6c 	.word	0x08024c6c

0801360c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801360c:	b480      	push	{r7}
 801360e:	b083      	sub	sp, #12
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4618      	mov	r0, r3
 8013618:	370c      	adds	r7, #12
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr

08013622 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 8013622:	b580      	push	{r7, lr}
 8013624:	b082      	sub	sp, #8
 8013626:	af00      	add	r7, sp, #0
 8013628:	6078      	str	r0, [r7, #4]
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f000 faee 	bl	8013c0c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	4618      	mov	r0, r3
 8013634:	3708      	adds	r7, #8
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}

0801363a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801363a:	b580      	push	{r7, lr}
 801363c:	b082      	sub	sp, #8
 801363e:	af00      	add	r7, sp, #0
 8013640:	6078      	str	r0, [r7, #4]
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f7ff ffed 	bl	8013622 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	4618      	mov	r0, r3
 801364c:	3708      	adds	r7, #8
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}

08013652 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8013652:	b580      	push	{r7, lr}
 8013654:	b082      	sub	sp, #8
 8013656:	af00      	add	r7, sp, #0
 8013658:	6078      	str	r0, [r7, #4]
 801365a:	f7f3 fbc4 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801365e:	4603      	mov	r3, r0
 8013660:	4618      	mov	r0, r3
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	f7f3 fbb9 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8013674:	4603      	mov	r3, r0
 8013676:	4618      	mov	r0, r3
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
	...

08013680 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013680:	b5b0      	push	{r4, r5, r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
 801368c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f7ff ffd3 	bl	801363a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 8013694:	68fa      	ldr	r2, [r7, #12]
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	4614      	mov	r4, r2
 801369a:	461d      	mov	r5, r3
 801369c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801369e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80136a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f103 0218 	add.w	r2, r3, #24
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	4614      	mov	r4, r2
 80136b2:	461d      	mov	r5, r3
 80136b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80136bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	3330      	adds	r3, #48	; 0x30
 80136c4:	6839      	ldr	r1, [r7, #0]
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7f2 f8e6 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80136cc:	68b8      	ldr	r0, [r7, #8]
 80136ce:	f7f8 fd69 	bl	800c1a4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 80136d2:	4604      	mov	r4, r0
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7ff ffbb 	bl	8013652 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 80136dc:	4603      	mov	r3, r0
 80136de:	429c      	cmp	r4, r3
 80136e0:	d10a      	bne.n	80136f8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 80136e2:	68b8      	ldr	r0, [r7, #8]
 80136e4:	f7f8 fd6b 	bl	800c1be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 80136e8:	4604      	mov	r4, r0
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7ff ffbb 	bl	8013668 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 80136f2:	4603      	mov	r3, r0
 80136f4:	429c      	cmp	r4, r3
 80136f6:	d005      	beq.n	8013704 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 80136f8:	4b05      	ldr	r3, [pc, #20]	; (8013710 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 80136fa:	4a06      	ldr	r2, [pc, #24]	; (8013714 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 80136fc:	2174      	movs	r1, #116	; 0x74
 80136fe:	4806      	ldr	r0, [pc, #24]	; (8013718 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 8013700:	f00a fcfc 	bl	801e0fc <__assert_func>
    }
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	4618      	mov	r0, r3
 8013708:	3710      	adds	r7, #16
 801370a:	46bd      	mov	sp, r7
 801370c:	bdb0      	pop	{r4, r5, r7, pc}
 801370e:	bf00      	nop
 8013710:	0801ff64 	.word	0x0801ff64
 8013714:	08028f74 	.word	0x08028f74
 8013718:	080201c8 	.word	0x080201c8

0801371c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f000 f809 	bl	801373c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 801372a:	4603      	mov	r3, r0
 801372c:	4618      	mov	r0, r3
 801372e:	f000 fa78 	bl	8013c22 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 8013732:	4603      	mov	r3, r0
 8013734:	4618      	mov	r0, r3
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	4618      	mov	r0, r3
 8013748:	370c      	adds	r7, #12
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr

08013752 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013752:	b580      	push	{r7, lr}
 8013754:	b082      	sub	sp, #8
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	4618      	mov	r0, r3
 801375e:	f7f8 fd21 	bl	800c1a4 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8013762:	4603      	mov	r3, r0
    }
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 801376c:	b580      	push	{r7, lr}
 801376e:	b082      	sub	sp, #8
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f000 fa7b 	bl	8013c70 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4618      	mov	r0, r3
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8013784:	b580      	push	{r7, lr}
 8013786:	b082      	sub	sp, #8
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	4618      	mov	r0, r3
 8013790:	f7ff ffec 	bl	801376c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	4618      	mov	r0, r3
 8013798:	3708      	adds	r7, #8
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}

0801379e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 801379e:	b580      	push	{r7, lr}
 80137a0:	b082      	sub	sp, #8
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	6078      	str	r0, [r7, #4]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7ff ffeb 	bl	8013784 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	4618      	mov	r0, r3
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7ff ffeb 	bl	801379e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	4618      	mov	r0, r3
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 80137d2:	b580      	push	{r7, lr}
 80137d4:	b082      	sub	sp, #8
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	330c      	adds	r3, #12
 80137de:	4618      	mov	r0, r3
 80137e0:	f7ff ffea 	bl	80137b8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	3304      	adds	r3, #4
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7f8 fdcf 	bl	800c38c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	4618      	mov	r0, r3
 80137f2:	3708      	adds	r7, #8
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}

080137f8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	4618      	mov	r0, r3
 8013804:	f7ff ffe5 	bl	80137d2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f000 fa26 	bl	8013c5a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	4618      	mov	r0, r3
 8013812:	3708      	adds	r7, #8
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}

08013818 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	4618      	mov	r0, r3
 8013824:	f7ff ffe8 	bl	80137f8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	4618      	mov	r0, r3
 801382c:	3708      	adds	r7, #8
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}

08013832 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8013832:	b580      	push	{r7, lr}
 8013834:	b082      	sub	sp, #8
 8013836:	af00      	add	r7, sp, #0
 8013838:	6078      	str	r0, [r7, #4]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4618      	mov	r0, r3
 801383e:	f7ff ffeb 	bl	8013818 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4618      	mov	r0, r3
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 801384c:	b580      	push	{r7, lr}
 801384e:	ed2d 8b02 	vpush	{d8}
 8013852:	b088      	sub	sp, #32
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f7ff fc8a 	bl	8013174 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 8013860:	4603      	mov	r3, r0
 8013862:	2b00      	cmp	r3, #0
 8013864:	dd05      	ble.n	8013872 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f7ff ff58 	bl	801371c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 801386c:	4603      	mov	r3, r0
 801386e:	2b00      	cmp	r3, #0
 8013870:	dc06      	bgt.n	8013880 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8013872:	4b16      	ldr	r3, [pc, #88]	; (80138cc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013874:	4a16      	ldr	r2, [pc, #88]	; (80138d0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013876:	f240 119b 	movw	r1, #411	; 0x19b
 801387a:	4816      	ldr	r0, [pc, #88]	; (80138d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 801387c:	f00a fc3e 	bl	801e0fc <__assert_func>
 8013880:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7ff ff5a 	bl	801373c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8013888:	4602      	mov	r2, r0
 801388a:	f107 030c 	add.w	r3, r7, #12
 801388e:	4611      	mov	r1, r2
 8013890:	4618      	mov	r0, r3
 8013892:	f000 f9d3 	bl	8013c3c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f7ff ff50 	bl	801373c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 801389c:	4602      	mov	r2, r0
 801389e:	f107 030c 	add.w	r3, r7, #12
 80138a2:	6839      	ldr	r1, [r7, #0]
 80138a4:	4618      	mov	r0, r3
 80138a6:	f000 f9ee 	bl	8013c86 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 80138aa:	eeb0 8a40 	vmov.f32	s16, s0
 80138ae:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80138b0:	f107 030c 	add.w	r3, r7, #12
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7ff ffbc 	bl	8013832 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80138ba:	eef0 7a48 	vmov.f32	s15, s16
}
 80138be:	eeb0 0a67 	vmov.f32	s0, s15
 80138c2:	3720      	adds	r7, #32
 80138c4:	46bd      	mov	sp, r7
 80138c6:	ecbd 8b02 	vpop	{d8}
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	08024fe4 	.word	0x08024fe4
 80138d0:	080291c0 	.word	0x080291c0
 80138d4:	080251f0 	.word	0x080251f0

080138d8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80138e0:	2202      	movs	r2, #2
 80138e2:	2101      	movs	r1, #1
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f7fe fbdb 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f000 f9dc 	bl	8013ca8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 80138f0:	bf00      	nop
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013900:	2201      	movs	r2, #1
 8013902:	2101      	movs	r1, #1
 8013904:	6878      	ldr	r0, [r7, #4]
 8013906:	f7ff f874 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f000 f9dc 	bl	8013cc8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 8013910:	bf00      	nop
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f7f2 fb69 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8013926:	4603      	mov	r3, r0
 8013928:	4618      	mov	r0, r3
 801392a:	f7f1 fe4c 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801392e:	4603      	mov	r3, r0
 8013930:	4618      	mov	r0, r3
 8013932:	3708      	adds	r7, #8
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}

08013938 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8013938:	b590      	push	{r4, r7, lr}
 801393a:	b083      	sub	sp, #12
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7ff ffe9 	bl	8013918 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013946:	4604      	mov	r4, r0
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f000 f807 	bl	801395c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801394e:	4603      	mov	r3, r0
 8013950:	fb04 f303 	mul.w	r3, r4, r3
 8013954:	4618      	mov	r0, r3
 8013956:	370c      	adds	r7, #12
 8013958:	46bd      	mov	sp, r7
 801395a:	bd90      	pop	{r4, r7, pc}

0801395c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801395c:	b580      	push	{r7, lr}
 801395e:	b082      	sub	sp, #8
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f7f2 fb47 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 801396a:	4603      	mov	r3, r0
 801396c:	4618      	mov	r0, r3
 801396e:	f7f1 fe1f 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013972:	4603      	mov	r3, r0
 8013974:	4618      	mov	r0, r3
 8013976:	3708      	adds	r7, #8
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	2301      	movs	r3, #1
 8013986:	4618      	mov	r0, r3
 8013988:	370c      	adds	r7, #12
 801398a:	46bd      	mov	sp, r7
 801398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013990:	4770      	bx	lr

08013992 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013992:	b480      	push	{r7}
 8013994:	b083      	sub	sp, #12
 8013996:	af00      	add	r7, sp, #0
 8013998:	6078      	str	r0, [r7, #4]
    }
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	4618      	mov	r0, r3
 801399e:	370c      	adds	r7, #12
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr

080139a8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	6039      	str	r1, [r7, #0]
    {}
 80139b2:	bf00      	nop
 80139b4:	370c      	adds	r7, #12
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr

080139be <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80139be:	b480      	push	{r7}
 80139c0:	b083      	sub	sp, #12
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4618      	mov	r0, r3
 80139ca:	370c      	adds	r7, #12
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr

080139d4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80139d4:	b590      	push	{r4, r7, lr}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
 80139de:	687c      	ldr	r4, [r7, #4]
 80139e0:	6838      	ldr	r0, [r7, #0]
 80139e2:	f000 f981 	bl	8013ce8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 80139e6:	4603      	mov	r3, r0
 80139e8:	4619      	mov	r1, r3
 80139ea:	4620      	mov	r0, r4
 80139ec:	f7f1 ff54 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	1d1c      	adds	r4, r3, #4
 80139f4:	6838      	ldr	r0, [r7, #0]
 80139f6:	f000 f983 	bl	8013d00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 80139fa:	4603      	mov	r3, r0
 80139fc:	4619      	mov	r1, r3
 80139fe:	4620      	mov	r0, r4
 8013a00:	f7fb fa91 	bl	800ef26 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f103 040c 	add.w	r4, r3, #12
 8013a0a:	6838      	ldr	r0, [r7, #0]
 8013a0c:	f000 f983 	bl	8013d16 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 8013a10:	4603      	mov	r3, r0
 8013a12:	4619      	mov	r1, r3
 8013a14:	4620      	mov	r0, r4
 8013a16:	f000 f98a 	bl	8013d2e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	370c      	adds	r7, #12
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd90      	pop	{r4, r7, pc}

08013a24 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b084      	sub	sp, #16
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	60f8      	str	r0, [r7, #12]
 8013a2c:	60b9      	str	r1, [r7, #8]
 8013a2e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	68ba      	ldr	r2, [r7, #8]
 8013a34:	6879      	ldr	r1, [r7, #4]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f000 f988 	bl	8013d4c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 8013a3c:	eef0 7a40 	vmov.f32	s15, s0
 8013a40:	eeb0 0a67 	vmov.f32	s0, s15
 8013a44:	3710      	adds	r7, #16
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013a4a:	b580      	push	{r7, lr}
 8013a4c:	b082      	sub	sp, #8
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	6078      	str	r0, [r7, #4]
 8013a52:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013a54:	2201      	movs	r2, #1
 8013a56:	2100      	movs	r1, #0
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f7ff ffe3 	bl	8013a24 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8013a5e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013a62:	eeb0 0a67 	vmov.f32	s0, s15
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013a76:	2202      	movs	r2, #2
 8013a78:	2100      	movs	r1, #0
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f7ff ffd2 	bl	8013a24 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8013a80:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013a84:	eeb0 0a67 	vmov.f32	s0, s15
 8013a88:	3708      	adds	r7, #8
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}

08013a8e <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 8013a8e:	b580      	push	{r7, lr}
 8013a90:	b082      	sub	sp, #8
 8013a92:	af00      	add	r7, sp, #0
 8013a94:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f7f7 fd37 	bl	800b50a <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7f3 fcbd 	bl	8007422 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3708      	adds	r7, #8
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}

08013ab2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8013ab2:	b580      	push	{r7, lr}
 8013ab4:	b086      	sub	sp, #24
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	60f8      	str	r0, [r7, #12]
 8013aba:	60b9      	str	r1, [r7, #8]
 8013abc:	607a      	str	r2, [r7, #4]
 8013abe:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8013ac8:	687a      	ldr	r2, [r7, #4]
 8013aca:	68b9      	ldr	r1, [r7, #8]
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f7f9 fef9 	bl	800d8c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 8013ad2:	bf00      	nop
 8013ad4:	3718      	adds	r7, #24
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}

08013ada <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8013ada:	b580      	push	{r7, lr}
 8013adc:	b082      	sub	sp, #8
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
 8013ae2:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8013ae4:	6838      	ldr	r0, [r7, #0]
 8013ae6:	f7f2 fae5 	bl	80060b4 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8013aea:	4603      	mov	r3, r0
 8013aec:	4619      	mov	r1, r3
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f000 f974 	bl	8013ddc <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	3708      	adds	r7, #8
 8013af8:	46bd      	mov	sp, r7
 8013afa:	bd80      	pop	{r7, pc}

08013afc <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8013afc:	b5b0      	push	{r4, r5, r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8013b08:	68b8      	ldr	r0, [r7, #8]
 8013b0a:	f000 f97a 	bl	8013e02 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 8013b0e:	4604      	mov	r4, r0
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7f2 fa05 	bl	8005f20 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8013b16:	4605      	mov	r5, r0
 8013b18:	f107 0314 	add.w	r3, r7, #20
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7f1 fe31 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8013b22:	f107 0314 	add.w	r3, r7, #20
 8013b26:	462a      	mov	r2, r5
 8013b28:	4621      	mov	r1, r4
 8013b2a:	68f8      	ldr	r0, [r7, #12]
 8013b2c:	f000 f9a6 	bl	8013e7c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	3718      	adds	r7, #24
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bdb0      	pop	{r4, r5, r7, pc}

08013b38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 f9eb 	bl	8013f1c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013b46:	4603      	mov	r3, r0
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f000 f9f2 	bl	8013f32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	4618      	mov	r0, r3
 8013b52:	3708      	adds	r7, #8
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8013b58:	b590      	push	{r4, r7, lr}
 8013b5a:	b085      	sub	sp, #20
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f000 f9db 	bl	8013f1c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013b66:	4604      	mov	r4, r0
 8013b68:	f107 030c 	add.w	r3, r7, #12
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7f2 f900 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8013b72:	f107 030c 	add.w	r3, r7, #12
 8013b76:	4619      	mov	r1, r3
 8013b78:	4620      	mov	r0, r4
 8013b7a:	f000 fa83 	bl	8014084 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8013b7e:	eef0 7a40 	vmov.f32	s15, s0
 8013b82:	bf00      	nop
}
 8013b84:	eeb0 0a67 	vmov.f32	s0, s15
 8013b88:	3714      	adds	r7, #20
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd90      	pop	{r4, r7, pc}

08013b8e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8013b8e:	b590      	push	{r4, r7, lr}
 8013b90:	b083      	sub	sp, #12
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
 8013b96:	6039      	str	r1, [r7, #0]
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f000 fac5 	bl	8014128 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8013b9e:	687c      	ldr	r4, [r7, #4]
 8013ba0:	6838      	ldr	r0, [r7, #0]
 8013ba2:	f000 fab5 	bl	8014110 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	4619      	mov	r1, r3
 8013baa:	4620      	mov	r0, r4
 8013bac:	f000 fac7 	bl	801413e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	370c      	adds	r7, #12
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd90      	pop	{r4, r7, pc}

08013bba <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013bba:	b590      	push	{r4, r7, lr}
 8013bbc:	b085      	sub	sp, #20
 8013bbe:	af00      	add	r7, sp, #0
 8013bc0:	60f8      	str	r0, [r7, #12]
 8013bc2:	60b9      	str	r1, [r7, #8]
 8013bc4:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681c      	ldr	r4, [r3, #0]
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7f3 fb5d 	bl	800728c <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	fb03 f202 	mul.w	r2, r3, r2
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	4413      	add	r3, r2
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	4423      	add	r3, r4
  }
 8013be2:	4618      	mov	r0, r3
 8013be4:	3714      	adds	r7, #20
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd90      	pop	{r4, r7, pc}

08013bea <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8013bea:	b580      	push	{r7, lr}
 8013bec:	b084      	sub	sp, #16
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	60f8      	str	r0, [r7, #12]
 8013bf2:	60b9      	str	r1, [r7, #8]
 8013bf4:	607a      	str	r2, [r7, #4]
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	68b9      	ldr	r1, [r7, #8]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f000 faad 	bl	801415c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	4618      	mov	r0, r3
 8013c06:	3710      	adds	r7, #16
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013c0c:	b480      	push	{r7}
 8013c0e:	b083      	sub	sp, #12
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
    }
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	4618      	mov	r0, r3
 8013c18:	370c      	adds	r7, #12
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c20:	4770      	bx	lr

08013c22 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8013c22:	b580      	push	{r7, lr}
 8013c24:	b082      	sub	sp, #8
 8013c26:	af00      	add	r7, sp, #0
 8013c28:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7f8 fac6 	bl	800c1be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8013c32:	4603      	mov	r3, r0
    }
 8013c34:	4618      	mov	r0, r3
 8013c36:	3708      	adds	r7, #8
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}

08013c3c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b082      	sub	sp, #8
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6839      	ldr	r1, [r7, #0]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f000 fab7 	bl	80141be <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	4618      	mov	r0, r3
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8013c5a:	b480      	push	{r7}
 8013c5c:	b083      	sub	sp, #12
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	6078      	str	r0, [r7, #4]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	4618      	mov	r0, r3
 8013c66:	370c      	adds	r7, #12
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6e:	4770      	bx	lr

08013c70 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	370c      	adds	r7, #12
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c84:	4770      	bx	lr

08013c86 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013c86:	b580      	push	{r7, lr}
 8013c88:	b084      	sub	sp, #16
 8013c8a:	af00      	add	r7, sp, #0
 8013c8c:	60f8      	str	r0, [r7, #12]
 8013c8e:	60b9      	str	r1, [r7, #8]
 8013c90:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013c92:	68b9      	ldr	r1, [r7, #8]
 8013c94:	68f8      	ldr	r0, [r7, #12]
 8013c96:	f000 faa1 	bl	80141dc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8013c9a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8013ca2:	3710      	adds	r7, #16
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	2102      	movs	r1, #2
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f7fe f9f3 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f000 fa9f 	bl	80141fe <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 8013cc0:	bf00      	nop
 8013cc2:	3708      	adds	r7, #8
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013cd0:	2202      	movs	r2, #2
 8013cd2:	2101      	movs	r1, #1
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f7fe fe8c 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f000 fa9f 	bl	801421e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 8013ce0:	bf00      	nop
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013ce8:	b480      	push	{r7}
 8013cea:	b083      	sub	sp, #12
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	3330      	adds	r3, #48	; 0x30
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	370c      	adds	r7, #12
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfe:	4770      	bx	lr

08013d00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	370c      	adds	r7, #12
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d14:	4770      	bx	lr

08013d16 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013d16:	b480      	push	{r7}
 8013d18:	b083      	sub	sp, #12
 8013d1a:	af00      	add	r7, sp, #0
 8013d1c:	6078      	str	r0, [r7, #4]
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	3318      	adds	r3, #24
 8013d22:	4618      	mov	r0, r3
 8013d24:	370c      	adds	r7, #12
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr

08013d2e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b082      	sub	sp, #8
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
 8013d36:	6039      	str	r1, [r7, #0]
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6839      	ldr	r1, [r7, #0]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f000 fa7e 	bl	801423e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	4618      	mov	r0, r3
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013d4c:	b590      	push	{r4, r7, lr}
 8013d4e:	b087      	sub	sp, #28
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	60b9      	str	r1, [r7, #8]
 8013d56:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f000 fa7e 	bl	801425c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 8013d60:	4604      	mov	r4, r0
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	3304      	adds	r3, #4
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	68b9      	ldr	r1, [r7, #8]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7fb fdf6 	bl	800f95c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013d70:	eef0 7a40 	vmov.f32	s15, s0
 8013d74:	edc7 7a04 	vstr	s15, [r7, #16]
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	330c      	adds	r3, #12
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	68b9      	ldr	r1, [r7, #8]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f000 fa76 	bl	8014272 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8013d86:	eef0 7a40 	vmov.f32	s15, s0
 8013d8a:	edc7 7a05 	vstr	s15, [r7, #20]
 8013d8e:	f107 0214 	add.w	r2, r7, #20
 8013d92:	f107 0310 	add.w	r3, r7, #16
 8013d96:	4619      	mov	r1, r3
 8013d98:	4620      	mov	r0, r4
 8013d9a:	f7fb fc23 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013d9e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013da2:	eeb0 0a67 	vmov.f32	s0, s15
 8013da6:	371c      	adds	r7, #28
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd90      	pop	{r4, r7, pc}

08013dac <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b082      	sub	sp, #8
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 fa7d 	bl	80142b4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3708      	adds	r7, #8
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f7ff ffed 	bl	8013dac <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3708      	adds	r7, #8
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f7ff ffec 	bl	8013dc4 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	683a      	ldr	r2, [r7, #0]
 8013df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013df4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3708      	adds	r7, #8
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}

08013e02 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013e02:	b480      	push	{r7}
 8013e04:	b083      	sub	sp, #12
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b082      	sub	sp, #8
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f000 fa52 	bl	80142ca <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3708      	adds	r7, #8
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}

08013e30 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f7ff ffed 	bl	8013e18 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	4618      	mov	r0, r3
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7f2 f95d 	bl	8006112 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3708      	adds	r7, #8
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}

08013e62 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8013e62:	b580      	push	{r7, lr}
 8013e64:	b082      	sub	sp, #8
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	6078      	str	r0, [r7, #4]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7f3 f8c2 	bl	8006ff6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8013e72:	4603      	mov	r3, r0
 8013e74:	4618      	mov	r0, r3
 8013e76:	3708      	adds	r7, #8
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013e7c:	b590      	push	{r4, r7, lr}
 8013e7e:	b085      	sub	sp, #20
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	607a      	str	r2, [r7, #4]
 8013e88:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8013e8a:	68f8      	ldr	r0, [r7, #12]
 8013e8c:	f7ff ffd0 	bl	8013e30 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	68ba      	ldr	r2, [r7, #8]
 8013e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e98:	e883 0003 	stmia.w	r3, {r0, r1}
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	3308      	adds	r3, #8
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	6812      	ldr	r2, [r2, #0]
 8013ea4:	601a      	str	r2, [r3, #0]
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	330c      	adds	r3, #12
 8013eaa:	6839      	ldr	r1, [r7, #0]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f1 fcf3 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013eb2:	68b8      	ldr	r0, [r7, #8]
 8013eb4:	f7ff ffc8 	bl	8013e48 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013eb8:	4604      	mov	r4, r0
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7f2 f85f 	bl	8005f7e <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	429c      	cmp	r4, r3
 8013ec4:	d109      	bne.n	8013eda <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 8013ec6:	68b8      	ldr	r0, [r7, #8]
 8013ec8:	f7ff ffcb 	bl	8013e62 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013ecc:	4604      	mov	r4, r0
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f7f3 f89f 	bl	8007012 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	429c      	cmp	r4, r3
 8013ed8:	d005      	beq.n	8013ee6 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 8013eda:	4b05      	ldr	r3, [pc, #20]	; (8013ef0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 8013edc:	4a05      	ldr	r2, [pc, #20]	; (8013ef4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 8013ede:	2174      	movs	r1, #116	; 0x74
 8013ee0:	4805      	ldr	r0, [pc, #20]	; (8013ef8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 8013ee2:	f00a f90b 	bl	801e0fc <__assert_func>
    }
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3714      	adds	r7, #20
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd90      	pop	{r4, r7, pc}
 8013ef0:	0801ff64 	.word	0x0801ff64
 8013ef4:	08029388 	.word	0x08029388
 8013ef8:	080201c8 	.word	0x080201c8

08013efc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f000 f809 	bl	8013f1c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f000 f9e7 	bl	80142e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 8013f12:	4603      	mov	r3, r0
 8013f14:	4618      	mov	r0, r3
 8013f16:	3708      	adds	r7, #8
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	4618      	mov	r0, r3
 8013f28:	370c      	adds	r7, #12
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr

08013f32 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8013f32:	b580      	push	{r7, lr}
 8013f34:	b082      	sub	sp, #8
 8013f36:	af00      	add	r7, sp, #0
 8013f38:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7ff ff83 	bl	8013e48 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013f42:	4603      	mov	r3, r0
    }
 8013f44:	4618      	mov	r0, r3
 8013f46:	3708      	adds	r7, #8
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7fb fa2e 	bl	800f3b8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3708      	adds	r7, #8
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}

08013f66 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8013f66:	b580      	push	{r7, lr}
 8013f68:	b082      	sub	sp, #8
 8013f6a:	af00      	add	r7, sp, #0
 8013f6c:	6078      	str	r0, [r7, #4]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7ff ffeb 	bl	8013f4c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3708      	adds	r7, #8
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}

08013f80 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7ff ffeb 	bl	8013f66 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	4618      	mov	r0, r3
 8013f94:	3708      	adds	r7, #8
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}

08013f9a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8013f9a:	b580      	push	{r7, lr}
 8013f9c:	b082      	sub	sp, #8
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	6078      	str	r0, [r7, #4]
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7ff ffeb 	bl	8013f80 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f000 f9bf 	bl	801432e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3708      	adds	r7, #8
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8013fba:	b580      	push	{r7, lr}
 8013fbc:	b082      	sub	sp, #8
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7ff ffe8 	bl	8013f9a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	4618      	mov	r0, r3
 8013fce:	3708      	adds	r7, #8
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}

08013fd4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b082      	sub	sp, #8
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7ff ffeb 	bl	8013fba <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3708      	adds	r7, #8
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}

08013fee <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8013fee:	b580      	push	{r7, lr}
 8013ff0:	b082      	sub	sp, #8
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	6078      	str	r0, [r7, #4]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7fb f9fa 	bl	800f3f2 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4618      	mov	r0, r3
 8014002:	3708      	adds	r7, #8
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}

08014008 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 8014008:	b580      	push	{r7, lr}
 801400a:	b082      	sub	sp, #8
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	3314      	adds	r3, #20
 8014014:	4618      	mov	r0, r3
 8014016:	f7ff ffea 	bl	8013fee <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	3304      	adds	r3, #4
 801401e:	4618      	mov	r0, r3
 8014020:	f7ff ffd8 	bl	8013fd4 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	4618      	mov	r0, r3
 8014028:	3708      	adds	r7, #8
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}

0801402e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 801402e:	b580      	push	{r7, lr}
 8014030:	b082      	sub	sp, #8
 8014032:	af00      	add	r7, sp, #0
 8014034:	6078      	str	r0, [r7, #4]
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	4618      	mov	r0, r3
 801403a:	f7ff ffe5 	bl	8014008 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f000 f96a 	bl	8014318 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	4618      	mov	r0, r3
 8014048:	3708      	adds	r7, #8
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}

0801404e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 801404e:	b580      	push	{r7, lr}
 8014050:	b082      	sub	sp, #8
 8014052:	af00      	add	r7, sp, #0
 8014054:	6078      	str	r0, [r7, #4]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	4618      	mov	r0, r3
 801405a:	f7ff ffe8 	bl	801402e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	4618      	mov	r0, r3
 8014062:	3708      	adds	r7, #8
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8014068:	b580      	push	{r7, lr}
 801406a:	b082      	sub	sp, #8
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	4618      	mov	r0, r3
 8014074:	f7ff ffeb 	bl	801404e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	4618      	mov	r0, r3
 801407c:	3708      	adds	r7, #8
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
	...

08014084 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8014084:	b580      	push	{r7, lr}
 8014086:	ed2d 8b02 	vpush	{d8}
 801408a:	b088      	sub	sp, #32
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f7ff fd50 	bl	8013b38 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 8014098:	4603      	mov	r3, r0
 801409a:	2b00      	cmp	r3, #0
 801409c:	dd05      	ble.n	80140aa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f7ff ff2c 	bl	8013efc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 80140a4:	4603      	mov	r3, r0
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	dc06      	bgt.n	80140b8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80140aa:	4b16      	ldr	r3, [pc, #88]	; (8014104 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80140ac:	4a16      	ldr	r2, [pc, #88]	; (8014108 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80140ae:	f240 119b 	movw	r1, #411	; 0x19b
 80140b2:	4816      	ldr	r0, [pc, #88]	; (801410c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80140b4:	f00a f822 	bl	801e0fc <__assert_func>
 80140b8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f7ff ff2e 	bl	8013f1c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80140c0:	4602      	mov	r2, r0
 80140c2:	f107 0308 	add.w	r3, r7, #8
 80140c6:	4611      	mov	r1, r2
 80140c8:	4618      	mov	r0, r3
 80140ca:	f000 f916 	bl	80142fa <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f7ff ff24 	bl	8013f1c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80140d4:	4602      	mov	r2, r0
 80140d6:	f107 0308 	add.w	r3, r7, #8
 80140da:	6839      	ldr	r1, [r7, #0]
 80140dc:	4618      	mov	r0, r3
 80140de:	f000 f931 	bl	8014344 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 80140e2:	eeb0 8a40 	vmov.f32	s16, s0
 80140e6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80140e8:	f107 0308 	add.w	r3, r7, #8
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7ff ffbb 	bl	8014068 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80140f2:	eef0 7a48 	vmov.f32	s15, s16
}
 80140f6:	eeb0 0a67 	vmov.f32	s0, s15
 80140fa:	3720      	adds	r7, #32
 80140fc:	46bd      	mov	sp, r7
 80140fe:	ecbd 8b02 	vpop	{d8}
 8014102:	bd80      	pop	{r7, pc}
 8014104:	08024fe4 	.word	0x08024fe4
 8014108:	080295d4 	.word	0x080295d4
 801410c:	080251f0 	.word	0x080251f0

08014110 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8014110:	b480      	push	{r7}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	4618      	mov	r0, r3
 801411e:	370c      	adds	r7, #12
 8014120:	46bd      	mov	sp, r7
 8014122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014126:	4770      	bx	lr

08014128 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014128:	b480      	push	{r7}
 801412a:	b083      	sub	sp, #12
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	4618      	mov	r0, r3
 8014134:	370c      	adds	r7, #12
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr

0801413e <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801413e:	b580      	push	{r7, lr}
 8014140:	b082      	sub	sp, #8
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
 8014146:	6039      	str	r1, [r7, #0]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	4618      	mov	r0, r3
 801414e:	f7fd fe47 	bl	8011de0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	4618      	mov	r0, r3
 8014156:	3708      	adds	r7, #8
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}

0801415c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 801415c:	b5b0      	push	{r4, r5, r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	60f8      	str	r0, [r7, #12]
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8014168:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	4618      	mov	r0, r3
 801416e:	f7fe fc93 	bl	8012a98 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8014172:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8014174:	68b8      	ldr	r0, [r7, #8]
 8014176:	f7ff fc01 	bl	801397c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 801417a:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	fb02 f303 	mul.w	r3, r2, r3
 8014182:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8014184:	18e9      	adds	r1, r5, r3
 8014186:	2301      	movs	r3, #1
 8014188:	2201      	movs	r2, #1
 801418a:	4620      	mov	r0, r4
 801418c:	f000 f8f8 	bl	8014380 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	68ba      	ldr	r2, [r7, #8]
 8014194:	609a      	str	r2, [r3, #8]
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	330c      	adds	r3, #12
 801419a:	2100      	movs	r1, #0
 801419c:	4618      	mov	r0, r3
 801419e:	f7f9 fedd 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	3310      	adds	r3, #16
 80141a6:	6879      	ldr	r1, [r7, #4]
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7f9 fe63 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f000 f924 	bl	80143fc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	4618      	mov	r0, r3
 80141b8:	3710      	adds	r7, #16
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bdb0      	pop	{r4, r5, r7, pc}

080141be <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80141be:	b580      	push	{r7, lr}
 80141c0:	b082      	sub	sp, #8
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	6078      	str	r0, [r7, #4]
 80141c6:	6039      	str	r1, [r7, #0]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6839      	ldr	r1, [r7, #0]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f000 f925 	bl	801441c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	4618      	mov	r0, r3
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80141e6:	2200      	movs	r2, #0
 80141e8:	2100      	movs	r1, #0
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f000 f928 	bl	8014440 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80141f0:	eef0 7a40 	vmov.f32	s15, s0
  }
 80141f4:	eeb0 0a67 	vmov.f32	s0, s15
 80141f8:	3708      	adds	r7, #8
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}

080141fe <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80141fe:	b580      	push	{r7, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014206:	2201      	movs	r2, #1
 8014208:	2102      	movs	r1, #2
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7fd ff48 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f000 f928 	bl	8014466 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 8014216:	bf00      	nop
 8014218:	3708      	adds	r7, #8
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801421e:	b580      	push	{r7, lr}
 8014220:	b082      	sub	sp, #8
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8014226:	2200      	movs	r2, #0
 8014228:	2102      	movs	r1, #2
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f7fe fbe1 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f000 f928 	bl	8014486 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 8014236:	bf00      	nop
 8014238:	3708      	adds	r7, #8
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}

0801423e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801423e:	b580      	push	{r7, lr}
 8014240:	b082      	sub	sp, #8
 8014242:	af00      	add	r7, sp, #0
 8014244:	6078      	str	r0, [r7, #4]
 8014246:	6039      	str	r1, [r7, #0]
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6839      	ldr	r1, [r7, #0]
 801424c:	4618      	mov	r0, r3
 801424e:	f000 f92a 	bl	80144a6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	4618      	mov	r0, r3
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801425c:	b480      	push	{r7}
 801425e:	b083      	sub	sp, #12
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	4618      	mov	r0, r3
 8014268:	370c      	adds	r7, #12
 801426a:	46bd      	mov	sp, r7
 801426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014270:	4770      	bx	lr

08014272 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014272:	b5b0      	push	{r4, r5, r7, lr}
 8014274:	b084      	sub	sp, #16
 8014276:	af00      	add	r7, sp, #0
 8014278:	60f8      	str	r0, [r7, #12]
 801427a:	60b9      	str	r1, [r7, #8]
 801427c:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	681c      	ldr	r4, [r3, #0]
 8014282:	68f8      	ldr	r0, [r7, #12]
 8014284:	f000 f923 	bl	80144ce <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8014288:	4602      	mov	r2, r0
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	fb03 f502 	mul.w	r5, r3, r2
 8014290:	68f8      	ldr	r0, [r7, #12]
 8014292:	f000 f927 	bl	80144e4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 8014296:	4602      	mov	r2, r0
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	fb02 f303 	mul.w	r3, r2, r3
 801429e:	442b      	add	r3, r5
 80142a0:	009b      	lsls	r3, r3, #2
 80142a2:	4423      	add	r3, r4
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	ee07 3a90 	vmov	s15, r3
  }
 80142aa:	eeb0 0a67 	vmov.f32	s0, s15
 80142ae:	3710      	adds	r7, #16
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bdb0      	pop	{r4, r5, r7, pc}

080142b4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80142b4:	b480      	push	{r7}
 80142b6:	b083      	sub	sp, #12
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
    }
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	4618      	mov	r0, r3
 80142c0:	370c      	adds	r7, #12
 80142c2:	46bd      	mov	sp, r7
 80142c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c8:	4770      	bx	lr

080142ca <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80142ca:	b480      	push	{r7}
 80142cc:	b083      	sub	sp, #12
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	6078      	str	r0, [r7, #4]
    }
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	4618      	mov	r0, r3
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7ff fdb9 	bl	8013e62 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 80142f0:	4603      	mov	r3, r0
    }
 80142f2:	4618      	mov	r0, r3
 80142f4:	3708      	adds	r7, #8
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}

080142fa <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80142fa:	b580      	push	{r7, lr}
 80142fc:	b082      	sub	sp, #8
 80142fe:	af00      	add	r7, sp, #0
 8014300:	6078      	str	r0, [r7, #4]
 8014302:	6039      	str	r1, [r7, #0]
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6839      	ldr	r1, [r7, #0]
 8014308:	4618      	mov	r0, r3
 801430a:	f000 f8f6 	bl	80144fa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4618      	mov	r0, r3
 8014312:	3708      	adds	r7, #8
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014318:	b480      	push	{r7}
 801431a:	b083      	sub	sp, #12
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	4618      	mov	r0, r3
 8014324:	370c      	adds	r7, #12
 8014326:	46bd      	mov	sp, r7
 8014328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432c:	4770      	bx	lr

0801432e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 801432e:	b480      	push	{r7}
 8014330:	b083      	sub	sp, #12
 8014332:	af00      	add	r7, sp, #0
 8014334:	6078      	str	r0, [r7, #4]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	4618      	mov	r0, r3
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8014350:	68b9      	ldr	r1, [r7, #8]
 8014352:	68f8      	ldr	r0, [r7, #12]
 8014354:	f000 f8e0 	bl	8014518 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 8014358:	eef0 7a40 	vmov.f32	s15, s0
  }
 801435c:	eeb0 0a67 	vmov.f32	s0, s15
 8014360:	3710      	adds	r7, #16
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}

08014366 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 8014366:	b580      	push	{r7, lr}
 8014368:	b082      	sub	sp, #8
 801436a:	af00      	add	r7, sp, #0
 801436c:	6078      	str	r0, [r7, #4]
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f000 f8f6 	bl	8014560 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	4618      	mov	r0, r3
 8014378:	3708      	adds	r7, #8
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
	...

08014380 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8014380:	b580      	push	{r7, lr}
 8014382:	b084      	sub	sp, #16
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	60b9      	str	r1, [r7, #8]
 801438a:	607a      	str	r2, [r7, #4]
 801438c:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 801438e:	68f8      	ldr	r0, [r7, #12]
 8014390:	f7ff ffe9 	bl	8014366 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	68ba      	ldr	r2, [r7, #8]
 8014398:	601a      	str	r2, [r3, #0]
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	3304      	adds	r3, #4
 801439e:	6879      	ldr	r1, [r7, #4]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7f2 fcf3 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	3305      	adds	r3, #5
 80143aa:	6839      	ldr	r1, [r7, #0]
 80143ac:	4618      	mov	r0, r3
 80143ae:	f7f2 fced 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d011      	beq.n	80143dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	db08      	blt.n	80143d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	2b01      	cmp	r3, #1
 80143c2:	d105      	bne.n	80143d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	db02      	blt.n	80143d0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d005      	beq.n	80143dc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 80143d0:	4b07      	ldr	r3, [pc, #28]	; (80143f0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 80143d2:	4a08      	ldr	r2, [pc, #32]	; (80143f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 80143d4:	21b0      	movs	r1, #176	; 0xb0
 80143d6:	4808      	ldr	r0, [pc, #32]	; (80143f8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 80143d8:	f009 fe90 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 80143dc:	2100      	movs	r1, #0
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f000 f8c9 	bl	8014576 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	4618      	mov	r0, r3
 80143e8:	3710      	adds	r7, #16
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	08026688 	.word	0x08026688
 80143f4:	0802979c 	.word	0x0802979c
 80143f8:	08026838 	.word	0x08026838

080143fc <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	689b      	ldr	r3, [r3, #8]
 8014408:	4618      	mov	r0, r3
 801440a:	f7fe fd73 	bl	8012ef4 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801440e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	615a      	str	r2, [r3, #20]
    }
 8014414:	bf00      	nop
 8014416:	3708      	adds	r7, #8
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f000 f8b0 	bl	801458c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	6839      	ldr	r1, [r7, #0]
 8014430:	4618      	mov	r0, r3
 8014432:	f000 f8b6 	bl	80145a2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	4618      	mov	r0, r3
 801443a:	3708      	adds	r7, #8
 801443c:	46bd      	mov	sp, r7
 801443e:	bd80      	pop	{r7, pc}

08014440 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014440:	b580      	push	{r7, lr}
 8014442:	b084      	sub	sp, #16
 8014444:	af00      	add	r7, sp, #0
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	68b9      	ldr	r1, [r7, #8]
 8014452:	4618      	mov	r0, r3
 8014454:	f000 f8cd 	bl	80145f2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8014458:	eef0 7a40 	vmov.f32	s15, s0
 801445c:	eeb0 0a67 	vmov.f32	s0, s15
 8014460:	3710      	adds	r7, #16
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}

08014466 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014466:	b580      	push	{r7, lr}
 8014468:	b082      	sub	sp, #8
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801446e:	2202      	movs	r2, #2
 8014470:	2102      	movs	r1, #2
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f7fd fe14 	bl	80120a0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f000 f8ea 	bl	8014652 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 801447e:	bf00      	nop
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}

08014486 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014486:	b580      	push	{r7, lr}
 8014488:	b082      	sub	sp, #8
 801448a:	af00      	add	r7, sp, #0
 801448c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801448e:	2201      	movs	r2, #1
 8014490:	2102      	movs	r1, #2
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f7fe faad 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 f8e4 	bl	8014666 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 801449e:	bf00      	nop
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}

080144a6 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80144a6:	b580      	push	{r7, lr}
 80144a8:	b082      	sub	sp, #8
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	6078      	str	r0, [r7, #4]
 80144ae:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6839      	ldr	r1, [r7, #0]
 80144b4:	4618      	mov	r0, r3
 80144b6:	f000 f8e6 	bl	8014686 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	4618      	mov	r0, r3
 80144be:	f000 f90c 	bl	80146da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 80144c2:	bf00      	nop
  }
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	4618      	mov	r0, r3
 80144c8:	3708      	adds	r7, #8
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}

080144ce <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b082      	sub	sp, #8
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 80144d6:	f7f2 fc7e 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80144da:	4603      	mov	r3, r0
  }
 80144dc:	4618      	mov	r0, r3
 80144de:	3708      	adds	r7, #8
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b082      	sub	sp, #8
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80144ec:	f7f2 fc7b 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80144f0:	4603      	mov	r3, r0
  }
 80144f2:	4618      	mov	r0, r3
 80144f4:	3708      	adds	r7, #8
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}

080144fa <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80144fa:	b580      	push	{r7, lr}
 80144fc:	b082      	sub	sp, #8
 80144fe:	af00      	add	r7, sp, #0
 8014500:	6078      	str	r0, [r7, #4]
 8014502:	6039      	str	r1, [r7, #0]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	6839      	ldr	r1, [r7, #0]
 8014508:	4618      	mov	r0, r3
 801450a:	f000 f8f2 	bl	80146f2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	4618      	mov	r0, r3
 8014512:	3708      	adds	r7, #8
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014522:	6839      	ldr	r1, [r7, #0]
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f000 f8f6 	bl	8014716 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 801452a:	eef0 7a40 	vmov.f32	s15, s0
 801452e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014532:	6839      	ldr	r1, [r7, #0]
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f000 f8ff 	bl	8014738 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 801453a:	eef0 7a40 	vmov.f32	s15, s0
 801453e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014542:	f107 020c 	add.w	r2, r7, #12
 8014546:	f107 0308 	add.w	r3, r7, #8
 801454a:	4619      	mov	r1, r3
 801454c:	6838      	ldr	r0, [r7, #0]
 801454e:	f7f5 f808 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8014552:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014556:	eeb0 0a67 	vmov.f32	s0, s15
 801455a:	3710      	adds	r7, #16
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014560:	b480      	push	{r7}
 8014562:	b083      	sub	sp, #12
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
    }
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	4618      	mov	r0, r3
 801456c:	370c      	adds	r7, #12
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr

08014576 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8014576:	b480      	push	{r7}
 8014578:	b083      	sub	sp, #12
 801457a:	af00      	add	r7, sp, #0
 801457c:	6078      	str	r0, [r7, #4]
 801457e:	6039      	str	r1, [r7, #0]
    {}
 8014580:	bf00      	nop
 8014582:	370c      	adds	r7, #12
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr

0801458c <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	4618      	mov	r0, r3
 8014598:	370c      	adds	r7, #12
 801459a:	46bd      	mov	sp, r7
 801459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a0:	4770      	bx	lr

080145a2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80145a2:	b590      	push	{r4, r7, lr}
 80145a4:	b083      	sub	sp, #12
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	6078      	str	r0, [r7, #4]
 80145aa:	6039      	str	r1, [r7, #0]
 80145ac:	687c      	ldr	r4, [r7, #4]
 80145ae:	6838      	ldr	r0, [r7, #0]
 80145b0:	f000 f8e6 	bl	8014780 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 80145b4:	4603      	mov	r3, r0
 80145b6:	4619      	mov	r1, r3
 80145b8:	4620      	mov	r0, r4
 80145ba:	f7f1 f96d 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	1d1c      	adds	r4, r3, #4
 80145c2:	6838      	ldr	r0, [r7, #0]
 80145c4:	f000 f8e8 	bl	8014798 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 80145c8:	4603      	mov	r3, r0
 80145ca:	4619      	mov	r1, r3
 80145cc:	4620      	mov	r0, r4
 80145ce:	f7fa ffac 	bl	800f52a <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f103 040c 	add.w	r4, r3, #12
 80145d8:	6838      	ldr	r0, [r7, #0]
 80145da:	f000 f8e8 	bl	80147ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 80145de:	4603      	mov	r3, r0
 80145e0:	4619      	mov	r1, r3
 80145e2:	4620      	mov	r0, r4
 80145e4:	f000 f8ef 	bl	80147c6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	4618      	mov	r0, r3
 80145ec:	370c      	adds	r7, #12
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd90      	pop	{r4, r7, pc}

080145f2 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80145f2:	b590      	push	{r4, r7, lr}
 80145f4:	b087      	sub	sp, #28
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	60f8      	str	r0, [r7, #12]
 80145fa:	60b9      	str	r1, [r7, #8]
 80145fc:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	4618      	mov	r0, r3
 8014602:	f000 f8ef 	bl	80147e4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8014606:	4604      	mov	r4, r0
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	3304      	adds	r3, #4
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	4618      	mov	r0, r3
 8014612:	f7fa ffb3 	bl	800f57c <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8014616:	eef0 7a40 	vmov.f32	s15, s0
 801461a:	edc7 7a04 	vstr	s15, [r7, #16]
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	330c      	adds	r3, #12
 8014622:	687a      	ldr	r2, [r7, #4]
 8014624:	68b9      	ldr	r1, [r7, #8]
 8014626:	4618      	mov	r0, r3
 8014628:	f000 f8e7 	bl	80147fa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 801462c:	eef0 7a40 	vmov.f32	s15, s0
 8014630:	edc7 7a05 	vstr	s15, [r7, #20]
 8014634:	f107 0214 	add.w	r2, r7, #20
 8014638:	f107 0310 	add.w	r3, r7, #16
 801463c:	4619      	mov	r1, r3
 801463e:	4620      	mov	r0, r4
 8014640:	f7fa ffd0 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8014644:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014648:	eeb0 0a67 	vmov.f32	s0, s15
 801464c:	371c      	adds	r7, #28
 801464e:	46bd      	mov	sp, r7
 8014650:	bd90      	pop	{r4, r7, pc}

08014652 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014652:	b480      	push	{r7}
 8014654:	b083      	sub	sp, #12
 8014656:	af00      	add	r7, sp, #0
 8014658:	6078      	str	r0, [r7, #4]
 801465a:	bf00      	nop
 801465c:	370c      	adds	r7, #12
 801465e:	46bd      	mov	sp, r7
 8014660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014664:	4770      	bx	lr

08014666 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8014666:	b580      	push	{r7, lr}
 8014668:	b082      	sub	sp, #8
 801466a:	af00      	add	r7, sp, #0
 801466c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801466e:	2202      	movs	r2, #2
 8014670:	2102      	movs	r1, #2
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f7fe f9bd 	bl	80129f2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f000 f8df 	bl	801483c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 801467e:	bf00      	nop
 8014680:	3708      	adds	r7, #8
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8014686:	b590      	push	{r4, r7, lr}
 8014688:	b083      	sub	sp, #12
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
 801468e:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f000 f8f9 	bl	8014888 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	4618      	mov	r0, r3
 801469a:	f000 f81e 	bl	80146da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 801469e:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	601a      	str	r2, [r3, #0]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	1d1c      	adds	r4, r3, #4
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	4618      	mov	r0, r3
 80146ac:	f000 f8d0 	bl	8014850 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 80146b0:	4603      	mov	r3, r0
 80146b2:	4619      	mov	r1, r3
 80146b4:	4620      	mov	r0, r4
 80146b6:	f7f2 fb69 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	1d5c      	adds	r4, r3, #5
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f000 f8d3 	bl	801486c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 80146c6:	4603      	mov	r3, r0
 80146c8:	4619      	mov	r1, r3
 80146ca:	4620      	mov	r0, r4
 80146cc:	f7f2 fb44 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	4618      	mov	r0, r3
 80146d4:	370c      	adds	r7, #12
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd90      	pop	{r4, r7, pc}

080146da <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80146da:	b480      	push	{r7}
 80146dc:	b083      	sub	sp, #12
 80146de:	af00      	add	r7, sp, #0
 80146e0:	6078      	str	r0, [r7, #4]
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	4618      	mov	r0, r3
 80146e8:	370c      	adds	r7, #12
 80146ea:	46bd      	mov	sp, r7
 80146ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f0:	4770      	bx	lr

080146f2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80146f2:	b580      	push	{r7, lr}
 80146f4:	b082      	sub	sp, #8
 80146f6:	af00      	add	r7, sp, #0
 80146f8:	6078      	str	r0, [r7, #4]
 80146fa:	6039      	str	r1, [r7, #0]
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f000 f8ce 	bl	801489e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	6839      	ldr	r1, [r7, #0]
 8014706:	4618      	mov	r0, r3
 8014708:	f000 f8d4 	bl	80148b4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	4618      	mov	r0, r3
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8014716:	b580      	push	{r7, lr}
 8014718:	b082      	sub	sp, #8
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
 801471e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014720:	2200      	movs	r2, #0
 8014722:	2100      	movs	r1, #0
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f000 f8ed 	bl	8014904 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801472a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801472e:	eeb0 0a67 	vmov.f32	s0, s15
 8014732:	3708      	adds	r7, #8
 8014734:	46bd      	mov	sp, r7
 8014736:	bd80      	pop	{r7, pc}

08014738 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
 8014740:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014742:	6839      	ldr	r1, [r7, #0]
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f000 f8f0 	bl	801492a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 801474a:	eef0 7a40 	vmov.f32	s15, s0
 801474e:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014752:	6839      	ldr	r1, [r7, #0]
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f000 f8f9 	bl	801494c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 801475a:	eef0 7a40 	vmov.f32	s15, s0
 801475e:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014762:	f107 020c 	add.w	r2, r7, #12
 8014766:	f107 0308 	add.w	r3, r7, #8
 801476a:	4619      	mov	r1, r3
 801476c:	6838      	ldr	r0, [r7, #0]
 801476e:	f7f4 fef8 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8014772:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014776:	eeb0 0a67 	vmov.f32	s0, s15
 801477a:	3710      	adds	r7, #16
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8014780:	b480      	push	{r7}
 8014782:	b083      	sub	sp, #12
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	3330      	adds	r3, #48	; 0x30
 801478c:	4618      	mov	r0, r3
 801478e:	370c      	adds	r7, #12
 8014790:	46bd      	mov	sp, r7
 8014792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014796:	4770      	bx	lr

08014798 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8014798:	b480      	push	{r7}
 801479a:	b083      	sub	sp, #12
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	4618      	mov	r0, r3
 80147a4:	370c      	adds	r7, #12
 80147a6:	46bd      	mov	sp, r7
 80147a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ac:	4770      	bx	lr

080147ae <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80147ae:	b480      	push	{r7}
 80147b0:	b083      	sub	sp, #12
 80147b2:	af00      	add	r7, sp, #0
 80147b4:	6078      	str	r0, [r7, #4]
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	3318      	adds	r3, #24
 80147ba:	4618      	mov	r0, r3
 80147bc:	370c      	adds	r7, #12
 80147be:	46bd      	mov	sp, r7
 80147c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c4:	4770      	bx	lr

080147c6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80147c6:	b580      	push	{r7, lr}
 80147c8:	b082      	sub	sp, #8
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	6078      	str	r0, [r7, #4]
 80147ce:	6039      	str	r1, [r7, #0]
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6839      	ldr	r1, [r7, #0]
 80147d4:	4618      	mov	r0, r3
 80147d6:	f000 f8ca 	bl	801496e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	4618      	mov	r0, r3
 80147de:	3708      	adds	r7, #8
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 80147e4:	b480      	push	{r7}
 80147e6:	b083      	sub	sp, #12
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	4618      	mov	r0, r3
 80147f0:	370c      	adds	r7, #12
 80147f2:	46bd      	mov	sp, r7
 80147f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f8:	4770      	bx	lr

080147fa <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80147fa:	b5b0      	push	{r4, r5, r7, lr}
 80147fc:	b084      	sub	sp, #16
 80147fe:	af00      	add	r7, sp, #0
 8014800:	60f8      	str	r0, [r7, #12]
 8014802:	60b9      	str	r1, [r7, #8]
 8014804:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	681c      	ldr	r4, [r3, #0]
 801480a:	68f8      	ldr	r0, [r7, #12]
 801480c:	f000 f8be 	bl	801498c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 8014810:	4602      	mov	r2, r0
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	fb03 f502 	mul.w	r5, r3, r2
 8014818:	68f8      	ldr	r0, [r7, #12]
 801481a:	f000 f8c2 	bl	80149a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 801481e:	4602      	mov	r2, r0
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	fb02 f303 	mul.w	r3, r2, r3
 8014826:	442b      	add	r3, r5
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	4423      	add	r3, r4
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	ee07 3a90 	vmov	s15, r3
  }
 8014832:	eeb0 0a67 	vmov.f32	s0, s15
 8014836:	3710      	adds	r7, #16
 8014838:	46bd      	mov	sp, r7
 801483a:	bdb0      	pop	{r4, r5, r7, pc}

0801483c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	bf00      	nop
 8014846:	370c      	adds	r7, #12
 8014848:	46bd      	mov	sp, r7
 801484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484e:	4770      	bx	lr

08014850 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	3308      	adds	r3, #8
 801485c:	4618      	mov	r0, r3
 801485e:	f7fe fd4e 	bl	80132fe <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 8014862:	4603      	mov	r3, r0
    }
 8014864:	4618      	mov	r0, r3
 8014866:	3708      	adds	r7, #8
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}

0801486c <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	3308      	adds	r3, #8
 8014878:	4618      	mov	r0, r3
 801487a:	f7fe fd54 	bl	8013326 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 801487e:	4603      	mov	r3, r0
    }
 8014880:	4618      	mov	r0, r3
 8014882:	3708      	adds	r7, #8
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}

08014888 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014888:	b480      	push	{r7}
 801488a:	b083      	sub	sp, #12
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	4618      	mov	r0, r3
 8014894:	370c      	adds	r7, #12
 8014896:	46bd      	mov	sp, r7
 8014898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489c:	4770      	bx	lr

0801489e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 801489e:	b480      	push	{r7}
 80148a0:	b083      	sub	sp, #12
 80148a2:	af00      	add	r7, sp, #0
 80148a4:	6078      	str	r0, [r7, #4]
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80148b4:	b590      	push	{r4, r7, lr}
 80148b6:	b083      	sub	sp, #12
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
 80148be:	687c      	ldr	r4, [r7, #4]
 80148c0:	6838      	ldr	r0, [r7, #0]
 80148c2:	f000 f879 	bl	80149b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 80148c6:	4603      	mov	r3, r0
 80148c8:	4619      	mov	r1, r3
 80148ca:	4620      	mov	r0, r4
 80148cc:	f7f0 ffe4 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	1d1c      	adds	r4, r3, #4
 80148d4:	6838      	ldr	r0, [r7, #0]
 80148d6:	f000 f87b 	bl	80149d0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 80148da:	4603      	mov	r3, r0
 80148dc:	4619      	mov	r1, r3
 80148de:	4620      	mov	r0, r4
 80148e0:	f000 f88d 	bl	80149fe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f103 0414 	add.w	r4, r3, #20
 80148ea:	6838      	ldr	r0, [r7, #0]
 80148ec:	f000 f87b 	bl	80149e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 80148f0:	4603      	mov	r3, r0
 80148f2:	4619      	mov	r1, r3
 80148f4:	4620      	mov	r0, r4
 80148f6:	f000 f891 	bl	8014a1c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	4618      	mov	r0, r3
 80148fe:	370c      	adds	r7, #12
 8014900:	46bd      	mov	sp, r7
 8014902:	bd90      	pop	{r4, r7, pc}

08014904 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8014904:	b580      	push	{r7, lr}
 8014906:	b084      	sub	sp, #16
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	68ba      	ldr	r2, [r7, #8]
 8014914:	6879      	ldr	r1, [r7, #4]
 8014916:	4618      	mov	r0, r3
 8014918:	f000 f88f 	bl	8014a3a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 801491c:	eef0 7a40 	vmov.f32	s15, s0
 8014920:	eeb0 0a67 	vmov.f32	s0, s15
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801492a:	b580      	push	{r7, lr}
 801492c:	b082      	sub	sp, #8
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
 8014932:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014934:	2201      	movs	r2, #1
 8014936:	2100      	movs	r1, #0
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7ff ffe3 	bl	8014904 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 801493e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014942:	eeb0 0a67 	vmov.f32	s0, s15
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8014956:	2202      	movs	r2, #2
 8014958:	2100      	movs	r1, #0
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f7ff ffd2 	bl	8014904 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8014960:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014964:	eeb0 0a67 	vmov.f32	s0, s15
 8014968:	3708      	adds	r7, #8
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}

0801496e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801496e:	b580      	push	{r7, lr}
 8014970:	b082      	sub	sp, #8
 8014972:	af00      	add	r7, sp, #0
 8014974:	6078      	str	r0, [r7, #4]
 8014976:	6039      	str	r1, [r7, #0]
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	6839      	ldr	r1, [r7, #0]
 801497c:	4618      	mov	r0, r3
 801497e:	f000 f887 	bl	8014a90 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	4618      	mov	r0, r3
 8014986:	3708      	adds	r7, #8
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8014994:	f7f2 fa27 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014998:	4603      	mov	r3, r0
  }
 801499a:	4618      	mov	r0, r3
 801499c:	3708      	adds	r7, #8
 801499e:	46bd      	mov	sp, r7
 80149a0:	bd80      	pop	{r7, pc}

080149a2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80149a2:	b580      	push	{r7, lr}
 80149a4:	b082      	sub	sp, #8
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80149aa:	f7f2 fa14 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80149ae:	4603      	mov	r3, r0
  }
 80149b0:	4618      	mov	r0, r3
 80149b2:	3708      	adds	r7, #8
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}

080149b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80149b8:	b480      	push	{r7}
 80149ba:	b083      	sub	sp, #12
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	330c      	adds	r3, #12
 80149c4:	4618      	mov	r0, r3
 80149c6:	370c      	adds	r7, #12
 80149c8:	46bd      	mov	sp, r7
 80149ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ce:	4770      	bx	lr

080149d0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80149d0:	b480      	push	{r7}
 80149d2:	b083      	sub	sp, #12
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	4618      	mov	r0, r3
 80149dc:	370c      	adds	r7, #12
 80149de:	46bd      	mov	sp, r7
 80149e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e4:	4770      	bx	lr

080149e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80149e6:	b480      	push	{r7}
 80149e8:	b083      	sub	sp, #12
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	6078      	str	r0, [r7, #4]
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	3308      	adds	r3, #8
 80149f2:	4618      	mov	r0, r3
 80149f4:	370c      	adds	r7, #12
 80149f6:	46bd      	mov	sp, r7
 80149f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fc:	4770      	bx	lr

080149fe <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80149fe:	b580      	push	{r7, lr}
 8014a00:	b082      	sub	sp, #8
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	6078      	str	r0, [r7, #4]
 8014a06:	6039      	str	r1, [r7, #0]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6839      	ldr	r1, [r7, #0]
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f000 f853 	bl	8014ab8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	4618      	mov	r0, r3
 8014a16:	3708      	adds	r7, #8
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b082      	sub	sp, #8
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6839      	ldr	r1, [r7, #0]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fc f952 	bl	8010cd4 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	4618      	mov	r0, r3
 8014a34:	3708      	adds	r7, #8
 8014a36:	46bd      	mov	sp, r7
 8014a38:	bd80      	pop	{r7, pc}

08014a3a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014a3a:	b590      	push	{r4, r7, lr}
 8014a3c:	b087      	sub	sp, #28
 8014a3e:	af00      	add	r7, sp, #0
 8014a40:	60f8      	str	r0, [r7, #12]
 8014a42:	60b9      	str	r1, [r7, #8]
 8014a44:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f000 f844 	bl	8014ad6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8014a4e:	4604      	mov	r4, r0
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	3304      	adds	r3, #4
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	68b9      	ldr	r1, [r7, #8]
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f000 f847 	bl	8014aec <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 8014a5e:	eef0 7a40 	vmov.f32	s15, s0
 8014a62:	edc7 7a05 	vstr	s15, [r7, #20]
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	3314      	adds	r3, #20
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	68b9      	ldr	r1, [r7, #8]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f000 f851 	bl	8014b16 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8014a74:	4602      	mov	r2, r0
 8014a76:	f107 0314 	add.w	r3, r7, #20
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f7fa fdb1 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8014a82:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014a86:	eeb0 0a67 	vmov.f32	s0, s15
 8014a8a:	371c      	adds	r7, #28
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd90      	pop	{r4, r7, pc}

08014a90 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b082      	sub	sp, #8
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
 8014a98:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6839      	ldr	r1, [r7, #0]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f000 f84a 	bl	8014b38 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 f870 	bl	8014b8c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014aac:	bf00      	nop
  }
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3708      	adds	r7, #8
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b082      	sub	sp, #8
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	6039      	str	r1, [r7, #0]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6839      	ldr	r1, [r7, #0]
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f000 f86c 	bl	8014ba4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	4618      	mov	r0, r3
 8014ad0:	3708      	adds	r7, #8
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}

08014ad6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8014ad6:	b480      	push	{r7}
 8014ad8:	b083      	sub	sp, #12
 8014ada:	af00      	add	r7, sp, #0
 8014adc:	6078      	str	r0, [r7, #4]
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	370c      	adds	r7, #12
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aea:	4770      	bx	lr

08014aec <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	60f8      	str	r0, [r7, #12]
 8014af4:	60b9      	str	r1, [r7, #8]
 8014af6:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	68ba      	ldr	r2, [r7, #8]
 8014afc:	6879      	ldr	r1, [r7, #4]
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7ff f85b 	bl	8013bba <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014b04:	4603      	mov	r3, r0
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	ee07 3a90 	vmov	s15, r3
  }
 8014b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8014b10:	3710      	adds	r7, #16
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}

08014b16 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8014b16:	b580      	push	{r7, lr}
 8014b18:	b084      	sub	sp, #16
 8014b1a:	af00      	add	r7, sp, #0
 8014b1c:	60f8      	str	r0, [r7, #12]
 8014b1e:	60b9      	str	r1, [r7, #8]
 8014b20:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	68ba      	ldr	r2, [r7, #8]
 8014b26:	6879      	ldr	r1, [r7, #4]
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7ff f846 	bl	8013bba <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8014b2e:	4603      	mov	r3, r0
  }
 8014b30:	4618      	mov	r0, r3
 8014b32:	3710      	adds	r7, #16
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}

08014b38 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8014b38:	b590      	push	{r4, r7, lr}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 f860 	bl	8014c08 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f000 f81e 	bl	8014b8c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014b50:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	601a      	str	r2, [r3, #0]
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	1d1c      	adds	r4, r3, #4
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f000 f837 	bl	8014bd0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8014b62:	4603      	mov	r3, r0
 8014b64:	4619      	mov	r1, r3
 8014b66:	4620      	mov	r0, r4
 8014b68:	f7f2 f910 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	1d5c      	adds	r4, r3, #5
 8014b70:	683b      	ldr	r3, [r7, #0]
 8014b72:	4618      	mov	r0, r3
 8014b74:	f000 f83a 	bl	8014bec <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	f7f2 f8eb 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	4618      	mov	r0, r3
 8014b86:	370c      	adds	r7, #12
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd90      	pop	{r4, r7, pc}

08014b8c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 8014b8c:	b480      	push	{r7}
 8014b8e:	b083      	sub	sp, #12
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	4618      	mov	r0, r3
 8014b9a:	370c      	adds	r7, #12
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr

08014ba4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8014ba4:	b590      	push	{r4, r7, lr}
 8014ba6:	b083      	sub	sp, #12
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	6039      	str	r1, [r7, #0]
 8014bae:	6878      	ldr	r0, [r7, #4]
 8014bb0:	f000 f840 	bl	8014c34 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8014bb4:	687c      	ldr	r4, [r7, #4]
 8014bb6:	6838      	ldr	r0, [r7, #0]
 8014bb8:	f000 f831 	bl	8014c1e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	f000 f842 	bl	8014c4a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	4618      	mov	r0, r3
 8014bca:	370c      	adds	r7, #12
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd90      	pop	{r4, r7, pc}

08014bd0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	689b      	ldr	r3, [r3, #8]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fe fecd 	bl	801397c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8014be2:	4603      	mov	r3, r0
    }
 8014be4:	4618      	mov	r0, r3
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	689b      	ldr	r3, [r3, #8]
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7fe f97b 	bl	8012ef4 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014bfe:	4603      	mov	r3, r0
    }
 8014c00:	4618      	mov	r0, r3
 8014c02:	3708      	adds	r7, #8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8014c08:	b480      	push	{r7}
 8014c0a:	b083      	sub	sp, #12
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	4618      	mov	r0, r3
 8014c14:	370c      	adds	r7, #12
 8014c16:	46bd      	mov	sp, r7
 8014c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1c:	4770      	bx	lr

08014c1e <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 8014c1e:	b480      	push	{r7}
 8014c20:	b083      	sub	sp, #12
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	6078      	str	r0, [r7, #4]
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	4618      	mov	r0, r3
 8014c2a:	370c      	adds	r7, #12
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8014c34:	b480      	push	{r7}
 8014c36:	b083      	sub	sp, #12
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	4618      	mov	r0, r3
 8014c40:	370c      	adds	r7, #12
 8014c42:	46bd      	mov	sp, r7
 8014c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c48:	4770      	bx	lr

08014c4a <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8014c4a:	b580      	push	{r7, lr}
 8014c4c:	b082      	sub	sp, #8
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
 8014c52:	6039      	str	r1, [r7, #0]
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	6839      	ldr	r1, [r7, #0]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f000 f805 	bl	8014c68 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	4618      	mov	r0, r3
 8014c62:	3708      	adds	r7, #8
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}

08014c68 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	6039      	str	r1, [r7, #0]
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6839      	ldr	r1, [r7, #0]
 8014c76:	4618      	mov	r0, r3
 8014c78:	f000 f805 	bl	8014c86 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3708      	adds	r7, #8
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8014c86:	b5b0      	push	{r4, r5, r7, lr}
 8014c88:	b084      	sub	sp, #16
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	6078      	str	r0, [r7, #4]
 8014c8e:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	4618      	mov	r0, r3
 8014c94:	f000 f834 	bl	8014d00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	1d1c      	adds	r4, r3, #4
 8014c9c:	6838      	ldr	r0, [r7, #0]
 8014c9e:	f7f2 f9aa 	bl	8006ff6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	60bb      	str	r3, [r7, #8]
 8014ca6:	6838      	ldr	r0, [r7, #0]
 8014ca8:	f7f1 fa33 	bl	8006112 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014cac:	4603      	mov	r3, r0
 8014cae:	60fb      	str	r3, [r7, #12]
 8014cb0:	f107 020c 	add.w	r2, r7, #12
 8014cb4:	f107 0308 	add.w	r3, r7, #8
 8014cb8:	4619      	mov	r1, r3
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f000 f82d 	bl	8014d1a <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	2004      	movs	r0, #4
 8014cc6:	f7ec f981 	bl	8000fcc <_ZnwjPv>
 8014cca:	4602      	mov	r2, r0
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	3304      	adds	r3, #4
 8014cd0:	4619      	mov	r1, r3
 8014cd2:	4610      	mov	r0, r2
 8014cd4:	f7fd f884 	bl	8011de0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	1d1c      	adds	r4, r3, #4
 8014cdc:	6838      	ldr	r0, [r7, #0]
 8014cde:	f000 f835 	bl	8014d4c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 8014ce2:	4605      	mov	r5, r0
 8014ce4:	6838      	ldr	r0, [r7, #0]
 8014ce6:	f000 f83d 	bl	8014d64 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 8014cea:	4603      	mov	r3, r0
 8014cec:	461a      	mov	r2, r3
 8014cee:	4629      	mov	r1, r5
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	f000 f843 	bl	8014d7c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	3710      	adds	r7, #16
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bdb0      	pop	{r4, r5, r7, pc}

08014d00 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b082      	sub	sp, #8
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f000 f854 	bl	8014db8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	4618      	mov	r0, r3
 8014d14:	3708      	adds	r7, #8
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}

08014d1a <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8014d1a:	b580      	push	{r7, lr}
 8014d1c:	b084      	sub	sp, #16
 8014d1e:	af00      	add	r7, sp, #0
 8014d20:	60f8      	str	r0, [r7, #12]
 8014d22:	60b9      	str	r1, [r7, #8]
 8014d24:	607a      	str	r2, [r7, #4]
    {
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7f0 f9f1 	bl	8005110 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 8014d2e:	f7f0 f9ff 	bl	8005130 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8014d32:	68f8      	ldr	r0, [r7, #12]
 8014d34:	68bb      	ldr	r3, [r7, #8]
 8014d36:	6819      	ldr	r1, [r3, #0]
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	f000 f84d 	bl	8014ddc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	4618      	mov	r0, r3
 8014d46:	3710      	adds	r7, #16
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	370c      	adds	r7, #12
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d62:	4770      	bx	lr

08014d64 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014d64:	b480      	push	{r7}
 8014d66:	b083      	sub	sp, #12
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	685b      	ldr	r3, [r3, #4]
 8014d70:	4618      	mov	r0, r3
 8014d72:	370c      	adds	r7, #12
 8014d74:	46bd      	mov	sp, r7
 8014d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7a:	4770      	bx	lr

08014d7c <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b088      	sub	sp, #32
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	60f8      	str	r0, [r7, #12]
 8014d84:	60b9      	str	r1, [r7, #8]
 8014d86:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8014d88:	f107 0314 	add.w	r3, r7, #20
 8014d8c:	687a      	ldr	r2, [r7, #4]
 8014d8e:	68b9      	ldr	r1, [r7, #8]
 8014d90:	4618      	mov	r0, r3
 8014d92:	f000 f837 	bl	8014e04 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8014d96:	f107 031c 	add.w	r3, r7, #28
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f7f2 fa81 	bl	80072a2 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8014da0:	f107 021c 	add.w	r2, r7, #28
 8014da4:	f107 0314 	add.w	r3, r7, #20
 8014da8:	4619      	mov	r1, r3
 8014daa:	68f8      	ldr	r0, [r7, #12]
 8014dac:	f000 f841 	bl	8014e32 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014db0:	bf00      	nop
 8014db2:	3720      	adds	r7, #32
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}

08014db8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8014dc0:	6878      	ldr	r0, [r7, #4]
 8014dc2:	f7fd fe76 	bl	8012ab2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2200      	movs	r2, #0
 8014dca:	2100      	movs	r1, #0
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7f2 fb28 	bl	8007422 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3708      	adds	r7, #8
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b086      	sub	sp, #24
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	607a      	str	r2, [r7, #4]
 8014de8:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8014dea:	2301      	movs	r3, #1
 8014dec:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8014dee:	2301      	movs	r3, #1
 8014df0:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	68b9      	ldr	r1, [r7, #8]
 8014df6:	68f8      	ldr	r0, [r7, #12]
 8014df8:	f000 f82c 	bl	8014e54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 8014dfc:	bf00      	nop
 8014dfe:	3718      	adds	r7, #24
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}

08014e04 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8014e04:	b590      	push	{r4, r7, lr}
 8014e06:	b085      	sub	sp, #20
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	60f8      	str	r0, [r7, #12]
 8014e0c:	60b9      	str	r1, [r7, #8]
 8014e0e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8014e10:	68b8      	ldr	r0, [r7, #8]
 8014e12:	f7f1 f8f1 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014e16:	4604      	mov	r4, r0
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f7f0 fe1c 	bl	8005a56 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	461a      	mov	r2, r3
 8014e22:	4621      	mov	r1, r4
 8014e24:	68f8      	ldr	r0, [r7, #12]
 8014e26:	f000 f86b 	bl	8014f00 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 8014e2a:	68f8      	ldr	r0, [r7, #12]
 8014e2c:	3714      	adds	r7, #20
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd90      	pop	{r4, r7, pc}

08014e32 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8014e32:	b580      	push	{r7, lr}
 8014e34:	b086      	sub	sp, #24
 8014e36:	af00      	add	r7, sp, #0
 8014e38:	60f8      	str	r0, [r7, #12]
 8014e3a:	60b9      	str	r1, [r7, #8]
 8014e3c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	68b9      	ldr	r1, [r7, #8]
 8014e46:	6978      	ldr	r0, [r7, #20]
 8014e48:	f000 f888 	bl	8014f5c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8014e4c:	bf00      	nop
 8014e4e:	3718      	adds	r7, #24
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b086      	sub	sp, #24
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	60f8      	str	r0, [r7, #12]
 8014e5c:	60b9      	str	r1, [r7, #8]
 8014e5e:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8014e60:	68bb      	ldr	r3, [r7, #8]
 8014e62:	2b01      	cmp	r3, #1
 8014e64:	d108      	bne.n	8014e78 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2b03      	cmp	r3, #3
 8014e6a:	d105      	bne.n	8014e78 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	db02      	blt.n	8014e78 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	da06      	bge.n	8014e86 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 8014e78:	4b0c      	ldr	r3, [pc, #48]	; (8014eac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 8014e7a:	4a0d      	ldr	r2, [pc, #52]	; (8014eb0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 8014e7c:	f240 1111 	movw	r1, #273	; 0x111
 8014e80:	480c      	ldr	r0, [pc, #48]	; (8014eb4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 8014e82:	f009 f93b 	bl	801e0fc <__assert_func>
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	617b      	str	r3, [r7, #20]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	613b      	str	r3, [r7, #16]
  }
 8014e8e:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8014e90:	68f8      	ldr	r0, [r7, #12]
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	fb02 f103 	mul.w	r1, r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	68ba      	ldr	r2, [r7, #8]
 8014e9e:	f000 f870 	bl	8014f82 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 8014ea2:	bf00      	nop
 8014ea4:	3718      	adds	r7, #24
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}
 8014eaa:	bf00      	nop
 8014eac:	080229f4 	.word	0x080229f4
 8014eb0:	080298a0 	.word	0x080298a0
 8014eb4:	08022c10 	.word	0x08022c10

08014eb8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f000 f86b 	bl	8014f9c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3708      	adds	r7, #8
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f7ff ffed 	bl	8014eb8 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	3708      	adds	r7, #8
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}

08014ee8 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b082      	sub	sp, #8
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f7ff ffed 	bl	8014ed0 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3708      	adds	r7, #8
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}

08014f00 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8014f00:	b590      	push	{r4, r7, lr}
 8014f02:	b085      	sub	sp, #20
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	60f8      	str	r0, [r7, #12]
 8014f08:	60b9      	str	r1, [r7, #8]
 8014f0a:	607a      	str	r2, [r7, #4]
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f7ff ffeb 	bl	8014ee8 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	68ba      	ldr	r2, [r7, #8]
 8014f16:	601a      	str	r2, [r3, #0]
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7f0 fb45 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014f26:	4604      	mov	r4, r0
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7f0 f989 	bl	8005242 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8014f30:	4603      	mov	r3, r0
 8014f32:	429c      	cmp	r4, r3
 8014f34:	d005      	beq.n	8014f42 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 8014f36:	4b06      	ldr	r3, [pc, #24]	; (8014f50 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 8014f38:	4a06      	ldr	r2, [pc, #24]	; (8014f54 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 8014f3a:	2160      	movs	r1, #96	; 0x60
 8014f3c:	4806      	ldr	r0, [pc, #24]	; (8014f58 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 8014f3e:	f009 f8dd 	bl	801e0fc <__assert_func>
 8014f42:	bf00      	nop
    }
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	4618      	mov	r0, r3
 8014f48:	3714      	adds	r7, #20
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd90      	pop	{r4, r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	08020224 	.word	0x08020224
 8014f54:	0802992c 	.word	0x0802992c
 8014f58:	08020574 	.word	0x08020574

08014f5c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b084      	sub	sp, #16
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8014f68:	68b9      	ldr	r1, [r7, #8]
 8014f6a:	68f8      	ldr	r0, [r7, #12]
 8014f6c:	f000 f821 	bl	8014fb2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	68b9      	ldr	r1, [r7, #8]
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	f000 f84a 	bl	801500e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014f7a:	bf00      	nop
 8014f7c:	3710      	adds	r7, #16
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}

08014f82 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8014f82:	b480      	push	{r7}
 8014f84:	b085      	sub	sp, #20
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	60f8      	str	r0, [r7, #12]
 8014f8a:	60b9      	str	r1, [r7, #8]
 8014f8c:	607a      	str	r2, [r7, #4]
 8014f8e:	603b      	str	r3, [r7, #0]
 8014f90:	bf00      	nop
 8014f92:	3714      	adds	r7, #20
 8014f94:	46bd      	mov	sp, r7
 8014f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9a:	4770      	bx	lr

08014f9c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014f9c:	b480      	push	{r7}
 8014f9e:	b083      	sub	sp, #12
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
    }
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	370c      	adds	r7, #12
 8014faa:	46bd      	mov	sp, r7
 8014fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb0:	4770      	bx	lr

08014fb2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8014fb2:	b480      	push	{r7}
 8014fb4:	b083      	sub	sp, #12
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
 8014fba:	6039      	str	r1, [r7, #0]
}
 8014fbc:	bf00      	nop
 8014fbe:	370c      	adds	r7, #12
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr

08014fc8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	330c      	adds	r3, #12
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7f2 fbbc 	bl	8007752 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	3308      	adds	r3, #8
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7fa f9ea 	bl	800f3b8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f000 f859 	bl	801509c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	4618      	mov	r0, r3
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b082      	sub	sp, #8
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7ff ffe2 	bl	8014fc8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	4618      	mov	r0, r3
 8015008:	3708      	adds	r7, #8
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}

0801500e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 801500e:	b580      	push	{r7, lr}
 8015010:	b090      	sub	sp, #64	; 0x40
 8015012:	af02      	add	r7, sp, #8
 8015014:	60f8      	str	r0, [r7, #12]
 8015016:	60b9      	str	r1, [r7, #8]
 8015018:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 801501a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801501e:	68b9      	ldr	r1, [r7, #8]
 8015020:	4618      	mov	r0, r3
 8015022:	f000 f82c 	bl	801507e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	68b9      	ldr	r1, [r7, #8]
 801502a:	68f8      	ldr	r0, [r7, #12]
 801502c:	f000 f85e 	bl	80150ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8015030:	f107 0320 	add.w	r3, r7, #32
 8015034:	68f9      	ldr	r1, [r7, #12]
 8015036:	4618      	mov	r0, r3
 8015038:	f7fc fed2 	bl	8011de0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 801503c:	68f8      	ldr	r0, [r7, #12]
 801503e:	f000 f89f 	bl	8015180 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 8015042:	4603      	mov	r3, r0
 8015044:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015048:	f107 0120 	add.w	r1, r7, #32
 801504c:	f107 0010 	add.w	r0, r7, #16
 8015050:	9300      	str	r3, [sp, #0]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	f000 f89f 	bl	8015196 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8015058:	f107 0310 	add.w	r3, r7, #16
 801505c:	4618      	mov	r0, r3
 801505e:	f000 f8b4 	bl	80151ca <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8015062:	f107 0320 	add.w	r3, r7, #32
 8015066:	4618      	mov	r0, r3
 8015068:	f7fa f9a6 	bl	800f3b8 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 801506c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015070:	4618      	mov	r0, r3
 8015072:	f7ff ffbf 	bl	8014ff4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 8015076:	bf00      	nop
 8015078:	3738      	adds	r7, #56	; 0x38
 801507a:	46bd      	mov	sp, r7
 801507c:	bd80      	pop	{r7, pc}

0801507e <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801507e:	b580      	push	{r7, lr}
 8015080:	b082      	sub	sp, #8
 8015082:	af00      	add	r7, sp, #0
 8015084:	6078      	str	r0, [r7, #4]
 8015086:	6039      	str	r1, [r7, #0]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6839      	ldr	r1, [r7, #0]
 801508c:	4618      	mov	r0, r3
 801508e:	f000 f8a7 	bl	80151e0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	4618      	mov	r0, r3
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	4618      	mov	r0, r3
 80150a8:	370c      	adds	r7, #12
 80150aa:	46bd      	mov	sp, r7
 80150ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b0:	4770      	bx	lr

080150b2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b082      	sub	sp, #8
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	4618      	mov	r0, r3
 80150c0:	f7f0 fa81 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80150c4:	4603      	mov	r3, r0
 80150c6:	4618      	mov	r0, r3
 80150c8:	3708      	adds	r7, #8
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}

080150ce <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80150ce:	b580      	push	{r7, lr}
 80150d0:	b082      	sub	sp, #8
 80150d2:	af00      	add	r7, sp, #0
 80150d4:	6078      	str	r0, [r7, #4]
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	4618      	mov	r0, r3
 80150dc:	f7f0 f8a6 	bl	800522c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80150e0:	4603      	mov	r3, r0
 80150e2:	4618      	mov	r0, r3
 80150e4:	3708      	adds	r7, #8
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
	...

080150ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b086      	sub	sp, #24
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	60b9      	str	r1, [r7, #8]
 80150f6:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80150f8:	68b8      	ldr	r0, [r7, #8]
 80150fa:	f7ff ffda 	bl	80150b2 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 80150fe:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8015100:	68b8      	ldr	r0, [r7, #8]
 8015102:	f7ff ffe4 	bl	80150ce <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 8015106:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	4618      	mov	r0, r3
 801510c:	f7f0 fa5b 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8015110:	4602      	mov	r2, r0
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	4293      	cmp	r3, r2
 8015116:	d107      	bne.n	8015128 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	4618      	mov	r0, r3
 801511c:	f7f0 fa48 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8015120:	4602      	mov	r2, r0
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	4293      	cmp	r3, r2
 8015126:	d001      	beq.n	801512c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8015128:	2301      	movs	r3, #1
 801512a:	e000      	b.n	801512e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 801512c:	2300      	movs	r3, #0
 801512e:	2b00      	cmp	r3, #0
 8015130:	d005      	beq.n	801513e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	693a      	ldr	r2, [r7, #16]
 8015136:	6979      	ldr	r1, [r7, #20]
 8015138:	4618      	mov	r0, r3
 801513a:	f7ff fe8b 	bl	8014e54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	4618      	mov	r0, r3
 8015142:	f7f0 fa40 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8015146:	4602      	mov	r2, r0
 8015148:	697b      	ldr	r3, [r7, #20]
 801514a:	4293      	cmp	r3, r2
 801514c:	d107      	bne.n	801515e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	4618      	mov	r0, r3
 8015152:	f7f0 fa2d 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8015156:	4602      	mov	r2, r0
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	4293      	cmp	r3, r2
 801515c:	d006      	beq.n	801516c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 801515e:	4b05      	ldr	r3, [pc, #20]	; (8015174 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8015160:	4a05      	ldr	r2, [pc, #20]	; (8015178 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8015162:	f240 21fd 	movw	r1, #765	; 0x2fd
 8015166:	4805      	ldr	r0, [pc, #20]	; (801517c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8015168:	f008 ffc8 	bl	801e0fc <__assert_func>
}
 801516c:	bf00      	nop
 801516e:	3718      	adds	r7, #24
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}
 8015174:	080225dc 	.word	0x080225dc
 8015178:	08029a54 	.word	0x08029a54
 801517c:	080226f0 	.word	0x080226f0

08015180 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8015180:	b480      	push	{r7}
 8015182:	b083      	sub	sp, #12
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	4618      	mov	r0, r3
 801518c:	370c      	adds	r7, #12
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr

08015196 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8015196:	b480      	push	{r7}
 8015198:	b085      	sub	sp, #20
 801519a:	af00      	add	r7, sp, #0
 801519c:	60f8      	str	r0, [r7, #12]
 801519e:	60b9      	str	r1, [r7, #8]
 80151a0:	607a      	str	r2, [r7, #4]
 80151a2:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	68ba      	ldr	r2, [r7, #8]
 80151a8:	601a      	str	r2, [r3, #0]
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	605a      	str	r2, [r3, #4]
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	683a      	ldr	r2, [r7, #0]
 80151b4:	609a      	str	r2, [r3, #8]
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	69ba      	ldr	r2, [r7, #24]
 80151ba:	60da      	str	r2, [r3, #12]
  }
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	4618      	mov	r0, r3
 80151c0:	3714      	adds	r7, #20
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr

080151ca <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80151ca:	b580      	push	{r7, lr}
 80151cc:	b082      	sub	sp, #8
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f000 f839 	bl	801524a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 80151d8:	bf00      	nop
 80151da:	3708      	adds	r7, #8
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}

080151e0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b082      	sub	sp, #8
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80151ea:	6878      	ldr	r0, [r7, #4]
 80151ec:	f000 f854 	bl	8015298 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80151f0:	6838      	ldr	r0, [r7, #0]
 80151f2:	f000 f839 	bl	8015268 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 80151f6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 80151fc:	6838      	ldr	r0, [r7, #0]
 80151fe:	f000 f83f 	bl	8015280 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 8015202:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	605a      	str	r2, [r3, #4]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8015212:	4619      	mov	r1, r3
 8015214:	4610      	mov	r0, r2
 8015216:	f7fc fde3 	bl	8011de0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8015224:	4619      	mov	r1, r3
 8015226:	4610      	mov	r0, r2
 8015228:	f7f2 fca2 	bl	8007b70 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 801522c:	6838      	ldr	r0, [r7, #0]
 801522e:	f000 f81b 	bl	8015268 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 8015232:	4603      	mov	r3, r0
 8015234:	4618      	mov	r0, r3
 8015236:	f7f0 f9bb 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801523a:	4602      	mov	r2, r0
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	611a      	str	r2, [r3, #16]
  }
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	4618      	mov	r0, r3
 8015244:	3708      	adds	r7, #8
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}

0801524a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801524a:	b580      	push	{r7, lr}
 801524c:	b082      	sub	sp, #8
 801524e:	af00      	add	r7, sp, #0
 8015250:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8015252:	2100      	movs	r1, #0
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f000 f82a 	bl	80152ae <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f000 f84a 	bl	80152f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8015260:	bf00      	nop
 8015262:	3708      	adds	r7, #8
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}

08015268 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	4618      	mov	r0, r3
 8015276:	370c      	adds	r7, #12
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr

08015280 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8015280:	b480      	push	{r7}
 8015282:	b083      	sub	sp, #12
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	685b      	ldr	r3, [r3, #4]
 801528c:	4618      	mov	r0, r3
 801528e:	370c      	adds	r7, #12
 8015290:	46bd      	mov	sp, r7
 8015292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015296:	4770      	bx	lr

08015298 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015298:	b480      	push	{r7}
 801529a:	b083      	sub	sp, #12
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	4618      	mov	r0, r3
 80152a4:	370c      	adds	r7, #12
 80152a6:	46bd      	mov	sp, r7
 80152a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ac:	4770      	bx	lr

080152ae <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80152ae:	b5b0      	push	{r4, r5, r7, lr}
 80152b0:	b084      	sub	sp, #16
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
 80152b6:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	689c      	ldr	r4, [r3, #8]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	6839      	ldr	r1, [r7, #0]
 80152c2:	4618      	mov	r0, r3
 80152c4:	f000 f825 	bl	8015312 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 80152c8:	4605      	mov	r5, r0
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	6839      	ldr	r1, [r7, #0]
 80152d0:	4618      	mov	r0, r3
 80152d2:	f000 f82e 	bl	8015332 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 80152d6:	eef0 7a40 	vmov.f32	s15, s0
 80152da:	edc7 7a03 	vstr	s15, [r7, #12]
 80152de:	f107 030c 	add.w	r3, r7, #12
 80152e2:	461a      	mov	r2, r3
 80152e4:	4629      	mov	r1, r5
 80152e6:	4620      	mov	r0, r4
 80152e8:	f7f3 fb4a 	bl	8008980 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80152ec:	bf00      	nop
 80152ee:	3710      	adds	r7, #16
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bdb0      	pop	{r4, r5, r7, pc}

080152f4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80152fc:	2101      	movs	r1, #1
 80152fe:	6878      	ldr	r0, [r7, #4]
 8015300:	f7ff ffd5 	bl	80152ae <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f000 f84d 	bl	80153a4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 801530a:	bf00      	nop
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8015312:	b480      	push	{r7}
 8015314:	b083      	sub	sp, #12
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
 801531a:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681a      	ldr	r2, [r3, #0]
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	009b      	lsls	r3, r3, #2
 8015324:	4413      	add	r3, r2
  }
 8015326:	4618      	mov	r0, r3
 8015328:	370c      	adds	r7, #12
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr

08015332 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8015332:	b580      	push	{r7, lr}
 8015334:	b0a4      	sub	sp, #144	; 0x90
 8015336:	af00      	add	r7, sp, #0
 8015338:	6078      	str	r0, [r7, #4]
 801533a:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 801533c:	2300      	movs	r3, #0
 801533e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6819      	ldr	r1, [r3, #0]
 801534c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015350:	2200      	movs	r2, #0
 8015352:	4618      	mov	r0, r3
 8015354:	f000 f835 	bl	80153c2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 8015358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801535c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015360:	4611      	mov	r1, r2
 8015362:	4618      	mov	r0, r3
 8015364:	f000 f840 	bl	80153e8 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6859      	ldr	r1, [r3, #4]
 801536c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015370:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015374:	4618      	mov	r0, r3
 8015376:	f7f7 f94a 	bl	800c60e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 801537a:	f107 030c 	add.w	r3, r7, #12
 801537e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8015382:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8015386:	4618      	mov	r0, r3
 8015388:	f000 f83f 	bl	801540a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 801538c:	f107 030c 	add.w	r3, r7, #12
 8015390:	4618      	mov	r0, r3
 8015392:	f000 f868 	bl	8015466 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 8015396:	eef0 7a40 	vmov.f32	s15, s0
  }
 801539a:	eeb0 0a67 	vmov.f32	s0, s15
 801539e:	3790      	adds	r7, #144	; 0x90
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}

080153a4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b082      	sub	sp, #8
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80153ac:	2102      	movs	r1, #2
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f7ff ff7d 	bl	80152ae <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f000 f871 	bl	801549c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 80153ba:	bf00      	nop
 80153bc:	3708      	adds	r7, #8
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b084      	sub	sp, #16
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	60f8      	str	r0, [r7, #12]
 80153ca:	60b9      	str	r1, [r7, #8]
 80153cc:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 80153ce:	68b8      	ldr	r0, [r7, #8]
 80153d0:	f7f0 fe12 	bl	8005ff8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80153d4:	4603      	mov	r3, r0
 80153d6:	687a      	ldr	r2, [r7, #4]
 80153d8:	4619      	mov	r1, r3
 80153da:	68f8      	ldr	r0, [r7, #12]
 80153dc:	f000 f868 	bl	80154b0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 80153e0:	68f8      	ldr	r0, [r7, #12]
 80153e2:	3710      	adds	r7, #16
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b082      	sub	sp, #8
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 80153f2:	6838      	ldr	r0, [r7, #0]
 80153f4:	f000 f886 	bl	8015504 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 80153f8:	4603      	mov	r3, r0
 80153fa:	4619      	mov	r1, r3
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f000 f8a4 	bl	801554a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 8015402:	6878      	ldr	r0, [r7, #4]
 8015404:	3708      	adds	r7, #8
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}

0801540a <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 801540a:	b5b0      	push	{r4, r5, r7, lr}
 801540c:	b086      	sub	sp, #24
 801540e:	af00      	add	r7, sp, #0
 8015410:	60f8      	str	r0, [r7, #12]
 8015412:	60b9      	str	r1, [r7, #8]
 8015414:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8015416:	68b8      	ldr	r0, [r7, #8]
 8015418:	f000 f8ae 	bl	8015578 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 801541c:	4604      	mov	r4, r0
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f7f7 fec4 	bl	800d1ac <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 8015424:	4605      	mov	r5, r0
 8015426:	f107 0314 	add.w	r3, r7, #20
 801542a:	4618      	mov	r0, r3
 801542c:	f7f0 f9aa 	bl	8005784 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8015430:	f107 0314 	add.w	r3, r7, #20
 8015434:	462a      	mov	r2, r5
 8015436:	4621      	mov	r1, r4
 8015438:	68f8      	ldr	r0, [r7, #12]
 801543a:	f000 f8db 	bl	80155f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 801543e:	68f8      	ldr	r0, [r7, #12]
 8015440:	3718      	adds	r7, #24
 8015442:	46bd      	mov	sp, r7
 8015444:	bdb0      	pop	{r4, r5, r7, pc}

08015446 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8015446:	b580      	push	{r7, lr}
 8015448:	b082      	sub	sp, #8
 801544a:	af00      	add	r7, sp, #0
 801544c:	6078      	str	r0, [r7, #4]
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f000 f92e 	bl	80156b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015454:	4603      	mov	r3, r0
 8015456:	4618      	mov	r0, r3
 8015458:	f000 f935 	bl	80156c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 801545c:	4603      	mov	r3, r0
 801545e:	4618      	mov	r0, r3
 8015460:	3708      	adds	r7, #8
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}

08015466 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8015466:	b590      	push	{r4, r7, lr}
 8015468:	b085      	sub	sp, #20
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	f000 f91e 	bl	80156b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015474:	4604      	mov	r4, r0
 8015476:	f107 030c 	add.w	r3, r7, #12
 801547a:	4618      	mov	r0, r3
 801547c:	f7f0 fc79 	bl	8005d72 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8015480:	f107 030c 	add.w	r3, r7, #12
 8015484:	4619      	mov	r1, r3
 8015486:	4620      	mov	r0, r4
 8015488:	f000 f9c4 	bl	8015814 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801548c:	eef0 7a40 	vmov.f32	s15, s0
 8015490:	bf00      	nop
}
 8015492:	eeb0 0a67 	vmov.f32	s0, s15
 8015496:	3714      	adds	r7, #20
 8015498:	46bd      	mov	sp, r7
 801549a:	bd90      	pop	{r4, r7, pc}

0801549c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801549c:	b480      	push	{r7}
 801549e:	b083      	sub	sp, #12
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
 80154a4:	bf00      	nop
 80154a6:	370c      	adds	r7, #12
 80154a8:	46bd      	mov	sp, r7
 80154aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ae:	4770      	bx	lr

080154b0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b084      	sub	sp, #16
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	68b9      	ldr	r1, [r7, #8]
 80154c2:	4618      	mov	r0, r3
 80154c4:	f000 f9ec 	bl	80158a0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	db07      	blt.n	80154de <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	4618      	mov	r0, r3
 80154d2:	f7f0 f878 	bl	80055c6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80154d6:	4602      	mov	r2, r0
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	4293      	cmp	r3, r2
 80154dc:	db05      	blt.n	80154ea <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 80154de:	4b06      	ldr	r3, [pc, #24]	; (80154f8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 80154e0:	4a06      	ldr	r2, [pc, #24]	; (80154fc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 80154e2:	2178      	movs	r1, #120	; 0x78
 80154e4:	4806      	ldr	r0, [pc, #24]	; (8015500 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 80154e6:	f008 fe09 	bl	801e0fc <__assert_func>
 80154ea:	bf00      	nop
    }
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	4618      	mov	r0, r3
 80154f0:	3710      	adds	r7, #16
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}
 80154f6:	bf00      	nop
 80154f8:	08024ae8 	.word	0x08024ae8
 80154fc:	08029b68 	.word	0x08029b68
 8015500:	08024c6c 	.word	0x08024c6c

08015504 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8015504:	b480      	push	{r7}
 8015506:	b083      	sub	sp, #12
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	4618      	mov	r0, r3
 8015510:	370c      	adds	r7, #12
 8015512:	46bd      	mov	sp, r7
 8015514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015518:	4770      	bx	lr

0801551a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 801551a:	b580      	push	{r7, lr}
 801551c:	b082      	sub	sp, #8
 801551e:	af00      	add	r7, sp, #0
 8015520:	6078      	str	r0, [r7, #4]
 8015522:	6878      	ldr	r0, [r7, #4]
 8015524:	f000 f9cd 	bl	80158c2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	4618      	mov	r0, r3
 801552c:	3708      	adds	r7, #8
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}

08015532 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8015532:	b580      	push	{r7, lr}
 8015534:	b082      	sub	sp, #8
 8015536:	af00      	add	r7, sp, #0
 8015538:	6078      	str	r0, [r7, #4]
 801553a:	6878      	ldr	r0, [r7, #4]
 801553c:	f7ff ffed 	bl	801551a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	4618      	mov	r0, r3
 8015544:	3708      	adds	r7, #8
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}

0801554a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 801554a:	b5b0      	push	{r4, r5, r7, lr}
 801554c:	b082      	sub	sp, #8
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
 8015552:	6039      	str	r1, [r7, #0]
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7ff ffec 	bl	8015532 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	683b      	ldr	r3, [r7, #0]
 801555e:	4614      	mov	r4, r2
 8015560:	461d      	mov	r5, r3
 8015562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015566:	e895 0003 	ldmia.w	r5, {r0, r1}
 801556a:	e884 0003 	stmia.w	r4, {r0, r1}
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	4618      	mov	r0, r3
 8015572:	3708      	adds	r7, #8
 8015574:	46bd      	mov	sp, r7
 8015576:	bdb0      	pop	{r4, r5, r7, pc}

08015578 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	4618      	mov	r0, r3
 8015584:	370c      	adds	r7, #12
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr

0801558e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 801558e:	b580      	push	{r7, lr}
 8015590:	b082      	sub	sp, #8
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
 8015596:	6878      	ldr	r0, [r7, #4]
 8015598:	f000 f99e 	bl	80158d8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	4618      	mov	r0, r3
 80155a0:	3708      	adds	r7, #8
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}

080155a6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80155a6:	b580      	push	{r7, lr}
 80155a8:	b082      	sub	sp, #8
 80155aa:	af00      	add	r7, sp, #0
 80155ac:	6078      	str	r0, [r7, #4]
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	f7ff ffed 	bl	801558e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	4618      	mov	r0, r3
 80155b8:	3708      	adds	r7, #8
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}

080155be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80155be:	b580      	push	{r7, lr}
 80155c0:	b082      	sub	sp, #8
 80155c2:	af00      	add	r7, sp, #0
 80155c4:	6078      	str	r0, [r7, #4]
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	4618      	mov	r0, r3
 80155ca:	f000 f990 	bl	80158ee <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 80155ce:	4603      	mov	r3, r0
 80155d0:	4618      	mov	r0, r3
 80155d2:	3708      	adds	r7, #8
 80155d4:	46bd      	mov	sp, r7
 80155d6:	bd80      	pop	{r7, pc}

080155d8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	4618      	mov	r0, r3
 80155e4:	f000 f98e 	bl	8015904 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 80155e8:	4603      	mov	r3, r0
 80155ea:	4618      	mov	r0, r3
 80155ec:	3708      	adds	r7, #8
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}
	...

080155f4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80155f4:	b5b0      	push	{r4, r5, r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	f7ff ffcf 	bl	80155a6 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8015608:	68fa      	ldr	r2, [r7, #12]
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	4614      	mov	r4, r2
 801560e:	461d      	mov	r5, r3
 8015610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015614:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015618:	e884 0003 	stmia.w	r4, {r0, r1}
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	f103 0218 	add.w	r2, r3, #24
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	4614      	mov	r4, r2
 8015626:	461d      	mov	r5, r3
 8015628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801562a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801562c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015630:	e884 0003 	stmia.w	r4, {r0, r1}
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	3330      	adds	r3, #48	; 0x30
 8015638:	6839      	ldr	r1, [r7, #0]
 801563a:	4618      	mov	r0, r3
 801563c:	f7f0 f92c 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8015640:	68b8      	ldr	r0, [r7, #8]
 8015642:	f7ff ffbc 	bl	80155be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8015646:	4604      	mov	r4, r0
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	4618      	mov	r0, r3
 801564c:	f7f7 fdd1 	bl	800d1f2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 8015650:	4603      	mov	r3, r0
 8015652:	429c      	cmp	r4, r3
 8015654:	d10a      	bne.n	801566c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 8015656:	68b8      	ldr	r0, [r7, #8]
 8015658:	f7ff ffbe 	bl	80155d8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 801565c:	4604      	mov	r4, r0
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	4618      	mov	r0, r3
 8015662:	f7f7 fdd1 	bl	800d208 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 8015666:	4603      	mov	r3, r0
 8015668:	429c      	cmp	r4, r3
 801566a:	d005      	beq.n	8015678 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 801566c:	4b05      	ldr	r3, [pc, #20]	; (8015684 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 801566e:	4a06      	ldr	r2, [pc, #24]	; (8015688 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 8015670:	2174      	movs	r1, #116	; 0x74
 8015672:	4806      	ldr	r0, [pc, #24]	; (801568c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 8015674:	f008 fd42 	bl	801e0fc <__assert_func>
    }
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	4618      	mov	r0, r3
 801567c:	3710      	adds	r7, #16
 801567e:	46bd      	mov	sp, r7
 8015680:	bdb0      	pop	{r4, r5, r7, pc}
 8015682:	bf00      	nop
 8015684:	0801ff64 	.word	0x0801ff64
 8015688:	08029c44 	.word	0x08029c44
 801568c:	080201c8 	.word	0x080201c8

08015690 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	6878      	ldr	r0, [r7, #4]
 801569a:	f000 f809 	bl	80156b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 801569e:	4603      	mov	r3, r0
 80156a0:	4618      	mov	r0, r3
 80156a2:	f000 f93a 	bl	801591a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 80156a6:	4603      	mov	r3, r0
 80156a8:	4618      	mov	r0, r3
 80156aa:	3708      	adds	r7, #8
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80156b0:	b480      	push	{r7}
 80156b2:	b083      	sub	sp, #12
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	4618      	mov	r0, r3
 80156bc:	370c      	adds	r7, #12
 80156be:	46bd      	mov	sp, r7
 80156c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c4:	4770      	bx	lr

080156c6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80156c6:	b580      	push	{r7, lr}
 80156c8:	b082      	sub	sp, #8
 80156ca:	af00      	add	r7, sp, #0
 80156cc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	4618      	mov	r0, r3
 80156d2:	f7ff ff74 	bl	80155be <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 80156d6:	4603      	mov	r3, r0
    }
 80156d8:	4618      	mov	r0, r3
 80156da:	3708      	adds	r7, #8
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}

080156e0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b082      	sub	sp, #8
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	f000 f948 	bl	801597e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	4618      	mov	r0, r3
 80156f2:	3708      	adds	r7, #8
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	4618      	mov	r0, r3
 8015704:	f7ff ffec 	bl	80156e0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	4618      	mov	r0, r3
 801570c:	3708      	adds	r7, #8
 801570e:	46bd      	mov	sp, r7
 8015710:	bd80      	pop	{r7, pc}

08015712 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8015712:	b580      	push	{r7, lr}
 8015714:	b082      	sub	sp, #8
 8015716:	af00      	add	r7, sp, #0
 8015718:	6078      	str	r0, [r7, #4]
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	4618      	mov	r0, r3
 801571e:	f7ff ffeb 	bl	80156f8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	4618      	mov	r0, r3
 8015726:	3708      	adds	r7, #8
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	4618      	mov	r0, r3
 8015738:	f7ff ffeb 	bl	8015712 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	4618      	mov	r0, r3
 8015740:	3708      	adds	r7, #8
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}

08015746 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8015746:	b580      	push	{r7, lr}
 8015748:	b082      	sub	sp, #8
 801574a:	af00      	add	r7, sp, #0
 801574c:	6078      	str	r0, [r7, #4]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	4618      	mov	r0, r3
 8015752:	f7ff ffeb 	bl	801572c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f000 f906 	bl	8015968 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	4618      	mov	r0, r3
 8015760:	3708      	adds	r7, #8
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}

08015766 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8015766:	b580      	push	{r7, lr}
 8015768:	b082      	sub	sp, #8
 801576a:	af00      	add	r7, sp, #0
 801576c:	6078      	str	r0, [r7, #4]
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	4618      	mov	r0, r3
 8015772:	f7ff ffe8 	bl	8015746 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	4618      	mov	r0, r3
 801577a:	3708      	adds	r7, #8
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}

08015780 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 8015780:	b580      	push	{r7, lr}
 8015782:	b082      	sub	sp, #8
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	4618      	mov	r0, r3
 801578c:	f7ff ffeb 	bl	8015766 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	4618      	mov	r0, r3
 8015794:	3708      	adds	r7, #8
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}

0801579a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 801579a:	b580      	push	{r7, lr}
 801579c:	b082      	sub	sp, #8
 801579e:	af00      	add	r7, sp, #0
 80157a0:	6078      	str	r0, [r7, #4]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	330c      	adds	r3, #12
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7f7 fdd6 	bl	800d358 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	3304      	adds	r3, #4
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7ff ffe5 	bl	8015780 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	4618      	mov	r0, r3
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}

080157c0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7ff ffe5 	bl	801579a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 80157d0:	6878      	ldr	r0, [r7, #4]
 80157d2:	f000 f8be 	bl	8015952 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	4618      	mov	r0, r3
 80157da:	3708      	adds	r7, #8
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd80      	pop	{r7, pc}

080157e0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b082      	sub	sp, #8
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7ff ffe8 	bl	80157c0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	4618      	mov	r0, r3
 80157f4:	3708      	adds	r7, #8
 80157f6:	46bd      	mov	sp, r7
 80157f8:	bd80      	pop	{r7, pc}

080157fa <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 80157fa:	b580      	push	{r7, lr}
 80157fc:	b082      	sub	sp, #8
 80157fe:	af00      	add	r7, sp, #0
 8015800:	6078      	str	r0, [r7, #4]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	4618      	mov	r0, r3
 8015806:	f7ff ffeb 	bl	80157e0 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	4618      	mov	r0, r3
 801580e:	3708      	adds	r7, #8
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}

08015814 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8015814:	b580      	push	{r7, lr}
 8015816:	ed2d 8b02 	vpush	{d8}
 801581a:	b088      	sub	sp, #32
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8015822:	6878      	ldr	r0, [r7, #4]
 8015824:	f7ff fe0f 	bl	8015446 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8015828:	4603      	mov	r3, r0
 801582a:	2b00      	cmp	r3, #0
 801582c:	dd05      	ble.n	801583a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801582e:	6878      	ldr	r0, [r7, #4]
 8015830:	f7ff ff2e 	bl	8015690 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8015834:	4603      	mov	r3, r0
 8015836:	2b00      	cmp	r3, #0
 8015838:	dc06      	bgt.n	8015848 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801583a:	4b16      	ldr	r3, [pc, #88]	; (8015894 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 801583c:	4a16      	ldr	r2, [pc, #88]	; (8015898 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 801583e:	f240 119b 	movw	r1, #411	; 0x19b
 8015842:	4816      	ldr	r0, [pc, #88]	; (801589c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8015844:	f008 fc5a 	bl	801e0fc <__assert_func>
 8015848:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f7ff ff30 	bl	80156b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015850:	4602      	mov	r2, r0
 8015852:	f107 030c 	add.w	r3, r7, #12
 8015856:	4611      	mov	r1, r2
 8015858:	4618      	mov	r0, r3
 801585a:	f000 f86b 	bl	8015934 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f7ff ff26 	bl	80156b0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8015864:	4602      	mov	r2, r0
 8015866:	f107 030c 	add.w	r3, r7, #12
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	4618      	mov	r0, r3
 801586e:	f000 f891 	bl	8015994 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8015872:	eeb0 8a40 	vmov.f32	s16, s0
 8015876:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8015878:	f107 030c 	add.w	r3, r7, #12
 801587c:	4618      	mov	r0, r3
 801587e:	f7ff ffbc 	bl	80157fa <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8015882:	eef0 7a48 	vmov.f32	s15, s16
}
 8015886:	eeb0 0a67 	vmov.f32	s0, s15
 801588a:	3720      	adds	r7, #32
 801588c:	46bd      	mov	sp, r7
 801588e:	ecbd 8b02 	vpop	{d8}
 8015892:	bd80      	pop	{r7, pc}
 8015894:	08024fe4 	.word	0x08024fe4
 8015898:	08029e8c 	.word	0x08029e8c
 801589c:	080251f0 	.word	0x080251f0

080158a0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b084      	sub	sp, #16
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	607a      	str	r2, [r7, #4]
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	687a      	ldr	r2, [r7, #4]
 80158b0:	68b9      	ldr	r1, [r7, #8]
 80158b2:	4618      	mov	r0, r3
 80158b4:	f000 f87f 	bl	80159b6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	4618      	mov	r0, r3
 80158bc:	3710      	adds	r7, #16
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}

080158c2 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80158c2:	b480      	push	{r7}
 80158c4:	b083      	sub	sp, #12
 80158c6:	af00      	add	r7, sp, #0
 80158c8:	6078      	str	r0, [r7, #4]
    }
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	4618      	mov	r0, r3
 80158ce:	370c      	adds	r7, #12
 80158d0:	46bd      	mov	sp, r7
 80158d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d6:	4770      	bx	lr

080158d8 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80158d8:	b480      	push	{r7}
 80158da:	b083      	sub	sp, #12
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
    }
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	4618      	mov	r0, r3
 80158e4:	370c      	adds	r7, #12
 80158e6:	46bd      	mov	sp, r7
 80158e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ec:	4770      	bx	lr

080158ee <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 80158ee:	b580      	push	{r7, lr}
 80158f0:	b082      	sub	sp, #8
 80158f2:	af00      	add	r7, sp, #0
 80158f4:	6078      	str	r0, [r7, #4]
 80158f6:	f7f1 fa6e 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 80158fa:	4603      	mov	r3, r0
 80158fc:	4618      	mov	r0, r3
 80158fe:	3708      	adds	r7, #8
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}

08015904 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8015904:	b580      	push	{r7, lr}
 8015906:	b082      	sub	sp, #8
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	f7f1 fa6b 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015910:	4603      	mov	r3, r0
 8015912:	4618      	mov	r0, r3
 8015914:	3708      	adds	r7, #8
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}

0801591a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 801591a:	b580      	push	{r7, lr}
 801591c:	b082      	sub	sp, #8
 801591e:	af00      	add	r7, sp, #0
 8015920:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	4618      	mov	r0, r3
 8015926:	f7ff fe57 	bl	80155d8 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 801592a:	4603      	mov	r3, r0
    }
 801592c:	4618      	mov	r0, r3
 801592e:	3708      	adds	r7, #8
 8015930:	46bd      	mov	sp, r7
 8015932:	bd80      	pop	{r7, pc}

08015934 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8015934:	b580      	push	{r7, lr}
 8015936:	b082      	sub	sp, #8
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	6039      	str	r1, [r7, #0]
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	6839      	ldr	r1, [r7, #0]
 8015942:	4618      	mov	r0, r3
 8015944:	f000 f86d 	bl	8015a22 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	4618      	mov	r0, r3
 801594c:	3708      	adds	r7, #8
 801594e:	46bd      	mov	sp, r7
 8015950:	bd80      	pop	{r7, pc}

08015952 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8015952:	b480      	push	{r7}
 8015954:	b083      	sub	sp, #12
 8015956:	af00      	add	r7, sp, #0
 8015958:	6078      	str	r0, [r7, #4]
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	4618      	mov	r0, r3
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 8015968:	b480      	push	{r7}
 801596a:	b083      	sub	sp, #12
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	4618      	mov	r0, r3
 8015974:	370c      	adds	r7, #12
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr

0801597e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 801597e:	b480      	push	{r7}
 8015980:	b083      	sub	sp, #12
 8015982:	af00      	add	r7, sp, #0
 8015984:	6078      	str	r0, [r7, #4]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	4618      	mov	r0, r3
 801598a:	370c      	adds	r7, #12
 801598c:	46bd      	mov	sp, r7
 801598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015992:	4770      	bx	lr

08015994 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8015994:	b580      	push	{r7, lr}
 8015996:	b084      	sub	sp, #16
 8015998:	af00      	add	r7, sp, #0
 801599a:	60f8      	str	r0, [r7, #12]
 801599c:	60b9      	str	r1, [r7, #8]
 801599e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 80159a0:	68b9      	ldr	r1, [r7, #8]
 80159a2:	68f8      	ldr	r0, [r7, #12]
 80159a4:	f000 f84c 	bl	8015a40 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 80159a8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80159ac:	eeb0 0a67 	vmov.f32	s0, s15
 80159b0:	3710      	adds	r7, #16
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bd80      	pop	{r7, pc}

080159b6 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80159b6:	b5b0      	push	{r4, r5, r7, lr}
 80159b8:	b084      	sub	sp, #16
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	60f8      	str	r0, [r7, #12]
 80159be:	60b9      	str	r1, [r7, #8]
 80159c0:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80159c2:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	4618      	mov	r0, r3
 80159c8:	f7fd f866 	bl	8012a98 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80159cc:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80159ce:	68b8      	ldr	r0, [r7, #8]
 80159d0:	f7fd fa90 	bl	8012ef4 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80159d4:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	fb02 f303 	mul.w	r3, r2, r3
 80159dc:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80159de:	441d      	add	r5, r3
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f7ef fde4 	bl	80055b0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80159e8:	4603      	mov	r3, r0
 80159ea:	2201      	movs	r2, #1
 80159ec:	4629      	mov	r1, r5
 80159ee:	4620      	mov	r0, r4
 80159f0:	f000 f856 	bl	8015aa0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	68ba      	ldr	r2, [r7, #8]
 80159f8:	609a      	str	r2, [r3, #8]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	330c      	adds	r3, #12
 80159fe:	6879      	ldr	r1, [r7, #4]
 8015a00:	4618      	mov	r0, r3
 8015a02:	f7f8 faab 	bl	800df5c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	3310      	adds	r3, #16
 8015a0a:	2100      	movs	r1, #0
 8015a0c:	4618      	mov	r0, r3
 8015a0e:	f7f8 fa31 	bl	800de74 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8015a12:	68f8      	ldr	r0, [r7, #12]
 8015a14:	f000 f882 	bl	8015b1c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3710      	adds	r7, #16
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bdb0      	pop	{r4, r5, r7, pc}

08015a22 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8015a22:	b580      	push	{r7, lr}
 8015a24:	b082      	sub	sp, #8
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	6078      	str	r0, [r7, #4]
 8015a2a:	6039      	str	r1, [r7, #0]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	6839      	ldr	r1, [r7, #0]
 8015a30:	4618      	mov	r0, r3
 8015a32:	f000 f883 	bl	8015b3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	4618      	mov	r0, r3
 8015a3a:	3708      	adds	r7, #8
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}

08015a40 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b084      	sub	sp, #16
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
 8015a48:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015a4a:	6839      	ldr	r1, [r7, #0]
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f000 f887 	bl	8015b60 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8015a52:	eef0 7a40 	vmov.f32	s15, s0
 8015a56:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015a5a:	6839      	ldr	r1, [r7, #0]
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f000 f890 	bl	8015b82 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8015a62:	eef0 7a40 	vmov.f32	s15, s0
 8015a66:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015a6a:	f107 020c 	add.w	r2, r7, #12
 8015a6e:	f107 0308 	add.w	r3, r7, #8
 8015a72:	4619      	mov	r1, r3
 8015a74:	6838      	ldr	r0, [r7, #0]
 8015a76:	f7f3 fd74 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015a7a:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8015a82:	3710      	adds	r7, #16
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b082      	sub	sp, #8
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f000 f89a 	bl	8015bca <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3708      	adds	r7, #8
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b084      	sub	sp, #16
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	60f8      	str	r0, [r7, #12]
 8015aa8:	60b9      	str	r1, [r7, #8]
 8015aaa:	607a      	str	r2, [r7, #4]
 8015aac:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8015aae:	68f8      	ldr	r0, [r7, #12]
 8015ab0:	f7ff ffea 	bl	8015a88 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	68ba      	ldr	r2, [r7, #8]
 8015ab8:	601a      	str	r2, [r3, #0]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	3304      	adds	r3, #4
 8015abe:	6879      	ldr	r1, [r7, #4]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7f1 f963 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	3305      	adds	r3, #5
 8015aca:	6839      	ldr	r1, [r7, #0]
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f1 f943 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8015ad2:	68bb      	ldr	r3, [r7, #8]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d011      	beq.n	8015afc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	db08      	blt.n	8015af0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	2b01      	cmp	r3, #1
 8015ae2:	d105      	bne.n	8015af0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015ae4:	683b      	ldr	r3, [r7, #0]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	db02      	blt.n	8015af0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	2b03      	cmp	r3, #3
 8015aee:	d005      	beq.n	8015afc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8015af0:	4b07      	ldr	r3, [pc, #28]	; (8015b10 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 8015af2:	4a08      	ldr	r2, [pc, #32]	; (8015b14 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8015af4:	21b0      	movs	r1, #176	; 0xb0
 8015af6:	4808      	ldr	r0, [pc, #32]	; (8015b18 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 8015af8:	f008 fb00 	bl	801e0fc <__assert_func>
      checkSanity<Derived>();
 8015afc:	2100      	movs	r1, #0
 8015afe:	68f8      	ldr	r0, [r7, #12]
 8015b00:	f000 f86e 	bl	8015be0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	4618      	mov	r0, r3
 8015b08:	3710      	adds	r7, #16
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}
 8015b0e:	bf00      	nop
 8015b10:	08026688 	.word	0x08026688
 8015b14:	0802a050 	.word	0x0802a050
 8015b18:	08026838 	.word	0x08026838

08015b1c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	689b      	ldr	r3, [r3, #8]
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7fd f9e3 	bl	8012ef4 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015b2e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	615a      	str	r2, [r3, #20]
    }
 8015b34:	bf00      	nop
 8015b36:	3708      	adds	r7, #8
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f000 f855 	bl	8015bf6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6839      	ldr	r1, [r7, #0]
 8015b50:	4618      	mov	r0, r3
 8015b52:	f000 f85b 	bl	8015c0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3708      	adds	r7, #8
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}

08015b60 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b082      	sub	sp, #8
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	2100      	movs	r1, #0
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f000 f874 	bl	8015c5c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015b74:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015b78:	eeb0 0a67 	vmov.f32	s0, s15
 8015b7c:	3708      	adds	r7, #8
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}

08015b82 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8015b82:	b580      	push	{r7, lr}
 8015b84:	b084      	sub	sp, #16
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
 8015b8a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015b8c:	6839      	ldr	r1, [r7, #0]
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f000 f877 	bl	8015c82 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8015b94:	eef0 7a40 	vmov.f32	s15, s0
 8015b98:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f000 f880 	bl	8015ca4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8015ba4:	eef0 7a40 	vmov.f32	s15, s0
 8015ba8:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015bac:	f107 020c 	add.w	r2, r7, #12
 8015bb0:	f107 0308 	add.w	r3, r7, #8
 8015bb4:	4619      	mov	r1, r3
 8015bb6:	6838      	ldr	r0, [r7, #0]
 8015bb8:	f7f3 fcd3 	bl	8009562 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015bbc:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8015bc4:	3710      	adds	r7, #16
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}

08015bca <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8015bca:	b480      	push	{r7}
 8015bcc:	b083      	sub	sp, #12
 8015bce:	af00      	add	r7, sp, #0
 8015bd0:	6078      	str	r0, [r7, #4]
    }
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	370c      	adds	r7, #12
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bde:	4770      	bx	lr

08015be0 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8015be0:	b480      	push	{r7}
 8015be2:	b083      	sub	sp, #12
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6039      	str	r1, [r7, #0]
    {}
 8015bea:	bf00      	nop
 8015bec:	370c      	adds	r7, #12
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf4:	4770      	bx	lr

08015bf6 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015bf6:	b480      	push	{r7}
 8015bf8:	b083      	sub	sp, #12
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	4618      	mov	r0, r3
 8015c02:	370c      	adds	r7, #12
 8015c04:	46bd      	mov	sp, r7
 8015c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0a:	4770      	bx	lr

08015c0c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8015c0c:	b590      	push	{r4, r7, lr}
 8015c0e:	b083      	sub	sp, #12
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6039      	str	r1, [r7, #0]
 8015c16:	687c      	ldr	r4, [r7, #4]
 8015c18:	6838      	ldr	r0, [r7, #0]
 8015c1a:	f000 f854 	bl	8015cc6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	4619      	mov	r1, r3
 8015c22:	4620      	mov	r0, r4
 8015c24:	f7ef fe38 	bl	8005898 <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	1d1c      	adds	r4, r3, #4
 8015c2c:	6838      	ldr	r0, [r7, #0]
 8015c2e:	f000 f856 	bl	8015cde <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 8015c32:	4603      	mov	r3, r0
 8015c34:	4619      	mov	r1, r3
 8015c36:	4620      	mov	r0, r4
 8015c38:	f000 f868 	bl	8015d0c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f103 040c 	add.w	r4, r3, #12
 8015c42:	6838      	ldr	r0, [r7, #0]
 8015c44:	f000 f856 	bl	8015cf4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	4619      	mov	r1, r3
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	f7fa f995 	bl	800ff7c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	4618      	mov	r0, r3
 8015c56:	370c      	adds	r7, #12
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd90      	pop	{r4, r7, pc}

08015c5c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b084      	sub	sp, #16
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	60f8      	str	r0, [r7, #12]
 8015c64:	60b9      	str	r1, [r7, #8]
 8015c66:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	68ba      	ldr	r2, [r7, #8]
 8015c6c:	6879      	ldr	r1, [r7, #4]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f000 f85b 	bl	8015d2a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8015c74:	eef0 7a40 	vmov.f32	s15, s0
 8015c78:	eeb0 0a67 	vmov.f32	s0, s15
 8015c7c:	3710      	adds	r7, #16
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}

08015c82 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015c82:	b580      	push	{r7, lr}
 8015c84:	b082      	sub	sp, #8
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
 8015c8a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015c8c:	2201      	movs	r2, #1
 8015c8e:	2100      	movs	r1, #0
 8015c90:	6878      	ldr	r0, [r7, #4]
 8015c92:	f7ff ffe3 	bl	8015c5c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015c96:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8015c9e:	3708      	adds	r7, #8
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bd80      	pop	{r7, pc}

08015ca4 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b082      	sub	sp, #8
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015cae:	2202      	movs	r2, #2
 8015cb0:	2100      	movs	r1, #0
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f7ff ffd2 	bl	8015c5c <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015cb8:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8015cc0:	3708      	adds	r7, #8
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}

08015cc6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8015cc6:	b480      	push	{r7}
 8015cc8:	b083      	sub	sp, #12
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	6078      	str	r0, [r7, #4]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	3330      	adds	r3, #48	; 0x30
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	370c      	adds	r7, #12
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cdc:	4770      	bx	lr

08015cde <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8015cde:	b480      	push	{r7}
 8015ce0:	b083      	sub	sp, #12
 8015ce2:	af00      	add	r7, sp, #0
 8015ce4:	6078      	str	r0, [r7, #4]
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	4618      	mov	r0, r3
 8015cea:	370c      	adds	r7, #12
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr

08015cf4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8015cf4:	b480      	push	{r7}
 8015cf6:	b083      	sub	sp, #12
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	3318      	adds	r3, #24
 8015d00:	4618      	mov	r0, r3
 8015d02:	370c      	adds	r7, #12
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr

08015d0c <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	6839      	ldr	r1, [r7, #0]
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f000 f835 	bl	8015d8a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	4618      	mov	r0, r3
 8015d24:	3708      	adds	r7, #8
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}

08015d2a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015d2a:	b590      	push	{r4, r7, lr}
 8015d2c:	b087      	sub	sp, #28
 8015d2e:	af00      	add	r7, sp, #0
 8015d30:	60f8      	str	r0, [r7, #12]
 8015d32:	60b9      	str	r1, [r7, #8]
 8015d34:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f000 f835 	bl	8015da8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8015d3e:	4604      	mov	r4, r0
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	3304      	adds	r3, #4
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	68b9      	ldr	r1, [r7, #8]
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f000 f838 	bl	8015dbe <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 8015d4e:	eef0 7a40 	vmov.f32	s15, s0
 8015d52:	edc7 7a04 	vstr	s15, [r7, #16]
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	330c      	adds	r3, #12
 8015d5a:	687a      	ldr	r2, [r7, #4]
 8015d5c:	68b9      	ldr	r1, [r7, #8]
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7fa fd4e 	bl	8010800 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8015d64:	eef0 7a40 	vmov.f32	s15, s0
 8015d68:	edc7 7a05 	vstr	s15, [r7, #20]
 8015d6c:	f107 0214 	add.w	r2, r7, #20
 8015d70:	f107 0310 	add.w	r3, r7, #16
 8015d74:	4619      	mov	r1, r3
 8015d76:	4620      	mov	r0, r4
 8015d78:	f7f9 fc34 	bl	800f5e4 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8015d7c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015d80:	eeb0 0a67 	vmov.f32	s0, s15
 8015d84:	371c      	adds	r7, #28
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bd90      	pop	{r4, r7, pc}

08015d8a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8015d8a:	b580      	push	{r7, lr}
 8015d8c:	b082      	sub	sp, #8
 8015d8e:	af00      	add	r7, sp, #0
 8015d90:	6078      	str	r0, [r7, #4]
 8015d92:	6039      	str	r1, [r7, #0]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6839      	ldr	r1, [r7, #0]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f000 f823 	bl	8015de4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	4618      	mov	r0, r3
 8015da2:	3708      	adds	r7, #8
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8015da8:	b480      	push	{r7}
 8015daa:	b083      	sub	sp, #12
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	4618      	mov	r0, r3
 8015db4:	370c      	adds	r7, #12
 8015db6:	46bd      	mov	sp, r7
 8015db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dbc:	4770      	bx	lr

08015dbe <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015dbe:	b580      	push	{r7, lr}
 8015dc0:	b084      	sub	sp, #16
 8015dc2:	af00      	add	r7, sp, #0
 8015dc4:	60f8      	str	r0, [r7, #12]
 8015dc6:	60b9      	str	r1, [r7, #8]
 8015dc8:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	68ba      	ldr	r2, [r7, #8]
 8015dce:	6879      	ldr	r1, [r7, #4]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f000 f81d 	bl	8015e10 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 8015dd6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015dda:	eeb0 0a67 	vmov.f32	s0, s15
 8015dde:	3710      	adds	r7, #16
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8015de4:	b590      	push	{r4, r7, lr}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	6039      	str	r1, [r7, #0]
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f000 f83a 	bl	8015e68 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8015df4:	687c      	ldr	r4, [r7, #4]
 8015df6:	6838      	ldr	r0, [r7, #0]
 8015df8:	f000 f82b 	bl	8015e52 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	4619      	mov	r1, r3
 8015e00:	4620      	mov	r0, r4
 8015e02:	f000 f83c 	bl	8015e7e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	4618      	mov	r0, r3
 8015e0a:	370c      	adds	r7, #12
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd90      	pop	{r4, r7, pc}

08015e10 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015e10:	b5b0      	push	{r4, r5, r7, lr}
 8015e12:	b084      	sub	sp, #16
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	60f8      	str	r0, [r7, #12]
 8015e18:	60b9      	str	r1, [r7, #8]
 8015e1a:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	681c      	ldr	r4, [r3, #0]
 8015e20:	68f8      	ldr	r0, [r7, #12]
 8015e22:	f000 f83b 	bl	8015e9c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 8015e26:	4602      	mov	r2, r0
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	fb03 f502 	mul.w	r5, r3, r2
 8015e2e:	68f8      	ldr	r0, [r7, #12]
 8015e30:	f000 f83f 	bl	8015eb2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 8015e34:	4602      	mov	r2, r0
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	fb02 f303 	mul.w	r3, r2, r3
 8015e3c:	442b      	add	r3, r5
 8015e3e:	009b      	lsls	r3, r3, #2
 8015e40:	4423      	add	r3, r4
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	ee07 3a90 	vmov	s15, r3
  }
 8015e48:	eeb0 0a67 	vmov.f32	s0, s15
 8015e4c:	3710      	adds	r7, #16
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bdb0      	pop	{r4, r5, r7, pc}

08015e52 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8015e52:	b480      	push	{r7}
 8015e54:	b083      	sub	sp, #12
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	370c      	adds	r7, #12
 8015e60:	46bd      	mov	sp, r7
 8015e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e66:	4770      	bx	lr

08015e68 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015e68:	b480      	push	{r7}
 8015e6a:	b083      	sub	sp, #12
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	4618      	mov	r0, r3
 8015e74:	370c      	adds	r7, #12
 8015e76:	46bd      	mov	sp, r7
 8015e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7c:	4770      	bx	lr

08015e7e <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015e7e:	b580      	push	{r7, lr}
 8015e80:	b082      	sub	sp, #8
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	6078      	str	r0, [r7, #4]
 8015e86:	6039      	str	r1, [r7, #0]
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	6839      	ldr	r1, [r7, #0]
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f000 f81b 	bl	8015ec8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	4618      	mov	r0, r3
 8015e96:	3708      	adds	r7, #8
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015ea4:	f7f0 ff9f 	bl	8006de6 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8015ea8:	4603      	mov	r3, r0
  }
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3708      	adds	r7, #8
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}

08015eb2 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8015eb2:	b580      	push	{r7, lr}
 8015eb4:	b082      	sub	sp, #8
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8015eba:	f7f0 ff8c 	bl	8006dd6 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015ebe:	4603      	mov	r3, r0
  }
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	3708      	adds	r7, #8
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b082      	sub	sp, #8
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	6039      	str	r1, [r7, #0]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f000 f805 	bl	8015ee6 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3708      	adds	r7, #8
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b082      	sub	sp, #8
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
 8015eee:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	6839      	ldr	r1, [r7, #0]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f000 f80a 	bl	8015f0e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	4618      	mov	r0, r3
 8015efe:	f000 f830 	bl	8015f62 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015f02:	bf00      	nop
  }
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	4618      	mov	r0, r3
 8015f08:	3708      	adds	r7, #8
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}

08015f0e <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8015f0e:	b590      	push	{r4, r7, lr}
 8015f10:	b083      	sub	sp, #12
 8015f12:	af00      	add	r7, sp, #0
 8015f14:	6078      	str	r0, [r7, #4]
 8015f16:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f000 f84a 	bl	8015fb2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f000 f81e 	bl	8015f62 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 8015f26:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	601a      	str	r2, [r3, #0]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	1d1c      	adds	r4, r3, #4
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	4618      	mov	r0, r3
 8015f34:	f000 f821 	bl	8015f7a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	4620      	mov	r0, r4
 8015f3e:	f7f0 ff25 	bl	8006d8c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	1d5c      	adds	r4, r3, #5
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f000 f824 	bl	8015f96 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	4619      	mov	r1, r3
 8015f52:	4620      	mov	r0, r4
 8015f54:	f7f0 ff00 	bl	8006d58 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	370c      	adds	r7, #12
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd90      	pop	{r4, r7, pc}

08015f62 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8015f62:	b480      	push	{r7}
 8015f64:	b083      	sub	sp, #12
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	6078      	str	r0, [r7, #4]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	370c      	adds	r7, #12
 8015f72:	46bd      	mov	sp, r7
 8015f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f78:	4770      	bx	lr

08015f7a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8015f7a:	b580      	push	{r7, lr}
 8015f7c:	b082      	sub	sp, #8
 8015f7e:	af00      	add	r7, sp, #0
 8015f80:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	689b      	ldr	r3, [r3, #8]
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7fd fcf8 	bl	801397c <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8015f8c:	4603      	mov	r3, r0
    }
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3708      	adds	r7, #8
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}

08015f96 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8015f96:	b580      	push	{r7, lr}
 8015f98:	b082      	sub	sp, #8
 8015f9a:	af00      	add	r7, sp, #0
 8015f9c:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	689b      	ldr	r3, [r3, #8]
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7fc ffa6 	bl	8012ef4 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8015fa8:	4603      	mov	r3, r0
    }
 8015faa:	4618      	mov	r0, r3
 8015fac:	3708      	adds	r7, #8
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}

08015fb2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015fb2:	b480      	push	{r7}
 8015fb4:	b083      	sub	sp, #12
 8015fb6:	af00      	add	r7, sp, #0
 8015fb8:	6078      	str	r0, [r7, #4]
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	370c      	adds	r7, #12
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc6:	4770      	bx	lr

08015fc8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8015fc8:	b590      	push	{r4, r7, lr}
 8015fca:	b083      	sub	sp, #12
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
 8015fd0:	6039      	str	r1, [r7, #0]
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d141      	bne.n	801605c <_Z41__static_initialization_and_destruction_0ii+0x94>
 8015fd8:	683b      	ldr	r3, [r7, #0]
 8015fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	d13c      	bne.n	801605c <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 8015fe2:	4820      	ldr	r0, [pc, #128]	; (8016064 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015fe4:	f7ee fa1b 	bl	800441e <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 8015fe8:	481f      	ldr	r0, [pc, #124]	; (8016068 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015fea:	f7ee fa23 	bl	8004434 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 8015fee:	481e      	ldr	r0, [pc, #120]	; (8016068 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8015ff0:	f7ee fa2b 	bl	800444a <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 8015ff4:	4621      	mov	r1, r4
 8015ff6:	481b      	ldr	r0, [pc, #108]	; (8016064 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8015ff8:	f7ee fa32 	bl	8004460 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 8015ffc:	481b      	ldr	r0, [pc, #108]	; (801606c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8015ffe:	f7ea fff1 	bl	8000fe4 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 8016002:	481b      	ldr	r0, [pc, #108]	; (8016070 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8016004:	f7ee fa51 	bl	80044aa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 8016008:	481a      	ldr	r0, [pc, #104]	; (8016074 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801600a:	f7ee fa4e 	bl	80044aa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 801600e:	481a      	ldr	r0, [pc, #104]	; (8016078 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8016010:	f7ee fa4b 	bl	80044aa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 8016014:	4819      	ldr	r0, [pc, #100]	; (801607c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8016016:	f7ee fa48 	bl	80044aa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 801601a:	4819      	ldr	r0, [pc, #100]	; (8016080 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 801601c:	f7ee fa54 	bl	80044c8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 8016020:	4818      	ldr	r0, [pc, #96]	; (8016084 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8016022:	f7ee fa51 	bl	80044c8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 8016026:	4818      	ldr	r0, [pc, #96]	; (8016088 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8016028:	f7ee fa4e 	bl	80044c8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 801602c:	4817      	ldr	r0, [pc, #92]	; (801608c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 801602e:	f7ee fa4b 	bl	80044c8 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 8016032:	4817      	ldr	r0, [pc, #92]	; (8016090 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8016034:	f7ee fa57 	bl	80044e6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 8016038:	4816      	ldr	r0, [pc, #88]	; (8016094 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 801603a:	f7ee fa63 	bl	8004504 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 801603e:	4816      	ldr	r0, [pc, #88]	; (8016098 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8016040:	f7ee fa51 	bl	80044e6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 8016044:	4815      	ldr	r0, [pc, #84]	; (801609c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8016046:	f7ee fa30 	bl	80044aa <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 801604a:	4815      	ldr	r0, [pc, #84]	; (80160a0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 801604c:	f7ee fa4b 	bl	80044e6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8016050:	4814      	ldr	r0, [pc, #80]	; (80160a4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8016052:	f7ee fa48 	bl	80044e6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 8016056:	4814      	ldr	r0, [pc, #80]	; (80160a8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8016058:	f7ee fa45 	bl	80044e6 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 801605c:	bf00      	nop
 801605e:	370c      	adds	r7, #12
 8016060:	46bd      	mov	sp, r7
 8016062:	bd90      	pop	{r4, r7, pc}
 8016064:	2000026c 	.word	0x2000026c
 8016068:	200007ec 	.word	0x200007ec
 801606c:	20000270 	.word	0x20000270
 8016070:	200005b8 	.word	0x200005b8
 8016074:	200005dc 	.word	0x200005dc
 8016078:	20000600 	.word	0x20000600
 801607c:	20000624 	.word	0x20000624
 8016080:	20000648 	.word	0x20000648
 8016084:	2000064c 	.word	0x2000064c
 8016088:	20000650 	.word	0x20000650
 801608c:	20000654 	.word	0x20000654
 8016090:	20000658 	.word	0x20000658
 8016094:	20000664 	.word	0x20000664
 8016098:	20000670 	.word	0x20000670
 801609c:	2000067c 	.word	0x2000067c
 80160a0:	200006a0 	.word	0x200006a0
 80160a4:	200006ac 	.word	0x200006ac
 80160a8:	200006b8 	.word	0x200006b8

080160ac <_GLOBAL__sub_I_hi2c1>:
 80160ac:	b580      	push	{r7, lr}
 80160ae:	af00      	add	r7, sp, #0
 80160b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80160b4:	2001      	movs	r0, #1
 80160b6:	f7ff ff87 	bl	8015fc8 <_Z41__static_initialization_and_destruction_0ii>
 80160ba:	bd80      	pop	{r7, pc}

080160bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80160c2:	2300      	movs	r3, #0
 80160c4:	607b      	str	r3, [r7, #4]
 80160c6:	4b10      	ldr	r3, [pc, #64]	; (8016108 <HAL_MspInit+0x4c>)
 80160c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160ca:	4a0f      	ldr	r2, [pc, #60]	; (8016108 <HAL_MspInit+0x4c>)
 80160cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80160d0:	6453      	str	r3, [r2, #68]	; 0x44
 80160d2:	4b0d      	ldr	r3, [pc, #52]	; (8016108 <HAL_MspInit+0x4c>)
 80160d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80160da:	607b      	str	r3, [r7, #4]
 80160dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80160de:	2300      	movs	r3, #0
 80160e0:	603b      	str	r3, [r7, #0]
 80160e2:	4b09      	ldr	r3, [pc, #36]	; (8016108 <HAL_MspInit+0x4c>)
 80160e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160e6:	4a08      	ldr	r2, [pc, #32]	; (8016108 <HAL_MspInit+0x4c>)
 80160e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80160ec:	6413      	str	r3, [r2, #64]	; 0x40
 80160ee:	4b06      	ldr	r3, [pc, #24]	; (8016108 <HAL_MspInit+0x4c>)
 80160f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80160f6:	603b      	str	r3, [r7, #0]
 80160f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80160fa:	2007      	movs	r0, #7
 80160fc:	f000 fd14 	bl	8016b28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016100:	bf00      	nop
 8016102:	3708      	adds	r7, #8
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}
 8016108:	40023800 	.word	0x40023800

0801610c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b08c      	sub	sp, #48	; 0x30
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016114:	f107 031c 	add.w	r3, r7, #28
 8016118:	2200      	movs	r2, #0
 801611a:	601a      	str	r2, [r3, #0]
 801611c:	605a      	str	r2, [r3, #4]
 801611e:	609a      	str	r2, [r3, #8]
 8016120:	60da      	str	r2, [r3, #12]
 8016122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	4a52      	ldr	r2, [pc, #328]	; (8016274 <HAL_I2C_MspInit+0x168>)
 801612a:	4293      	cmp	r3, r2
 801612c:	d13d      	bne.n	80161aa <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801612e:	2300      	movs	r3, #0
 8016130:	61bb      	str	r3, [r7, #24]
 8016132:	4b51      	ldr	r3, [pc, #324]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 8016134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016136:	4a50      	ldr	r2, [pc, #320]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 8016138:	f043 0302 	orr.w	r3, r3, #2
 801613c:	6313      	str	r3, [r2, #48]	; 0x30
 801613e:	4b4e      	ldr	r3, [pc, #312]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 8016140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016142:	f003 0302 	and.w	r3, r3, #2
 8016146:	61bb      	str	r3, [r7, #24]
 8016148:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801614a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801614e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8016150:	2312      	movs	r3, #18
 8016152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016154:	2300      	movs	r3, #0
 8016156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016158:	2303      	movs	r3, #3
 801615a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801615c:	2304      	movs	r3, #4
 801615e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016160:	f107 031c 	add.w	r3, r7, #28
 8016164:	4619      	mov	r1, r3
 8016166:	4845      	ldr	r0, [pc, #276]	; (801627c <HAL_I2C_MspInit+0x170>)
 8016168:	f001 f930 	bl	80173cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801616c:	2300      	movs	r3, #0
 801616e:	617b      	str	r3, [r7, #20]
 8016170:	4b41      	ldr	r3, [pc, #260]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 8016172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016174:	4a40      	ldr	r2, [pc, #256]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 8016176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801617a:	6413      	str	r3, [r2, #64]	; 0x40
 801617c:	4b3e      	ldr	r3, [pc, #248]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 801617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016184:	617b      	str	r3, [r7, #20]
 8016186:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8016188:	2200      	movs	r2, #0
 801618a:	2100      	movs	r1, #0
 801618c:	201f      	movs	r0, #31
 801618e:	f000 fcd6 	bl	8016b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8016192:	201f      	movs	r0, #31
 8016194:	f000 fcef 	bl	8016b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8016198:	2200      	movs	r2, #0
 801619a:	2100      	movs	r1, #0
 801619c:	2020      	movs	r0, #32
 801619e:	f000 fcce 	bl	8016b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80161a2:	2020      	movs	r0, #32
 80161a4:	f000 fce7 	bl	8016b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80161a8:	e060      	b.n	801626c <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	4a34      	ldr	r2, [pc, #208]	; (8016280 <HAL_I2C_MspInit+0x174>)
 80161b0:	4293      	cmp	r3, r2
 80161b2:	d15b      	bne.n	801626c <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80161b4:	2300      	movs	r3, #0
 80161b6:	613b      	str	r3, [r7, #16]
 80161b8:	4b2f      	ldr	r3, [pc, #188]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 80161ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161bc:	4a2e      	ldr	r2, [pc, #184]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 80161be:	f043 0304 	orr.w	r3, r3, #4
 80161c2:	6313      	str	r3, [r2, #48]	; 0x30
 80161c4:	4b2c      	ldr	r3, [pc, #176]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 80161c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161c8:	f003 0304 	and.w	r3, r3, #4
 80161cc:	613b      	str	r3, [r7, #16]
 80161ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80161d0:	2300      	movs	r3, #0
 80161d2:	60fb      	str	r3, [r7, #12]
 80161d4:	4b28      	ldr	r3, [pc, #160]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 80161d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161d8:	4a27      	ldr	r2, [pc, #156]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 80161da:	f043 0301 	orr.w	r3, r3, #1
 80161de:	6313      	str	r3, [r2, #48]	; 0x30
 80161e0:	4b25      	ldr	r3, [pc, #148]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 80161e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161e4:	f003 0301 	and.w	r3, r3, #1
 80161e8:	60fb      	str	r3, [r7, #12]
 80161ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80161ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80161f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80161f2:	2312      	movs	r3, #18
 80161f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80161f6:	2300      	movs	r3, #0
 80161f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80161fa:	2303      	movs	r3, #3
 80161fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80161fe:	2304      	movs	r3, #4
 8016200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016202:	f107 031c 	add.w	r3, r7, #28
 8016206:	4619      	mov	r1, r3
 8016208:	481e      	ldr	r0, [pc, #120]	; (8016284 <HAL_I2C_MspInit+0x178>)
 801620a:	f001 f8df 	bl	80173cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 801620e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8016214:	2312      	movs	r3, #18
 8016216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016218:	2300      	movs	r3, #0
 801621a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801621c:	2303      	movs	r3, #3
 801621e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8016220:	2304      	movs	r3, #4
 8016222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016224:	f107 031c 	add.w	r3, r7, #28
 8016228:	4619      	mov	r1, r3
 801622a:	4817      	ldr	r0, [pc, #92]	; (8016288 <HAL_I2C_MspInit+0x17c>)
 801622c:	f001 f8ce 	bl	80173cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8016230:	2300      	movs	r3, #0
 8016232:	60bb      	str	r3, [r7, #8]
 8016234:	4b10      	ldr	r3, [pc, #64]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 8016236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016238:	4a0f      	ldr	r2, [pc, #60]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 801623a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801623e:	6413      	str	r3, [r2, #64]	; 0x40
 8016240:	4b0d      	ldr	r3, [pc, #52]	; (8016278 <HAL_I2C_MspInit+0x16c>)
 8016242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016248:	60bb      	str	r3, [r7, #8]
 801624a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 801624c:	2200      	movs	r2, #0
 801624e:	2100      	movs	r1, #0
 8016250:	2048      	movs	r0, #72	; 0x48
 8016252:	f000 fc74 	bl	8016b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8016256:	2048      	movs	r0, #72	; 0x48
 8016258:	f000 fc8d 	bl	8016b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 801625c:	2200      	movs	r2, #0
 801625e:	2100      	movs	r1, #0
 8016260:	2049      	movs	r0, #73	; 0x49
 8016262:	f000 fc6c 	bl	8016b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8016266:	2049      	movs	r0, #73	; 0x49
 8016268:	f000 fc85 	bl	8016b76 <HAL_NVIC_EnableIRQ>
}
 801626c:	bf00      	nop
 801626e:	3730      	adds	r7, #48	; 0x30
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}
 8016274:	40005400 	.word	0x40005400
 8016278:	40023800 	.word	0x40023800
 801627c:	40020400 	.word	0x40020400
 8016280:	40005c00 	.word	0x40005c00
 8016284:	40020800 	.word	0x40020800
 8016288:	40020000 	.word	0x40020000

0801628c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b086      	sub	sp, #24
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	4a26      	ldr	r2, [pc, #152]	; (8016334 <HAL_TIM_Base_MspInit+0xa8>)
 801629a:	4293      	cmp	r3, r2
 801629c:	d10e      	bne.n	80162bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801629e:	2300      	movs	r3, #0
 80162a0:	617b      	str	r3, [r7, #20]
 80162a2:	4b25      	ldr	r3, [pc, #148]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 80162a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162a6:	4a24      	ldr	r2, [pc, #144]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 80162a8:	f043 0304 	orr.w	r3, r3, #4
 80162ac:	6413      	str	r3, [r2, #64]	; 0x40
 80162ae:	4b22      	ldr	r3, [pc, #136]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 80162b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162b2:	f003 0304 	and.w	r3, r3, #4
 80162b6:	617b      	str	r3, [r7, #20]
 80162b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80162ba:	e036      	b.n	801632a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM10)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	4a1e      	ldr	r2, [pc, #120]	; (801633c <HAL_TIM_Base_MspInit+0xb0>)
 80162c2:	4293      	cmp	r3, r2
 80162c4:	d116      	bne.n	80162f4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80162c6:	2300      	movs	r3, #0
 80162c8:	613b      	str	r3, [r7, #16]
 80162ca:	4b1b      	ldr	r3, [pc, #108]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 80162cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162ce:	4a1a      	ldr	r2, [pc, #104]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 80162d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80162d4:	6453      	str	r3, [r2, #68]	; 0x44
 80162d6:	4b18      	ldr	r3, [pc, #96]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 80162d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80162de:	613b      	str	r3, [r7, #16]
 80162e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80162e2:	2200      	movs	r2, #0
 80162e4:	2100      	movs	r1, #0
 80162e6:	2019      	movs	r0, #25
 80162e8:	f000 fc29 	bl	8016b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80162ec:	2019      	movs	r0, #25
 80162ee:	f000 fc42 	bl	8016b76 <HAL_NVIC_EnableIRQ>
}
 80162f2:	e01a      	b.n	801632a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM11)
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	4a11      	ldr	r2, [pc, #68]	; (8016340 <HAL_TIM_Base_MspInit+0xb4>)
 80162fa:	4293      	cmp	r3, r2
 80162fc:	d115      	bne.n	801632a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80162fe:	2300      	movs	r3, #0
 8016300:	60fb      	str	r3, [r7, #12]
 8016302:	4b0d      	ldr	r3, [pc, #52]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 8016304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016306:	4a0c      	ldr	r2, [pc, #48]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 8016308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801630c:	6453      	str	r3, [r2, #68]	; 0x44
 801630e:	4b0a      	ldr	r3, [pc, #40]	; (8016338 <HAL_TIM_Base_MspInit+0xac>)
 8016310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016316:	60fb      	str	r3, [r7, #12]
 8016318:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 801631a:	2200      	movs	r2, #0
 801631c:	2100      	movs	r1, #0
 801631e:	201a      	movs	r0, #26
 8016320:	f000 fc0d 	bl	8016b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8016324:	201a      	movs	r0, #26
 8016326:	f000 fc26 	bl	8016b76 <HAL_NVIC_EnableIRQ>
}
 801632a:	bf00      	nop
 801632c:	3718      	adds	r7, #24
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}
 8016332:	bf00      	nop
 8016334:	40000800 	.word	0x40000800
 8016338:	40023800 	.word	0x40023800
 801633c:	40014400 	.word	0x40014400
 8016340:	40014800 	.word	0x40014800

08016344 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b088      	sub	sp, #32
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801634c:	f107 030c 	add.w	r3, r7, #12
 8016350:	2200      	movs	r2, #0
 8016352:	601a      	str	r2, [r3, #0]
 8016354:	605a      	str	r2, [r3, #4]
 8016356:	609a      	str	r2, [r3, #8]
 8016358:	60da      	str	r2, [r3, #12]
 801635a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	4a12      	ldr	r2, [pc, #72]	; (80163ac <HAL_TIM_MspPostInit+0x68>)
 8016362:	4293      	cmp	r3, r2
 8016364:	d11d      	bne.n	80163a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016366:	2300      	movs	r3, #0
 8016368:	60bb      	str	r3, [r7, #8]
 801636a:	4b11      	ldr	r3, [pc, #68]	; (80163b0 <HAL_TIM_MspPostInit+0x6c>)
 801636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801636e:	4a10      	ldr	r2, [pc, #64]	; (80163b0 <HAL_TIM_MspPostInit+0x6c>)
 8016370:	f043 0302 	orr.w	r3, r3, #2
 8016374:	6313      	str	r3, [r2, #48]	; 0x30
 8016376:	4b0e      	ldr	r3, [pc, #56]	; (80163b0 <HAL_TIM_MspPostInit+0x6c>)
 8016378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801637a:	f003 0302 	and.w	r3, r3, #2
 801637e:	60bb      	str	r3, [r7, #8]
 8016380:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8016382:	2340      	movs	r3, #64	; 0x40
 8016384:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016386:	2302      	movs	r3, #2
 8016388:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801638a:	2300      	movs	r3, #0
 801638c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801638e:	2300      	movs	r3, #0
 8016390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8016392:	2302      	movs	r3, #2
 8016394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8016396:	f107 030c 	add.w	r3, r7, #12
 801639a:	4619      	mov	r1, r3
 801639c:	4805      	ldr	r0, [pc, #20]	; (80163b4 <HAL_TIM_MspPostInit+0x70>)
 801639e:	f001 f815 	bl	80173cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80163a2:	bf00      	nop
 80163a4:	3720      	adds	r7, #32
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}
 80163aa:	bf00      	nop
 80163ac:	40000800 	.word	0x40000800
 80163b0:	40023800 	.word	0x40023800
 80163b4:	40020400 	.word	0x40020400

080163b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b08a      	sub	sp, #40	; 0x28
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80163c0:	f107 0314 	add.w	r3, r7, #20
 80163c4:	2200      	movs	r2, #0
 80163c6:	601a      	str	r2, [r3, #0]
 80163c8:	605a      	str	r2, [r3, #4]
 80163ca:	609a      	str	r2, [r3, #8]
 80163cc:	60da      	str	r2, [r3, #12]
 80163ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	4a4b      	ldr	r2, [pc, #300]	; (8016504 <HAL_UART_MspInit+0x14c>)
 80163d6:	4293      	cmp	r3, r2
 80163d8:	f040 8090 	bne.w	80164fc <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80163dc:	2300      	movs	r3, #0
 80163de:	613b      	str	r3, [r7, #16]
 80163e0:	4b49      	ldr	r3, [pc, #292]	; (8016508 <HAL_UART_MspInit+0x150>)
 80163e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163e4:	4a48      	ldr	r2, [pc, #288]	; (8016508 <HAL_UART_MspInit+0x150>)
 80163e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80163ea:	6413      	str	r3, [r2, #64]	; 0x40
 80163ec:	4b46      	ldr	r3, [pc, #280]	; (8016508 <HAL_UART_MspInit+0x150>)
 80163ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80163f4:	613b      	str	r3, [r7, #16]
 80163f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80163f8:	2300      	movs	r3, #0
 80163fa:	60fb      	str	r3, [r7, #12]
 80163fc:	4b42      	ldr	r3, [pc, #264]	; (8016508 <HAL_UART_MspInit+0x150>)
 80163fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016400:	4a41      	ldr	r2, [pc, #260]	; (8016508 <HAL_UART_MspInit+0x150>)
 8016402:	f043 0301 	orr.w	r3, r3, #1
 8016406:	6313      	str	r3, [r2, #48]	; 0x30
 8016408:	4b3f      	ldr	r3, [pc, #252]	; (8016508 <HAL_UART_MspInit+0x150>)
 801640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801640c:	f003 0301 	and.w	r3, r3, #1
 8016410:	60fb      	str	r3, [r7, #12]
 8016412:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8016414:	230c      	movs	r3, #12
 8016416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016418:	2302      	movs	r3, #2
 801641a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801641c:	2300      	movs	r3, #0
 801641e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016420:	2303      	movs	r3, #3
 8016422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8016424:	2307      	movs	r3, #7
 8016426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016428:	f107 0314 	add.w	r3, r7, #20
 801642c:	4619      	mov	r1, r3
 801642e:	4837      	ldr	r0, [pc, #220]	; (801650c <HAL_UART_MspInit+0x154>)
 8016430:	f000 ffcc 	bl	80173cc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8016434:	4b36      	ldr	r3, [pc, #216]	; (8016510 <HAL_UART_MspInit+0x158>)
 8016436:	4a37      	ldr	r2, [pc, #220]	; (8016514 <HAL_UART_MspInit+0x15c>)
 8016438:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 801643a:	4b35      	ldr	r3, [pc, #212]	; (8016510 <HAL_UART_MspInit+0x158>)
 801643c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8016440:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8016442:	4b33      	ldr	r3, [pc, #204]	; (8016510 <HAL_UART_MspInit+0x158>)
 8016444:	2200      	movs	r2, #0
 8016446:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016448:	4b31      	ldr	r3, [pc, #196]	; (8016510 <HAL_UART_MspInit+0x158>)
 801644a:	2200      	movs	r2, #0
 801644c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 801644e:	4b30      	ldr	r3, [pc, #192]	; (8016510 <HAL_UART_MspInit+0x158>)
 8016450:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016454:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8016456:	4b2e      	ldr	r3, [pc, #184]	; (8016510 <HAL_UART_MspInit+0x158>)
 8016458:	2200      	movs	r2, #0
 801645a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801645c:	4b2c      	ldr	r3, [pc, #176]	; (8016510 <HAL_UART_MspInit+0x158>)
 801645e:	2200      	movs	r2, #0
 8016460:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8016462:	4b2b      	ldr	r3, [pc, #172]	; (8016510 <HAL_UART_MspInit+0x158>)
 8016464:	2200      	movs	r2, #0
 8016466:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8016468:	4b29      	ldr	r3, [pc, #164]	; (8016510 <HAL_UART_MspInit+0x158>)
 801646a:	2200      	movs	r2, #0
 801646c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801646e:	4b28      	ldr	r3, [pc, #160]	; (8016510 <HAL_UART_MspInit+0x158>)
 8016470:	2200      	movs	r2, #0
 8016472:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8016474:	4826      	ldr	r0, [pc, #152]	; (8016510 <HAL_UART_MspInit+0x158>)
 8016476:	f000 fb99 	bl	8016bac <HAL_DMA_Init>
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	d001      	beq.n	8016484 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8016480:	f7ed ffc8 	bl	8004414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	4a22      	ldr	r2, [pc, #136]	; (8016510 <HAL_UART_MspInit+0x158>)
 8016488:	639a      	str	r2, [r3, #56]	; 0x38
 801648a:	4a21      	ldr	r2, [pc, #132]	; (8016510 <HAL_UART_MspInit+0x158>)
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8016490:	4b21      	ldr	r3, [pc, #132]	; (8016518 <HAL_UART_MspInit+0x160>)
 8016492:	4a22      	ldr	r2, [pc, #136]	; (801651c <HAL_UART_MspInit+0x164>)
 8016494:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8016496:	4b20      	ldr	r3, [pc, #128]	; (8016518 <HAL_UART_MspInit+0x160>)
 8016498:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801649c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801649e:	4b1e      	ldr	r3, [pc, #120]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164a0:	2240      	movs	r2, #64	; 0x40
 80164a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80164a4:	4b1c      	ldr	r3, [pc, #112]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164a6:	2200      	movs	r2, #0
 80164a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80164aa:	4b1b      	ldr	r3, [pc, #108]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80164b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80164b2:	4b19      	ldr	r3, [pc, #100]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164b4:	2200      	movs	r2, #0
 80164b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80164b8:	4b17      	ldr	r3, [pc, #92]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164ba:	2200      	movs	r2, #0
 80164bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80164be:	4b16      	ldr	r3, [pc, #88]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164c0:	2200      	movs	r2, #0
 80164c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80164c4:	4b14      	ldr	r3, [pc, #80]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164c6:	2200      	movs	r2, #0
 80164c8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80164ca:	4b13      	ldr	r3, [pc, #76]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164cc:	2200      	movs	r2, #0
 80164ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80164d0:	4811      	ldr	r0, [pc, #68]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164d2:	f000 fb6b 	bl	8016bac <HAL_DMA_Init>
 80164d6:	4603      	mov	r3, r0
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d001      	beq.n	80164e0 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80164dc:	f7ed ff9a 	bl	8004414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	4a0d      	ldr	r2, [pc, #52]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164e4:	635a      	str	r2, [r3, #52]	; 0x34
 80164e6:	4a0c      	ldr	r2, [pc, #48]	; (8016518 <HAL_UART_MspInit+0x160>)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80164ec:	2200      	movs	r2, #0
 80164ee:	2100      	movs	r1, #0
 80164f0:	2026      	movs	r0, #38	; 0x26
 80164f2:	f000 fb24 	bl	8016b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80164f6:	2026      	movs	r0, #38	; 0x26
 80164f8:	f000 fb3d 	bl	8016b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80164fc:	bf00      	nop
 80164fe:	3728      	adds	r7, #40	; 0x28
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}
 8016504:	40004400 	.word	0x40004400
 8016508:	40023800 	.word	0x40023800
 801650c:	40020000 	.word	0x40020000
 8016510:	20000438 	.word	0x20000438
 8016514:	400260b8 	.word	0x400260b8
 8016518:	20000498 	.word	0x20000498
 801651c:	400260a0 	.word	0x400260a0

08016520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016520:	b480      	push	{r7}
 8016522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016524:	e7fe      	b.n	8016524 <NMI_Handler+0x4>

08016526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016526:	b480      	push	{r7}
 8016528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801652a:	e7fe      	b.n	801652a <HardFault_Handler+0x4>

0801652c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801652c:	b480      	push	{r7}
 801652e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016530:	e7fe      	b.n	8016530 <MemManage_Handler+0x4>

08016532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016532:	b480      	push	{r7}
 8016534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016536:	e7fe      	b.n	8016536 <BusFault_Handler+0x4>

08016538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016538:	b480      	push	{r7}
 801653a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801653c:	e7fe      	b.n	801653c <UsageFault_Handler+0x4>

0801653e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801653e:	b480      	push	{r7}
 8016540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016542:	bf00      	nop
 8016544:	46bd      	mov	sp, r7
 8016546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654a:	4770      	bx	lr

0801654c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801654c:	b480      	push	{r7}
 801654e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016550:	bf00      	nop
 8016552:	46bd      	mov	sp, r7
 8016554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016558:	4770      	bx	lr

0801655a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801655a:	b480      	push	{r7}
 801655c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801655e:	bf00      	nop
 8016560:	46bd      	mov	sp, r7
 8016562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016566:	4770      	bx	lr

08016568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801656c:	f000 f9c8 	bl	8016900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016570:	bf00      	nop
 8016572:	bd80      	pop	{r7, pc}

08016574 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8016578:	2004      	movs	r0, #4
 801657a:	f001 f8dd 	bl	8017738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 801657e:	bf00      	nop
 8016580:	bd80      	pop	{r7, pc}
	...

08016584 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8016588:	4802      	ldr	r0, [pc, #8]	; (8016594 <DMA1_Stream6_IRQHandler+0x10>)
 801658a:	f000 fca7 	bl	8016edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 801658e:	bf00      	nop
 8016590:	bd80      	pop	{r7, pc}
 8016592:	bf00      	nop
 8016594:	20000498 	.word	0x20000498

08016598 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8016598:	b580      	push	{r7, lr}
 801659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 801659c:	4802      	ldr	r0, [pc, #8]	; (80165a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801659e:	f004 fdef 	bl	801b180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80165a2:	bf00      	nop
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	20000364 	.word	0x20000364

080165ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80165b0:	4802      	ldr	r0, [pc, #8]	; (80165bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80165b2:	f004 fde5 	bl	801b180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80165b6:	bf00      	nop
 80165b8:	bd80      	pop	{r7, pc}
 80165ba:	bf00      	nop
 80165bc:	200003ac 	.word	0x200003ac

080165c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80165c4:	4802      	ldr	r0, [pc, #8]	; (80165d0 <I2C1_EV_IRQHandler+0x10>)
 80165c6:	f001 fef7 	bl	80183b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80165ca:	bf00      	nop
 80165cc:	bd80      	pop	{r7, pc}
 80165ce:	bf00      	nop
 80165d0:	20000274 	.word	0x20000274

080165d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80165d8:	4802      	ldr	r0, [pc, #8]	; (80165e4 <I2C1_ER_IRQHandler+0x10>)
 80165da:	f002 f85e 	bl	801869a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80165de:	bf00      	nop
 80165e0:	bd80      	pop	{r7, pc}
 80165e2:	bf00      	nop
 80165e4:	20000274 	.word	0x20000274

080165e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80165ec:	4802      	ldr	r0, [pc, #8]	; (80165f8 <USART2_IRQHandler+0x10>)
 80165ee:	f005 fd13 	bl	801c018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80165f2:	bf00      	nop
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	200003f4 	.word	0x200003f4

080165fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8016600:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8016604:	f001 f898 	bl	8017738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8016608:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801660c:	f001 f894 	bl	8017738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8016610:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8016614:	f001 f890 	bl	8017738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8016618:	bf00      	nop
 801661a:	bd80      	pop	{r7, pc}

0801661c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8016620:	4802      	ldr	r0, [pc, #8]	; (801662c <DMA1_Stream7_IRQHandler+0x10>)
 8016622:	f000 fc5b 	bl	8016edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8016626:	bf00      	nop
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	20000438 	.word	0x20000438

08016630 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8016634:	4802      	ldr	r0, [pc, #8]	; (8016640 <I2C3_EV_IRQHandler+0x10>)
 8016636:	f001 febf 	bl	80183b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 801663a:	bf00      	nop
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	200002c8 	.word	0x200002c8

08016644 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8016648:	4802      	ldr	r0, [pc, #8]	; (8016654 <I2C3_ER_IRQHandler+0x10>)
 801664a:	f002 f826 	bl	801869a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 801664e:	bf00      	nop
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	200002c8 	.word	0x200002c8

08016658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8016658:	b480      	push	{r7}
 801665a:	af00      	add	r7, sp, #0
	return 1;
 801665c:	2301      	movs	r3, #1
}
 801665e:	4618      	mov	r0, r3
 8016660:	46bd      	mov	sp, r7
 8016662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016666:	4770      	bx	lr

08016668 <_kill>:

int _kill(int pid, int sig)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b082      	sub	sp, #8
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8016672:	f007 fd61 	bl	801e138 <__errno>
 8016676:	4603      	mov	r3, r0
 8016678:	2216      	movs	r2, #22
 801667a:	601a      	str	r2, [r3, #0]
	return -1;
 801667c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016680:	4618      	mov	r0, r3
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}

08016688 <_exit>:

void _exit (int status)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8016690:	f04f 31ff 	mov.w	r1, #4294967295
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f7ff ffe7 	bl	8016668 <_kill>
	while (1) {}		/* Make sure we hang here */
 801669a:	e7fe      	b.n	801669a <_exit+0x12>

0801669c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b086      	sub	sp, #24
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	60f8      	str	r0, [r7, #12]
 80166a4:	60b9      	str	r1, [r7, #8]
 80166a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80166a8:	2300      	movs	r3, #0
 80166aa:	617b      	str	r3, [r7, #20]
 80166ac:	e00a      	b.n	80166c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80166ae:	f3af 8000 	nop.w
 80166b2:	4601      	mov	r1, r0
 80166b4:	68bb      	ldr	r3, [r7, #8]
 80166b6:	1c5a      	adds	r2, r3, #1
 80166b8:	60ba      	str	r2, [r7, #8]
 80166ba:	b2ca      	uxtb	r2, r1
 80166bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80166be:	697b      	ldr	r3, [r7, #20]
 80166c0:	3301      	adds	r3, #1
 80166c2:	617b      	str	r3, [r7, #20]
 80166c4:	697a      	ldr	r2, [r7, #20]
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	429a      	cmp	r2, r3
 80166ca:	dbf0      	blt.n	80166ae <_read+0x12>
	}

return len;
 80166cc:	687b      	ldr	r3, [r7, #4]
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3718      	adds	r7, #24
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}

080166d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80166d6:	b580      	push	{r7, lr}
 80166d8:	b086      	sub	sp, #24
 80166da:	af00      	add	r7, sp, #0
 80166dc:	60f8      	str	r0, [r7, #12]
 80166de:	60b9      	str	r1, [r7, #8]
 80166e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80166e2:	2300      	movs	r3, #0
 80166e4:	617b      	str	r3, [r7, #20]
 80166e6:	e009      	b.n	80166fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	1c5a      	adds	r2, r3, #1
 80166ec:	60ba      	str	r2, [r7, #8]
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	4618      	mov	r0, r3
 80166f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	3301      	adds	r3, #1
 80166fa:	617b      	str	r3, [r7, #20]
 80166fc:	697a      	ldr	r2, [r7, #20]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	429a      	cmp	r2, r3
 8016702:	dbf1      	blt.n	80166e8 <_write+0x12>
	}
	return len;
 8016704:	687b      	ldr	r3, [r7, #4]
}
 8016706:	4618      	mov	r0, r3
 8016708:	3718      	adds	r7, #24
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}

0801670e <_close>:

int _close(int file)
{
 801670e:	b480      	push	{r7}
 8016710:	b083      	sub	sp, #12
 8016712:	af00      	add	r7, sp, #0
 8016714:	6078      	str	r0, [r7, #4]
	return -1;
 8016716:	f04f 33ff 	mov.w	r3, #4294967295
}
 801671a:	4618      	mov	r0, r3
 801671c:	370c      	adds	r7, #12
 801671e:	46bd      	mov	sp, r7
 8016720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016724:	4770      	bx	lr

08016726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016726:	b480      	push	{r7}
 8016728:	b083      	sub	sp, #12
 801672a:	af00      	add	r7, sp, #0
 801672c:	6078      	str	r0, [r7, #4]
 801672e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016736:	605a      	str	r2, [r3, #4]
	return 0;
 8016738:	2300      	movs	r3, #0
}
 801673a:	4618      	mov	r0, r3
 801673c:	370c      	adds	r7, #12
 801673e:	46bd      	mov	sp, r7
 8016740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016744:	4770      	bx	lr

08016746 <_isatty>:

int _isatty(int file)
{
 8016746:	b480      	push	{r7}
 8016748:	b083      	sub	sp, #12
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
	return 1;
 801674e:	2301      	movs	r3, #1
}
 8016750:	4618      	mov	r0, r3
 8016752:	370c      	adds	r7, #12
 8016754:	46bd      	mov	sp, r7
 8016756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675a:	4770      	bx	lr

0801675c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801675c:	b480      	push	{r7}
 801675e:	b085      	sub	sp, #20
 8016760:	af00      	add	r7, sp, #0
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	607a      	str	r2, [r7, #4]
	return 0;
 8016768:	2300      	movs	r3, #0
}
 801676a:	4618      	mov	r0, r3
 801676c:	3714      	adds	r7, #20
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr
	...

08016778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b086      	sub	sp, #24
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8016780:	4a14      	ldr	r2, [pc, #80]	; (80167d4 <_sbrk+0x5c>)
 8016782:	4b15      	ldr	r3, [pc, #84]	; (80167d8 <_sbrk+0x60>)
 8016784:	1ad3      	subs	r3, r2, r3
 8016786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801678c:	4b13      	ldr	r3, [pc, #76]	; (80167dc <_sbrk+0x64>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d102      	bne.n	801679a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016794:	4b11      	ldr	r3, [pc, #68]	; (80167dc <_sbrk+0x64>)
 8016796:	4a12      	ldr	r2, [pc, #72]	; (80167e0 <_sbrk+0x68>)
 8016798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801679a:	4b10      	ldr	r3, [pc, #64]	; (80167dc <_sbrk+0x64>)
 801679c:	681a      	ldr	r2, [r3, #0]
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	4413      	add	r3, r2
 80167a2:	693a      	ldr	r2, [r7, #16]
 80167a4:	429a      	cmp	r2, r3
 80167a6:	d207      	bcs.n	80167b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80167a8:	f007 fcc6 	bl	801e138 <__errno>
 80167ac:	4603      	mov	r3, r0
 80167ae:	220c      	movs	r2, #12
 80167b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80167b2:	f04f 33ff 	mov.w	r3, #4294967295
 80167b6:	e009      	b.n	80167cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80167b8:	4b08      	ldr	r3, [pc, #32]	; (80167dc <_sbrk+0x64>)
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80167be:	4b07      	ldr	r3, [pc, #28]	; (80167dc <_sbrk+0x64>)
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	4413      	add	r3, r2
 80167c6:	4a05      	ldr	r2, [pc, #20]	; (80167dc <_sbrk+0x64>)
 80167c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80167ca:	68fb      	ldr	r3, [r7, #12]
}
 80167cc:	4618      	mov	r0, r3
 80167ce:	3718      	adds	r7, #24
 80167d0:	46bd      	mov	sp, r7
 80167d2:	bd80      	pop	{r7, pc}
 80167d4:	20020000 	.word	0x20020000
 80167d8:	00000400 	.word	0x00000400
 80167dc:	200007f0 	.word	0x200007f0
 80167e0:	20000808 	.word	0x20000808

080167e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80167e4:	b480      	push	{r7}
 80167e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80167e8:	4b06      	ldr	r3, [pc, #24]	; (8016804 <SystemInit+0x20>)
 80167ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80167ee:	4a05      	ldr	r2, [pc, #20]	; (8016804 <SystemInit+0x20>)
 80167f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80167f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80167f8:	bf00      	nop
 80167fa:	46bd      	mov	sp, r7
 80167fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016800:	4770      	bx	lr
 8016802:	bf00      	nop
 8016804:	e000ed00 	.word	0xe000ed00

08016808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8016808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016840 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801680c:	480d      	ldr	r0, [pc, #52]	; (8016844 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801680e:	490e      	ldr	r1, [pc, #56]	; (8016848 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8016810:	4a0e      	ldr	r2, [pc, #56]	; (801684c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8016812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8016814:	e002      	b.n	801681c <LoopCopyDataInit>

08016816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8016816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8016818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801681a:	3304      	adds	r3, #4

0801681c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801681c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801681e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8016820:	d3f9      	bcc.n	8016816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8016822:	4a0b      	ldr	r2, [pc, #44]	; (8016850 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8016824:	4c0b      	ldr	r4, [pc, #44]	; (8016854 <LoopFillZerobss+0x26>)
  movs r3, #0
 8016826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8016828:	e001      	b.n	801682e <LoopFillZerobss>

0801682a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801682a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801682c:	3204      	adds	r2, #4

0801682e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801682e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8016830:	d3fb      	bcc.n	801682a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8016832:	f7ff ffd7 	bl	80167e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8016836:	f007 fc97 	bl	801e168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801683a:	f7eb f94f 	bl	8001adc <main>
  bx  lr    
 801683e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8016840:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8016844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8016848:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 801684c:	0802a290 	.word	0x0802a290
  ldr r2, =_sbss
 8016850:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8016854:	20000808 	.word	0x20000808

08016858 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016858:	e7fe      	b.n	8016858 <ADC_IRQHandler>
	...

0801685c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801685c:	b580      	push	{r7, lr}
 801685e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8016860:	4b0e      	ldr	r3, [pc, #56]	; (801689c <HAL_Init+0x40>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	4a0d      	ldr	r2, [pc, #52]	; (801689c <HAL_Init+0x40>)
 8016866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801686a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801686c:	4b0b      	ldr	r3, [pc, #44]	; (801689c <HAL_Init+0x40>)
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4a0a      	ldr	r2, [pc, #40]	; (801689c <HAL_Init+0x40>)
 8016872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016876:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016878:	4b08      	ldr	r3, [pc, #32]	; (801689c <HAL_Init+0x40>)
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	4a07      	ldr	r2, [pc, #28]	; (801689c <HAL_Init+0x40>)
 801687e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016882:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8016884:	2003      	movs	r0, #3
 8016886:	f000 f94f 	bl	8016b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801688a:	2000      	movs	r0, #0
 801688c:	f000 f808 	bl	80168a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8016890:	f7ff fc14 	bl	80160bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8016894:	2300      	movs	r3, #0
}
 8016896:	4618      	mov	r0, r3
 8016898:	bd80      	pop	{r7, pc}
 801689a:	bf00      	nop
 801689c:	40023c00 	.word	0x40023c00

080168a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b082      	sub	sp, #8
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80168a8:	4b12      	ldr	r3, [pc, #72]	; (80168f4 <HAL_InitTick+0x54>)
 80168aa:	681a      	ldr	r2, [r3, #0]
 80168ac:	4b12      	ldr	r3, [pc, #72]	; (80168f8 <HAL_InitTick+0x58>)
 80168ae:	781b      	ldrb	r3, [r3, #0]
 80168b0:	4619      	mov	r1, r3
 80168b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80168b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80168ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80168be:	4618      	mov	r0, r3
 80168c0:	f000 f967 	bl	8016b92 <HAL_SYSTICK_Config>
 80168c4:	4603      	mov	r3, r0
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d001      	beq.n	80168ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80168ca:	2301      	movs	r3, #1
 80168cc:	e00e      	b.n	80168ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	2b0f      	cmp	r3, #15
 80168d2:	d80a      	bhi.n	80168ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80168d4:	2200      	movs	r2, #0
 80168d6:	6879      	ldr	r1, [r7, #4]
 80168d8:	f04f 30ff 	mov.w	r0, #4294967295
 80168dc:	f000 f92f 	bl	8016b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80168e0:	4a06      	ldr	r2, [pc, #24]	; (80168fc <HAL_InitTick+0x5c>)
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80168e6:	2300      	movs	r3, #0
 80168e8:	e000      	b.n	80168ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80168ea:	2301      	movs	r3, #1
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}
 80168f4:	200001e0 	.word	0x200001e0
 80168f8:	200001e8 	.word	0x200001e8
 80168fc:	200001e4 	.word	0x200001e4

08016900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016900:	b480      	push	{r7}
 8016902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8016904:	4b06      	ldr	r3, [pc, #24]	; (8016920 <HAL_IncTick+0x20>)
 8016906:	781b      	ldrb	r3, [r3, #0]
 8016908:	461a      	mov	r2, r3
 801690a:	4b06      	ldr	r3, [pc, #24]	; (8016924 <HAL_IncTick+0x24>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	4413      	add	r3, r2
 8016910:	4a04      	ldr	r2, [pc, #16]	; (8016924 <HAL_IncTick+0x24>)
 8016912:	6013      	str	r3, [r2, #0]
}
 8016914:	bf00      	nop
 8016916:	46bd      	mov	sp, r7
 8016918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691c:	4770      	bx	lr
 801691e:	bf00      	nop
 8016920:	200001e8 	.word	0x200001e8
 8016924:	200007f4 	.word	0x200007f4

08016928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8016928:	b480      	push	{r7}
 801692a:	af00      	add	r7, sp, #0
  return uwTick;
 801692c:	4b03      	ldr	r3, [pc, #12]	; (801693c <HAL_GetTick+0x14>)
 801692e:	681b      	ldr	r3, [r3, #0]
}
 8016930:	4618      	mov	r0, r3
 8016932:	46bd      	mov	sp, r7
 8016934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016938:	4770      	bx	lr
 801693a:	bf00      	nop
 801693c:	200007f4 	.word	0x200007f4

08016940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b084      	sub	sp, #16
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8016948:	f7ff ffee 	bl	8016928 <HAL_GetTick>
 801694c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016958:	d005      	beq.n	8016966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801695a:	4b0a      	ldr	r3, [pc, #40]	; (8016984 <HAL_Delay+0x44>)
 801695c:	781b      	ldrb	r3, [r3, #0]
 801695e:	461a      	mov	r2, r3
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	4413      	add	r3, r2
 8016964:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8016966:	bf00      	nop
 8016968:	f7ff ffde 	bl	8016928 <HAL_GetTick>
 801696c:	4602      	mov	r2, r0
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	1ad3      	subs	r3, r2, r3
 8016972:	68fa      	ldr	r2, [r7, #12]
 8016974:	429a      	cmp	r2, r3
 8016976:	d8f7      	bhi.n	8016968 <HAL_Delay+0x28>
  {
  }
}
 8016978:	bf00      	nop
 801697a:	bf00      	nop
 801697c:	3710      	adds	r7, #16
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}
 8016982:	bf00      	nop
 8016984:	200001e8 	.word	0x200001e8

08016988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016988:	b480      	push	{r7}
 801698a:	b085      	sub	sp, #20
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f003 0307 	and.w	r3, r3, #7
 8016996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016998:	4b0c      	ldr	r3, [pc, #48]	; (80169cc <__NVIC_SetPriorityGrouping+0x44>)
 801699a:	68db      	ldr	r3, [r3, #12]
 801699c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801699e:	68ba      	ldr	r2, [r7, #8]
 80169a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80169a4:	4013      	ands	r3, r2
 80169a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80169b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80169b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80169b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80169ba:	4a04      	ldr	r2, [pc, #16]	; (80169cc <__NVIC_SetPriorityGrouping+0x44>)
 80169bc:	68bb      	ldr	r3, [r7, #8]
 80169be:	60d3      	str	r3, [r2, #12]
}
 80169c0:	bf00      	nop
 80169c2:	3714      	adds	r7, #20
 80169c4:	46bd      	mov	sp, r7
 80169c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ca:	4770      	bx	lr
 80169cc:	e000ed00 	.word	0xe000ed00

080169d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80169d0:	b480      	push	{r7}
 80169d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80169d4:	4b04      	ldr	r3, [pc, #16]	; (80169e8 <__NVIC_GetPriorityGrouping+0x18>)
 80169d6:	68db      	ldr	r3, [r3, #12]
 80169d8:	0a1b      	lsrs	r3, r3, #8
 80169da:	f003 0307 	and.w	r3, r3, #7
}
 80169de:	4618      	mov	r0, r3
 80169e0:	46bd      	mov	sp, r7
 80169e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e6:	4770      	bx	lr
 80169e8:	e000ed00 	.word	0xe000ed00

080169ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80169ec:	b480      	push	{r7}
 80169ee:	b083      	sub	sp, #12
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	4603      	mov	r3, r0
 80169f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80169f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	db0b      	blt.n	8016a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80169fe:	79fb      	ldrb	r3, [r7, #7]
 8016a00:	f003 021f 	and.w	r2, r3, #31
 8016a04:	4907      	ldr	r1, [pc, #28]	; (8016a24 <__NVIC_EnableIRQ+0x38>)
 8016a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a0a:	095b      	lsrs	r3, r3, #5
 8016a0c:	2001      	movs	r0, #1
 8016a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8016a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8016a16:	bf00      	nop
 8016a18:	370c      	adds	r7, #12
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a20:	4770      	bx	lr
 8016a22:	bf00      	nop
 8016a24:	e000e100 	.word	0xe000e100

08016a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016a28:	b480      	push	{r7}
 8016a2a:	b083      	sub	sp, #12
 8016a2c:	af00      	add	r7, sp, #0
 8016a2e:	4603      	mov	r3, r0
 8016a30:	6039      	str	r1, [r7, #0]
 8016a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	db0a      	blt.n	8016a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	b2da      	uxtb	r2, r3
 8016a40:	490c      	ldr	r1, [pc, #48]	; (8016a74 <__NVIC_SetPriority+0x4c>)
 8016a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a46:	0112      	lsls	r2, r2, #4
 8016a48:	b2d2      	uxtb	r2, r2
 8016a4a:	440b      	add	r3, r1
 8016a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8016a50:	e00a      	b.n	8016a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a52:	683b      	ldr	r3, [r7, #0]
 8016a54:	b2da      	uxtb	r2, r3
 8016a56:	4908      	ldr	r1, [pc, #32]	; (8016a78 <__NVIC_SetPriority+0x50>)
 8016a58:	79fb      	ldrb	r3, [r7, #7]
 8016a5a:	f003 030f 	and.w	r3, r3, #15
 8016a5e:	3b04      	subs	r3, #4
 8016a60:	0112      	lsls	r2, r2, #4
 8016a62:	b2d2      	uxtb	r2, r2
 8016a64:	440b      	add	r3, r1
 8016a66:	761a      	strb	r2, [r3, #24]
}
 8016a68:	bf00      	nop
 8016a6a:	370c      	adds	r7, #12
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a72:	4770      	bx	lr
 8016a74:	e000e100 	.word	0xe000e100
 8016a78:	e000ed00 	.word	0xe000ed00

08016a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8016a7c:	b480      	push	{r7}
 8016a7e:	b089      	sub	sp, #36	; 0x24
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	60f8      	str	r0, [r7, #12]
 8016a84:	60b9      	str	r1, [r7, #8]
 8016a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	f003 0307 	and.w	r3, r3, #7
 8016a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016a90:	69fb      	ldr	r3, [r7, #28]
 8016a92:	f1c3 0307 	rsb	r3, r3, #7
 8016a96:	2b04      	cmp	r3, #4
 8016a98:	bf28      	it	cs
 8016a9a:	2304      	movcs	r3, #4
 8016a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016a9e:	69fb      	ldr	r3, [r7, #28]
 8016aa0:	3304      	adds	r3, #4
 8016aa2:	2b06      	cmp	r3, #6
 8016aa4:	d902      	bls.n	8016aac <NVIC_EncodePriority+0x30>
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	3b03      	subs	r3, #3
 8016aaa:	e000      	b.n	8016aae <NVIC_EncodePriority+0x32>
 8016aac:	2300      	movs	r3, #0
 8016aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8016ab4:	69bb      	ldr	r3, [r7, #24]
 8016ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8016aba:	43da      	mvns	r2, r3
 8016abc:	68bb      	ldr	r3, [r7, #8]
 8016abe:	401a      	ands	r2, r3
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8016ac8:	697b      	ldr	r3, [r7, #20]
 8016aca:	fa01 f303 	lsl.w	r3, r1, r3
 8016ace:	43d9      	mvns	r1, r3
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016ad4:	4313      	orrs	r3, r2
         );
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3724      	adds	r7, #36	; 0x24
 8016ada:	46bd      	mov	sp, r7
 8016adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae0:	4770      	bx	lr
	...

08016ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	3b01      	subs	r3, #1
 8016af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016af4:	d301      	bcc.n	8016afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016af6:	2301      	movs	r3, #1
 8016af8:	e00f      	b.n	8016b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016afa:	4a0a      	ldr	r2, [pc, #40]	; (8016b24 <SysTick_Config+0x40>)
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	3b01      	subs	r3, #1
 8016b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016b02:	210f      	movs	r1, #15
 8016b04:	f04f 30ff 	mov.w	r0, #4294967295
 8016b08:	f7ff ff8e 	bl	8016a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016b0c:	4b05      	ldr	r3, [pc, #20]	; (8016b24 <SysTick_Config+0x40>)
 8016b0e:	2200      	movs	r2, #0
 8016b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016b12:	4b04      	ldr	r3, [pc, #16]	; (8016b24 <SysTick_Config+0x40>)
 8016b14:	2207      	movs	r2, #7
 8016b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016b18:	2300      	movs	r3, #0
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3708      	adds	r7, #8
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}
 8016b22:	bf00      	nop
 8016b24:	e000e010 	.word	0xe000e010

08016b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b082      	sub	sp, #8
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7ff ff29 	bl	8016988 <__NVIC_SetPriorityGrouping>
}
 8016b36:	bf00      	nop
 8016b38:	3708      	adds	r7, #8
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}

08016b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016b3e:	b580      	push	{r7, lr}
 8016b40:	b086      	sub	sp, #24
 8016b42:	af00      	add	r7, sp, #0
 8016b44:	4603      	mov	r3, r0
 8016b46:	60b9      	str	r1, [r7, #8]
 8016b48:	607a      	str	r2, [r7, #4]
 8016b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016b50:	f7ff ff3e 	bl	80169d0 <__NVIC_GetPriorityGrouping>
 8016b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016b56:	687a      	ldr	r2, [r7, #4]
 8016b58:	68b9      	ldr	r1, [r7, #8]
 8016b5a:	6978      	ldr	r0, [r7, #20]
 8016b5c:	f7ff ff8e 	bl	8016a7c <NVIC_EncodePriority>
 8016b60:	4602      	mov	r2, r0
 8016b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b66:	4611      	mov	r1, r2
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7ff ff5d 	bl	8016a28 <__NVIC_SetPriority>
}
 8016b6e:	bf00      	nop
 8016b70:	3718      	adds	r7, #24
 8016b72:	46bd      	mov	sp, r7
 8016b74:	bd80      	pop	{r7, pc}

08016b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b082      	sub	sp, #8
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b84:	4618      	mov	r0, r3
 8016b86:	f7ff ff31 	bl	80169ec <__NVIC_EnableIRQ>
}
 8016b8a:	bf00      	nop
 8016b8c:	3708      	adds	r7, #8
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}

08016b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b082      	sub	sp, #8
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f7ff ffa2 	bl	8016ae4 <SysTick_Config>
 8016ba0:	4603      	mov	r3, r0
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3708      	adds	r7, #8
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}
	...

08016bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b086      	sub	sp, #24
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8016bb8:	f7ff feb6 	bl	8016928 <HAL_GetTick>
 8016bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	d101      	bne.n	8016bc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	e099      	b.n	8016cfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	2202      	movs	r2, #2
 8016bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	681a      	ldr	r2, [r3, #0]
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	f022 0201 	bic.w	r2, r2, #1
 8016be6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016be8:	e00f      	b.n	8016c0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016bea:	f7ff fe9d 	bl	8016928 <HAL_GetTick>
 8016bee:	4602      	mov	r2, r0
 8016bf0:	693b      	ldr	r3, [r7, #16]
 8016bf2:	1ad3      	subs	r3, r2, r3
 8016bf4:	2b05      	cmp	r3, #5
 8016bf6:	d908      	bls.n	8016c0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2220      	movs	r2, #32
 8016bfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2203      	movs	r2, #3
 8016c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8016c06:	2303      	movs	r3, #3
 8016c08:	e078      	b.n	8016cfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	f003 0301 	and.w	r3, r3, #1
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d1e8      	bne.n	8016bea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8016c20:	697a      	ldr	r2, [r7, #20]
 8016c22:	4b38      	ldr	r3, [pc, #224]	; (8016d04 <HAL_DMA_Init+0x158>)
 8016c24:	4013      	ands	r3, r2
 8016c26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	685a      	ldr	r2, [r3, #4]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	689b      	ldr	r3, [r3, #8]
 8016c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	691b      	ldr	r3, [r3, #16]
 8016c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8016c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	699b      	ldr	r3, [r3, #24]
 8016c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8016c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	6a1b      	ldr	r3, [r3, #32]
 8016c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016c56:	697a      	ldr	r2, [r7, #20]
 8016c58:	4313      	orrs	r3, r2
 8016c5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c60:	2b04      	cmp	r3, #4
 8016c62:	d107      	bne.n	8016c74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	697a      	ldr	r2, [r7, #20]
 8016c70:	4313      	orrs	r3, r2
 8016c72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	697a      	ldr	r2, [r7, #20]
 8016c7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	695b      	ldr	r3, [r3, #20]
 8016c82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	f023 0307 	bic.w	r3, r3, #7
 8016c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c90:	697a      	ldr	r2, [r7, #20]
 8016c92:	4313      	orrs	r3, r2
 8016c94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c9a:	2b04      	cmp	r3, #4
 8016c9c:	d117      	bne.n	8016cce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ca2:	697a      	ldr	r2, [r7, #20]
 8016ca4:	4313      	orrs	r3, r2
 8016ca6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d00e      	beq.n	8016cce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	f000 fb0f 	bl	80172d4 <DMA_CheckFifoParam>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d008      	beq.n	8016cce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	2240      	movs	r2, #64	; 0x40
 8016cc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2201      	movs	r2, #1
 8016cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016cca:	2301      	movs	r3, #1
 8016ccc:	e016      	b.n	8016cfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	697a      	ldr	r2, [r7, #20]
 8016cd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f000 fac6 	bl	8017268 <DMA_CalcBaseAndBitshift>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016ce4:	223f      	movs	r2, #63	; 0x3f
 8016ce6:	409a      	lsls	r2, r3
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2201      	movs	r2, #1
 8016cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016cfa:	2300      	movs	r3, #0
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	3718      	adds	r7, #24
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}
 8016d04:	f010803f 	.word	0xf010803f

08016d08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b086      	sub	sp, #24
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	607a      	str	r2, [r7, #4]
 8016d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016d16:	2300      	movs	r3, #0
 8016d18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016d26:	2b01      	cmp	r3, #1
 8016d28:	d101      	bne.n	8016d2e <HAL_DMA_Start_IT+0x26>
 8016d2a:	2302      	movs	r3, #2
 8016d2c:	e040      	b.n	8016db0 <HAL_DMA_Start_IT+0xa8>
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	2201      	movs	r2, #1
 8016d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016d3c:	b2db      	uxtb	r3, r3
 8016d3e:	2b01      	cmp	r3, #1
 8016d40:	d12f      	bne.n	8016da2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	2202      	movs	r2, #2
 8016d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	2200      	movs	r2, #0
 8016d4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8016d50:	683b      	ldr	r3, [r7, #0]
 8016d52:	687a      	ldr	r2, [r7, #4]
 8016d54:	68b9      	ldr	r1, [r7, #8]
 8016d56:	68f8      	ldr	r0, [r7, #12]
 8016d58:	f000 fa58 	bl	801720c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d60:	223f      	movs	r2, #63	; 0x3f
 8016d62:	409a      	lsls	r2, r3
 8016d64:	693b      	ldr	r3, [r7, #16]
 8016d66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	681a      	ldr	r2, [r3, #0]
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	f042 0216 	orr.w	r2, r2, #22
 8016d76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d007      	beq.n	8016d90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	681a      	ldr	r2, [r3, #0]
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	f042 0208 	orr.w	r2, r2, #8
 8016d8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	681a      	ldr	r2, [r3, #0]
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	f042 0201 	orr.w	r2, r2, #1
 8016d9e:	601a      	str	r2, [r3, #0]
 8016da0:	e005      	b.n	8016dae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	2200      	movs	r2, #0
 8016da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016daa:	2302      	movs	r3, #2
 8016dac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8016db0:	4618      	mov	r0, r3
 8016db2:	3718      	adds	r7, #24
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016dc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016dc6:	f7ff fdaf 	bl	8016928 <HAL_GetTick>
 8016dca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016dd2:	b2db      	uxtb	r3, r3
 8016dd4:	2b02      	cmp	r3, #2
 8016dd6:	d008      	beq.n	8016dea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2280      	movs	r2, #128	; 0x80
 8016ddc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2200      	movs	r2, #0
 8016de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016de6:	2301      	movs	r3, #1
 8016de8:	e052      	b.n	8016e90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	681a      	ldr	r2, [r3, #0]
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	f022 0216 	bic.w	r2, r2, #22
 8016df8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	695a      	ldr	r2, [r3, #20]
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016e08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d103      	bne.n	8016e1a <HAL_DMA_Abort+0x62>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d007      	beq.n	8016e2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	681a      	ldr	r2, [r3, #0]
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	f022 0208 	bic.w	r2, r2, #8
 8016e28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	f022 0201 	bic.w	r2, r2, #1
 8016e38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016e3a:	e013      	b.n	8016e64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016e3c:	f7ff fd74 	bl	8016928 <HAL_GetTick>
 8016e40:	4602      	mov	r2, r0
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	1ad3      	subs	r3, r2, r3
 8016e46:	2b05      	cmp	r3, #5
 8016e48:	d90c      	bls.n	8016e64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2220      	movs	r2, #32
 8016e4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2203      	movs	r2, #3
 8016e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8016e60:	2303      	movs	r3, #3
 8016e62:	e015      	b.n	8016e90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	f003 0301 	and.w	r3, r3, #1
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d1e4      	bne.n	8016e3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e76:	223f      	movs	r2, #63	; 0x3f
 8016e78:	409a      	lsls	r2, r3
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	2201      	movs	r2, #1
 8016e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	2200      	movs	r2, #0
 8016e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8016e8e:	2300      	movs	r3, #0
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	3710      	adds	r7, #16
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd80      	pop	{r7, pc}

08016e98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016e98:	b480      	push	{r7}
 8016e9a:	b083      	sub	sp, #12
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016ea6:	b2db      	uxtb	r3, r3
 8016ea8:	2b02      	cmp	r3, #2
 8016eaa:	d004      	beq.n	8016eb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2280      	movs	r2, #128	; 0x80
 8016eb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016eb2:	2301      	movs	r3, #1
 8016eb4:	e00c      	b.n	8016ed0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	2205      	movs	r2, #5
 8016eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	f022 0201 	bic.w	r2, r2, #1
 8016ecc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016ece:	2300      	movs	r3, #0
}
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	370c      	adds	r7, #12
 8016ed4:	46bd      	mov	sp, r7
 8016ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eda:	4770      	bx	lr

08016edc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b086      	sub	sp, #24
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016ee8:	4b8e      	ldr	r3, [pc, #568]	; (8017124 <HAL_DMA_IRQHandler+0x248>)
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	4a8e      	ldr	r2, [pc, #568]	; (8017128 <HAL_DMA_IRQHandler+0x24c>)
 8016eee:	fba2 2303 	umull	r2, r3, r2, r3
 8016ef2:	0a9b      	lsrs	r3, r3, #10
 8016ef4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016efa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f06:	2208      	movs	r2, #8
 8016f08:	409a      	lsls	r2, r3
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	4013      	ands	r3, r2
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d01a      	beq.n	8016f48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	f003 0304 	and.w	r3, r3, #4
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d013      	beq.n	8016f48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	681a      	ldr	r2, [r3, #0]
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	f022 0204 	bic.w	r2, r2, #4
 8016f2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f34:	2208      	movs	r2, #8
 8016f36:	409a      	lsls	r2, r3
 8016f38:	693b      	ldr	r3, [r7, #16]
 8016f3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f40:	f043 0201 	orr.w	r2, r3, #1
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	409a      	lsls	r2, r3
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	4013      	ands	r3, r2
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d012      	beq.n	8016f7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	695b      	ldr	r3, [r3, #20]
 8016f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d00b      	beq.n	8016f7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f6a:	2201      	movs	r2, #1
 8016f6c:	409a      	lsls	r2, r3
 8016f6e:	693b      	ldr	r3, [r7, #16]
 8016f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f76:	f043 0202 	orr.w	r2, r3, #2
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f82:	2204      	movs	r2, #4
 8016f84:	409a      	lsls	r2, r3
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	4013      	ands	r3, r2
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d012      	beq.n	8016fb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	f003 0302 	and.w	r3, r3, #2
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d00b      	beq.n	8016fb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fa0:	2204      	movs	r2, #4
 8016fa2:	409a      	lsls	r2, r3
 8016fa4:	693b      	ldr	r3, [r7, #16]
 8016fa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fac:	f043 0204 	orr.w	r2, r3, #4
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fb8:	2210      	movs	r2, #16
 8016fba:	409a      	lsls	r2, r3
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	4013      	ands	r3, r2
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d043      	beq.n	801704c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	f003 0308 	and.w	r3, r3, #8
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d03c      	beq.n	801704c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016fd6:	2210      	movs	r2, #16
 8016fd8:	409a      	lsls	r2, r3
 8016fda:	693b      	ldr	r3, [r7, #16]
 8016fdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d018      	beq.n	801701e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d108      	bne.n	801700c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d024      	beq.n	801704c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017006:	6878      	ldr	r0, [r7, #4]
 8017008:	4798      	blx	r3
 801700a:	e01f      	b.n	801704c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017010:	2b00      	cmp	r3, #0
 8017012:	d01b      	beq.n	801704c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017018:	6878      	ldr	r0, [r7, #4]
 801701a:	4798      	blx	r3
 801701c:	e016      	b.n	801704c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017028:	2b00      	cmp	r3, #0
 801702a:	d107      	bne.n	801703c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	681a      	ldr	r2, [r3, #0]
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	f022 0208 	bic.w	r2, r2, #8
 801703a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017040:	2b00      	cmp	r3, #0
 8017042:	d003      	beq.n	801704c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017050:	2220      	movs	r2, #32
 8017052:	409a      	lsls	r2, r3
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	4013      	ands	r3, r2
 8017058:	2b00      	cmp	r3, #0
 801705a:	f000 808f 	beq.w	801717c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	f003 0310 	and.w	r3, r3, #16
 8017068:	2b00      	cmp	r3, #0
 801706a:	f000 8087 	beq.w	801717c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017072:	2220      	movs	r2, #32
 8017074:	409a      	lsls	r2, r3
 8017076:	693b      	ldr	r3, [r7, #16]
 8017078:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017080:	b2db      	uxtb	r3, r3
 8017082:	2b05      	cmp	r3, #5
 8017084:	d136      	bne.n	80170f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	681a      	ldr	r2, [r3, #0]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	f022 0216 	bic.w	r2, r2, #22
 8017094:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	695a      	ldr	r2, [r3, #20]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80170a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d103      	bne.n	80170b6 <HAL_DMA_IRQHandler+0x1da>
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d007      	beq.n	80170c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	681a      	ldr	r2, [r3, #0]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	f022 0208 	bic.w	r2, r2, #8
 80170c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80170ca:	223f      	movs	r2, #63	; 0x3f
 80170cc:	409a      	lsls	r2, r3
 80170ce:	693b      	ldr	r3, [r7, #16]
 80170d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2201      	movs	r2, #1
 80170d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2200      	movs	r2, #0
 80170de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d07e      	beq.n	80171e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170ee:	6878      	ldr	r0, [r7, #4]
 80170f0:	4798      	blx	r3
        }
        return;
 80170f2:	e079      	b.n	80171e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d01d      	beq.n	801713e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801710c:	2b00      	cmp	r3, #0
 801710e:	d10d      	bne.n	801712c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017114:	2b00      	cmp	r3, #0
 8017116:	d031      	beq.n	801717c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801711c:	6878      	ldr	r0, [r7, #4]
 801711e:	4798      	blx	r3
 8017120:	e02c      	b.n	801717c <HAL_DMA_IRQHandler+0x2a0>
 8017122:	bf00      	nop
 8017124:	200001e0 	.word	0x200001e0
 8017128:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017130:	2b00      	cmp	r3, #0
 8017132:	d023      	beq.n	801717c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	4798      	blx	r3
 801713c:	e01e      	b.n	801717c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017148:	2b00      	cmp	r3, #0
 801714a:	d10f      	bne.n	801716c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	681a      	ldr	r2, [r3, #0]
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	f022 0210 	bic.w	r2, r2, #16
 801715a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2201      	movs	r2, #1
 8017160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	2200      	movs	r2, #0
 8017168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017170:	2b00      	cmp	r3, #0
 8017172:	d003      	beq.n	801717c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017180:	2b00      	cmp	r3, #0
 8017182:	d032      	beq.n	80171ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017188:	f003 0301 	and.w	r3, r3, #1
 801718c:	2b00      	cmp	r3, #0
 801718e:	d022      	beq.n	80171d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2205      	movs	r2, #5
 8017194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f022 0201 	bic.w	r2, r2, #1
 80171a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	3301      	adds	r3, #1
 80171ac:	60bb      	str	r3, [r7, #8]
 80171ae:	697a      	ldr	r2, [r7, #20]
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d307      	bcc.n	80171c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	f003 0301 	and.w	r3, r3, #1
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d1f2      	bne.n	80171a8 <HAL_DMA_IRQHandler+0x2cc>
 80171c2:	e000      	b.n	80171c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80171c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2201      	movs	r2, #1
 80171ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2200      	movs	r2, #0
 80171d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d005      	beq.n	80171ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80171e2:	6878      	ldr	r0, [r7, #4]
 80171e4:	4798      	blx	r3
 80171e6:	e000      	b.n	80171ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80171e8:	bf00      	nop
    }
  }
}
 80171ea:	3718      	adds	r7, #24
 80171ec:	46bd      	mov	sp, r7
 80171ee:	bd80      	pop	{r7, pc}

080171f0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80171f0:	b480      	push	{r7}
 80171f2:	b083      	sub	sp, #12
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80171fe:	b2db      	uxtb	r3, r3
}
 8017200:	4618      	mov	r0, r3
 8017202:	370c      	adds	r7, #12
 8017204:	46bd      	mov	sp, r7
 8017206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801720a:	4770      	bx	lr

0801720c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801720c:	b480      	push	{r7}
 801720e:	b085      	sub	sp, #20
 8017210:	af00      	add	r7, sp, #0
 8017212:	60f8      	str	r0, [r7, #12]
 8017214:	60b9      	str	r1, [r7, #8]
 8017216:	607a      	str	r2, [r7, #4]
 8017218:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	681a      	ldr	r2, [r3, #0]
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8017228:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	683a      	ldr	r2, [r7, #0]
 8017230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	689b      	ldr	r3, [r3, #8]
 8017236:	2b40      	cmp	r3, #64	; 0x40
 8017238:	d108      	bne.n	801724c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	687a      	ldr	r2, [r7, #4]
 8017240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	68ba      	ldr	r2, [r7, #8]
 8017248:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801724a:	e007      	b.n	801725c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	68ba      	ldr	r2, [r7, #8]
 8017252:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	687a      	ldr	r2, [r7, #4]
 801725a:	60da      	str	r2, [r3, #12]
}
 801725c:	bf00      	nop
 801725e:	3714      	adds	r7, #20
 8017260:	46bd      	mov	sp, r7
 8017262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017266:	4770      	bx	lr

08017268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8017268:	b480      	push	{r7}
 801726a:	b085      	sub	sp, #20
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	b2db      	uxtb	r3, r3
 8017276:	3b10      	subs	r3, #16
 8017278:	4a14      	ldr	r2, [pc, #80]	; (80172cc <DMA_CalcBaseAndBitshift+0x64>)
 801727a:	fba2 2303 	umull	r2, r3, r2, r3
 801727e:	091b      	lsrs	r3, r3, #4
 8017280:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8017282:	4a13      	ldr	r2, [pc, #76]	; (80172d0 <DMA_CalcBaseAndBitshift+0x68>)
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	4413      	add	r3, r2
 8017288:	781b      	ldrb	r3, [r3, #0]
 801728a:	461a      	mov	r2, r3
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	2b03      	cmp	r3, #3
 8017294:	d909      	bls.n	80172aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801729e:	f023 0303 	bic.w	r3, r3, #3
 80172a2:	1d1a      	adds	r2, r3, #4
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	659a      	str	r2, [r3, #88]	; 0x58
 80172a8:	e007      	b.n	80172ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80172b2:	f023 0303 	bic.w	r3, r3, #3
 80172b6:	687a      	ldr	r2, [r7, #4]
 80172b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3714      	adds	r7, #20
 80172c2:	46bd      	mov	sp, r7
 80172c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop
 80172cc:	aaaaaaab 	.word	0xaaaaaaab
 80172d0:	0802a16c 	.word	0x0802a16c

080172d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80172d4:	b480      	push	{r7}
 80172d6:	b085      	sub	sp, #20
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80172dc:	2300      	movs	r3, #0
 80172de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	699b      	ldr	r3, [r3, #24]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d11f      	bne.n	801732e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	2b03      	cmp	r3, #3
 80172f2:	d856      	bhi.n	80173a2 <DMA_CheckFifoParam+0xce>
 80172f4:	a201      	add	r2, pc, #4	; (adr r2, 80172fc <DMA_CheckFifoParam+0x28>)
 80172f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172fa:	bf00      	nop
 80172fc:	0801730d 	.word	0x0801730d
 8017300:	0801731f 	.word	0x0801731f
 8017304:	0801730d 	.word	0x0801730d
 8017308:	080173a3 	.word	0x080173a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017314:	2b00      	cmp	r3, #0
 8017316:	d046      	beq.n	80173a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8017318:	2301      	movs	r3, #1
 801731a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801731c:	e043      	b.n	80173a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017326:	d140      	bne.n	80173aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8017328:	2301      	movs	r3, #1
 801732a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801732c:	e03d      	b.n	80173aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	699b      	ldr	r3, [r3, #24]
 8017332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017336:	d121      	bne.n	801737c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	2b03      	cmp	r3, #3
 801733c:	d837      	bhi.n	80173ae <DMA_CheckFifoParam+0xda>
 801733e:	a201      	add	r2, pc, #4	; (adr r2, 8017344 <DMA_CheckFifoParam+0x70>)
 8017340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017344:	08017355 	.word	0x08017355
 8017348:	0801735b 	.word	0x0801735b
 801734c:	08017355 	.word	0x08017355
 8017350:	0801736d 	.word	0x0801736d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8017354:	2301      	movs	r3, #1
 8017356:	73fb      	strb	r3, [r7, #15]
      break;
 8017358:	e030      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801735e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017362:	2b00      	cmp	r3, #0
 8017364:	d025      	beq.n	80173b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8017366:	2301      	movs	r3, #1
 8017368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801736a:	e022      	b.n	80173b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8017374:	d11f      	bne.n	80173b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8017376:	2301      	movs	r3, #1
 8017378:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801737a:	e01c      	b.n	80173b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	2b02      	cmp	r3, #2
 8017380:	d903      	bls.n	801738a <DMA_CheckFifoParam+0xb6>
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	2b03      	cmp	r3, #3
 8017386:	d003      	beq.n	8017390 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8017388:	e018      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801738a:	2301      	movs	r3, #1
 801738c:	73fb      	strb	r3, [r7, #15]
      break;
 801738e:	e015      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017398:	2b00      	cmp	r3, #0
 801739a:	d00e      	beq.n	80173ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801739c:	2301      	movs	r3, #1
 801739e:	73fb      	strb	r3, [r7, #15]
      break;
 80173a0:	e00b      	b.n	80173ba <DMA_CheckFifoParam+0xe6>
      break;
 80173a2:	bf00      	nop
 80173a4:	e00a      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
      break;
 80173a6:	bf00      	nop
 80173a8:	e008      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
      break;
 80173aa:	bf00      	nop
 80173ac:	e006      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
      break;
 80173ae:	bf00      	nop
 80173b0:	e004      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
      break;
 80173b2:	bf00      	nop
 80173b4:	e002      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
      break;   
 80173b6:	bf00      	nop
 80173b8:	e000      	b.n	80173bc <DMA_CheckFifoParam+0xe8>
      break;
 80173ba:	bf00      	nop
    }
  } 
  
  return status; 
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3714      	adds	r7, #20
 80173c2:	46bd      	mov	sp, r7
 80173c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c8:	4770      	bx	lr
 80173ca:	bf00      	nop

080173cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80173cc:	b480      	push	{r7}
 80173ce:	b089      	sub	sp, #36	; 0x24
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80173d6:	2300      	movs	r3, #0
 80173d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80173da:	2300      	movs	r3, #0
 80173dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80173de:	2300      	movs	r3, #0
 80173e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80173e2:	2300      	movs	r3, #0
 80173e4:	61fb      	str	r3, [r7, #28]
 80173e6:	e159      	b.n	801769c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80173e8:	2201      	movs	r2, #1
 80173ea:	69fb      	ldr	r3, [r7, #28]
 80173ec:	fa02 f303 	lsl.w	r3, r2, r3
 80173f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	697a      	ldr	r2, [r7, #20]
 80173f8:	4013      	ands	r3, r2
 80173fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80173fc:	693a      	ldr	r2, [r7, #16]
 80173fe:	697b      	ldr	r3, [r7, #20]
 8017400:	429a      	cmp	r2, r3
 8017402:	f040 8148 	bne.w	8017696 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	685b      	ldr	r3, [r3, #4]
 801740a:	f003 0303 	and.w	r3, r3, #3
 801740e:	2b01      	cmp	r3, #1
 8017410:	d005      	beq.n	801741e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	685b      	ldr	r3, [r3, #4]
 8017416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801741a:	2b02      	cmp	r3, #2
 801741c:	d130      	bne.n	8017480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	689b      	ldr	r3, [r3, #8]
 8017422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8017424:	69fb      	ldr	r3, [r7, #28]
 8017426:	005b      	lsls	r3, r3, #1
 8017428:	2203      	movs	r2, #3
 801742a:	fa02 f303 	lsl.w	r3, r2, r3
 801742e:	43db      	mvns	r3, r3
 8017430:	69ba      	ldr	r2, [r7, #24]
 8017432:	4013      	ands	r3, r2
 8017434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	68da      	ldr	r2, [r3, #12]
 801743a:	69fb      	ldr	r3, [r7, #28]
 801743c:	005b      	lsls	r3, r3, #1
 801743e:	fa02 f303 	lsl.w	r3, r2, r3
 8017442:	69ba      	ldr	r2, [r7, #24]
 8017444:	4313      	orrs	r3, r2
 8017446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	69ba      	ldr	r2, [r7, #24]
 801744c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	685b      	ldr	r3, [r3, #4]
 8017452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017454:	2201      	movs	r2, #1
 8017456:	69fb      	ldr	r3, [r7, #28]
 8017458:	fa02 f303 	lsl.w	r3, r2, r3
 801745c:	43db      	mvns	r3, r3
 801745e:	69ba      	ldr	r2, [r7, #24]
 8017460:	4013      	ands	r3, r2
 8017462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	685b      	ldr	r3, [r3, #4]
 8017468:	091b      	lsrs	r3, r3, #4
 801746a:	f003 0201 	and.w	r2, r3, #1
 801746e:	69fb      	ldr	r3, [r7, #28]
 8017470:	fa02 f303 	lsl.w	r3, r2, r3
 8017474:	69ba      	ldr	r2, [r7, #24]
 8017476:	4313      	orrs	r3, r2
 8017478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	69ba      	ldr	r2, [r7, #24]
 801747e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	685b      	ldr	r3, [r3, #4]
 8017484:	f003 0303 	and.w	r3, r3, #3
 8017488:	2b03      	cmp	r3, #3
 801748a:	d017      	beq.n	80174bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	68db      	ldr	r3, [r3, #12]
 8017490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8017492:	69fb      	ldr	r3, [r7, #28]
 8017494:	005b      	lsls	r3, r3, #1
 8017496:	2203      	movs	r2, #3
 8017498:	fa02 f303 	lsl.w	r3, r2, r3
 801749c:	43db      	mvns	r3, r3
 801749e:	69ba      	ldr	r2, [r7, #24]
 80174a0:	4013      	ands	r3, r2
 80174a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80174a4:	683b      	ldr	r3, [r7, #0]
 80174a6:	689a      	ldr	r2, [r3, #8]
 80174a8:	69fb      	ldr	r3, [r7, #28]
 80174aa:	005b      	lsls	r3, r3, #1
 80174ac:	fa02 f303 	lsl.w	r3, r2, r3
 80174b0:	69ba      	ldr	r2, [r7, #24]
 80174b2:	4313      	orrs	r3, r2
 80174b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	69ba      	ldr	r2, [r7, #24]
 80174ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80174bc:	683b      	ldr	r3, [r7, #0]
 80174be:	685b      	ldr	r3, [r3, #4]
 80174c0:	f003 0303 	and.w	r3, r3, #3
 80174c4:	2b02      	cmp	r3, #2
 80174c6:	d123      	bne.n	8017510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80174c8:	69fb      	ldr	r3, [r7, #28]
 80174ca:	08da      	lsrs	r2, r3, #3
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	3208      	adds	r2, #8
 80174d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80174d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80174d6:	69fb      	ldr	r3, [r7, #28]
 80174d8:	f003 0307 	and.w	r3, r3, #7
 80174dc:	009b      	lsls	r3, r3, #2
 80174de:	220f      	movs	r2, #15
 80174e0:	fa02 f303 	lsl.w	r3, r2, r3
 80174e4:	43db      	mvns	r3, r3
 80174e6:	69ba      	ldr	r2, [r7, #24]
 80174e8:	4013      	ands	r3, r2
 80174ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	691a      	ldr	r2, [r3, #16]
 80174f0:	69fb      	ldr	r3, [r7, #28]
 80174f2:	f003 0307 	and.w	r3, r3, #7
 80174f6:	009b      	lsls	r3, r3, #2
 80174f8:	fa02 f303 	lsl.w	r3, r2, r3
 80174fc:	69ba      	ldr	r2, [r7, #24]
 80174fe:	4313      	orrs	r3, r2
 8017500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8017502:	69fb      	ldr	r3, [r7, #28]
 8017504:	08da      	lsrs	r2, r3, #3
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	3208      	adds	r2, #8
 801750a:	69b9      	ldr	r1, [r7, #24]
 801750c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8017516:	69fb      	ldr	r3, [r7, #28]
 8017518:	005b      	lsls	r3, r3, #1
 801751a:	2203      	movs	r2, #3
 801751c:	fa02 f303 	lsl.w	r3, r2, r3
 8017520:	43db      	mvns	r3, r3
 8017522:	69ba      	ldr	r2, [r7, #24]
 8017524:	4013      	ands	r3, r2
 8017526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8017528:	683b      	ldr	r3, [r7, #0]
 801752a:	685b      	ldr	r3, [r3, #4]
 801752c:	f003 0203 	and.w	r2, r3, #3
 8017530:	69fb      	ldr	r3, [r7, #28]
 8017532:	005b      	lsls	r3, r3, #1
 8017534:	fa02 f303 	lsl.w	r3, r2, r3
 8017538:	69ba      	ldr	r2, [r7, #24]
 801753a:	4313      	orrs	r3, r2
 801753c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	69ba      	ldr	r2, [r7, #24]
 8017542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	685b      	ldr	r3, [r3, #4]
 8017548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801754c:	2b00      	cmp	r3, #0
 801754e:	f000 80a2 	beq.w	8017696 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017552:	2300      	movs	r3, #0
 8017554:	60fb      	str	r3, [r7, #12]
 8017556:	4b57      	ldr	r3, [pc, #348]	; (80176b4 <HAL_GPIO_Init+0x2e8>)
 8017558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801755a:	4a56      	ldr	r2, [pc, #344]	; (80176b4 <HAL_GPIO_Init+0x2e8>)
 801755c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017560:	6453      	str	r3, [r2, #68]	; 0x44
 8017562:	4b54      	ldr	r3, [pc, #336]	; (80176b4 <HAL_GPIO_Init+0x2e8>)
 8017564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801756a:	60fb      	str	r3, [r7, #12]
 801756c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801756e:	4a52      	ldr	r2, [pc, #328]	; (80176b8 <HAL_GPIO_Init+0x2ec>)
 8017570:	69fb      	ldr	r3, [r7, #28]
 8017572:	089b      	lsrs	r3, r3, #2
 8017574:	3302      	adds	r3, #2
 8017576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801757a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801757c:	69fb      	ldr	r3, [r7, #28]
 801757e:	f003 0303 	and.w	r3, r3, #3
 8017582:	009b      	lsls	r3, r3, #2
 8017584:	220f      	movs	r2, #15
 8017586:	fa02 f303 	lsl.w	r3, r2, r3
 801758a:	43db      	mvns	r3, r3
 801758c:	69ba      	ldr	r2, [r7, #24]
 801758e:	4013      	ands	r3, r2
 8017590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	4a49      	ldr	r2, [pc, #292]	; (80176bc <HAL_GPIO_Init+0x2f0>)
 8017596:	4293      	cmp	r3, r2
 8017598:	d019      	beq.n	80175ce <HAL_GPIO_Init+0x202>
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	4a48      	ldr	r2, [pc, #288]	; (80176c0 <HAL_GPIO_Init+0x2f4>)
 801759e:	4293      	cmp	r3, r2
 80175a0:	d013      	beq.n	80175ca <HAL_GPIO_Init+0x1fe>
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	4a47      	ldr	r2, [pc, #284]	; (80176c4 <HAL_GPIO_Init+0x2f8>)
 80175a6:	4293      	cmp	r3, r2
 80175a8:	d00d      	beq.n	80175c6 <HAL_GPIO_Init+0x1fa>
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	4a46      	ldr	r2, [pc, #280]	; (80176c8 <HAL_GPIO_Init+0x2fc>)
 80175ae:	4293      	cmp	r3, r2
 80175b0:	d007      	beq.n	80175c2 <HAL_GPIO_Init+0x1f6>
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	4a45      	ldr	r2, [pc, #276]	; (80176cc <HAL_GPIO_Init+0x300>)
 80175b6:	4293      	cmp	r3, r2
 80175b8:	d101      	bne.n	80175be <HAL_GPIO_Init+0x1f2>
 80175ba:	2304      	movs	r3, #4
 80175bc:	e008      	b.n	80175d0 <HAL_GPIO_Init+0x204>
 80175be:	2307      	movs	r3, #7
 80175c0:	e006      	b.n	80175d0 <HAL_GPIO_Init+0x204>
 80175c2:	2303      	movs	r3, #3
 80175c4:	e004      	b.n	80175d0 <HAL_GPIO_Init+0x204>
 80175c6:	2302      	movs	r3, #2
 80175c8:	e002      	b.n	80175d0 <HAL_GPIO_Init+0x204>
 80175ca:	2301      	movs	r3, #1
 80175cc:	e000      	b.n	80175d0 <HAL_GPIO_Init+0x204>
 80175ce:	2300      	movs	r3, #0
 80175d0:	69fa      	ldr	r2, [r7, #28]
 80175d2:	f002 0203 	and.w	r2, r2, #3
 80175d6:	0092      	lsls	r2, r2, #2
 80175d8:	4093      	lsls	r3, r2
 80175da:	69ba      	ldr	r2, [r7, #24]
 80175dc:	4313      	orrs	r3, r2
 80175de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80175e0:	4935      	ldr	r1, [pc, #212]	; (80176b8 <HAL_GPIO_Init+0x2ec>)
 80175e2:	69fb      	ldr	r3, [r7, #28]
 80175e4:	089b      	lsrs	r3, r3, #2
 80175e6:	3302      	adds	r3, #2
 80175e8:	69ba      	ldr	r2, [r7, #24]
 80175ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80175ee:	4b38      	ldr	r3, [pc, #224]	; (80176d0 <HAL_GPIO_Init+0x304>)
 80175f0:	689b      	ldr	r3, [r3, #8]
 80175f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80175f4:	693b      	ldr	r3, [r7, #16]
 80175f6:	43db      	mvns	r3, r3
 80175f8:	69ba      	ldr	r2, [r7, #24]
 80175fa:	4013      	ands	r3, r2
 80175fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	685b      	ldr	r3, [r3, #4]
 8017602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017606:	2b00      	cmp	r3, #0
 8017608:	d003      	beq.n	8017612 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801760a:	69ba      	ldr	r2, [r7, #24]
 801760c:	693b      	ldr	r3, [r7, #16]
 801760e:	4313      	orrs	r3, r2
 8017610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017612:	4a2f      	ldr	r2, [pc, #188]	; (80176d0 <HAL_GPIO_Init+0x304>)
 8017614:	69bb      	ldr	r3, [r7, #24]
 8017616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017618:	4b2d      	ldr	r3, [pc, #180]	; (80176d0 <HAL_GPIO_Init+0x304>)
 801761a:	68db      	ldr	r3, [r3, #12]
 801761c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801761e:	693b      	ldr	r3, [r7, #16]
 8017620:	43db      	mvns	r3, r3
 8017622:	69ba      	ldr	r2, [r7, #24]
 8017624:	4013      	ands	r3, r2
 8017626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	685b      	ldr	r3, [r3, #4]
 801762c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017630:	2b00      	cmp	r3, #0
 8017632:	d003      	beq.n	801763c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8017634:	69ba      	ldr	r2, [r7, #24]
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	4313      	orrs	r3, r2
 801763a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801763c:	4a24      	ldr	r2, [pc, #144]	; (80176d0 <HAL_GPIO_Init+0x304>)
 801763e:	69bb      	ldr	r3, [r7, #24]
 8017640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017642:	4b23      	ldr	r3, [pc, #140]	; (80176d0 <HAL_GPIO_Init+0x304>)
 8017644:	685b      	ldr	r3, [r3, #4]
 8017646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	43db      	mvns	r3, r3
 801764c:	69ba      	ldr	r2, [r7, #24]
 801764e:	4013      	ands	r3, r2
 8017650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	685b      	ldr	r3, [r3, #4]
 8017656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801765a:	2b00      	cmp	r3, #0
 801765c:	d003      	beq.n	8017666 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801765e:	69ba      	ldr	r2, [r7, #24]
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	4313      	orrs	r3, r2
 8017664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017666:	4a1a      	ldr	r2, [pc, #104]	; (80176d0 <HAL_GPIO_Init+0x304>)
 8017668:	69bb      	ldr	r3, [r7, #24]
 801766a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801766c:	4b18      	ldr	r3, [pc, #96]	; (80176d0 <HAL_GPIO_Init+0x304>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	43db      	mvns	r3, r3
 8017676:	69ba      	ldr	r2, [r7, #24]
 8017678:	4013      	ands	r3, r2
 801767a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	685b      	ldr	r3, [r3, #4]
 8017680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017684:	2b00      	cmp	r3, #0
 8017686:	d003      	beq.n	8017690 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8017688:	69ba      	ldr	r2, [r7, #24]
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	4313      	orrs	r3, r2
 801768e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017690:	4a0f      	ldr	r2, [pc, #60]	; (80176d0 <HAL_GPIO_Init+0x304>)
 8017692:	69bb      	ldr	r3, [r7, #24]
 8017694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8017696:	69fb      	ldr	r3, [r7, #28]
 8017698:	3301      	adds	r3, #1
 801769a:	61fb      	str	r3, [r7, #28]
 801769c:	69fb      	ldr	r3, [r7, #28]
 801769e:	2b0f      	cmp	r3, #15
 80176a0:	f67f aea2 	bls.w	80173e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80176a4:	bf00      	nop
 80176a6:	bf00      	nop
 80176a8:	3724      	adds	r7, #36	; 0x24
 80176aa:	46bd      	mov	sp, r7
 80176ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b0:	4770      	bx	lr
 80176b2:	bf00      	nop
 80176b4:	40023800 	.word	0x40023800
 80176b8:	40013800 	.word	0x40013800
 80176bc:	40020000 	.word	0x40020000
 80176c0:	40020400 	.word	0x40020400
 80176c4:	40020800 	.word	0x40020800
 80176c8:	40020c00 	.word	0x40020c00
 80176cc:	40021000 	.word	0x40021000
 80176d0:	40013c00 	.word	0x40013c00

080176d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80176d4:	b480      	push	{r7}
 80176d6:	b085      	sub	sp, #20
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	460b      	mov	r3, r1
 80176de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	691a      	ldr	r2, [r3, #16]
 80176e4:	887b      	ldrh	r3, [r7, #2]
 80176e6:	4013      	ands	r3, r2
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d002      	beq.n	80176f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80176ec:	2301      	movs	r3, #1
 80176ee:	73fb      	strb	r3, [r7, #15]
 80176f0:	e001      	b.n	80176f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80176f2:	2300      	movs	r3, #0
 80176f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80176f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	3714      	adds	r7, #20
 80176fc:	46bd      	mov	sp, r7
 80176fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017702:	4770      	bx	lr

08017704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017704:	b480      	push	{r7}
 8017706:	b083      	sub	sp, #12
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
 801770c:	460b      	mov	r3, r1
 801770e:	807b      	strh	r3, [r7, #2]
 8017710:	4613      	mov	r3, r2
 8017712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017714:	787b      	ldrb	r3, [r7, #1]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d003      	beq.n	8017722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801771a:	887a      	ldrh	r2, [r7, #2]
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8017720:	e003      	b.n	801772a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8017722:	887b      	ldrh	r3, [r7, #2]
 8017724:	041a      	lsls	r2, r3, #16
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	619a      	str	r2, [r3, #24]
}
 801772a:	bf00      	nop
 801772c:	370c      	adds	r7, #12
 801772e:	46bd      	mov	sp, r7
 8017730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017734:	4770      	bx	lr
	...

08017738 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b082      	sub	sp, #8
 801773c:	af00      	add	r7, sp, #0
 801773e:	4603      	mov	r3, r0
 8017740:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8017742:	4b08      	ldr	r3, [pc, #32]	; (8017764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017744:	695a      	ldr	r2, [r3, #20]
 8017746:	88fb      	ldrh	r3, [r7, #6]
 8017748:	4013      	ands	r3, r2
 801774a:	2b00      	cmp	r3, #0
 801774c:	d006      	beq.n	801775c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801774e:	4a05      	ldr	r2, [pc, #20]	; (8017764 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017750:	88fb      	ldrh	r3, [r7, #6]
 8017752:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017754:	88fb      	ldrh	r3, [r7, #6]
 8017756:	4618      	mov	r0, r3
 8017758:	f7ec fdac 	bl	80042b4 <HAL_GPIO_EXTI_Callback>
  }
}
 801775c:	bf00      	nop
 801775e:	3708      	adds	r7, #8
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}
 8017764:	40013c00 	.word	0x40013c00

08017768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d101      	bne.n	801777a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017776:	2301      	movs	r3, #1
 8017778:	e12b      	b.n	80179d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017780:	b2db      	uxtb	r3, r3
 8017782:	2b00      	cmp	r3, #0
 8017784:	d106      	bne.n	8017794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	2200      	movs	r2, #0
 801778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f7fe fcbc 	bl	801610c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2224      	movs	r2, #36	; 0x24
 8017798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	681a      	ldr	r2, [r3, #0]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	f022 0201 	bic.w	r2, r2, #1
 80177aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	681a      	ldr	r2, [r3, #0]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80177ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	681a      	ldr	r2, [r3, #0]
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80177ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80177cc:	f003 fa9a 	bl	801ad04 <HAL_RCC_GetPCLK1Freq>
 80177d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	685b      	ldr	r3, [r3, #4]
 80177d6:	4a81      	ldr	r2, [pc, #516]	; (80179dc <HAL_I2C_Init+0x274>)
 80177d8:	4293      	cmp	r3, r2
 80177da:	d807      	bhi.n	80177ec <HAL_I2C_Init+0x84>
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	4a80      	ldr	r2, [pc, #512]	; (80179e0 <HAL_I2C_Init+0x278>)
 80177e0:	4293      	cmp	r3, r2
 80177e2:	bf94      	ite	ls
 80177e4:	2301      	movls	r3, #1
 80177e6:	2300      	movhi	r3, #0
 80177e8:	b2db      	uxtb	r3, r3
 80177ea:	e006      	b.n	80177fa <HAL_I2C_Init+0x92>
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	4a7d      	ldr	r2, [pc, #500]	; (80179e4 <HAL_I2C_Init+0x27c>)
 80177f0:	4293      	cmp	r3, r2
 80177f2:	bf94      	ite	ls
 80177f4:	2301      	movls	r3, #1
 80177f6:	2300      	movhi	r3, #0
 80177f8:	b2db      	uxtb	r3, r3
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d001      	beq.n	8017802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80177fe:	2301      	movs	r3, #1
 8017800:	e0e7      	b.n	80179d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	4a78      	ldr	r2, [pc, #480]	; (80179e8 <HAL_I2C_Init+0x280>)
 8017806:	fba2 2303 	umull	r2, r3, r2, r3
 801780a:	0c9b      	lsrs	r3, r3, #18
 801780c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	685b      	ldr	r3, [r3, #4]
 8017814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	68ba      	ldr	r2, [r7, #8]
 801781e:	430a      	orrs	r2, r1
 8017820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	6a1b      	ldr	r3, [r3, #32]
 8017828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	685b      	ldr	r3, [r3, #4]
 8017830:	4a6a      	ldr	r2, [pc, #424]	; (80179dc <HAL_I2C_Init+0x274>)
 8017832:	4293      	cmp	r3, r2
 8017834:	d802      	bhi.n	801783c <HAL_I2C_Init+0xd4>
 8017836:	68bb      	ldr	r3, [r7, #8]
 8017838:	3301      	adds	r3, #1
 801783a:	e009      	b.n	8017850 <HAL_I2C_Init+0xe8>
 801783c:	68bb      	ldr	r3, [r7, #8]
 801783e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8017842:	fb02 f303 	mul.w	r3, r2, r3
 8017846:	4a69      	ldr	r2, [pc, #420]	; (80179ec <HAL_I2C_Init+0x284>)
 8017848:	fba2 2303 	umull	r2, r3, r2, r3
 801784c:	099b      	lsrs	r3, r3, #6
 801784e:	3301      	adds	r3, #1
 8017850:	687a      	ldr	r2, [r7, #4]
 8017852:	6812      	ldr	r2, [r2, #0]
 8017854:	430b      	orrs	r3, r1
 8017856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	69db      	ldr	r3, [r3, #28]
 801785e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8017862:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	685b      	ldr	r3, [r3, #4]
 801786a:	495c      	ldr	r1, [pc, #368]	; (80179dc <HAL_I2C_Init+0x274>)
 801786c:	428b      	cmp	r3, r1
 801786e:	d819      	bhi.n	80178a4 <HAL_I2C_Init+0x13c>
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	1e59      	subs	r1, r3, #1
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	685b      	ldr	r3, [r3, #4]
 8017878:	005b      	lsls	r3, r3, #1
 801787a:	fbb1 f3f3 	udiv	r3, r1, r3
 801787e:	1c59      	adds	r1, r3, #1
 8017880:	f640 73fc 	movw	r3, #4092	; 0xffc
 8017884:	400b      	ands	r3, r1
 8017886:	2b00      	cmp	r3, #0
 8017888:	d00a      	beq.n	80178a0 <HAL_I2C_Init+0x138>
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	1e59      	subs	r1, r3, #1
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	685b      	ldr	r3, [r3, #4]
 8017892:	005b      	lsls	r3, r3, #1
 8017894:	fbb1 f3f3 	udiv	r3, r1, r3
 8017898:	3301      	adds	r3, #1
 801789a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801789e:	e051      	b.n	8017944 <HAL_I2C_Init+0x1dc>
 80178a0:	2304      	movs	r3, #4
 80178a2:	e04f      	b.n	8017944 <HAL_I2C_Init+0x1dc>
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	689b      	ldr	r3, [r3, #8]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d111      	bne.n	80178d0 <HAL_I2C_Init+0x168>
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	1e58      	subs	r0, r3, #1
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	6859      	ldr	r1, [r3, #4]
 80178b4:	460b      	mov	r3, r1
 80178b6:	005b      	lsls	r3, r3, #1
 80178b8:	440b      	add	r3, r1
 80178ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80178be:	3301      	adds	r3, #1
 80178c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	bf0c      	ite	eq
 80178c8:	2301      	moveq	r3, #1
 80178ca:	2300      	movne	r3, #0
 80178cc:	b2db      	uxtb	r3, r3
 80178ce:	e012      	b.n	80178f6 <HAL_I2C_Init+0x18e>
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	1e58      	subs	r0, r3, #1
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6859      	ldr	r1, [r3, #4]
 80178d8:	460b      	mov	r3, r1
 80178da:	009b      	lsls	r3, r3, #2
 80178dc:	440b      	add	r3, r1
 80178de:	0099      	lsls	r1, r3, #2
 80178e0:	440b      	add	r3, r1
 80178e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80178e6:	3301      	adds	r3, #1
 80178e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	bf0c      	ite	eq
 80178f0:	2301      	moveq	r3, #1
 80178f2:	2300      	movne	r3, #0
 80178f4:	b2db      	uxtb	r3, r3
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d001      	beq.n	80178fe <HAL_I2C_Init+0x196>
 80178fa:	2301      	movs	r3, #1
 80178fc:	e022      	b.n	8017944 <HAL_I2C_Init+0x1dc>
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	689b      	ldr	r3, [r3, #8]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d10e      	bne.n	8017924 <HAL_I2C_Init+0x1bc>
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	1e58      	subs	r0, r3, #1
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6859      	ldr	r1, [r3, #4]
 801790e:	460b      	mov	r3, r1
 8017910:	005b      	lsls	r3, r3, #1
 8017912:	440b      	add	r3, r1
 8017914:	fbb0 f3f3 	udiv	r3, r0, r3
 8017918:	3301      	adds	r3, #1
 801791a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801791e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017922:	e00f      	b.n	8017944 <HAL_I2C_Init+0x1dc>
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	1e58      	subs	r0, r3, #1
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	6859      	ldr	r1, [r3, #4]
 801792c:	460b      	mov	r3, r1
 801792e:	009b      	lsls	r3, r3, #2
 8017930:	440b      	add	r3, r1
 8017932:	0099      	lsls	r1, r3, #2
 8017934:	440b      	add	r3, r1
 8017936:	fbb0 f3f3 	udiv	r3, r0, r3
 801793a:	3301      	adds	r3, #1
 801793c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017944:	6879      	ldr	r1, [r7, #4]
 8017946:	6809      	ldr	r1, [r1, #0]
 8017948:	4313      	orrs	r3, r2
 801794a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	69da      	ldr	r2, [r3, #28]
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	6a1b      	ldr	r3, [r3, #32]
 801795e:	431a      	orrs	r2, r3
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	430a      	orrs	r2, r1
 8017966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	689b      	ldr	r3, [r3, #8]
 801796e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8017972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8017976:	687a      	ldr	r2, [r7, #4]
 8017978:	6911      	ldr	r1, [r2, #16]
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	68d2      	ldr	r2, [r2, #12]
 801797e:	4311      	orrs	r1, r2
 8017980:	687a      	ldr	r2, [r7, #4]
 8017982:	6812      	ldr	r2, [r2, #0]
 8017984:	430b      	orrs	r3, r1
 8017986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	68db      	ldr	r3, [r3, #12]
 801798e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	695a      	ldr	r2, [r3, #20]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	699b      	ldr	r3, [r3, #24]
 801799a:	431a      	orrs	r2, r3
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	430a      	orrs	r2, r1
 80179a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	681a      	ldr	r2, [r3, #0]
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	f042 0201 	orr.w	r2, r2, #1
 80179b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2200      	movs	r2, #0
 80179b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	2220      	movs	r2, #32
 80179be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	2200      	movs	r2, #0
 80179c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	2200      	movs	r2, #0
 80179cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80179d0:	2300      	movs	r3, #0
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3710      	adds	r7, #16
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	000186a0 	.word	0x000186a0
 80179e0:	001e847f 	.word	0x001e847f
 80179e4:	003d08ff 	.word	0x003d08ff
 80179e8:	431bde83 	.word	0x431bde83
 80179ec:	10624dd3 	.word	0x10624dd3

080179f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b088      	sub	sp, #32
 80179f4:	af02      	add	r7, sp, #8
 80179f6:	60f8      	str	r0, [r7, #12]
 80179f8:	4608      	mov	r0, r1
 80179fa:	4611      	mov	r1, r2
 80179fc:	461a      	mov	r2, r3
 80179fe:	4603      	mov	r3, r0
 8017a00:	817b      	strh	r3, [r7, #10]
 8017a02:	460b      	mov	r3, r1
 8017a04:	813b      	strh	r3, [r7, #8]
 8017a06:	4613      	mov	r3, r2
 8017a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017a0a:	f7fe ff8d 	bl	8016928 <HAL_GetTick>
 8017a0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017a16:	b2db      	uxtb	r3, r3
 8017a18:	2b20      	cmp	r3, #32
 8017a1a:	f040 80d9 	bne.w	8017bd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	9300      	str	r3, [sp, #0]
 8017a22:	2319      	movs	r3, #25
 8017a24:	2201      	movs	r2, #1
 8017a26:	496d      	ldr	r1, [pc, #436]	; (8017bdc <HAL_I2C_Mem_Write+0x1ec>)
 8017a28:	68f8      	ldr	r0, [r7, #12]
 8017a2a:	f002 fad1 	bl	8019fd0 <I2C_WaitOnFlagUntilTimeout>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d001      	beq.n	8017a38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8017a34:	2302      	movs	r3, #2
 8017a36:	e0cc      	b.n	8017bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017a3e:	2b01      	cmp	r3, #1
 8017a40:	d101      	bne.n	8017a46 <HAL_I2C_Mem_Write+0x56>
 8017a42:	2302      	movs	r3, #2
 8017a44:	e0c5      	b.n	8017bd2 <HAL_I2C_Mem_Write+0x1e2>
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	2201      	movs	r2, #1
 8017a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	f003 0301 	and.w	r3, r3, #1
 8017a58:	2b01      	cmp	r3, #1
 8017a5a:	d007      	beq.n	8017a6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	681a      	ldr	r2, [r3, #0]
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f042 0201 	orr.w	r2, r2, #1
 8017a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	681a      	ldr	r2, [r3, #0]
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	2221      	movs	r2, #33	; 0x21
 8017a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	2240      	movs	r2, #64	; 0x40
 8017a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	2200      	movs	r2, #0
 8017a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	6a3a      	ldr	r2, [r7, #32]
 8017a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017aa2:	b29a      	uxth	r2, r3
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	4a4d      	ldr	r2, [pc, #308]	; (8017be0 <HAL_I2C_Mem_Write+0x1f0>)
 8017aac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017aae:	88f8      	ldrh	r0, [r7, #6]
 8017ab0:	893a      	ldrh	r2, [r7, #8]
 8017ab2:	8979      	ldrh	r1, [r7, #10]
 8017ab4:	697b      	ldr	r3, [r7, #20]
 8017ab6:	9301      	str	r3, [sp, #4]
 8017ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aba:	9300      	str	r3, [sp, #0]
 8017abc:	4603      	mov	r3, r0
 8017abe:	68f8      	ldr	r0, [r7, #12]
 8017ac0:	f002 f860 	bl	8019b84 <I2C_RequestMemoryWrite>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d052      	beq.n	8017b70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8017aca:	2301      	movs	r3, #1
 8017acc:	e081      	b.n	8017bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017ace:	697a      	ldr	r2, [r7, #20]
 8017ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017ad2:	68f8      	ldr	r0, [r7, #12]
 8017ad4:	f002 fb52 	bl	801a17c <I2C_WaitOnTXEFlagUntilTimeout>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d00d      	beq.n	8017afa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ae2:	2b04      	cmp	r3, #4
 8017ae4:	d107      	bne.n	8017af6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	681a      	ldr	r2, [r3, #0]
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017af4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8017af6:	2301      	movs	r3, #1
 8017af8:	e06b      	b.n	8017bd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017afe:	781a      	ldrb	r2, [r3, #0]
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b0a:	1c5a      	adds	r2, r3, #1
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b14:	3b01      	subs	r3, #1
 8017b16:	b29a      	uxth	r2, r3
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b20:	b29b      	uxth	r3, r3
 8017b22:	3b01      	subs	r3, #1
 8017b24:	b29a      	uxth	r2, r3
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	695b      	ldr	r3, [r3, #20]
 8017b30:	f003 0304 	and.w	r3, r3, #4
 8017b34:	2b04      	cmp	r3, #4
 8017b36:	d11b      	bne.n	8017b70 <HAL_I2C_Mem_Write+0x180>
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d017      	beq.n	8017b70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b44:	781a      	ldrb	r2, [r3, #0]
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b50:	1c5a      	adds	r2, r3, #1
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b5a:	3b01      	subs	r3, #1
 8017b5c:	b29a      	uxth	r2, r3
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	3b01      	subs	r3, #1
 8017b6a:	b29a      	uxth	r2, r3
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d1aa      	bne.n	8017ace <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017b78:	697a      	ldr	r2, [r7, #20]
 8017b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017b7c:	68f8      	ldr	r0, [r7, #12]
 8017b7e:	f002 fb3e 	bl	801a1fe <I2C_WaitOnBTFFlagUntilTimeout>
 8017b82:	4603      	mov	r3, r0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d00d      	beq.n	8017ba4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b8c:	2b04      	cmp	r3, #4
 8017b8e:	d107      	bne.n	8017ba0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	681a      	ldr	r2, [r3, #0]
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	e016      	b.n	8017bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	681a      	ldr	r2, [r3, #0]
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	2220      	movs	r2, #32
 8017bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	e000      	b.n	8017bd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8017bd0:	2302      	movs	r3, #2
  }
}
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	3718      	adds	r7, #24
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	bd80      	pop	{r7, pc}
 8017bda:	bf00      	nop
 8017bdc:	00100002 	.word	0x00100002
 8017be0:	ffff0000 	.word	0xffff0000

08017be4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b08c      	sub	sp, #48	; 0x30
 8017be8:	af02      	add	r7, sp, #8
 8017bea:	60f8      	str	r0, [r7, #12]
 8017bec:	4608      	mov	r0, r1
 8017bee:	4611      	mov	r1, r2
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	817b      	strh	r3, [r7, #10]
 8017bf6:	460b      	mov	r3, r1
 8017bf8:	813b      	strh	r3, [r7, #8]
 8017bfa:	4613      	mov	r3, r2
 8017bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017bfe:	f7fe fe93 	bl	8016928 <HAL_GetTick>
 8017c02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	2b20      	cmp	r3, #32
 8017c0e:	f040 8208 	bne.w	8018022 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c14:	9300      	str	r3, [sp, #0]
 8017c16:	2319      	movs	r3, #25
 8017c18:	2201      	movs	r2, #1
 8017c1a:	497b      	ldr	r1, [pc, #492]	; (8017e08 <HAL_I2C_Mem_Read+0x224>)
 8017c1c:	68f8      	ldr	r0, [r7, #12]
 8017c1e:	f002 f9d7 	bl	8019fd0 <I2C_WaitOnFlagUntilTimeout>
 8017c22:	4603      	mov	r3, r0
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d001      	beq.n	8017c2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017c28:	2302      	movs	r3, #2
 8017c2a:	e1fb      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	d101      	bne.n	8017c3a <HAL_I2C_Mem_Read+0x56>
 8017c36:	2302      	movs	r3, #2
 8017c38:	e1f4      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	2201      	movs	r2, #1
 8017c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	f003 0301 	and.w	r3, r3, #1
 8017c4c:	2b01      	cmp	r3, #1
 8017c4e:	d007      	beq.n	8017c60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	681a      	ldr	r2, [r3, #0]
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	f042 0201 	orr.w	r2, r2, #1
 8017c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	681a      	ldr	r2, [r3, #0]
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	2222      	movs	r2, #34	; 0x22
 8017c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	2240      	movs	r2, #64	; 0x40
 8017c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	2200      	movs	r2, #0
 8017c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c96:	b29a      	uxth	r2, r3
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	4a5b      	ldr	r2, [pc, #364]	; (8017e0c <HAL_I2C_Mem_Read+0x228>)
 8017ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017ca2:	88f8      	ldrh	r0, [r7, #6]
 8017ca4:	893a      	ldrh	r2, [r7, #8]
 8017ca6:	8979      	ldrh	r1, [r7, #10]
 8017ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017caa:	9301      	str	r3, [sp, #4]
 8017cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cae:	9300      	str	r3, [sp, #0]
 8017cb0:	4603      	mov	r3, r0
 8017cb2:	68f8      	ldr	r0, [r7, #12]
 8017cb4:	f001 fffc 	bl	8019cb0 <I2C_RequestMemoryRead>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d001      	beq.n	8017cc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8017cbe:	2301      	movs	r3, #1
 8017cc0:	e1b0      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d113      	bne.n	8017cf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017cca:	2300      	movs	r3, #0
 8017ccc:	623b      	str	r3, [r7, #32]
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	695b      	ldr	r3, [r3, #20]
 8017cd4:	623b      	str	r3, [r7, #32]
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	699b      	ldr	r3, [r3, #24]
 8017cdc:	623b      	str	r3, [r7, #32]
 8017cde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017cee:	601a      	str	r2, [r3, #0]
 8017cf0:	e184      	b.n	8017ffc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017cf6:	2b01      	cmp	r3, #1
 8017cf8:	d11b      	bne.n	8017d32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	681a      	ldr	r2, [r3, #0]
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	61fb      	str	r3, [r7, #28]
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	695b      	ldr	r3, [r3, #20]
 8017d14:	61fb      	str	r3, [r7, #28]
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	699b      	ldr	r3, [r3, #24]
 8017d1c:	61fb      	str	r3, [r7, #28]
 8017d1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	681a      	ldr	r2, [r3, #0]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d2e:	601a      	str	r2, [r3, #0]
 8017d30:	e164      	b.n	8017ffc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d36:	2b02      	cmp	r3, #2
 8017d38:	d11b      	bne.n	8017d72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	681a      	ldr	r2, [r3, #0]
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017d48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	681a      	ldr	r2, [r3, #0]
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	61bb      	str	r3, [r7, #24]
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	695b      	ldr	r3, [r3, #20]
 8017d64:	61bb      	str	r3, [r7, #24]
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	699b      	ldr	r3, [r3, #24]
 8017d6c:	61bb      	str	r3, [r7, #24]
 8017d6e:	69bb      	ldr	r3, [r7, #24]
 8017d70:	e144      	b.n	8017ffc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017d72:	2300      	movs	r3, #0
 8017d74:	617b      	str	r3, [r7, #20]
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	695b      	ldr	r3, [r3, #20]
 8017d7c:	617b      	str	r3, [r7, #20]
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	699b      	ldr	r3, [r3, #24]
 8017d84:	617b      	str	r3, [r7, #20]
 8017d86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8017d88:	e138      	b.n	8017ffc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d8e:	2b03      	cmp	r3, #3
 8017d90:	f200 80f1 	bhi.w	8017f76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d98:	2b01      	cmp	r3, #1
 8017d9a:	d123      	bne.n	8017de4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017da0:	68f8      	ldr	r0, [r7, #12]
 8017da2:	f002 fa9f 	bl	801a2e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017da6:	4603      	mov	r3, r0
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d001      	beq.n	8017db0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017dac:	2301      	movs	r3, #1
 8017dae:	e139      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	691a      	ldr	r2, [r3, #16]
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dba:	b2d2      	uxtb	r2, r2
 8017dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dc2:	1c5a      	adds	r2, r3, #1
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017dcc:	3b01      	subs	r3, #1
 8017dce:	b29a      	uxth	r2, r3
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	3b01      	subs	r3, #1
 8017ddc:	b29a      	uxth	r2, r3
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017de2:	e10b      	b.n	8017ffc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017de4:	68fb      	ldr	r3, [r7, #12]
 8017de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017de8:	2b02      	cmp	r3, #2
 8017dea:	d14e      	bne.n	8017e8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dee:	9300      	str	r3, [sp, #0]
 8017df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017df2:	2200      	movs	r2, #0
 8017df4:	4906      	ldr	r1, [pc, #24]	; (8017e10 <HAL_I2C_Mem_Read+0x22c>)
 8017df6:	68f8      	ldr	r0, [r7, #12]
 8017df8:	f002 f8ea 	bl	8019fd0 <I2C_WaitOnFlagUntilTimeout>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d008      	beq.n	8017e14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8017e02:	2301      	movs	r3, #1
 8017e04:	e10e      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
 8017e06:	bf00      	nop
 8017e08:	00100002 	.word	0x00100002
 8017e0c:	ffff0000 	.word	0xffff0000
 8017e10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	681a      	ldr	r2, [r3, #0]
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	691a      	ldr	r2, [r3, #16]
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e2e:	b2d2      	uxtb	r2, r2
 8017e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e36:	1c5a      	adds	r2, r3, #1
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e40:	3b01      	subs	r3, #1
 8017e42:	b29a      	uxth	r2, r3
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e4c:	b29b      	uxth	r3, r3
 8017e4e:	3b01      	subs	r3, #1
 8017e50:	b29a      	uxth	r2, r3
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	691a      	ldr	r2, [r3, #16]
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e60:	b2d2      	uxtb	r2, r2
 8017e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e68:	1c5a      	adds	r2, r3, #1
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e72:	3b01      	subs	r3, #1
 8017e74:	b29a      	uxth	r2, r3
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e7e:	b29b      	uxth	r3, r3
 8017e80:	3b01      	subs	r3, #1
 8017e82:	b29a      	uxth	r2, r3
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017e88:	e0b8      	b.n	8017ffc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8c:	9300      	str	r3, [sp, #0]
 8017e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e90:	2200      	movs	r2, #0
 8017e92:	4966      	ldr	r1, [pc, #408]	; (801802c <HAL_I2C_Mem_Read+0x448>)
 8017e94:	68f8      	ldr	r0, [r7, #12]
 8017e96:	f002 f89b 	bl	8019fd0 <I2C_WaitOnFlagUntilTimeout>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d001      	beq.n	8017ea4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	e0bf      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	681a      	ldr	r2, [r3, #0]
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	691a      	ldr	r2, [r3, #16]
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ebe:	b2d2      	uxtb	r2, r2
 8017ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ec6:	1c5a      	adds	r2, r3, #1
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ed0:	3b01      	subs	r3, #1
 8017ed2:	b29a      	uxth	r2, r3
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	3b01      	subs	r3, #1
 8017ee0:	b29a      	uxth	r2, r3
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee8:	9300      	str	r3, [sp, #0]
 8017eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017eec:	2200      	movs	r2, #0
 8017eee:	494f      	ldr	r1, [pc, #316]	; (801802c <HAL_I2C_Mem_Read+0x448>)
 8017ef0:	68f8      	ldr	r0, [r7, #12]
 8017ef2:	f002 f86d 	bl	8019fd0 <I2C_WaitOnFlagUntilTimeout>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d001      	beq.n	8017f00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017efc:	2301      	movs	r3, #1
 8017efe:	e091      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	681a      	ldr	r2, [r3, #0]
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	691a      	ldr	r2, [r3, #16]
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f1a:	b2d2      	uxtb	r2, r2
 8017f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f22:	1c5a      	adds	r2, r3, #1
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f2c:	3b01      	subs	r3, #1
 8017f2e:	b29a      	uxth	r2, r3
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f38:	b29b      	uxth	r3, r3
 8017f3a:	3b01      	subs	r3, #1
 8017f3c:	b29a      	uxth	r2, r3
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	691a      	ldr	r2, [r3, #16]
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f4c:	b2d2      	uxtb	r2, r2
 8017f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f54:	1c5a      	adds	r2, r3, #1
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f5e:	3b01      	subs	r3, #1
 8017f60:	b29a      	uxth	r2, r3
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f6a:	b29b      	uxth	r3, r3
 8017f6c:	3b01      	subs	r3, #1
 8017f6e:	b29a      	uxth	r2, r3
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017f74:	e042      	b.n	8017ffc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017f7a:	68f8      	ldr	r0, [r7, #12]
 8017f7c:	f002 f9b2 	bl	801a2e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8017f80:	4603      	mov	r3, r0
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d001      	beq.n	8017f8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8017f86:	2301      	movs	r3, #1
 8017f88:	e04c      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	691a      	ldr	r2, [r3, #16]
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f94:	b2d2      	uxtb	r2, r2
 8017f96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f9c:	1c5a      	adds	r2, r3, #1
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fa6:	3b01      	subs	r3, #1
 8017fa8:	b29a      	uxth	r2, r3
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017fb2:	b29b      	uxth	r3, r3
 8017fb4:	3b01      	subs	r3, #1
 8017fb6:	b29a      	uxth	r2, r3
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	695b      	ldr	r3, [r3, #20]
 8017fc2:	f003 0304 	and.w	r3, r3, #4
 8017fc6:	2b04      	cmp	r3, #4
 8017fc8:	d118      	bne.n	8017ffc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	691a      	ldr	r2, [r3, #16]
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fd4:	b2d2      	uxtb	r2, r2
 8017fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fdc:	1c5a      	adds	r2, r3, #1
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fe6:	3b01      	subs	r3, #1
 8017fe8:	b29a      	uxth	r2, r3
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	3b01      	subs	r3, #1
 8017ff6:	b29a      	uxth	r2, r3
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018000:	2b00      	cmp	r3, #0
 8018002:	f47f aec2 	bne.w	8017d8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	2220      	movs	r2, #32
 801800a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	2200      	movs	r2, #0
 8018012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	2200      	movs	r2, #0
 801801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801801e:	2300      	movs	r3, #0
 8018020:	e000      	b.n	8018024 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8018022:	2302      	movs	r3, #2
  }
}
 8018024:	4618      	mov	r0, r3
 8018026:	3728      	adds	r7, #40	; 0x28
 8018028:	46bd      	mov	sp, r7
 801802a:	bd80      	pop	{r7, pc}
 801802c:	00010004 	.word	0x00010004

08018030 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8018030:	b480      	push	{r7}
 8018032:	b087      	sub	sp, #28
 8018034:	af00      	add	r7, sp, #0
 8018036:	60f8      	str	r0, [r7, #12]
 8018038:	607a      	str	r2, [r7, #4]
 801803a:	461a      	mov	r2, r3
 801803c:	460b      	mov	r3, r1
 801803e:	817b      	strh	r3, [r7, #10]
 8018040:	4613      	mov	r3, r2
 8018042:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8018044:	2300      	movs	r3, #0
 8018046:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8018048:	2300      	movs	r3, #0
 801804a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018052:	b2db      	uxtb	r3, r3
 8018054:	2b20      	cmp	r3, #32
 8018056:	f040 80a6 	bne.w	80181a6 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018068:	d005      	beq.n	8018076 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 801806a:	6a3b      	ldr	r3, [r7, #32]
 801806c:	2b08      	cmp	r3, #8
 801806e:	d002      	beq.n	8018076 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 8018070:	6a3b      	ldr	r3, [r7, #32]
 8018072:	2b01      	cmp	r3, #1
 8018074:	d130      	bne.n	80180d8 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8018076:	4b4f      	ldr	r3, [pc, #316]	; (80181b4 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	08db      	lsrs	r3, r3, #3
 801807c:	4a4e      	ldr	r2, [pc, #312]	; (80181b8 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 801807e:	fba2 2303 	umull	r2, r3, r2, r3
 8018082:	0a1a      	lsrs	r2, r3, #8
 8018084:	4613      	mov	r3, r2
 8018086:	009b      	lsls	r3, r3, #2
 8018088:	4413      	add	r3, r2
 801808a:	009a      	lsls	r2, r3, #2
 801808c:	4413      	add	r3, r2
 801808e:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	3b01      	subs	r3, #1
 8018094:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8018096:	693b      	ldr	r3, [r7, #16]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d116      	bne.n	80180ca <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	2200      	movs	r2, #0
 80180a0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	2220      	movs	r2, #32
 80180a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	2200      	movs	r2, #0
 80180ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180b6:	f043 0220 	orr.w	r2, r3, #32
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	2200      	movs	r2, #0
 80180c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80180c6:	2301      	movs	r3, #1
 80180c8:	e06e      	b.n	80181a8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	699b      	ldr	r3, [r3, #24]
 80180d0:	f003 0302 	and.w	r3, r3, #2
 80180d4:	2b02      	cmp	r3, #2
 80180d6:	d0db      	beq.n	8018090 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80180de:	2b01      	cmp	r3, #1
 80180e0:	d101      	bne.n	80180e6 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 80180e2:	2302      	movs	r3, #2
 80180e4:	e060      	b.n	80181a8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	2201      	movs	r2, #1
 80180ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	f003 0301 	and.w	r3, r3, #1
 80180f8:	2b01      	cmp	r3, #1
 80180fa:	d007      	beq.n	801810c <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	681a      	ldr	r2, [r3, #0]
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	f042 0201 	orr.w	r2, r2, #1
 801810a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	681a      	ldr	r2, [r3, #0]
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801811a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	2221      	movs	r2, #33	; 0x21
 8018120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	2210      	movs	r2, #16
 8018128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	2200      	movs	r2, #0
 8018130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	687a      	ldr	r2, [r7, #4]
 8018136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	893a      	ldrh	r2, [r7, #8]
 801813c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018142:	b29a      	uxth	r2, r3
 8018144:	68fb      	ldr	r3, [r7, #12]
 8018146:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	6a3a      	ldr	r2, [r7, #32]
 801814c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801814e:	897a      	ldrh	r2, [r7, #10]
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018158:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 801815a:	697b      	ldr	r3, [r7, #20]
 801815c:	2b11      	cmp	r3, #17
 801815e:	d10c      	bne.n	801817a <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8018160:	6a3b      	ldr	r3, [r7, #32]
 8018162:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018166:	d003      	beq.n	8018170 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8018168:	6a3b      	ldr	r3, [r7, #32]
 801816a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801816e:	d101      	bne.n	8018174 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 8018170:	2301      	movs	r3, #1
 8018172:	e000      	b.n	8018176 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 8018174:	2300      	movs	r3, #0
 8018176:	2b01      	cmp	r3, #1
 8018178:	d107      	bne.n	801818a <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	681a      	ldr	r2, [r3, #0]
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018188:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	2200      	movs	r2, #0
 801818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	685a      	ldr	r2, [r3, #4]
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80181a0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80181a2:	2300      	movs	r3, #0
 80181a4:	e000      	b.n	80181a8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80181a6:	2302      	movs	r3, #2
  }
}
 80181a8:	4618      	mov	r0, r3
 80181aa:	371c      	adds	r7, #28
 80181ac:	46bd      	mov	sp, r7
 80181ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b2:	4770      	bx	lr
 80181b4:	200001e0 	.word	0x200001e0
 80181b8:	14f8b589 	.word	0x14f8b589

080181bc <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80181bc:	b480      	push	{r7}
 80181be:	b089      	sub	sp, #36	; 0x24
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	60f8      	str	r0, [r7, #12]
 80181c4:	607a      	str	r2, [r7, #4]
 80181c6:	461a      	mov	r2, r3
 80181c8:	460b      	mov	r3, r1
 80181ca:	817b      	strh	r3, [r7, #10]
 80181cc:	4613      	mov	r3, r2
 80181ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80181d0:	2300      	movs	r3, #0
 80181d2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80181d4:	2300      	movs	r3, #0
 80181d6:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80181d8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80181dc:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80181e4:	b2db      	uxtb	r3, r3
 80181e6:	2b20      	cmp	r3, #32
 80181e8:	f040 80da 	bne.w	80183a0 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80181f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80181fa:	d005      	beq.n	8018208 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 80181fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181fe:	2b08      	cmp	r3, #8
 8018200:	d002      	beq.n	8018208 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8018202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018204:	2b01      	cmp	r3, #1
 8018206:	d130      	bne.n	801826a <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8018208:	4b69      	ldr	r3, [pc, #420]	; (80183b0 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	08db      	lsrs	r3, r3, #3
 801820e:	4a69      	ldr	r2, [pc, #420]	; (80183b4 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8018210:	fba2 2303 	umull	r2, r3, r2, r3
 8018214:	0a1a      	lsrs	r2, r3, #8
 8018216:	4613      	mov	r3, r2
 8018218:	009b      	lsls	r3, r3, #2
 801821a:	4413      	add	r3, r2
 801821c:	009a      	lsls	r2, r3, #2
 801821e:	4413      	add	r3, r2
 8018220:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8018222:	697b      	ldr	r3, [r7, #20]
 8018224:	3b01      	subs	r3, #1
 8018226:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8018228:	697b      	ldr	r3, [r7, #20]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d116      	bne.n	801825c <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	2200      	movs	r2, #0
 8018232:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	2220      	movs	r2, #32
 8018238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	2200      	movs	r2, #0
 8018240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018248:	f043 0220 	orr.w	r2, r3, #32
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	2200      	movs	r2, #0
 8018254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8018258:	2301      	movs	r3, #1
 801825a:	e0a2      	b.n	80183a2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	699b      	ldr	r3, [r3, #24]
 8018262:	f003 0302 	and.w	r3, r3, #2
 8018266:	2b02      	cmp	r3, #2
 8018268:	d0db      	beq.n	8018222 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018270:	2b01      	cmp	r3, #1
 8018272:	d101      	bne.n	8018278 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 8018274:	2302      	movs	r3, #2
 8018276:	e094      	b.n	80183a2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2201      	movs	r2, #1
 801827c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	f003 0301 	and.w	r3, r3, #1
 801828a:	2b01      	cmp	r3, #1
 801828c:	d007      	beq.n	801829e <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	681a      	ldr	r2, [r3, #0]
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	f042 0201 	orr.w	r2, r2, #1
 801829c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	681b      	ldr	r3, [r3, #0]
 80182a2:	681a      	ldr	r2, [r3, #0]
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80182ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	2222      	movs	r2, #34	; 0x22
 80182b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	2210      	movs	r2, #16
 80182ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	2200      	movs	r2, #0
 80182c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	687a      	ldr	r2, [r7, #4]
 80182c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	893a      	ldrh	r2, [r7, #8]
 80182ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182d4:	b29a      	uxth	r2, r3
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80182de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80182e0:	897a      	ldrh	r2, [r7, #10]
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182ea:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182f0:	b29b      	uxth	r3, r3
 80182f2:	2b02      	cmp	r3, #2
 80182f4:	d126      	bne.n	8018344 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 80182f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f8:	2b20      	cmp	r3, #32
 80182fa:	d002      	beq.n	8018302 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 80182fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182fe:	2b10      	cmp	r3, #16
 8018300:	d120      	bne.n	8018344 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018302:	69bb      	ldr	r3, [r7, #24]
 8018304:	2b12      	cmp	r3, #18
 8018306:	d114      	bne.n	8018332 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	681a      	ldr	r2, [r3, #0]
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018316:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	681a      	ldr	r2, [r3, #0]
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018326:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8018328:	69fb      	ldr	r3, [r7, #28]
 801832a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801832e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018330:	e010      	b.n	8018354 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	681a      	ldr	r2, [r3, #0]
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018340:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8018342:	e007      	b.n	8018354 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	681a      	ldr	r2, [r3, #0]
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018352:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8018354:	69bb      	ldr	r3, [r7, #24]
 8018356:	2b12      	cmp	r3, #18
 8018358:	d10c      	bne.n	8018374 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 801835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801835c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018360:	d003      	beq.n	801836a <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8018362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018364:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018368:	d101      	bne.n	801836e <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 801836a:	2301      	movs	r3, #1
 801836c:	e000      	b.n	8018370 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 801836e:	2300      	movs	r3, #0
 8018370:	2b01      	cmp	r3, #1
 8018372:	d107      	bne.n	8018384 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	681a      	ldr	r2, [r3, #0]
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018382:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	2200      	movs	r2, #0
 8018388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	6859      	ldr	r1, [r3, #4]
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	69fa      	ldr	r2, [r7, #28]
 8018398:	430a      	orrs	r2, r1
 801839a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 801839c:	2300      	movs	r3, #0
 801839e:	e000      	b.n	80183a2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80183a0:	2302      	movs	r3, #2
  }
}
 80183a2:	4618      	mov	r0, r3
 80183a4:	3724      	adds	r7, #36	; 0x24
 80183a6:	46bd      	mov	sp, r7
 80183a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ac:	4770      	bx	lr
 80183ae:	bf00      	nop
 80183b0:	200001e0 	.word	0x200001e0
 80183b4:	14f8b589 	.word	0x14f8b589

080183b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b088      	sub	sp, #32
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80183c0:	2300      	movs	r3, #0
 80183c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	685b      	ldr	r3, [r3, #4]
 80183ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80183d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80183e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80183e2:	7bfb      	ldrb	r3, [r7, #15]
 80183e4:	2b10      	cmp	r3, #16
 80183e6:	d003      	beq.n	80183f0 <HAL_I2C_EV_IRQHandler+0x38>
 80183e8:	7bfb      	ldrb	r3, [r7, #15]
 80183ea:	2b40      	cmp	r3, #64	; 0x40
 80183ec:	f040 80c1 	bne.w	8018572 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	699b      	ldr	r3, [r3, #24]
 80183f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	695b      	ldr	r3, [r3, #20]
 80183fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8018400:	69fb      	ldr	r3, [r7, #28]
 8018402:	f003 0301 	and.w	r3, r3, #1
 8018406:	2b00      	cmp	r3, #0
 8018408:	d10d      	bne.n	8018426 <HAL_I2C_EV_IRQHandler+0x6e>
 801840a:	693b      	ldr	r3, [r7, #16]
 801840c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018410:	d003      	beq.n	801841a <HAL_I2C_EV_IRQHandler+0x62>
 8018412:	693b      	ldr	r3, [r7, #16]
 8018414:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018418:	d101      	bne.n	801841e <HAL_I2C_EV_IRQHandler+0x66>
 801841a:	2301      	movs	r3, #1
 801841c:	e000      	b.n	8018420 <HAL_I2C_EV_IRQHandler+0x68>
 801841e:	2300      	movs	r3, #0
 8018420:	2b01      	cmp	r3, #1
 8018422:	f000 8132 	beq.w	801868a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018426:	69fb      	ldr	r3, [r7, #28]
 8018428:	f003 0301 	and.w	r3, r3, #1
 801842c:	2b00      	cmp	r3, #0
 801842e:	d00c      	beq.n	801844a <HAL_I2C_EV_IRQHandler+0x92>
 8018430:	697b      	ldr	r3, [r7, #20]
 8018432:	0a5b      	lsrs	r3, r3, #9
 8018434:	f003 0301 	and.w	r3, r3, #1
 8018438:	2b00      	cmp	r3, #0
 801843a:	d006      	beq.n	801844a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 801843c:	6878      	ldr	r0, [r7, #4]
 801843e:	f001 ffd6 	bl	801a3ee <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8018442:	6878      	ldr	r0, [r7, #4]
 8018444:	f000 fd83 	bl	8018f4e <I2C_Master_SB>
 8018448:	e092      	b.n	8018570 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801844a:	69fb      	ldr	r3, [r7, #28]
 801844c:	08db      	lsrs	r3, r3, #3
 801844e:	f003 0301 	and.w	r3, r3, #1
 8018452:	2b00      	cmp	r3, #0
 8018454:	d009      	beq.n	801846a <HAL_I2C_EV_IRQHandler+0xb2>
 8018456:	697b      	ldr	r3, [r7, #20]
 8018458:	0a5b      	lsrs	r3, r3, #9
 801845a:	f003 0301 	and.w	r3, r3, #1
 801845e:	2b00      	cmp	r3, #0
 8018460:	d003      	beq.n	801846a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8018462:	6878      	ldr	r0, [r7, #4]
 8018464:	f000 fdf9 	bl	801905a <I2C_Master_ADD10>
 8018468:	e082      	b.n	8018570 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801846a:	69fb      	ldr	r3, [r7, #28]
 801846c:	085b      	lsrs	r3, r3, #1
 801846e:	f003 0301 	and.w	r3, r3, #1
 8018472:	2b00      	cmp	r3, #0
 8018474:	d009      	beq.n	801848a <HAL_I2C_EV_IRQHandler+0xd2>
 8018476:	697b      	ldr	r3, [r7, #20]
 8018478:	0a5b      	lsrs	r3, r3, #9
 801847a:	f003 0301 	and.w	r3, r3, #1
 801847e:	2b00      	cmp	r3, #0
 8018480:	d003      	beq.n	801848a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f000 fe13 	bl	80190ae <I2C_Master_ADDR>
 8018488:	e072      	b.n	8018570 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 801848a:	69bb      	ldr	r3, [r7, #24]
 801848c:	089b      	lsrs	r3, r3, #2
 801848e:	f003 0301 	and.w	r3, r3, #1
 8018492:	2b00      	cmp	r3, #0
 8018494:	d03b      	beq.n	801850e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	685b      	ldr	r3, [r3, #4]
 801849c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80184a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80184a4:	f000 80f3 	beq.w	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80184a8:	69fb      	ldr	r3, [r7, #28]
 80184aa:	09db      	lsrs	r3, r3, #7
 80184ac:	f003 0301 	and.w	r3, r3, #1
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d00f      	beq.n	80184d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80184b4:	697b      	ldr	r3, [r7, #20]
 80184b6:	0a9b      	lsrs	r3, r3, #10
 80184b8:	f003 0301 	and.w	r3, r3, #1
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d009      	beq.n	80184d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	089b      	lsrs	r3, r3, #2
 80184c4:	f003 0301 	and.w	r3, r3, #1
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d103      	bne.n	80184d4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f000 f9f3 	bl	80188b8 <I2C_MasterTransmit_TXE>
 80184d2:	e04d      	b.n	8018570 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80184d4:	69fb      	ldr	r3, [r7, #28]
 80184d6:	089b      	lsrs	r3, r3, #2
 80184d8:	f003 0301 	and.w	r3, r3, #1
 80184dc:	2b00      	cmp	r3, #0
 80184de:	f000 80d6 	beq.w	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	0a5b      	lsrs	r3, r3, #9
 80184e6:	f003 0301 	and.w	r3, r3, #1
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	f000 80cf 	beq.w	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80184f0:	7bbb      	ldrb	r3, [r7, #14]
 80184f2:	2b21      	cmp	r3, #33	; 0x21
 80184f4:	d103      	bne.n	80184fe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f000 fa7a 	bl	80189f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80184fc:	e0c7      	b.n	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80184fe:	7bfb      	ldrb	r3, [r7, #15]
 8018500:	2b40      	cmp	r3, #64	; 0x40
 8018502:	f040 80c4 	bne.w	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8018506:	6878      	ldr	r0, [r7, #4]
 8018508:	f000 fae8 	bl	8018adc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801850c:	e0bf      	b.n	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	685b      	ldr	r3, [r3, #4]
 8018514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801851c:	f000 80b7 	beq.w	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018520:	69fb      	ldr	r3, [r7, #28]
 8018522:	099b      	lsrs	r3, r3, #6
 8018524:	f003 0301 	and.w	r3, r3, #1
 8018528:	2b00      	cmp	r3, #0
 801852a:	d00f      	beq.n	801854c <HAL_I2C_EV_IRQHandler+0x194>
 801852c:	697b      	ldr	r3, [r7, #20]
 801852e:	0a9b      	lsrs	r3, r3, #10
 8018530:	f003 0301 	and.w	r3, r3, #1
 8018534:	2b00      	cmp	r3, #0
 8018536:	d009      	beq.n	801854c <HAL_I2C_EV_IRQHandler+0x194>
 8018538:	69fb      	ldr	r3, [r7, #28]
 801853a:	089b      	lsrs	r3, r3, #2
 801853c:	f003 0301 	and.w	r3, r3, #1
 8018540:	2b00      	cmp	r3, #0
 8018542:	d103      	bne.n	801854c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8018544:	6878      	ldr	r0, [r7, #4]
 8018546:	f000 fb5d 	bl	8018c04 <I2C_MasterReceive_RXNE>
 801854a:	e011      	b.n	8018570 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801854c:	69fb      	ldr	r3, [r7, #28]
 801854e:	089b      	lsrs	r3, r3, #2
 8018550:	f003 0301 	and.w	r3, r3, #1
 8018554:	2b00      	cmp	r3, #0
 8018556:	f000 809a 	beq.w	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
 801855a:	697b      	ldr	r3, [r7, #20]
 801855c:	0a5b      	lsrs	r3, r3, #9
 801855e:	f003 0301 	and.w	r3, r3, #1
 8018562:	2b00      	cmp	r3, #0
 8018564:	f000 8093 	beq.w	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8018568:	6878      	ldr	r0, [r7, #4]
 801856a:	f000 fc06 	bl	8018d7a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801856e:	e08e      	b.n	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
 8018570:	e08d      	b.n	801868e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018576:	2b00      	cmp	r3, #0
 8018578:	d004      	beq.n	8018584 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	695b      	ldr	r3, [r3, #20]
 8018580:	61fb      	str	r3, [r7, #28]
 8018582:	e007      	b.n	8018594 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	699b      	ldr	r3, [r3, #24]
 801858a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	695b      	ldr	r3, [r3, #20]
 8018592:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8018594:	69fb      	ldr	r3, [r7, #28]
 8018596:	085b      	lsrs	r3, r3, #1
 8018598:	f003 0301 	and.w	r3, r3, #1
 801859c:	2b00      	cmp	r3, #0
 801859e:	d012      	beq.n	80185c6 <HAL_I2C_EV_IRQHandler+0x20e>
 80185a0:	697b      	ldr	r3, [r7, #20]
 80185a2:	0a5b      	lsrs	r3, r3, #9
 80185a4:	f003 0301 	and.w	r3, r3, #1
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d00c      	beq.n	80185c6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d003      	beq.n	80185bc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	699b      	ldr	r3, [r3, #24]
 80185ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80185bc:	69b9      	ldr	r1, [r7, #24]
 80185be:	6878      	ldr	r0, [r7, #4]
 80185c0:	f000 ffc4 	bl	801954c <I2C_Slave_ADDR>
 80185c4:	e066      	b.n	8018694 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80185c6:	69fb      	ldr	r3, [r7, #28]
 80185c8:	091b      	lsrs	r3, r3, #4
 80185ca:	f003 0301 	and.w	r3, r3, #1
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d009      	beq.n	80185e6 <HAL_I2C_EV_IRQHandler+0x22e>
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	0a5b      	lsrs	r3, r3, #9
 80185d6:	f003 0301 	and.w	r3, r3, #1
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d003      	beq.n	80185e6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80185de:	6878      	ldr	r0, [r7, #4]
 80185e0:	f000 fffe 	bl	80195e0 <I2C_Slave_STOPF>
 80185e4:	e056      	b.n	8018694 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80185e6:	7bbb      	ldrb	r3, [r7, #14]
 80185e8:	2b21      	cmp	r3, #33	; 0x21
 80185ea:	d002      	beq.n	80185f2 <HAL_I2C_EV_IRQHandler+0x23a>
 80185ec:	7bbb      	ldrb	r3, [r7, #14]
 80185ee:	2b29      	cmp	r3, #41	; 0x29
 80185f0:	d125      	bne.n	801863e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80185f2:	69fb      	ldr	r3, [r7, #28]
 80185f4:	09db      	lsrs	r3, r3, #7
 80185f6:	f003 0301 	and.w	r3, r3, #1
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d00f      	beq.n	801861e <HAL_I2C_EV_IRQHandler+0x266>
 80185fe:	697b      	ldr	r3, [r7, #20]
 8018600:	0a9b      	lsrs	r3, r3, #10
 8018602:	f003 0301 	and.w	r3, r3, #1
 8018606:	2b00      	cmp	r3, #0
 8018608:	d009      	beq.n	801861e <HAL_I2C_EV_IRQHandler+0x266>
 801860a:	69fb      	ldr	r3, [r7, #28]
 801860c:	089b      	lsrs	r3, r3, #2
 801860e:	f003 0301 	and.w	r3, r3, #1
 8018612:	2b00      	cmp	r3, #0
 8018614:	d103      	bne.n	801861e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f000 feda 	bl	80193d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801861c:	e039      	b.n	8018692 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801861e:	69fb      	ldr	r3, [r7, #28]
 8018620:	089b      	lsrs	r3, r3, #2
 8018622:	f003 0301 	and.w	r3, r3, #1
 8018626:	2b00      	cmp	r3, #0
 8018628:	d033      	beq.n	8018692 <HAL_I2C_EV_IRQHandler+0x2da>
 801862a:	697b      	ldr	r3, [r7, #20]
 801862c:	0a5b      	lsrs	r3, r3, #9
 801862e:	f003 0301 	and.w	r3, r3, #1
 8018632:	2b00      	cmp	r3, #0
 8018634:	d02d      	beq.n	8018692 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8018636:	6878      	ldr	r0, [r7, #4]
 8018638:	f000 ff07 	bl	801944a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801863c:	e029      	b.n	8018692 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 801863e:	69fb      	ldr	r3, [r7, #28]
 8018640:	099b      	lsrs	r3, r3, #6
 8018642:	f003 0301 	and.w	r3, r3, #1
 8018646:	2b00      	cmp	r3, #0
 8018648:	d00f      	beq.n	801866a <HAL_I2C_EV_IRQHandler+0x2b2>
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	0a9b      	lsrs	r3, r3, #10
 801864e:	f003 0301 	and.w	r3, r3, #1
 8018652:	2b00      	cmp	r3, #0
 8018654:	d009      	beq.n	801866a <HAL_I2C_EV_IRQHandler+0x2b2>
 8018656:	69fb      	ldr	r3, [r7, #28]
 8018658:	089b      	lsrs	r3, r3, #2
 801865a:	f003 0301 	and.w	r3, r3, #1
 801865e:	2b00      	cmp	r3, #0
 8018660:	d103      	bne.n	801866a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	f000 ff12 	bl	801948c <I2C_SlaveReceive_RXNE>
 8018668:	e014      	b.n	8018694 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801866a:	69fb      	ldr	r3, [r7, #28]
 801866c:	089b      	lsrs	r3, r3, #2
 801866e:	f003 0301 	and.w	r3, r3, #1
 8018672:	2b00      	cmp	r3, #0
 8018674:	d00e      	beq.n	8018694 <HAL_I2C_EV_IRQHandler+0x2dc>
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	0a5b      	lsrs	r3, r3, #9
 801867a:	f003 0301 	and.w	r3, r3, #1
 801867e:	2b00      	cmp	r3, #0
 8018680:	d008      	beq.n	8018694 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8018682:	6878      	ldr	r0, [r7, #4]
 8018684:	f000 ff40 	bl	8019508 <I2C_SlaveReceive_BTF>
 8018688:	e004      	b.n	8018694 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 801868a:	bf00      	nop
 801868c:	e002      	b.n	8018694 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801868e:	bf00      	nop
 8018690:	e000      	b.n	8018694 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8018692:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8018694:	3720      	adds	r7, #32
 8018696:	46bd      	mov	sp, r7
 8018698:	bd80      	pop	{r7, pc}

0801869a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801869a:	b580      	push	{r7, lr}
 801869c:	b08a      	sub	sp, #40	; 0x28
 801869e:	af00      	add	r7, sp, #0
 80186a0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	695b      	ldr	r3, [r3, #20]
 80186a8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	685b      	ldr	r3, [r3, #4]
 80186b0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80186b2:	2300      	movs	r3, #0
 80186b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80186bc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80186be:	6a3b      	ldr	r3, [r7, #32]
 80186c0:	0a1b      	lsrs	r3, r3, #8
 80186c2:	f003 0301 	and.w	r3, r3, #1
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d00e      	beq.n	80186e8 <HAL_I2C_ER_IRQHandler+0x4e>
 80186ca:	69fb      	ldr	r3, [r7, #28]
 80186cc:	0a1b      	lsrs	r3, r3, #8
 80186ce:	f003 0301 	and.w	r3, r3, #1
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d008      	beq.n	80186e8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80186d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d8:	f043 0301 	orr.w	r3, r3, #1
 80186dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80186e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80186e8:	6a3b      	ldr	r3, [r7, #32]
 80186ea:	0a5b      	lsrs	r3, r3, #9
 80186ec:	f003 0301 	and.w	r3, r3, #1
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d00e      	beq.n	8018712 <HAL_I2C_ER_IRQHandler+0x78>
 80186f4:	69fb      	ldr	r3, [r7, #28]
 80186f6:	0a1b      	lsrs	r3, r3, #8
 80186f8:	f003 0301 	and.w	r3, r3, #1
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d008      	beq.n	8018712 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8018700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018702:	f043 0302 	orr.w	r3, r3, #2
 8018706:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8018710:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8018712:	6a3b      	ldr	r3, [r7, #32]
 8018714:	0a9b      	lsrs	r3, r3, #10
 8018716:	f003 0301 	and.w	r3, r3, #1
 801871a:	2b00      	cmp	r3, #0
 801871c:	d03f      	beq.n	801879e <HAL_I2C_ER_IRQHandler+0x104>
 801871e:	69fb      	ldr	r3, [r7, #28]
 8018720:	0a1b      	lsrs	r3, r3, #8
 8018722:	f003 0301 	and.w	r3, r3, #1
 8018726:	2b00      	cmp	r3, #0
 8018728:	d039      	beq.n	801879e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801872a:	7efb      	ldrb	r3, [r7, #27]
 801872c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018732:	b29b      	uxth	r3, r3
 8018734:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801873c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018742:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8018744:	7ebb      	ldrb	r3, [r7, #26]
 8018746:	2b20      	cmp	r3, #32
 8018748:	d112      	bne.n	8018770 <HAL_I2C_ER_IRQHandler+0xd6>
 801874a:	697b      	ldr	r3, [r7, #20]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d10f      	bne.n	8018770 <HAL_I2C_ER_IRQHandler+0xd6>
 8018750:	7cfb      	ldrb	r3, [r7, #19]
 8018752:	2b21      	cmp	r3, #33	; 0x21
 8018754:	d008      	beq.n	8018768 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8018756:	7cfb      	ldrb	r3, [r7, #19]
 8018758:	2b29      	cmp	r3, #41	; 0x29
 801875a:	d005      	beq.n	8018768 <HAL_I2C_ER_IRQHandler+0xce>
 801875c:	7cfb      	ldrb	r3, [r7, #19]
 801875e:	2b28      	cmp	r3, #40	; 0x28
 8018760:	d106      	bne.n	8018770 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	2b21      	cmp	r3, #33	; 0x21
 8018766:	d103      	bne.n	8018770 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8018768:	6878      	ldr	r0, [r7, #4]
 801876a:	f001 f869 	bl	8019840 <I2C_Slave_AF>
 801876e:	e016      	b.n	801879e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018778:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801877c:	f043 0304 	orr.w	r3, r3, #4
 8018780:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8018782:	7efb      	ldrb	r3, [r7, #27]
 8018784:	2b10      	cmp	r3, #16
 8018786:	d002      	beq.n	801878e <HAL_I2C_ER_IRQHandler+0xf4>
 8018788:	7efb      	ldrb	r3, [r7, #27]
 801878a:	2b40      	cmp	r3, #64	; 0x40
 801878c:	d107      	bne.n	801879e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	681a      	ldr	r2, [r3, #0]
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801879c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 801879e:	6a3b      	ldr	r3, [r7, #32]
 80187a0:	0adb      	lsrs	r3, r3, #11
 80187a2:	f003 0301 	and.w	r3, r3, #1
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d00e      	beq.n	80187c8 <HAL_I2C_ER_IRQHandler+0x12e>
 80187aa:	69fb      	ldr	r3, [r7, #28]
 80187ac:	0a1b      	lsrs	r3, r3, #8
 80187ae:	f003 0301 	and.w	r3, r3, #1
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d008      	beq.n	80187c8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80187b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b8:	f043 0308 	orr.w	r3, r3, #8
 80187bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80187c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80187c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d008      	beq.n	80187e0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80187d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d4:	431a      	orrs	r2, r3
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f001 f8a0 	bl	8019920 <I2C_ITError>
  }
}
 80187e0:	bf00      	nop
 80187e2:	3728      	adds	r7, #40	; 0x28
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}

080187e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80187e8:	b480      	push	{r7}
 80187ea:	b083      	sub	sp, #12
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80187f0:	bf00      	nop
 80187f2:	370c      	adds	r7, #12
 80187f4:	46bd      	mov	sp, r7
 80187f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187fa:	4770      	bx	lr

080187fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80187fc:	b480      	push	{r7}
 80187fe:	b083      	sub	sp, #12
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8018804:	bf00      	nop
 8018806:	370c      	adds	r7, #12
 8018808:	46bd      	mov	sp, r7
 801880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801880e:	4770      	bx	lr

08018810 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018810:	b480      	push	{r7}
 8018812:	b083      	sub	sp, #12
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8018818:	bf00      	nop
 801881a:	370c      	adds	r7, #12
 801881c:	46bd      	mov	sp, r7
 801881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018822:	4770      	bx	lr

08018824 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018824:	b480      	push	{r7}
 8018826:	b083      	sub	sp, #12
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801882c:	bf00      	nop
 801882e:	370c      	adds	r7, #12
 8018830:	46bd      	mov	sp, r7
 8018832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018836:	4770      	bx	lr

08018838 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8018838:	b480      	push	{r7}
 801883a:	b083      	sub	sp, #12
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
 8018840:	460b      	mov	r3, r1
 8018842:	70fb      	strb	r3, [r7, #3]
 8018844:	4613      	mov	r3, r2
 8018846:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8018848:	bf00      	nop
 801884a:	370c      	adds	r7, #12
 801884c:	46bd      	mov	sp, r7
 801884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018852:	4770      	bx	lr

08018854 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018854:	b480      	push	{r7}
 8018856:	b083      	sub	sp, #12
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 801885c:	bf00      	nop
 801885e:	370c      	adds	r7, #12
 8018860:	46bd      	mov	sp, r7
 8018862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018866:	4770      	bx	lr

08018868 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8018868:	b480      	push	{r7}
 801886a:	b083      	sub	sp, #12
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8018870:	bf00      	nop
 8018872:	370c      	adds	r7, #12
 8018874:	46bd      	mov	sp, r7
 8018876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801887a:	4770      	bx	lr

0801887c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801887c:	b480      	push	{r7}
 801887e:	b083      	sub	sp, #12
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8018884:	bf00      	nop
 8018886:	370c      	adds	r7, #12
 8018888:	46bd      	mov	sp, r7
 801888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801888e:	4770      	bx	lr

08018890 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8018890:	b480      	push	{r7}
 8018892:	b083      	sub	sp, #12
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8018898:	bf00      	nop
 801889a:	370c      	adds	r7, #12
 801889c:	46bd      	mov	sp, r7
 801889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a2:	4770      	bx	lr

080188a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80188a4:	b480      	push	{r7}
 80188a6:	b083      	sub	sp, #12
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80188ac:	bf00      	nop
 80188ae:	370c      	adds	r7, #12
 80188b0:	46bd      	mov	sp, r7
 80188b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b6:	4770      	bx	lr

080188b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b084      	sub	sp, #16
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80188c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80188ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d150      	bne.n	8018980 <I2C_MasterTransmit_TXE+0xc8>
 80188de:	7bfb      	ldrb	r3, [r7, #15]
 80188e0:	2b21      	cmp	r3, #33	; 0x21
 80188e2:	d14d      	bne.n	8018980 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	2b08      	cmp	r3, #8
 80188e8:	d01d      	beq.n	8018926 <I2C_MasterTransmit_TXE+0x6e>
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	2b20      	cmp	r3, #32
 80188ee:	d01a      	beq.n	8018926 <I2C_MasterTransmit_TXE+0x6e>
 80188f0:	68bb      	ldr	r3, [r7, #8]
 80188f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80188f6:	d016      	beq.n	8018926 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	685a      	ldr	r2, [r3, #4]
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018906:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2211      	movs	r2, #17
 801890c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	2200      	movs	r2, #0
 8018912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	2220      	movs	r2, #32
 801891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801891e:	6878      	ldr	r0, [r7, #4]
 8018920:	f7ff ff62 	bl	80187e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018924:	e060      	b.n	80189e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	685a      	ldr	r2, [r3, #4]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018934:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	681a      	ldr	r2, [r3, #0]
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018944:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	2200      	movs	r2, #0
 801894a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	2220      	movs	r2, #32
 8018950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801895a:	b2db      	uxtb	r3, r3
 801895c:	2b40      	cmp	r3, #64	; 0x40
 801895e:	d107      	bne.n	8018970 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	2200      	movs	r2, #0
 8018964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8018968:	6878      	ldr	r0, [r7, #4]
 801896a:	f7ff ff7d 	bl	8018868 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801896e:	e03b      	b.n	80189e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	2200      	movs	r2, #0
 8018974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018978:	6878      	ldr	r0, [r7, #4]
 801897a:	f7ff ff35 	bl	80187e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801897e:	e033      	b.n	80189e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8018980:	7bfb      	ldrb	r3, [r7, #15]
 8018982:	2b21      	cmp	r3, #33	; 0x21
 8018984:	d005      	beq.n	8018992 <I2C_MasterTransmit_TXE+0xda>
 8018986:	7bbb      	ldrb	r3, [r7, #14]
 8018988:	2b40      	cmp	r3, #64	; 0x40
 801898a:	d12d      	bne.n	80189e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 801898c:	7bfb      	ldrb	r3, [r7, #15]
 801898e:	2b22      	cmp	r3, #34	; 0x22
 8018990:	d12a      	bne.n	80189e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018996:	b29b      	uxth	r3, r3
 8018998:	2b00      	cmp	r3, #0
 801899a:	d108      	bne.n	80189ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	685a      	ldr	r2, [r3, #4]
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80189aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80189ac:	e01c      	b.n	80189e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	2b40      	cmp	r3, #64	; 0x40
 80189b8:	d103      	bne.n	80189c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80189ba:	6878      	ldr	r0, [r7, #4]
 80189bc:	f000 f88e 	bl	8018adc <I2C_MemoryTransmit_TXE_BTF>
}
 80189c0:	e012      	b.n	80189e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c6:	781a      	ldrb	r2, [r3, #0]
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189d2:	1c5a      	adds	r2, r3, #1
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189dc:	b29b      	uxth	r3, r3
 80189de:	3b01      	subs	r3, #1
 80189e0:	b29a      	uxth	r2, r3
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80189e6:	e7ff      	b.n	80189e8 <I2C_MasterTransmit_TXE+0x130>
 80189e8:	bf00      	nop
 80189ea:	3710      	adds	r7, #16
 80189ec:	46bd      	mov	sp, r7
 80189ee:	bd80      	pop	{r7, pc}

080189f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b084      	sub	sp, #16
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	2b21      	cmp	r3, #33	; 0x21
 8018a08:	d164      	bne.n	8018ad4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a0e:	b29b      	uxth	r3, r3
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d012      	beq.n	8018a3a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a18:	781a      	ldrb	r2, [r3, #0]
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a24:	1c5a      	adds	r2, r3, #1
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a2e:	b29b      	uxth	r3, r3
 8018a30:	3b01      	subs	r3, #1
 8018a32:	b29a      	uxth	r2, r3
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8018a38:	e04c      	b.n	8018ad4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	2b08      	cmp	r3, #8
 8018a3e:	d01d      	beq.n	8018a7c <I2C_MasterTransmit_BTF+0x8c>
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	2b20      	cmp	r3, #32
 8018a44:	d01a      	beq.n	8018a7c <I2C_MasterTransmit_BTF+0x8c>
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018a4c:	d016      	beq.n	8018a7c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	685a      	ldr	r2, [r3, #4]
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018a5c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	2211      	movs	r2, #17
 8018a62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	2200      	movs	r2, #0
 8018a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	2220      	movs	r2, #32
 8018a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8018a74:	6878      	ldr	r0, [r7, #4]
 8018a76:	f7ff feb7 	bl	80187e8 <HAL_I2C_MasterTxCpltCallback>
}
 8018a7a:	e02b      	b.n	8018ad4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	685a      	ldr	r2, [r3, #4]
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018a8a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	681a      	ldr	r2, [r3, #0]
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018a9a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	2220      	movs	r2, #32
 8018aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	2b40      	cmp	r3, #64	; 0x40
 8018ab4:	d107      	bne.n	8018ac6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	2200      	movs	r2, #0
 8018aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8018abe:	6878      	ldr	r0, [r7, #4]
 8018ac0:	f7ff fed2 	bl	8018868 <HAL_I2C_MemTxCpltCallback>
}
 8018ac4:	e006      	b.n	8018ad4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	2200      	movs	r2, #0
 8018aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8018ace:	6878      	ldr	r0, [r7, #4]
 8018ad0:	f7ff fe8a 	bl	80187e8 <HAL_I2C_MasterTxCpltCallback>
}
 8018ad4:	bf00      	nop
 8018ad6:	3710      	adds	r7, #16
 8018ad8:	46bd      	mov	sp, r7
 8018ada:	bd80      	pop	{r7, pc}

08018adc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b084      	sub	sp, #16
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018aea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d11d      	bne.n	8018b30 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018af8:	2b01      	cmp	r3, #1
 8018afa:	d10b      	bne.n	8018b14 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b00:	b2da      	uxtb	r2, r3
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	681b      	ldr	r3, [r3, #0]
 8018b06:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b0c:	1c9a      	adds	r2, r3, #2
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8018b12:	e073      	b.n	8018bfc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b18:	b29b      	uxth	r3, r3
 8018b1a:	121b      	asrs	r3, r3, #8
 8018b1c:	b2da      	uxtb	r2, r3
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b28:	1c5a      	adds	r2, r3, #1
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018b2e:	e065      	b.n	8018bfc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b34:	2b01      	cmp	r3, #1
 8018b36:	d10b      	bne.n	8018b50 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b3c:	b2da      	uxtb	r2, r3
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b48:	1c5a      	adds	r2, r3, #1
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018b4e:	e055      	b.n	8018bfc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b54:	2b02      	cmp	r3, #2
 8018b56:	d151      	bne.n	8018bfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8018b58:	7bfb      	ldrb	r3, [r7, #15]
 8018b5a:	2b22      	cmp	r3, #34	; 0x22
 8018b5c:	d10d      	bne.n	8018b7a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	681a      	ldr	r2, [r3, #0]
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018b6c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b72:	1c5a      	adds	r2, r3, #1
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018b78:	e040      	b.n	8018bfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d015      	beq.n	8018bb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8018b84:	7bfb      	ldrb	r3, [r7, #15]
 8018b86:	2b21      	cmp	r3, #33	; 0x21
 8018b88:	d112      	bne.n	8018bb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b8e:	781a      	ldrb	r2, [r3, #0]
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b9a:	1c5a      	adds	r2, r3, #1
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	3b01      	subs	r3, #1
 8018ba8:	b29a      	uxth	r2, r3
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018bae:	e025      	b.n	8018bfc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bb4:	b29b      	uxth	r3, r3
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d120      	bne.n	8018bfc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8018bba:	7bfb      	ldrb	r3, [r7, #15]
 8018bbc:	2b21      	cmp	r3, #33	; 0x21
 8018bbe:	d11d      	bne.n	8018bfc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	685a      	ldr	r2, [r3, #4]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018bce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	681a      	ldr	r2, [r3, #0]
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018bde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2200      	movs	r2, #0
 8018be4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	2220      	movs	r2, #32
 8018bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8018bf6:	6878      	ldr	r0, [r7, #4]
 8018bf8:	f7ff fe36 	bl	8018868 <HAL_I2C_MemTxCpltCallback>
}
 8018bfc:	bf00      	nop
 8018bfe:	3710      	adds	r7, #16
 8018c00:	46bd      	mov	sp, r7
 8018c02:	bd80      	pop	{r7, pc}

08018c04 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b084      	sub	sp, #16
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	2b22      	cmp	r3, #34	; 0x22
 8018c16:	f040 80ac 	bne.w	8018d72 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c1e:	b29b      	uxth	r3, r3
 8018c20:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	2b03      	cmp	r3, #3
 8018c26:	d921      	bls.n	8018c6c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	691a      	ldr	r2, [r3, #16]
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c32:	b2d2      	uxtb	r2, r2
 8018c34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c3a:	1c5a      	adds	r2, r3, #1
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c44:	b29b      	uxth	r3, r3
 8018c46:	3b01      	subs	r3, #1
 8018c48:	b29a      	uxth	r2, r3
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c52:	b29b      	uxth	r3, r3
 8018c54:	2b03      	cmp	r3, #3
 8018c56:	f040 808c 	bne.w	8018d72 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	685a      	ldr	r2, [r3, #4]
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c68:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8018c6a:	e082      	b.n	8018d72 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c70:	2b02      	cmp	r3, #2
 8018c72:	d075      	beq.n	8018d60 <I2C_MasterReceive_RXNE+0x15c>
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	2b01      	cmp	r3, #1
 8018c78:	d002      	beq.n	8018c80 <I2C_MasterReceive_RXNE+0x7c>
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d16f      	bne.n	8018d60 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018c80:	6878      	ldr	r0, [r7, #4]
 8018c82:	f001 fafd 	bl	801a280 <I2C_WaitOnSTOPRequestThroughIT>
 8018c86:	4603      	mov	r3, r0
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d142      	bne.n	8018d12 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	681a      	ldr	r2, [r3, #0]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018c9a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	685a      	ldr	r2, [r3, #4]
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018caa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	691a      	ldr	r2, [r3, #16]
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb6:	b2d2      	uxtb	r2, r2
 8018cb8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cbe:	1c5a      	adds	r2, r3, #1
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cc8:	b29b      	uxth	r3, r3
 8018cca:	3b01      	subs	r3, #1
 8018ccc:	b29a      	uxth	r2, r3
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	2220      	movs	r2, #32
 8018cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018ce0:	b2db      	uxtb	r3, r3
 8018ce2:	2b40      	cmp	r3, #64	; 0x40
 8018ce4:	d10a      	bne.n	8018cfc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	2200      	movs	r2, #0
 8018cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8018cf4:	6878      	ldr	r0, [r7, #4]
 8018cf6:	f7ff fdc1 	bl	801887c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018cfa:	e03a      	b.n	8018d72 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2200      	movs	r2, #0
 8018d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2212      	movs	r2, #18
 8018d08:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018d0a:	6878      	ldr	r0, [r7, #4]
 8018d0c:	f7ff fd76 	bl	80187fc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018d10:	e02f      	b.n	8018d72 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	685a      	ldr	r2, [r3, #4]
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018d20:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	691a      	ldr	r2, [r3, #16]
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d2c:	b2d2      	uxtb	r2, r2
 8018d2e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d34:	1c5a      	adds	r2, r3, #1
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d3e:	b29b      	uxth	r3, r3
 8018d40:	3b01      	subs	r3, #1
 8018d42:	b29a      	uxth	r2, r3
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2220      	movs	r2, #32
 8018d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	2200      	movs	r2, #0
 8018d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	f7ff fd99 	bl	8018890 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018d5e:	e008      	b.n	8018d72 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	685a      	ldr	r2, [r3, #4]
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018d6e:	605a      	str	r2, [r3, #4]
}
 8018d70:	e7ff      	b.n	8018d72 <I2C_MasterReceive_RXNE+0x16e>
 8018d72:	bf00      	nop
 8018d74:	3710      	adds	r7, #16
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}

08018d7a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018d7a:	b580      	push	{r7, lr}
 8018d7c:	b084      	sub	sp, #16
 8018d7e:	af00      	add	r7, sp, #0
 8018d80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d86:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d8c:	b29b      	uxth	r3, r3
 8018d8e:	2b04      	cmp	r3, #4
 8018d90:	d11b      	bne.n	8018dca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	685a      	ldr	r2, [r3, #4]
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018da0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	691a      	ldr	r2, [r3, #16]
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dac:	b2d2      	uxtb	r2, r2
 8018dae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db4:	1c5a      	adds	r2, r3, #1
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dbe:	b29b      	uxth	r3, r3
 8018dc0:	3b01      	subs	r3, #1
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8018dc8:	e0bd      	b.n	8018f46 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018dce:	b29b      	uxth	r3, r3
 8018dd0:	2b03      	cmp	r3, #3
 8018dd2:	d129      	bne.n	8018e28 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	685a      	ldr	r2, [r3, #4]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018de2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	2b04      	cmp	r3, #4
 8018de8:	d00a      	beq.n	8018e00 <I2C_MasterReceive_BTF+0x86>
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	2b02      	cmp	r3, #2
 8018dee:	d007      	beq.n	8018e00 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	681a      	ldr	r2, [r3, #0]
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018dfe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	691a      	ldr	r2, [r3, #16]
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e0a:	b2d2      	uxtb	r2, r2
 8018e0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e12:	1c5a      	adds	r2, r3, #1
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e1c:	b29b      	uxth	r3, r3
 8018e1e:	3b01      	subs	r3, #1
 8018e20:	b29a      	uxth	r2, r3
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018e26:	e08e      	b.n	8018f46 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018e2c:	b29b      	uxth	r3, r3
 8018e2e:	2b02      	cmp	r3, #2
 8018e30:	d176      	bne.n	8018f20 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	d002      	beq.n	8018e3e <I2C_MasterReceive_BTF+0xc4>
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	2b10      	cmp	r3, #16
 8018e3c:	d108      	bne.n	8018e50 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	681a      	ldr	r2, [r3, #0]
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e4c:	601a      	str	r2, [r3, #0]
 8018e4e:	e019      	b.n	8018e84 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	2b04      	cmp	r3, #4
 8018e54:	d002      	beq.n	8018e5c <I2C_MasterReceive_BTF+0xe2>
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	2b02      	cmp	r3, #2
 8018e5a:	d108      	bne.n	8018e6e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	681a      	ldr	r2, [r3, #0]
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018e6a:	601a      	str	r2, [r3, #0]
 8018e6c:	e00a      	b.n	8018e84 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	2b10      	cmp	r3, #16
 8018e72:	d007      	beq.n	8018e84 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	681a      	ldr	r2, [r3, #0]
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018e82:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	691a      	ldr	r2, [r3, #16]
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e8e:	b2d2      	uxtb	r2, r2
 8018e90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e96:	1c5a      	adds	r2, r3, #1
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	3b01      	subs	r3, #1
 8018ea4:	b29a      	uxth	r2, r3
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	691a      	ldr	r2, [r3, #16]
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb4:	b2d2      	uxtb	r2, r2
 8018eb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ebc:	1c5a      	adds	r2, r3, #1
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	3b01      	subs	r3, #1
 8018eca:	b29a      	uxth	r2, r3
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	685a      	ldr	r2, [r3, #4]
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018ede:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	2220      	movs	r2, #32
 8018ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018eee:	b2db      	uxtb	r3, r3
 8018ef0:	2b40      	cmp	r3, #64	; 0x40
 8018ef2:	d10a      	bne.n	8018f0a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2200      	movs	r2, #0
 8018f00:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	f7ff fcba 	bl	801887c <HAL_I2C_MemRxCpltCallback>
}
 8018f08:	e01d      	b.n	8018f46 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	2212      	movs	r2, #18
 8018f16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f7ff fc6f 	bl	80187fc <HAL_I2C_MasterRxCpltCallback>
}
 8018f1e:	e012      	b.n	8018f46 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	691a      	ldr	r2, [r3, #16]
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f2a:	b2d2      	uxtb	r2, r2
 8018f2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f32:	1c5a      	adds	r2, r3, #1
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	3b01      	subs	r3, #1
 8018f40:	b29a      	uxth	r2, r3
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018f46:	bf00      	nop
 8018f48:	3710      	adds	r7, #16
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}

08018f4e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8018f4e:	b480      	push	{r7}
 8018f50:	b083      	sub	sp, #12
 8018f52:	af00      	add	r7, sp, #0
 8018f54:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018f5c:	b2db      	uxtb	r3, r3
 8018f5e:	2b40      	cmp	r3, #64	; 0x40
 8018f60:	d117      	bne.n	8018f92 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d109      	bne.n	8018f7e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f6e:	b2db      	uxtb	r3, r3
 8018f70:	461a      	mov	r2, r3
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018f7a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8018f7c:	e067      	b.n	801904e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f82:	b2db      	uxtb	r3, r3
 8018f84:	f043 0301 	orr.w	r3, r3, #1
 8018f88:	b2da      	uxtb	r2, r3
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	611a      	str	r2, [r3, #16]
}
 8018f90:	e05d      	b.n	801904e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	691b      	ldr	r3, [r3, #16]
 8018f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018f9a:	d133      	bne.n	8019004 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018fa2:	b2db      	uxtb	r3, r3
 8018fa4:	2b21      	cmp	r3, #33	; 0x21
 8018fa6:	d109      	bne.n	8018fbc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	461a      	mov	r2, r3
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018fb8:	611a      	str	r2, [r3, #16]
 8018fba:	e008      	b.n	8018fce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018fc0:	b2db      	uxtb	r3, r3
 8018fc2:	f043 0301 	orr.w	r3, r3, #1
 8018fc6:	b2da      	uxtb	r2, r3
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d004      	beq.n	8018fe0 <I2C_Master_SB+0x92>
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d108      	bne.n	8018ff2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d032      	beq.n	801904e <I2C_Master_SB+0x100>
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d02d      	beq.n	801904e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	685a      	ldr	r2, [r3, #4]
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019000:	605a      	str	r2, [r3, #4]
}
 8019002:	e024      	b.n	801904e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019008:	2b00      	cmp	r3, #0
 801900a:	d10e      	bne.n	801902a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019010:	b29b      	uxth	r3, r3
 8019012:	11db      	asrs	r3, r3, #7
 8019014:	b2db      	uxtb	r3, r3
 8019016:	f003 0306 	and.w	r3, r3, #6
 801901a:	b2db      	uxtb	r3, r3
 801901c:	f063 030f 	orn	r3, r3, #15
 8019020:	b2da      	uxtb	r2, r3
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	611a      	str	r2, [r3, #16]
}
 8019028:	e011      	b.n	801904e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801902e:	2b01      	cmp	r3, #1
 8019030:	d10d      	bne.n	801904e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019036:	b29b      	uxth	r3, r3
 8019038:	11db      	asrs	r3, r3, #7
 801903a:	b2db      	uxtb	r3, r3
 801903c:	f003 0306 	and.w	r3, r3, #6
 8019040:	b2db      	uxtb	r3, r3
 8019042:	f063 030e 	orn	r3, r3, #14
 8019046:	b2da      	uxtb	r2, r3
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	611a      	str	r2, [r3, #16]
}
 801904e:	bf00      	nop
 8019050:	370c      	adds	r7, #12
 8019052:	46bd      	mov	sp, r7
 8019054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019058:	4770      	bx	lr

0801905a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801905a:	b480      	push	{r7}
 801905c:	b083      	sub	sp, #12
 801905e:	af00      	add	r7, sp, #0
 8019060:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019066:	b2da      	uxtb	r2, r3
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019072:	2b00      	cmp	r3, #0
 8019074:	d004      	beq.n	8019080 <I2C_Master_ADD10+0x26>
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801907a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801907c:	2b00      	cmp	r3, #0
 801907e:	d108      	bne.n	8019092 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019084:	2b00      	cmp	r3, #0
 8019086:	d00c      	beq.n	80190a2 <I2C_Master_ADD10+0x48>
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801908c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801908e:	2b00      	cmp	r3, #0
 8019090:	d007      	beq.n	80190a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	685a      	ldr	r2, [r3, #4]
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80190a0:	605a      	str	r2, [r3, #4]
  }
}
 80190a2:	bf00      	nop
 80190a4:	370c      	adds	r7, #12
 80190a6:	46bd      	mov	sp, r7
 80190a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ac:	4770      	bx	lr

080190ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80190ae:	b480      	push	{r7}
 80190b0:	b091      	sub	sp, #68	; 0x44
 80190b2:	af00      	add	r7, sp, #0
 80190b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80190bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80190d2:	b2db      	uxtb	r3, r3
 80190d4:	2b22      	cmp	r3, #34	; 0x22
 80190d6:	f040 8169 	bne.w	80193ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d10f      	bne.n	8019102 <I2C_Master_ADDR+0x54>
 80190e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80190e6:	2b40      	cmp	r3, #64	; 0x40
 80190e8:	d10b      	bne.n	8019102 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80190ea:	2300      	movs	r3, #0
 80190ec:	633b      	str	r3, [r7, #48]	; 0x30
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	695b      	ldr	r3, [r3, #20]
 80190f4:	633b      	str	r3, [r7, #48]	; 0x30
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	699b      	ldr	r3, [r3, #24]
 80190fc:	633b      	str	r3, [r7, #48]	; 0x30
 80190fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019100:	e160      	b.n	80193c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019106:	2b00      	cmp	r3, #0
 8019108:	d11d      	bne.n	8019146 <I2C_Master_ADDR+0x98>
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	691b      	ldr	r3, [r3, #16]
 801910e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8019112:	d118      	bne.n	8019146 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019114:	2300      	movs	r3, #0
 8019116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	695b      	ldr	r3, [r3, #20]
 801911e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	699b      	ldr	r3, [r3, #24]
 8019126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019128:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	681a      	ldr	r2, [r3, #0]
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019138:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801913e:	1c5a      	adds	r2, r3, #1
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	651a      	str	r2, [r3, #80]	; 0x50
 8019144:	e13e      	b.n	80193c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801914a:	b29b      	uxth	r3, r3
 801914c:	2b00      	cmp	r3, #0
 801914e:	d113      	bne.n	8019178 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019150:	2300      	movs	r3, #0
 8019152:	62bb      	str	r3, [r7, #40]	; 0x28
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	695b      	ldr	r3, [r3, #20]
 801915a:	62bb      	str	r3, [r7, #40]	; 0x28
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	699b      	ldr	r3, [r3, #24]
 8019162:	62bb      	str	r3, [r7, #40]	; 0x28
 8019164:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	681a      	ldr	r2, [r3, #0]
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019174:	601a      	str	r2, [r3, #0]
 8019176:	e115      	b.n	80193a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801917c:	b29b      	uxth	r3, r3
 801917e:	2b01      	cmp	r3, #1
 8019180:	f040 808a 	bne.w	8019298 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8019184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019186:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801918a:	d137      	bne.n	80191fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	681a      	ldr	r2, [r3, #0]
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801919a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	685b      	ldr	r3, [r3, #4]
 80191a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80191a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80191aa:	d113      	bne.n	80191d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	681a      	ldr	r2, [r3, #0]
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80191ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191bc:	2300      	movs	r3, #0
 80191be:	627b      	str	r3, [r7, #36]	; 0x24
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	695b      	ldr	r3, [r3, #20]
 80191c6:	627b      	str	r3, [r7, #36]	; 0x24
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	699b      	ldr	r3, [r3, #24]
 80191ce:	627b      	str	r3, [r7, #36]	; 0x24
 80191d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191d2:	e0e7      	b.n	80193a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80191d4:	2300      	movs	r3, #0
 80191d6:	623b      	str	r3, [r7, #32]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	695b      	ldr	r3, [r3, #20]
 80191de:	623b      	str	r3, [r7, #32]
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	699b      	ldr	r3, [r3, #24]
 80191e6:	623b      	str	r3, [r7, #32]
 80191e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	681a      	ldr	r2, [r3, #0]
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80191f8:	601a      	str	r2, [r3, #0]
 80191fa:	e0d3      	b.n	80193a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80191fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191fe:	2b08      	cmp	r3, #8
 8019200:	d02e      	beq.n	8019260 <I2C_Master_ADDR+0x1b2>
 8019202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019204:	2b20      	cmp	r3, #32
 8019206:	d02b      	beq.n	8019260 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8019208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801920a:	2b12      	cmp	r3, #18
 801920c:	d102      	bne.n	8019214 <I2C_Master_ADDR+0x166>
 801920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019210:	2b01      	cmp	r3, #1
 8019212:	d125      	bne.n	8019260 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8019214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019216:	2b04      	cmp	r3, #4
 8019218:	d00e      	beq.n	8019238 <I2C_Master_ADDR+0x18a>
 801921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801921c:	2b02      	cmp	r3, #2
 801921e:	d00b      	beq.n	8019238 <I2C_Master_ADDR+0x18a>
 8019220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019222:	2b10      	cmp	r3, #16
 8019224:	d008      	beq.n	8019238 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	681a      	ldr	r2, [r3, #0]
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019234:	601a      	str	r2, [r3, #0]
 8019236:	e007      	b.n	8019248 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	681a      	ldr	r2, [r3, #0]
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019246:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019248:	2300      	movs	r3, #0
 801924a:	61fb      	str	r3, [r7, #28]
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	695b      	ldr	r3, [r3, #20]
 8019252:	61fb      	str	r3, [r7, #28]
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	699b      	ldr	r3, [r3, #24]
 801925a:	61fb      	str	r3, [r7, #28]
 801925c:	69fb      	ldr	r3, [r7, #28]
 801925e:	e0a1      	b.n	80193a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	681a      	ldr	r2, [r3, #0]
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801926e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019270:	2300      	movs	r3, #0
 8019272:	61bb      	str	r3, [r7, #24]
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	695b      	ldr	r3, [r3, #20]
 801927a:	61bb      	str	r3, [r7, #24]
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	699b      	ldr	r3, [r3, #24]
 8019282:	61bb      	str	r3, [r7, #24]
 8019284:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	681a      	ldr	r2, [r3, #0]
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019294:	601a      	str	r2, [r3, #0]
 8019296:	e085      	b.n	80193a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801929c:	b29b      	uxth	r3, r3
 801929e:	2b02      	cmp	r3, #2
 80192a0:	d14d      	bne.n	801933e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80192a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192a4:	2b04      	cmp	r3, #4
 80192a6:	d016      	beq.n	80192d6 <I2C_Master_ADDR+0x228>
 80192a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192aa:	2b02      	cmp	r3, #2
 80192ac:	d013      	beq.n	80192d6 <I2C_Master_ADDR+0x228>
 80192ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192b0:	2b10      	cmp	r3, #16
 80192b2:	d010      	beq.n	80192d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	681a      	ldr	r2, [r3, #0]
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80192c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	681a      	ldr	r2, [r3, #0]
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80192d2:	601a      	str	r2, [r3, #0]
 80192d4:	e007      	b.n	80192e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	681a      	ldr	r2, [r3, #0]
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80192e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	685b      	ldr	r3, [r3, #4]
 80192ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80192f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80192f4:	d117      	bne.n	8019326 <I2C_Master_ADDR+0x278>
 80192f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80192fc:	d00b      	beq.n	8019316 <I2C_Master_ADDR+0x268>
 80192fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019300:	2b01      	cmp	r3, #1
 8019302:	d008      	beq.n	8019316 <I2C_Master_ADDR+0x268>
 8019304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019306:	2b08      	cmp	r3, #8
 8019308:	d005      	beq.n	8019316 <I2C_Master_ADDR+0x268>
 801930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801930c:	2b10      	cmp	r3, #16
 801930e:	d002      	beq.n	8019316 <I2C_Master_ADDR+0x268>
 8019310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019312:	2b20      	cmp	r3, #32
 8019314:	d107      	bne.n	8019326 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	685a      	ldr	r2, [r3, #4]
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019324:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019326:	2300      	movs	r3, #0
 8019328:	617b      	str	r3, [r7, #20]
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	695b      	ldr	r3, [r3, #20]
 8019330:	617b      	str	r3, [r7, #20]
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	699b      	ldr	r3, [r3, #24]
 8019338:	617b      	str	r3, [r7, #20]
 801933a:	697b      	ldr	r3, [r7, #20]
 801933c:	e032      	b.n	80193a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801934c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	685b      	ldr	r3, [r3, #4]
 8019354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801935c:	d117      	bne.n	801938e <I2C_Master_ADDR+0x2e0>
 801935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019360:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8019364:	d00b      	beq.n	801937e <I2C_Master_ADDR+0x2d0>
 8019366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019368:	2b01      	cmp	r3, #1
 801936a:	d008      	beq.n	801937e <I2C_Master_ADDR+0x2d0>
 801936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801936e:	2b08      	cmp	r3, #8
 8019370:	d005      	beq.n	801937e <I2C_Master_ADDR+0x2d0>
 8019372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019374:	2b10      	cmp	r3, #16
 8019376:	d002      	beq.n	801937e <I2C_Master_ADDR+0x2d0>
 8019378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801937a:	2b20      	cmp	r3, #32
 801937c:	d107      	bne.n	801938e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	685a      	ldr	r2, [r3, #4]
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801938c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801938e:	2300      	movs	r3, #0
 8019390:	613b      	str	r3, [r7, #16]
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	695b      	ldr	r3, [r3, #20]
 8019398:	613b      	str	r3, [r7, #16]
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	699b      	ldr	r3, [r3, #24]
 80193a0:	613b      	str	r3, [r7, #16]
 80193a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	2200      	movs	r2, #0
 80193a8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80193aa:	e00b      	b.n	80193c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80193ac:	2300      	movs	r3, #0
 80193ae:	60fb      	str	r3, [r7, #12]
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	695b      	ldr	r3, [r3, #20]
 80193b6:	60fb      	str	r3, [r7, #12]
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	699b      	ldr	r3, [r3, #24]
 80193be:	60fb      	str	r3, [r7, #12]
 80193c0:	68fb      	ldr	r3, [r7, #12]
}
 80193c2:	e7ff      	b.n	80193c4 <I2C_Master_ADDR+0x316>
 80193c4:	bf00      	nop
 80193c6:	3744      	adds	r7, #68	; 0x44
 80193c8:	46bd      	mov	sp, r7
 80193ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ce:	4770      	bx	lr

080193d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b084      	sub	sp, #16
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80193de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80193e4:	b29b      	uxth	r3, r3
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d02b      	beq.n	8019442 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193ee:	781a      	ldrb	r2, [r3, #0]
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193fa:	1c5a      	adds	r2, r3, #1
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019404:	b29b      	uxth	r3, r3
 8019406:	3b01      	subs	r3, #1
 8019408:	b29a      	uxth	r2, r3
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019412:	b29b      	uxth	r3, r3
 8019414:	2b00      	cmp	r3, #0
 8019416:	d114      	bne.n	8019442 <I2C_SlaveTransmit_TXE+0x72>
 8019418:	7bfb      	ldrb	r3, [r7, #15]
 801941a:	2b29      	cmp	r3, #41	; 0x29
 801941c:	d111      	bne.n	8019442 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	685a      	ldr	r2, [r3, #4]
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801942c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	2221      	movs	r2, #33	; 0x21
 8019432:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2228      	movs	r2, #40	; 0x28
 8019438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801943c:	6878      	ldr	r0, [r7, #4]
 801943e:	f7ff f9e7 	bl	8018810 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019442:	bf00      	nop
 8019444:	3710      	adds	r7, #16
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}

0801944a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801944a:	b480      	push	{r7}
 801944c:	b083      	sub	sp, #12
 801944e:	af00      	add	r7, sp, #0
 8019450:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019456:	b29b      	uxth	r3, r3
 8019458:	2b00      	cmp	r3, #0
 801945a:	d011      	beq.n	8019480 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019460:	781a      	ldrb	r2, [r3, #0]
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801946c:	1c5a      	adds	r2, r3, #1
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019476:	b29b      	uxth	r3, r3
 8019478:	3b01      	subs	r3, #1
 801947a:	b29a      	uxth	r2, r3
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8019480:	bf00      	nop
 8019482:	370c      	adds	r7, #12
 8019484:	46bd      	mov	sp, r7
 8019486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948a:	4770      	bx	lr

0801948c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b084      	sub	sp, #16
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801949a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194a0:	b29b      	uxth	r3, r3
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d02c      	beq.n	8019500 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	691a      	ldr	r2, [r3, #16]
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194b0:	b2d2      	uxtb	r2, r2
 80194b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194b8:	1c5a      	adds	r2, r3, #1
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194c2:	b29b      	uxth	r3, r3
 80194c4:	3b01      	subs	r3, #1
 80194c6:	b29a      	uxth	r2, r3
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80194d0:	b29b      	uxth	r3, r3
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d114      	bne.n	8019500 <I2C_SlaveReceive_RXNE+0x74>
 80194d6:	7bfb      	ldrb	r3, [r7, #15]
 80194d8:	2b2a      	cmp	r3, #42	; 0x2a
 80194da:	d111      	bne.n	8019500 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	685a      	ldr	r2, [r3, #4]
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80194ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	2222      	movs	r2, #34	; 0x22
 80194f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	2228      	movs	r2, #40	; 0x28
 80194f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f7ff f992 	bl	8018824 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8019500:	bf00      	nop
 8019502:	3710      	adds	r7, #16
 8019504:	46bd      	mov	sp, r7
 8019506:	bd80      	pop	{r7, pc}

08019508 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8019508:	b480      	push	{r7}
 801950a:	b083      	sub	sp, #12
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019514:	b29b      	uxth	r3, r3
 8019516:	2b00      	cmp	r3, #0
 8019518:	d012      	beq.n	8019540 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	691a      	ldr	r2, [r3, #16]
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019524:	b2d2      	uxtb	r2, r2
 8019526:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801952c:	1c5a      	adds	r2, r3, #1
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019536:	b29b      	uxth	r3, r3
 8019538:	3b01      	subs	r3, #1
 801953a:	b29a      	uxth	r2, r3
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8019540:	bf00      	nop
 8019542:	370c      	adds	r7, #12
 8019544:	46bd      	mov	sp, r7
 8019546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954a:	4770      	bx	lr

0801954c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b084      	sub	sp, #16
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
 8019554:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8019556:	2300      	movs	r3, #0
 8019558:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019560:	b2db      	uxtb	r3, r3
 8019562:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019566:	2b28      	cmp	r3, #40	; 0x28
 8019568:	d127      	bne.n	80195ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	685a      	ldr	r2, [r3, #4]
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019578:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	089b      	lsrs	r3, r3, #2
 801957e:	f003 0301 	and.w	r3, r3, #1
 8019582:	2b00      	cmp	r3, #0
 8019584:	d101      	bne.n	801958a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8019586:	2301      	movs	r3, #1
 8019588:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	09db      	lsrs	r3, r3, #7
 801958e:	f003 0301 	and.w	r3, r3, #1
 8019592:	2b00      	cmp	r3, #0
 8019594:	d103      	bne.n	801959e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	68db      	ldr	r3, [r3, #12]
 801959a:	81bb      	strh	r3, [r7, #12]
 801959c:	e002      	b.n	80195a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	699b      	ldr	r3, [r3, #24]
 80195a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	2200      	movs	r2, #0
 80195a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80195ac:	89ba      	ldrh	r2, [r7, #12]
 80195ae:	7bfb      	ldrb	r3, [r7, #15]
 80195b0:	4619      	mov	r1, r3
 80195b2:	6878      	ldr	r0, [r7, #4]
 80195b4:	f7ff f940 	bl	8018838 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80195b8:	e00e      	b.n	80195d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80195ba:	2300      	movs	r3, #0
 80195bc:	60bb      	str	r3, [r7, #8]
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	695b      	ldr	r3, [r3, #20]
 80195c4:	60bb      	str	r3, [r7, #8]
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	699b      	ldr	r3, [r3, #24]
 80195cc:	60bb      	str	r3, [r7, #8]
 80195ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	2200      	movs	r2, #0
 80195d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80195d8:	bf00      	nop
 80195da:	3710      	adds	r7, #16
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd80      	pop	{r7, pc}

080195e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b084      	sub	sp, #16
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	685a      	ldr	r2, [r3, #4]
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80195fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8019600:	2300      	movs	r3, #0
 8019602:	60bb      	str	r3, [r7, #8]
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	695b      	ldr	r3, [r3, #20]
 801960a:	60bb      	str	r3, [r7, #8]
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	681a      	ldr	r2, [r3, #0]
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	f042 0201 	orr.w	r2, r2, #1
 801961a:	601a      	str	r2, [r3, #0]
 801961c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	681a      	ldr	r2, [r3, #0]
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801962c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	685b      	ldr	r3, [r3, #4]
 8019634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801963c:	d172      	bne.n	8019724 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801963e:	7bfb      	ldrb	r3, [r7, #15]
 8019640:	2b22      	cmp	r3, #34	; 0x22
 8019642:	d002      	beq.n	801964a <I2C_Slave_STOPF+0x6a>
 8019644:	7bfb      	ldrb	r3, [r7, #15]
 8019646:	2b2a      	cmp	r3, #42	; 0x2a
 8019648:	d135      	bne.n	80196b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	685b      	ldr	r3, [r3, #4]
 8019652:	b29a      	uxth	r2, r3
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801965c:	b29b      	uxth	r3, r3
 801965e:	2b00      	cmp	r3, #0
 8019660:	d005      	beq.n	801966e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019666:	f043 0204 	orr.w	r2, r3, #4
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	685a      	ldr	r2, [r3, #4]
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801967c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019682:	4618      	mov	r0, r3
 8019684:	f7fd fdb4 	bl	80171f0 <HAL_DMA_GetState>
 8019688:	4603      	mov	r3, r0
 801968a:	2b01      	cmp	r3, #1
 801968c:	d049      	beq.n	8019722 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019692:	4a69      	ldr	r2, [pc, #420]	; (8019838 <I2C_Slave_STOPF+0x258>)
 8019694:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801969a:	4618      	mov	r0, r3
 801969c:	f7fd fbfc 	bl	8016e98 <HAL_DMA_Abort_IT>
 80196a0:	4603      	mov	r3, r0
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d03d      	beq.n	8019722 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80196ac:	687a      	ldr	r2, [r7, #4]
 80196ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80196b0:	4610      	mov	r0, r2
 80196b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80196b4:	e035      	b.n	8019722 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	685b      	ldr	r3, [r3, #4]
 80196be:	b29a      	uxth	r2, r3
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d005      	beq.n	80196da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80196d2:	f043 0204 	orr.w	r2, r3, #4
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	685a      	ldr	r2, [r3, #4]
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80196e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196ee:	4618      	mov	r0, r3
 80196f0:	f7fd fd7e 	bl	80171f0 <HAL_DMA_GetState>
 80196f4:	4603      	mov	r3, r0
 80196f6:	2b01      	cmp	r3, #1
 80196f8:	d014      	beq.n	8019724 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80196fe:	4a4e      	ldr	r2, [pc, #312]	; (8019838 <I2C_Slave_STOPF+0x258>)
 8019700:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019706:	4618      	mov	r0, r3
 8019708:	f7fd fbc6 	bl	8016e98 <HAL_DMA_Abort_IT>
 801970c:	4603      	mov	r3, r0
 801970e:	2b00      	cmp	r3, #0
 8019710:	d008      	beq.n	8019724 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019718:	687a      	ldr	r2, [r7, #4]
 801971a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801971c:	4610      	mov	r0, r2
 801971e:	4798      	blx	r3
 8019720:	e000      	b.n	8019724 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8019722:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019728:	b29b      	uxth	r3, r3
 801972a:	2b00      	cmp	r3, #0
 801972c:	d03e      	beq.n	80197ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	695b      	ldr	r3, [r3, #20]
 8019734:	f003 0304 	and.w	r3, r3, #4
 8019738:	2b04      	cmp	r3, #4
 801973a:	d112      	bne.n	8019762 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	691a      	ldr	r2, [r3, #16]
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019746:	b2d2      	uxtb	r2, r2
 8019748:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801974e:	1c5a      	adds	r2, r3, #1
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019758:	b29b      	uxth	r3, r3
 801975a:	3b01      	subs	r3, #1
 801975c:	b29a      	uxth	r2, r3
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	695b      	ldr	r3, [r3, #20]
 8019768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801976c:	2b40      	cmp	r3, #64	; 0x40
 801976e:	d112      	bne.n	8019796 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	691a      	ldr	r2, [r3, #16]
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801977a:	b2d2      	uxtb	r2, r2
 801977c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019782:	1c5a      	adds	r2, r3, #1
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801978c:	b29b      	uxth	r3, r3
 801978e:	3b01      	subs	r3, #1
 8019790:	b29a      	uxth	r2, r3
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801979a:	b29b      	uxth	r3, r3
 801979c:	2b00      	cmp	r3, #0
 801979e:	d005      	beq.n	80197ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197a4:	f043 0204 	orr.w	r2, r3, #4
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d003      	beq.n	80197bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80197b4:	6878      	ldr	r0, [r7, #4]
 80197b6:	f000 f8b3 	bl	8019920 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80197ba:	e039      	b.n	8019830 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80197bc:	7bfb      	ldrb	r3, [r7, #15]
 80197be:	2b2a      	cmp	r3, #42	; 0x2a
 80197c0:	d109      	bne.n	80197d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	2200      	movs	r2, #0
 80197c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	2228      	movs	r2, #40	; 0x28
 80197cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80197d0:	6878      	ldr	r0, [r7, #4]
 80197d2:	f7ff f827 	bl	8018824 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80197dc:	b2db      	uxtb	r3, r3
 80197de:	2b28      	cmp	r3, #40	; 0x28
 80197e0:	d111      	bne.n	8019806 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	4a15      	ldr	r2, [pc, #84]	; (801983c <I2C_Slave_STOPF+0x25c>)
 80197e6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	2200      	movs	r2, #0
 80197ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	2220      	movs	r2, #32
 80197f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	2200      	movs	r2, #0
 80197fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80197fe:	6878      	ldr	r0, [r7, #4]
 8019800:	f7ff f828 	bl	8018854 <HAL_I2C_ListenCpltCallback>
}
 8019804:	e014      	b.n	8019830 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801980a:	2b22      	cmp	r3, #34	; 0x22
 801980c:	d002      	beq.n	8019814 <I2C_Slave_STOPF+0x234>
 801980e:	7bfb      	ldrb	r3, [r7, #15]
 8019810:	2b22      	cmp	r3, #34	; 0x22
 8019812:	d10d      	bne.n	8019830 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	2200      	movs	r2, #0
 8019818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	2220      	movs	r2, #32
 801981e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	2200      	movs	r2, #0
 8019826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801982a:	6878      	ldr	r0, [r7, #4]
 801982c:	f7fe fffa 	bl	8018824 <HAL_I2C_SlaveRxCpltCallback>
}
 8019830:	bf00      	nop
 8019832:	3710      	adds	r7, #16
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}
 8019838:	08019e81 	.word	0x08019e81
 801983c:	ffff0000 	.word	0xffff0000

08019840 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b084      	sub	sp, #16
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801984e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019854:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8019856:	68bb      	ldr	r3, [r7, #8]
 8019858:	2b08      	cmp	r3, #8
 801985a:	d002      	beq.n	8019862 <I2C_Slave_AF+0x22>
 801985c:	68bb      	ldr	r3, [r7, #8]
 801985e:	2b20      	cmp	r3, #32
 8019860:	d129      	bne.n	80198b6 <I2C_Slave_AF+0x76>
 8019862:	7bfb      	ldrb	r3, [r7, #15]
 8019864:	2b28      	cmp	r3, #40	; 0x28
 8019866:	d126      	bne.n	80198b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	4a2c      	ldr	r2, [pc, #176]	; (801991c <I2C_Slave_AF+0xdc>)
 801986c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	685a      	ldr	r2, [r3, #4]
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801987c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019886:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	681a      	ldr	r2, [r3, #0]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019896:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2200      	movs	r2, #0
 801989c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	2220      	movs	r2, #32
 80198a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2200      	movs	r2, #0
 80198aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80198ae:	6878      	ldr	r0, [r7, #4]
 80198b0:	f7fe ffd0 	bl	8018854 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80198b4:	e02e      	b.n	8019914 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80198b6:	7bfb      	ldrb	r3, [r7, #15]
 80198b8:	2b21      	cmp	r3, #33	; 0x21
 80198ba:	d126      	bne.n	801990a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	4a17      	ldr	r2, [pc, #92]	; (801991c <I2C_Slave_AF+0xdc>)
 80198c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	2221      	movs	r2, #33	; 0x21
 80198c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	2220      	movs	r2, #32
 80198cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	2200      	movs	r2, #0
 80198d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	685a      	ldr	r2, [r3, #4]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80198e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80198f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	681a      	ldr	r2, [r3, #0]
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019900:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8019902:	6878      	ldr	r0, [r7, #4]
 8019904:	f7fe ff84 	bl	8018810 <HAL_I2C_SlaveTxCpltCallback>
}
 8019908:	e004      	b.n	8019914 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019912:	615a      	str	r2, [r3, #20]
}
 8019914:	bf00      	nop
 8019916:	3710      	adds	r7, #16
 8019918:	46bd      	mov	sp, r7
 801991a:	bd80      	pop	{r7, pc}
 801991c:	ffff0000 	.word	0xffff0000

08019920 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b084      	sub	sp, #16
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801992e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019936:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8019938:	7bbb      	ldrb	r3, [r7, #14]
 801993a:	2b10      	cmp	r3, #16
 801993c:	d002      	beq.n	8019944 <I2C_ITError+0x24>
 801993e:	7bbb      	ldrb	r3, [r7, #14]
 8019940:	2b40      	cmp	r3, #64	; 0x40
 8019942:	d10a      	bne.n	801995a <I2C_ITError+0x3a>
 8019944:	7bfb      	ldrb	r3, [r7, #15]
 8019946:	2b22      	cmp	r3, #34	; 0x22
 8019948:	d107      	bne.n	801995a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	681a      	ldr	r2, [r3, #0]
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019958:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801995a:	7bfb      	ldrb	r3, [r7, #15]
 801995c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019960:	2b28      	cmp	r3, #40	; 0x28
 8019962:	d107      	bne.n	8019974 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	2200      	movs	r2, #0
 8019968:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	2228      	movs	r2, #40	; 0x28
 801996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019972:	e015      	b.n	80199a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	685b      	ldr	r3, [r3, #4]
 801997a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801997e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019982:	d00a      	beq.n	801999a <I2C_ITError+0x7a>
 8019984:	7bfb      	ldrb	r3, [r7, #15]
 8019986:	2b60      	cmp	r3, #96	; 0x60
 8019988:	d007      	beq.n	801999a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	2220      	movs	r2, #32
 801998e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	2200      	movs	r2, #0
 8019996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	2200      	movs	r2, #0
 801999e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80199aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80199ae:	d162      	bne.n	8019a76 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	685a      	ldr	r2, [r3, #4]
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80199be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80199c8:	b2db      	uxtb	r3, r3
 80199ca:	2b01      	cmp	r3, #1
 80199cc:	d020      	beq.n	8019a10 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199d2:	4a6a      	ldr	r2, [pc, #424]	; (8019b7c <I2C_ITError+0x25c>)
 80199d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199da:	4618      	mov	r0, r3
 80199dc:	f7fd fa5c 	bl	8016e98 <HAL_DMA_Abort_IT>
 80199e0:	4603      	mov	r3, r0
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	f000 8089 	beq.w	8019afa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	681a      	ldr	r2, [r3, #0]
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	f022 0201 	bic.w	r2, r2, #1
 80199f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	2220      	movs	r2, #32
 80199fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a06:	687a      	ldr	r2, [r7, #4]
 8019a08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8019a0a:	4610      	mov	r0, r2
 8019a0c:	4798      	blx	r3
 8019a0e:	e074      	b.n	8019afa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a14:	4a59      	ldr	r2, [pc, #356]	; (8019b7c <I2C_ITError+0x25c>)
 8019a16:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	f7fd fa3b 	bl	8016e98 <HAL_DMA_Abort_IT>
 8019a22:	4603      	mov	r3, r0
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d068      	beq.n	8019afa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	695b      	ldr	r3, [r3, #20]
 8019a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019a32:	2b40      	cmp	r3, #64	; 0x40
 8019a34:	d10b      	bne.n	8019a4e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	691a      	ldr	r2, [r3, #16]
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a40:	b2d2      	uxtb	r2, r2
 8019a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a48:	1c5a      	adds	r2, r3, #1
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	681a      	ldr	r2, [r3, #0]
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	f022 0201 	bic.w	r2, r2, #1
 8019a5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	2220      	movs	r2, #32
 8019a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a6c:	687a      	ldr	r2, [r7, #4]
 8019a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8019a70:	4610      	mov	r0, r2
 8019a72:	4798      	blx	r3
 8019a74:	e041      	b.n	8019afa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019a7c:	b2db      	uxtb	r3, r3
 8019a7e:	2b60      	cmp	r3, #96	; 0x60
 8019a80:	d125      	bne.n	8019ace <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	2220      	movs	r2, #32
 8019a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	695b      	ldr	r3, [r3, #20]
 8019a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019a9a:	2b40      	cmp	r3, #64	; 0x40
 8019a9c:	d10b      	bne.n	8019ab6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	691a      	ldr	r2, [r3, #16]
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aa8:	b2d2      	uxtb	r2, r2
 8019aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ab0:	1c5a      	adds	r2, r3, #1
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	681a      	ldr	r2, [r3, #0]
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	f022 0201 	bic.w	r2, r2, #1
 8019ac4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019ac6:	6878      	ldr	r0, [r7, #4]
 8019ac8:	f7fe feec 	bl	80188a4 <HAL_I2C_AbortCpltCallback>
 8019acc:	e015      	b.n	8019afa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	695b      	ldr	r3, [r3, #20]
 8019ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ad8:	2b40      	cmp	r3, #64	; 0x40
 8019ada:	d10b      	bne.n	8019af4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	691a      	ldr	r2, [r3, #16]
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ae6:	b2d2      	uxtb	r2, r2
 8019ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aee:	1c5a      	adds	r2, r3, #1
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8019af4:	6878      	ldr	r0, [r7, #4]
 8019af6:	f7fe fecb 	bl	8018890 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019afe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019b00:	68bb      	ldr	r3, [r7, #8]
 8019b02:	f003 0301 	and.w	r3, r3, #1
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d10e      	bne.n	8019b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019b0a:	68bb      	ldr	r3, [r7, #8]
 8019b0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d109      	bne.n	8019b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019b14:	68bb      	ldr	r3, [r7, #8]
 8019b16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d104      	bne.n	8019b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d007      	beq.n	8019b38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	685a      	ldr	r2, [r3, #4]
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8019b36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019b3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b44:	f003 0304 	and.w	r3, r3, #4
 8019b48:	2b04      	cmp	r3, #4
 8019b4a:	d113      	bne.n	8019b74 <I2C_ITError+0x254>
 8019b4c:	7bfb      	ldrb	r3, [r7, #15]
 8019b4e:	2b28      	cmp	r3, #40	; 0x28
 8019b50:	d110      	bne.n	8019b74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	4a0a      	ldr	r2, [pc, #40]	; (8019b80 <I2C_ITError+0x260>)
 8019b56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	2220      	movs	r2, #32
 8019b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	2200      	movs	r2, #0
 8019b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8019b6e:	6878      	ldr	r0, [r7, #4]
 8019b70:	f7fe fe70 	bl	8018854 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019b74:	bf00      	nop
 8019b76:	3710      	adds	r7, #16
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}
 8019b7c:	08019e81 	.word	0x08019e81
 8019b80:	ffff0000 	.word	0xffff0000

08019b84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b088      	sub	sp, #32
 8019b88:	af02      	add	r7, sp, #8
 8019b8a:	60f8      	str	r0, [r7, #12]
 8019b8c:	4608      	mov	r0, r1
 8019b8e:	4611      	mov	r1, r2
 8019b90:	461a      	mov	r2, r3
 8019b92:	4603      	mov	r3, r0
 8019b94:	817b      	strh	r3, [r7, #10]
 8019b96:	460b      	mov	r3, r1
 8019b98:	813b      	strh	r3, [r7, #8]
 8019b9a:	4613      	mov	r3, r2
 8019b9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	681a      	ldr	r2, [r3, #0]
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019bac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bb0:	9300      	str	r3, [sp, #0]
 8019bb2:	6a3b      	ldr	r3, [r7, #32]
 8019bb4:	2200      	movs	r2, #0
 8019bb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019bba:	68f8      	ldr	r0, [r7, #12]
 8019bbc:	f000 fa08 	bl	8019fd0 <I2C_WaitOnFlagUntilTimeout>
 8019bc0:	4603      	mov	r3, r0
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d00d      	beq.n	8019be2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019bd4:	d103      	bne.n	8019bde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019bde:	2303      	movs	r3, #3
 8019be0:	e05f      	b.n	8019ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019be2:	897b      	ldrh	r3, [r7, #10]
 8019be4:	b2db      	uxtb	r3, r3
 8019be6:	461a      	mov	r2, r3
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf4:	6a3a      	ldr	r2, [r7, #32]
 8019bf6:	492d      	ldr	r1, [pc, #180]	; (8019cac <I2C_RequestMemoryWrite+0x128>)
 8019bf8:	68f8      	ldr	r0, [r7, #12]
 8019bfa:	f000 fa40 	bl	801a07e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019bfe:	4603      	mov	r3, r0
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d001      	beq.n	8019c08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8019c04:	2301      	movs	r3, #1
 8019c06:	e04c      	b.n	8019ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019c08:	2300      	movs	r3, #0
 8019c0a:	617b      	str	r3, [r7, #20]
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	695b      	ldr	r3, [r3, #20]
 8019c12:	617b      	str	r3, [r7, #20]
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	699b      	ldr	r3, [r3, #24]
 8019c1a:	617b      	str	r3, [r7, #20]
 8019c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c20:	6a39      	ldr	r1, [r7, #32]
 8019c22:	68f8      	ldr	r0, [r7, #12]
 8019c24:	f000 faaa 	bl	801a17c <I2C_WaitOnTXEFlagUntilTimeout>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d00d      	beq.n	8019c4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c32:	2b04      	cmp	r3, #4
 8019c34:	d107      	bne.n	8019c46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	681a      	ldr	r2, [r3, #0]
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019c46:	2301      	movs	r3, #1
 8019c48:	e02b      	b.n	8019ca2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019c4a:	88fb      	ldrh	r3, [r7, #6]
 8019c4c:	2b01      	cmp	r3, #1
 8019c4e:	d105      	bne.n	8019c5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019c50:	893b      	ldrh	r3, [r7, #8]
 8019c52:	b2da      	uxtb	r2, r3
 8019c54:	68fb      	ldr	r3, [r7, #12]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	611a      	str	r2, [r3, #16]
 8019c5a:	e021      	b.n	8019ca0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019c5c:	893b      	ldrh	r3, [r7, #8]
 8019c5e:	0a1b      	lsrs	r3, r3, #8
 8019c60:	b29b      	uxth	r3, r3
 8019c62:	b2da      	uxtb	r2, r3
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c6c:	6a39      	ldr	r1, [r7, #32]
 8019c6e:	68f8      	ldr	r0, [r7, #12]
 8019c70:	f000 fa84 	bl	801a17c <I2C_WaitOnTXEFlagUntilTimeout>
 8019c74:	4603      	mov	r3, r0
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d00d      	beq.n	8019c96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c7e:	2b04      	cmp	r3, #4
 8019c80:	d107      	bne.n	8019c92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	681a      	ldr	r2, [r3, #0]
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019c92:	2301      	movs	r3, #1
 8019c94:	e005      	b.n	8019ca2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019c96:	893b      	ldrh	r3, [r7, #8]
 8019c98:	b2da      	uxtb	r2, r3
 8019c9a:	68fb      	ldr	r3, [r7, #12]
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8019ca0:	2300      	movs	r3, #0
}
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	3718      	adds	r7, #24
 8019ca6:	46bd      	mov	sp, r7
 8019ca8:	bd80      	pop	{r7, pc}
 8019caa:	bf00      	nop
 8019cac:	00010002 	.word	0x00010002

08019cb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b088      	sub	sp, #32
 8019cb4:	af02      	add	r7, sp, #8
 8019cb6:	60f8      	str	r0, [r7, #12]
 8019cb8:	4608      	mov	r0, r1
 8019cba:	4611      	mov	r1, r2
 8019cbc:	461a      	mov	r2, r3
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	817b      	strh	r3, [r7, #10]
 8019cc2:	460b      	mov	r3, r1
 8019cc4:	813b      	strh	r3, [r7, #8]
 8019cc6:	4613      	mov	r3, r2
 8019cc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	681a      	ldr	r2, [r3, #0]
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019cd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	681a      	ldr	r2, [r3, #0]
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019ce8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cec:	9300      	str	r3, [sp, #0]
 8019cee:	6a3b      	ldr	r3, [r7, #32]
 8019cf0:	2200      	movs	r2, #0
 8019cf2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019cf6:	68f8      	ldr	r0, [r7, #12]
 8019cf8:	f000 f96a 	bl	8019fd0 <I2C_WaitOnFlagUntilTimeout>
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d00d      	beq.n	8019d1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019d10:	d103      	bne.n	8019d1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019d18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019d1a:	2303      	movs	r3, #3
 8019d1c:	e0aa      	b.n	8019e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019d1e:	897b      	ldrh	r3, [r7, #10]
 8019d20:	b2db      	uxtb	r3, r3
 8019d22:	461a      	mov	r2, r3
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019d2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d30:	6a3a      	ldr	r2, [r7, #32]
 8019d32:	4952      	ldr	r1, [pc, #328]	; (8019e7c <I2C_RequestMemoryRead+0x1cc>)
 8019d34:	68f8      	ldr	r0, [r7, #12]
 8019d36:	f000 f9a2 	bl	801a07e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d001      	beq.n	8019d44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8019d40:	2301      	movs	r3, #1
 8019d42:	e097      	b.n	8019e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019d44:	2300      	movs	r3, #0
 8019d46:	617b      	str	r3, [r7, #20]
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	695b      	ldr	r3, [r3, #20]
 8019d4e:	617b      	str	r3, [r7, #20]
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	699b      	ldr	r3, [r3, #24]
 8019d56:	617b      	str	r3, [r7, #20]
 8019d58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019d5c:	6a39      	ldr	r1, [r7, #32]
 8019d5e:	68f8      	ldr	r0, [r7, #12]
 8019d60:	f000 fa0c 	bl	801a17c <I2C_WaitOnTXEFlagUntilTimeout>
 8019d64:	4603      	mov	r3, r0
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d00d      	beq.n	8019d86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d6e:	2b04      	cmp	r3, #4
 8019d70:	d107      	bne.n	8019d82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	681a      	ldr	r2, [r3, #0]
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019d80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019d82:	2301      	movs	r3, #1
 8019d84:	e076      	b.n	8019e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8019d86:	88fb      	ldrh	r3, [r7, #6]
 8019d88:	2b01      	cmp	r3, #1
 8019d8a:	d105      	bne.n	8019d98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019d8c:	893b      	ldrh	r3, [r7, #8]
 8019d8e:	b2da      	uxtb	r2, r3
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	611a      	str	r2, [r3, #16]
 8019d96:	e021      	b.n	8019ddc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019d98:	893b      	ldrh	r3, [r7, #8]
 8019d9a:	0a1b      	lsrs	r3, r3, #8
 8019d9c:	b29b      	uxth	r3, r3
 8019d9e:	b2da      	uxtb	r2, r3
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019da8:	6a39      	ldr	r1, [r7, #32]
 8019daa:	68f8      	ldr	r0, [r7, #12]
 8019dac:	f000 f9e6 	bl	801a17c <I2C_WaitOnTXEFlagUntilTimeout>
 8019db0:	4603      	mov	r3, r0
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d00d      	beq.n	8019dd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019dba:	2b04      	cmp	r3, #4
 8019dbc:	d107      	bne.n	8019dce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	681a      	ldr	r2, [r3, #0]
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019dcc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019dce:	2301      	movs	r3, #1
 8019dd0:	e050      	b.n	8019e74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8019dd2:	893b      	ldrh	r3, [r7, #8]
 8019dd4:	b2da      	uxtb	r2, r3
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dde:	6a39      	ldr	r1, [r7, #32]
 8019de0:	68f8      	ldr	r0, [r7, #12]
 8019de2:	f000 f9cb 	bl	801a17c <I2C_WaitOnTXEFlagUntilTimeout>
 8019de6:	4603      	mov	r3, r0
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d00d      	beq.n	8019e08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019df0:	2b04      	cmp	r3, #4
 8019df2:	d107      	bne.n	8019e04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	681a      	ldr	r2, [r3, #0]
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019e02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8019e04:	2301      	movs	r3, #1
 8019e06:	e035      	b.n	8019e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	681a      	ldr	r2, [r3, #0]
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019e16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e1a:	9300      	str	r3, [sp, #0]
 8019e1c:	6a3b      	ldr	r3, [r7, #32]
 8019e1e:	2200      	movs	r2, #0
 8019e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019e24:	68f8      	ldr	r0, [r7, #12]
 8019e26:	f000 f8d3 	bl	8019fd0 <I2C_WaitOnFlagUntilTimeout>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	d00d      	beq.n	8019e4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019e3e:	d103      	bne.n	8019e48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019e48:	2303      	movs	r3, #3
 8019e4a:	e013      	b.n	8019e74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8019e4c:	897b      	ldrh	r3, [r7, #10]
 8019e4e:	b2db      	uxtb	r3, r3
 8019e50:	f043 0301 	orr.w	r3, r3, #1
 8019e54:	b2da      	uxtb	r2, r3
 8019e56:	68fb      	ldr	r3, [r7, #12]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e5e:	6a3a      	ldr	r2, [r7, #32]
 8019e60:	4906      	ldr	r1, [pc, #24]	; (8019e7c <I2C_RequestMemoryRead+0x1cc>)
 8019e62:	68f8      	ldr	r0, [r7, #12]
 8019e64:	f000 f90b 	bl	801a07e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d001      	beq.n	8019e72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8019e6e:	2301      	movs	r3, #1
 8019e70:	e000      	b.n	8019e74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8019e72:	2300      	movs	r3, #0
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3718      	adds	r7, #24
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}
 8019e7c:	00010002 	.word	0x00010002

08019e80 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8019e80:	b580      	push	{r7, lr}
 8019e82:	b086      	sub	sp, #24
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019e88:	2300      	movs	r3, #0
 8019e8a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e90:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8019e92:	697b      	ldr	r3, [r7, #20]
 8019e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019e98:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019e9a:	4b4b      	ldr	r3, [pc, #300]	; (8019fc8 <I2C_DMAAbort+0x148>)
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	08db      	lsrs	r3, r3, #3
 8019ea0:	4a4a      	ldr	r2, [pc, #296]	; (8019fcc <I2C_DMAAbort+0x14c>)
 8019ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8019ea6:	0a1a      	lsrs	r2, r3, #8
 8019ea8:	4613      	mov	r3, r2
 8019eaa:	009b      	lsls	r3, r3, #2
 8019eac:	4413      	add	r3, r2
 8019eae:	00da      	lsls	r2, r3, #3
 8019eb0:	1ad3      	subs	r3, r2, r3
 8019eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d106      	bne.n	8019ec8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019eba:	697b      	ldr	r3, [r7, #20]
 8019ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ebe:	f043 0220 	orr.w	r2, r3, #32
 8019ec2:	697b      	ldr	r3, [r7, #20]
 8019ec4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8019ec6:	e00a      	b.n	8019ede <I2C_DMAAbort+0x5e>
    }
    count--;
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	3b01      	subs	r3, #1
 8019ecc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019ece:	697b      	ldr	r3, [r7, #20]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019edc:	d0ea      	beq.n	8019eb4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019ede:	697b      	ldr	r3, [r7, #20]
 8019ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d003      	beq.n	8019eee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8019ee6:	697b      	ldr	r3, [r7, #20]
 8019ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019eea:	2200      	movs	r2, #0
 8019eec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019eee:	697b      	ldr	r3, [r7, #20]
 8019ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d003      	beq.n	8019efe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019efa:	2200      	movs	r2, #0
 8019efc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019efe:	697b      	ldr	r3, [r7, #20]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	681a      	ldr	r2, [r3, #0]
 8019f04:	697b      	ldr	r3, [r7, #20]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019f0c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019f0e:	697b      	ldr	r3, [r7, #20]
 8019f10:	2200      	movs	r2, #0
 8019f12:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8019f14:	697b      	ldr	r3, [r7, #20]
 8019f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d003      	beq.n	8019f24 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019f1c:	697b      	ldr	r3, [r7, #20]
 8019f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f20:	2200      	movs	r2, #0
 8019f22:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8019f24:	697b      	ldr	r3, [r7, #20]
 8019f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d003      	beq.n	8019f34 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019f2c:	697b      	ldr	r3, [r7, #20]
 8019f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f30:	2200      	movs	r2, #0
 8019f32:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8019f34:	697b      	ldr	r3, [r7, #20]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	681a      	ldr	r2, [r3, #0]
 8019f3a:	697b      	ldr	r3, [r7, #20]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	f022 0201 	bic.w	r2, r2, #1
 8019f42:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019f4a:	b2db      	uxtb	r3, r3
 8019f4c:	2b60      	cmp	r3, #96	; 0x60
 8019f4e:	d10e      	bne.n	8019f6e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8019f50:	697b      	ldr	r3, [r7, #20]
 8019f52:	2220      	movs	r2, #32
 8019f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8019f60:	697b      	ldr	r3, [r7, #20]
 8019f62:	2200      	movs	r2, #0
 8019f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8019f66:	6978      	ldr	r0, [r7, #20]
 8019f68:	f7fe fc9c 	bl	80188a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8019f6c:	e027      	b.n	8019fbe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8019f6e:	7cfb      	ldrb	r3, [r7, #19]
 8019f70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8019f74:	2b28      	cmp	r3, #40	; 0x28
 8019f76:	d117      	bne.n	8019fa8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	681a      	ldr	r2, [r3, #0]
 8019f7e:	697b      	ldr	r3, [r7, #20]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	f042 0201 	orr.w	r2, r2, #1
 8019f86:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019f88:	697b      	ldr	r3, [r7, #20]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	681a      	ldr	r2, [r3, #0]
 8019f8e:	697b      	ldr	r3, [r7, #20]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019f96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019f98:	697b      	ldr	r3, [r7, #20]
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019f9e:	697b      	ldr	r3, [r7, #20]
 8019fa0:	2228      	movs	r2, #40	; 0x28
 8019fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019fa6:	e007      	b.n	8019fb8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019fa8:	697b      	ldr	r3, [r7, #20]
 8019faa:	2220      	movs	r2, #32
 8019fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019fb0:	697b      	ldr	r3, [r7, #20]
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8019fb8:	6978      	ldr	r0, [r7, #20]
 8019fba:	f7fe fc69 	bl	8018890 <HAL_I2C_ErrorCallback>
}
 8019fbe:	bf00      	nop
 8019fc0:	3718      	adds	r7, #24
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	bd80      	pop	{r7, pc}
 8019fc6:	bf00      	nop
 8019fc8:	200001e0 	.word	0x200001e0
 8019fcc:	14f8b589 	.word	0x14f8b589

08019fd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b084      	sub	sp, #16
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	60f8      	str	r0, [r7, #12]
 8019fd8:	60b9      	str	r1, [r7, #8]
 8019fda:	603b      	str	r3, [r7, #0]
 8019fdc:	4613      	mov	r3, r2
 8019fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019fe0:	e025      	b.n	801a02e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fe8:	d021      	beq.n	801a02e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019fea:	f7fc fc9d 	bl	8016928 <HAL_GetTick>
 8019fee:	4602      	mov	r2, r0
 8019ff0:	69bb      	ldr	r3, [r7, #24]
 8019ff2:	1ad3      	subs	r3, r2, r3
 8019ff4:	683a      	ldr	r2, [r7, #0]
 8019ff6:	429a      	cmp	r2, r3
 8019ff8:	d302      	bcc.n	801a000 <I2C_WaitOnFlagUntilTimeout+0x30>
 8019ffa:	683b      	ldr	r3, [r7, #0]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d116      	bne.n	801a02e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	2200      	movs	r2, #0
 801a004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	2220      	movs	r2, #32
 801a00a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801a00e:	68fb      	ldr	r3, [r7, #12]
 801a010:	2200      	movs	r2, #0
 801a012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a01a:	f043 0220 	orr.w	r2, r3, #32
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	2200      	movs	r2, #0
 801a026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a02a:	2301      	movs	r3, #1
 801a02c:	e023      	b.n	801a076 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	0c1b      	lsrs	r3, r3, #16
 801a032:	b2db      	uxtb	r3, r3
 801a034:	2b01      	cmp	r3, #1
 801a036:	d10d      	bne.n	801a054 <I2C_WaitOnFlagUntilTimeout+0x84>
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	695b      	ldr	r3, [r3, #20]
 801a03e:	43da      	mvns	r2, r3
 801a040:	68bb      	ldr	r3, [r7, #8]
 801a042:	4013      	ands	r3, r2
 801a044:	b29b      	uxth	r3, r3
 801a046:	2b00      	cmp	r3, #0
 801a048:	bf0c      	ite	eq
 801a04a:	2301      	moveq	r3, #1
 801a04c:	2300      	movne	r3, #0
 801a04e:	b2db      	uxtb	r3, r3
 801a050:	461a      	mov	r2, r3
 801a052:	e00c      	b.n	801a06e <I2C_WaitOnFlagUntilTimeout+0x9e>
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	681b      	ldr	r3, [r3, #0]
 801a058:	699b      	ldr	r3, [r3, #24]
 801a05a:	43da      	mvns	r2, r3
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	4013      	ands	r3, r2
 801a060:	b29b      	uxth	r3, r3
 801a062:	2b00      	cmp	r3, #0
 801a064:	bf0c      	ite	eq
 801a066:	2301      	moveq	r3, #1
 801a068:	2300      	movne	r3, #0
 801a06a:	b2db      	uxtb	r3, r3
 801a06c:	461a      	mov	r2, r3
 801a06e:	79fb      	ldrb	r3, [r7, #7]
 801a070:	429a      	cmp	r2, r3
 801a072:	d0b6      	beq.n	8019fe2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801a074:	2300      	movs	r3, #0
}
 801a076:	4618      	mov	r0, r3
 801a078:	3710      	adds	r7, #16
 801a07a:	46bd      	mov	sp, r7
 801a07c:	bd80      	pop	{r7, pc}

0801a07e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801a07e:	b580      	push	{r7, lr}
 801a080:	b084      	sub	sp, #16
 801a082:	af00      	add	r7, sp, #0
 801a084:	60f8      	str	r0, [r7, #12]
 801a086:	60b9      	str	r1, [r7, #8]
 801a088:	607a      	str	r2, [r7, #4]
 801a08a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801a08c:	e051      	b.n	801a132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	695b      	ldr	r3, [r3, #20]
 801a094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a09c:	d123      	bne.n	801a0e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	681a      	ldr	r2, [r3, #0]
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a0ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801a0b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	2220      	movs	r2, #32
 801a0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a0d2:	f043 0204 	orr.w	r2, r3, #4
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	2200      	movs	r2, #0
 801a0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a0e2:	2301      	movs	r3, #1
 801a0e4:	e046      	b.n	801a174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0ec:	d021      	beq.n	801a132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a0ee:	f7fc fc1b 	bl	8016928 <HAL_GetTick>
 801a0f2:	4602      	mov	r2, r0
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	1ad3      	subs	r3, r2, r3
 801a0f8:	687a      	ldr	r2, [r7, #4]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d302      	bcc.n	801a104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d116      	bne.n	801a132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	2200      	movs	r2, #0
 801a108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	2220      	movs	r2, #32
 801a10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	2200      	movs	r2, #0
 801a116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a11a:	68fb      	ldr	r3, [r7, #12]
 801a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a11e:	f043 0220 	orr.w	r2, r3, #32
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a126:	68fb      	ldr	r3, [r7, #12]
 801a128:	2200      	movs	r2, #0
 801a12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a12e:	2301      	movs	r3, #1
 801a130:	e020      	b.n	801a174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801a132:	68bb      	ldr	r3, [r7, #8]
 801a134:	0c1b      	lsrs	r3, r3, #16
 801a136:	b2db      	uxtb	r3, r3
 801a138:	2b01      	cmp	r3, #1
 801a13a:	d10c      	bne.n	801a156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	695b      	ldr	r3, [r3, #20]
 801a142:	43da      	mvns	r2, r3
 801a144:	68bb      	ldr	r3, [r7, #8]
 801a146:	4013      	ands	r3, r2
 801a148:	b29b      	uxth	r3, r3
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	bf14      	ite	ne
 801a14e:	2301      	movne	r3, #1
 801a150:	2300      	moveq	r3, #0
 801a152:	b2db      	uxtb	r3, r3
 801a154:	e00b      	b.n	801a16e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	699b      	ldr	r3, [r3, #24]
 801a15c:	43da      	mvns	r2, r3
 801a15e:	68bb      	ldr	r3, [r7, #8]
 801a160:	4013      	ands	r3, r2
 801a162:	b29b      	uxth	r3, r3
 801a164:	2b00      	cmp	r3, #0
 801a166:	bf14      	ite	ne
 801a168:	2301      	movne	r3, #1
 801a16a:	2300      	moveq	r3, #0
 801a16c:	b2db      	uxtb	r3, r3
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d18d      	bne.n	801a08e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801a172:	2300      	movs	r3, #0
}
 801a174:	4618      	mov	r0, r3
 801a176:	3710      	adds	r7, #16
 801a178:	46bd      	mov	sp, r7
 801a17a:	bd80      	pop	{r7, pc}

0801a17c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b084      	sub	sp, #16
 801a180:	af00      	add	r7, sp, #0
 801a182:	60f8      	str	r0, [r7, #12]
 801a184:	60b9      	str	r1, [r7, #8]
 801a186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a188:	e02d      	b.n	801a1e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801a18a:	68f8      	ldr	r0, [r7, #12]
 801a18c:	f000 f900 	bl	801a390 <I2C_IsAcknowledgeFailed>
 801a190:	4603      	mov	r3, r0
 801a192:	2b00      	cmp	r3, #0
 801a194:	d001      	beq.n	801a19a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801a196:	2301      	movs	r3, #1
 801a198:	e02d      	b.n	801a1f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1a0:	d021      	beq.n	801a1e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a1a2:	f7fc fbc1 	bl	8016928 <HAL_GetTick>
 801a1a6:	4602      	mov	r2, r0
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	1ad3      	subs	r3, r2, r3
 801a1ac:	68ba      	ldr	r2, [r7, #8]
 801a1ae:	429a      	cmp	r2, r3
 801a1b0:	d302      	bcc.n	801a1b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801a1b2:	68bb      	ldr	r3, [r7, #8]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d116      	bne.n	801a1e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	2220      	movs	r2, #32
 801a1c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a1c6:	68fb      	ldr	r3, [r7, #12]
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1d2:	f043 0220 	orr.w	r2, r3, #32
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	2200      	movs	r2, #0
 801a1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	e007      	b.n	801a1f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	695b      	ldr	r3, [r3, #20]
 801a1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a1f0:	2b80      	cmp	r3, #128	; 0x80
 801a1f2:	d1ca      	bne.n	801a18a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a1f4:	2300      	movs	r3, #0
}
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	3710      	adds	r7, #16
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	bd80      	pop	{r7, pc}

0801a1fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a1fe:	b580      	push	{r7, lr}
 801a200:	b084      	sub	sp, #16
 801a202:	af00      	add	r7, sp, #0
 801a204:	60f8      	str	r0, [r7, #12]
 801a206:	60b9      	str	r1, [r7, #8]
 801a208:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801a20a:	e02d      	b.n	801a268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801a20c:	68f8      	ldr	r0, [r7, #12]
 801a20e:	f000 f8bf 	bl	801a390 <I2C_IsAcknowledgeFailed>
 801a212:	4603      	mov	r3, r0
 801a214:	2b00      	cmp	r3, #0
 801a216:	d001      	beq.n	801a21c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801a218:	2301      	movs	r3, #1
 801a21a:	e02d      	b.n	801a278 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a21c:	68bb      	ldr	r3, [r7, #8]
 801a21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a222:	d021      	beq.n	801a268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a224:	f7fc fb80 	bl	8016928 <HAL_GetTick>
 801a228:	4602      	mov	r2, r0
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	1ad3      	subs	r3, r2, r3
 801a22e:	68ba      	ldr	r2, [r7, #8]
 801a230:	429a      	cmp	r2, r3
 801a232:	d302      	bcc.n	801a23a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801a234:	68bb      	ldr	r3, [r7, #8]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d116      	bne.n	801a268 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	2200      	movs	r2, #0
 801a23e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	2220      	movs	r2, #32
 801a244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	2200      	movs	r2, #0
 801a24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a254:	f043 0220 	orr.w	r2, r3, #32
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	2200      	movs	r2, #0
 801a260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801a264:	2301      	movs	r3, #1
 801a266:	e007      	b.n	801a278 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	681b      	ldr	r3, [r3, #0]
 801a26c:	695b      	ldr	r3, [r3, #20]
 801a26e:	f003 0304 	and.w	r3, r3, #4
 801a272:	2b04      	cmp	r3, #4
 801a274:	d1ca      	bne.n	801a20c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801a276:	2300      	movs	r3, #0
}
 801a278:	4618      	mov	r0, r3
 801a27a:	3710      	adds	r7, #16
 801a27c:	46bd      	mov	sp, r7
 801a27e:	bd80      	pop	{r7, pc}

0801a280 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 801a280:	b480      	push	{r7}
 801a282:	b085      	sub	sp, #20
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801a288:	2300      	movs	r3, #0
 801a28a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 801a28c:	4b13      	ldr	r3, [pc, #76]	; (801a2dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	08db      	lsrs	r3, r3, #3
 801a292:	4a13      	ldr	r2, [pc, #76]	; (801a2e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 801a294:	fba2 2303 	umull	r2, r3, r2, r3
 801a298:	0a1a      	lsrs	r2, r3, #8
 801a29a:	4613      	mov	r3, r2
 801a29c:	009b      	lsls	r3, r3, #2
 801a29e:	4413      	add	r3, r2
 801a2a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	3b01      	subs	r3, #1
 801a2a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d107      	bne.n	801a2be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2b2:	f043 0220 	orr.w	r2, r3, #32
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801a2ba:	2301      	movs	r3, #1
 801a2bc:	e008      	b.n	801a2d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a2c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a2cc:	d0e9      	beq.n	801a2a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801a2ce:	2300      	movs	r3, #0
}
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	3714      	adds	r7, #20
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2da:	4770      	bx	lr
 801a2dc:	200001e0 	.word	0x200001e0
 801a2e0:	14f8b589 	.word	0x14f8b589

0801a2e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b084      	sub	sp, #16
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	60f8      	str	r0, [r7, #12]
 801a2ec:	60b9      	str	r1, [r7, #8]
 801a2ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a2f0:	e042      	b.n	801a378 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801a2f2:	68fb      	ldr	r3, [r7, #12]
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	695b      	ldr	r3, [r3, #20]
 801a2f8:	f003 0310 	and.w	r3, r3, #16
 801a2fc:	2b10      	cmp	r3, #16
 801a2fe:	d119      	bne.n	801a334 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	681b      	ldr	r3, [r3, #0]
 801a304:	f06f 0210 	mvn.w	r2, #16
 801a308:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	2200      	movs	r2, #0
 801a30e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	2220      	movs	r2, #32
 801a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a318:	68fb      	ldr	r3, [r7, #12]
 801a31a:	2200      	movs	r2, #0
 801a31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a324:	68fb      	ldr	r3, [r7, #12]
 801a326:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a328:	68fb      	ldr	r3, [r7, #12]
 801a32a:	2200      	movs	r2, #0
 801a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a330:	2301      	movs	r3, #1
 801a332:	e029      	b.n	801a388 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a334:	f7fc faf8 	bl	8016928 <HAL_GetTick>
 801a338:	4602      	mov	r2, r0
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	1ad3      	subs	r3, r2, r3
 801a33e:	68ba      	ldr	r2, [r7, #8]
 801a340:	429a      	cmp	r2, r3
 801a342:	d302      	bcc.n	801a34a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 801a344:	68bb      	ldr	r3, [r7, #8]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d116      	bne.n	801a378 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	2200      	movs	r2, #0
 801a34e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	2220      	movs	r2, #32
 801a354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	2200      	movs	r2, #0
 801a35c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a364:	f043 0220 	orr.w	r2, r3, #32
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	2200      	movs	r2, #0
 801a370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801a374:	2301      	movs	r3, #1
 801a376:	e007      	b.n	801a388 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	695b      	ldr	r3, [r3, #20]
 801a37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a382:	2b40      	cmp	r3, #64	; 0x40
 801a384:	d1b5      	bne.n	801a2f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801a386:	2300      	movs	r3, #0
}
 801a388:	4618      	mov	r0, r3
 801a38a:	3710      	adds	r7, #16
 801a38c:	46bd      	mov	sp, r7
 801a38e:	bd80      	pop	{r7, pc}

0801a390 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801a390:	b480      	push	{r7}
 801a392:	b083      	sub	sp, #12
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	695b      	ldr	r3, [r3, #20]
 801a39e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a3a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a3a6:	d11b      	bne.n	801a3e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801a3b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	2200      	movs	r2, #0
 801a3b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	2220      	movs	r2, #32
 801a3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3cc:	f043 0204 	orr.w	r2, r3, #4
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801a3dc:	2301      	movs	r3, #1
 801a3de:	e000      	b.n	801a3e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801a3e0:	2300      	movs	r3, #0
}
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	370c      	adds	r7, #12
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ec:	4770      	bx	lr

0801a3ee <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801a3ee:	b480      	push	{r7}
 801a3f0:	b083      	sub	sp, #12
 801a3f2:	af00      	add	r7, sp, #0
 801a3f4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3fa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801a3fe:	d103      	bne.n	801a408 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	2201      	movs	r2, #1
 801a404:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801a406:	e007      	b.n	801a418 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a40c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801a410:	d102      	bne.n	801a418 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	2208      	movs	r2, #8
 801a416:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801a418:	bf00      	nop
 801a41a:	370c      	adds	r7, #12
 801a41c:	46bd      	mov	sp, r7
 801a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a422:	4770      	bx	lr

0801a424 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b086      	sub	sp, #24
 801a428:	af00      	add	r7, sp, #0
 801a42a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d101      	bne.n	801a436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801a432:	2301      	movs	r3, #1
 801a434:	e267      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f003 0301 	and.w	r3, r3, #1
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d075      	beq.n	801a52e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a442:	4b88      	ldr	r3, [pc, #544]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a444:	689b      	ldr	r3, [r3, #8]
 801a446:	f003 030c 	and.w	r3, r3, #12
 801a44a:	2b04      	cmp	r3, #4
 801a44c:	d00c      	beq.n	801a468 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a44e:	4b85      	ldr	r3, [pc, #532]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a450:	689b      	ldr	r3, [r3, #8]
 801a452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801a456:	2b08      	cmp	r3, #8
 801a458:	d112      	bne.n	801a480 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801a45a:	4b82      	ldr	r3, [pc, #520]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a45c:	685b      	ldr	r3, [r3, #4]
 801a45e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a466:	d10b      	bne.n	801a480 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a468:	4b7e      	ldr	r3, [pc, #504]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a470:	2b00      	cmp	r3, #0
 801a472:	d05b      	beq.n	801a52c <HAL_RCC_OscConfig+0x108>
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	685b      	ldr	r3, [r3, #4]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d157      	bne.n	801a52c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801a47c:	2301      	movs	r3, #1
 801a47e:	e242      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	685b      	ldr	r3, [r3, #4]
 801a484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a488:	d106      	bne.n	801a498 <HAL_RCC_OscConfig+0x74>
 801a48a:	4b76      	ldr	r3, [pc, #472]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	4a75      	ldr	r2, [pc, #468]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a494:	6013      	str	r3, [r2, #0]
 801a496:	e01d      	b.n	801a4d4 <HAL_RCC_OscConfig+0xb0>
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801a4a0:	d10c      	bne.n	801a4bc <HAL_RCC_OscConfig+0x98>
 801a4a2:	4b70      	ldr	r3, [pc, #448]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	4a6f      	ldr	r2, [pc, #444]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a4ac:	6013      	str	r3, [r2, #0]
 801a4ae:	4b6d      	ldr	r3, [pc, #436]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	4a6c      	ldr	r2, [pc, #432]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a4b8:	6013      	str	r3, [r2, #0]
 801a4ba:	e00b      	b.n	801a4d4 <HAL_RCC_OscConfig+0xb0>
 801a4bc:	4b69      	ldr	r3, [pc, #420]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	4a68      	ldr	r2, [pc, #416]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801a4c6:	6013      	str	r3, [r2, #0]
 801a4c8:	4b66      	ldr	r3, [pc, #408]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	4a65      	ldr	r2, [pc, #404]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801a4d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	685b      	ldr	r3, [r3, #4]
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d013      	beq.n	801a504 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a4dc:	f7fc fa24 	bl	8016928 <HAL_GetTick>
 801a4e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a4e2:	e008      	b.n	801a4f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a4e4:	f7fc fa20 	bl	8016928 <HAL_GetTick>
 801a4e8:	4602      	mov	r2, r0
 801a4ea:	693b      	ldr	r3, [r7, #16]
 801a4ec:	1ad3      	subs	r3, r2, r3
 801a4ee:	2b64      	cmp	r3, #100	; 0x64
 801a4f0:	d901      	bls.n	801a4f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801a4f2:	2303      	movs	r3, #3
 801a4f4:	e207      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a4f6:	4b5b      	ldr	r3, [pc, #364]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d0f0      	beq.n	801a4e4 <HAL_RCC_OscConfig+0xc0>
 801a502:	e014      	b.n	801a52e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a504:	f7fc fa10 	bl	8016928 <HAL_GetTick>
 801a508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a50a:	e008      	b.n	801a51e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a50c:	f7fc fa0c 	bl	8016928 <HAL_GetTick>
 801a510:	4602      	mov	r2, r0
 801a512:	693b      	ldr	r3, [r7, #16]
 801a514:	1ad3      	subs	r3, r2, r3
 801a516:	2b64      	cmp	r3, #100	; 0x64
 801a518:	d901      	bls.n	801a51e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a51a:	2303      	movs	r3, #3
 801a51c:	e1f3      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801a51e:	4b51      	ldr	r3, [pc, #324]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a526:	2b00      	cmp	r3, #0
 801a528:	d1f0      	bne.n	801a50c <HAL_RCC_OscConfig+0xe8>
 801a52a:	e000      	b.n	801a52e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a52c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	f003 0302 	and.w	r3, r3, #2
 801a536:	2b00      	cmp	r3, #0
 801a538:	d063      	beq.n	801a602 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a53a:	4b4a      	ldr	r3, [pc, #296]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a53c:	689b      	ldr	r3, [r3, #8]
 801a53e:	f003 030c 	and.w	r3, r3, #12
 801a542:	2b00      	cmp	r3, #0
 801a544:	d00b      	beq.n	801a55e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a546:	4b47      	ldr	r3, [pc, #284]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a548:	689b      	ldr	r3, [r3, #8]
 801a54a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801a54e:	2b08      	cmp	r3, #8
 801a550:	d11c      	bne.n	801a58c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801a552:	4b44      	ldr	r3, [pc, #272]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a554:	685b      	ldr	r3, [r3, #4]
 801a556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d116      	bne.n	801a58c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a55e:	4b41      	ldr	r3, [pc, #260]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	f003 0302 	and.w	r3, r3, #2
 801a566:	2b00      	cmp	r3, #0
 801a568:	d005      	beq.n	801a576 <HAL_RCC_OscConfig+0x152>
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	68db      	ldr	r3, [r3, #12]
 801a56e:	2b01      	cmp	r3, #1
 801a570:	d001      	beq.n	801a576 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801a572:	2301      	movs	r3, #1
 801a574:	e1c7      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a576:	4b3b      	ldr	r3, [pc, #236]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	691b      	ldr	r3, [r3, #16]
 801a582:	00db      	lsls	r3, r3, #3
 801a584:	4937      	ldr	r1, [pc, #220]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a586:	4313      	orrs	r3, r2
 801a588:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801a58a:	e03a      	b.n	801a602 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	68db      	ldr	r3, [r3, #12]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d020      	beq.n	801a5d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801a594:	4b34      	ldr	r3, [pc, #208]	; (801a668 <HAL_RCC_OscConfig+0x244>)
 801a596:	2201      	movs	r2, #1
 801a598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a59a:	f7fc f9c5 	bl	8016928 <HAL_GetTick>
 801a59e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a5a0:	e008      	b.n	801a5b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a5a2:	f7fc f9c1 	bl	8016928 <HAL_GetTick>
 801a5a6:	4602      	mov	r2, r0
 801a5a8:	693b      	ldr	r3, [r7, #16]
 801a5aa:	1ad3      	subs	r3, r2, r3
 801a5ac:	2b02      	cmp	r3, #2
 801a5ae:	d901      	bls.n	801a5b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801a5b0:	2303      	movs	r3, #3
 801a5b2:	e1a8      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a5b4:	4b2b      	ldr	r3, [pc, #172]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	f003 0302 	and.w	r3, r3, #2
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	d0f0      	beq.n	801a5a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a5c0:	4b28      	ldr	r3, [pc, #160]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	691b      	ldr	r3, [r3, #16]
 801a5cc:	00db      	lsls	r3, r3, #3
 801a5ce:	4925      	ldr	r1, [pc, #148]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a5d0:	4313      	orrs	r3, r2
 801a5d2:	600b      	str	r3, [r1, #0]
 801a5d4:	e015      	b.n	801a602 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a5d6:	4b24      	ldr	r3, [pc, #144]	; (801a668 <HAL_RCC_OscConfig+0x244>)
 801a5d8:	2200      	movs	r2, #0
 801a5da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a5dc:	f7fc f9a4 	bl	8016928 <HAL_GetTick>
 801a5e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a5e2:	e008      	b.n	801a5f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a5e4:	f7fc f9a0 	bl	8016928 <HAL_GetTick>
 801a5e8:	4602      	mov	r2, r0
 801a5ea:	693b      	ldr	r3, [r7, #16]
 801a5ec:	1ad3      	subs	r3, r2, r3
 801a5ee:	2b02      	cmp	r3, #2
 801a5f0:	d901      	bls.n	801a5f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801a5f2:	2303      	movs	r3, #3
 801a5f4:	e187      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801a5f6:	4b1b      	ldr	r3, [pc, #108]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	f003 0302 	and.w	r3, r3, #2
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d1f0      	bne.n	801a5e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	f003 0308 	and.w	r3, r3, #8
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d036      	beq.n	801a67c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	695b      	ldr	r3, [r3, #20]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d016      	beq.n	801a644 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a616:	4b15      	ldr	r3, [pc, #84]	; (801a66c <HAL_RCC_OscConfig+0x248>)
 801a618:	2201      	movs	r2, #1
 801a61a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a61c:	f7fc f984 	bl	8016928 <HAL_GetTick>
 801a620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a622:	e008      	b.n	801a636 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a624:	f7fc f980 	bl	8016928 <HAL_GetTick>
 801a628:	4602      	mov	r2, r0
 801a62a:	693b      	ldr	r3, [r7, #16]
 801a62c:	1ad3      	subs	r3, r2, r3
 801a62e:	2b02      	cmp	r3, #2
 801a630:	d901      	bls.n	801a636 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801a632:	2303      	movs	r3, #3
 801a634:	e167      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801a636:	4b0b      	ldr	r3, [pc, #44]	; (801a664 <HAL_RCC_OscConfig+0x240>)
 801a638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a63a:	f003 0302 	and.w	r3, r3, #2
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d0f0      	beq.n	801a624 <HAL_RCC_OscConfig+0x200>
 801a642:	e01b      	b.n	801a67c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a644:	4b09      	ldr	r3, [pc, #36]	; (801a66c <HAL_RCC_OscConfig+0x248>)
 801a646:	2200      	movs	r2, #0
 801a648:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a64a:	f7fc f96d 	bl	8016928 <HAL_GetTick>
 801a64e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a650:	e00e      	b.n	801a670 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a652:	f7fc f969 	bl	8016928 <HAL_GetTick>
 801a656:	4602      	mov	r2, r0
 801a658:	693b      	ldr	r3, [r7, #16]
 801a65a:	1ad3      	subs	r3, r2, r3
 801a65c:	2b02      	cmp	r3, #2
 801a65e:	d907      	bls.n	801a670 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801a660:	2303      	movs	r3, #3
 801a662:	e150      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
 801a664:	40023800 	.word	0x40023800
 801a668:	42470000 	.word	0x42470000
 801a66c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801a670:	4b88      	ldr	r3, [pc, #544]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a674:	f003 0302 	and.w	r3, r3, #2
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d1ea      	bne.n	801a652 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	f003 0304 	and.w	r3, r3, #4
 801a684:	2b00      	cmp	r3, #0
 801a686:	f000 8097 	beq.w	801a7b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a68a:	2300      	movs	r3, #0
 801a68c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a68e:	4b81      	ldr	r3, [pc, #516]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a696:	2b00      	cmp	r3, #0
 801a698:	d10f      	bne.n	801a6ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a69a:	2300      	movs	r3, #0
 801a69c:	60bb      	str	r3, [r7, #8]
 801a69e:	4b7d      	ldr	r3, [pc, #500]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6a2:	4a7c      	ldr	r2, [pc, #496]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a6a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a6a8:	6413      	str	r3, [r2, #64]	; 0x40
 801a6aa:	4b7a      	ldr	r3, [pc, #488]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a6ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801a6b2:	60bb      	str	r3, [r7, #8]
 801a6b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801a6b6:	2301      	movs	r3, #1
 801a6b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a6ba:	4b77      	ldr	r3, [pc, #476]	; (801a898 <HAL_RCC_OscConfig+0x474>)
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d118      	bne.n	801a6f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a6c6:	4b74      	ldr	r3, [pc, #464]	; (801a898 <HAL_RCC_OscConfig+0x474>)
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	4a73      	ldr	r2, [pc, #460]	; (801a898 <HAL_RCC_OscConfig+0x474>)
 801a6cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801a6d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a6d2:	f7fc f929 	bl	8016928 <HAL_GetTick>
 801a6d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a6d8:	e008      	b.n	801a6ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a6da:	f7fc f925 	bl	8016928 <HAL_GetTick>
 801a6de:	4602      	mov	r2, r0
 801a6e0:	693b      	ldr	r3, [r7, #16]
 801a6e2:	1ad3      	subs	r3, r2, r3
 801a6e4:	2b02      	cmp	r3, #2
 801a6e6:	d901      	bls.n	801a6ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801a6e8:	2303      	movs	r3, #3
 801a6ea:	e10c      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a6ec:	4b6a      	ldr	r3, [pc, #424]	; (801a898 <HAL_RCC_OscConfig+0x474>)
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a6f4:	2b00      	cmp	r3, #0
 801a6f6:	d0f0      	beq.n	801a6da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	689b      	ldr	r3, [r3, #8]
 801a6fc:	2b01      	cmp	r3, #1
 801a6fe:	d106      	bne.n	801a70e <HAL_RCC_OscConfig+0x2ea>
 801a700:	4b64      	ldr	r3, [pc, #400]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a704:	4a63      	ldr	r2, [pc, #396]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a706:	f043 0301 	orr.w	r3, r3, #1
 801a70a:	6713      	str	r3, [r2, #112]	; 0x70
 801a70c:	e01c      	b.n	801a748 <HAL_RCC_OscConfig+0x324>
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	689b      	ldr	r3, [r3, #8]
 801a712:	2b05      	cmp	r3, #5
 801a714:	d10c      	bne.n	801a730 <HAL_RCC_OscConfig+0x30c>
 801a716:	4b5f      	ldr	r3, [pc, #380]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a71a:	4a5e      	ldr	r2, [pc, #376]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a71c:	f043 0304 	orr.w	r3, r3, #4
 801a720:	6713      	str	r3, [r2, #112]	; 0x70
 801a722:	4b5c      	ldr	r3, [pc, #368]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a726:	4a5b      	ldr	r2, [pc, #364]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a728:	f043 0301 	orr.w	r3, r3, #1
 801a72c:	6713      	str	r3, [r2, #112]	; 0x70
 801a72e:	e00b      	b.n	801a748 <HAL_RCC_OscConfig+0x324>
 801a730:	4b58      	ldr	r3, [pc, #352]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a734:	4a57      	ldr	r2, [pc, #348]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a736:	f023 0301 	bic.w	r3, r3, #1
 801a73a:	6713      	str	r3, [r2, #112]	; 0x70
 801a73c:	4b55      	ldr	r3, [pc, #340]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a740:	4a54      	ldr	r2, [pc, #336]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a742:	f023 0304 	bic.w	r3, r3, #4
 801a746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	689b      	ldr	r3, [r3, #8]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d015      	beq.n	801a77c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a750:	f7fc f8ea 	bl	8016928 <HAL_GetTick>
 801a754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a756:	e00a      	b.n	801a76e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a758:	f7fc f8e6 	bl	8016928 <HAL_GetTick>
 801a75c:	4602      	mov	r2, r0
 801a75e:	693b      	ldr	r3, [r7, #16]
 801a760:	1ad3      	subs	r3, r2, r3
 801a762:	f241 3288 	movw	r2, #5000	; 0x1388
 801a766:	4293      	cmp	r3, r2
 801a768:	d901      	bls.n	801a76e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801a76a:	2303      	movs	r3, #3
 801a76c:	e0cb      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801a76e:	4b49      	ldr	r3, [pc, #292]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a772:	f003 0302 	and.w	r3, r3, #2
 801a776:	2b00      	cmp	r3, #0
 801a778:	d0ee      	beq.n	801a758 <HAL_RCC_OscConfig+0x334>
 801a77a:	e014      	b.n	801a7a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a77c:	f7fc f8d4 	bl	8016928 <HAL_GetTick>
 801a780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a782:	e00a      	b.n	801a79a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a784:	f7fc f8d0 	bl	8016928 <HAL_GetTick>
 801a788:	4602      	mov	r2, r0
 801a78a:	693b      	ldr	r3, [r7, #16]
 801a78c:	1ad3      	subs	r3, r2, r3
 801a78e:	f241 3288 	movw	r2, #5000	; 0x1388
 801a792:	4293      	cmp	r3, r2
 801a794:	d901      	bls.n	801a79a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801a796:	2303      	movs	r3, #3
 801a798:	e0b5      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801a79a:	4b3e      	ldr	r3, [pc, #248]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a79e:	f003 0302 	and.w	r3, r3, #2
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d1ee      	bne.n	801a784 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801a7a6:	7dfb      	ldrb	r3, [r7, #23]
 801a7a8:	2b01      	cmp	r3, #1
 801a7aa:	d105      	bne.n	801a7b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a7ac:	4b39      	ldr	r3, [pc, #228]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7b0:	4a38      	ldr	r2, [pc, #224]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a7b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a7b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	699b      	ldr	r3, [r3, #24]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	f000 80a1 	beq.w	801a904 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801a7c2:	4b34      	ldr	r3, [pc, #208]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a7c4:	689b      	ldr	r3, [r3, #8]
 801a7c6:	f003 030c 	and.w	r3, r3, #12
 801a7ca:	2b08      	cmp	r3, #8
 801a7cc:	d05c      	beq.n	801a888 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	699b      	ldr	r3, [r3, #24]
 801a7d2:	2b02      	cmp	r3, #2
 801a7d4:	d141      	bne.n	801a85a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a7d6:	4b31      	ldr	r3, [pc, #196]	; (801a89c <HAL_RCC_OscConfig+0x478>)
 801a7d8:	2200      	movs	r2, #0
 801a7da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a7dc:	f7fc f8a4 	bl	8016928 <HAL_GetTick>
 801a7e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a7e2:	e008      	b.n	801a7f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a7e4:	f7fc f8a0 	bl	8016928 <HAL_GetTick>
 801a7e8:	4602      	mov	r2, r0
 801a7ea:	693b      	ldr	r3, [r7, #16]
 801a7ec:	1ad3      	subs	r3, r2, r3
 801a7ee:	2b02      	cmp	r3, #2
 801a7f0:	d901      	bls.n	801a7f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801a7f2:	2303      	movs	r3, #3
 801a7f4:	e087      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a7f6:	4b27      	ldr	r3, [pc, #156]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d1f0      	bne.n	801a7e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	69da      	ldr	r2, [r3, #28]
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	6a1b      	ldr	r3, [r3, #32]
 801a80a:	431a      	orrs	r2, r3
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a810:	019b      	lsls	r3, r3, #6
 801a812:	431a      	orrs	r2, r3
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a818:	085b      	lsrs	r3, r3, #1
 801a81a:	3b01      	subs	r3, #1
 801a81c:	041b      	lsls	r3, r3, #16
 801a81e:	431a      	orrs	r2, r3
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a824:	061b      	lsls	r3, r3, #24
 801a826:	491b      	ldr	r1, [pc, #108]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a828:	4313      	orrs	r3, r2
 801a82a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a82c:	4b1b      	ldr	r3, [pc, #108]	; (801a89c <HAL_RCC_OscConfig+0x478>)
 801a82e:	2201      	movs	r2, #1
 801a830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a832:	f7fc f879 	bl	8016928 <HAL_GetTick>
 801a836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a838:	e008      	b.n	801a84c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a83a:	f7fc f875 	bl	8016928 <HAL_GetTick>
 801a83e:	4602      	mov	r2, r0
 801a840:	693b      	ldr	r3, [r7, #16]
 801a842:	1ad3      	subs	r3, r2, r3
 801a844:	2b02      	cmp	r3, #2
 801a846:	d901      	bls.n	801a84c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a848:	2303      	movs	r3, #3
 801a84a:	e05c      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a84c:	4b11      	ldr	r3, [pc, #68]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a854:	2b00      	cmp	r3, #0
 801a856:	d0f0      	beq.n	801a83a <HAL_RCC_OscConfig+0x416>
 801a858:	e054      	b.n	801a904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a85a:	4b10      	ldr	r3, [pc, #64]	; (801a89c <HAL_RCC_OscConfig+0x478>)
 801a85c:	2200      	movs	r2, #0
 801a85e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a860:	f7fc f862 	bl	8016928 <HAL_GetTick>
 801a864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a866:	e008      	b.n	801a87a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801a868:	f7fc f85e 	bl	8016928 <HAL_GetTick>
 801a86c:	4602      	mov	r2, r0
 801a86e:	693b      	ldr	r3, [r7, #16]
 801a870:	1ad3      	subs	r3, r2, r3
 801a872:	2b02      	cmp	r3, #2
 801a874:	d901      	bls.n	801a87a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801a876:	2303      	movs	r3, #3
 801a878:	e045      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801a87a:	4b06      	ldr	r3, [pc, #24]	; (801a894 <HAL_RCC_OscConfig+0x470>)
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a882:	2b00      	cmp	r3, #0
 801a884:	d1f0      	bne.n	801a868 <HAL_RCC_OscConfig+0x444>
 801a886:	e03d      	b.n	801a904 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	699b      	ldr	r3, [r3, #24]
 801a88c:	2b01      	cmp	r3, #1
 801a88e:	d107      	bne.n	801a8a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801a890:	2301      	movs	r3, #1
 801a892:	e038      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
 801a894:	40023800 	.word	0x40023800
 801a898:	40007000 	.word	0x40007000
 801a89c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801a8a0:	4b1b      	ldr	r3, [pc, #108]	; (801a910 <HAL_RCC_OscConfig+0x4ec>)
 801a8a2:	685b      	ldr	r3, [r3, #4]
 801a8a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	699b      	ldr	r3, [r3, #24]
 801a8aa:	2b01      	cmp	r3, #1
 801a8ac:	d028      	beq.n	801a900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a8b8:	429a      	cmp	r2, r3
 801a8ba:	d121      	bne.n	801a900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a8c6:	429a      	cmp	r2, r3
 801a8c8:	d11a      	bne.n	801a900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a8ca:	68fa      	ldr	r2, [r7, #12]
 801a8cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801a8d0:	4013      	ands	r3, r2
 801a8d2:	687a      	ldr	r2, [r7, #4]
 801a8d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801a8d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801a8d8:	4293      	cmp	r3, r2
 801a8da:	d111      	bne.n	801a900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8e6:	085b      	lsrs	r3, r3, #1
 801a8e8:	3b01      	subs	r3, #1
 801a8ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801a8ec:	429a      	cmp	r2, r3
 801a8ee:	d107      	bne.n	801a900 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a8fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801a8fc:	429a      	cmp	r2, r3
 801a8fe:	d001      	beq.n	801a904 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 801a900:	2301      	movs	r3, #1
 801a902:	e000      	b.n	801a906 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 801a904:	2300      	movs	r3, #0
}
 801a906:	4618      	mov	r0, r3
 801a908:	3718      	adds	r7, #24
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bd80      	pop	{r7, pc}
 801a90e:	bf00      	nop
 801a910:	40023800 	.word	0x40023800

0801a914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b084      	sub	sp, #16
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
 801a91c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d101      	bne.n	801a928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801a924:	2301      	movs	r3, #1
 801a926:	e0cc      	b.n	801aac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801a928:	4b68      	ldr	r3, [pc, #416]	; (801aacc <HAL_RCC_ClockConfig+0x1b8>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f003 0307 	and.w	r3, r3, #7
 801a930:	683a      	ldr	r2, [r7, #0]
 801a932:	429a      	cmp	r2, r3
 801a934:	d90c      	bls.n	801a950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801a936:	4b65      	ldr	r3, [pc, #404]	; (801aacc <HAL_RCC_ClockConfig+0x1b8>)
 801a938:	683a      	ldr	r2, [r7, #0]
 801a93a:	b2d2      	uxtb	r2, r2
 801a93c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801a93e:	4b63      	ldr	r3, [pc, #396]	; (801aacc <HAL_RCC_ClockConfig+0x1b8>)
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	f003 0307 	and.w	r3, r3, #7
 801a946:	683a      	ldr	r2, [r7, #0]
 801a948:	429a      	cmp	r2, r3
 801a94a:	d001      	beq.n	801a950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801a94c:	2301      	movs	r3, #1
 801a94e:	e0b8      	b.n	801aac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	f003 0302 	and.w	r3, r3, #2
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d020      	beq.n	801a99e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	f003 0304 	and.w	r3, r3, #4
 801a964:	2b00      	cmp	r3, #0
 801a966:	d005      	beq.n	801a974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801a968:	4b59      	ldr	r3, [pc, #356]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a96a:	689b      	ldr	r3, [r3, #8]
 801a96c:	4a58      	ldr	r2, [pc, #352]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a96e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801a972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	f003 0308 	and.w	r3, r3, #8
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d005      	beq.n	801a98c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801a980:	4b53      	ldr	r3, [pc, #332]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a982:	689b      	ldr	r3, [r3, #8]
 801a984:	4a52      	ldr	r2, [pc, #328]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801a98a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801a98c:	4b50      	ldr	r3, [pc, #320]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a98e:	689b      	ldr	r3, [r3, #8]
 801a990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	689b      	ldr	r3, [r3, #8]
 801a998:	494d      	ldr	r1, [pc, #308]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a99a:	4313      	orrs	r3, r2
 801a99c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	f003 0301 	and.w	r3, r3, #1
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d044      	beq.n	801aa34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	685b      	ldr	r3, [r3, #4]
 801a9ae:	2b01      	cmp	r3, #1
 801a9b0:	d107      	bne.n	801a9c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801a9b2:	4b47      	ldr	r3, [pc, #284]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d119      	bne.n	801a9f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a9be:	2301      	movs	r3, #1
 801a9c0:	e07f      	b.n	801aac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	685b      	ldr	r3, [r3, #4]
 801a9c6:	2b02      	cmp	r3, #2
 801a9c8:	d003      	beq.n	801a9d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801a9ce:	2b03      	cmp	r3, #3
 801a9d0:	d107      	bne.n	801a9e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801a9d2:	4b3f      	ldr	r3, [pc, #252]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d109      	bne.n	801a9f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a9de:	2301      	movs	r3, #1
 801a9e0:	e06f      	b.n	801aac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801a9e2:	4b3b      	ldr	r3, [pc, #236]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	f003 0302 	and.w	r3, r3, #2
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d101      	bne.n	801a9f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801a9ee:	2301      	movs	r3, #1
 801a9f0:	e067      	b.n	801aac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801a9f2:	4b37      	ldr	r3, [pc, #220]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801a9f4:	689b      	ldr	r3, [r3, #8]
 801a9f6:	f023 0203 	bic.w	r2, r3, #3
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	685b      	ldr	r3, [r3, #4]
 801a9fe:	4934      	ldr	r1, [pc, #208]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801aa00:	4313      	orrs	r3, r2
 801aa02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801aa04:	f7fb ff90 	bl	8016928 <HAL_GetTick>
 801aa08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801aa0a:	e00a      	b.n	801aa22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801aa0c:	f7fb ff8c 	bl	8016928 <HAL_GetTick>
 801aa10:	4602      	mov	r2, r0
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	1ad3      	subs	r3, r2, r3
 801aa16:	f241 3288 	movw	r2, #5000	; 0x1388
 801aa1a:	4293      	cmp	r3, r2
 801aa1c:	d901      	bls.n	801aa22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801aa1e:	2303      	movs	r3, #3
 801aa20:	e04f      	b.n	801aac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801aa22:	4b2b      	ldr	r3, [pc, #172]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801aa24:	689b      	ldr	r3, [r3, #8]
 801aa26:	f003 020c 	and.w	r2, r3, #12
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	685b      	ldr	r3, [r3, #4]
 801aa2e:	009b      	lsls	r3, r3, #2
 801aa30:	429a      	cmp	r2, r3
 801aa32:	d1eb      	bne.n	801aa0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801aa34:	4b25      	ldr	r3, [pc, #148]	; (801aacc <HAL_RCC_ClockConfig+0x1b8>)
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	f003 0307 	and.w	r3, r3, #7
 801aa3c:	683a      	ldr	r2, [r7, #0]
 801aa3e:	429a      	cmp	r2, r3
 801aa40:	d20c      	bcs.n	801aa5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801aa42:	4b22      	ldr	r3, [pc, #136]	; (801aacc <HAL_RCC_ClockConfig+0x1b8>)
 801aa44:	683a      	ldr	r2, [r7, #0]
 801aa46:	b2d2      	uxtb	r2, r2
 801aa48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801aa4a:	4b20      	ldr	r3, [pc, #128]	; (801aacc <HAL_RCC_ClockConfig+0x1b8>)
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	f003 0307 	and.w	r3, r3, #7
 801aa52:	683a      	ldr	r2, [r7, #0]
 801aa54:	429a      	cmp	r2, r3
 801aa56:	d001      	beq.n	801aa5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801aa58:	2301      	movs	r3, #1
 801aa5a:	e032      	b.n	801aac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	f003 0304 	and.w	r3, r3, #4
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d008      	beq.n	801aa7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801aa68:	4b19      	ldr	r3, [pc, #100]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801aa6a:	689b      	ldr	r3, [r3, #8]
 801aa6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	68db      	ldr	r3, [r3, #12]
 801aa74:	4916      	ldr	r1, [pc, #88]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801aa76:	4313      	orrs	r3, r2
 801aa78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	f003 0308 	and.w	r3, r3, #8
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d009      	beq.n	801aa9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801aa86:	4b12      	ldr	r3, [pc, #72]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801aa88:	689b      	ldr	r3, [r3, #8]
 801aa8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	691b      	ldr	r3, [r3, #16]
 801aa92:	00db      	lsls	r3, r3, #3
 801aa94:	490e      	ldr	r1, [pc, #56]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801aa96:	4313      	orrs	r3, r2
 801aa98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801aa9a:	f000 f821 	bl	801aae0 <HAL_RCC_GetSysClockFreq>
 801aa9e:	4602      	mov	r2, r0
 801aaa0:	4b0b      	ldr	r3, [pc, #44]	; (801aad0 <HAL_RCC_ClockConfig+0x1bc>)
 801aaa2:	689b      	ldr	r3, [r3, #8]
 801aaa4:	091b      	lsrs	r3, r3, #4
 801aaa6:	f003 030f 	and.w	r3, r3, #15
 801aaaa:	490a      	ldr	r1, [pc, #40]	; (801aad4 <HAL_RCC_ClockConfig+0x1c0>)
 801aaac:	5ccb      	ldrb	r3, [r1, r3]
 801aaae:	fa22 f303 	lsr.w	r3, r2, r3
 801aab2:	4a09      	ldr	r2, [pc, #36]	; (801aad8 <HAL_RCC_ClockConfig+0x1c4>)
 801aab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801aab6:	4b09      	ldr	r3, [pc, #36]	; (801aadc <HAL_RCC_ClockConfig+0x1c8>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	4618      	mov	r0, r3
 801aabc:	f7fb fef0 	bl	80168a0 <HAL_InitTick>

  return HAL_OK;
 801aac0:	2300      	movs	r3, #0
}
 801aac2:	4618      	mov	r0, r3
 801aac4:	3710      	adds	r7, #16
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}
 801aaca:	bf00      	nop
 801aacc:	40023c00 	.word	0x40023c00
 801aad0:	40023800 	.word	0x40023800
 801aad4:	0802a154 	.word	0x0802a154
 801aad8:	200001e0 	.word	0x200001e0
 801aadc:	200001e4 	.word	0x200001e4

0801aae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801aae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801aae4:	b094      	sub	sp, #80	; 0x50
 801aae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801aae8:	2300      	movs	r3, #0
 801aaea:	647b      	str	r3, [r7, #68]	; 0x44
 801aaec:	2300      	movs	r3, #0
 801aaee:	64fb      	str	r3, [r7, #76]	; 0x4c
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801aaf8:	4b79      	ldr	r3, [pc, #484]	; (801ace0 <HAL_RCC_GetSysClockFreq+0x200>)
 801aafa:	689b      	ldr	r3, [r3, #8]
 801aafc:	f003 030c 	and.w	r3, r3, #12
 801ab00:	2b08      	cmp	r3, #8
 801ab02:	d00d      	beq.n	801ab20 <HAL_RCC_GetSysClockFreq+0x40>
 801ab04:	2b08      	cmp	r3, #8
 801ab06:	f200 80e1 	bhi.w	801accc <HAL_RCC_GetSysClockFreq+0x1ec>
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d002      	beq.n	801ab14 <HAL_RCC_GetSysClockFreq+0x34>
 801ab0e:	2b04      	cmp	r3, #4
 801ab10:	d003      	beq.n	801ab1a <HAL_RCC_GetSysClockFreq+0x3a>
 801ab12:	e0db      	b.n	801accc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801ab14:	4b73      	ldr	r3, [pc, #460]	; (801ace4 <HAL_RCC_GetSysClockFreq+0x204>)
 801ab16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801ab18:	e0db      	b.n	801acd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801ab1a:	4b73      	ldr	r3, [pc, #460]	; (801ace8 <HAL_RCC_GetSysClockFreq+0x208>)
 801ab1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801ab1e:	e0d8      	b.n	801acd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801ab20:	4b6f      	ldr	r3, [pc, #444]	; (801ace0 <HAL_RCC_GetSysClockFreq+0x200>)
 801ab22:	685b      	ldr	r3, [r3, #4]
 801ab24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801ab2a:	4b6d      	ldr	r3, [pc, #436]	; (801ace0 <HAL_RCC_GetSysClockFreq+0x200>)
 801ab2c:	685b      	ldr	r3, [r3, #4]
 801ab2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d063      	beq.n	801abfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ab36:	4b6a      	ldr	r3, [pc, #424]	; (801ace0 <HAL_RCC_GetSysClockFreq+0x200>)
 801ab38:	685b      	ldr	r3, [r3, #4]
 801ab3a:	099b      	lsrs	r3, r3, #6
 801ab3c:	2200      	movs	r2, #0
 801ab3e:	63bb      	str	r3, [r7, #56]	; 0x38
 801ab40:	63fa      	str	r2, [r7, #60]	; 0x3c
 801ab42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ab48:	633b      	str	r3, [r7, #48]	; 0x30
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	637b      	str	r3, [r7, #52]	; 0x34
 801ab4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801ab52:	4622      	mov	r2, r4
 801ab54:	462b      	mov	r3, r5
 801ab56:	f04f 0000 	mov.w	r0, #0
 801ab5a:	f04f 0100 	mov.w	r1, #0
 801ab5e:	0159      	lsls	r1, r3, #5
 801ab60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801ab64:	0150      	lsls	r0, r2, #5
 801ab66:	4602      	mov	r2, r0
 801ab68:	460b      	mov	r3, r1
 801ab6a:	4621      	mov	r1, r4
 801ab6c:	1a51      	subs	r1, r2, r1
 801ab6e:	6139      	str	r1, [r7, #16]
 801ab70:	4629      	mov	r1, r5
 801ab72:	eb63 0301 	sbc.w	r3, r3, r1
 801ab76:	617b      	str	r3, [r7, #20]
 801ab78:	f04f 0200 	mov.w	r2, #0
 801ab7c:	f04f 0300 	mov.w	r3, #0
 801ab80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801ab84:	4659      	mov	r1, fp
 801ab86:	018b      	lsls	r3, r1, #6
 801ab88:	4651      	mov	r1, sl
 801ab8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801ab8e:	4651      	mov	r1, sl
 801ab90:	018a      	lsls	r2, r1, #6
 801ab92:	4651      	mov	r1, sl
 801ab94:	ebb2 0801 	subs.w	r8, r2, r1
 801ab98:	4659      	mov	r1, fp
 801ab9a:	eb63 0901 	sbc.w	r9, r3, r1
 801ab9e:	f04f 0200 	mov.w	r2, #0
 801aba2:	f04f 0300 	mov.w	r3, #0
 801aba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801abaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801abae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801abb2:	4690      	mov	r8, r2
 801abb4:	4699      	mov	r9, r3
 801abb6:	4623      	mov	r3, r4
 801abb8:	eb18 0303 	adds.w	r3, r8, r3
 801abbc:	60bb      	str	r3, [r7, #8]
 801abbe:	462b      	mov	r3, r5
 801abc0:	eb49 0303 	adc.w	r3, r9, r3
 801abc4:	60fb      	str	r3, [r7, #12]
 801abc6:	f04f 0200 	mov.w	r2, #0
 801abca:	f04f 0300 	mov.w	r3, #0
 801abce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801abd2:	4629      	mov	r1, r5
 801abd4:	024b      	lsls	r3, r1, #9
 801abd6:	4621      	mov	r1, r4
 801abd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801abdc:	4621      	mov	r1, r4
 801abde:	024a      	lsls	r2, r1, #9
 801abe0:	4610      	mov	r0, r2
 801abe2:	4619      	mov	r1, r3
 801abe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801abe6:	2200      	movs	r2, #0
 801abe8:	62bb      	str	r3, [r7, #40]	; 0x28
 801abea:	62fa      	str	r2, [r7, #44]	; 0x2c
 801abec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801abf0:	f7e6 f84a 	bl	8000c88 <__aeabi_uldivmod>
 801abf4:	4602      	mov	r2, r0
 801abf6:	460b      	mov	r3, r1
 801abf8:	4613      	mov	r3, r2
 801abfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 801abfc:	e058      	b.n	801acb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801abfe:	4b38      	ldr	r3, [pc, #224]	; (801ace0 <HAL_RCC_GetSysClockFreq+0x200>)
 801ac00:	685b      	ldr	r3, [r3, #4]
 801ac02:	099b      	lsrs	r3, r3, #6
 801ac04:	2200      	movs	r2, #0
 801ac06:	4618      	mov	r0, r3
 801ac08:	4611      	mov	r1, r2
 801ac0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801ac0e:	623b      	str	r3, [r7, #32]
 801ac10:	2300      	movs	r3, #0
 801ac12:	627b      	str	r3, [r7, #36]	; 0x24
 801ac14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801ac18:	4642      	mov	r2, r8
 801ac1a:	464b      	mov	r3, r9
 801ac1c:	f04f 0000 	mov.w	r0, #0
 801ac20:	f04f 0100 	mov.w	r1, #0
 801ac24:	0159      	lsls	r1, r3, #5
 801ac26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801ac2a:	0150      	lsls	r0, r2, #5
 801ac2c:	4602      	mov	r2, r0
 801ac2e:	460b      	mov	r3, r1
 801ac30:	4641      	mov	r1, r8
 801ac32:	ebb2 0a01 	subs.w	sl, r2, r1
 801ac36:	4649      	mov	r1, r9
 801ac38:	eb63 0b01 	sbc.w	fp, r3, r1
 801ac3c:	f04f 0200 	mov.w	r2, #0
 801ac40:	f04f 0300 	mov.w	r3, #0
 801ac44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801ac48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801ac4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801ac50:	ebb2 040a 	subs.w	r4, r2, sl
 801ac54:	eb63 050b 	sbc.w	r5, r3, fp
 801ac58:	f04f 0200 	mov.w	r2, #0
 801ac5c:	f04f 0300 	mov.w	r3, #0
 801ac60:	00eb      	lsls	r3, r5, #3
 801ac62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801ac66:	00e2      	lsls	r2, r4, #3
 801ac68:	4614      	mov	r4, r2
 801ac6a:	461d      	mov	r5, r3
 801ac6c:	4643      	mov	r3, r8
 801ac6e:	18e3      	adds	r3, r4, r3
 801ac70:	603b      	str	r3, [r7, #0]
 801ac72:	464b      	mov	r3, r9
 801ac74:	eb45 0303 	adc.w	r3, r5, r3
 801ac78:	607b      	str	r3, [r7, #4]
 801ac7a:	f04f 0200 	mov.w	r2, #0
 801ac7e:	f04f 0300 	mov.w	r3, #0
 801ac82:	e9d7 4500 	ldrd	r4, r5, [r7]
 801ac86:	4629      	mov	r1, r5
 801ac88:	028b      	lsls	r3, r1, #10
 801ac8a:	4621      	mov	r1, r4
 801ac8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801ac90:	4621      	mov	r1, r4
 801ac92:	028a      	lsls	r2, r1, #10
 801ac94:	4610      	mov	r0, r2
 801ac96:	4619      	mov	r1, r3
 801ac98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	61bb      	str	r3, [r7, #24]
 801ac9e:	61fa      	str	r2, [r7, #28]
 801aca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801aca4:	f7e5 fff0 	bl	8000c88 <__aeabi_uldivmod>
 801aca8:	4602      	mov	r2, r0
 801acaa:	460b      	mov	r3, r1
 801acac:	4613      	mov	r3, r2
 801acae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801acb0:	4b0b      	ldr	r3, [pc, #44]	; (801ace0 <HAL_RCC_GetSysClockFreq+0x200>)
 801acb2:	685b      	ldr	r3, [r3, #4]
 801acb4:	0c1b      	lsrs	r3, r3, #16
 801acb6:	f003 0303 	and.w	r3, r3, #3
 801acba:	3301      	adds	r3, #1
 801acbc:	005b      	lsls	r3, r3, #1
 801acbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801acc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801acc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801acc4:	fbb2 f3f3 	udiv	r3, r2, r3
 801acc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801acca:	e002      	b.n	801acd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801accc:	4b05      	ldr	r3, [pc, #20]	; (801ace4 <HAL_RCC_GetSysClockFreq+0x204>)
 801acce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801acd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 801acd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801acd4:	4618      	mov	r0, r3
 801acd6:	3750      	adds	r7, #80	; 0x50
 801acd8:	46bd      	mov	sp, r7
 801acda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801acde:	bf00      	nop
 801ace0:	40023800 	.word	0x40023800
 801ace4:	00f42400 	.word	0x00f42400
 801ace8:	007a1200 	.word	0x007a1200

0801acec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801acec:	b480      	push	{r7}
 801acee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801acf0:	4b03      	ldr	r3, [pc, #12]	; (801ad00 <HAL_RCC_GetHCLKFreq+0x14>)
 801acf2:	681b      	ldr	r3, [r3, #0]
}
 801acf4:	4618      	mov	r0, r3
 801acf6:	46bd      	mov	sp, r7
 801acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acfc:	4770      	bx	lr
 801acfe:	bf00      	nop
 801ad00:	200001e0 	.word	0x200001e0

0801ad04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801ad08:	f7ff fff0 	bl	801acec <HAL_RCC_GetHCLKFreq>
 801ad0c:	4602      	mov	r2, r0
 801ad0e:	4b05      	ldr	r3, [pc, #20]	; (801ad24 <HAL_RCC_GetPCLK1Freq+0x20>)
 801ad10:	689b      	ldr	r3, [r3, #8]
 801ad12:	0a9b      	lsrs	r3, r3, #10
 801ad14:	f003 0307 	and.w	r3, r3, #7
 801ad18:	4903      	ldr	r1, [pc, #12]	; (801ad28 <HAL_RCC_GetPCLK1Freq+0x24>)
 801ad1a:	5ccb      	ldrb	r3, [r1, r3]
 801ad1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ad20:	4618      	mov	r0, r3
 801ad22:	bd80      	pop	{r7, pc}
 801ad24:	40023800 	.word	0x40023800
 801ad28:	0802a164 	.word	0x0802a164

0801ad2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801ad30:	f7ff ffdc 	bl	801acec <HAL_RCC_GetHCLKFreq>
 801ad34:	4602      	mov	r2, r0
 801ad36:	4b05      	ldr	r3, [pc, #20]	; (801ad4c <HAL_RCC_GetPCLK2Freq+0x20>)
 801ad38:	689b      	ldr	r3, [r3, #8]
 801ad3a:	0b5b      	lsrs	r3, r3, #13
 801ad3c:	f003 0307 	and.w	r3, r3, #7
 801ad40:	4903      	ldr	r1, [pc, #12]	; (801ad50 <HAL_RCC_GetPCLK2Freq+0x24>)
 801ad42:	5ccb      	ldrb	r3, [r1, r3]
 801ad44:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ad48:	4618      	mov	r0, r3
 801ad4a:	bd80      	pop	{r7, pc}
 801ad4c:	40023800 	.word	0x40023800
 801ad50:	0802a164 	.word	0x0802a164

0801ad54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ad54:	b580      	push	{r7, lr}
 801ad56:	b082      	sub	sp, #8
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d101      	bne.n	801ad66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ad62:	2301      	movs	r3, #1
 801ad64:	e041      	b.n	801adea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ad6c:	b2db      	uxtb	r3, r3
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d106      	bne.n	801ad80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	2200      	movs	r2, #0
 801ad76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ad7a:	6878      	ldr	r0, [r7, #4]
 801ad7c:	f7fb fa86 	bl	801628c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	2202      	movs	r2, #2
 801ad84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	681a      	ldr	r2, [r3, #0]
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	3304      	adds	r3, #4
 801ad90:	4619      	mov	r1, r3
 801ad92:	4610      	mov	r0, r2
 801ad94:	f000 fcae 	bl	801b6f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	2201      	movs	r2, #1
 801ad9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	2201      	movs	r2, #1
 801ada4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	2201      	movs	r2, #1
 801adac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	2201      	movs	r2, #1
 801adb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2201      	movs	r2, #1
 801adbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	2201      	movs	r2, #1
 801adc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	2201      	movs	r2, #1
 801adcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	2201      	movs	r2, #1
 801add4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2201      	movs	r2, #1
 801addc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	2201      	movs	r2, #1
 801ade4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ade8:	2300      	movs	r3, #0
}
 801adea:	4618      	mov	r0, r3
 801adec:	3708      	adds	r7, #8
 801adee:	46bd      	mov	sp, r7
 801adf0:	bd80      	pop	{r7, pc}
	...

0801adf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801adf4:	b480      	push	{r7}
 801adf6:	b085      	sub	sp, #20
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ae02:	b2db      	uxtb	r3, r3
 801ae04:	2b01      	cmp	r3, #1
 801ae06:	d001      	beq.n	801ae0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801ae08:	2301      	movs	r3, #1
 801ae0a:	e03c      	b.n	801ae86 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	2202      	movs	r2, #2
 801ae10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	4a1e      	ldr	r2, [pc, #120]	; (801ae94 <HAL_TIM_Base_Start+0xa0>)
 801ae1a:	4293      	cmp	r3, r2
 801ae1c:	d018      	beq.n	801ae50 <HAL_TIM_Base_Start+0x5c>
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ae26:	d013      	beq.n	801ae50 <HAL_TIM_Base_Start+0x5c>
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	4a1a      	ldr	r2, [pc, #104]	; (801ae98 <HAL_TIM_Base_Start+0xa4>)
 801ae2e:	4293      	cmp	r3, r2
 801ae30:	d00e      	beq.n	801ae50 <HAL_TIM_Base_Start+0x5c>
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	4a19      	ldr	r2, [pc, #100]	; (801ae9c <HAL_TIM_Base_Start+0xa8>)
 801ae38:	4293      	cmp	r3, r2
 801ae3a:	d009      	beq.n	801ae50 <HAL_TIM_Base_Start+0x5c>
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	4a17      	ldr	r2, [pc, #92]	; (801aea0 <HAL_TIM_Base_Start+0xac>)
 801ae42:	4293      	cmp	r3, r2
 801ae44:	d004      	beq.n	801ae50 <HAL_TIM_Base_Start+0x5c>
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	4a16      	ldr	r2, [pc, #88]	; (801aea4 <HAL_TIM_Base_Start+0xb0>)
 801ae4c:	4293      	cmp	r3, r2
 801ae4e:	d111      	bne.n	801ae74 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	689b      	ldr	r3, [r3, #8]
 801ae56:	f003 0307 	and.w	r3, r3, #7
 801ae5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	2b06      	cmp	r3, #6
 801ae60:	d010      	beq.n	801ae84 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	681a      	ldr	r2, [r3, #0]
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	f042 0201 	orr.w	r2, r2, #1
 801ae70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ae72:	e007      	b.n	801ae84 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	681a      	ldr	r2, [r3, #0]
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	f042 0201 	orr.w	r2, r2, #1
 801ae82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801ae84:	2300      	movs	r3, #0
}
 801ae86:	4618      	mov	r0, r3
 801ae88:	3714      	adds	r7, #20
 801ae8a:	46bd      	mov	sp, r7
 801ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae90:	4770      	bx	lr
 801ae92:	bf00      	nop
 801ae94:	40010000 	.word	0x40010000
 801ae98:	40000400 	.word	0x40000400
 801ae9c:	40000800 	.word	0x40000800
 801aea0:	40000c00 	.word	0x40000c00
 801aea4:	40014000 	.word	0x40014000

0801aea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801aea8:	b480      	push	{r7}
 801aeaa:	b085      	sub	sp, #20
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801aeb6:	b2db      	uxtb	r3, r3
 801aeb8:	2b01      	cmp	r3, #1
 801aeba:	d001      	beq.n	801aec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801aebc:	2301      	movs	r3, #1
 801aebe:	e044      	b.n	801af4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	2202      	movs	r2, #2
 801aec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	68da      	ldr	r2, [r3, #12]
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	f042 0201 	orr.w	r2, r2, #1
 801aed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	4a1e      	ldr	r2, [pc, #120]	; (801af58 <HAL_TIM_Base_Start_IT+0xb0>)
 801aede:	4293      	cmp	r3, r2
 801aee0:	d018      	beq.n	801af14 <HAL_TIM_Base_Start_IT+0x6c>
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801aeea:	d013      	beq.n	801af14 <HAL_TIM_Base_Start_IT+0x6c>
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	4a1a      	ldr	r2, [pc, #104]	; (801af5c <HAL_TIM_Base_Start_IT+0xb4>)
 801aef2:	4293      	cmp	r3, r2
 801aef4:	d00e      	beq.n	801af14 <HAL_TIM_Base_Start_IT+0x6c>
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	4a19      	ldr	r2, [pc, #100]	; (801af60 <HAL_TIM_Base_Start_IT+0xb8>)
 801aefc:	4293      	cmp	r3, r2
 801aefe:	d009      	beq.n	801af14 <HAL_TIM_Base_Start_IT+0x6c>
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	4a17      	ldr	r2, [pc, #92]	; (801af64 <HAL_TIM_Base_Start_IT+0xbc>)
 801af06:	4293      	cmp	r3, r2
 801af08:	d004      	beq.n	801af14 <HAL_TIM_Base_Start_IT+0x6c>
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	4a16      	ldr	r2, [pc, #88]	; (801af68 <HAL_TIM_Base_Start_IT+0xc0>)
 801af10:	4293      	cmp	r3, r2
 801af12:	d111      	bne.n	801af38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	689b      	ldr	r3, [r3, #8]
 801af1a:	f003 0307 	and.w	r3, r3, #7
 801af1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	2b06      	cmp	r3, #6
 801af24:	d010      	beq.n	801af48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	681a      	ldr	r2, [r3, #0]
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	f042 0201 	orr.w	r2, r2, #1
 801af34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801af36:	e007      	b.n	801af48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	681a      	ldr	r2, [r3, #0]
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	f042 0201 	orr.w	r2, r2, #1
 801af46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801af48:	2300      	movs	r3, #0
}
 801af4a:	4618      	mov	r0, r3
 801af4c:	3714      	adds	r7, #20
 801af4e:	46bd      	mov	sp, r7
 801af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af54:	4770      	bx	lr
 801af56:	bf00      	nop
 801af58:	40010000 	.word	0x40010000
 801af5c:	40000400 	.word	0x40000400
 801af60:	40000800 	.word	0x40000800
 801af64:	40000c00 	.word	0x40000c00
 801af68:	40014000 	.word	0x40014000

0801af6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801af6c:	b580      	push	{r7, lr}
 801af6e:	b082      	sub	sp, #8
 801af70:	af00      	add	r7, sp, #0
 801af72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d101      	bne.n	801af7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801af7a:	2301      	movs	r3, #1
 801af7c:	e041      	b.n	801b002 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801af84:	b2db      	uxtb	r3, r3
 801af86:	2b00      	cmp	r3, #0
 801af88:	d106      	bne.n	801af98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	2200      	movs	r2, #0
 801af8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801af92:	6878      	ldr	r0, [r7, #4]
 801af94:	f000 f839 	bl	801b00a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	2202      	movs	r2, #2
 801af9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681a      	ldr	r2, [r3, #0]
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	3304      	adds	r3, #4
 801afa8:	4619      	mov	r1, r3
 801afaa:	4610      	mov	r0, r2
 801afac:	f000 fba2 	bl	801b6f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	2201      	movs	r2, #1
 801afb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	2201      	movs	r2, #1
 801afbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	2201      	movs	r2, #1
 801afc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	2201      	movs	r2, #1
 801afcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	2201      	movs	r2, #1
 801afd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	2201      	movs	r2, #1
 801afdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	2201      	movs	r2, #1
 801afe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	2201      	movs	r2, #1
 801afec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	2201      	movs	r2, #1
 801aff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	2201      	movs	r2, #1
 801affc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801b000:	2300      	movs	r3, #0
}
 801b002:	4618      	mov	r0, r3
 801b004:	3708      	adds	r7, #8
 801b006:	46bd      	mov	sp, r7
 801b008:	bd80      	pop	{r7, pc}

0801b00a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801b00a:	b480      	push	{r7}
 801b00c:	b083      	sub	sp, #12
 801b00e:	af00      	add	r7, sp, #0
 801b010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801b012:	bf00      	nop
 801b014:	370c      	adds	r7, #12
 801b016:	46bd      	mov	sp, r7
 801b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b01c:	4770      	bx	lr
	...

0801b020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801b020:	b580      	push	{r7, lr}
 801b022:	b084      	sub	sp, #16
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
 801b028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801b02a:	683b      	ldr	r3, [r7, #0]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d109      	bne.n	801b044 <HAL_TIM_PWM_Start+0x24>
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b036:	b2db      	uxtb	r3, r3
 801b038:	2b01      	cmp	r3, #1
 801b03a:	bf14      	ite	ne
 801b03c:	2301      	movne	r3, #1
 801b03e:	2300      	moveq	r3, #0
 801b040:	b2db      	uxtb	r3, r3
 801b042:	e022      	b.n	801b08a <HAL_TIM_PWM_Start+0x6a>
 801b044:	683b      	ldr	r3, [r7, #0]
 801b046:	2b04      	cmp	r3, #4
 801b048:	d109      	bne.n	801b05e <HAL_TIM_PWM_Start+0x3e>
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801b050:	b2db      	uxtb	r3, r3
 801b052:	2b01      	cmp	r3, #1
 801b054:	bf14      	ite	ne
 801b056:	2301      	movne	r3, #1
 801b058:	2300      	moveq	r3, #0
 801b05a:	b2db      	uxtb	r3, r3
 801b05c:	e015      	b.n	801b08a <HAL_TIM_PWM_Start+0x6a>
 801b05e:	683b      	ldr	r3, [r7, #0]
 801b060:	2b08      	cmp	r3, #8
 801b062:	d109      	bne.n	801b078 <HAL_TIM_PWM_Start+0x58>
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b06a:	b2db      	uxtb	r3, r3
 801b06c:	2b01      	cmp	r3, #1
 801b06e:	bf14      	ite	ne
 801b070:	2301      	movne	r3, #1
 801b072:	2300      	moveq	r3, #0
 801b074:	b2db      	uxtb	r3, r3
 801b076:	e008      	b.n	801b08a <HAL_TIM_PWM_Start+0x6a>
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b07e:	b2db      	uxtb	r3, r3
 801b080:	2b01      	cmp	r3, #1
 801b082:	bf14      	ite	ne
 801b084:	2301      	movne	r3, #1
 801b086:	2300      	moveq	r3, #0
 801b088:	b2db      	uxtb	r3, r3
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d001      	beq.n	801b092 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801b08e:	2301      	movs	r3, #1
 801b090:	e068      	b.n	801b164 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801b092:	683b      	ldr	r3, [r7, #0]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d104      	bne.n	801b0a2 <HAL_TIM_PWM_Start+0x82>
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	2202      	movs	r2, #2
 801b09c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801b0a0:	e013      	b.n	801b0ca <HAL_TIM_PWM_Start+0xaa>
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	2b04      	cmp	r3, #4
 801b0a6:	d104      	bne.n	801b0b2 <HAL_TIM_PWM_Start+0x92>
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	2202      	movs	r2, #2
 801b0ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801b0b0:	e00b      	b.n	801b0ca <HAL_TIM_PWM_Start+0xaa>
 801b0b2:	683b      	ldr	r3, [r7, #0]
 801b0b4:	2b08      	cmp	r3, #8
 801b0b6:	d104      	bne.n	801b0c2 <HAL_TIM_PWM_Start+0xa2>
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	2202      	movs	r2, #2
 801b0bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801b0c0:	e003      	b.n	801b0ca <HAL_TIM_PWM_Start+0xaa>
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	2202      	movs	r2, #2
 801b0c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	2201      	movs	r2, #1
 801b0d0:	6839      	ldr	r1, [r7, #0]
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	f000 fdb4 	bl	801bc40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	4a23      	ldr	r2, [pc, #140]	; (801b16c <HAL_TIM_PWM_Start+0x14c>)
 801b0de:	4293      	cmp	r3, r2
 801b0e0:	d107      	bne.n	801b0f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801b0f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	4a1d      	ldr	r2, [pc, #116]	; (801b16c <HAL_TIM_PWM_Start+0x14c>)
 801b0f8:	4293      	cmp	r3, r2
 801b0fa:	d018      	beq.n	801b12e <HAL_TIM_PWM_Start+0x10e>
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b104:	d013      	beq.n	801b12e <HAL_TIM_PWM_Start+0x10e>
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	4a19      	ldr	r2, [pc, #100]	; (801b170 <HAL_TIM_PWM_Start+0x150>)
 801b10c:	4293      	cmp	r3, r2
 801b10e:	d00e      	beq.n	801b12e <HAL_TIM_PWM_Start+0x10e>
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	4a17      	ldr	r2, [pc, #92]	; (801b174 <HAL_TIM_PWM_Start+0x154>)
 801b116:	4293      	cmp	r3, r2
 801b118:	d009      	beq.n	801b12e <HAL_TIM_PWM_Start+0x10e>
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	4a16      	ldr	r2, [pc, #88]	; (801b178 <HAL_TIM_PWM_Start+0x158>)
 801b120:	4293      	cmp	r3, r2
 801b122:	d004      	beq.n	801b12e <HAL_TIM_PWM_Start+0x10e>
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	4a14      	ldr	r2, [pc, #80]	; (801b17c <HAL_TIM_PWM_Start+0x15c>)
 801b12a:	4293      	cmp	r3, r2
 801b12c:	d111      	bne.n	801b152 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	689b      	ldr	r3, [r3, #8]
 801b134:	f003 0307 	and.w	r3, r3, #7
 801b138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	2b06      	cmp	r3, #6
 801b13e:	d010      	beq.n	801b162 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	681a      	ldr	r2, [r3, #0]
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	f042 0201 	orr.w	r2, r2, #1
 801b14e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b150:	e007      	b.n	801b162 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	681a      	ldr	r2, [r3, #0]
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	f042 0201 	orr.w	r2, r2, #1
 801b160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b162:	2300      	movs	r3, #0
}
 801b164:	4618      	mov	r0, r3
 801b166:	3710      	adds	r7, #16
 801b168:	46bd      	mov	sp, r7
 801b16a:	bd80      	pop	{r7, pc}
 801b16c:	40010000 	.word	0x40010000
 801b170:	40000400 	.word	0x40000400
 801b174:	40000800 	.word	0x40000800
 801b178:	40000c00 	.word	0x40000c00
 801b17c:	40014000 	.word	0x40014000

0801b180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b082      	sub	sp, #8
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	691b      	ldr	r3, [r3, #16]
 801b18e:	f003 0302 	and.w	r3, r3, #2
 801b192:	2b02      	cmp	r3, #2
 801b194:	d122      	bne.n	801b1dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	f003 0302 	and.w	r3, r3, #2
 801b1a0:	2b02      	cmp	r3, #2
 801b1a2:	d11b      	bne.n	801b1dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	f06f 0202 	mvn.w	r2, #2
 801b1ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	2201      	movs	r2, #1
 801b1b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	699b      	ldr	r3, [r3, #24]
 801b1ba:	f003 0303 	and.w	r3, r3, #3
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d003      	beq.n	801b1ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801b1c2:	6878      	ldr	r0, [r7, #4]
 801b1c4:	f000 fa77 	bl	801b6b6 <HAL_TIM_IC_CaptureCallback>
 801b1c8:	e005      	b.n	801b1d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801b1ca:	6878      	ldr	r0, [r7, #4]
 801b1cc:	f000 fa69 	bl	801b6a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b1d0:	6878      	ldr	r0, [r7, #4]
 801b1d2:	f000 fa7a 	bl	801b6ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	2200      	movs	r2, #0
 801b1da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	691b      	ldr	r3, [r3, #16]
 801b1e2:	f003 0304 	and.w	r3, r3, #4
 801b1e6:	2b04      	cmp	r3, #4
 801b1e8:	d122      	bne.n	801b230 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	68db      	ldr	r3, [r3, #12]
 801b1f0:	f003 0304 	and.w	r3, r3, #4
 801b1f4:	2b04      	cmp	r3, #4
 801b1f6:	d11b      	bne.n	801b230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	f06f 0204 	mvn.w	r2, #4
 801b200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	2202      	movs	r2, #2
 801b206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	699b      	ldr	r3, [r3, #24]
 801b20e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b212:	2b00      	cmp	r3, #0
 801b214:	d003      	beq.n	801b21e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b216:	6878      	ldr	r0, [r7, #4]
 801b218:	f000 fa4d 	bl	801b6b6 <HAL_TIM_IC_CaptureCallback>
 801b21c:	e005      	b.n	801b22a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b21e:	6878      	ldr	r0, [r7, #4]
 801b220:	f000 fa3f 	bl	801b6a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b224:	6878      	ldr	r0, [r7, #4]
 801b226:	f000 fa50 	bl	801b6ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	2200      	movs	r2, #0
 801b22e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	691b      	ldr	r3, [r3, #16]
 801b236:	f003 0308 	and.w	r3, r3, #8
 801b23a:	2b08      	cmp	r3, #8
 801b23c:	d122      	bne.n	801b284 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	68db      	ldr	r3, [r3, #12]
 801b244:	f003 0308 	and.w	r3, r3, #8
 801b248:	2b08      	cmp	r3, #8
 801b24a:	d11b      	bne.n	801b284 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	f06f 0208 	mvn.w	r2, #8
 801b254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	2204      	movs	r2, #4
 801b25a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	69db      	ldr	r3, [r3, #28]
 801b262:	f003 0303 	and.w	r3, r3, #3
 801b266:	2b00      	cmp	r3, #0
 801b268:	d003      	beq.n	801b272 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b26a:	6878      	ldr	r0, [r7, #4]
 801b26c:	f000 fa23 	bl	801b6b6 <HAL_TIM_IC_CaptureCallback>
 801b270:	e005      	b.n	801b27e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b272:	6878      	ldr	r0, [r7, #4]
 801b274:	f000 fa15 	bl	801b6a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b278:	6878      	ldr	r0, [r7, #4]
 801b27a:	f000 fa26 	bl	801b6ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	2200      	movs	r2, #0
 801b282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	691b      	ldr	r3, [r3, #16]
 801b28a:	f003 0310 	and.w	r3, r3, #16
 801b28e:	2b10      	cmp	r3, #16
 801b290:	d122      	bne.n	801b2d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	68db      	ldr	r3, [r3, #12]
 801b298:	f003 0310 	and.w	r3, r3, #16
 801b29c:	2b10      	cmp	r3, #16
 801b29e:	d11b      	bne.n	801b2d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	f06f 0210 	mvn.w	r2, #16
 801b2a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	2208      	movs	r2, #8
 801b2ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	69db      	ldr	r3, [r3, #28]
 801b2b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d003      	beq.n	801b2c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b2be:	6878      	ldr	r0, [r7, #4]
 801b2c0:	f000 f9f9 	bl	801b6b6 <HAL_TIM_IC_CaptureCallback>
 801b2c4:	e005      	b.n	801b2d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b2c6:	6878      	ldr	r0, [r7, #4]
 801b2c8:	f000 f9eb 	bl	801b6a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b2cc:	6878      	ldr	r0, [r7, #4]
 801b2ce:	f000 f9fc 	bl	801b6ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	2200      	movs	r2, #0
 801b2d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	691b      	ldr	r3, [r3, #16]
 801b2de:	f003 0301 	and.w	r3, r3, #1
 801b2e2:	2b01      	cmp	r3, #1
 801b2e4:	d10e      	bne.n	801b304 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	68db      	ldr	r3, [r3, #12]
 801b2ec:	f003 0301 	and.w	r3, r3, #1
 801b2f0:	2b01      	cmp	r3, #1
 801b2f2:	d107      	bne.n	801b304 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	f06f 0201 	mvn.w	r2, #1
 801b2fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801b2fe:	6878      	ldr	r0, [r7, #4]
 801b300:	f7e9 f85e 	bl	80043c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	691b      	ldr	r3, [r3, #16]
 801b30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b30e:	2b80      	cmp	r3, #128	; 0x80
 801b310:	d10e      	bne.n	801b330 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	68db      	ldr	r3, [r3, #12]
 801b318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b31c:	2b80      	cmp	r3, #128	; 0x80
 801b31e:	d107      	bne.n	801b330 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801b32a:	6878      	ldr	r0, [r7, #4]
 801b32c:	f000 fd26 	bl	801bd7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	691b      	ldr	r3, [r3, #16]
 801b336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b33a:	2b40      	cmp	r3, #64	; 0x40
 801b33c:	d10e      	bne.n	801b35c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	68db      	ldr	r3, [r3, #12]
 801b344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b348:	2b40      	cmp	r3, #64	; 0x40
 801b34a:	d107      	bne.n	801b35c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801b356:	6878      	ldr	r0, [r7, #4]
 801b358:	f000 f9c1 	bl	801b6de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	691b      	ldr	r3, [r3, #16]
 801b362:	f003 0320 	and.w	r3, r3, #32
 801b366:	2b20      	cmp	r3, #32
 801b368:	d10e      	bne.n	801b388 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	68db      	ldr	r3, [r3, #12]
 801b370:	f003 0320 	and.w	r3, r3, #32
 801b374:	2b20      	cmp	r3, #32
 801b376:	d107      	bne.n	801b388 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	f06f 0220 	mvn.w	r2, #32
 801b380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801b382:	6878      	ldr	r0, [r7, #4]
 801b384:	f000 fcf0 	bl	801bd68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b388:	bf00      	nop
 801b38a:	3708      	adds	r7, #8
 801b38c:	46bd      	mov	sp, r7
 801b38e:	bd80      	pop	{r7, pc}

0801b390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b086      	sub	sp, #24
 801b394:	af00      	add	r7, sp, #0
 801b396:	60f8      	str	r0, [r7, #12]
 801b398:	60b9      	str	r1, [r7, #8]
 801b39a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b39c:	2300      	movs	r3, #0
 801b39e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b3a6:	2b01      	cmp	r3, #1
 801b3a8:	d101      	bne.n	801b3ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 801b3aa:	2302      	movs	r3, #2
 801b3ac:	e0ae      	b.n	801b50c <HAL_TIM_PWM_ConfigChannel+0x17c>
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	2201      	movs	r2, #1
 801b3b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	2b0c      	cmp	r3, #12
 801b3ba:	f200 809f 	bhi.w	801b4fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 801b3be:	a201      	add	r2, pc, #4	; (adr r2, 801b3c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3c4:	0801b3f9 	.word	0x0801b3f9
 801b3c8:	0801b4fd 	.word	0x0801b4fd
 801b3cc:	0801b4fd 	.word	0x0801b4fd
 801b3d0:	0801b4fd 	.word	0x0801b4fd
 801b3d4:	0801b439 	.word	0x0801b439
 801b3d8:	0801b4fd 	.word	0x0801b4fd
 801b3dc:	0801b4fd 	.word	0x0801b4fd
 801b3e0:	0801b4fd 	.word	0x0801b4fd
 801b3e4:	0801b47b 	.word	0x0801b47b
 801b3e8:	0801b4fd 	.word	0x0801b4fd
 801b3ec:	0801b4fd 	.word	0x0801b4fd
 801b3f0:	0801b4fd 	.word	0x0801b4fd
 801b3f4:	0801b4bb 	.word	0x0801b4bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	68b9      	ldr	r1, [r7, #8]
 801b3fe:	4618      	mov	r0, r3
 801b400:	f000 f9f8 	bl	801b7f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	699a      	ldr	r2, [r3, #24]
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	f042 0208 	orr.w	r2, r2, #8
 801b412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	699a      	ldr	r2, [r3, #24]
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	f022 0204 	bic.w	r2, r2, #4
 801b422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801b424:	68fb      	ldr	r3, [r7, #12]
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	6999      	ldr	r1, [r3, #24]
 801b42a:	68bb      	ldr	r3, [r7, #8]
 801b42c:	691a      	ldr	r2, [r3, #16]
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	430a      	orrs	r2, r1
 801b434:	619a      	str	r2, [r3, #24]
      break;
 801b436:	e064      	b.n	801b502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	68b9      	ldr	r1, [r7, #8]
 801b43e:	4618      	mov	r0, r3
 801b440:	f000 fa3e 	bl	801b8c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	699a      	ldr	r2, [r3, #24]
 801b44a:	68fb      	ldr	r3, [r7, #12]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	699a      	ldr	r2, [r3, #24]
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	6999      	ldr	r1, [r3, #24]
 801b46a:	68bb      	ldr	r3, [r7, #8]
 801b46c:	691b      	ldr	r3, [r3, #16]
 801b46e:	021a      	lsls	r2, r3, #8
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	430a      	orrs	r2, r1
 801b476:	619a      	str	r2, [r3, #24]
      break;
 801b478:	e043      	b.n	801b502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	68b9      	ldr	r1, [r7, #8]
 801b480:	4618      	mov	r0, r3
 801b482:	f000 fa89 	bl	801b998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	69da      	ldr	r2, [r3, #28]
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	f042 0208 	orr.w	r2, r2, #8
 801b494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	69da      	ldr	r2, [r3, #28]
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	f022 0204 	bic.w	r2, r2, #4
 801b4a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	69d9      	ldr	r1, [r3, #28]
 801b4ac:	68bb      	ldr	r3, [r7, #8]
 801b4ae:	691a      	ldr	r2, [r3, #16]
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	430a      	orrs	r2, r1
 801b4b6:	61da      	str	r2, [r3, #28]
      break;
 801b4b8:	e023      	b.n	801b502 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801b4ba:	68fb      	ldr	r3, [r7, #12]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	68b9      	ldr	r1, [r7, #8]
 801b4c0:	4618      	mov	r0, r3
 801b4c2:	f000 fad3 	bl	801ba6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	69da      	ldr	r2, [r3, #28]
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801b4d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	69da      	ldr	r2, [r3, #28]
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801b4e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801b4e6:	68fb      	ldr	r3, [r7, #12]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	69d9      	ldr	r1, [r3, #28]
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	691b      	ldr	r3, [r3, #16]
 801b4f0:	021a      	lsls	r2, r3, #8
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	430a      	orrs	r2, r1
 801b4f8:	61da      	str	r2, [r3, #28]
      break;
 801b4fa:	e002      	b.n	801b502 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801b4fc:	2301      	movs	r3, #1
 801b4fe:	75fb      	strb	r3, [r7, #23]
      break;
 801b500:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	2200      	movs	r2, #0
 801b506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b50a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b50c:	4618      	mov	r0, r3
 801b50e:	3718      	adds	r7, #24
 801b510:	46bd      	mov	sp, r7
 801b512:	bd80      	pop	{r7, pc}

0801b514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801b514:	b580      	push	{r7, lr}
 801b516:	b084      	sub	sp, #16
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
 801b51c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b51e:	2300      	movs	r3, #0
 801b520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b528:	2b01      	cmp	r3, #1
 801b52a:	d101      	bne.n	801b530 <HAL_TIM_ConfigClockSource+0x1c>
 801b52c:	2302      	movs	r3, #2
 801b52e:	e0b4      	b.n	801b69a <HAL_TIM_ConfigClockSource+0x186>
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	2201      	movs	r2, #1
 801b534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	2202      	movs	r2, #2
 801b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	689b      	ldr	r3, [r3, #8]
 801b546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801b548:	68bb      	ldr	r3, [r7, #8]
 801b54a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801b54e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b550:	68bb      	ldr	r3, [r7, #8]
 801b552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	68ba      	ldr	r2, [r7, #8]
 801b55e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801b560:	683b      	ldr	r3, [r7, #0]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b568:	d03e      	beq.n	801b5e8 <HAL_TIM_ConfigClockSource+0xd4>
 801b56a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b56e:	f200 8087 	bhi.w	801b680 <HAL_TIM_ConfigClockSource+0x16c>
 801b572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b576:	f000 8086 	beq.w	801b686 <HAL_TIM_ConfigClockSource+0x172>
 801b57a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b57e:	d87f      	bhi.n	801b680 <HAL_TIM_ConfigClockSource+0x16c>
 801b580:	2b70      	cmp	r3, #112	; 0x70
 801b582:	d01a      	beq.n	801b5ba <HAL_TIM_ConfigClockSource+0xa6>
 801b584:	2b70      	cmp	r3, #112	; 0x70
 801b586:	d87b      	bhi.n	801b680 <HAL_TIM_ConfigClockSource+0x16c>
 801b588:	2b60      	cmp	r3, #96	; 0x60
 801b58a:	d050      	beq.n	801b62e <HAL_TIM_ConfigClockSource+0x11a>
 801b58c:	2b60      	cmp	r3, #96	; 0x60
 801b58e:	d877      	bhi.n	801b680 <HAL_TIM_ConfigClockSource+0x16c>
 801b590:	2b50      	cmp	r3, #80	; 0x50
 801b592:	d03c      	beq.n	801b60e <HAL_TIM_ConfigClockSource+0xfa>
 801b594:	2b50      	cmp	r3, #80	; 0x50
 801b596:	d873      	bhi.n	801b680 <HAL_TIM_ConfigClockSource+0x16c>
 801b598:	2b40      	cmp	r3, #64	; 0x40
 801b59a:	d058      	beq.n	801b64e <HAL_TIM_ConfigClockSource+0x13a>
 801b59c:	2b40      	cmp	r3, #64	; 0x40
 801b59e:	d86f      	bhi.n	801b680 <HAL_TIM_ConfigClockSource+0x16c>
 801b5a0:	2b30      	cmp	r3, #48	; 0x30
 801b5a2:	d064      	beq.n	801b66e <HAL_TIM_ConfigClockSource+0x15a>
 801b5a4:	2b30      	cmp	r3, #48	; 0x30
 801b5a6:	d86b      	bhi.n	801b680 <HAL_TIM_ConfigClockSource+0x16c>
 801b5a8:	2b20      	cmp	r3, #32
 801b5aa:	d060      	beq.n	801b66e <HAL_TIM_ConfigClockSource+0x15a>
 801b5ac:	2b20      	cmp	r3, #32
 801b5ae:	d867      	bhi.n	801b680 <HAL_TIM_ConfigClockSource+0x16c>
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d05c      	beq.n	801b66e <HAL_TIM_ConfigClockSource+0x15a>
 801b5b4:	2b10      	cmp	r3, #16
 801b5b6:	d05a      	beq.n	801b66e <HAL_TIM_ConfigClockSource+0x15a>
 801b5b8:	e062      	b.n	801b680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	6818      	ldr	r0, [r3, #0]
 801b5be:	683b      	ldr	r3, [r7, #0]
 801b5c0:	6899      	ldr	r1, [r3, #8]
 801b5c2:	683b      	ldr	r3, [r7, #0]
 801b5c4:	685a      	ldr	r2, [r3, #4]
 801b5c6:	683b      	ldr	r3, [r7, #0]
 801b5c8:	68db      	ldr	r3, [r3, #12]
 801b5ca:	f000 fb19 	bl	801bc00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	681b      	ldr	r3, [r3, #0]
 801b5d2:	689b      	ldr	r3, [r3, #8]
 801b5d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801b5d6:	68bb      	ldr	r3, [r7, #8]
 801b5d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801b5dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	68ba      	ldr	r2, [r7, #8]
 801b5e4:	609a      	str	r2, [r3, #8]
      break;
 801b5e6:	e04f      	b.n	801b688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	6818      	ldr	r0, [r3, #0]
 801b5ec:	683b      	ldr	r3, [r7, #0]
 801b5ee:	6899      	ldr	r1, [r3, #8]
 801b5f0:	683b      	ldr	r3, [r7, #0]
 801b5f2:	685a      	ldr	r2, [r3, #4]
 801b5f4:	683b      	ldr	r3, [r7, #0]
 801b5f6:	68db      	ldr	r3, [r3, #12]
 801b5f8:	f000 fb02 	bl	801bc00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	689a      	ldr	r2, [r3, #8]
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801b60a:	609a      	str	r2, [r3, #8]
      break;
 801b60c:	e03c      	b.n	801b688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	6818      	ldr	r0, [r3, #0]
 801b612:	683b      	ldr	r3, [r7, #0]
 801b614:	6859      	ldr	r1, [r3, #4]
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	68db      	ldr	r3, [r3, #12]
 801b61a:	461a      	mov	r2, r3
 801b61c:	f000 fa76 	bl	801bb0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	2150      	movs	r1, #80	; 0x50
 801b626:	4618      	mov	r0, r3
 801b628:	f000 facf 	bl	801bbca <TIM_ITRx_SetConfig>
      break;
 801b62c:	e02c      	b.n	801b688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	6818      	ldr	r0, [r3, #0]
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	6859      	ldr	r1, [r3, #4]
 801b636:	683b      	ldr	r3, [r7, #0]
 801b638:	68db      	ldr	r3, [r3, #12]
 801b63a:	461a      	mov	r2, r3
 801b63c:	f000 fa95 	bl	801bb6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	2160      	movs	r1, #96	; 0x60
 801b646:	4618      	mov	r0, r3
 801b648:	f000 fabf 	bl	801bbca <TIM_ITRx_SetConfig>
      break;
 801b64c:	e01c      	b.n	801b688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	6818      	ldr	r0, [r3, #0]
 801b652:	683b      	ldr	r3, [r7, #0]
 801b654:	6859      	ldr	r1, [r3, #4]
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	68db      	ldr	r3, [r3, #12]
 801b65a:	461a      	mov	r2, r3
 801b65c:	f000 fa56 	bl	801bb0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	2140      	movs	r1, #64	; 0x40
 801b666:	4618      	mov	r0, r3
 801b668:	f000 faaf 	bl	801bbca <TIM_ITRx_SetConfig>
      break;
 801b66c:	e00c      	b.n	801b688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	681a      	ldr	r2, [r3, #0]
 801b672:	683b      	ldr	r3, [r7, #0]
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	4619      	mov	r1, r3
 801b678:	4610      	mov	r0, r2
 801b67a:	f000 faa6 	bl	801bbca <TIM_ITRx_SetConfig>
      break;
 801b67e:	e003      	b.n	801b688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801b680:	2301      	movs	r3, #1
 801b682:	73fb      	strb	r3, [r7, #15]
      break;
 801b684:	e000      	b.n	801b688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801b686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	2201      	movs	r2, #1
 801b68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	2200      	movs	r2, #0
 801b694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801b698:	7bfb      	ldrb	r3, [r7, #15]
}
 801b69a:	4618      	mov	r0, r3
 801b69c:	3710      	adds	r7, #16
 801b69e:	46bd      	mov	sp, r7
 801b6a0:	bd80      	pop	{r7, pc}

0801b6a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b6a2:	b480      	push	{r7}
 801b6a4:	b083      	sub	sp, #12
 801b6a6:	af00      	add	r7, sp, #0
 801b6a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b6aa:	bf00      	nop
 801b6ac:	370c      	adds	r7, #12
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6b4:	4770      	bx	lr

0801b6b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b6b6:	b480      	push	{r7}
 801b6b8:	b083      	sub	sp, #12
 801b6ba:	af00      	add	r7, sp, #0
 801b6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b6be:	bf00      	nop
 801b6c0:	370c      	adds	r7, #12
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c8:	4770      	bx	lr

0801b6ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b6ca:	b480      	push	{r7}
 801b6cc:	b083      	sub	sp, #12
 801b6ce:	af00      	add	r7, sp, #0
 801b6d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b6d2:	bf00      	nop
 801b6d4:	370c      	adds	r7, #12
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6dc:	4770      	bx	lr

0801b6de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b6de:	b480      	push	{r7}
 801b6e0:	b083      	sub	sp, #12
 801b6e2:	af00      	add	r7, sp, #0
 801b6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b6e6:	bf00      	nop
 801b6e8:	370c      	adds	r7, #12
 801b6ea:	46bd      	mov	sp, r7
 801b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6f0:	4770      	bx	lr
	...

0801b6f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801b6f4:	b480      	push	{r7}
 801b6f6:	b085      	sub	sp, #20
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	6078      	str	r0, [r7, #4]
 801b6fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	4a34      	ldr	r2, [pc, #208]	; (801b7d8 <TIM_Base_SetConfig+0xe4>)
 801b708:	4293      	cmp	r3, r2
 801b70a:	d00f      	beq.n	801b72c <TIM_Base_SetConfig+0x38>
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b712:	d00b      	beq.n	801b72c <TIM_Base_SetConfig+0x38>
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	4a31      	ldr	r2, [pc, #196]	; (801b7dc <TIM_Base_SetConfig+0xe8>)
 801b718:	4293      	cmp	r3, r2
 801b71a:	d007      	beq.n	801b72c <TIM_Base_SetConfig+0x38>
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	4a30      	ldr	r2, [pc, #192]	; (801b7e0 <TIM_Base_SetConfig+0xec>)
 801b720:	4293      	cmp	r3, r2
 801b722:	d003      	beq.n	801b72c <TIM_Base_SetConfig+0x38>
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	4a2f      	ldr	r2, [pc, #188]	; (801b7e4 <TIM_Base_SetConfig+0xf0>)
 801b728:	4293      	cmp	r3, r2
 801b72a:	d108      	bne.n	801b73e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b734:	683b      	ldr	r3, [r7, #0]
 801b736:	685b      	ldr	r3, [r3, #4]
 801b738:	68fa      	ldr	r2, [r7, #12]
 801b73a:	4313      	orrs	r3, r2
 801b73c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	4a25      	ldr	r2, [pc, #148]	; (801b7d8 <TIM_Base_SetConfig+0xe4>)
 801b742:	4293      	cmp	r3, r2
 801b744:	d01b      	beq.n	801b77e <TIM_Base_SetConfig+0x8a>
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b74c:	d017      	beq.n	801b77e <TIM_Base_SetConfig+0x8a>
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	4a22      	ldr	r2, [pc, #136]	; (801b7dc <TIM_Base_SetConfig+0xe8>)
 801b752:	4293      	cmp	r3, r2
 801b754:	d013      	beq.n	801b77e <TIM_Base_SetConfig+0x8a>
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	4a21      	ldr	r2, [pc, #132]	; (801b7e0 <TIM_Base_SetConfig+0xec>)
 801b75a:	4293      	cmp	r3, r2
 801b75c:	d00f      	beq.n	801b77e <TIM_Base_SetConfig+0x8a>
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	4a20      	ldr	r2, [pc, #128]	; (801b7e4 <TIM_Base_SetConfig+0xf0>)
 801b762:	4293      	cmp	r3, r2
 801b764:	d00b      	beq.n	801b77e <TIM_Base_SetConfig+0x8a>
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	4a1f      	ldr	r2, [pc, #124]	; (801b7e8 <TIM_Base_SetConfig+0xf4>)
 801b76a:	4293      	cmp	r3, r2
 801b76c:	d007      	beq.n	801b77e <TIM_Base_SetConfig+0x8a>
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	4a1e      	ldr	r2, [pc, #120]	; (801b7ec <TIM_Base_SetConfig+0xf8>)
 801b772:	4293      	cmp	r3, r2
 801b774:	d003      	beq.n	801b77e <TIM_Base_SetConfig+0x8a>
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	4a1d      	ldr	r2, [pc, #116]	; (801b7f0 <TIM_Base_SetConfig+0xfc>)
 801b77a:	4293      	cmp	r3, r2
 801b77c:	d108      	bne.n	801b790 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b786:	683b      	ldr	r3, [r7, #0]
 801b788:	68db      	ldr	r3, [r3, #12]
 801b78a:	68fa      	ldr	r2, [r7, #12]
 801b78c:	4313      	orrs	r3, r2
 801b78e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801b796:	683b      	ldr	r3, [r7, #0]
 801b798:	695b      	ldr	r3, [r3, #20]
 801b79a:	4313      	orrs	r3, r2
 801b79c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	68fa      	ldr	r2, [r7, #12]
 801b7a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b7a4:	683b      	ldr	r3, [r7, #0]
 801b7a6:	689a      	ldr	r2, [r3, #8]
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b7ac:	683b      	ldr	r3, [r7, #0]
 801b7ae:	681a      	ldr	r2, [r3, #0]
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	4a08      	ldr	r2, [pc, #32]	; (801b7d8 <TIM_Base_SetConfig+0xe4>)
 801b7b8:	4293      	cmp	r3, r2
 801b7ba:	d103      	bne.n	801b7c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b7bc:	683b      	ldr	r3, [r7, #0]
 801b7be:	691a      	ldr	r2, [r3, #16]
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	2201      	movs	r2, #1
 801b7c8:	615a      	str	r2, [r3, #20]
}
 801b7ca:	bf00      	nop
 801b7cc:	3714      	adds	r7, #20
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d4:	4770      	bx	lr
 801b7d6:	bf00      	nop
 801b7d8:	40010000 	.word	0x40010000
 801b7dc:	40000400 	.word	0x40000400
 801b7e0:	40000800 	.word	0x40000800
 801b7e4:	40000c00 	.word	0x40000c00
 801b7e8:	40014000 	.word	0x40014000
 801b7ec:	40014400 	.word	0x40014400
 801b7f0:	40014800 	.word	0x40014800

0801b7f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b7f4:	b480      	push	{r7}
 801b7f6:	b087      	sub	sp, #28
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	6078      	str	r0, [r7, #4]
 801b7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	6a1b      	ldr	r3, [r3, #32]
 801b802:	f023 0201 	bic.w	r2, r3, #1
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	6a1b      	ldr	r3, [r3, #32]
 801b80e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	685b      	ldr	r3, [r3, #4]
 801b814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	699b      	ldr	r3, [r3, #24]
 801b81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	f023 0303 	bic.w	r3, r3, #3
 801b82a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b82c:	683b      	ldr	r3, [r7, #0]
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	68fa      	ldr	r2, [r7, #12]
 801b832:	4313      	orrs	r3, r2
 801b834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801b836:	697b      	ldr	r3, [r7, #20]
 801b838:	f023 0302 	bic.w	r3, r3, #2
 801b83c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801b83e:	683b      	ldr	r3, [r7, #0]
 801b840:	689b      	ldr	r3, [r3, #8]
 801b842:	697a      	ldr	r2, [r7, #20]
 801b844:	4313      	orrs	r3, r2
 801b846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	4a1c      	ldr	r2, [pc, #112]	; (801b8bc <TIM_OC1_SetConfig+0xc8>)
 801b84c:	4293      	cmp	r3, r2
 801b84e:	d10c      	bne.n	801b86a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801b850:	697b      	ldr	r3, [r7, #20]
 801b852:	f023 0308 	bic.w	r3, r3, #8
 801b856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801b858:	683b      	ldr	r3, [r7, #0]
 801b85a:	68db      	ldr	r3, [r3, #12]
 801b85c:	697a      	ldr	r2, [r7, #20]
 801b85e:	4313      	orrs	r3, r2
 801b860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801b862:	697b      	ldr	r3, [r7, #20]
 801b864:	f023 0304 	bic.w	r3, r3, #4
 801b868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	4a13      	ldr	r2, [pc, #76]	; (801b8bc <TIM_OC1_SetConfig+0xc8>)
 801b86e:	4293      	cmp	r3, r2
 801b870:	d111      	bne.n	801b896 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801b872:	693b      	ldr	r3, [r7, #16]
 801b874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801b87a:	693b      	ldr	r3, [r7, #16]
 801b87c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801b882:	683b      	ldr	r3, [r7, #0]
 801b884:	695b      	ldr	r3, [r3, #20]
 801b886:	693a      	ldr	r2, [r7, #16]
 801b888:	4313      	orrs	r3, r2
 801b88a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801b88c:	683b      	ldr	r3, [r7, #0]
 801b88e:	699b      	ldr	r3, [r3, #24]
 801b890:	693a      	ldr	r2, [r7, #16]
 801b892:	4313      	orrs	r3, r2
 801b894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	693a      	ldr	r2, [r7, #16]
 801b89a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	68fa      	ldr	r2, [r7, #12]
 801b8a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801b8a2:	683b      	ldr	r3, [r7, #0]
 801b8a4:	685a      	ldr	r2, [r3, #4]
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	697a      	ldr	r2, [r7, #20]
 801b8ae:	621a      	str	r2, [r3, #32]
}
 801b8b0:	bf00      	nop
 801b8b2:	371c      	adds	r7, #28
 801b8b4:	46bd      	mov	sp, r7
 801b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ba:	4770      	bx	lr
 801b8bc:	40010000 	.word	0x40010000

0801b8c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b8c0:	b480      	push	{r7}
 801b8c2:	b087      	sub	sp, #28
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
 801b8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	6a1b      	ldr	r3, [r3, #32]
 801b8ce:	f023 0210 	bic.w	r2, r3, #16
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b8d6:	687b      	ldr	r3, [r7, #4]
 801b8d8:	6a1b      	ldr	r3, [r3, #32]
 801b8da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	685b      	ldr	r3, [r3, #4]
 801b8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	699b      	ldr	r3, [r3, #24]
 801b8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b8f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b8f8:	683b      	ldr	r3, [r7, #0]
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	021b      	lsls	r3, r3, #8
 801b8fe:	68fa      	ldr	r2, [r7, #12]
 801b900:	4313      	orrs	r3, r2
 801b902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b904:	697b      	ldr	r3, [r7, #20]
 801b906:	f023 0320 	bic.w	r3, r3, #32
 801b90a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b90c:	683b      	ldr	r3, [r7, #0]
 801b90e:	689b      	ldr	r3, [r3, #8]
 801b910:	011b      	lsls	r3, r3, #4
 801b912:	697a      	ldr	r2, [r7, #20]
 801b914:	4313      	orrs	r3, r2
 801b916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b918:	687b      	ldr	r3, [r7, #4]
 801b91a:	4a1e      	ldr	r2, [pc, #120]	; (801b994 <TIM_OC2_SetConfig+0xd4>)
 801b91c:	4293      	cmp	r3, r2
 801b91e:	d10d      	bne.n	801b93c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b920:	697b      	ldr	r3, [r7, #20]
 801b922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b928:	683b      	ldr	r3, [r7, #0]
 801b92a:	68db      	ldr	r3, [r3, #12]
 801b92c:	011b      	lsls	r3, r3, #4
 801b92e:	697a      	ldr	r2, [r7, #20]
 801b930:	4313      	orrs	r3, r2
 801b932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b934:	697b      	ldr	r3, [r7, #20]
 801b936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b93a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	4a15      	ldr	r2, [pc, #84]	; (801b994 <TIM_OC2_SetConfig+0xd4>)
 801b940:	4293      	cmp	r3, r2
 801b942:	d113      	bne.n	801b96c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b944:	693b      	ldr	r3, [r7, #16]
 801b946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b94a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b94c:	693b      	ldr	r3, [r7, #16]
 801b94e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b954:	683b      	ldr	r3, [r7, #0]
 801b956:	695b      	ldr	r3, [r3, #20]
 801b958:	009b      	lsls	r3, r3, #2
 801b95a:	693a      	ldr	r2, [r7, #16]
 801b95c:	4313      	orrs	r3, r2
 801b95e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b960:	683b      	ldr	r3, [r7, #0]
 801b962:	699b      	ldr	r3, [r3, #24]
 801b964:	009b      	lsls	r3, r3, #2
 801b966:	693a      	ldr	r2, [r7, #16]
 801b968:	4313      	orrs	r3, r2
 801b96a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	693a      	ldr	r2, [r7, #16]
 801b970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	68fa      	ldr	r2, [r7, #12]
 801b976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b978:	683b      	ldr	r3, [r7, #0]
 801b97a:	685a      	ldr	r2, [r3, #4]
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	697a      	ldr	r2, [r7, #20]
 801b984:	621a      	str	r2, [r3, #32]
}
 801b986:	bf00      	nop
 801b988:	371c      	adds	r7, #28
 801b98a:	46bd      	mov	sp, r7
 801b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b990:	4770      	bx	lr
 801b992:	bf00      	nop
 801b994:	40010000 	.word	0x40010000

0801b998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b998:	b480      	push	{r7}
 801b99a:	b087      	sub	sp, #28
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	6078      	str	r0, [r7, #4]
 801b9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	6a1b      	ldr	r3, [r3, #32]
 801b9a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	6a1b      	ldr	r3, [r3, #32]
 801b9b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	685b      	ldr	r3, [r3, #4]
 801b9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	69db      	ldr	r3, [r3, #28]
 801b9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b9c0:	68fb      	ldr	r3, [r7, #12]
 801b9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	f023 0303 	bic.w	r3, r3, #3
 801b9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b9d0:	683b      	ldr	r3, [r7, #0]
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	68fa      	ldr	r2, [r7, #12]
 801b9d6:	4313      	orrs	r3, r2
 801b9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b9da:	697b      	ldr	r3, [r7, #20]
 801b9dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b9e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b9e2:	683b      	ldr	r3, [r7, #0]
 801b9e4:	689b      	ldr	r3, [r3, #8]
 801b9e6:	021b      	lsls	r3, r3, #8
 801b9e8:	697a      	ldr	r2, [r7, #20]
 801b9ea:	4313      	orrs	r3, r2
 801b9ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	4a1d      	ldr	r2, [pc, #116]	; (801ba68 <TIM_OC3_SetConfig+0xd0>)
 801b9f2:	4293      	cmp	r3, r2
 801b9f4:	d10d      	bne.n	801ba12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b9f6:	697b      	ldr	r3, [r7, #20]
 801b9f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b9fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b9fe:	683b      	ldr	r3, [r7, #0]
 801ba00:	68db      	ldr	r3, [r3, #12]
 801ba02:	021b      	lsls	r3, r3, #8
 801ba04:	697a      	ldr	r2, [r7, #20]
 801ba06:	4313      	orrs	r3, r2
 801ba08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ba0a:	697b      	ldr	r3, [r7, #20]
 801ba0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ba10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	4a14      	ldr	r2, [pc, #80]	; (801ba68 <TIM_OC3_SetConfig+0xd0>)
 801ba16:	4293      	cmp	r3, r2
 801ba18:	d113      	bne.n	801ba42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ba20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ba22:	693b      	ldr	r3, [r7, #16]
 801ba24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ba28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	695b      	ldr	r3, [r3, #20]
 801ba2e:	011b      	lsls	r3, r3, #4
 801ba30:	693a      	ldr	r2, [r7, #16]
 801ba32:	4313      	orrs	r3, r2
 801ba34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ba36:	683b      	ldr	r3, [r7, #0]
 801ba38:	699b      	ldr	r3, [r3, #24]
 801ba3a:	011b      	lsls	r3, r3, #4
 801ba3c:	693a      	ldr	r2, [r7, #16]
 801ba3e:	4313      	orrs	r3, r2
 801ba40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	693a      	ldr	r2, [r7, #16]
 801ba46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	68fa      	ldr	r2, [r7, #12]
 801ba4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ba4e:	683b      	ldr	r3, [r7, #0]
 801ba50:	685a      	ldr	r2, [r3, #4]
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	697a      	ldr	r2, [r7, #20]
 801ba5a:	621a      	str	r2, [r3, #32]
}
 801ba5c:	bf00      	nop
 801ba5e:	371c      	adds	r7, #28
 801ba60:	46bd      	mov	sp, r7
 801ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba66:	4770      	bx	lr
 801ba68:	40010000 	.word	0x40010000

0801ba6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ba6c:	b480      	push	{r7}
 801ba6e:	b087      	sub	sp, #28
 801ba70:	af00      	add	r7, sp, #0
 801ba72:	6078      	str	r0, [r7, #4]
 801ba74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	6a1b      	ldr	r3, [r3, #32]
 801ba7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	6a1b      	ldr	r3, [r3, #32]
 801ba86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	685b      	ldr	r3, [r3, #4]
 801ba8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	69db      	ldr	r3, [r3, #28]
 801ba92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ba9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ba9c:	68fb      	ldr	r3, [r7, #12]
 801ba9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801baa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801baa4:	683b      	ldr	r3, [r7, #0]
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	021b      	lsls	r3, r3, #8
 801baaa:	68fa      	ldr	r2, [r7, #12]
 801baac:	4313      	orrs	r3, r2
 801baae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801bab0:	693b      	ldr	r3, [r7, #16]
 801bab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801bab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801bab8:	683b      	ldr	r3, [r7, #0]
 801baba:	689b      	ldr	r3, [r3, #8]
 801babc:	031b      	lsls	r3, r3, #12
 801babe:	693a      	ldr	r2, [r7, #16]
 801bac0:	4313      	orrs	r3, r2
 801bac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	4a10      	ldr	r2, [pc, #64]	; (801bb08 <TIM_OC4_SetConfig+0x9c>)
 801bac8:	4293      	cmp	r3, r2
 801baca:	d109      	bne.n	801bae0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801bacc:	697b      	ldr	r3, [r7, #20]
 801bace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801bad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801bad4:	683b      	ldr	r3, [r7, #0]
 801bad6:	695b      	ldr	r3, [r3, #20]
 801bad8:	019b      	lsls	r3, r3, #6
 801bada:	697a      	ldr	r2, [r7, #20]
 801badc:	4313      	orrs	r3, r2
 801bade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	697a      	ldr	r2, [r7, #20]
 801bae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	68fa      	ldr	r2, [r7, #12]
 801baea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801baec:	683b      	ldr	r3, [r7, #0]
 801baee:	685a      	ldr	r2, [r3, #4]
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	693a      	ldr	r2, [r7, #16]
 801baf8:	621a      	str	r2, [r3, #32]
}
 801bafa:	bf00      	nop
 801bafc:	371c      	adds	r7, #28
 801bafe:	46bd      	mov	sp, r7
 801bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb04:	4770      	bx	lr
 801bb06:	bf00      	nop
 801bb08:	40010000 	.word	0x40010000

0801bb0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801bb0c:	b480      	push	{r7}
 801bb0e:	b087      	sub	sp, #28
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	60f8      	str	r0, [r7, #12]
 801bb14:	60b9      	str	r1, [r7, #8]
 801bb16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	6a1b      	ldr	r3, [r3, #32]
 801bb1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	6a1b      	ldr	r3, [r3, #32]
 801bb22:	f023 0201 	bic.w	r2, r3, #1
 801bb26:	68fb      	ldr	r3, [r7, #12]
 801bb28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	699b      	ldr	r3, [r3, #24]
 801bb2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801bb30:	693b      	ldr	r3, [r7, #16]
 801bb32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801bb36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	011b      	lsls	r3, r3, #4
 801bb3c:	693a      	ldr	r2, [r7, #16]
 801bb3e:	4313      	orrs	r3, r2
 801bb40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801bb42:	697b      	ldr	r3, [r7, #20]
 801bb44:	f023 030a 	bic.w	r3, r3, #10
 801bb48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801bb4a:	697a      	ldr	r2, [r7, #20]
 801bb4c:	68bb      	ldr	r3, [r7, #8]
 801bb4e:	4313      	orrs	r3, r2
 801bb50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	693a      	ldr	r2, [r7, #16]
 801bb56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	697a      	ldr	r2, [r7, #20]
 801bb5c:	621a      	str	r2, [r3, #32]
}
 801bb5e:	bf00      	nop
 801bb60:	371c      	adds	r7, #28
 801bb62:	46bd      	mov	sp, r7
 801bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb68:	4770      	bx	lr

0801bb6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801bb6a:	b480      	push	{r7}
 801bb6c:	b087      	sub	sp, #28
 801bb6e:	af00      	add	r7, sp, #0
 801bb70:	60f8      	str	r0, [r7, #12]
 801bb72:	60b9      	str	r1, [r7, #8]
 801bb74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	6a1b      	ldr	r3, [r3, #32]
 801bb7a:	f023 0210 	bic.w	r2, r3, #16
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	699b      	ldr	r3, [r3, #24]
 801bb86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801bb88:	68fb      	ldr	r3, [r7, #12]
 801bb8a:	6a1b      	ldr	r3, [r3, #32]
 801bb8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801bb8e:	697b      	ldr	r3, [r7, #20]
 801bb90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801bb94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	031b      	lsls	r3, r3, #12
 801bb9a:	697a      	ldr	r2, [r7, #20]
 801bb9c:	4313      	orrs	r3, r2
 801bb9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801bba6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801bba8:	68bb      	ldr	r3, [r7, #8]
 801bbaa:	011b      	lsls	r3, r3, #4
 801bbac:	693a      	ldr	r2, [r7, #16]
 801bbae:	4313      	orrs	r3, r2
 801bbb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801bbb2:	68fb      	ldr	r3, [r7, #12]
 801bbb4:	697a      	ldr	r2, [r7, #20]
 801bbb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	693a      	ldr	r2, [r7, #16]
 801bbbc:	621a      	str	r2, [r3, #32]
}
 801bbbe:	bf00      	nop
 801bbc0:	371c      	adds	r7, #28
 801bbc2:	46bd      	mov	sp, r7
 801bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc8:	4770      	bx	lr

0801bbca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801bbca:	b480      	push	{r7}
 801bbcc:	b085      	sub	sp, #20
 801bbce:	af00      	add	r7, sp, #0
 801bbd0:	6078      	str	r0, [r7, #4]
 801bbd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	689b      	ldr	r3, [r3, #8]
 801bbd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bbe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801bbe2:	683a      	ldr	r2, [r7, #0]
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	4313      	orrs	r3, r2
 801bbe8:	f043 0307 	orr.w	r3, r3, #7
 801bbec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	68fa      	ldr	r2, [r7, #12]
 801bbf2:	609a      	str	r2, [r3, #8]
}
 801bbf4:	bf00      	nop
 801bbf6:	3714      	adds	r7, #20
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbfe:	4770      	bx	lr

0801bc00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801bc00:	b480      	push	{r7}
 801bc02:	b087      	sub	sp, #28
 801bc04:	af00      	add	r7, sp, #0
 801bc06:	60f8      	str	r0, [r7, #12]
 801bc08:	60b9      	str	r1, [r7, #8]
 801bc0a:	607a      	str	r2, [r7, #4]
 801bc0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	689b      	ldr	r3, [r3, #8]
 801bc12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801bc14:	697b      	ldr	r3, [r7, #20]
 801bc16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801bc1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801bc1c:	683b      	ldr	r3, [r7, #0]
 801bc1e:	021a      	lsls	r2, r3, #8
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	431a      	orrs	r2, r3
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	4313      	orrs	r3, r2
 801bc28:	697a      	ldr	r2, [r7, #20]
 801bc2a:	4313      	orrs	r3, r2
 801bc2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	697a      	ldr	r2, [r7, #20]
 801bc32:	609a      	str	r2, [r3, #8]
}
 801bc34:	bf00      	nop
 801bc36:	371c      	adds	r7, #28
 801bc38:	46bd      	mov	sp, r7
 801bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc3e:	4770      	bx	lr

0801bc40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801bc40:	b480      	push	{r7}
 801bc42:	b087      	sub	sp, #28
 801bc44:	af00      	add	r7, sp, #0
 801bc46:	60f8      	str	r0, [r7, #12]
 801bc48:	60b9      	str	r1, [r7, #8]
 801bc4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801bc4c:	68bb      	ldr	r3, [r7, #8]
 801bc4e:	f003 031f 	and.w	r3, r3, #31
 801bc52:	2201      	movs	r2, #1
 801bc54:	fa02 f303 	lsl.w	r3, r2, r3
 801bc58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	6a1a      	ldr	r2, [r3, #32]
 801bc5e:	697b      	ldr	r3, [r7, #20]
 801bc60:	43db      	mvns	r3, r3
 801bc62:	401a      	ands	r2, r3
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	6a1a      	ldr	r2, [r3, #32]
 801bc6c:	68bb      	ldr	r3, [r7, #8]
 801bc6e:	f003 031f 	and.w	r3, r3, #31
 801bc72:	6879      	ldr	r1, [r7, #4]
 801bc74:	fa01 f303 	lsl.w	r3, r1, r3
 801bc78:	431a      	orrs	r2, r3
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	621a      	str	r2, [r3, #32]
}
 801bc7e:	bf00      	nop
 801bc80:	371c      	adds	r7, #28
 801bc82:	46bd      	mov	sp, r7
 801bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc88:	4770      	bx	lr
	...

0801bc8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801bc8c:	b480      	push	{r7}
 801bc8e:	b085      	sub	sp, #20
 801bc90:	af00      	add	r7, sp, #0
 801bc92:	6078      	str	r0, [r7, #4]
 801bc94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bc9c:	2b01      	cmp	r3, #1
 801bc9e:	d101      	bne.n	801bca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801bca0:	2302      	movs	r3, #2
 801bca2:	e050      	b.n	801bd46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	2201      	movs	r2, #1
 801bca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	2202      	movs	r2, #2
 801bcb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	685b      	ldr	r3, [r3, #4]
 801bcba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	689b      	ldr	r3, [r3, #8]
 801bcc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bcca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801bccc:	683b      	ldr	r3, [r7, #0]
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	68fa      	ldr	r2, [r7, #12]
 801bcd2:	4313      	orrs	r3, r2
 801bcd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	68fa      	ldr	r2, [r7, #12]
 801bcdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	4a1c      	ldr	r2, [pc, #112]	; (801bd54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801bce4:	4293      	cmp	r3, r2
 801bce6:	d018      	beq.n	801bd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bcf0:	d013      	beq.n	801bd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	4a18      	ldr	r2, [pc, #96]	; (801bd58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801bcf8:	4293      	cmp	r3, r2
 801bcfa:	d00e      	beq.n	801bd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	4a16      	ldr	r2, [pc, #88]	; (801bd5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801bd02:	4293      	cmp	r3, r2
 801bd04:	d009      	beq.n	801bd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	4a15      	ldr	r2, [pc, #84]	; (801bd60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801bd0c:	4293      	cmp	r3, r2
 801bd0e:	d004      	beq.n	801bd1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	4a13      	ldr	r2, [pc, #76]	; (801bd64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801bd16:	4293      	cmp	r3, r2
 801bd18:	d10c      	bne.n	801bd34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801bd1a:	68bb      	ldr	r3, [r7, #8]
 801bd1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801bd20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801bd22:	683b      	ldr	r3, [r7, #0]
 801bd24:	685b      	ldr	r3, [r3, #4]
 801bd26:	68ba      	ldr	r2, [r7, #8]
 801bd28:	4313      	orrs	r3, r2
 801bd2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	681b      	ldr	r3, [r3, #0]
 801bd30:	68ba      	ldr	r2, [r7, #8]
 801bd32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	2201      	movs	r2, #1
 801bd38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	2200      	movs	r2, #0
 801bd40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801bd44:	2300      	movs	r3, #0
}
 801bd46:	4618      	mov	r0, r3
 801bd48:	3714      	adds	r7, #20
 801bd4a:	46bd      	mov	sp, r7
 801bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd50:	4770      	bx	lr
 801bd52:	bf00      	nop
 801bd54:	40010000 	.word	0x40010000
 801bd58:	40000400 	.word	0x40000400
 801bd5c:	40000800 	.word	0x40000800
 801bd60:	40000c00 	.word	0x40000c00
 801bd64:	40014000 	.word	0x40014000

0801bd68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801bd68:	b480      	push	{r7}
 801bd6a:	b083      	sub	sp, #12
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801bd70:	bf00      	nop
 801bd72:	370c      	adds	r7, #12
 801bd74:	46bd      	mov	sp, r7
 801bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd7a:	4770      	bx	lr

0801bd7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801bd7c:	b480      	push	{r7}
 801bd7e:	b083      	sub	sp, #12
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801bd84:	bf00      	nop
 801bd86:	370c      	adds	r7, #12
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8e:	4770      	bx	lr

0801bd90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801bd90:	b580      	push	{r7, lr}
 801bd92:	b082      	sub	sp, #8
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d101      	bne.n	801bda2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801bd9e:	2301      	movs	r3, #1
 801bda0:	e03f      	b.n	801be22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801bda8:	b2db      	uxtb	r3, r3
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d106      	bne.n	801bdbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801bdb6:	6878      	ldr	r0, [r7, #4]
 801bdb8:	f7fa fafe 	bl	80163b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	2224      	movs	r2, #36	; 0x24
 801bdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	68da      	ldr	r2, [r3, #12]
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801bdd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801bdd4:	6878      	ldr	r0, [r7, #4]
 801bdd6:	f000 ff9b 	bl	801cd10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	691a      	ldr	r2, [r3, #16]
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801bde8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	695a      	ldr	r2, [r3, #20]
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801bdf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	68da      	ldr	r2, [r3, #12]
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801be08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	2200      	movs	r2, #0
 801be0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	2220      	movs	r2, #32
 801be14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	2220      	movs	r2, #32
 801be1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801be20:	2300      	movs	r3, #0
}
 801be22:	4618      	mov	r0, r3
 801be24:	3708      	adds	r7, #8
 801be26:	46bd      	mov	sp, r7
 801be28:	bd80      	pop	{r7, pc}

0801be2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801be2a:	b580      	push	{r7, lr}
 801be2c:	b08a      	sub	sp, #40	; 0x28
 801be2e:	af02      	add	r7, sp, #8
 801be30:	60f8      	str	r0, [r7, #12]
 801be32:	60b9      	str	r1, [r7, #8]
 801be34:	603b      	str	r3, [r7, #0]
 801be36:	4613      	mov	r3, r2
 801be38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801be3a:	2300      	movs	r3, #0
 801be3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801be3e:	68fb      	ldr	r3, [r7, #12]
 801be40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801be44:	b2db      	uxtb	r3, r3
 801be46:	2b20      	cmp	r3, #32
 801be48:	d17c      	bne.n	801bf44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801be4a:	68bb      	ldr	r3, [r7, #8]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d002      	beq.n	801be56 <HAL_UART_Transmit+0x2c>
 801be50:	88fb      	ldrh	r3, [r7, #6]
 801be52:	2b00      	cmp	r3, #0
 801be54:	d101      	bne.n	801be5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801be56:	2301      	movs	r3, #1
 801be58:	e075      	b.n	801bf46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801be60:	2b01      	cmp	r3, #1
 801be62:	d101      	bne.n	801be68 <HAL_UART_Transmit+0x3e>
 801be64:	2302      	movs	r3, #2
 801be66:	e06e      	b.n	801bf46 <HAL_UART_Transmit+0x11c>
 801be68:	68fb      	ldr	r3, [r7, #12]
 801be6a:	2201      	movs	r2, #1
 801be6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	2200      	movs	r2, #0
 801be74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	2221      	movs	r2, #33	; 0x21
 801be7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801be7e:	f7fa fd53 	bl	8016928 <HAL_GetTick>
 801be82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	88fa      	ldrh	r2, [r7, #6]
 801be88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	88fa      	ldrh	r2, [r7, #6]
 801be8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	689b      	ldr	r3, [r3, #8]
 801be94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801be98:	d108      	bne.n	801beac <HAL_UART_Transmit+0x82>
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	691b      	ldr	r3, [r3, #16]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d104      	bne.n	801beac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801bea2:	2300      	movs	r3, #0
 801bea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801bea6:	68bb      	ldr	r3, [r7, #8]
 801bea8:	61bb      	str	r3, [r7, #24]
 801beaa:	e003      	b.n	801beb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801beac:	68bb      	ldr	r3, [r7, #8]
 801beae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801beb0:	2300      	movs	r3, #0
 801beb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	2200      	movs	r2, #0
 801beb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801bebc:	e02a      	b.n	801bf14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801bebe:	683b      	ldr	r3, [r7, #0]
 801bec0:	9300      	str	r3, [sp, #0]
 801bec2:	697b      	ldr	r3, [r7, #20]
 801bec4:	2200      	movs	r2, #0
 801bec6:	2180      	movs	r1, #128	; 0x80
 801bec8:	68f8      	ldr	r0, [r7, #12]
 801beca:	f000 fc53 	bl	801c774 <UART_WaitOnFlagUntilTimeout>
 801bece:	4603      	mov	r3, r0
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d001      	beq.n	801bed8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801bed4:	2303      	movs	r3, #3
 801bed6:	e036      	b.n	801bf46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801bed8:	69fb      	ldr	r3, [r7, #28]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d10b      	bne.n	801bef6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801bede:	69bb      	ldr	r3, [r7, #24]
 801bee0:	881b      	ldrh	r3, [r3, #0]
 801bee2:	461a      	mov	r2, r3
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801beec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801beee:	69bb      	ldr	r3, [r7, #24]
 801bef0:	3302      	adds	r3, #2
 801bef2:	61bb      	str	r3, [r7, #24]
 801bef4:	e007      	b.n	801bf06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801bef6:	69fb      	ldr	r3, [r7, #28]
 801bef8:	781a      	ldrb	r2, [r3, #0]
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801bf00:	69fb      	ldr	r3, [r7, #28]
 801bf02:	3301      	adds	r3, #1
 801bf04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bf0a:	b29b      	uxth	r3, r3
 801bf0c:	3b01      	subs	r3, #1
 801bf0e:	b29a      	uxth	r2, r3
 801bf10:	68fb      	ldr	r3, [r7, #12]
 801bf12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801bf18:	b29b      	uxth	r3, r3
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d1cf      	bne.n	801bebe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801bf1e:	683b      	ldr	r3, [r7, #0]
 801bf20:	9300      	str	r3, [sp, #0]
 801bf22:	697b      	ldr	r3, [r7, #20]
 801bf24:	2200      	movs	r2, #0
 801bf26:	2140      	movs	r1, #64	; 0x40
 801bf28:	68f8      	ldr	r0, [r7, #12]
 801bf2a:	f000 fc23 	bl	801c774 <UART_WaitOnFlagUntilTimeout>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d001      	beq.n	801bf38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801bf34:	2303      	movs	r3, #3
 801bf36:	e006      	b.n	801bf46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	2220      	movs	r2, #32
 801bf3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801bf40:	2300      	movs	r3, #0
 801bf42:	e000      	b.n	801bf46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801bf44:	2302      	movs	r3, #2
  }
}
 801bf46:	4618      	mov	r0, r3
 801bf48:	3720      	adds	r7, #32
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	bd80      	pop	{r7, pc}

0801bf4e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bf4e:	b580      	push	{r7, lr}
 801bf50:	b08c      	sub	sp, #48	; 0x30
 801bf52:	af00      	add	r7, sp, #0
 801bf54:	60f8      	str	r0, [r7, #12]
 801bf56:	60b9      	str	r1, [r7, #8]
 801bf58:	4613      	mov	r3, r2
 801bf5a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801bf5c:	68fb      	ldr	r3, [r7, #12]
 801bf5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801bf62:	b2db      	uxtb	r3, r3
 801bf64:	2b20      	cmp	r3, #32
 801bf66:	d152      	bne.n	801c00e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801bf68:	68bb      	ldr	r3, [r7, #8]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d002      	beq.n	801bf74 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801bf6e:	88fb      	ldrh	r3, [r7, #6]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d101      	bne.n	801bf78 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801bf74:	2301      	movs	r3, #1
 801bf76:	e04b      	b.n	801c010 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801bf7e:	2b01      	cmp	r3, #1
 801bf80:	d101      	bne.n	801bf86 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801bf82:	2302      	movs	r3, #2
 801bf84:	e044      	b.n	801c010 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	2201      	movs	r2, #1
 801bf8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	2201      	movs	r2, #1
 801bf92:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801bf94:	88fb      	ldrh	r3, [r7, #6]
 801bf96:	461a      	mov	r2, r3
 801bf98:	68b9      	ldr	r1, [r7, #8]
 801bf9a:	68f8      	ldr	r0, [r7, #12]
 801bf9c:	f000 fc58 	bl	801c850 <UART_Start_Receive_DMA>
 801bfa0:	4603      	mov	r3, r0
 801bfa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801bfa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d12c      	bne.n	801c008 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfb2:	2b01      	cmp	r3, #1
 801bfb4:	d125      	bne.n	801c002 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	613b      	str	r3, [r7, #16]
 801bfba:	68fb      	ldr	r3, [r7, #12]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	613b      	str	r3, [r7, #16]
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	685b      	ldr	r3, [r3, #4]
 801bfc8:	613b      	str	r3, [r7, #16]
 801bfca:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	330c      	adds	r3, #12
 801bfd2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfd4:	69bb      	ldr	r3, [r7, #24]
 801bfd6:	e853 3f00 	ldrex	r3, [r3]
 801bfda:	617b      	str	r3, [r7, #20]
   return(result);
 801bfdc:	697b      	ldr	r3, [r7, #20]
 801bfde:	f043 0310 	orr.w	r3, r3, #16
 801bfe2:	62bb      	str	r3, [r7, #40]	; 0x28
 801bfe4:	68fb      	ldr	r3, [r7, #12]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	330c      	adds	r3, #12
 801bfea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bfec:	627a      	str	r2, [r7, #36]	; 0x24
 801bfee:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bff0:	6a39      	ldr	r1, [r7, #32]
 801bff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bff4:	e841 2300 	strex	r3, r2, [r1]
 801bff8:	61fb      	str	r3, [r7, #28]
   return(result);
 801bffa:	69fb      	ldr	r3, [r7, #28]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d1e5      	bne.n	801bfcc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801c000:	e002      	b.n	801c008 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801c002:	2301      	movs	r3, #1
 801c004:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801c008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c00c:	e000      	b.n	801c010 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801c00e:	2302      	movs	r3, #2
  }
}
 801c010:	4618      	mov	r0, r3
 801c012:	3730      	adds	r7, #48	; 0x30
 801c014:	46bd      	mov	sp, r7
 801c016:	bd80      	pop	{r7, pc}

0801c018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c018:	b580      	push	{r7, lr}
 801c01a:	b0ba      	sub	sp, #232	; 0xe8
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	68db      	ldr	r3, [r3, #12]
 801c030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	695b      	ldr	r3, [r3, #20]
 801c03a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801c03e:	2300      	movs	r3, #0
 801c040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801c044:	2300      	movs	r3, #0
 801c046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801c04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c04e:	f003 030f 	and.w	r3, r3, #15
 801c052:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801c056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d10f      	bne.n	801c07e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801c05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c062:	f003 0320 	and.w	r3, r3, #32
 801c066:	2b00      	cmp	r3, #0
 801c068:	d009      	beq.n	801c07e <HAL_UART_IRQHandler+0x66>
 801c06a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c06e:	f003 0320 	and.w	r3, r3, #32
 801c072:	2b00      	cmp	r3, #0
 801c074:	d003      	beq.n	801c07e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801c076:	6878      	ldr	r0, [r7, #4]
 801c078:	f000 fd8f 	bl	801cb9a <UART_Receive_IT>
      return;
 801c07c:	e256      	b.n	801c52c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801c07e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c082:	2b00      	cmp	r3, #0
 801c084:	f000 80de 	beq.w	801c244 <HAL_UART_IRQHandler+0x22c>
 801c088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c08c:	f003 0301 	and.w	r3, r3, #1
 801c090:	2b00      	cmp	r3, #0
 801c092:	d106      	bne.n	801c0a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801c094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c098:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	f000 80d1 	beq.w	801c244 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801c0a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c0a6:	f003 0301 	and.w	r3, r3, #1
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d00b      	beq.n	801c0c6 <HAL_UART_IRQHandler+0xae>
 801c0ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	d005      	beq.n	801c0c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0be:	f043 0201 	orr.w	r2, r3, #1
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801c0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c0ca:	f003 0304 	and.w	r3, r3, #4
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d00b      	beq.n	801c0ea <HAL_UART_IRQHandler+0xd2>
 801c0d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c0d6:	f003 0301 	and.w	r3, r3, #1
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d005      	beq.n	801c0ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0e2:	f043 0202 	orr.w	r2, r3, #2
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801c0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c0ee:	f003 0302 	and.w	r3, r3, #2
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d00b      	beq.n	801c10e <HAL_UART_IRQHandler+0xf6>
 801c0f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c0fa:	f003 0301 	and.w	r3, r3, #1
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d005      	beq.n	801c10e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c106:	f043 0204 	orr.w	r2, r3, #4
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801c10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c112:	f003 0308 	and.w	r3, r3, #8
 801c116:	2b00      	cmp	r3, #0
 801c118:	d011      	beq.n	801c13e <HAL_UART_IRQHandler+0x126>
 801c11a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c11e:	f003 0320 	and.w	r3, r3, #32
 801c122:	2b00      	cmp	r3, #0
 801c124:	d105      	bne.n	801c132 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801c126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c12a:	f003 0301 	and.w	r3, r3, #1
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d005      	beq.n	801c13e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c136:	f043 0208 	orr.w	r2, r3, #8
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c142:	2b00      	cmp	r3, #0
 801c144:	f000 81ed 	beq.w	801c522 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801c148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c14c:	f003 0320 	and.w	r3, r3, #32
 801c150:	2b00      	cmp	r3, #0
 801c152:	d008      	beq.n	801c166 <HAL_UART_IRQHandler+0x14e>
 801c154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c158:	f003 0320 	and.w	r3, r3, #32
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d002      	beq.n	801c166 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801c160:	6878      	ldr	r0, [r7, #4]
 801c162:	f000 fd1a 	bl	801cb9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	695b      	ldr	r3, [r3, #20]
 801c16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c170:	2b40      	cmp	r3, #64	; 0x40
 801c172:	bf0c      	ite	eq
 801c174:	2301      	moveq	r3, #1
 801c176:	2300      	movne	r3, #0
 801c178:	b2db      	uxtb	r3, r3
 801c17a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c182:	f003 0308 	and.w	r3, r3, #8
 801c186:	2b00      	cmp	r3, #0
 801c188:	d103      	bne.n	801c192 <HAL_UART_IRQHandler+0x17a>
 801c18a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d04f      	beq.n	801c232 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801c192:	6878      	ldr	r0, [r7, #4]
 801c194:	f000 fc22 	bl	801c9dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	695b      	ldr	r3, [r3, #20]
 801c19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c1a2:	2b40      	cmp	r3, #64	; 0x40
 801c1a4:	d141      	bne.n	801c22a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	3314      	adds	r3, #20
 801c1ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801c1b4:	e853 3f00 	ldrex	r3, [r3]
 801c1b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801c1bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801c1c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c1c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	3314      	adds	r3, #20
 801c1ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c1d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801c1d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801c1de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801c1e2:	e841 2300 	strex	r3, r2, [r1]
 801c1e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801c1ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d1d9      	bne.n	801c1a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d013      	beq.n	801c222 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1fe:	4a7d      	ldr	r2, [pc, #500]	; (801c3f4 <HAL_UART_IRQHandler+0x3dc>)
 801c200:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801c202:	687b      	ldr	r3, [r7, #4]
 801c204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c206:	4618      	mov	r0, r3
 801c208:	f7fa fe46 	bl	8016e98 <HAL_DMA_Abort_IT>
 801c20c:	4603      	mov	r3, r0
 801c20e:	2b00      	cmp	r3, #0
 801c210:	d016      	beq.n	801c240 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c218:	687a      	ldr	r2, [r7, #4]
 801c21a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801c21c:	4610      	mov	r0, r2
 801c21e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c220:	e00e      	b.n	801c240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801c222:	6878      	ldr	r0, [r7, #4]
 801c224:	f000 f9a4 	bl	801c570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c228:	e00a      	b.n	801c240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801c22a:	6878      	ldr	r0, [r7, #4]
 801c22c:	f000 f9a0 	bl	801c570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c230:	e006      	b.n	801c240 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801c232:	6878      	ldr	r0, [r7, #4]
 801c234:	f000 f99c 	bl	801c570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	2200      	movs	r2, #0
 801c23c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801c23e:	e170      	b.n	801c522 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c240:	bf00      	nop
    return;
 801c242:	e16e      	b.n	801c522 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c248:	2b01      	cmp	r3, #1
 801c24a:	f040 814a 	bne.w	801c4e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801c24e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c252:	f003 0310 	and.w	r3, r3, #16
 801c256:	2b00      	cmp	r3, #0
 801c258:	f000 8143 	beq.w	801c4e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801c25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c260:	f003 0310 	and.w	r3, r3, #16
 801c264:	2b00      	cmp	r3, #0
 801c266:	f000 813c 	beq.w	801c4e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c26a:	2300      	movs	r3, #0
 801c26c:	60bb      	str	r3, [r7, #8]
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	60bb      	str	r3, [r7, #8]
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	685b      	ldr	r3, [r3, #4]
 801c27c:	60bb      	str	r3, [r7, #8]
 801c27e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	695b      	ldr	r3, [r3, #20]
 801c286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c28a:	2b40      	cmp	r3, #64	; 0x40
 801c28c:	f040 80b4 	bne.w	801c3f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	685b      	ldr	r3, [r3, #4]
 801c298:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801c29c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	f000 8140 	beq.w	801c526 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c2aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c2ae:	429a      	cmp	r2, r3
 801c2b0:	f080 8139 	bcs.w	801c526 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801c2ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2c0:	69db      	ldr	r3, [r3, #28]
 801c2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c2c6:	f000 8088 	beq.w	801c3da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	330c      	adds	r3, #12
 801c2d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c2d8:	e853 3f00 	ldrex	r3, [r3]
 801c2dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801c2e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c2e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	330c      	adds	r3, #12
 801c2f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801c2f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801c2fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801c302:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c306:	e841 2300 	strex	r3, r2, [r1]
 801c30a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801c30e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801c312:	2b00      	cmp	r3, #0
 801c314:	d1d9      	bne.n	801c2ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	3314      	adds	r3, #20
 801c31c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c31e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801c320:	e853 3f00 	ldrex	r3, [r3]
 801c324:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801c326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c328:	f023 0301 	bic.w	r3, r3, #1
 801c32c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	3314      	adds	r3, #20
 801c336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c33a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801c33e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c340:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801c342:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801c346:	e841 2300 	strex	r3, r2, [r1]
 801c34a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801c34c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d1e1      	bne.n	801c316 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	3314      	adds	r3, #20
 801c358:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c35a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801c35c:	e853 3f00 	ldrex	r3, [r3]
 801c360:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801c362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	3314      	adds	r3, #20
 801c372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801c376:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c37a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801c37c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801c37e:	e841 2300 	strex	r3, r2, [r1]
 801c382:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801c384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c386:	2b00      	cmp	r3, #0
 801c388:	d1e3      	bne.n	801c352 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801c38a:	687b      	ldr	r3, [r7, #4]
 801c38c:	2220      	movs	r2, #32
 801c38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	2200      	movs	r2, #0
 801c396:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	330c      	adds	r3, #12
 801c39e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c3a2:	e853 3f00 	ldrex	r3, [r3]
 801c3a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c3a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c3aa:	f023 0310 	bic.w	r3, r3, #16
 801c3ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	681b      	ldr	r3, [r3, #0]
 801c3b6:	330c      	adds	r3, #12
 801c3b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801c3bc:	65ba      	str	r2, [r7, #88]	; 0x58
 801c3be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c3c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c3c4:	e841 2300 	strex	r3, r2, [r1]
 801c3c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d1e3      	bne.n	801c398 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	f7fa fcef 	bl	8016db8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c3e2:	b29b      	uxth	r3, r3
 801c3e4:	1ad3      	subs	r3, r2, r3
 801c3e6:	b29b      	uxth	r3, r3
 801c3e8:	4619      	mov	r1, r3
 801c3ea:	6878      	ldr	r0, [r7, #4]
 801c3ec:	f7e4 fe06 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c3f0:	e099      	b.n	801c526 <HAL_UART_IRQHandler+0x50e>
 801c3f2:	bf00      	nop
 801c3f4:	0801caa3 	.word	0x0801caa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c400:	b29b      	uxth	r3, r3
 801c402:	1ad3      	subs	r3, r2, r3
 801c404:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c40c:	b29b      	uxth	r3, r3
 801c40e:	2b00      	cmp	r3, #0
 801c410:	f000 808b 	beq.w	801c52a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801c414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c418:	2b00      	cmp	r3, #0
 801c41a:	f000 8086 	beq.w	801c52a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	330c      	adds	r3, #12
 801c424:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c428:	e853 3f00 	ldrex	r3, [r3]
 801c42c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	330c      	adds	r3, #12
 801c43e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c442:	647a      	str	r2, [r7, #68]	; 0x44
 801c444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c44a:	e841 2300 	strex	r3, r2, [r1]
 801c44e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c452:	2b00      	cmp	r3, #0
 801c454:	d1e3      	bne.n	801c41e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	681b      	ldr	r3, [r3, #0]
 801c45a:	3314      	adds	r3, #20
 801c45c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c460:	e853 3f00 	ldrex	r3, [r3]
 801c464:	623b      	str	r3, [r7, #32]
   return(result);
 801c466:	6a3b      	ldr	r3, [r7, #32]
 801c468:	f023 0301 	bic.w	r3, r3, #1
 801c46c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	3314      	adds	r3, #20
 801c476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801c47a:	633a      	str	r2, [r7, #48]	; 0x30
 801c47c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c47e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c482:	e841 2300 	strex	r3, r2, [r1]
 801c486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d1e3      	bne.n	801c456 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	2220      	movs	r2, #32
 801c492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	2200      	movs	r2, #0
 801c49a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	330c      	adds	r3, #12
 801c4a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4a4:	693b      	ldr	r3, [r7, #16]
 801c4a6:	e853 3f00 	ldrex	r3, [r3]
 801c4aa:	60fb      	str	r3, [r7, #12]
   return(result);
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	f023 0310 	bic.w	r3, r3, #16
 801c4b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	330c      	adds	r3, #12
 801c4bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801c4c0:	61fa      	str	r2, [r7, #28]
 801c4c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4c4:	69b9      	ldr	r1, [r7, #24]
 801c4c6:	69fa      	ldr	r2, [r7, #28]
 801c4c8:	e841 2300 	strex	r3, r2, [r1]
 801c4cc:	617b      	str	r3, [r7, #20]
   return(result);
 801c4ce:	697b      	ldr	r3, [r7, #20]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d1e3      	bne.n	801c49c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801c4d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801c4d8:	4619      	mov	r1, r3
 801c4da:	6878      	ldr	r0, [r7, #4]
 801c4dc:	f7e4 fd8e 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801c4e0:	e023      	b.n	801c52a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801c4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d009      	beq.n	801c502 <HAL_UART_IRQHandler+0x4ea>
 801c4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d003      	beq.n	801c502 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801c4fa:	6878      	ldr	r0, [r7, #4]
 801c4fc:	f000 fae5 	bl	801caca <UART_Transmit_IT>
    return;
 801c500:	e014      	b.n	801c52c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801c502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d00e      	beq.n	801c52c <HAL_UART_IRQHandler+0x514>
 801c50e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801c512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c516:	2b00      	cmp	r3, #0
 801c518:	d008      	beq.n	801c52c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f000 fb25 	bl	801cb6a <UART_EndTransmit_IT>
    return;
 801c520:	e004      	b.n	801c52c <HAL_UART_IRQHandler+0x514>
    return;
 801c522:	bf00      	nop
 801c524:	e002      	b.n	801c52c <HAL_UART_IRQHandler+0x514>
      return;
 801c526:	bf00      	nop
 801c528:	e000      	b.n	801c52c <HAL_UART_IRQHandler+0x514>
      return;
 801c52a:	bf00      	nop
  }
}
 801c52c:	37e8      	adds	r7, #232	; 0xe8
 801c52e:	46bd      	mov	sp, r7
 801c530:	bd80      	pop	{r7, pc}
 801c532:	bf00      	nop

0801c534 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801c534:	b480      	push	{r7}
 801c536:	b083      	sub	sp, #12
 801c538:	af00      	add	r7, sp, #0
 801c53a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801c53c:	bf00      	nop
 801c53e:	370c      	adds	r7, #12
 801c540:	46bd      	mov	sp, r7
 801c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c546:	4770      	bx	lr

0801c548 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801c548:	b480      	push	{r7}
 801c54a:	b083      	sub	sp, #12
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801c550:	bf00      	nop
 801c552:	370c      	adds	r7, #12
 801c554:	46bd      	mov	sp, r7
 801c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c55a:	4770      	bx	lr

0801c55c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801c55c:	b480      	push	{r7}
 801c55e:	b083      	sub	sp, #12
 801c560:	af00      	add	r7, sp, #0
 801c562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801c564:	bf00      	nop
 801c566:	370c      	adds	r7, #12
 801c568:	46bd      	mov	sp, r7
 801c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c56e:	4770      	bx	lr

0801c570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801c570:	b480      	push	{r7}
 801c572:	b083      	sub	sp, #12
 801c574:	af00      	add	r7, sp, #0
 801c576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801c578:	bf00      	nop
 801c57a:	370c      	adds	r7, #12
 801c57c:	46bd      	mov	sp, r7
 801c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c582:	4770      	bx	lr

0801c584 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	b09c      	sub	sp, #112	; 0x70
 801c588:	af00      	add	r7, sp, #0
 801c58a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c590:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d172      	bne.n	801c686 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801c5a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	330c      	adds	r3, #12
 801c5ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5b0:	e853 3f00 	ldrex	r3, [r3]
 801c5b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801c5b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c5bc:	66bb      	str	r3, [r7, #104]	; 0x68
 801c5be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	330c      	adds	r3, #12
 801c5c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c5c6:	65ba      	str	r2, [r7, #88]	; 0x58
 801c5c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c5cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c5ce:	e841 2300 	strex	r3, r2, [r1]
 801c5d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801c5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d1e5      	bne.n	801c5a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	3314      	adds	r3, #20
 801c5e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5e4:	e853 3f00 	ldrex	r3, [r3]
 801c5e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5ec:	f023 0301 	bic.w	r3, r3, #1
 801c5f0:	667b      	str	r3, [r7, #100]	; 0x64
 801c5f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	3314      	adds	r3, #20
 801c5f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c5fa:	647a      	str	r2, [r7, #68]	; 0x44
 801c5fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c602:	e841 2300 	strex	r3, r2, [r1]
 801c606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d1e5      	bne.n	801c5da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c60e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	3314      	adds	r3, #20
 801c614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c618:	e853 3f00 	ldrex	r3, [r3]
 801c61c:	623b      	str	r3, [r7, #32]
   return(result);
 801c61e:	6a3b      	ldr	r3, [r7, #32]
 801c620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c624:	663b      	str	r3, [r7, #96]	; 0x60
 801c626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c628:	681b      	ldr	r3, [r3, #0]
 801c62a:	3314      	adds	r3, #20
 801c62c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c62e:	633a      	str	r2, [r7, #48]	; 0x30
 801c630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c636:	e841 2300 	strex	r3, r2, [r1]
 801c63a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d1e5      	bne.n	801c60e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c644:	2220      	movs	r2, #32
 801c646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c64a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c64e:	2b01      	cmp	r3, #1
 801c650:	d119      	bne.n	801c686 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	330c      	adds	r3, #12
 801c658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c65a:	693b      	ldr	r3, [r7, #16]
 801c65c:	e853 3f00 	ldrex	r3, [r3]
 801c660:	60fb      	str	r3, [r7, #12]
   return(result);
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	f023 0310 	bic.w	r3, r3, #16
 801c668:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	330c      	adds	r3, #12
 801c670:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c672:	61fa      	str	r2, [r7, #28]
 801c674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c676:	69b9      	ldr	r1, [r7, #24]
 801c678:	69fa      	ldr	r2, [r7, #28]
 801c67a:	e841 2300 	strex	r3, r2, [r1]
 801c67e:	617b      	str	r3, [r7, #20]
   return(result);
 801c680:	697b      	ldr	r3, [r7, #20]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d1e5      	bne.n	801c652 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c68a:	2b01      	cmp	r3, #1
 801c68c:	d106      	bne.n	801c69c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c692:	4619      	mov	r1, r3
 801c694:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c696:	f7e4 fcb1 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c69a:	e002      	b.n	801c6a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c69c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c69e:	f7ff ff53 	bl	801c548 <HAL_UART_RxCpltCallback>
}
 801c6a2:	bf00      	nop
 801c6a4:	3770      	adds	r7, #112	; 0x70
 801c6a6:	46bd      	mov	sp, r7
 801c6a8:	bd80      	pop	{r7, pc}

0801c6aa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c6aa:	b580      	push	{r7, lr}
 801c6ac:	b084      	sub	sp, #16
 801c6ae:	af00      	add	r7, sp, #0
 801c6b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6b6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6bc:	2b01      	cmp	r3, #1
 801c6be:	d108      	bne.n	801c6d2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c6c0:	68fb      	ldr	r3, [r7, #12]
 801c6c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c6c4:	085b      	lsrs	r3, r3, #1
 801c6c6:	b29b      	uxth	r3, r3
 801c6c8:	4619      	mov	r1, r3
 801c6ca:	68f8      	ldr	r0, [r7, #12]
 801c6cc:	f7e4 fc96 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c6d0:	e002      	b.n	801c6d8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c6d2:	68f8      	ldr	r0, [r7, #12]
 801c6d4:	f7ff ff42 	bl	801c55c <HAL_UART_RxHalfCpltCallback>
}
 801c6d8:	bf00      	nop
 801c6da:	3710      	adds	r7, #16
 801c6dc:	46bd      	mov	sp, r7
 801c6de:	bd80      	pop	{r7, pc}

0801c6e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b084      	sub	sp, #16
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c6e8:	2300      	movs	r3, #0
 801c6ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c6f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c6f2:	68bb      	ldr	r3, [r7, #8]
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	695b      	ldr	r3, [r3, #20]
 801c6f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c6fc:	2b80      	cmp	r3, #128	; 0x80
 801c6fe:	bf0c      	ite	eq
 801c700:	2301      	moveq	r3, #1
 801c702:	2300      	movne	r3, #0
 801c704:	b2db      	uxtb	r3, r3
 801c706:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c708:	68bb      	ldr	r3, [r7, #8]
 801c70a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c70e:	b2db      	uxtb	r3, r3
 801c710:	2b21      	cmp	r3, #33	; 0x21
 801c712:	d108      	bne.n	801c726 <UART_DMAError+0x46>
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d005      	beq.n	801c726 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c71a:	68bb      	ldr	r3, [r7, #8]
 801c71c:	2200      	movs	r2, #0
 801c71e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c720:	68b8      	ldr	r0, [r7, #8]
 801c722:	f000 f933 	bl	801c98c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c726:	68bb      	ldr	r3, [r7, #8]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	695b      	ldr	r3, [r3, #20]
 801c72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c730:	2b40      	cmp	r3, #64	; 0x40
 801c732:	bf0c      	ite	eq
 801c734:	2301      	moveq	r3, #1
 801c736:	2300      	movne	r3, #0
 801c738:	b2db      	uxtb	r3, r3
 801c73a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c73c:	68bb      	ldr	r3, [r7, #8]
 801c73e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c742:	b2db      	uxtb	r3, r3
 801c744:	2b22      	cmp	r3, #34	; 0x22
 801c746:	d108      	bne.n	801c75a <UART_DMAError+0x7a>
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d005      	beq.n	801c75a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c74e:	68bb      	ldr	r3, [r7, #8]
 801c750:	2200      	movs	r2, #0
 801c752:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c754:	68b8      	ldr	r0, [r7, #8]
 801c756:	f000 f941 	bl	801c9dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c75a:	68bb      	ldr	r3, [r7, #8]
 801c75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c75e:	f043 0210 	orr.w	r2, r3, #16
 801c762:	68bb      	ldr	r3, [r7, #8]
 801c764:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c766:	68b8      	ldr	r0, [r7, #8]
 801c768:	f7ff ff02 	bl	801c570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c76c:	bf00      	nop
 801c76e:	3710      	adds	r7, #16
 801c770:	46bd      	mov	sp, r7
 801c772:	bd80      	pop	{r7, pc}

0801c774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b090      	sub	sp, #64	; 0x40
 801c778:	af00      	add	r7, sp, #0
 801c77a:	60f8      	str	r0, [r7, #12]
 801c77c:	60b9      	str	r1, [r7, #8]
 801c77e:	603b      	str	r3, [r7, #0]
 801c780:	4613      	mov	r3, r2
 801c782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c784:	e050      	b.n	801c828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c78c:	d04c      	beq.n	801c828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c790:	2b00      	cmp	r3, #0
 801c792:	d007      	beq.n	801c7a4 <UART_WaitOnFlagUntilTimeout+0x30>
 801c794:	f7fa f8c8 	bl	8016928 <HAL_GetTick>
 801c798:	4602      	mov	r2, r0
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	1ad3      	subs	r3, r2, r3
 801c79e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c7a0:	429a      	cmp	r2, r3
 801c7a2:	d241      	bcs.n	801c828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	330c      	adds	r3, #12
 801c7aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7ae:	e853 3f00 	ldrex	r3, [r3]
 801c7b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	681b      	ldr	r3, [r3, #0]
 801c7c0:	330c      	adds	r3, #12
 801c7c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c7c4:	637a      	str	r2, [r7, #52]	; 0x34
 801c7c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c7ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c7cc:	e841 2300 	strex	r3, r2, [r1]
 801c7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d1e5      	bne.n	801c7a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	3314      	adds	r3, #20
 801c7de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7e0:	697b      	ldr	r3, [r7, #20]
 801c7e2:	e853 3f00 	ldrex	r3, [r3]
 801c7e6:	613b      	str	r3, [r7, #16]
   return(result);
 801c7e8:	693b      	ldr	r3, [r7, #16]
 801c7ea:	f023 0301 	bic.w	r3, r3, #1
 801c7ee:	63bb      	str	r3, [r7, #56]	; 0x38
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	681b      	ldr	r3, [r3, #0]
 801c7f4:	3314      	adds	r3, #20
 801c7f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c7f8:	623a      	str	r2, [r7, #32]
 801c7fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7fc:	69f9      	ldr	r1, [r7, #28]
 801c7fe:	6a3a      	ldr	r2, [r7, #32]
 801c800:	e841 2300 	strex	r3, r2, [r1]
 801c804:	61bb      	str	r3, [r7, #24]
   return(result);
 801c806:	69bb      	ldr	r3, [r7, #24]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d1e5      	bne.n	801c7d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	2220      	movs	r2, #32
 801c810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c814:	68fb      	ldr	r3, [r7, #12]
 801c816:	2220      	movs	r2, #32
 801c818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	2200      	movs	r2, #0
 801c820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c824:	2303      	movs	r3, #3
 801c826:	e00f      	b.n	801c848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	681a      	ldr	r2, [r3, #0]
 801c82e:	68bb      	ldr	r3, [r7, #8]
 801c830:	4013      	ands	r3, r2
 801c832:	68ba      	ldr	r2, [r7, #8]
 801c834:	429a      	cmp	r2, r3
 801c836:	bf0c      	ite	eq
 801c838:	2301      	moveq	r3, #1
 801c83a:	2300      	movne	r3, #0
 801c83c:	b2db      	uxtb	r3, r3
 801c83e:	461a      	mov	r2, r3
 801c840:	79fb      	ldrb	r3, [r7, #7]
 801c842:	429a      	cmp	r2, r3
 801c844:	d09f      	beq.n	801c786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c846:	2300      	movs	r3, #0
}
 801c848:	4618      	mov	r0, r3
 801c84a:	3740      	adds	r7, #64	; 0x40
 801c84c:	46bd      	mov	sp, r7
 801c84e:	bd80      	pop	{r7, pc}

0801c850 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b098      	sub	sp, #96	; 0x60
 801c854:	af00      	add	r7, sp, #0
 801c856:	60f8      	str	r0, [r7, #12]
 801c858:	60b9      	str	r1, [r7, #8]
 801c85a:	4613      	mov	r3, r2
 801c85c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c85e:	68ba      	ldr	r2, [r7, #8]
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	88fa      	ldrh	r2, [r7, #6]
 801c868:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	2200      	movs	r2, #0
 801c86e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	2222      	movs	r2, #34	; 0x22
 801c874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c87c:	4a40      	ldr	r2, [pc, #256]	; (801c980 <UART_Start_Receive_DMA+0x130>)
 801c87e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c880:	68fb      	ldr	r3, [r7, #12]
 801c882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c884:	4a3f      	ldr	r2, [pc, #252]	; (801c984 <UART_Start_Receive_DMA+0x134>)
 801c886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c88c:	4a3e      	ldr	r2, [pc, #248]	; (801c988 <UART_Start_Receive_DMA+0x138>)
 801c88e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c894:	2200      	movs	r2, #0
 801c896:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c898:	f107 0308 	add.w	r3, r7, #8
 801c89c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	3304      	adds	r3, #4
 801c8a8:	4619      	mov	r1, r3
 801c8aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c8ac:	681a      	ldr	r2, [r3, #0]
 801c8ae:	88fb      	ldrh	r3, [r7, #6]
 801c8b0:	f7fa fa2a 	bl	8016d08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	613b      	str	r3, [r7, #16]
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	613b      	str	r3, [r7, #16]
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	685b      	ldr	r3, [r3, #4]
 801c8c6:	613b      	str	r3, [r7, #16]
 801c8c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	2200      	movs	r2, #0
 801c8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	691b      	ldr	r3, [r3, #16]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d019      	beq.n	801c90e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c8da:	68fb      	ldr	r3, [r7, #12]
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	330c      	adds	r3, #12
 801c8e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c8e4:	e853 3f00 	ldrex	r3, [r3]
 801c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c8ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c8f0:	65bb      	str	r3, [r7, #88]	; 0x58
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	330c      	adds	r3, #12
 801c8f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c8fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c8fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c8fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c902:	e841 2300 	strex	r3, r2, [r1]
 801c906:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d1e5      	bne.n	801c8da <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	3314      	adds	r3, #20
 801c914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c918:	e853 3f00 	ldrex	r3, [r3]
 801c91c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c920:	f043 0301 	orr.w	r3, r3, #1
 801c924:	657b      	str	r3, [r7, #84]	; 0x54
 801c926:	68fb      	ldr	r3, [r7, #12]
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	3314      	adds	r3, #20
 801c92c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c92e:	63ba      	str	r2, [r7, #56]	; 0x38
 801c930:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c932:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c936:	e841 2300 	strex	r3, r2, [r1]
 801c93a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d1e5      	bne.n	801c90e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	3314      	adds	r3, #20
 801c948:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c94a:	69bb      	ldr	r3, [r7, #24]
 801c94c:	e853 3f00 	ldrex	r3, [r3]
 801c950:	617b      	str	r3, [r7, #20]
   return(result);
 801c952:	697b      	ldr	r3, [r7, #20]
 801c954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c958:	653b      	str	r3, [r7, #80]	; 0x50
 801c95a:	68fb      	ldr	r3, [r7, #12]
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	3314      	adds	r3, #20
 801c960:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c962:	627a      	str	r2, [r7, #36]	; 0x24
 801c964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c966:	6a39      	ldr	r1, [r7, #32]
 801c968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c96a:	e841 2300 	strex	r3, r2, [r1]
 801c96e:	61fb      	str	r3, [r7, #28]
   return(result);
 801c970:	69fb      	ldr	r3, [r7, #28]
 801c972:	2b00      	cmp	r3, #0
 801c974:	d1e5      	bne.n	801c942 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c976:	2300      	movs	r3, #0
}
 801c978:	4618      	mov	r0, r3
 801c97a:	3760      	adds	r7, #96	; 0x60
 801c97c:	46bd      	mov	sp, r7
 801c97e:	bd80      	pop	{r7, pc}
 801c980:	0801c585 	.word	0x0801c585
 801c984:	0801c6ab 	.word	0x0801c6ab
 801c988:	0801c6e1 	.word	0x0801c6e1

0801c98c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c98c:	b480      	push	{r7}
 801c98e:	b089      	sub	sp, #36	; 0x24
 801c990:	af00      	add	r7, sp, #0
 801c992:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	330c      	adds	r3, #12
 801c99a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	e853 3f00 	ldrex	r3, [r3]
 801c9a2:	60bb      	str	r3, [r7, #8]
   return(result);
 801c9a4:	68bb      	ldr	r3, [r7, #8]
 801c9a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c9aa:	61fb      	str	r3, [r7, #28]
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	330c      	adds	r3, #12
 801c9b2:	69fa      	ldr	r2, [r7, #28]
 801c9b4:	61ba      	str	r2, [r7, #24]
 801c9b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c9b8:	6979      	ldr	r1, [r7, #20]
 801c9ba:	69ba      	ldr	r2, [r7, #24]
 801c9bc:	e841 2300 	strex	r3, r2, [r1]
 801c9c0:	613b      	str	r3, [r7, #16]
   return(result);
 801c9c2:	693b      	ldr	r3, [r7, #16]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d1e5      	bne.n	801c994 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	2220      	movs	r2, #32
 801c9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c9d0:	bf00      	nop
 801c9d2:	3724      	adds	r7, #36	; 0x24
 801c9d4:	46bd      	mov	sp, r7
 801c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9da:	4770      	bx	lr

0801c9dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c9dc:	b480      	push	{r7}
 801c9de:	b095      	sub	sp, #84	; 0x54
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	330c      	adds	r3, #12
 801c9ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9ee:	e853 3f00 	ldrex	r3, [r3]
 801c9f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c9fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	330c      	adds	r3, #12
 801ca02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ca04:	643a      	str	r2, [r7, #64]	; 0x40
 801ca06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ca0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801ca0c:	e841 2300 	strex	r3, r2, [r1]
 801ca10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	d1e5      	bne.n	801c9e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	3314      	adds	r3, #20
 801ca1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca20:	6a3b      	ldr	r3, [r7, #32]
 801ca22:	e853 3f00 	ldrex	r3, [r3]
 801ca26:	61fb      	str	r3, [r7, #28]
   return(result);
 801ca28:	69fb      	ldr	r3, [r7, #28]
 801ca2a:	f023 0301 	bic.w	r3, r3, #1
 801ca2e:	64bb      	str	r3, [r7, #72]	; 0x48
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	3314      	adds	r3, #20
 801ca36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801ca38:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ca3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ca3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ca40:	e841 2300 	strex	r3, r2, [r1]
 801ca44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	d1e5      	bne.n	801ca18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca50:	2b01      	cmp	r3, #1
 801ca52:	d119      	bne.n	801ca88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	330c      	adds	r3, #12
 801ca5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca5c:	68fb      	ldr	r3, [r7, #12]
 801ca5e:	e853 3f00 	ldrex	r3, [r3]
 801ca62:	60bb      	str	r3, [r7, #8]
   return(result);
 801ca64:	68bb      	ldr	r3, [r7, #8]
 801ca66:	f023 0310 	bic.w	r3, r3, #16
 801ca6a:	647b      	str	r3, [r7, #68]	; 0x44
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	330c      	adds	r3, #12
 801ca72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ca74:	61ba      	str	r2, [r7, #24]
 801ca76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca78:	6979      	ldr	r1, [r7, #20]
 801ca7a:	69ba      	ldr	r2, [r7, #24]
 801ca7c:	e841 2300 	strex	r3, r2, [r1]
 801ca80:	613b      	str	r3, [r7, #16]
   return(result);
 801ca82:	693b      	ldr	r3, [r7, #16]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d1e5      	bne.n	801ca54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	2220      	movs	r2, #32
 801ca8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	2200      	movs	r2, #0
 801ca94:	631a      	str	r2, [r3, #48]	; 0x30
}
 801ca96:	bf00      	nop
 801ca98:	3754      	adds	r7, #84	; 0x54
 801ca9a:	46bd      	mov	sp, r7
 801ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caa0:	4770      	bx	lr

0801caa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801caa2:	b580      	push	{r7, lr}
 801caa4:	b084      	sub	sp, #16
 801caa6:	af00      	add	r7, sp, #0
 801caa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801caae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801cab0:	68fb      	ldr	r3, [r7, #12]
 801cab2:	2200      	movs	r2, #0
 801cab4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801cab6:	68fb      	ldr	r3, [r7, #12]
 801cab8:	2200      	movs	r2, #0
 801caba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801cabc:	68f8      	ldr	r0, [r7, #12]
 801cabe:	f7ff fd57 	bl	801c570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801cac2:	bf00      	nop
 801cac4:	3710      	adds	r7, #16
 801cac6:	46bd      	mov	sp, r7
 801cac8:	bd80      	pop	{r7, pc}

0801caca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801caca:	b480      	push	{r7}
 801cacc:	b085      	sub	sp, #20
 801cace:	af00      	add	r7, sp, #0
 801cad0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cad8:	b2db      	uxtb	r3, r3
 801cada:	2b21      	cmp	r3, #33	; 0x21
 801cadc:	d13e      	bne.n	801cb5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	689b      	ldr	r3, [r3, #8]
 801cae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cae6:	d114      	bne.n	801cb12 <UART_Transmit_IT+0x48>
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	691b      	ldr	r3, [r3, #16]
 801caec:	2b00      	cmp	r3, #0
 801caee:	d110      	bne.n	801cb12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	6a1b      	ldr	r3, [r3, #32]
 801caf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	881b      	ldrh	r3, [r3, #0]
 801cafa:	461a      	mov	r2, r3
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801cb04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	6a1b      	ldr	r3, [r3, #32]
 801cb0a:	1c9a      	adds	r2, r3, #2
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	621a      	str	r2, [r3, #32]
 801cb10:	e008      	b.n	801cb24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	6a1b      	ldr	r3, [r3, #32]
 801cb16:	1c59      	adds	r1, r3, #1
 801cb18:	687a      	ldr	r2, [r7, #4]
 801cb1a:	6211      	str	r1, [r2, #32]
 801cb1c:	781a      	ldrb	r2, [r3, #0]
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	681b      	ldr	r3, [r3, #0]
 801cb22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801cb28:	b29b      	uxth	r3, r3
 801cb2a:	3b01      	subs	r3, #1
 801cb2c:	b29b      	uxth	r3, r3
 801cb2e:	687a      	ldr	r2, [r7, #4]
 801cb30:	4619      	mov	r1, r3
 801cb32:	84d1      	strh	r1, [r2, #38]	; 0x26
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	d10f      	bne.n	801cb58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	68da      	ldr	r2, [r3, #12]
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801cb46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	68da      	ldr	r2, [r3, #12]
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cb56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801cb58:	2300      	movs	r3, #0
 801cb5a:	e000      	b.n	801cb5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801cb5c:	2302      	movs	r3, #2
  }
}
 801cb5e:	4618      	mov	r0, r3
 801cb60:	3714      	adds	r7, #20
 801cb62:	46bd      	mov	sp, r7
 801cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb68:	4770      	bx	lr

0801cb6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801cb6a:	b580      	push	{r7, lr}
 801cb6c:	b082      	sub	sp, #8
 801cb6e:	af00      	add	r7, sp, #0
 801cb70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	68da      	ldr	r2, [r3, #12]
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cb80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	2220      	movs	r2, #32
 801cb86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801cb8a:	6878      	ldr	r0, [r7, #4]
 801cb8c:	f7ff fcd2 	bl	801c534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801cb90:	2300      	movs	r3, #0
}
 801cb92:	4618      	mov	r0, r3
 801cb94:	3708      	adds	r7, #8
 801cb96:	46bd      	mov	sp, r7
 801cb98:	bd80      	pop	{r7, pc}

0801cb9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801cb9a:	b580      	push	{r7, lr}
 801cb9c:	b08c      	sub	sp, #48	; 0x30
 801cb9e:	af00      	add	r7, sp, #0
 801cba0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801cba8:	b2db      	uxtb	r3, r3
 801cbaa:	2b22      	cmp	r3, #34	; 0x22
 801cbac:	f040 80ab 	bne.w	801cd06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	689b      	ldr	r3, [r3, #8]
 801cbb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cbb8:	d117      	bne.n	801cbea <UART_Receive_IT+0x50>
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	691b      	ldr	r3, [r3, #16]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d113      	bne.n	801cbea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	685b      	ldr	r3, [r3, #4]
 801cbd2:	b29b      	uxth	r3, r3
 801cbd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cbd8:	b29a      	uxth	r2, r3
 801cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cbdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbe2:	1c9a      	adds	r2, r3, #2
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	629a      	str	r2, [r3, #40]	; 0x28
 801cbe8:	e026      	b.n	801cc38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	689b      	ldr	r3, [r3, #8]
 801cbf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cbfc:	d007      	beq.n	801cc0e <UART_Receive_IT+0x74>
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	689b      	ldr	r3, [r3, #8]
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d10a      	bne.n	801cc1c <UART_Receive_IT+0x82>
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	691b      	ldr	r3, [r3, #16]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d106      	bne.n	801cc1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	685b      	ldr	r3, [r3, #4]
 801cc14:	b2da      	uxtb	r2, r3
 801cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc18:	701a      	strb	r2, [r3, #0]
 801cc1a:	e008      	b.n	801cc2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	681b      	ldr	r3, [r3, #0]
 801cc20:	685b      	ldr	r3, [r3, #4]
 801cc22:	b2db      	uxtb	r3, r3
 801cc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cc28:	b2da      	uxtb	r2, r3
 801cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc32:	1c5a      	adds	r2, r3, #1
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801cc3c:	b29b      	uxth	r3, r3
 801cc3e:	3b01      	subs	r3, #1
 801cc40:	b29b      	uxth	r3, r3
 801cc42:	687a      	ldr	r2, [r7, #4]
 801cc44:	4619      	mov	r1, r3
 801cc46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d15a      	bne.n	801cd02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	68da      	ldr	r2, [r3, #12]
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	f022 0220 	bic.w	r2, r2, #32
 801cc5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	68da      	ldr	r2, [r3, #12]
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	681b      	ldr	r3, [r3, #0]
 801cc66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801cc6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	695a      	ldr	r2, [r3, #20]
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	f022 0201 	bic.w	r2, r2, #1
 801cc7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	2220      	movs	r2, #32
 801cc80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc88:	2b01      	cmp	r3, #1
 801cc8a:	d135      	bne.n	801ccf8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	2200      	movs	r2, #0
 801cc90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	330c      	adds	r3, #12
 801cc98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cc9a:	697b      	ldr	r3, [r7, #20]
 801cc9c:	e853 3f00 	ldrex	r3, [r3]
 801cca0:	613b      	str	r3, [r7, #16]
   return(result);
 801cca2:	693b      	ldr	r3, [r7, #16]
 801cca4:	f023 0310 	bic.w	r3, r3, #16
 801cca8:	627b      	str	r3, [r7, #36]	; 0x24
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	330c      	adds	r3, #12
 801ccb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ccb2:	623a      	str	r2, [r7, #32]
 801ccb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ccb6:	69f9      	ldr	r1, [r7, #28]
 801ccb8:	6a3a      	ldr	r2, [r7, #32]
 801ccba:	e841 2300 	strex	r3, r2, [r1]
 801ccbe:	61bb      	str	r3, [r7, #24]
   return(result);
 801ccc0:	69bb      	ldr	r3, [r7, #24]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d1e5      	bne.n	801cc92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	f003 0310 	and.w	r3, r3, #16
 801ccd0:	2b10      	cmp	r3, #16
 801ccd2:	d10a      	bne.n	801ccea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	60fb      	str	r3, [r7, #12]
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	60fb      	str	r3, [r7, #12]
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	685b      	ldr	r3, [r3, #4]
 801cce6:	60fb      	str	r3, [r7, #12]
 801cce8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801ccee:	4619      	mov	r1, r3
 801ccf0:	6878      	ldr	r0, [r7, #4]
 801ccf2:	f7e4 f983 	bl	8000ffc <HAL_UARTEx_RxEventCallback>
 801ccf6:	e002      	b.n	801ccfe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801ccf8:	6878      	ldr	r0, [r7, #4]
 801ccfa:	f7ff fc25 	bl	801c548 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801ccfe:	2300      	movs	r3, #0
 801cd00:	e002      	b.n	801cd08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801cd02:	2300      	movs	r3, #0
 801cd04:	e000      	b.n	801cd08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801cd06:	2302      	movs	r3, #2
  }
}
 801cd08:	4618      	mov	r0, r3
 801cd0a:	3730      	adds	r7, #48	; 0x30
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	bd80      	pop	{r7, pc}

0801cd10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801cd10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cd14:	b0c0      	sub	sp, #256	; 0x100
 801cd16:	af00      	add	r7, sp, #0
 801cd18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801cd1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	691b      	ldr	r3, [r3, #16]
 801cd24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801cd28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd2c:	68d9      	ldr	r1, [r3, #12]
 801cd2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd32:	681a      	ldr	r2, [r3, #0]
 801cd34:	ea40 0301 	orr.w	r3, r0, r1
 801cd38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801cd3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd3e:	689a      	ldr	r2, [r3, #8]
 801cd40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd44:	691b      	ldr	r3, [r3, #16]
 801cd46:	431a      	orrs	r2, r3
 801cd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd4c:	695b      	ldr	r3, [r3, #20]
 801cd4e:	431a      	orrs	r2, r3
 801cd50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd54:	69db      	ldr	r3, [r3, #28]
 801cd56:	4313      	orrs	r3, r2
 801cd58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801cd5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	68db      	ldr	r3, [r3, #12]
 801cd64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801cd68:	f021 010c 	bic.w	r1, r1, #12
 801cd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd70:	681a      	ldr	r2, [r3, #0]
 801cd72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801cd76:	430b      	orrs	r3, r1
 801cd78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801cd7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	695b      	ldr	r3, [r3, #20]
 801cd82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801cd86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd8a:	6999      	ldr	r1, [r3, #24]
 801cd8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd90:	681a      	ldr	r2, [r3, #0]
 801cd92:	ea40 0301 	orr.w	r3, r0, r1
 801cd96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801cd98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cd9c:	681a      	ldr	r2, [r3, #0]
 801cd9e:	4b8f      	ldr	r3, [pc, #572]	; (801cfdc <UART_SetConfig+0x2cc>)
 801cda0:	429a      	cmp	r2, r3
 801cda2:	d005      	beq.n	801cdb0 <UART_SetConfig+0xa0>
 801cda4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cda8:	681a      	ldr	r2, [r3, #0]
 801cdaa:	4b8d      	ldr	r3, [pc, #564]	; (801cfe0 <UART_SetConfig+0x2d0>)
 801cdac:	429a      	cmp	r2, r3
 801cdae:	d104      	bne.n	801cdba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801cdb0:	f7fd ffbc 	bl	801ad2c <HAL_RCC_GetPCLK2Freq>
 801cdb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801cdb8:	e003      	b.n	801cdc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801cdba:	f7fd ffa3 	bl	801ad04 <HAL_RCC_GetPCLK1Freq>
 801cdbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801cdc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cdc6:	69db      	ldr	r3, [r3, #28]
 801cdc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cdcc:	f040 810c 	bne.w	801cfe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801cdd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cdd4:	2200      	movs	r2, #0
 801cdd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801cdda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801cdde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801cde2:	4622      	mov	r2, r4
 801cde4:	462b      	mov	r3, r5
 801cde6:	1891      	adds	r1, r2, r2
 801cde8:	65b9      	str	r1, [r7, #88]	; 0x58
 801cdea:	415b      	adcs	r3, r3
 801cdec:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cdee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801cdf2:	4621      	mov	r1, r4
 801cdf4:	eb12 0801 	adds.w	r8, r2, r1
 801cdf8:	4629      	mov	r1, r5
 801cdfa:	eb43 0901 	adc.w	r9, r3, r1
 801cdfe:	f04f 0200 	mov.w	r2, #0
 801ce02:	f04f 0300 	mov.w	r3, #0
 801ce06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801ce0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801ce0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801ce12:	4690      	mov	r8, r2
 801ce14:	4699      	mov	r9, r3
 801ce16:	4623      	mov	r3, r4
 801ce18:	eb18 0303 	adds.w	r3, r8, r3
 801ce1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801ce20:	462b      	mov	r3, r5
 801ce22:	eb49 0303 	adc.w	r3, r9, r3
 801ce26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801ce2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ce2e:	685b      	ldr	r3, [r3, #4]
 801ce30:	2200      	movs	r2, #0
 801ce32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801ce36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801ce3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801ce3e:	460b      	mov	r3, r1
 801ce40:	18db      	adds	r3, r3, r3
 801ce42:	653b      	str	r3, [r7, #80]	; 0x50
 801ce44:	4613      	mov	r3, r2
 801ce46:	eb42 0303 	adc.w	r3, r2, r3
 801ce4a:	657b      	str	r3, [r7, #84]	; 0x54
 801ce4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801ce50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801ce54:	f7e3 ff18 	bl	8000c88 <__aeabi_uldivmod>
 801ce58:	4602      	mov	r2, r0
 801ce5a:	460b      	mov	r3, r1
 801ce5c:	4b61      	ldr	r3, [pc, #388]	; (801cfe4 <UART_SetConfig+0x2d4>)
 801ce5e:	fba3 2302 	umull	r2, r3, r3, r2
 801ce62:	095b      	lsrs	r3, r3, #5
 801ce64:	011c      	lsls	r4, r3, #4
 801ce66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ce6a:	2200      	movs	r2, #0
 801ce6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801ce70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801ce74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801ce78:	4642      	mov	r2, r8
 801ce7a:	464b      	mov	r3, r9
 801ce7c:	1891      	adds	r1, r2, r2
 801ce7e:	64b9      	str	r1, [r7, #72]	; 0x48
 801ce80:	415b      	adcs	r3, r3
 801ce82:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ce84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801ce88:	4641      	mov	r1, r8
 801ce8a:	eb12 0a01 	adds.w	sl, r2, r1
 801ce8e:	4649      	mov	r1, r9
 801ce90:	eb43 0b01 	adc.w	fp, r3, r1
 801ce94:	f04f 0200 	mov.w	r2, #0
 801ce98:	f04f 0300 	mov.w	r3, #0
 801ce9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801cea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801cea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801cea8:	4692      	mov	sl, r2
 801ceaa:	469b      	mov	fp, r3
 801ceac:	4643      	mov	r3, r8
 801ceae:	eb1a 0303 	adds.w	r3, sl, r3
 801ceb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801ceb6:	464b      	mov	r3, r9
 801ceb8:	eb4b 0303 	adc.w	r3, fp, r3
 801cebc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801cec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cec4:	685b      	ldr	r3, [r3, #4]
 801cec6:	2200      	movs	r2, #0
 801cec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801cecc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801ced0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801ced4:	460b      	mov	r3, r1
 801ced6:	18db      	adds	r3, r3, r3
 801ced8:	643b      	str	r3, [r7, #64]	; 0x40
 801ceda:	4613      	mov	r3, r2
 801cedc:	eb42 0303 	adc.w	r3, r2, r3
 801cee0:	647b      	str	r3, [r7, #68]	; 0x44
 801cee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801cee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801ceea:	f7e3 fecd 	bl	8000c88 <__aeabi_uldivmod>
 801ceee:	4602      	mov	r2, r0
 801cef0:	460b      	mov	r3, r1
 801cef2:	4611      	mov	r1, r2
 801cef4:	4b3b      	ldr	r3, [pc, #236]	; (801cfe4 <UART_SetConfig+0x2d4>)
 801cef6:	fba3 2301 	umull	r2, r3, r3, r1
 801cefa:	095b      	lsrs	r3, r3, #5
 801cefc:	2264      	movs	r2, #100	; 0x64
 801cefe:	fb02 f303 	mul.w	r3, r2, r3
 801cf02:	1acb      	subs	r3, r1, r3
 801cf04:	00db      	lsls	r3, r3, #3
 801cf06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801cf0a:	4b36      	ldr	r3, [pc, #216]	; (801cfe4 <UART_SetConfig+0x2d4>)
 801cf0c:	fba3 2302 	umull	r2, r3, r3, r2
 801cf10:	095b      	lsrs	r3, r3, #5
 801cf12:	005b      	lsls	r3, r3, #1
 801cf14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801cf18:	441c      	add	r4, r3
 801cf1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cf1e:	2200      	movs	r2, #0
 801cf20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801cf24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801cf28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801cf2c:	4642      	mov	r2, r8
 801cf2e:	464b      	mov	r3, r9
 801cf30:	1891      	adds	r1, r2, r2
 801cf32:	63b9      	str	r1, [r7, #56]	; 0x38
 801cf34:	415b      	adcs	r3, r3
 801cf36:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cf38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801cf3c:	4641      	mov	r1, r8
 801cf3e:	1851      	adds	r1, r2, r1
 801cf40:	6339      	str	r1, [r7, #48]	; 0x30
 801cf42:	4649      	mov	r1, r9
 801cf44:	414b      	adcs	r3, r1
 801cf46:	637b      	str	r3, [r7, #52]	; 0x34
 801cf48:	f04f 0200 	mov.w	r2, #0
 801cf4c:	f04f 0300 	mov.w	r3, #0
 801cf50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801cf54:	4659      	mov	r1, fp
 801cf56:	00cb      	lsls	r3, r1, #3
 801cf58:	4651      	mov	r1, sl
 801cf5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cf5e:	4651      	mov	r1, sl
 801cf60:	00ca      	lsls	r2, r1, #3
 801cf62:	4610      	mov	r0, r2
 801cf64:	4619      	mov	r1, r3
 801cf66:	4603      	mov	r3, r0
 801cf68:	4642      	mov	r2, r8
 801cf6a:	189b      	adds	r3, r3, r2
 801cf6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801cf70:	464b      	mov	r3, r9
 801cf72:	460a      	mov	r2, r1
 801cf74:	eb42 0303 	adc.w	r3, r2, r3
 801cf78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801cf7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cf80:	685b      	ldr	r3, [r3, #4]
 801cf82:	2200      	movs	r2, #0
 801cf84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801cf88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801cf8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801cf90:	460b      	mov	r3, r1
 801cf92:	18db      	adds	r3, r3, r3
 801cf94:	62bb      	str	r3, [r7, #40]	; 0x28
 801cf96:	4613      	mov	r3, r2
 801cf98:	eb42 0303 	adc.w	r3, r2, r3
 801cf9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cf9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801cfa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801cfa6:	f7e3 fe6f 	bl	8000c88 <__aeabi_uldivmod>
 801cfaa:	4602      	mov	r2, r0
 801cfac:	460b      	mov	r3, r1
 801cfae:	4b0d      	ldr	r3, [pc, #52]	; (801cfe4 <UART_SetConfig+0x2d4>)
 801cfb0:	fba3 1302 	umull	r1, r3, r3, r2
 801cfb4:	095b      	lsrs	r3, r3, #5
 801cfb6:	2164      	movs	r1, #100	; 0x64
 801cfb8:	fb01 f303 	mul.w	r3, r1, r3
 801cfbc:	1ad3      	subs	r3, r2, r3
 801cfbe:	00db      	lsls	r3, r3, #3
 801cfc0:	3332      	adds	r3, #50	; 0x32
 801cfc2:	4a08      	ldr	r2, [pc, #32]	; (801cfe4 <UART_SetConfig+0x2d4>)
 801cfc4:	fba2 2303 	umull	r2, r3, r2, r3
 801cfc8:	095b      	lsrs	r3, r3, #5
 801cfca:	f003 0207 	and.w	r2, r3, #7
 801cfce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	4422      	add	r2, r4
 801cfd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801cfd8:	e105      	b.n	801d1e6 <UART_SetConfig+0x4d6>
 801cfda:	bf00      	nop
 801cfdc:	40011000 	.word	0x40011000
 801cfe0:	40011400 	.word	0x40011400
 801cfe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801cfe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cfec:	2200      	movs	r2, #0
 801cfee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801cff2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801cffa:	4642      	mov	r2, r8
 801cffc:	464b      	mov	r3, r9
 801cffe:	1891      	adds	r1, r2, r2
 801d000:	6239      	str	r1, [r7, #32]
 801d002:	415b      	adcs	r3, r3
 801d004:	627b      	str	r3, [r7, #36]	; 0x24
 801d006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801d00a:	4641      	mov	r1, r8
 801d00c:	1854      	adds	r4, r2, r1
 801d00e:	4649      	mov	r1, r9
 801d010:	eb43 0501 	adc.w	r5, r3, r1
 801d014:	f04f 0200 	mov.w	r2, #0
 801d018:	f04f 0300 	mov.w	r3, #0
 801d01c:	00eb      	lsls	r3, r5, #3
 801d01e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801d022:	00e2      	lsls	r2, r4, #3
 801d024:	4614      	mov	r4, r2
 801d026:	461d      	mov	r5, r3
 801d028:	4643      	mov	r3, r8
 801d02a:	18e3      	adds	r3, r4, r3
 801d02c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801d030:	464b      	mov	r3, r9
 801d032:	eb45 0303 	adc.w	r3, r5, r3
 801d036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801d03a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d03e:	685b      	ldr	r3, [r3, #4]
 801d040:	2200      	movs	r2, #0
 801d042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801d04a:	f04f 0200 	mov.w	r2, #0
 801d04e:	f04f 0300 	mov.w	r3, #0
 801d052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801d056:	4629      	mov	r1, r5
 801d058:	008b      	lsls	r3, r1, #2
 801d05a:	4621      	mov	r1, r4
 801d05c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801d060:	4621      	mov	r1, r4
 801d062:	008a      	lsls	r2, r1, #2
 801d064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801d068:	f7e3 fe0e 	bl	8000c88 <__aeabi_uldivmod>
 801d06c:	4602      	mov	r2, r0
 801d06e:	460b      	mov	r3, r1
 801d070:	4b60      	ldr	r3, [pc, #384]	; (801d1f4 <UART_SetConfig+0x4e4>)
 801d072:	fba3 2302 	umull	r2, r3, r3, r2
 801d076:	095b      	lsrs	r3, r3, #5
 801d078:	011c      	lsls	r4, r3, #4
 801d07a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801d07e:	2200      	movs	r2, #0
 801d080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d084:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801d088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801d08c:	4642      	mov	r2, r8
 801d08e:	464b      	mov	r3, r9
 801d090:	1891      	adds	r1, r2, r2
 801d092:	61b9      	str	r1, [r7, #24]
 801d094:	415b      	adcs	r3, r3
 801d096:	61fb      	str	r3, [r7, #28]
 801d098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801d09c:	4641      	mov	r1, r8
 801d09e:	1851      	adds	r1, r2, r1
 801d0a0:	6139      	str	r1, [r7, #16]
 801d0a2:	4649      	mov	r1, r9
 801d0a4:	414b      	adcs	r3, r1
 801d0a6:	617b      	str	r3, [r7, #20]
 801d0a8:	f04f 0200 	mov.w	r2, #0
 801d0ac:	f04f 0300 	mov.w	r3, #0
 801d0b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801d0b4:	4659      	mov	r1, fp
 801d0b6:	00cb      	lsls	r3, r1, #3
 801d0b8:	4651      	mov	r1, sl
 801d0ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801d0be:	4651      	mov	r1, sl
 801d0c0:	00ca      	lsls	r2, r1, #3
 801d0c2:	4610      	mov	r0, r2
 801d0c4:	4619      	mov	r1, r3
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	4642      	mov	r2, r8
 801d0ca:	189b      	adds	r3, r3, r2
 801d0cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d0d0:	464b      	mov	r3, r9
 801d0d2:	460a      	mov	r2, r1
 801d0d4:	eb42 0303 	adc.w	r3, r2, r3
 801d0d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d0e0:	685b      	ldr	r3, [r3, #4]
 801d0e2:	2200      	movs	r2, #0
 801d0e4:	67bb      	str	r3, [r7, #120]	; 0x78
 801d0e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 801d0e8:	f04f 0200 	mov.w	r2, #0
 801d0ec:	f04f 0300 	mov.w	r3, #0
 801d0f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801d0f4:	4649      	mov	r1, r9
 801d0f6:	008b      	lsls	r3, r1, #2
 801d0f8:	4641      	mov	r1, r8
 801d0fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801d0fe:	4641      	mov	r1, r8
 801d100:	008a      	lsls	r2, r1, #2
 801d102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801d106:	f7e3 fdbf 	bl	8000c88 <__aeabi_uldivmod>
 801d10a:	4602      	mov	r2, r0
 801d10c:	460b      	mov	r3, r1
 801d10e:	4b39      	ldr	r3, [pc, #228]	; (801d1f4 <UART_SetConfig+0x4e4>)
 801d110:	fba3 1302 	umull	r1, r3, r3, r2
 801d114:	095b      	lsrs	r3, r3, #5
 801d116:	2164      	movs	r1, #100	; 0x64
 801d118:	fb01 f303 	mul.w	r3, r1, r3
 801d11c:	1ad3      	subs	r3, r2, r3
 801d11e:	011b      	lsls	r3, r3, #4
 801d120:	3332      	adds	r3, #50	; 0x32
 801d122:	4a34      	ldr	r2, [pc, #208]	; (801d1f4 <UART_SetConfig+0x4e4>)
 801d124:	fba2 2303 	umull	r2, r3, r2, r3
 801d128:	095b      	lsrs	r3, r3, #5
 801d12a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d12e:	441c      	add	r4, r3
 801d130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801d134:	2200      	movs	r2, #0
 801d136:	673b      	str	r3, [r7, #112]	; 0x70
 801d138:	677a      	str	r2, [r7, #116]	; 0x74
 801d13a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801d13e:	4642      	mov	r2, r8
 801d140:	464b      	mov	r3, r9
 801d142:	1891      	adds	r1, r2, r2
 801d144:	60b9      	str	r1, [r7, #8]
 801d146:	415b      	adcs	r3, r3
 801d148:	60fb      	str	r3, [r7, #12]
 801d14a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d14e:	4641      	mov	r1, r8
 801d150:	1851      	adds	r1, r2, r1
 801d152:	6039      	str	r1, [r7, #0]
 801d154:	4649      	mov	r1, r9
 801d156:	414b      	adcs	r3, r1
 801d158:	607b      	str	r3, [r7, #4]
 801d15a:	f04f 0200 	mov.w	r2, #0
 801d15e:	f04f 0300 	mov.w	r3, #0
 801d162:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801d166:	4659      	mov	r1, fp
 801d168:	00cb      	lsls	r3, r1, #3
 801d16a:	4651      	mov	r1, sl
 801d16c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801d170:	4651      	mov	r1, sl
 801d172:	00ca      	lsls	r2, r1, #3
 801d174:	4610      	mov	r0, r2
 801d176:	4619      	mov	r1, r3
 801d178:	4603      	mov	r3, r0
 801d17a:	4642      	mov	r2, r8
 801d17c:	189b      	adds	r3, r3, r2
 801d17e:	66bb      	str	r3, [r7, #104]	; 0x68
 801d180:	464b      	mov	r3, r9
 801d182:	460a      	mov	r2, r1
 801d184:	eb42 0303 	adc.w	r3, r2, r3
 801d188:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d18e:	685b      	ldr	r3, [r3, #4]
 801d190:	2200      	movs	r2, #0
 801d192:	663b      	str	r3, [r7, #96]	; 0x60
 801d194:	667a      	str	r2, [r7, #100]	; 0x64
 801d196:	f04f 0200 	mov.w	r2, #0
 801d19a:	f04f 0300 	mov.w	r3, #0
 801d19e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801d1a2:	4649      	mov	r1, r9
 801d1a4:	008b      	lsls	r3, r1, #2
 801d1a6:	4641      	mov	r1, r8
 801d1a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801d1ac:	4641      	mov	r1, r8
 801d1ae:	008a      	lsls	r2, r1, #2
 801d1b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801d1b4:	f7e3 fd68 	bl	8000c88 <__aeabi_uldivmod>
 801d1b8:	4602      	mov	r2, r0
 801d1ba:	460b      	mov	r3, r1
 801d1bc:	4b0d      	ldr	r3, [pc, #52]	; (801d1f4 <UART_SetConfig+0x4e4>)
 801d1be:	fba3 1302 	umull	r1, r3, r3, r2
 801d1c2:	095b      	lsrs	r3, r3, #5
 801d1c4:	2164      	movs	r1, #100	; 0x64
 801d1c6:	fb01 f303 	mul.w	r3, r1, r3
 801d1ca:	1ad3      	subs	r3, r2, r3
 801d1cc:	011b      	lsls	r3, r3, #4
 801d1ce:	3332      	adds	r3, #50	; 0x32
 801d1d0:	4a08      	ldr	r2, [pc, #32]	; (801d1f4 <UART_SetConfig+0x4e4>)
 801d1d2:	fba2 2303 	umull	r2, r3, r2, r3
 801d1d6:	095b      	lsrs	r3, r3, #5
 801d1d8:	f003 020f 	and.w	r2, r3, #15
 801d1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	4422      	add	r2, r4
 801d1e4:	609a      	str	r2, [r3, #8]
}
 801d1e6:	bf00      	nop
 801d1e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801d1ec:	46bd      	mov	sp, r7
 801d1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d1f2:	bf00      	nop
 801d1f4:	51eb851f 	.word	0x51eb851f

0801d1f8 <round>:
 801d1f8:	ec51 0b10 	vmov	r0, r1, d0
 801d1fc:	b570      	push	{r4, r5, r6, lr}
 801d1fe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801d202:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801d206:	2c13      	cmp	r4, #19
 801d208:	ee10 2a10 	vmov	r2, s0
 801d20c:	460b      	mov	r3, r1
 801d20e:	dc19      	bgt.n	801d244 <round+0x4c>
 801d210:	2c00      	cmp	r4, #0
 801d212:	da09      	bge.n	801d228 <round+0x30>
 801d214:	3401      	adds	r4, #1
 801d216:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801d21a:	d103      	bne.n	801d224 <round+0x2c>
 801d21c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801d220:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d224:	2200      	movs	r2, #0
 801d226:	e028      	b.n	801d27a <round+0x82>
 801d228:	4d15      	ldr	r5, [pc, #84]	; (801d280 <round+0x88>)
 801d22a:	4125      	asrs	r5, r4
 801d22c:	ea01 0605 	and.w	r6, r1, r5
 801d230:	4332      	orrs	r2, r6
 801d232:	d00e      	beq.n	801d252 <round+0x5a>
 801d234:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801d238:	fa42 f404 	asr.w	r4, r2, r4
 801d23c:	4423      	add	r3, r4
 801d23e:	ea23 0305 	bic.w	r3, r3, r5
 801d242:	e7ef      	b.n	801d224 <round+0x2c>
 801d244:	2c33      	cmp	r4, #51	; 0x33
 801d246:	dd07      	ble.n	801d258 <round+0x60>
 801d248:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801d24c:	d101      	bne.n	801d252 <round+0x5a>
 801d24e:	f7e3 f81d 	bl	800028c <__adddf3>
 801d252:	ec41 0b10 	vmov	d0, r0, r1
 801d256:	bd70      	pop	{r4, r5, r6, pc}
 801d258:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801d25c:	f04f 35ff 	mov.w	r5, #4294967295
 801d260:	40f5      	lsrs	r5, r6
 801d262:	4228      	tst	r0, r5
 801d264:	d0f5      	beq.n	801d252 <round+0x5a>
 801d266:	2101      	movs	r1, #1
 801d268:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801d26c:	fa01 f404 	lsl.w	r4, r1, r4
 801d270:	1912      	adds	r2, r2, r4
 801d272:	bf28      	it	cs
 801d274:	185b      	addcs	r3, r3, r1
 801d276:	ea22 0205 	bic.w	r2, r2, r5
 801d27a:	4619      	mov	r1, r3
 801d27c:	4610      	mov	r0, r2
 801d27e:	e7e8      	b.n	801d252 <round+0x5a>
 801d280:	000fffff 	.word	0x000fffff

0801d284 <pow>:
 801d284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d286:	ed2d 8b02 	vpush	{d8}
 801d28a:	eeb0 8a40 	vmov.f32	s16, s0
 801d28e:	eef0 8a60 	vmov.f32	s17, s1
 801d292:	ec55 4b11 	vmov	r4, r5, d1
 801d296:	f000 f883 	bl	801d3a0 <__ieee754_pow>
 801d29a:	4622      	mov	r2, r4
 801d29c:	462b      	mov	r3, r5
 801d29e:	4620      	mov	r0, r4
 801d2a0:	4629      	mov	r1, r5
 801d2a2:	ec57 6b10 	vmov	r6, r7, d0
 801d2a6:	f7e3 fc41 	bl	8000b2c <__aeabi_dcmpun>
 801d2aa:	2800      	cmp	r0, #0
 801d2ac:	d13b      	bne.n	801d326 <pow+0xa2>
 801d2ae:	ec51 0b18 	vmov	r0, r1, d8
 801d2b2:	2200      	movs	r2, #0
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	f7e3 fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 801d2ba:	b1b8      	cbz	r0, 801d2ec <pow+0x68>
 801d2bc:	2200      	movs	r2, #0
 801d2be:	2300      	movs	r3, #0
 801d2c0:	4620      	mov	r0, r4
 801d2c2:	4629      	mov	r1, r5
 801d2c4:	f7e3 fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 801d2c8:	2800      	cmp	r0, #0
 801d2ca:	d146      	bne.n	801d35a <pow+0xd6>
 801d2cc:	ec45 4b10 	vmov	d0, r4, r5
 801d2d0:	f000 fe82 	bl	801dfd8 <finite>
 801d2d4:	b338      	cbz	r0, 801d326 <pow+0xa2>
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	2300      	movs	r3, #0
 801d2da:	4620      	mov	r0, r4
 801d2dc:	4629      	mov	r1, r5
 801d2de:	f7e3 fbfd 	bl	8000adc <__aeabi_dcmplt>
 801d2e2:	b300      	cbz	r0, 801d326 <pow+0xa2>
 801d2e4:	f000 ff28 	bl	801e138 <__errno>
 801d2e8:	2322      	movs	r3, #34	; 0x22
 801d2ea:	e01b      	b.n	801d324 <pow+0xa0>
 801d2ec:	ec47 6b10 	vmov	d0, r6, r7
 801d2f0:	f000 fe72 	bl	801dfd8 <finite>
 801d2f4:	b9e0      	cbnz	r0, 801d330 <pow+0xac>
 801d2f6:	eeb0 0a48 	vmov.f32	s0, s16
 801d2fa:	eef0 0a68 	vmov.f32	s1, s17
 801d2fe:	f000 fe6b 	bl	801dfd8 <finite>
 801d302:	b1a8      	cbz	r0, 801d330 <pow+0xac>
 801d304:	ec45 4b10 	vmov	d0, r4, r5
 801d308:	f000 fe66 	bl	801dfd8 <finite>
 801d30c:	b180      	cbz	r0, 801d330 <pow+0xac>
 801d30e:	4632      	mov	r2, r6
 801d310:	463b      	mov	r3, r7
 801d312:	4630      	mov	r0, r6
 801d314:	4639      	mov	r1, r7
 801d316:	f7e3 fc09 	bl	8000b2c <__aeabi_dcmpun>
 801d31a:	2800      	cmp	r0, #0
 801d31c:	d0e2      	beq.n	801d2e4 <pow+0x60>
 801d31e:	f000 ff0b 	bl	801e138 <__errno>
 801d322:	2321      	movs	r3, #33	; 0x21
 801d324:	6003      	str	r3, [r0, #0]
 801d326:	ecbd 8b02 	vpop	{d8}
 801d32a:	ec47 6b10 	vmov	d0, r6, r7
 801d32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d330:	2200      	movs	r2, #0
 801d332:	2300      	movs	r3, #0
 801d334:	4630      	mov	r0, r6
 801d336:	4639      	mov	r1, r7
 801d338:	f7e3 fbc6 	bl	8000ac8 <__aeabi_dcmpeq>
 801d33c:	2800      	cmp	r0, #0
 801d33e:	d0f2      	beq.n	801d326 <pow+0xa2>
 801d340:	eeb0 0a48 	vmov.f32	s0, s16
 801d344:	eef0 0a68 	vmov.f32	s1, s17
 801d348:	f000 fe46 	bl	801dfd8 <finite>
 801d34c:	2800      	cmp	r0, #0
 801d34e:	d0ea      	beq.n	801d326 <pow+0xa2>
 801d350:	ec45 4b10 	vmov	d0, r4, r5
 801d354:	f000 fe40 	bl	801dfd8 <finite>
 801d358:	e7c3      	b.n	801d2e2 <pow+0x5e>
 801d35a:	4f01      	ldr	r7, [pc, #4]	; (801d360 <pow+0xdc>)
 801d35c:	2600      	movs	r6, #0
 801d35e:	e7e2      	b.n	801d326 <pow+0xa2>
 801d360:	3ff00000 	.word	0x3ff00000

0801d364 <sqrtf>:
 801d364:	b508      	push	{r3, lr}
 801d366:	ed2d 8b02 	vpush	{d8}
 801d36a:	eeb0 8a40 	vmov.f32	s16, s0
 801d36e:	f000 fdf7 	bl	801df60 <__ieee754_sqrtf>
 801d372:	eeb4 8a48 	vcmp.f32	s16, s16
 801d376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d37a:	d60c      	bvs.n	801d396 <sqrtf+0x32>
 801d37c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801d39c <sqrtf+0x38>
 801d380:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801d384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d388:	d505      	bpl.n	801d396 <sqrtf+0x32>
 801d38a:	f000 fed5 	bl	801e138 <__errno>
 801d38e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801d392:	2321      	movs	r3, #33	; 0x21
 801d394:	6003      	str	r3, [r0, #0]
 801d396:	ecbd 8b02 	vpop	{d8}
 801d39a:	bd08      	pop	{r3, pc}
 801d39c:	00000000 	.word	0x00000000

0801d3a0 <__ieee754_pow>:
 801d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3a4:	ed2d 8b06 	vpush	{d8-d10}
 801d3a8:	b089      	sub	sp, #36	; 0x24
 801d3aa:	ed8d 1b00 	vstr	d1, [sp]
 801d3ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 801d3b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801d3b6:	ea58 0102 	orrs.w	r1, r8, r2
 801d3ba:	ec57 6b10 	vmov	r6, r7, d0
 801d3be:	d115      	bne.n	801d3ec <__ieee754_pow+0x4c>
 801d3c0:	19b3      	adds	r3, r6, r6
 801d3c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801d3c6:	4152      	adcs	r2, r2
 801d3c8:	4299      	cmp	r1, r3
 801d3ca:	4b89      	ldr	r3, [pc, #548]	; (801d5f0 <__ieee754_pow+0x250>)
 801d3cc:	4193      	sbcs	r3, r2
 801d3ce:	f080 84d2 	bcs.w	801dd76 <__ieee754_pow+0x9d6>
 801d3d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d3d6:	4630      	mov	r0, r6
 801d3d8:	4639      	mov	r1, r7
 801d3da:	f7e2 ff57 	bl	800028c <__adddf3>
 801d3de:	ec41 0b10 	vmov	d0, r0, r1
 801d3e2:	b009      	add	sp, #36	; 0x24
 801d3e4:	ecbd 8b06 	vpop	{d8-d10}
 801d3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ec:	4b81      	ldr	r3, [pc, #516]	; (801d5f4 <__ieee754_pow+0x254>)
 801d3ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801d3f2:	429c      	cmp	r4, r3
 801d3f4:	ee10 aa10 	vmov	sl, s0
 801d3f8:	463d      	mov	r5, r7
 801d3fa:	dc06      	bgt.n	801d40a <__ieee754_pow+0x6a>
 801d3fc:	d101      	bne.n	801d402 <__ieee754_pow+0x62>
 801d3fe:	2e00      	cmp	r6, #0
 801d400:	d1e7      	bne.n	801d3d2 <__ieee754_pow+0x32>
 801d402:	4598      	cmp	r8, r3
 801d404:	dc01      	bgt.n	801d40a <__ieee754_pow+0x6a>
 801d406:	d10f      	bne.n	801d428 <__ieee754_pow+0x88>
 801d408:	b172      	cbz	r2, 801d428 <__ieee754_pow+0x88>
 801d40a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801d40e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801d412:	ea55 050a 	orrs.w	r5, r5, sl
 801d416:	d1dc      	bne.n	801d3d2 <__ieee754_pow+0x32>
 801d418:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d41c:	18db      	adds	r3, r3, r3
 801d41e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801d422:	4152      	adcs	r2, r2
 801d424:	429d      	cmp	r5, r3
 801d426:	e7d0      	b.n	801d3ca <__ieee754_pow+0x2a>
 801d428:	2d00      	cmp	r5, #0
 801d42a:	da3b      	bge.n	801d4a4 <__ieee754_pow+0x104>
 801d42c:	4b72      	ldr	r3, [pc, #456]	; (801d5f8 <__ieee754_pow+0x258>)
 801d42e:	4598      	cmp	r8, r3
 801d430:	dc51      	bgt.n	801d4d6 <__ieee754_pow+0x136>
 801d432:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801d436:	4598      	cmp	r8, r3
 801d438:	f340 84ac 	ble.w	801dd94 <__ieee754_pow+0x9f4>
 801d43c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801d440:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d444:	2b14      	cmp	r3, #20
 801d446:	dd0f      	ble.n	801d468 <__ieee754_pow+0xc8>
 801d448:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801d44c:	fa22 f103 	lsr.w	r1, r2, r3
 801d450:	fa01 f303 	lsl.w	r3, r1, r3
 801d454:	4293      	cmp	r3, r2
 801d456:	f040 849d 	bne.w	801dd94 <__ieee754_pow+0x9f4>
 801d45a:	f001 0101 	and.w	r1, r1, #1
 801d45e:	f1c1 0302 	rsb	r3, r1, #2
 801d462:	9304      	str	r3, [sp, #16]
 801d464:	b182      	cbz	r2, 801d488 <__ieee754_pow+0xe8>
 801d466:	e05f      	b.n	801d528 <__ieee754_pow+0x188>
 801d468:	2a00      	cmp	r2, #0
 801d46a:	d15b      	bne.n	801d524 <__ieee754_pow+0x184>
 801d46c:	f1c3 0314 	rsb	r3, r3, #20
 801d470:	fa48 f103 	asr.w	r1, r8, r3
 801d474:	fa01 f303 	lsl.w	r3, r1, r3
 801d478:	4543      	cmp	r3, r8
 801d47a:	f040 8488 	bne.w	801dd8e <__ieee754_pow+0x9ee>
 801d47e:	f001 0101 	and.w	r1, r1, #1
 801d482:	f1c1 0302 	rsb	r3, r1, #2
 801d486:	9304      	str	r3, [sp, #16]
 801d488:	4b5c      	ldr	r3, [pc, #368]	; (801d5fc <__ieee754_pow+0x25c>)
 801d48a:	4598      	cmp	r8, r3
 801d48c:	d132      	bne.n	801d4f4 <__ieee754_pow+0x154>
 801d48e:	f1b9 0f00 	cmp.w	r9, #0
 801d492:	f280 8478 	bge.w	801dd86 <__ieee754_pow+0x9e6>
 801d496:	4959      	ldr	r1, [pc, #356]	; (801d5fc <__ieee754_pow+0x25c>)
 801d498:	4632      	mov	r2, r6
 801d49a:	463b      	mov	r3, r7
 801d49c:	2000      	movs	r0, #0
 801d49e:	f7e3 f9d5 	bl	800084c <__aeabi_ddiv>
 801d4a2:	e79c      	b.n	801d3de <__ieee754_pow+0x3e>
 801d4a4:	2300      	movs	r3, #0
 801d4a6:	9304      	str	r3, [sp, #16]
 801d4a8:	2a00      	cmp	r2, #0
 801d4aa:	d13d      	bne.n	801d528 <__ieee754_pow+0x188>
 801d4ac:	4b51      	ldr	r3, [pc, #324]	; (801d5f4 <__ieee754_pow+0x254>)
 801d4ae:	4598      	cmp	r8, r3
 801d4b0:	d1ea      	bne.n	801d488 <__ieee754_pow+0xe8>
 801d4b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801d4b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801d4ba:	ea53 030a 	orrs.w	r3, r3, sl
 801d4be:	f000 845a 	beq.w	801dd76 <__ieee754_pow+0x9d6>
 801d4c2:	4b4f      	ldr	r3, [pc, #316]	; (801d600 <__ieee754_pow+0x260>)
 801d4c4:	429c      	cmp	r4, r3
 801d4c6:	dd08      	ble.n	801d4da <__ieee754_pow+0x13a>
 801d4c8:	f1b9 0f00 	cmp.w	r9, #0
 801d4cc:	f2c0 8457 	blt.w	801dd7e <__ieee754_pow+0x9de>
 801d4d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d4d4:	e783      	b.n	801d3de <__ieee754_pow+0x3e>
 801d4d6:	2302      	movs	r3, #2
 801d4d8:	e7e5      	b.n	801d4a6 <__ieee754_pow+0x106>
 801d4da:	f1b9 0f00 	cmp.w	r9, #0
 801d4de:	f04f 0000 	mov.w	r0, #0
 801d4e2:	f04f 0100 	mov.w	r1, #0
 801d4e6:	f6bf af7a 	bge.w	801d3de <__ieee754_pow+0x3e>
 801d4ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 801d4ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801d4f2:	e774      	b.n	801d3de <__ieee754_pow+0x3e>
 801d4f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801d4f8:	d106      	bne.n	801d508 <__ieee754_pow+0x168>
 801d4fa:	4632      	mov	r2, r6
 801d4fc:	463b      	mov	r3, r7
 801d4fe:	4630      	mov	r0, r6
 801d500:	4639      	mov	r1, r7
 801d502:	f7e3 f879 	bl	80005f8 <__aeabi_dmul>
 801d506:	e76a      	b.n	801d3de <__ieee754_pow+0x3e>
 801d508:	4b3e      	ldr	r3, [pc, #248]	; (801d604 <__ieee754_pow+0x264>)
 801d50a:	4599      	cmp	r9, r3
 801d50c:	d10c      	bne.n	801d528 <__ieee754_pow+0x188>
 801d50e:	2d00      	cmp	r5, #0
 801d510:	db0a      	blt.n	801d528 <__ieee754_pow+0x188>
 801d512:	ec47 6b10 	vmov	d0, r6, r7
 801d516:	b009      	add	sp, #36	; 0x24
 801d518:	ecbd 8b06 	vpop	{d8-d10}
 801d51c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d520:	f000 bc6c 	b.w	801ddfc <__ieee754_sqrt>
 801d524:	2300      	movs	r3, #0
 801d526:	9304      	str	r3, [sp, #16]
 801d528:	ec47 6b10 	vmov	d0, r6, r7
 801d52c:	f000 fd4b 	bl	801dfc6 <fabs>
 801d530:	ec51 0b10 	vmov	r0, r1, d0
 801d534:	f1ba 0f00 	cmp.w	sl, #0
 801d538:	d129      	bne.n	801d58e <__ieee754_pow+0x1ee>
 801d53a:	b124      	cbz	r4, 801d546 <__ieee754_pow+0x1a6>
 801d53c:	4b2f      	ldr	r3, [pc, #188]	; (801d5fc <__ieee754_pow+0x25c>)
 801d53e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801d542:	429a      	cmp	r2, r3
 801d544:	d123      	bne.n	801d58e <__ieee754_pow+0x1ee>
 801d546:	f1b9 0f00 	cmp.w	r9, #0
 801d54a:	da05      	bge.n	801d558 <__ieee754_pow+0x1b8>
 801d54c:	4602      	mov	r2, r0
 801d54e:	460b      	mov	r3, r1
 801d550:	2000      	movs	r0, #0
 801d552:	492a      	ldr	r1, [pc, #168]	; (801d5fc <__ieee754_pow+0x25c>)
 801d554:	f7e3 f97a 	bl	800084c <__aeabi_ddiv>
 801d558:	2d00      	cmp	r5, #0
 801d55a:	f6bf af40 	bge.w	801d3de <__ieee754_pow+0x3e>
 801d55e:	9b04      	ldr	r3, [sp, #16]
 801d560:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801d564:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d568:	4323      	orrs	r3, r4
 801d56a:	d108      	bne.n	801d57e <__ieee754_pow+0x1de>
 801d56c:	4602      	mov	r2, r0
 801d56e:	460b      	mov	r3, r1
 801d570:	4610      	mov	r0, r2
 801d572:	4619      	mov	r1, r3
 801d574:	f7e2 fe88 	bl	8000288 <__aeabi_dsub>
 801d578:	4602      	mov	r2, r0
 801d57a:	460b      	mov	r3, r1
 801d57c:	e78f      	b.n	801d49e <__ieee754_pow+0xfe>
 801d57e:	9b04      	ldr	r3, [sp, #16]
 801d580:	2b01      	cmp	r3, #1
 801d582:	f47f af2c 	bne.w	801d3de <__ieee754_pow+0x3e>
 801d586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d58a:	4619      	mov	r1, r3
 801d58c:	e727      	b.n	801d3de <__ieee754_pow+0x3e>
 801d58e:	0feb      	lsrs	r3, r5, #31
 801d590:	3b01      	subs	r3, #1
 801d592:	9306      	str	r3, [sp, #24]
 801d594:	9a06      	ldr	r2, [sp, #24]
 801d596:	9b04      	ldr	r3, [sp, #16]
 801d598:	4313      	orrs	r3, r2
 801d59a:	d102      	bne.n	801d5a2 <__ieee754_pow+0x202>
 801d59c:	4632      	mov	r2, r6
 801d59e:	463b      	mov	r3, r7
 801d5a0:	e7e6      	b.n	801d570 <__ieee754_pow+0x1d0>
 801d5a2:	4b19      	ldr	r3, [pc, #100]	; (801d608 <__ieee754_pow+0x268>)
 801d5a4:	4598      	cmp	r8, r3
 801d5a6:	f340 80fb 	ble.w	801d7a0 <__ieee754_pow+0x400>
 801d5aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801d5ae:	4598      	cmp	r8, r3
 801d5b0:	4b13      	ldr	r3, [pc, #76]	; (801d600 <__ieee754_pow+0x260>)
 801d5b2:	dd0c      	ble.n	801d5ce <__ieee754_pow+0x22e>
 801d5b4:	429c      	cmp	r4, r3
 801d5b6:	dc0f      	bgt.n	801d5d8 <__ieee754_pow+0x238>
 801d5b8:	f1b9 0f00 	cmp.w	r9, #0
 801d5bc:	da0f      	bge.n	801d5de <__ieee754_pow+0x23e>
 801d5be:	2000      	movs	r0, #0
 801d5c0:	b009      	add	sp, #36	; 0x24
 801d5c2:	ecbd 8b06 	vpop	{d8-d10}
 801d5c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ca:	f000 bcf3 	b.w	801dfb4 <__math_oflow>
 801d5ce:	429c      	cmp	r4, r3
 801d5d0:	dbf2      	blt.n	801d5b8 <__ieee754_pow+0x218>
 801d5d2:	4b0a      	ldr	r3, [pc, #40]	; (801d5fc <__ieee754_pow+0x25c>)
 801d5d4:	429c      	cmp	r4, r3
 801d5d6:	dd19      	ble.n	801d60c <__ieee754_pow+0x26c>
 801d5d8:	f1b9 0f00 	cmp.w	r9, #0
 801d5dc:	dcef      	bgt.n	801d5be <__ieee754_pow+0x21e>
 801d5de:	2000      	movs	r0, #0
 801d5e0:	b009      	add	sp, #36	; 0x24
 801d5e2:	ecbd 8b06 	vpop	{d8-d10}
 801d5e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ea:	f000 bcda 	b.w	801dfa2 <__math_uflow>
 801d5ee:	bf00      	nop
 801d5f0:	fff00000 	.word	0xfff00000
 801d5f4:	7ff00000 	.word	0x7ff00000
 801d5f8:	433fffff 	.word	0x433fffff
 801d5fc:	3ff00000 	.word	0x3ff00000
 801d600:	3fefffff 	.word	0x3fefffff
 801d604:	3fe00000 	.word	0x3fe00000
 801d608:	41e00000 	.word	0x41e00000
 801d60c:	4b60      	ldr	r3, [pc, #384]	; (801d790 <__ieee754_pow+0x3f0>)
 801d60e:	2200      	movs	r2, #0
 801d610:	f7e2 fe3a 	bl	8000288 <__aeabi_dsub>
 801d614:	a354      	add	r3, pc, #336	; (adr r3, 801d768 <__ieee754_pow+0x3c8>)
 801d616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d61a:	4604      	mov	r4, r0
 801d61c:	460d      	mov	r5, r1
 801d61e:	f7e2 ffeb 	bl	80005f8 <__aeabi_dmul>
 801d622:	a353      	add	r3, pc, #332	; (adr r3, 801d770 <__ieee754_pow+0x3d0>)
 801d624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d628:	4606      	mov	r6, r0
 801d62a:	460f      	mov	r7, r1
 801d62c:	4620      	mov	r0, r4
 801d62e:	4629      	mov	r1, r5
 801d630:	f7e2 ffe2 	bl	80005f8 <__aeabi_dmul>
 801d634:	4b57      	ldr	r3, [pc, #348]	; (801d794 <__ieee754_pow+0x3f4>)
 801d636:	4682      	mov	sl, r0
 801d638:	468b      	mov	fp, r1
 801d63a:	2200      	movs	r2, #0
 801d63c:	4620      	mov	r0, r4
 801d63e:	4629      	mov	r1, r5
 801d640:	f7e2 ffda 	bl	80005f8 <__aeabi_dmul>
 801d644:	4602      	mov	r2, r0
 801d646:	460b      	mov	r3, r1
 801d648:	a14b      	add	r1, pc, #300	; (adr r1, 801d778 <__ieee754_pow+0x3d8>)
 801d64a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d64e:	f7e2 fe1b 	bl	8000288 <__aeabi_dsub>
 801d652:	4622      	mov	r2, r4
 801d654:	462b      	mov	r3, r5
 801d656:	f7e2 ffcf 	bl	80005f8 <__aeabi_dmul>
 801d65a:	4602      	mov	r2, r0
 801d65c:	460b      	mov	r3, r1
 801d65e:	2000      	movs	r0, #0
 801d660:	494d      	ldr	r1, [pc, #308]	; (801d798 <__ieee754_pow+0x3f8>)
 801d662:	f7e2 fe11 	bl	8000288 <__aeabi_dsub>
 801d666:	4622      	mov	r2, r4
 801d668:	4680      	mov	r8, r0
 801d66a:	4689      	mov	r9, r1
 801d66c:	462b      	mov	r3, r5
 801d66e:	4620      	mov	r0, r4
 801d670:	4629      	mov	r1, r5
 801d672:	f7e2 ffc1 	bl	80005f8 <__aeabi_dmul>
 801d676:	4602      	mov	r2, r0
 801d678:	460b      	mov	r3, r1
 801d67a:	4640      	mov	r0, r8
 801d67c:	4649      	mov	r1, r9
 801d67e:	f7e2 ffbb 	bl	80005f8 <__aeabi_dmul>
 801d682:	a33f      	add	r3, pc, #252	; (adr r3, 801d780 <__ieee754_pow+0x3e0>)
 801d684:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d688:	f7e2 ffb6 	bl	80005f8 <__aeabi_dmul>
 801d68c:	4602      	mov	r2, r0
 801d68e:	460b      	mov	r3, r1
 801d690:	4650      	mov	r0, sl
 801d692:	4659      	mov	r1, fp
 801d694:	f7e2 fdf8 	bl	8000288 <__aeabi_dsub>
 801d698:	4602      	mov	r2, r0
 801d69a:	460b      	mov	r3, r1
 801d69c:	4680      	mov	r8, r0
 801d69e:	4689      	mov	r9, r1
 801d6a0:	4630      	mov	r0, r6
 801d6a2:	4639      	mov	r1, r7
 801d6a4:	f7e2 fdf2 	bl	800028c <__adddf3>
 801d6a8:	2000      	movs	r0, #0
 801d6aa:	4632      	mov	r2, r6
 801d6ac:	463b      	mov	r3, r7
 801d6ae:	4604      	mov	r4, r0
 801d6b0:	460d      	mov	r5, r1
 801d6b2:	f7e2 fde9 	bl	8000288 <__aeabi_dsub>
 801d6b6:	4602      	mov	r2, r0
 801d6b8:	460b      	mov	r3, r1
 801d6ba:	4640      	mov	r0, r8
 801d6bc:	4649      	mov	r1, r9
 801d6be:	f7e2 fde3 	bl	8000288 <__aeabi_dsub>
 801d6c2:	9b04      	ldr	r3, [sp, #16]
 801d6c4:	9a06      	ldr	r2, [sp, #24]
 801d6c6:	3b01      	subs	r3, #1
 801d6c8:	4313      	orrs	r3, r2
 801d6ca:	4682      	mov	sl, r0
 801d6cc:	468b      	mov	fp, r1
 801d6ce:	f040 81e7 	bne.w	801daa0 <__ieee754_pow+0x700>
 801d6d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d788 <__ieee754_pow+0x3e8>
 801d6d6:	eeb0 8a47 	vmov.f32	s16, s14
 801d6da:	eef0 8a67 	vmov.f32	s17, s15
 801d6de:	e9dd 6700 	ldrd	r6, r7, [sp]
 801d6e2:	2600      	movs	r6, #0
 801d6e4:	4632      	mov	r2, r6
 801d6e6:	463b      	mov	r3, r7
 801d6e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801d6ec:	f7e2 fdcc 	bl	8000288 <__aeabi_dsub>
 801d6f0:	4622      	mov	r2, r4
 801d6f2:	462b      	mov	r3, r5
 801d6f4:	f7e2 ff80 	bl	80005f8 <__aeabi_dmul>
 801d6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d6fc:	4680      	mov	r8, r0
 801d6fe:	4689      	mov	r9, r1
 801d700:	4650      	mov	r0, sl
 801d702:	4659      	mov	r1, fp
 801d704:	f7e2 ff78 	bl	80005f8 <__aeabi_dmul>
 801d708:	4602      	mov	r2, r0
 801d70a:	460b      	mov	r3, r1
 801d70c:	4640      	mov	r0, r8
 801d70e:	4649      	mov	r1, r9
 801d710:	f7e2 fdbc 	bl	800028c <__adddf3>
 801d714:	4632      	mov	r2, r6
 801d716:	463b      	mov	r3, r7
 801d718:	4680      	mov	r8, r0
 801d71a:	4689      	mov	r9, r1
 801d71c:	4620      	mov	r0, r4
 801d71e:	4629      	mov	r1, r5
 801d720:	f7e2 ff6a 	bl	80005f8 <__aeabi_dmul>
 801d724:	460b      	mov	r3, r1
 801d726:	4604      	mov	r4, r0
 801d728:	460d      	mov	r5, r1
 801d72a:	4602      	mov	r2, r0
 801d72c:	4649      	mov	r1, r9
 801d72e:	4640      	mov	r0, r8
 801d730:	f7e2 fdac 	bl	800028c <__adddf3>
 801d734:	4b19      	ldr	r3, [pc, #100]	; (801d79c <__ieee754_pow+0x3fc>)
 801d736:	4299      	cmp	r1, r3
 801d738:	ec45 4b19 	vmov	d9, r4, r5
 801d73c:	4606      	mov	r6, r0
 801d73e:	460f      	mov	r7, r1
 801d740:	468b      	mov	fp, r1
 801d742:	f340 82f1 	ble.w	801dd28 <__ieee754_pow+0x988>
 801d746:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d74a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d74e:	4303      	orrs	r3, r0
 801d750:	f000 81e4 	beq.w	801db1c <__ieee754_pow+0x77c>
 801d754:	ec51 0b18 	vmov	r0, r1, d8
 801d758:	2200      	movs	r2, #0
 801d75a:	2300      	movs	r3, #0
 801d75c:	f7e3 f9be 	bl	8000adc <__aeabi_dcmplt>
 801d760:	3800      	subs	r0, #0
 801d762:	bf18      	it	ne
 801d764:	2001      	movne	r0, #1
 801d766:	e72b      	b.n	801d5c0 <__ieee754_pow+0x220>
 801d768:	60000000 	.word	0x60000000
 801d76c:	3ff71547 	.word	0x3ff71547
 801d770:	f85ddf44 	.word	0xf85ddf44
 801d774:	3e54ae0b 	.word	0x3e54ae0b
 801d778:	55555555 	.word	0x55555555
 801d77c:	3fd55555 	.word	0x3fd55555
 801d780:	652b82fe 	.word	0x652b82fe
 801d784:	3ff71547 	.word	0x3ff71547
 801d788:	00000000 	.word	0x00000000
 801d78c:	bff00000 	.word	0xbff00000
 801d790:	3ff00000 	.word	0x3ff00000
 801d794:	3fd00000 	.word	0x3fd00000
 801d798:	3fe00000 	.word	0x3fe00000
 801d79c:	408fffff 	.word	0x408fffff
 801d7a0:	4bd5      	ldr	r3, [pc, #852]	; (801daf8 <__ieee754_pow+0x758>)
 801d7a2:	402b      	ands	r3, r5
 801d7a4:	2200      	movs	r2, #0
 801d7a6:	b92b      	cbnz	r3, 801d7b4 <__ieee754_pow+0x414>
 801d7a8:	4bd4      	ldr	r3, [pc, #848]	; (801dafc <__ieee754_pow+0x75c>)
 801d7aa:	f7e2 ff25 	bl	80005f8 <__aeabi_dmul>
 801d7ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d7b2:	460c      	mov	r4, r1
 801d7b4:	1523      	asrs	r3, r4, #20
 801d7b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d7ba:	4413      	add	r3, r2
 801d7bc:	9305      	str	r3, [sp, #20]
 801d7be:	4bd0      	ldr	r3, [pc, #832]	; (801db00 <__ieee754_pow+0x760>)
 801d7c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d7c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d7c8:	429c      	cmp	r4, r3
 801d7ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d7ce:	dd08      	ble.n	801d7e2 <__ieee754_pow+0x442>
 801d7d0:	4bcc      	ldr	r3, [pc, #816]	; (801db04 <__ieee754_pow+0x764>)
 801d7d2:	429c      	cmp	r4, r3
 801d7d4:	f340 8162 	ble.w	801da9c <__ieee754_pow+0x6fc>
 801d7d8:	9b05      	ldr	r3, [sp, #20]
 801d7da:	3301      	adds	r3, #1
 801d7dc:	9305      	str	r3, [sp, #20]
 801d7de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d7e2:	2400      	movs	r4, #0
 801d7e4:	00e3      	lsls	r3, r4, #3
 801d7e6:	9307      	str	r3, [sp, #28]
 801d7e8:	4bc7      	ldr	r3, [pc, #796]	; (801db08 <__ieee754_pow+0x768>)
 801d7ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d7ee:	ed93 7b00 	vldr	d7, [r3]
 801d7f2:	4629      	mov	r1, r5
 801d7f4:	ec53 2b17 	vmov	r2, r3, d7
 801d7f8:	eeb0 9a47 	vmov.f32	s18, s14
 801d7fc:	eef0 9a67 	vmov.f32	s19, s15
 801d800:	4682      	mov	sl, r0
 801d802:	f7e2 fd41 	bl	8000288 <__aeabi_dsub>
 801d806:	4652      	mov	r2, sl
 801d808:	4606      	mov	r6, r0
 801d80a:	460f      	mov	r7, r1
 801d80c:	462b      	mov	r3, r5
 801d80e:	ec51 0b19 	vmov	r0, r1, d9
 801d812:	f7e2 fd3b 	bl	800028c <__adddf3>
 801d816:	4602      	mov	r2, r0
 801d818:	460b      	mov	r3, r1
 801d81a:	2000      	movs	r0, #0
 801d81c:	49bb      	ldr	r1, [pc, #748]	; (801db0c <__ieee754_pow+0x76c>)
 801d81e:	f7e3 f815 	bl	800084c <__aeabi_ddiv>
 801d822:	ec41 0b1a 	vmov	d10, r0, r1
 801d826:	4602      	mov	r2, r0
 801d828:	460b      	mov	r3, r1
 801d82a:	4630      	mov	r0, r6
 801d82c:	4639      	mov	r1, r7
 801d82e:	f7e2 fee3 	bl	80005f8 <__aeabi_dmul>
 801d832:	2300      	movs	r3, #0
 801d834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d838:	9302      	str	r3, [sp, #8]
 801d83a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d83e:	46ab      	mov	fp, r5
 801d840:	106d      	asrs	r5, r5, #1
 801d842:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d846:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d84a:	ec41 0b18 	vmov	d8, r0, r1
 801d84e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d852:	2200      	movs	r2, #0
 801d854:	4640      	mov	r0, r8
 801d856:	4649      	mov	r1, r9
 801d858:	4614      	mov	r4, r2
 801d85a:	461d      	mov	r5, r3
 801d85c:	f7e2 fecc 	bl	80005f8 <__aeabi_dmul>
 801d860:	4602      	mov	r2, r0
 801d862:	460b      	mov	r3, r1
 801d864:	4630      	mov	r0, r6
 801d866:	4639      	mov	r1, r7
 801d868:	f7e2 fd0e 	bl	8000288 <__aeabi_dsub>
 801d86c:	ec53 2b19 	vmov	r2, r3, d9
 801d870:	4606      	mov	r6, r0
 801d872:	460f      	mov	r7, r1
 801d874:	4620      	mov	r0, r4
 801d876:	4629      	mov	r1, r5
 801d878:	f7e2 fd06 	bl	8000288 <__aeabi_dsub>
 801d87c:	4602      	mov	r2, r0
 801d87e:	460b      	mov	r3, r1
 801d880:	4650      	mov	r0, sl
 801d882:	4659      	mov	r1, fp
 801d884:	f7e2 fd00 	bl	8000288 <__aeabi_dsub>
 801d888:	4642      	mov	r2, r8
 801d88a:	464b      	mov	r3, r9
 801d88c:	f7e2 feb4 	bl	80005f8 <__aeabi_dmul>
 801d890:	4602      	mov	r2, r0
 801d892:	460b      	mov	r3, r1
 801d894:	4630      	mov	r0, r6
 801d896:	4639      	mov	r1, r7
 801d898:	f7e2 fcf6 	bl	8000288 <__aeabi_dsub>
 801d89c:	ec53 2b1a 	vmov	r2, r3, d10
 801d8a0:	f7e2 feaa 	bl	80005f8 <__aeabi_dmul>
 801d8a4:	ec53 2b18 	vmov	r2, r3, d8
 801d8a8:	ec41 0b19 	vmov	d9, r0, r1
 801d8ac:	ec51 0b18 	vmov	r0, r1, d8
 801d8b0:	f7e2 fea2 	bl	80005f8 <__aeabi_dmul>
 801d8b4:	a37c      	add	r3, pc, #496	; (adr r3, 801daa8 <__ieee754_pow+0x708>)
 801d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ba:	4604      	mov	r4, r0
 801d8bc:	460d      	mov	r5, r1
 801d8be:	f7e2 fe9b 	bl	80005f8 <__aeabi_dmul>
 801d8c2:	a37b      	add	r3, pc, #492	; (adr r3, 801dab0 <__ieee754_pow+0x710>)
 801d8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8c8:	f7e2 fce0 	bl	800028c <__adddf3>
 801d8cc:	4622      	mov	r2, r4
 801d8ce:	462b      	mov	r3, r5
 801d8d0:	f7e2 fe92 	bl	80005f8 <__aeabi_dmul>
 801d8d4:	a378      	add	r3, pc, #480	; (adr r3, 801dab8 <__ieee754_pow+0x718>)
 801d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8da:	f7e2 fcd7 	bl	800028c <__adddf3>
 801d8de:	4622      	mov	r2, r4
 801d8e0:	462b      	mov	r3, r5
 801d8e2:	f7e2 fe89 	bl	80005f8 <__aeabi_dmul>
 801d8e6:	a376      	add	r3, pc, #472	; (adr r3, 801dac0 <__ieee754_pow+0x720>)
 801d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ec:	f7e2 fcce 	bl	800028c <__adddf3>
 801d8f0:	4622      	mov	r2, r4
 801d8f2:	462b      	mov	r3, r5
 801d8f4:	f7e2 fe80 	bl	80005f8 <__aeabi_dmul>
 801d8f8:	a373      	add	r3, pc, #460	; (adr r3, 801dac8 <__ieee754_pow+0x728>)
 801d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8fe:	f7e2 fcc5 	bl	800028c <__adddf3>
 801d902:	4622      	mov	r2, r4
 801d904:	462b      	mov	r3, r5
 801d906:	f7e2 fe77 	bl	80005f8 <__aeabi_dmul>
 801d90a:	a371      	add	r3, pc, #452	; (adr r3, 801dad0 <__ieee754_pow+0x730>)
 801d90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d910:	f7e2 fcbc 	bl	800028c <__adddf3>
 801d914:	4622      	mov	r2, r4
 801d916:	4606      	mov	r6, r0
 801d918:	460f      	mov	r7, r1
 801d91a:	462b      	mov	r3, r5
 801d91c:	4620      	mov	r0, r4
 801d91e:	4629      	mov	r1, r5
 801d920:	f7e2 fe6a 	bl	80005f8 <__aeabi_dmul>
 801d924:	4602      	mov	r2, r0
 801d926:	460b      	mov	r3, r1
 801d928:	4630      	mov	r0, r6
 801d92a:	4639      	mov	r1, r7
 801d92c:	f7e2 fe64 	bl	80005f8 <__aeabi_dmul>
 801d930:	4642      	mov	r2, r8
 801d932:	4604      	mov	r4, r0
 801d934:	460d      	mov	r5, r1
 801d936:	464b      	mov	r3, r9
 801d938:	ec51 0b18 	vmov	r0, r1, d8
 801d93c:	f7e2 fca6 	bl	800028c <__adddf3>
 801d940:	ec53 2b19 	vmov	r2, r3, d9
 801d944:	f7e2 fe58 	bl	80005f8 <__aeabi_dmul>
 801d948:	4622      	mov	r2, r4
 801d94a:	462b      	mov	r3, r5
 801d94c:	f7e2 fc9e 	bl	800028c <__adddf3>
 801d950:	4642      	mov	r2, r8
 801d952:	4682      	mov	sl, r0
 801d954:	468b      	mov	fp, r1
 801d956:	464b      	mov	r3, r9
 801d958:	4640      	mov	r0, r8
 801d95a:	4649      	mov	r1, r9
 801d95c:	f7e2 fe4c 	bl	80005f8 <__aeabi_dmul>
 801d960:	4b6b      	ldr	r3, [pc, #428]	; (801db10 <__ieee754_pow+0x770>)
 801d962:	2200      	movs	r2, #0
 801d964:	4606      	mov	r6, r0
 801d966:	460f      	mov	r7, r1
 801d968:	f7e2 fc90 	bl	800028c <__adddf3>
 801d96c:	4652      	mov	r2, sl
 801d96e:	465b      	mov	r3, fp
 801d970:	f7e2 fc8c 	bl	800028c <__adddf3>
 801d974:	2000      	movs	r0, #0
 801d976:	4604      	mov	r4, r0
 801d978:	460d      	mov	r5, r1
 801d97a:	4602      	mov	r2, r0
 801d97c:	460b      	mov	r3, r1
 801d97e:	4640      	mov	r0, r8
 801d980:	4649      	mov	r1, r9
 801d982:	f7e2 fe39 	bl	80005f8 <__aeabi_dmul>
 801d986:	4b62      	ldr	r3, [pc, #392]	; (801db10 <__ieee754_pow+0x770>)
 801d988:	4680      	mov	r8, r0
 801d98a:	4689      	mov	r9, r1
 801d98c:	2200      	movs	r2, #0
 801d98e:	4620      	mov	r0, r4
 801d990:	4629      	mov	r1, r5
 801d992:	f7e2 fc79 	bl	8000288 <__aeabi_dsub>
 801d996:	4632      	mov	r2, r6
 801d998:	463b      	mov	r3, r7
 801d99a:	f7e2 fc75 	bl	8000288 <__aeabi_dsub>
 801d99e:	4602      	mov	r2, r0
 801d9a0:	460b      	mov	r3, r1
 801d9a2:	4650      	mov	r0, sl
 801d9a4:	4659      	mov	r1, fp
 801d9a6:	f7e2 fc6f 	bl	8000288 <__aeabi_dsub>
 801d9aa:	ec53 2b18 	vmov	r2, r3, d8
 801d9ae:	f7e2 fe23 	bl	80005f8 <__aeabi_dmul>
 801d9b2:	4622      	mov	r2, r4
 801d9b4:	4606      	mov	r6, r0
 801d9b6:	460f      	mov	r7, r1
 801d9b8:	462b      	mov	r3, r5
 801d9ba:	ec51 0b19 	vmov	r0, r1, d9
 801d9be:	f7e2 fe1b 	bl	80005f8 <__aeabi_dmul>
 801d9c2:	4602      	mov	r2, r0
 801d9c4:	460b      	mov	r3, r1
 801d9c6:	4630      	mov	r0, r6
 801d9c8:	4639      	mov	r1, r7
 801d9ca:	f7e2 fc5f 	bl	800028c <__adddf3>
 801d9ce:	4606      	mov	r6, r0
 801d9d0:	460f      	mov	r7, r1
 801d9d2:	4602      	mov	r2, r0
 801d9d4:	460b      	mov	r3, r1
 801d9d6:	4640      	mov	r0, r8
 801d9d8:	4649      	mov	r1, r9
 801d9da:	f7e2 fc57 	bl	800028c <__adddf3>
 801d9de:	a33e      	add	r3, pc, #248	; (adr r3, 801dad8 <__ieee754_pow+0x738>)
 801d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9e4:	2000      	movs	r0, #0
 801d9e6:	4604      	mov	r4, r0
 801d9e8:	460d      	mov	r5, r1
 801d9ea:	f7e2 fe05 	bl	80005f8 <__aeabi_dmul>
 801d9ee:	4642      	mov	r2, r8
 801d9f0:	ec41 0b18 	vmov	d8, r0, r1
 801d9f4:	464b      	mov	r3, r9
 801d9f6:	4620      	mov	r0, r4
 801d9f8:	4629      	mov	r1, r5
 801d9fa:	f7e2 fc45 	bl	8000288 <__aeabi_dsub>
 801d9fe:	4602      	mov	r2, r0
 801da00:	460b      	mov	r3, r1
 801da02:	4630      	mov	r0, r6
 801da04:	4639      	mov	r1, r7
 801da06:	f7e2 fc3f 	bl	8000288 <__aeabi_dsub>
 801da0a:	a335      	add	r3, pc, #212	; (adr r3, 801dae0 <__ieee754_pow+0x740>)
 801da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da10:	f7e2 fdf2 	bl	80005f8 <__aeabi_dmul>
 801da14:	a334      	add	r3, pc, #208	; (adr r3, 801dae8 <__ieee754_pow+0x748>)
 801da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da1a:	4606      	mov	r6, r0
 801da1c:	460f      	mov	r7, r1
 801da1e:	4620      	mov	r0, r4
 801da20:	4629      	mov	r1, r5
 801da22:	f7e2 fde9 	bl	80005f8 <__aeabi_dmul>
 801da26:	4602      	mov	r2, r0
 801da28:	460b      	mov	r3, r1
 801da2a:	4630      	mov	r0, r6
 801da2c:	4639      	mov	r1, r7
 801da2e:	f7e2 fc2d 	bl	800028c <__adddf3>
 801da32:	9a07      	ldr	r2, [sp, #28]
 801da34:	4b37      	ldr	r3, [pc, #220]	; (801db14 <__ieee754_pow+0x774>)
 801da36:	4413      	add	r3, r2
 801da38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da3c:	f7e2 fc26 	bl	800028c <__adddf3>
 801da40:	4682      	mov	sl, r0
 801da42:	9805      	ldr	r0, [sp, #20]
 801da44:	468b      	mov	fp, r1
 801da46:	f7e2 fd6d 	bl	8000524 <__aeabi_i2d>
 801da4a:	9a07      	ldr	r2, [sp, #28]
 801da4c:	4b32      	ldr	r3, [pc, #200]	; (801db18 <__ieee754_pow+0x778>)
 801da4e:	4413      	add	r3, r2
 801da50:	e9d3 8900 	ldrd	r8, r9, [r3]
 801da54:	4606      	mov	r6, r0
 801da56:	460f      	mov	r7, r1
 801da58:	4652      	mov	r2, sl
 801da5a:	465b      	mov	r3, fp
 801da5c:	ec51 0b18 	vmov	r0, r1, d8
 801da60:	f7e2 fc14 	bl	800028c <__adddf3>
 801da64:	4642      	mov	r2, r8
 801da66:	464b      	mov	r3, r9
 801da68:	f7e2 fc10 	bl	800028c <__adddf3>
 801da6c:	4632      	mov	r2, r6
 801da6e:	463b      	mov	r3, r7
 801da70:	f7e2 fc0c 	bl	800028c <__adddf3>
 801da74:	2000      	movs	r0, #0
 801da76:	4632      	mov	r2, r6
 801da78:	463b      	mov	r3, r7
 801da7a:	4604      	mov	r4, r0
 801da7c:	460d      	mov	r5, r1
 801da7e:	f7e2 fc03 	bl	8000288 <__aeabi_dsub>
 801da82:	4642      	mov	r2, r8
 801da84:	464b      	mov	r3, r9
 801da86:	f7e2 fbff 	bl	8000288 <__aeabi_dsub>
 801da8a:	ec53 2b18 	vmov	r2, r3, d8
 801da8e:	f7e2 fbfb 	bl	8000288 <__aeabi_dsub>
 801da92:	4602      	mov	r2, r0
 801da94:	460b      	mov	r3, r1
 801da96:	4650      	mov	r0, sl
 801da98:	4659      	mov	r1, fp
 801da9a:	e610      	b.n	801d6be <__ieee754_pow+0x31e>
 801da9c:	2401      	movs	r4, #1
 801da9e:	e6a1      	b.n	801d7e4 <__ieee754_pow+0x444>
 801daa0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801daf0 <__ieee754_pow+0x750>
 801daa4:	e617      	b.n	801d6d6 <__ieee754_pow+0x336>
 801daa6:	bf00      	nop
 801daa8:	4a454eef 	.word	0x4a454eef
 801daac:	3fca7e28 	.word	0x3fca7e28
 801dab0:	93c9db65 	.word	0x93c9db65
 801dab4:	3fcd864a 	.word	0x3fcd864a
 801dab8:	a91d4101 	.word	0xa91d4101
 801dabc:	3fd17460 	.word	0x3fd17460
 801dac0:	518f264d 	.word	0x518f264d
 801dac4:	3fd55555 	.word	0x3fd55555
 801dac8:	db6fabff 	.word	0xdb6fabff
 801dacc:	3fdb6db6 	.word	0x3fdb6db6
 801dad0:	33333303 	.word	0x33333303
 801dad4:	3fe33333 	.word	0x3fe33333
 801dad8:	e0000000 	.word	0xe0000000
 801dadc:	3feec709 	.word	0x3feec709
 801dae0:	dc3a03fd 	.word	0xdc3a03fd
 801dae4:	3feec709 	.word	0x3feec709
 801dae8:	145b01f5 	.word	0x145b01f5
 801daec:	be3e2fe0 	.word	0xbe3e2fe0
 801daf0:	00000000 	.word	0x00000000
 801daf4:	3ff00000 	.word	0x3ff00000
 801daf8:	7ff00000 	.word	0x7ff00000
 801dafc:	43400000 	.word	0x43400000
 801db00:	0003988e 	.word	0x0003988e
 801db04:	000bb679 	.word	0x000bb679
 801db08:	0802a178 	.word	0x0802a178
 801db0c:	3ff00000 	.word	0x3ff00000
 801db10:	40080000 	.word	0x40080000
 801db14:	0802a198 	.word	0x0802a198
 801db18:	0802a188 	.word	0x0802a188
 801db1c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ddf4 <__ieee754_pow+0xa54>)
 801db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db22:	4640      	mov	r0, r8
 801db24:	4649      	mov	r1, r9
 801db26:	f7e2 fbb1 	bl	800028c <__adddf3>
 801db2a:	4622      	mov	r2, r4
 801db2c:	ec41 0b1a 	vmov	d10, r0, r1
 801db30:	462b      	mov	r3, r5
 801db32:	4630      	mov	r0, r6
 801db34:	4639      	mov	r1, r7
 801db36:	f7e2 fba7 	bl	8000288 <__aeabi_dsub>
 801db3a:	4602      	mov	r2, r0
 801db3c:	460b      	mov	r3, r1
 801db3e:	ec51 0b1a 	vmov	r0, r1, d10
 801db42:	f7e2 ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 801db46:	2800      	cmp	r0, #0
 801db48:	f47f ae04 	bne.w	801d754 <__ieee754_pow+0x3b4>
 801db4c:	4aa4      	ldr	r2, [pc, #656]	; (801dde0 <__ieee754_pow+0xa40>)
 801db4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801db52:	4293      	cmp	r3, r2
 801db54:	f340 8108 	ble.w	801dd68 <__ieee754_pow+0x9c8>
 801db58:	151b      	asrs	r3, r3, #20
 801db5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801db5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801db62:	fa4a f303 	asr.w	r3, sl, r3
 801db66:	445b      	add	r3, fp
 801db68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801db6c:	4e9d      	ldr	r6, [pc, #628]	; (801dde4 <__ieee754_pow+0xa44>)
 801db6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801db72:	4116      	asrs	r6, r2
 801db74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801db78:	2000      	movs	r0, #0
 801db7a:	ea23 0106 	bic.w	r1, r3, r6
 801db7e:	f1c2 0214 	rsb	r2, r2, #20
 801db82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801db86:	fa4a fa02 	asr.w	sl, sl, r2
 801db8a:	f1bb 0f00 	cmp.w	fp, #0
 801db8e:	4602      	mov	r2, r0
 801db90:	460b      	mov	r3, r1
 801db92:	4620      	mov	r0, r4
 801db94:	4629      	mov	r1, r5
 801db96:	bfb8      	it	lt
 801db98:	f1ca 0a00 	rsblt	sl, sl, #0
 801db9c:	f7e2 fb74 	bl	8000288 <__aeabi_dsub>
 801dba0:	ec41 0b19 	vmov	d9, r0, r1
 801dba4:	4642      	mov	r2, r8
 801dba6:	464b      	mov	r3, r9
 801dba8:	ec51 0b19 	vmov	r0, r1, d9
 801dbac:	f7e2 fb6e 	bl	800028c <__adddf3>
 801dbb0:	a37b      	add	r3, pc, #492	; (adr r3, 801dda0 <__ieee754_pow+0xa00>)
 801dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbb6:	2000      	movs	r0, #0
 801dbb8:	4604      	mov	r4, r0
 801dbba:	460d      	mov	r5, r1
 801dbbc:	f7e2 fd1c 	bl	80005f8 <__aeabi_dmul>
 801dbc0:	ec53 2b19 	vmov	r2, r3, d9
 801dbc4:	4606      	mov	r6, r0
 801dbc6:	460f      	mov	r7, r1
 801dbc8:	4620      	mov	r0, r4
 801dbca:	4629      	mov	r1, r5
 801dbcc:	f7e2 fb5c 	bl	8000288 <__aeabi_dsub>
 801dbd0:	4602      	mov	r2, r0
 801dbd2:	460b      	mov	r3, r1
 801dbd4:	4640      	mov	r0, r8
 801dbd6:	4649      	mov	r1, r9
 801dbd8:	f7e2 fb56 	bl	8000288 <__aeabi_dsub>
 801dbdc:	a372      	add	r3, pc, #456	; (adr r3, 801dda8 <__ieee754_pow+0xa08>)
 801dbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbe2:	f7e2 fd09 	bl	80005f8 <__aeabi_dmul>
 801dbe6:	a372      	add	r3, pc, #456	; (adr r3, 801ddb0 <__ieee754_pow+0xa10>)
 801dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbec:	4680      	mov	r8, r0
 801dbee:	4689      	mov	r9, r1
 801dbf0:	4620      	mov	r0, r4
 801dbf2:	4629      	mov	r1, r5
 801dbf4:	f7e2 fd00 	bl	80005f8 <__aeabi_dmul>
 801dbf8:	4602      	mov	r2, r0
 801dbfa:	460b      	mov	r3, r1
 801dbfc:	4640      	mov	r0, r8
 801dbfe:	4649      	mov	r1, r9
 801dc00:	f7e2 fb44 	bl	800028c <__adddf3>
 801dc04:	4604      	mov	r4, r0
 801dc06:	460d      	mov	r5, r1
 801dc08:	4602      	mov	r2, r0
 801dc0a:	460b      	mov	r3, r1
 801dc0c:	4630      	mov	r0, r6
 801dc0e:	4639      	mov	r1, r7
 801dc10:	f7e2 fb3c 	bl	800028c <__adddf3>
 801dc14:	4632      	mov	r2, r6
 801dc16:	463b      	mov	r3, r7
 801dc18:	4680      	mov	r8, r0
 801dc1a:	4689      	mov	r9, r1
 801dc1c:	f7e2 fb34 	bl	8000288 <__aeabi_dsub>
 801dc20:	4602      	mov	r2, r0
 801dc22:	460b      	mov	r3, r1
 801dc24:	4620      	mov	r0, r4
 801dc26:	4629      	mov	r1, r5
 801dc28:	f7e2 fb2e 	bl	8000288 <__aeabi_dsub>
 801dc2c:	4642      	mov	r2, r8
 801dc2e:	4606      	mov	r6, r0
 801dc30:	460f      	mov	r7, r1
 801dc32:	464b      	mov	r3, r9
 801dc34:	4640      	mov	r0, r8
 801dc36:	4649      	mov	r1, r9
 801dc38:	f7e2 fcde 	bl	80005f8 <__aeabi_dmul>
 801dc3c:	a35e      	add	r3, pc, #376	; (adr r3, 801ddb8 <__ieee754_pow+0xa18>)
 801dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc42:	4604      	mov	r4, r0
 801dc44:	460d      	mov	r5, r1
 801dc46:	f7e2 fcd7 	bl	80005f8 <__aeabi_dmul>
 801dc4a:	a35d      	add	r3, pc, #372	; (adr r3, 801ddc0 <__ieee754_pow+0xa20>)
 801dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc50:	f7e2 fb1a 	bl	8000288 <__aeabi_dsub>
 801dc54:	4622      	mov	r2, r4
 801dc56:	462b      	mov	r3, r5
 801dc58:	f7e2 fcce 	bl	80005f8 <__aeabi_dmul>
 801dc5c:	a35a      	add	r3, pc, #360	; (adr r3, 801ddc8 <__ieee754_pow+0xa28>)
 801dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc62:	f7e2 fb13 	bl	800028c <__adddf3>
 801dc66:	4622      	mov	r2, r4
 801dc68:	462b      	mov	r3, r5
 801dc6a:	f7e2 fcc5 	bl	80005f8 <__aeabi_dmul>
 801dc6e:	a358      	add	r3, pc, #352	; (adr r3, 801ddd0 <__ieee754_pow+0xa30>)
 801dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc74:	f7e2 fb08 	bl	8000288 <__aeabi_dsub>
 801dc78:	4622      	mov	r2, r4
 801dc7a:	462b      	mov	r3, r5
 801dc7c:	f7e2 fcbc 	bl	80005f8 <__aeabi_dmul>
 801dc80:	a355      	add	r3, pc, #340	; (adr r3, 801ddd8 <__ieee754_pow+0xa38>)
 801dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc86:	f7e2 fb01 	bl	800028c <__adddf3>
 801dc8a:	4622      	mov	r2, r4
 801dc8c:	462b      	mov	r3, r5
 801dc8e:	f7e2 fcb3 	bl	80005f8 <__aeabi_dmul>
 801dc92:	4602      	mov	r2, r0
 801dc94:	460b      	mov	r3, r1
 801dc96:	4640      	mov	r0, r8
 801dc98:	4649      	mov	r1, r9
 801dc9a:	f7e2 faf5 	bl	8000288 <__aeabi_dsub>
 801dc9e:	4604      	mov	r4, r0
 801dca0:	460d      	mov	r5, r1
 801dca2:	4602      	mov	r2, r0
 801dca4:	460b      	mov	r3, r1
 801dca6:	4640      	mov	r0, r8
 801dca8:	4649      	mov	r1, r9
 801dcaa:	f7e2 fca5 	bl	80005f8 <__aeabi_dmul>
 801dcae:	2200      	movs	r2, #0
 801dcb0:	ec41 0b19 	vmov	d9, r0, r1
 801dcb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801dcb8:	4620      	mov	r0, r4
 801dcba:	4629      	mov	r1, r5
 801dcbc:	f7e2 fae4 	bl	8000288 <__aeabi_dsub>
 801dcc0:	4602      	mov	r2, r0
 801dcc2:	460b      	mov	r3, r1
 801dcc4:	ec51 0b19 	vmov	r0, r1, d9
 801dcc8:	f7e2 fdc0 	bl	800084c <__aeabi_ddiv>
 801dccc:	4632      	mov	r2, r6
 801dcce:	4604      	mov	r4, r0
 801dcd0:	460d      	mov	r5, r1
 801dcd2:	463b      	mov	r3, r7
 801dcd4:	4640      	mov	r0, r8
 801dcd6:	4649      	mov	r1, r9
 801dcd8:	f7e2 fc8e 	bl	80005f8 <__aeabi_dmul>
 801dcdc:	4632      	mov	r2, r6
 801dcde:	463b      	mov	r3, r7
 801dce0:	f7e2 fad4 	bl	800028c <__adddf3>
 801dce4:	4602      	mov	r2, r0
 801dce6:	460b      	mov	r3, r1
 801dce8:	4620      	mov	r0, r4
 801dcea:	4629      	mov	r1, r5
 801dcec:	f7e2 facc 	bl	8000288 <__aeabi_dsub>
 801dcf0:	4642      	mov	r2, r8
 801dcf2:	464b      	mov	r3, r9
 801dcf4:	f7e2 fac8 	bl	8000288 <__aeabi_dsub>
 801dcf8:	460b      	mov	r3, r1
 801dcfa:	4602      	mov	r2, r0
 801dcfc:	493a      	ldr	r1, [pc, #232]	; (801dde8 <__ieee754_pow+0xa48>)
 801dcfe:	2000      	movs	r0, #0
 801dd00:	f7e2 fac2 	bl	8000288 <__aeabi_dsub>
 801dd04:	ec41 0b10 	vmov	d0, r0, r1
 801dd08:	ee10 3a90 	vmov	r3, s1
 801dd0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801dd10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801dd14:	da2b      	bge.n	801dd6e <__ieee754_pow+0x9ce>
 801dd16:	4650      	mov	r0, sl
 801dd18:	f000 f96a 	bl	801dff0 <scalbn>
 801dd1c:	ec51 0b10 	vmov	r0, r1, d0
 801dd20:	ec53 2b18 	vmov	r2, r3, d8
 801dd24:	f7ff bbed 	b.w	801d502 <__ieee754_pow+0x162>
 801dd28:	4b30      	ldr	r3, [pc, #192]	; (801ddec <__ieee754_pow+0xa4c>)
 801dd2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801dd2e:	429e      	cmp	r6, r3
 801dd30:	f77f af0c 	ble.w	801db4c <__ieee754_pow+0x7ac>
 801dd34:	4b2e      	ldr	r3, [pc, #184]	; (801ddf0 <__ieee754_pow+0xa50>)
 801dd36:	440b      	add	r3, r1
 801dd38:	4303      	orrs	r3, r0
 801dd3a:	d009      	beq.n	801dd50 <__ieee754_pow+0x9b0>
 801dd3c:	ec51 0b18 	vmov	r0, r1, d8
 801dd40:	2200      	movs	r2, #0
 801dd42:	2300      	movs	r3, #0
 801dd44:	f7e2 feca 	bl	8000adc <__aeabi_dcmplt>
 801dd48:	3800      	subs	r0, #0
 801dd4a:	bf18      	it	ne
 801dd4c:	2001      	movne	r0, #1
 801dd4e:	e447      	b.n	801d5e0 <__ieee754_pow+0x240>
 801dd50:	4622      	mov	r2, r4
 801dd52:	462b      	mov	r3, r5
 801dd54:	f7e2 fa98 	bl	8000288 <__aeabi_dsub>
 801dd58:	4642      	mov	r2, r8
 801dd5a:	464b      	mov	r3, r9
 801dd5c:	f7e2 fed2 	bl	8000b04 <__aeabi_dcmpge>
 801dd60:	2800      	cmp	r0, #0
 801dd62:	f43f aef3 	beq.w	801db4c <__ieee754_pow+0x7ac>
 801dd66:	e7e9      	b.n	801dd3c <__ieee754_pow+0x99c>
 801dd68:	f04f 0a00 	mov.w	sl, #0
 801dd6c:	e71a      	b.n	801dba4 <__ieee754_pow+0x804>
 801dd6e:	ec51 0b10 	vmov	r0, r1, d0
 801dd72:	4619      	mov	r1, r3
 801dd74:	e7d4      	b.n	801dd20 <__ieee754_pow+0x980>
 801dd76:	491c      	ldr	r1, [pc, #112]	; (801dde8 <__ieee754_pow+0xa48>)
 801dd78:	2000      	movs	r0, #0
 801dd7a:	f7ff bb30 	b.w	801d3de <__ieee754_pow+0x3e>
 801dd7e:	2000      	movs	r0, #0
 801dd80:	2100      	movs	r1, #0
 801dd82:	f7ff bb2c 	b.w	801d3de <__ieee754_pow+0x3e>
 801dd86:	4630      	mov	r0, r6
 801dd88:	4639      	mov	r1, r7
 801dd8a:	f7ff bb28 	b.w	801d3de <__ieee754_pow+0x3e>
 801dd8e:	9204      	str	r2, [sp, #16]
 801dd90:	f7ff bb7a 	b.w	801d488 <__ieee754_pow+0xe8>
 801dd94:	2300      	movs	r3, #0
 801dd96:	f7ff bb64 	b.w	801d462 <__ieee754_pow+0xc2>
 801dd9a:	bf00      	nop
 801dd9c:	f3af 8000 	nop.w
 801dda0:	00000000 	.word	0x00000000
 801dda4:	3fe62e43 	.word	0x3fe62e43
 801dda8:	fefa39ef 	.word	0xfefa39ef
 801ddac:	3fe62e42 	.word	0x3fe62e42
 801ddb0:	0ca86c39 	.word	0x0ca86c39
 801ddb4:	be205c61 	.word	0xbe205c61
 801ddb8:	72bea4d0 	.word	0x72bea4d0
 801ddbc:	3e663769 	.word	0x3e663769
 801ddc0:	c5d26bf1 	.word	0xc5d26bf1
 801ddc4:	3ebbbd41 	.word	0x3ebbbd41
 801ddc8:	af25de2c 	.word	0xaf25de2c
 801ddcc:	3f11566a 	.word	0x3f11566a
 801ddd0:	16bebd93 	.word	0x16bebd93
 801ddd4:	3f66c16c 	.word	0x3f66c16c
 801ddd8:	5555553e 	.word	0x5555553e
 801dddc:	3fc55555 	.word	0x3fc55555
 801dde0:	3fe00000 	.word	0x3fe00000
 801dde4:	000fffff 	.word	0x000fffff
 801dde8:	3ff00000 	.word	0x3ff00000
 801ddec:	4090cbff 	.word	0x4090cbff
 801ddf0:	3f6f3400 	.word	0x3f6f3400
 801ddf4:	652b82fe 	.word	0x652b82fe
 801ddf8:	3c971547 	.word	0x3c971547

0801ddfc <__ieee754_sqrt>:
 801ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de00:	ec55 4b10 	vmov	r4, r5, d0
 801de04:	4e55      	ldr	r6, [pc, #340]	; (801df5c <__ieee754_sqrt+0x160>)
 801de06:	43ae      	bics	r6, r5
 801de08:	ee10 0a10 	vmov	r0, s0
 801de0c:	ee10 3a10 	vmov	r3, s0
 801de10:	462a      	mov	r2, r5
 801de12:	4629      	mov	r1, r5
 801de14:	d110      	bne.n	801de38 <__ieee754_sqrt+0x3c>
 801de16:	ee10 2a10 	vmov	r2, s0
 801de1a:	462b      	mov	r3, r5
 801de1c:	f7e2 fbec 	bl	80005f8 <__aeabi_dmul>
 801de20:	4602      	mov	r2, r0
 801de22:	460b      	mov	r3, r1
 801de24:	4620      	mov	r0, r4
 801de26:	4629      	mov	r1, r5
 801de28:	f7e2 fa30 	bl	800028c <__adddf3>
 801de2c:	4604      	mov	r4, r0
 801de2e:	460d      	mov	r5, r1
 801de30:	ec45 4b10 	vmov	d0, r4, r5
 801de34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de38:	2d00      	cmp	r5, #0
 801de3a:	dc10      	bgt.n	801de5e <__ieee754_sqrt+0x62>
 801de3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801de40:	4330      	orrs	r0, r6
 801de42:	d0f5      	beq.n	801de30 <__ieee754_sqrt+0x34>
 801de44:	b15d      	cbz	r5, 801de5e <__ieee754_sqrt+0x62>
 801de46:	ee10 2a10 	vmov	r2, s0
 801de4a:	462b      	mov	r3, r5
 801de4c:	ee10 0a10 	vmov	r0, s0
 801de50:	f7e2 fa1a 	bl	8000288 <__aeabi_dsub>
 801de54:	4602      	mov	r2, r0
 801de56:	460b      	mov	r3, r1
 801de58:	f7e2 fcf8 	bl	800084c <__aeabi_ddiv>
 801de5c:	e7e6      	b.n	801de2c <__ieee754_sqrt+0x30>
 801de5e:	1512      	asrs	r2, r2, #20
 801de60:	d074      	beq.n	801df4c <__ieee754_sqrt+0x150>
 801de62:	07d4      	lsls	r4, r2, #31
 801de64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801de68:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801de6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801de70:	bf5e      	ittt	pl
 801de72:	0fda      	lsrpl	r2, r3, #31
 801de74:	005b      	lslpl	r3, r3, #1
 801de76:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801de7a:	2400      	movs	r4, #0
 801de7c:	0fda      	lsrs	r2, r3, #31
 801de7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801de82:	107f      	asrs	r7, r7, #1
 801de84:	005b      	lsls	r3, r3, #1
 801de86:	2516      	movs	r5, #22
 801de88:	4620      	mov	r0, r4
 801de8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801de8e:	1886      	adds	r6, r0, r2
 801de90:	428e      	cmp	r6, r1
 801de92:	bfde      	ittt	le
 801de94:	1b89      	suble	r1, r1, r6
 801de96:	18b0      	addle	r0, r6, r2
 801de98:	18a4      	addle	r4, r4, r2
 801de9a:	0049      	lsls	r1, r1, #1
 801de9c:	3d01      	subs	r5, #1
 801de9e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801dea2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801dea6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801deaa:	d1f0      	bne.n	801de8e <__ieee754_sqrt+0x92>
 801deac:	462a      	mov	r2, r5
 801deae:	f04f 0e20 	mov.w	lr, #32
 801deb2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801deb6:	4281      	cmp	r1, r0
 801deb8:	eb06 0c05 	add.w	ip, r6, r5
 801debc:	dc02      	bgt.n	801dec4 <__ieee754_sqrt+0xc8>
 801debe:	d113      	bne.n	801dee8 <__ieee754_sqrt+0xec>
 801dec0:	459c      	cmp	ip, r3
 801dec2:	d811      	bhi.n	801dee8 <__ieee754_sqrt+0xec>
 801dec4:	f1bc 0f00 	cmp.w	ip, #0
 801dec8:	eb0c 0506 	add.w	r5, ip, r6
 801decc:	da43      	bge.n	801df56 <__ieee754_sqrt+0x15a>
 801dece:	2d00      	cmp	r5, #0
 801ded0:	db41      	blt.n	801df56 <__ieee754_sqrt+0x15a>
 801ded2:	f100 0801 	add.w	r8, r0, #1
 801ded6:	1a09      	subs	r1, r1, r0
 801ded8:	459c      	cmp	ip, r3
 801deda:	bf88      	it	hi
 801dedc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801dee0:	eba3 030c 	sub.w	r3, r3, ip
 801dee4:	4432      	add	r2, r6
 801dee6:	4640      	mov	r0, r8
 801dee8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801deec:	f1be 0e01 	subs.w	lr, lr, #1
 801def0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801def4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801def8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801defc:	d1db      	bne.n	801deb6 <__ieee754_sqrt+0xba>
 801defe:	430b      	orrs	r3, r1
 801df00:	d006      	beq.n	801df10 <__ieee754_sqrt+0x114>
 801df02:	1c50      	adds	r0, r2, #1
 801df04:	bf13      	iteet	ne
 801df06:	3201      	addne	r2, #1
 801df08:	3401      	addeq	r4, #1
 801df0a:	4672      	moveq	r2, lr
 801df0c:	f022 0201 	bicne.w	r2, r2, #1
 801df10:	1063      	asrs	r3, r4, #1
 801df12:	0852      	lsrs	r2, r2, #1
 801df14:	07e1      	lsls	r1, r4, #31
 801df16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801df1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801df1e:	bf48      	it	mi
 801df20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801df24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801df28:	4614      	mov	r4, r2
 801df2a:	e781      	b.n	801de30 <__ieee754_sqrt+0x34>
 801df2c:	0ad9      	lsrs	r1, r3, #11
 801df2e:	3815      	subs	r0, #21
 801df30:	055b      	lsls	r3, r3, #21
 801df32:	2900      	cmp	r1, #0
 801df34:	d0fa      	beq.n	801df2c <__ieee754_sqrt+0x130>
 801df36:	02cd      	lsls	r5, r1, #11
 801df38:	d50a      	bpl.n	801df50 <__ieee754_sqrt+0x154>
 801df3a:	f1c2 0420 	rsb	r4, r2, #32
 801df3e:	fa23 f404 	lsr.w	r4, r3, r4
 801df42:	1e55      	subs	r5, r2, #1
 801df44:	4093      	lsls	r3, r2
 801df46:	4321      	orrs	r1, r4
 801df48:	1b42      	subs	r2, r0, r5
 801df4a:	e78a      	b.n	801de62 <__ieee754_sqrt+0x66>
 801df4c:	4610      	mov	r0, r2
 801df4e:	e7f0      	b.n	801df32 <__ieee754_sqrt+0x136>
 801df50:	0049      	lsls	r1, r1, #1
 801df52:	3201      	adds	r2, #1
 801df54:	e7ef      	b.n	801df36 <__ieee754_sqrt+0x13a>
 801df56:	4680      	mov	r8, r0
 801df58:	e7bd      	b.n	801ded6 <__ieee754_sqrt+0xda>
 801df5a:	bf00      	nop
 801df5c:	7ff00000 	.word	0x7ff00000

0801df60 <__ieee754_sqrtf>:
 801df60:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801df64:	4770      	bx	lr

0801df66 <with_errno>:
 801df66:	b570      	push	{r4, r5, r6, lr}
 801df68:	4604      	mov	r4, r0
 801df6a:	460d      	mov	r5, r1
 801df6c:	4616      	mov	r6, r2
 801df6e:	f000 f8e3 	bl	801e138 <__errno>
 801df72:	4629      	mov	r1, r5
 801df74:	6006      	str	r6, [r0, #0]
 801df76:	4620      	mov	r0, r4
 801df78:	bd70      	pop	{r4, r5, r6, pc}

0801df7a <xflow>:
 801df7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801df7c:	4614      	mov	r4, r2
 801df7e:	461d      	mov	r5, r3
 801df80:	b108      	cbz	r0, 801df86 <xflow+0xc>
 801df82:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801df86:	e9cd 2300 	strd	r2, r3, [sp]
 801df8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801df8e:	4620      	mov	r0, r4
 801df90:	4629      	mov	r1, r5
 801df92:	f7e2 fb31 	bl	80005f8 <__aeabi_dmul>
 801df96:	2222      	movs	r2, #34	; 0x22
 801df98:	b003      	add	sp, #12
 801df9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df9e:	f7ff bfe2 	b.w	801df66 <with_errno>

0801dfa2 <__math_uflow>:
 801dfa2:	b508      	push	{r3, lr}
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801dfaa:	f7ff ffe6 	bl	801df7a <xflow>
 801dfae:	ec41 0b10 	vmov	d0, r0, r1
 801dfb2:	bd08      	pop	{r3, pc}

0801dfb4 <__math_oflow>:
 801dfb4:	b508      	push	{r3, lr}
 801dfb6:	2200      	movs	r2, #0
 801dfb8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801dfbc:	f7ff ffdd 	bl	801df7a <xflow>
 801dfc0:	ec41 0b10 	vmov	d0, r0, r1
 801dfc4:	bd08      	pop	{r3, pc}

0801dfc6 <fabs>:
 801dfc6:	ec51 0b10 	vmov	r0, r1, d0
 801dfca:	ee10 2a10 	vmov	r2, s0
 801dfce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801dfd2:	ec43 2b10 	vmov	d0, r2, r3
 801dfd6:	4770      	bx	lr

0801dfd8 <finite>:
 801dfd8:	b082      	sub	sp, #8
 801dfda:	ed8d 0b00 	vstr	d0, [sp]
 801dfde:	9801      	ldr	r0, [sp, #4]
 801dfe0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801dfe4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801dfe8:	0fc0      	lsrs	r0, r0, #31
 801dfea:	b002      	add	sp, #8
 801dfec:	4770      	bx	lr
	...

0801dff0 <scalbn>:
 801dff0:	b570      	push	{r4, r5, r6, lr}
 801dff2:	ec55 4b10 	vmov	r4, r5, d0
 801dff6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801dffa:	4606      	mov	r6, r0
 801dffc:	462b      	mov	r3, r5
 801dffe:	b99a      	cbnz	r2, 801e028 <scalbn+0x38>
 801e000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801e004:	4323      	orrs	r3, r4
 801e006:	d036      	beq.n	801e076 <scalbn+0x86>
 801e008:	4b39      	ldr	r3, [pc, #228]	; (801e0f0 <scalbn+0x100>)
 801e00a:	4629      	mov	r1, r5
 801e00c:	ee10 0a10 	vmov	r0, s0
 801e010:	2200      	movs	r2, #0
 801e012:	f7e2 faf1 	bl	80005f8 <__aeabi_dmul>
 801e016:	4b37      	ldr	r3, [pc, #220]	; (801e0f4 <scalbn+0x104>)
 801e018:	429e      	cmp	r6, r3
 801e01a:	4604      	mov	r4, r0
 801e01c:	460d      	mov	r5, r1
 801e01e:	da10      	bge.n	801e042 <scalbn+0x52>
 801e020:	a32b      	add	r3, pc, #172	; (adr r3, 801e0d0 <scalbn+0xe0>)
 801e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e026:	e03a      	b.n	801e09e <scalbn+0xae>
 801e028:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801e02c:	428a      	cmp	r2, r1
 801e02e:	d10c      	bne.n	801e04a <scalbn+0x5a>
 801e030:	ee10 2a10 	vmov	r2, s0
 801e034:	4620      	mov	r0, r4
 801e036:	4629      	mov	r1, r5
 801e038:	f7e2 f928 	bl	800028c <__adddf3>
 801e03c:	4604      	mov	r4, r0
 801e03e:	460d      	mov	r5, r1
 801e040:	e019      	b.n	801e076 <scalbn+0x86>
 801e042:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e046:	460b      	mov	r3, r1
 801e048:	3a36      	subs	r2, #54	; 0x36
 801e04a:	4432      	add	r2, r6
 801e04c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801e050:	428a      	cmp	r2, r1
 801e052:	dd08      	ble.n	801e066 <scalbn+0x76>
 801e054:	2d00      	cmp	r5, #0
 801e056:	a120      	add	r1, pc, #128	; (adr r1, 801e0d8 <scalbn+0xe8>)
 801e058:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e05c:	da1c      	bge.n	801e098 <scalbn+0xa8>
 801e05e:	a120      	add	r1, pc, #128	; (adr r1, 801e0e0 <scalbn+0xf0>)
 801e060:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e064:	e018      	b.n	801e098 <scalbn+0xa8>
 801e066:	2a00      	cmp	r2, #0
 801e068:	dd08      	ble.n	801e07c <scalbn+0x8c>
 801e06a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e06e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e072:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801e076:	ec45 4b10 	vmov	d0, r4, r5
 801e07a:	bd70      	pop	{r4, r5, r6, pc}
 801e07c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801e080:	da19      	bge.n	801e0b6 <scalbn+0xc6>
 801e082:	f24c 3350 	movw	r3, #50000	; 0xc350
 801e086:	429e      	cmp	r6, r3
 801e088:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801e08c:	dd0a      	ble.n	801e0a4 <scalbn+0xb4>
 801e08e:	a112      	add	r1, pc, #72	; (adr r1, 801e0d8 <scalbn+0xe8>)
 801e090:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e094:	2b00      	cmp	r3, #0
 801e096:	d1e2      	bne.n	801e05e <scalbn+0x6e>
 801e098:	a30f      	add	r3, pc, #60	; (adr r3, 801e0d8 <scalbn+0xe8>)
 801e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e09e:	f7e2 faab 	bl	80005f8 <__aeabi_dmul>
 801e0a2:	e7cb      	b.n	801e03c <scalbn+0x4c>
 801e0a4:	a10a      	add	r1, pc, #40	; (adr r1, 801e0d0 <scalbn+0xe0>)
 801e0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d0b8      	beq.n	801e020 <scalbn+0x30>
 801e0ae:	a10e      	add	r1, pc, #56	; (adr r1, 801e0e8 <scalbn+0xf8>)
 801e0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e0b4:	e7b4      	b.n	801e020 <scalbn+0x30>
 801e0b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e0ba:	3236      	adds	r2, #54	; 0x36
 801e0bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e0c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801e0c4:	4620      	mov	r0, r4
 801e0c6:	4b0c      	ldr	r3, [pc, #48]	; (801e0f8 <scalbn+0x108>)
 801e0c8:	2200      	movs	r2, #0
 801e0ca:	e7e8      	b.n	801e09e <scalbn+0xae>
 801e0cc:	f3af 8000 	nop.w
 801e0d0:	c2f8f359 	.word	0xc2f8f359
 801e0d4:	01a56e1f 	.word	0x01a56e1f
 801e0d8:	8800759c 	.word	0x8800759c
 801e0dc:	7e37e43c 	.word	0x7e37e43c
 801e0e0:	8800759c 	.word	0x8800759c
 801e0e4:	fe37e43c 	.word	0xfe37e43c
 801e0e8:	c2f8f359 	.word	0xc2f8f359
 801e0ec:	81a56e1f 	.word	0x81a56e1f
 801e0f0:	43500000 	.word	0x43500000
 801e0f4:	ffff3cb0 	.word	0xffff3cb0
 801e0f8:	3c900000 	.word	0x3c900000

0801e0fc <__assert_func>:
 801e0fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e0fe:	4614      	mov	r4, r2
 801e100:	461a      	mov	r2, r3
 801e102:	4b09      	ldr	r3, [pc, #36]	; (801e128 <__assert_func+0x2c>)
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	4605      	mov	r5, r0
 801e108:	68d8      	ldr	r0, [r3, #12]
 801e10a:	b14c      	cbz	r4, 801e120 <__assert_func+0x24>
 801e10c:	4b07      	ldr	r3, [pc, #28]	; (801e12c <__assert_func+0x30>)
 801e10e:	9100      	str	r1, [sp, #0]
 801e110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e114:	4906      	ldr	r1, [pc, #24]	; (801e130 <__assert_func+0x34>)
 801e116:	462b      	mov	r3, r5
 801e118:	f000 f814 	bl	801e144 <fiprintf>
 801e11c:	f000 fc0c 	bl	801e938 <abort>
 801e120:	4b04      	ldr	r3, [pc, #16]	; (801e134 <__assert_func+0x38>)
 801e122:	461c      	mov	r4, r3
 801e124:	e7f3      	b.n	801e10e <__assert_func+0x12>
 801e126:	bf00      	nop
 801e128:	200001ec 	.word	0x200001ec
 801e12c:	0802a1a8 	.word	0x0802a1a8
 801e130:	0802a1b5 	.word	0x0802a1b5
 801e134:	0802a1e3 	.word	0x0802a1e3

0801e138 <__errno>:
 801e138:	4b01      	ldr	r3, [pc, #4]	; (801e140 <__errno+0x8>)
 801e13a:	6818      	ldr	r0, [r3, #0]
 801e13c:	4770      	bx	lr
 801e13e:	bf00      	nop
 801e140:	200001ec 	.word	0x200001ec

0801e144 <fiprintf>:
 801e144:	b40e      	push	{r1, r2, r3}
 801e146:	b503      	push	{r0, r1, lr}
 801e148:	4601      	mov	r1, r0
 801e14a:	ab03      	add	r3, sp, #12
 801e14c:	4805      	ldr	r0, [pc, #20]	; (801e164 <fiprintf+0x20>)
 801e14e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e152:	6800      	ldr	r0, [r0, #0]
 801e154:	9301      	str	r3, [sp, #4]
 801e156:	f000 f86b 	bl	801e230 <_vfiprintf_r>
 801e15a:	b002      	add	sp, #8
 801e15c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e160:	b003      	add	sp, #12
 801e162:	4770      	bx	lr
 801e164:	200001ec 	.word	0x200001ec

0801e168 <__libc_init_array>:
 801e168:	b570      	push	{r4, r5, r6, lr}
 801e16a:	4d0d      	ldr	r5, [pc, #52]	; (801e1a0 <__libc_init_array+0x38>)
 801e16c:	4c0d      	ldr	r4, [pc, #52]	; (801e1a4 <__libc_init_array+0x3c>)
 801e16e:	1b64      	subs	r4, r4, r5
 801e170:	10a4      	asrs	r4, r4, #2
 801e172:	2600      	movs	r6, #0
 801e174:	42a6      	cmp	r6, r4
 801e176:	d109      	bne.n	801e18c <__libc_init_array+0x24>
 801e178:	4d0b      	ldr	r5, [pc, #44]	; (801e1a8 <__libc_init_array+0x40>)
 801e17a:	4c0c      	ldr	r4, [pc, #48]	; (801e1ac <__libc_init_array+0x44>)
 801e17c:	f000 fff0 	bl	801f160 <_init>
 801e180:	1b64      	subs	r4, r4, r5
 801e182:	10a4      	asrs	r4, r4, #2
 801e184:	2600      	movs	r6, #0
 801e186:	42a6      	cmp	r6, r4
 801e188:	d105      	bne.n	801e196 <__libc_init_array+0x2e>
 801e18a:	bd70      	pop	{r4, r5, r6, pc}
 801e18c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e190:	4798      	blx	r3
 801e192:	3601      	adds	r6, #1
 801e194:	e7ee      	b.n	801e174 <__libc_init_array+0xc>
 801e196:	f855 3b04 	ldr.w	r3, [r5], #4
 801e19a:	4798      	blx	r3
 801e19c:	3601      	adds	r6, #1
 801e19e:	e7f2      	b.n	801e186 <__libc_init_array+0x1e>
 801e1a0:	0802a284 	.word	0x0802a284
 801e1a4:	0802a284 	.word	0x0802a284
 801e1a8:	0802a284 	.word	0x0802a284
 801e1ac:	0802a28c 	.word	0x0802a28c

0801e1b0 <memcpy>:
 801e1b0:	440a      	add	r2, r1
 801e1b2:	4291      	cmp	r1, r2
 801e1b4:	f100 33ff 	add.w	r3, r0, #4294967295
 801e1b8:	d100      	bne.n	801e1bc <memcpy+0xc>
 801e1ba:	4770      	bx	lr
 801e1bc:	b510      	push	{r4, lr}
 801e1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e1c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e1c6:	4291      	cmp	r1, r2
 801e1c8:	d1f9      	bne.n	801e1be <memcpy+0xe>
 801e1ca:	bd10      	pop	{r4, pc}

0801e1cc <memset>:
 801e1cc:	4402      	add	r2, r0
 801e1ce:	4603      	mov	r3, r0
 801e1d0:	4293      	cmp	r3, r2
 801e1d2:	d100      	bne.n	801e1d6 <memset+0xa>
 801e1d4:	4770      	bx	lr
 801e1d6:	f803 1b01 	strb.w	r1, [r3], #1
 801e1da:	e7f9      	b.n	801e1d0 <memset+0x4>

0801e1dc <__sfputc_r>:
 801e1dc:	6893      	ldr	r3, [r2, #8]
 801e1de:	3b01      	subs	r3, #1
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	b410      	push	{r4}
 801e1e4:	6093      	str	r3, [r2, #8]
 801e1e6:	da08      	bge.n	801e1fa <__sfputc_r+0x1e>
 801e1e8:	6994      	ldr	r4, [r2, #24]
 801e1ea:	42a3      	cmp	r3, r4
 801e1ec:	db01      	blt.n	801e1f2 <__sfputc_r+0x16>
 801e1ee:	290a      	cmp	r1, #10
 801e1f0:	d103      	bne.n	801e1fa <__sfputc_r+0x1e>
 801e1f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e1f6:	f000 badf 	b.w	801e7b8 <__swbuf_r>
 801e1fa:	6813      	ldr	r3, [r2, #0]
 801e1fc:	1c58      	adds	r0, r3, #1
 801e1fe:	6010      	str	r0, [r2, #0]
 801e200:	7019      	strb	r1, [r3, #0]
 801e202:	4608      	mov	r0, r1
 801e204:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e208:	4770      	bx	lr

0801e20a <__sfputs_r>:
 801e20a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e20c:	4606      	mov	r6, r0
 801e20e:	460f      	mov	r7, r1
 801e210:	4614      	mov	r4, r2
 801e212:	18d5      	adds	r5, r2, r3
 801e214:	42ac      	cmp	r4, r5
 801e216:	d101      	bne.n	801e21c <__sfputs_r+0x12>
 801e218:	2000      	movs	r0, #0
 801e21a:	e007      	b.n	801e22c <__sfputs_r+0x22>
 801e21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e220:	463a      	mov	r2, r7
 801e222:	4630      	mov	r0, r6
 801e224:	f7ff ffda 	bl	801e1dc <__sfputc_r>
 801e228:	1c43      	adds	r3, r0, #1
 801e22a:	d1f3      	bne.n	801e214 <__sfputs_r+0xa>
 801e22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e230 <_vfiprintf_r>:
 801e230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e234:	460d      	mov	r5, r1
 801e236:	b09d      	sub	sp, #116	; 0x74
 801e238:	4614      	mov	r4, r2
 801e23a:	4698      	mov	r8, r3
 801e23c:	4606      	mov	r6, r0
 801e23e:	b118      	cbz	r0, 801e248 <_vfiprintf_r+0x18>
 801e240:	6983      	ldr	r3, [r0, #24]
 801e242:	b90b      	cbnz	r3, 801e248 <_vfiprintf_r+0x18>
 801e244:	f000 fc9a 	bl	801eb7c <__sinit>
 801e248:	4b89      	ldr	r3, [pc, #548]	; (801e470 <_vfiprintf_r+0x240>)
 801e24a:	429d      	cmp	r5, r3
 801e24c:	d11b      	bne.n	801e286 <_vfiprintf_r+0x56>
 801e24e:	6875      	ldr	r5, [r6, #4]
 801e250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e252:	07d9      	lsls	r1, r3, #31
 801e254:	d405      	bmi.n	801e262 <_vfiprintf_r+0x32>
 801e256:	89ab      	ldrh	r3, [r5, #12]
 801e258:	059a      	lsls	r2, r3, #22
 801e25a:	d402      	bmi.n	801e262 <_vfiprintf_r+0x32>
 801e25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e25e:	f000 fd2b 	bl	801ecb8 <__retarget_lock_acquire_recursive>
 801e262:	89ab      	ldrh	r3, [r5, #12]
 801e264:	071b      	lsls	r3, r3, #28
 801e266:	d501      	bpl.n	801e26c <_vfiprintf_r+0x3c>
 801e268:	692b      	ldr	r3, [r5, #16]
 801e26a:	b9eb      	cbnz	r3, 801e2a8 <_vfiprintf_r+0x78>
 801e26c:	4629      	mov	r1, r5
 801e26e:	4630      	mov	r0, r6
 801e270:	f000 faf4 	bl	801e85c <__swsetup_r>
 801e274:	b1c0      	cbz	r0, 801e2a8 <_vfiprintf_r+0x78>
 801e276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e278:	07dc      	lsls	r4, r3, #31
 801e27a:	d50e      	bpl.n	801e29a <_vfiprintf_r+0x6a>
 801e27c:	f04f 30ff 	mov.w	r0, #4294967295
 801e280:	b01d      	add	sp, #116	; 0x74
 801e282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e286:	4b7b      	ldr	r3, [pc, #492]	; (801e474 <_vfiprintf_r+0x244>)
 801e288:	429d      	cmp	r5, r3
 801e28a:	d101      	bne.n	801e290 <_vfiprintf_r+0x60>
 801e28c:	68b5      	ldr	r5, [r6, #8]
 801e28e:	e7df      	b.n	801e250 <_vfiprintf_r+0x20>
 801e290:	4b79      	ldr	r3, [pc, #484]	; (801e478 <_vfiprintf_r+0x248>)
 801e292:	429d      	cmp	r5, r3
 801e294:	bf08      	it	eq
 801e296:	68f5      	ldreq	r5, [r6, #12]
 801e298:	e7da      	b.n	801e250 <_vfiprintf_r+0x20>
 801e29a:	89ab      	ldrh	r3, [r5, #12]
 801e29c:	0598      	lsls	r0, r3, #22
 801e29e:	d4ed      	bmi.n	801e27c <_vfiprintf_r+0x4c>
 801e2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e2a2:	f000 fd0a 	bl	801ecba <__retarget_lock_release_recursive>
 801e2a6:	e7e9      	b.n	801e27c <_vfiprintf_r+0x4c>
 801e2a8:	2300      	movs	r3, #0
 801e2aa:	9309      	str	r3, [sp, #36]	; 0x24
 801e2ac:	2320      	movs	r3, #32
 801e2ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e2b2:	f8cd 800c 	str.w	r8, [sp, #12]
 801e2b6:	2330      	movs	r3, #48	; 0x30
 801e2b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e47c <_vfiprintf_r+0x24c>
 801e2bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e2c0:	f04f 0901 	mov.w	r9, #1
 801e2c4:	4623      	mov	r3, r4
 801e2c6:	469a      	mov	sl, r3
 801e2c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e2cc:	b10a      	cbz	r2, 801e2d2 <_vfiprintf_r+0xa2>
 801e2ce:	2a25      	cmp	r2, #37	; 0x25
 801e2d0:	d1f9      	bne.n	801e2c6 <_vfiprintf_r+0x96>
 801e2d2:	ebba 0b04 	subs.w	fp, sl, r4
 801e2d6:	d00b      	beq.n	801e2f0 <_vfiprintf_r+0xc0>
 801e2d8:	465b      	mov	r3, fp
 801e2da:	4622      	mov	r2, r4
 801e2dc:	4629      	mov	r1, r5
 801e2de:	4630      	mov	r0, r6
 801e2e0:	f7ff ff93 	bl	801e20a <__sfputs_r>
 801e2e4:	3001      	adds	r0, #1
 801e2e6:	f000 80aa 	beq.w	801e43e <_vfiprintf_r+0x20e>
 801e2ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e2ec:	445a      	add	r2, fp
 801e2ee:	9209      	str	r2, [sp, #36]	; 0x24
 801e2f0:	f89a 3000 	ldrb.w	r3, [sl]
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	f000 80a2 	beq.w	801e43e <_vfiprintf_r+0x20e>
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	f04f 32ff 	mov.w	r2, #4294967295
 801e300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e304:	f10a 0a01 	add.w	sl, sl, #1
 801e308:	9304      	str	r3, [sp, #16]
 801e30a:	9307      	str	r3, [sp, #28]
 801e30c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e310:	931a      	str	r3, [sp, #104]	; 0x68
 801e312:	4654      	mov	r4, sl
 801e314:	2205      	movs	r2, #5
 801e316:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e31a:	4858      	ldr	r0, [pc, #352]	; (801e47c <_vfiprintf_r+0x24c>)
 801e31c:	f7e1 ff60 	bl	80001e0 <memchr>
 801e320:	9a04      	ldr	r2, [sp, #16]
 801e322:	b9d8      	cbnz	r0, 801e35c <_vfiprintf_r+0x12c>
 801e324:	06d1      	lsls	r1, r2, #27
 801e326:	bf44      	itt	mi
 801e328:	2320      	movmi	r3, #32
 801e32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e32e:	0713      	lsls	r3, r2, #28
 801e330:	bf44      	itt	mi
 801e332:	232b      	movmi	r3, #43	; 0x2b
 801e334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e338:	f89a 3000 	ldrb.w	r3, [sl]
 801e33c:	2b2a      	cmp	r3, #42	; 0x2a
 801e33e:	d015      	beq.n	801e36c <_vfiprintf_r+0x13c>
 801e340:	9a07      	ldr	r2, [sp, #28]
 801e342:	4654      	mov	r4, sl
 801e344:	2000      	movs	r0, #0
 801e346:	f04f 0c0a 	mov.w	ip, #10
 801e34a:	4621      	mov	r1, r4
 801e34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e350:	3b30      	subs	r3, #48	; 0x30
 801e352:	2b09      	cmp	r3, #9
 801e354:	d94e      	bls.n	801e3f4 <_vfiprintf_r+0x1c4>
 801e356:	b1b0      	cbz	r0, 801e386 <_vfiprintf_r+0x156>
 801e358:	9207      	str	r2, [sp, #28]
 801e35a:	e014      	b.n	801e386 <_vfiprintf_r+0x156>
 801e35c:	eba0 0308 	sub.w	r3, r0, r8
 801e360:	fa09 f303 	lsl.w	r3, r9, r3
 801e364:	4313      	orrs	r3, r2
 801e366:	9304      	str	r3, [sp, #16]
 801e368:	46a2      	mov	sl, r4
 801e36a:	e7d2      	b.n	801e312 <_vfiprintf_r+0xe2>
 801e36c:	9b03      	ldr	r3, [sp, #12]
 801e36e:	1d19      	adds	r1, r3, #4
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	9103      	str	r1, [sp, #12]
 801e374:	2b00      	cmp	r3, #0
 801e376:	bfbb      	ittet	lt
 801e378:	425b      	neglt	r3, r3
 801e37a:	f042 0202 	orrlt.w	r2, r2, #2
 801e37e:	9307      	strge	r3, [sp, #28]
 801e380:	9307      	strlt	r3, [sp, #28]
 801e382:	bfb8      	it	lt
 801e384:	9204      	strlt	r2, [sp, #16]
 801e386:	7823      	ldrb	r3, [r4, #0]
 801e388:	2b2e      	cmp	r3, #46	; 0x2e
 801e38a:	d10c      	bne.n	801e3a6 <_vfiprintf_r+0x176>
 801e38c:	7863      	ldrb	r3, [r4, #1]
 801e38e:	2b2a      	cmp	r3, #42	; 0x2a
 801e390:	d135      	bne.n	801e3fe <_vfiprintf_r+0x1ce>
 801e392:	9b03      	ldr	r3, [sp, #12]
 801e394:	1d1a      	adds	r2, r3, #4
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	9203      	str	r2, [sp, #12]
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	bfb8      	it	lt
 801e39e:	f04f 33ff 	movlt.w	r3, #4294967295
 801e3a2:	3402      	adds	r4, #2
 801e3a4:	9305      	str	r3, [sp, #20]
 801e3a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e48c <_vfiprintf_r+0x25c>
 801e3aa:	7821      	ldrb	r1, [r4, #0]
 801e3ac:	2203      	movs	r2, #3
 801e3ae:	4650      	mov	r0, sl
 801e3b0:	f7e1 ff16 	bl	80001e0 <memchr>
 801e3b4:	b140      	cbz	r0, 801e3c8 <_vfiprintf_r+0x198>
 801e3b6:	2340      	movs	r3, #64	; 0x40
 801e3b8:	eba0 000a 	sub.w	r0, r0, sl
 801e3bc:	fa03 f000 	lsl.w	r0, r3, r0
 801e3c0:	9b04      	ldr	r3, [sp, #16]
 801e3c2:	4303      	orrs	r3, r0
 801e3c4:	3401      	adds	r4, #1
 801e3c6:	9304      	str	r3, [sp, #16]
 801e3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3cc:	482c      	ldr	r0, [pc, #176]	; (801e480 <_vfiprintf_r+0x250>)
 801e3ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e3d2:	2206      	movs	r2, #6
 801e3d4:	f7e1 ff04 	bl	80001e0 <memchr>
 801e3d8:	2800      	cmp	r0, #0
 801e3da:	d03f      	beq.n	801e45c <_vfiprintf_r+0x22c>
 801e3dc:	4b29      	ldr	r3, [pc, #164]	; (801e484 <_vfiprintf_r+0x254>)
 801e3de:	bb1b      	cbnz	r3, 801e428 <_vfiprintf_r+0x1f8>
 801e3e0:	9b03      	ldr	r3, [sp, #12]
 801e3e2:	3307      	adds	r3, #7
 801e3e4:	f023 0307 	bic.w	r3, r3, #7
 801e3e8:	3308      	adds	r3, #8
 801e3ea:	9303      	str	r3, [sp, #12]
 801e3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3ee:	443b      	add	r3, r7
 801e3f0:	9309      	str	r3, [sp, #36]	; 0x24
 801e3f2:	e767      	b.n	801e2c4 <_vfiprintf_r+0x94>
 801e3f4:	fb0c 3202 	mla	r2, ip, r2, r3
 801e3f8:	460c      	mov	r4, r1
 801e3fa:	2001      	movs	r0, #1
 801e3fc:	e7a5      	b.n	801e34a <_vfiprintf_r+0x11a>
 801e3fe:	2300      	movs	r3, #0
 801e400:	3401      	adds	r4, #1
 801e402:	9305      	str	r3, [sp, #20]
 801e404:	4619      	mov	r1, r3
 801e406:	f04f 0c0a 	mov.w	ip, #10
 801e40a:	4620      	mov	r0, r4
 801e40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e410:	3a30      	subs	r2, #48	; 0x30
 801e412:	2a09      	cmp	r2, #9
 801e414:	d903      	bls.n	801e41e <_vfiprintf_r+0x1ee>
 801e416:	2b00      	cmp	r3, #0
 801e418:	d0c5      	beq.n	801e3a6 <_vfiprintf_r+0x176>
 801e41a:	9105      	str	r1, [sp, #20]
 801e41c:	e7c3      	b.n	801e3a6 <_vfiprintf_r+0x176>
 801e41e:	fb0c 2101 	mla	r1, ip, r1, r2
 801e422:	4604      	mov	r4, r0
 801e424:	2301      	movs	r3, #1
 801e426:	e7f0      	b.n	801e40a <_vfiprintf_r+0x1da>
 801e428:	ab03      	add	r3, sp, #12
 801e42a:	9300      	str	r3, [sp, #0]
 801e42c:	462a      	mov	r2, r5
 801e42e:	4b16      	ldr	r3, [pc, #88]	; (801e488 <_vfiprintf_r+0x258>)
 801e430:	a904      	add	r1, sp, #16
 801e432:	4630      	mov	r0, r6
 801e434:	f3af 8000 	nop.w
 801e438:	4607      	mov	r7, r0
 801e43a:	1c78      	adds	r0, r7, #1
 801e43c:	d1d6      	bne.n	801e3ec <_vfiprintf_r+0x1bc>
 801e43e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e440:	07d9      	lsls	r1, r3, #31
 801e442:	d405      	bmi.n	801e450 <_vfiprintf_r+0x220>
 801e444:	89ab      	ldrh	r3, [r5, #12]
 801e446:	059a      	lsls	r2, r3, #22
 801e448:	d402      	bmi.n	801e450 <_vfiprintf_r+0x220>
 801e44a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e44c:	f000 fc35 	bl	801ecba <__retarget_lock_release_recursive>
 801e450:	89ab      	ldrh	r3, [r5, #12]
 801e452:	065b      	lsls	r3, r3, #25
 801e454:	f53f af12 	bmi.w	801e27c <_vfiprintf_r+0x4c>
 801e458:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e45a:	e711      	b.n	801e280 <_vfiprintf_r+0x50>
 801e45c:	ab03      	add	r3, sp, #12
 801e45e:	9300      	str	r3, [sp, #0]
 801e460:	462a      	mov	r2, r5
 801e462:	4b09      	ldr	r3, [pc, #36]	; (801e488 <_vfiprintf_r+0x258>)
 801e464:	a904      	add	r1, sp, #16
 801e466:	4630      	mov	r0, r6
 801e468:	f000 f880 	bl	801e56c <_printf_i>
 801e46c:	e7e4      	b.n	801e438 <_vfiprintf_r+0x208>
 801e46e:	bf00      	nop
 801e470:	0802a23c 	.word	0x0802a23c
 801e474:	0802a25c 	.word	0x0802a25c
 801e478:	0802a21c 	.word	0x0802a21c
 801e47c:	0802a1e8 	.word	0x0802a1e8
 801e480:	0802a1f2 	.word	0x0802a1f2
 801e484:	00000000 	.word	0x00000000
 801e488:	0801e20b 	.word	0x0801e20b
 801e48c:	0802a1ee 	.word	0x0802a1ee

0801e490 <_printf_common>:
 801e490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e494:	4616      	mov	r6, r2
 801e496:	4699      	mov	r9, r3
 801e498:	688a      	ldr	r2, [r1, #8]
 801e49a:	690b      	ldr	r3, [r1, #16]
 801e49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e4a0:	4293      	cmp	r3, r2
 801e4a2:	bfb8      	it	lt
 801e4a4:	4613      	movlt	r3, r2
 801e4a6:	6033      	str	r3, [r6, #0]
 801e4a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e4ac:	4607      	mov	r7, r0
 801e4ae:	460c      	mov	r4, r1
 801e4b0:	b10a      	cbz	r2, 801e4b6 <_printf_common+0x26>
 801e4b2:	3301      	adds	r3, #1
 801e4b4:	6033      	str	r3, [r6, #0]
 801e4b6:	6823      	ldr	r3, [r4, #0]
 801e4b8:	0699      	lsls	r1, r3, #26
 801e4ba:	bf42      	ittt	mi
 801e4bc:	6833      	ldrmi	r3, [r6, #0]
 801e4be:	3302      	addmi	r3, #2
 801e4c0:	6033      	strmi	r3, [r6, #0]
 801e4c2:	6825      	ldr	r5, [r4, #0]
 801e4c4:	f015 0506 	ands.w	r5, r5, #6
 801e4c8:	d106      	bne.n	801e4d8 <_printf_common+0x48>
 801e4ca:	f104 0a19 	add.w	sl, r4, #25
 801e4ce:	68e3      	ldr	r3, [r4, #12]
 801e4d0:	6832      	ldr	r2, [r6, #0]
 801e4d2:	1a9b      	subs	r3, r3, r2
 801e4d4:	42ab      	cmp	r3, r5
 801e4d6:	dc26      	bgt.n	801e526 <_printf_common+0x96>
 801e4d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e4dc:	1e13      	subs	r3, r2, #0
 801e4de:	6822      	ldr	r2, [r4, #0]
 801e4e0:	bf18      	it	ne
 801e4e2:	2301      	movne	r3, #1
 801e4e4:	0692      	lsls	r2, r2, #26
 801e4e6:	d42b      	bmi.n	801e540 <_printf_common+0xb0>
 801e4e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e4ec:	4649      	mov	r1, r9
 801e4ee:	4638      	mov	r0, r7
 801e4f0:	47c0      	blx	r8
 801e4f2:	3001      	adds	r0, #1
 801e4f4:	d01e      	beq.n	801e534 <_printf_common+0xa4>
 801e4f6:	6823      	ldr	r3, [r4, #0]
 801e4f8:	68e5      	ldr	r5, [r4, #12]
 801e4fa:	6832      	ldr	r2, [r6, #0]
 801e4fc:	f003 0306 	and.w	r3, r3, #6
 801e500:	2b04      	cmp	r3, #4
 801e502:	bf08      	it	eq
 801e504:	1aad      	subeq	r5, r5, r2
 801e506:	68a3      	ldr	r3, [r4, #8]
 801e508:	6922      	ldr	r2, [r4, #16]
 801e50a:	bf0c      	ite	eq
 801e50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e510:	2500      	movne	r5, #0
 801e512:	4293      	cmp	r3, r2
 801e514:	bfc4      	itt	gt
 801e516:	1a9b      	subgt	r3, r3, r2
 801e518:	18ed      	addgt	r5, r5, r3
 801e51a:	2600      	movs	r6, #0
 801e51c:	341a      	adds	r4, #26
 801e51e:	42b5      	cmp	r5, r6
 801e520:	d11a      	bne.n	801e558 <_printf_common+0xc8>
 801e522:	2000      	movs	r0, #0
 801e524:	e008      	b.n	801e538 <_printf_common+0xa8>
 801e526:	2301      	movs	r3, #1
 801e528:	4652      	mov	r2, sl
 801e52a:	4649      	mov	r1, r9
 801e52c:	4638      	mov	r0, r7
 801e52e:	47c0      	blx	r8
 801e530:	3001      	adds	r0, #1
 801e532:	d103      	bne.n	801e53c <_printf_common+0xac>
 801e534:	f04f 30ff 	mov.w	r0, #4294967295
 801e538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e53c:	3501      	adds	r5, #1
 801e53e:	e7c6      	b.n	801e4ce <_printf_common+0x3e>
 801e540:	18e1      	adds	r1, r4, r3
 801e542:	1c5a      	adds	r2, r3, #1
 801e544:	2030      	movs	r0, #48	; 0x30
 801e546:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e54a:	4422      	add	r2, r4
 801e54c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e550:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e554:	3302      	adds	r3, #2
 801e556:	e7c7      	b.n	801e4e8 <_printf_common+0x58>
 801e558:	2301      	movs	r3, #1
 801e55a:	4622      	mov	r2, r4
 801e55c:	4649      	mov	r1, r9
 801e55e:	4638      	mov	r0, r7
 801e560:	47c0      	blx	r8
 801e562:	3001      	adds	r0, #1
 801e564:	d0e6      	beq.n	801e534 <_printf_common+0xa4>
 801e566:	3601      	adds	r6, #1
 801e568:	e7d9      	b.n	801e51e <_printf_common+0x8e>
	...

0801e56c <_printf_i>:
 801e56c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e570:	7e0f      	ldrb	r7, [r1, #24]
 801e572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e574:	2f78      	cmp	r7, #120	; 0x78
 801e576:	4691      	mov	r9, r2
 801e578:	4680      	mov	r8, r0
 801e57a:	460c      	mov	r4, r1
 801e57c:	469a      	mov	sl, r3
 801e57e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e582:	d807      	bhi.n	801e594 <_printf_i+0x28>
 801e584:	2f62      	cmp	r7, #98	; 0x62
 801e586:	d80a      	bhi.n	801e59e <_printf_i+0x32>
 801e588:	2f00      	cmp	r7, #0
 801e58a:	f000 80d8 	beq.w	801e73e <_printf_i+0x1d2>
 801e58e:	2f58      	cmp	r7, #88	; 0x58
 801e590:	f000 80a3 	beq.w	801e6da <_printf_i+0x16e>
 801e594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e598:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e59c:	e03a      	b.n	801e614 <_printf_i+0xa8>
 801e59e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e5a2:	2b15      	cmp	r3, #21
 801e5a4:	d8f6      	bhi.n	801e594 <_printf_i+0x28>
 801e5a6:	a101      	add	r1, pc, #4	; (adr r1, 801e5ac <_printf_i+0x40>)
 801e5a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e5ac:	0801e605 	.word	0x0801e605
 801e5b0:	0801e619 	.word	0x0801e619
 801e5b4:	0801e595 	.word	0x0801e595
 801e5b8:	0801e595 	.word	0x0801e595
 801e5bc:	0801e595 	.word	0x0801e595
 801e5c0:	0801e595 	.word	0x0801e595
 801e5c4:	0801e619 	.word	0x0801e619
 801e5c8:	0801e595 	.word	0x0801e595
 801e5cc:	0801e595 	.word	0x0801e595
 801e5d0:	0801e595 	.word	0x0801e595
 801e5d4:	0801e595 	.word	0x0801e595
 801e5d8:	0801e725 	.word	0x0801e725
 801e5dc:	0801e649 	.word	0x0801e649
 801e5e0:	0801e707 	.word	0x0801e707
 801e5e4:	0801e595 	.word	0x0801e595
 801e5e8:	0801e595 	.word	0x0801e595
 801e5ec:	0801e747 	.word	0x0801e747
 801e5f0:	0801e595 	.word	0x0801e595
 801e5f4:	0801e649 	.word	0x0801e649
 801e5f8:	0801e595 	.word	0x0801e595
 801e5fc:	0801e595 	.word	0x0801e595
 801e600:	0801e70f 	.word	0x0801e70f
 801e604:	682b      	ldr	r3, [r5, #0]
 801e606:	1d1a      	adds	r2, r3, #4
 801e608:	681b      	ldr	r3, [r3, #0]
 801e60a:	602a      	str	r2, [r5, #0]
 801e60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e610:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e614:	2301      	movs	r3, #1
 801e616:	e0a3      	b.n	801e760 <_printf_i+0x1f4>
 801e618:	6820      	ldr	r0, [r4, #0]
 801e61a:	6829      	ldr	r1, [r5, #0]
 801e61c:	0606      	lsls	r6, r0, #24
 801e61e:	f101 0304 	add.w	r3, r1, #4
 801e622:	d50a      	bpl.n	801e63a <_printf_i+0xce>
 801e624:	680e      	ldr	r6, [r1, #0]
 801e626:	602b      	str	r3, [r5, #0]
 801e628:	2e00      	cmp	r6, #0
 801e62a:	da03      	bge.n	801e634 <_printf_i+0xc8>
 801e62c:	232d      	movs	r3, #45	; 0x2d
 801e62e:	4276      	negs	r6, r6
 801e630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e634:	485e      	ldr	r0, [pc, #376]	; (801e7b0 <_printf_i+0x244>)
 801e636:	230a      	movs	r3, #10
 801e638:	e019      	b.n	801e66e <_printf_i+0x102>
 801e63a:	680e      	ldr	r6, [r1, #0]
 801e63c:	602b      	str	r3, [r5, #0]
 801e63e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e642:	bf18      	it	ne
 801e644:	b236      	sxthne	r6, r6
 801e646:	e7ef      	b.n	801e628 <_printf_i+0xbc>
 801e648:	682b      	ldr	r3, [r5, #0]
 801e64a:	6820      	ldr	r0, [r4, #0]
 801e64c:	1d19      	adds	r1, r3, #4
 801e64e:	6029      	str	r1, [r5, #0]
 801e650:	0601      	lsls	r1, r0, #24
 801e652:	d501      	bpl.n	801e658 <_printf_i+0xec>
 801e654:	681e      	ldr	r6, [r3, #0]
 801e656:	e002      	b.n	801e65e <_printf_i+0xf2>
 801e658:	0646      	lsls	r6, r0, #25
 801e65a:	d5fb      	bpl.n	801e654 <_printf_i+0xe8>
 801e65c:	881e      	ldrh	r6, [r3, #0]
 801e65e:	4854      	ldr	r0, [pc, #336]	; (801e7b0 <_printf_i+0x244>)
 801e660:	2f6f      	cmp	r7, #111	; 0x6f
 801e662:	bf0c      	ite	eq
 801e664:	2308      	moveq	r3, #8
 801e666:	230a      	movne	r3, #10
 801e668:	2100      	movs	r1, #0
 801e66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e66e:	6865      	ldr	r5, [r4, #4]
 801e670:	60a5      	str	r5, [r4, #8]
 801e672:	2d00      	cmp	r5, #0
 801e674:	bfa2      	ittt	ge
 801e676:	6821      	ldrge	r1, [r4, #0]
 801e678:	f021 0104 	bicge.w	r1, r1, #4
 801e67c:	6021      	strge	r1, [r4, #0]
 801e67e:	b90e      	cbnz	r6, 801e684 <_printf_i+0x118>
 801e680:	2d00      	cmp	r5, #0
 801e682:	d04d      	beq.n	801e720 <_printf_i+0x1b4>
 801e684:	4615      	mov	r5, r2
 801e686:	fbb6 f1f3 	udiv	r1, r6, r3
 801e68a:	fb03 6711 	mls	r7, r3, r1, r6
 801e68e:	5dc7      	ldrb	r7, [r0, r7]
 801e690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e694:	4637      	mov	r7, r6
 801e696:	42bb      	cmp	r3, r7
 801e698:	460e      	mov	r6, r1
 801e69a:	d9f4      	bls.n	801e686 <_printf_i+0x11a>
 801e69c:	2b08      	cmp	r3, #8
 801e69e:	d10b      	bne.n	801e6b8 <_printf_i+0x14c>
 801e6a0:	6823      	ldr	r3, [r4, #0]
 801e6a2:	07de      	lsls	r6, r3, #31
 801e6a4:	d508      	bpl.n	801e6b8 <_printf_i+0x14c>
 801e6a6:	6923      	ldr	r3, [r4, #16]
 801e6a8:	6861      	ldr	r1, [r4, #4]
 801e6aa:	4299      	cmp	r1, r3
 801e6ac:	bfde      	ittt	le
 801e6ae:	2330      	movle	r3, #48	; 0x30
 801e6b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e6b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e6b8:	1b52      	subs	r2, r2, r5
 801e6ba:	6122      	str	r2, [r4, #16]
 801e6bc:	f8cd a000 	str.w	sl, [sp]
 801e6c0:	464b      	mov	r3, r9
 801e6c2:	aa03      	add	r2, sp, #12
 801e6c4:	4621      	mov	r1, r4
 801e6c6:	4640      	mov	r0, r8
 801e6c8:	f7ff fee2 	bl	801e490 <_printf_common>
 801e6cc:	3001      	adds	r0, #1
 801e6ce:	d14c      	bne.n	801e76a <_printf_i+0x1fe>
 801e6d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e6d4:	b004      	add	sp, #16
 801e6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6da:	4835      	ldr	r0, [pc, #212]	; (801e7b0 <_printf_i+0x244>)
 801e6dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e6e0:	6829      	ldr	r1, [r5, #0]
 801e6e2:	6823      	ldr	r3, [r4, #0]
 801e6e4:	f851 6b04 	ldr.w	r6, [r1], #4
 801e6e8:	6029      	str	r1, [r5, #0]
 801e6ea:	061d      	lsls	r5, r3, #24
 801e6ec:	d514      	bpl.n	801e718 <_printf_i+0x1ac>
 801e6ee:	07df      	lsls	r7, r3, #31
 801e6f0:	bf44      	itt	mi
 801e6f2:	f043 0320 	orrmi.w	r3, r3, #32
 801e6f6:	6023      	strmi	r3, [r4, #0]
 801e6f8:	b91e      	cbnz	r6, 801e702 <_printf_i+0x196>
 801e6fa:	6823      	ldr	r3, [r4, #0]
 801e6fc:	f023 0320 	bic.w	r3, r3, #32
 801e700:	6023      	str	r3, [r4, #0]
 801e702:	2310      	movs	r3, #16
 801e704:	e7b0      	b.n	801e668 <_printf_i+0xfc>
 801e706:	6823      	ldr	r3, [r4, #0]
 801e708:	f043 0320 	orr.w	r3, r3, #32
 801e70c:	6023      	str	r3, [r4, #0]
 801e70e:	2378      	movs	r3, #120	; 0x78
 801e710:	4828      	ldr	r0, [pc, #160]	; (801e7b4 <_printf_i+0x248>)
 801e712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e716:	e7e3      	b.n	801e6e0 <_printf_i+0x174>
 801e718:	0659      	lsls	r1, r3, #25
 801e71a:	bf48      	it	mi
 801e71c:	b2b6      	uxthmi	r6, r6
 801e71e:	e7e6      	b.n	801e6ee <_printf_i+0x182>
 801e720:	4615      	mov	r5, r2
 801e722:	e7bb      	b.n	801e69c <_printf_i+0x130>
 801e724:	682b      	ldr	r3, [r5, #0]
 801e726:	6826      	ldr	r6, [r4, #0]
 801e728:	6961      	ldr	r1, [r4, #20]
 801e72a:	1d18      	adds	r0, r3, #4
 801e72c:	6028      	str	r0, [r5, #0]
 801e72e:	0635      	lsls	r5, r6, #24
 801e730:	681b      	ldr	r3, [r3, #0]
 801e732:	d501      	bpl.n	801e738 <_printf_i+0x1cc>
 801e734:	6019      	str	r1, [r3, #0]
 801e736:	e002      	b.n	801e73e <_printf_i+0x1d2>
 801e738:	0670      	lsls	r0, r6, #25
 801e73a:	d5fb      	bpl.n	801e734 <_printf_i+0x1c8>
 801e73c:	8019      	strh	r1, [r3, #0]
 801e73e:	2300      	movs	r3, #0
 801e740:	6123      	str	r3, [r4, #16]
 801e742:	4615      	mov	r5, r2
 801e744:	e7ba      	b.n	801e6bc <_printf_i+0x150>
 801e746:	682b      	ldr	r3, [r5, #0]
 801e748:	1d1a      	adds	r2, r3, #4
 801e74a:	602a      	str	r2, [r5, #0]
 801e74c:	681d      	ldr	r5, [r3, #0]
 801e74e:	6862      	ldr	r2, [r4, #4]
 801e750:	2100      	movs	r1, #0
 801e752:	4628      	mov	r0, r5
 801e754:	f7e1 fd44 	bl	80001e0 <memchr>
 801e758:	b108      	cbz	r0, 801e75e <_printf_i+0x1f2>
 801e75a:	1b40      	subs	r0, r0, r5
 801e75c:	6060      	str	r0, [r4, #4]
 801e75e:	6863      	ldr	r3, [r4, #4]
 801e760:	6123      	str	r3, [r4, #16]
 801e762:	2300      	movs	r3, #0
 801e764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e768:	e7a8      	b.n	801e6bc <_printf_i+0x150>
 801e76a:	6923      	ldr	r3, [r4, #16]
 801e76c:	462a      	mov	r2, r5
 801e76e:	4649      	mov	r1, r9
 801e770:	4640      	mov	r0, r8
 801e772:	47d0      	blx	sl
 801e774:	3001      	adds	r0, #1
 801e776:	d0ab      	beq.n	801e6d0 <_printf_i+0x164>
 801e778:	6823      	ldr	r3, [r4, #0]
 801e77a:	079b      	lsls	r3, r3, #30
 801e77c:	d413      	bmi.n	801e7a6 <_printf_i+0x23a>
 801e77e:	68e0      	ldr	r0, [r4, #12]
 801e780:	9b03      	ldr	r3, [sp, #12]
 801e782:	4298      	cmp	r0, r3
 801e784:	bfb8      	it	lt
 801e786:	4618      	movlt	r0, r3
 801e788:	e7a4      	b.n	801e6d4 <_printf_i+0x168>
 801e78a:	2301      	movs	r3, #1
 801e78c:	4632      	mov	r2, r6
 801e78e:	4649      	mov	r1, r9
 801e790:	4640      	mov	r0, r8
 801e792:	47d0      	blx	sl
 801e794:	3001      	adds	r0, #1
 801e796:	d09b      	beq.n	801e6d0 <_printf_i+0x164>
 801e798:	3501      	adds	r5, #1
 801e79a:	68e3      	ldr	r3, [r4, #12]
 801e79c:	9903      	ldr	r1, [sp, #12]
 801e79e:	1a5b      	subs	r3, r3, r1
 801e7a0:	42ab      	cmp	r3, r5
 801e7a2:	dcf2      	bgt.n	801e78a <_printf_i+0x21e>
 801e7a4:	e7eb      	b.n	801e77e <_printf_i+0x212>
 801e7a6:	2500      	movs	r5, #0
 801e7a8:	f104 0619 	add.w	r6, r4, #25
 801e7ac:	e7f5      	b.n	801e79a <_printf_i+0x22e>
 801e7ae:	bf00      	nop
 801e7b0:	0802a1f9 	.word	0x0802a1f9
 801e7b4:	0802a20a 	.word	0x0802a20a

0801e7b8 <__swbuf_r>:
 801e7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7ba:	460e      	mov	r6, r1
 801e7bc:	4614      	mov	r4, r2
 801e7be:	4605      	mov	r5, r0
 801e7c0:	b118      	cbz	r0, 801e7ca <__swbuf_r+0x12>
 801e7c2:	6983      	ldr	r3, [r0, #24]
 801e7c4:	b90b      	cbnz	r3, 801e7ca <__swbuf_r+0x12>
 801e7c6:	f000 f9d9 	bl	801eb7c <__sinit>
 801e7ca:	4b21      	ldr	r3, [pc, #132]	; (801e850 <__swbuf_r+0x98>)
 801e7cc:	429c      	cmp	r4, r3
 801e7ce:	d12b      	bne.n	801e828 <__swbuf_r+0x70>
 801e7d0:	686c      	ldr	r4, [r5, #4]
 801e7d2:	69a3      	ldr	r3, [r4, #24]
 801e7d4:	60a3      	str	r3, [r4, #8]
 801e7d6:	89a3      	ldrh	r3, [r4, #12]
 801e7d8:	071a      	lsls	r2, r3, #28
 801e7da:	d52f      	bpl.n	801e83c <__swbuf_r+0x84>
 801e7dc:	6923      	ldr	r3, [r4, #16]
 801e7de:	b36b      	cbz	r3, 801e83c <__swbuf_r+0x84>
 801e7e0:	6923      	ldr	r3, [r4, #16]
 801e7e2:	6820      	ldr	r0, [r4, #0]
 801e7e4:	1ac0      	subs	r0, r0, r3
 801e7e6:	6963      	ldr	r3, [r4, #20]
 801e7e8:	b2f6      	uxtb	r6, r6
 801e7ea:	4283      	cmp	r3, r0
 801e7ec:	4637      	mov	r7, r6
 801e7ee:	dc04      	bgt.n	801e7fa <__swbuf_r+0x42>
 801e7f0:	4621      	mov	r1, r4
 801e7f2:	4628      	mov	r0, r5
 801e7f4:	f000 f92e 	bl	801ea54 <_fflush_r>
 801e7f8:	bb30      	cbnz	r0, 801e848 <__swbuf_r+0x90>
 801e7fa:	68a3      	ldr	r3, [r4, #8]
 801e7fc:	3b01      	subs	r3, #1
 801e7fe:	60a3      	str	r3, [r4, #8]
 801e800:	6823      	ldr	r3, [r4, #0]
 801e802:	1c5a      	adds	r2, r3, #1
 801e804:	6022      	str	r2, [r4, #0]
 801e806:	701e      	strb	r6, [r3, #0]
 801e808:	6963      	ldr	r3, [r4, #20]
 801e80a:	3001      	adds	r0, #1
 801e80c:	4283      	cmp	r3, r0
 801e80e:	d004      	beq.n	801e81a <__swbuf_r+0x62>
 801e810:	89a3      	ldrh	r3, [r4, #12]
 801e812:	07db      	lsls	r3, r3, #31
 801e814:	d506      	bpl.n	801e824 <__swbuf_r+0x6c>
 801e816:	2e0a      	cmp	r6, #10
 801e818:	d104      	bne.n	801e824 <__swbuf_r+0x6c>
 801e81a:	4621      	mov	r1, r4
 801e81c:	4628      	mov	r0, r5
 801e81e:	f000 f919 	bl	801ea54 <_fflush_r>
 801e822:	b988      	cbnz	r0, 801e848 <__swbuf_r+0x90>
 801e824:	4638      	mov	r0, r7
 801e826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e828:	4b0a      	ldr	r3, [pc, #40]	; (801e854 <__swbuf_r+0x9c>)
 801e82a:	429c      	cmp	r4, r3
 801e82c:	d101      	bne.n	801e832 <__swbuf_r+0x7a>
 801e82e:	68ac      	ldr	r4, [r5, #8]
 801e830:	e7cf      	b.n	801e7d2 <__swbuf_r+0x1a>
 801e832:	4b09      	ldr	r3, [pc, #36]	; (801e858 <__swbuf_r+0xa0>)
 801e834:	429c      	cmp	r4, r3
 801e836:	bf08      	it	eq
 801e838:	68ec      	ldreq	r4, [r5, #12]
 801e83a:	e7ca      	b.n	801e7d2 <__swbuf_r+0x1a>
 801e83c:	4621      	mov	r1, r4
 801e83e:	4628      	mov	r0, r5
 801e840:	f000 f80c 	bl	801e85c <__swsetup_r>
 801e844:	2800      	cmp	r0, #0
 801e846:	d0cb      	beq.n	801e7e0 <__swbuf_r+0x28>
 801e848:	f04f 37ff 	mov.w	r7, #4294967295
 801e84c:	e7ea      	b.n	801e824 <__swbuf_r+0x6c>
 801e84e:	bf00      	nop
 801e850:	0802a23c 	.word	0x0802a23c
 801e854:	0802a25c 	.word	0x0802a25c
 801e858:	0802a21c 	.word	0x0802a21c

0801e85c <__swsetup_r>:
 801e85c:	4b32      	ldr	r3, [pc, #200]	; (801e928 <__swsetup_r+0xcc>)
 801e85e:	b570      	push	{r4, r5, r6, lr}
 801e860:	681d      	ldr	r5, [r3, #0]
 801e862:	4606      	mov	r6, r0
 801e864:	460c      	mov	r4, r1
 801e866:	b125      	cbz	r5, 801e872 <__swsetup_r+0x16>
 801e868:	69ab      	ldr	r3, [r5, #24]
 801e86a:	b913      	cbnz	r3, 801e872 <__swsetup_r+0x16>
 801e86c:	4628      	mov	r0, r5
 801e86e:	f000 f985 	bl	801eb7c <__sinit>
 801e872:	4b2e      	ldr	r3, [pc, #184]	; (801e92c <__swsetup_r+0xd0>)
 801e874:	429c      	cmp	r4, r3
 801e876:	d10f      	bne.n	801e898 <__swsetup_r+0x3c>
 801e878:	686c      	ldr	r4, [r5, #4]
 801e87a:	89a3      	ldrh	r3, [r4, #12]
 801e87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e880:	0719      	lsls	r1, r3, #28
 801e882:	d42c      	bmi.n	801e8de <__swsetup_r+0x82>
 801e884:	06dd      	lsls	r5, r3, #27
 801e886:	d411      	bmi.n	801e8ac <__swsetup_r+0x50>
 801e888:	2309      	movs	r3, #9
 801e88a:	6033      	str	r3, [r6, #0]
 801e88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e890:	81a3      	strh	r3, [r4, #12]
 801e892:	f04f 30ff 	mov.w	r0, #4294967295
 801e896:	e03e      	b.n	801e916 <__swsetup_r+0xba>
 801e898:	4b25      	ldr	r3, [pc, #148]	; (801e930 <__swsetup_r+0xd4>)
 801e89a:	429c      	cmp	r4, r3
 801e89c:	d101      	bne.n	801e8a2 <__swsetup_r+0x46>
 801e89e:	68ac      	ldr	r4, [r5, #8]
 801e8a0:	e7eb      	b.n	801e87a <__swsetup_r+0x1e>
 801e8a2:	4b24      	ldr	r3, [pc, #144]	; (801e934 <__swsetup_r+0xd8>)
 801e8a4:	429c      	cmp	r4, r3
 801e8a6:	bf08      	it	eq
 801e8a8:	68ec      	ldreq	r4, [r5, #12]
 801e8aa:	e7e6      	b.n	801e87a <__swsetup_r+0x1e>
 801e8ac:	0758      	lsls	r0, r3, #29
 801e8ae:	d512      	bpl.n	801e8d6 <__swsetup_r+0x7a>
 801e8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e8b2:	b141      	cbz	r1, 801e8c6 <__swsetup_r+0x6a>
 801e8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e8b8:	4299      	cmp	r1, r3
 801e8ba:	d002      	beq.n	801e8c2 <__swsetup_r+0x66>
 801e8bc:	4630      	mov	r0, r6
 801e8be:	f000 fa63 	bl	801ed88 <_free_r>
 801e8c2:	2300      	movs	r3, #0
 801e8c4:	6363      	str	r3, [r4, #52]	; 0x34
 801e8c6:	89a3      	ldrh	r3, [r4, #12]
 801e8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e8cc:	81a3      	strh	r3, [r4, #12]
 801e8ce:	2300      	movs	r3, #0
 801e8d0:	6063      	str	r3, [r4, #4]
 801e8d2:	6923      	ldr	r3, [r4, #16]
 801e8d4:	6023      	str	r3, [r4, #0]
 801e8d6:	89a3      	ldrh	r3, [r4, #12]
 801e8d8:	f043 0308 	orr.w	r3, r3, #8
 801e8dc:	81a3      	strh	r3, [r4, #12]
 801e8de:	6923      	ldr	r3, [r4, #16]
 801e8e0:	b94b      	cbnz	r3, 801e8f6 <__swsetup_r+0x9a>
 801e8e2:	89a3      	ldrh	r3, [r4, #12]
 801e8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e8ec:	d003      	beq.n	801e8f6 <__swsetup_r+0x9a>
 801e8ee:	4621      	mov	r1, r4
 801e8f0:	4630      	mov	r0, r6
 801e8f2:	f000 fa09 	bl	801ed08 <__smakebuf_r>
 801e8f6:	89a0      	ldrh	r0, [r4, #12]
 801e8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e8fc:	f010 0301 	ands.w	r3, r0, #1
 801e900:	d00a      	beq.n	801e918 <__swsetup_r+0xbc>
 801e902:	2300      	movs	r3, #0
 801e904:	60a3      	str	r3, [r4, #8]
 801e906:	6963      	ldr	r3, [r4, #20]
 801e908:	425b      	negs	r3, r3
 801e90a:	61a3      	str	r3, [r4, #24]
 801e90c:	6923      	ldr	r3, [r4, #16]
 801e90e:	b943      	cbnz	r3, 801e922 <__swsetup_r+0xc6>
 801e910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e914:	d1ba      	bne.n	801e88c <__swsetup_r+0x30>
 801e916:	bd70      	pop	{r4, r5, r6, pc}
 801e918:	0781      	lsls	r1, r0, #30
 801e91a:	bf58      	it	pl
 801e91c:	6963      	ldrpl	r3, [r4, #20]
 801e91e:	60a3      	str	r3, [r4, #8]
 801e920:	e7f4      	b.n	801e90c <__swsetup_r+0xb0>
 801e922:	2000      	movs	r0, #0
 801e924:	e7f7      	b.n	801e916 <__swsetup_r+0xba>
 801e926:	bf00      	nop
 801e928:	200001ec 	.word	0x200001ec
 801e92c:	0802a23c 	.word	0x0802a23c
 801e930:	0802a25c 	.word	0x0802a25c
 801e934:	0802a21c 	.word	0x0802a21c

0801e938 <abort>:
 801e938:	b508      	push	{r3, lr}
 801e93a:	2006      	movs	r0, #6
 801e93c:	f000 fb3c 	bl	801efb8 <raise>
 801e940:	2001      	movs	r0, #1
 801e942:	f7f7 fea1 	bl	8016688 <_exit>
	...

0801e948 <__sflush_r>:
 801e948:	898a      	ldrh	r2, [r1, #12]
 801e94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e94e:	4605      	mov	r5, r0
 801e950:	0710      	lsls	r0, r2, #28
 801e952:	460c      	mov	r4, r1
 801e954:	d458      	bmi.n	801ea08 <__sflush_r+0xc0>
 801e956:	684b      	ldr	r3, [r1, #4]
 801e958:	2b00      	cmp	r3, #0
 801e95a:	dc05      	bgt.n	801e968 <__sflush_r+0x20>
 801e95c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e95e:	2b00      	cmp	r3, #0
 801e960:	dc02      	bgt.n	801e968 <__sflush_r+0x20>
 801e962:	2000      	movs	r0, #0
 801e964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e96a:	2e00      	cmp	r6, #0
 801e96c:	d0f9      	beq.n	801e962 <__sflush_r+0x1a>
 801e96e:	2300      	movs	r3, #0
 801e970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e974:	682f      	ldr	r7, [r5, #0]
 801e976:	602b      	str	r3, [r5, #0]
 801e978:	d032      	beq.n	801e9e0 <__sflush_r+0x98>
 801e97a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e97c:	89a3      	ldrh	r3, [r4, #12]
 801e97e:	075a      	lsls	r2, r3, #29
 801e980:	d505      	bpl.n	801e98e <__sflush_r+0x46>
 801e982:	6863      	ldr	r3, [r4, #4]
 801e984:	1ac0      	subs	r0, r0, r3
 801e986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e988:	b10b      	cbz	r3, 801e98e <__sflush_r+0x46>
 801e98a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e98c:	1ac0      	subs	r0, r0, r3
 801e98e:	2300      	movs	r3, #0
 801e990:	4602      	mov	r2, r0
 801e992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e994:	6a21      	ldr	r1, [r4, #32]
 801e996:	4628      	mov	r0, r5
 801e998:	47b0      	blx	r6
 801e99a:	1c43      	adds	r3, r0, #1
 801e99c:	89a3      	ldrh	r3, [r4, #12]
 801e99e:	d106      	bne.n	801e9ae <__sflush_r+0x66>
 801e9a0:	6829      	ldr	r1, [r5, #0]
 801e9a2:	291d      	cmp	r1, #29
 801e9a4:	d82c      	bhi.n	801ea00 <__sflush_r+0xb8>
 801e9a6:	4a2a      	ldr	r2, [pc, #168]	; (801ea50 <__sflush_r+0x108>)
 801e9a8:	40ca      	lsrs	r2, r1
 801e9aa:	07d6      	lsls	r6, r2, #31
 801e9ac:	d528      	bpl.n	801ea00 <__sflush_r+0xb8>
 801e9ae:	2200      	movs	r2, #0
 801e9b0:	6062      	str	r2, [r4, #4]
 801e9b2:	04d9      	lsls	r1, r3, #19
 801e9b4:	6922      	ldr	r2, [r4, #16]
 801e9b6:	6022      	str	r2, [r4, #0]
 801e9b8:	d504      	bpl.n	801e9c4 <__sflush_r+0x7c>
 801e9ba:	1c42      	adds	r2, r0, #1
 801e9bc:	d101      	bne.n	801e9c2 <__sflush_r+0x7a>
 801e9be:	682b      	ldr	r3, [r5, #0]
 801e9c0:	b903      	cbnz	r3, 801e9c4 <__sflush_r+0x7c>
 801e9c2:	6560      	str	r0, [r4, #84]	; 0x54
 801e9c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e9c6:	602f      	str	r7, [r5, #0]
 801e9c8:	2900      	cmp	r1, #0
 801e9ca:	d0ca      	beq.n	801e962 <__sflush_r+0x1a>
 801e9cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e9d0:	4299      	cmp	r1, r3
 801e9d2:	d002      	beq.n	801e9da <__sflush_r+0x92>
 801e9d4:	4628      	mov	r0, r5
 801e9d6:	f000 f9d7 	bl	801ed88 <_free_r>
 801e9da:	2000      	movs	r0, #0
 801e9dc:	6360      	str	r0, [r4, #52]	; 0x34
 801e9de:	e7c1      	b.n	801e964 <__sflush_r+0x1c>
 801e9e0:	6a21      	ldr	r1, [r4, #32]
 801e9e2:	2301      	movs	r3, #1
 801e9e4:	4628      	mov	r0, r5
 801e9e6:	47b0      	blx	r6
 801e9e8:	1c41      	adds	r1, r0, #1
 801e9ea:	d1c7      	bne.n	801e97c <__sflush_r+0x34>
 801e9ec:	682b      	ldr	r3, [r5, #0]
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	d0c4      	beq.n	801e97c <__sflush_r+0x34>
 801e9f2:	2b1d      	cmp	r3, #29
 801e9f4:	d001      	beq.n	801e9fa <__sflush_r+0xb2>
 801e9f6:	2b16      	cmp	r3, #22
 801e9f8:	d101      	bne.n	801e9fe <__sflush_r+0xb6>
 801e9fa:	602f      	str	r7, [r5, #0]
 801e9fc:	e7b1      	b.n	801e962 <__sflush_r+0x1a>
 801e9fe:	89a3      	ldrh	r3, [r4, #12]
 801ea00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ea04:	81a3      	strh	r3, [r4, #12]
 801ea06:	e7ad      	b.n	801e964 <__sflush_r+0x1c>
 801ea08:	690f      	ldr	r7, [r1, #16]
 801ea0a:	2f00      	cmp	r7, #0
 801ea0c:	d0a9      	beq.n	801e962 <__sflush_r+0x1a>
 801ea0e:	0793      	lsls	r3, r2, #30
 801ea10:	680e      	ldr	r6, [r1, #0]
 801ea12:	bf08      	it	eq
 801ea14:	694b      	ldreq	r3, [r1, #20]
 801ea16:	600f      	str	r7, [r1, #0]
 801ea18:	bf18      	it	ne
 801ea1a:	2300      	movne	r3, #0
 801ea1c:	eba6 0807 	sub.w	r8, r6, r7
 801ea20:	608b      	str	r3, [r1, #8]
 801ea22:	f1b8 0f00 	cmp.w	r8, #0
 801ea26:	dd9c      	ble.n	801e962 <__sflush_r+0x1a>
 801ea28:	6a21      	ldr	r1, [r4, #32]
 801ea2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ea2c:	4643      	mov	r3, r8
 801ea2e:	463a      	mov	r2, r7
 801ea30:	4628      	mov	r0, r5
 801ea32:	47b0      	blx	r6
 801ea34:	2800      	cmp	r0, #0
 801ea36:	dc06      	bgt.n	801ea46 <__sflush_r+0xfe>
 801ea38:	89a3      	ldrh	r3, [r4, #12]
 801ea3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ea3e:	81a3      	strh	r3, [r4, #12]
 801ea40:	f04f 30ff 	mov.w	r0, #4294967295
 801ea44:	e78e      	b.n	801e964 <__sflush_r+0x1c>
 801ea46:	4407      	add	r7, r0
 801ea48:	eba8 0800 	sub.w	r8, r8, r0
 801ea4c:	e7e9      	b.n	801ea22 <__sflush_r+0xda>
 801ea4e:	bf00      	nop
 801ea50:	20400001 	.word	0x20400001

0801ea54 <_fflush_r>:
 801ea54:	b538      	push	{r3, r4, r5, lr}
 801ea56:	690b      	ldr	r3, [r1, #16]
 801ea58:	4605      	mov	r5, r0
 801ea5a:	460c      	mov	r4, r1
 801ea5c:	b913      	cbnz	r3, 801ea64 <_fflush_r+0x10>
 801ea5e:	2500      	movs	r5, #0
 801ea60:	4628      	mov	r0, r5
 801ea62:	bd38      	pop	{r3, r4, r5, pc}
 801ea64:	b118      	cbz	r0, 801ea6e <_fflush_r+0x1a>
 801ea66:	6983      	ldr	r3, [r0, #24]
 801ea68:	b90b      	cbnz	r3, 801ea6e <_fflush_r+0x1a>
 801ea6a:	f000 f887 	bl	801eb7c <__sinit>
 801ea6e:	4b14      	ldr	r3, [pc, #80]	; (801eac0 <_fflush_r+0x6c>)
 801ea70:	429c      	cmp	r4, r3
 801ea72:	d11b      	bne.n	801eaac <_fflush_r+0x58>
 801ea74:	686c      	ldr	r4, [r5, #4]
 801ea76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d0ef      	beq.n	801ea5e <_fflush_r+0xa>
 801ea7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ea80:	07d0      	lsls	r0, r2, #31
 801ea82:	d404      	bmi.n	801ea8e <_fflush_r+0x3a>
 801ea84:	0599      	lsls	r1, r3, #22
 801ea86:	d402      	bmi.n	801ea8e <_fflush_r+0x3a>
 801ea88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea8a:	f000 f915 	bl	801ecb8 <__retarget_lock_acquire_recursive>
 801ea8e:	4628      	mov	r0, r5
 801ea90:	4621      	mov	r1, r4
 801ea92:	f7ff ff59 	bl	801e948 <__sflush_r>
 801ea96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea98:	07da      	lsls	r2, r3, #31
 801ea9a:	4605      	mov	r5, r0
 801ea9c:	d4e0      	bmi.n	801ea60 <_fflush_r+0xc>
 801ea9e:	89a3      	ldrh	r3, [r4, #12]
 801eaa0:	059b      	lsls	r3, r3, #22
 801eaa2:	d4dd      	bmi.n	801ea60 <_fflush_r+0xc>
 801eaa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eaa6:	f000 f908 	bl	801ecba <__retarget_lock_release_recursive>
 801eaaa:	e7d9      	b.n	801ea60 <_fflush_r+0xc>
 801eaac:	4b05      	ldr	r3, [pc, #20]	; (801eac4 <_fflush_r+0x70>)
 801eaae:	429c      	cmp	r4, r3
 801eab0:	d101      	bne.n	801eab6 <_fflush_r+0x62>
 801eab2:	68ac      	ldr	r4, [r5, #8]
 801eab4:	e7df      	b.n	801ea76 <_fflush_r+0x22>
 801eab6:	4b04      	ldr	r3, [pc, #16]	; (801eac8 <_fflush_r+0x74>)
 801eab8:	429c      	cmp	r4, r3
 801eaba:	bf08      	it	eq
 801eabc:	68ec      	ldreq	r4, [r5, #12]
 801eabe:	e7da      	b.n	801ea76 <_fflush_r+0x22>
 801eac0:	0802a23c 	.word	0x0802a23c
 801eac4:	0802a25c 	.word	0x0802a25c
 801eac8:	0802a21c 	.word	0x0802a21c

0801eacc <std>:
 801eacc:	2300      	movs	r3, #0
 801eace:	b510      	push	{r4, lr}
 801ead0:	4604      	mov	r4, r0
 801ead2:	e9c0 3300 	strd	r3, r3, [r0]
 801ead6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801eada:	6083      	str	r3, [r0, #8]
 801eadc:	8181      	strh	r1, [r0, #12]
 801eade:	6643      	str	r3, [r0, #100]	; 0x64
 801eae0:	81c2      	strh	r2, [r0, #14]
 801eae2:	6183      	str	r3, [r0, #24]
 801eae4:	4619      	mov	r1, r3
 801eae6:	2208      	movs	r2, #8
 801eae8:	305c      	adds	r0, #92	; 0x5c
 801eaea:	f7ff fb6f 	bl	801e1cc <memset>
 801eaee:	4b05      	ldr	r3, [pc, #20]	; (801eb04 <std+0x38>)
 801eaf0:	6263      	str	r3, [r4, #36]	; 0x24
 801eaf2:	4b05      	ldr	r3, [pc, #20]	; (801eb08 <std+0x3c>)
 801eaf4:	62a3      	str	r3, [r4, #40]	; 0x28
 801eaf6:	4b05      	ldr	r3, [pc, #20]	; (801eb0c <std+0x40>)
 801eaf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801eafa:	4b05      	ldr	r3, [pc, #20]	; (801eb10 <std+0x44>)
 801eafc:	6224      	str	r4, [r4, #32]
 801eafe:	6323      	str	r3, [r4, #48]	; 0x30
 801eb00:	bd10      	pop	{r4, pc}
 801eb02:	bf00      	nop
 801eb04:	0801eff1 	.word	0x0801eff1
 801eb08:	0801f013 	.word	0x0801f013
 801eb0c:	0801f04b 	.word	0x0801f04b
 801eb10:	0801f06f 	.word	0x0801f06f

0801eb14 <_cleanup_r>:
 801eb14:	4901      	ldr	r1, [pc, #4]	; (801eb1c <_cleanup_r+0x8>)
 801eb16:	f000 b8af 	b.w	801ec78 <_fwalk_reent>
 801eb1a:	bf00      	nop
 801eb1c:	0801ea55 	.word	0x0801ea55

0801eb20 <__sfmoreglue>:
 801eb20:	b570      	push	{r4, r5, r6, lr}
 801eb22:	2268      	movs	r2, #104	; 0x68
 801eb24:	1e4d      	subs	r5, r1, #1
 801eb26:	4355      	muls	r5, r2
 801eb28:	460e      	mov	r6, r1
 801eb2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801eb2e:	f000 f997 	bl	801ee60 <_malloc_r>
 801eb32:	4604      	mov	r4, r0
 801eb34:	b140      	cbz	r0, 801eb48 <__sfmoreglue+0x28>
 801eb36:	2100      	movs	r1, #0
 801eb38:	e9c0 1600 	strd	r1, r6, [r0]
 801eb3c:	300c      	adds	r0, #12
 801eb3e:	60a0      	str	r0, [r4, #8]
 801eb40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801eb44:	f7ff fb42 	bl	801e1cc <memset>
 801eb48:	4620      	mov	r0, r4
 801eb4a:	bd70      	pop	{r4, r5, r6, pc}

0801eb4c <__sfp_lock_acquire>:
 801eb4c:	4801      	ldr	r0, [pc, #4]	; (801eb54 <__sfp_lock_acquire+0x8>)
 801eb4e:	f000 b8b3 	b.w	801ecb8 <__retarget_lock_acquire_recursive>
 801eb52:	bf00      	nop
 801eb54:	200007f9 	.word	0x200007f9

0801eb58 <__sfp_lock_release>:
 801eb58:	4801      	ldr	r0, [pc, #4]	; (801eb60 <__sfp_lock_release+0x8>)
 801eb5a:	f000 b8ae 	b.w	801ecba <__retarget_lock_release_recursive>
 801eb5e:	bf00      	nop
 801eb60:	200007f9 	.word	0x200007f9

0801eb64 <__sinit_lock_acquire>:
 801eb64:	4801      	ldr	r0, [pc, #4]	; (801eb6c <__sinit_lock_acquire+0x8>)
 801eb66:	f000 b8a7 	b.w	801ecb8 <__retarget_lock_acquire_recursive>
 801eb6a:	bf00      	nop
 801eb6c:	200007fa 	.word	0x200007fa

0801eb70 <__sinit_lock_release>:
 801eb70:	4801      	ldr	r0, [pc, #4]	; (801eb78 <__sinit_lock_release+0x8>)
 801eb72:	f000 b8a2 	b.w	801ecba <__retarget_lock_release_recursive>
 801eb76:	bf00      	nop
 801eb78:	200007fa 	.word	0x200007fa

0801eb7c <__sinit>:
 801eb7c:	b510      	push	{r4, lr}
 801eb7e:	4604      	mov	r4, r0
 801eb80:	f7ff fff0 	bl	801eb64 <__sinit_lock_acquire>
 801eb84:	69a3      	ldr	r3, [r4, #24]
 801eb86:	b11b      	cbz	r3, 801eb90 <__sinit+0x14>
 801eb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eb8c:	f7ff bff0 	b.w	801eb70 <__sinit_lock_release>
 801eb90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801eb94:	6523      	str	r3, [r4, #80]	; 0x50
 801eb96:	4b13      	ldr	r3, [pc, #76]	; (801ebe4 <__sinit+0x68>)
 801eb98:	4a13      	ldr	r2, [pc, #76]	; (801ebe8 <__sinit+0x6c>)
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	62a2      	str	r2, [r4, #40]	; 0x28
 801eb9e:	42a3      	cmp	r3, r4
 801eba0:	bf04      	itt	eq
 801eba2:	2301      	moveq	r3, #1
 801eba4:	61a3      	streq	r3, [r4, #24]
 801eba6:	4620      	mov	r0, r4
 801eba8:	f000 f820 	bl	801ebec <__sfp>
 801ebac:	6060      	str	r0, [r4, #4]
 801ebae:	4620      	mov	r0, r4
 801ebb0:	f000 f81c 	bl	801ebec <__sfp>
 801ebb4:	60a0      	str	r0, [r4, #8]
 801ebb6:	4620      	mov	r0, r4
 801ebb8:	f000 f818 	bl	801ebec <__sfp>
 801ebbc:	2200      	movs	r2, #0
 801ebbe:	60e0      	str	r0, [r4, #12]
 801ebc0:	2104      	movs	r1, #4
 801ebc2:	6860      	ldr	r0, [r4, #4]
 801ebc4:	f7ff ff82 	bl	801eacc <std>
 801ebc8:	68a0      	ldr	r0, [r4, #8]
 801ebca:	2201      	movs	r2, #1
 801ebcc:	2109      	movs	r1, #9
 801ebce:	f7ff ff7d 	bl	801eacc <std>
 801ebd2:	68e0      	ldr	r0, [r4, #12]
 801ebd4:	2202      	movs	r2, #2
 801ebd6:	2112      	movs	r1, #18
 801ebd8:	f7ff ff78 	bl	801eacc <std>
 801ebdc:	2301      	movs	r3, #1
 801ebde:	61a3      	str	r3, [r4, #24]
 801ebe0:	e7d2      	b.n	801eb88 <__sinit+0xc>
 801ebe2:	bf00      	nop
 801ebe4:	0802a1e4 	.word	0x0802a1e4
 801ebe8:	0801eb15 	.word	0x0801eb15

0801ebec <__sfp>:
 801ebec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebee:	4607      	mov	r7, r0
 801ebf0:	f7ff ffac 	bl	801eb4c <__sfp_lock_acquire>
 801ebf4:	4b1e      	ldr	r3, [pc, #120]	; (801ec70 <__sfp+0x84>)
 801ebf6:	681e      	ldr	r6, [r3, #0]
 801ebf8:	69b3      	ldr	r3, [r6, #24]
 801ebfa:	b913      	cbnz	r3, 801ec02 <__sfp+0x16>
 801ebfc:	4630      	mov	r0, r6
 801ebfe:	f7ff ffbd 	bl	801eb7c <__sinit>
 801ec02:	3648      	adds	r6, #72	; 0x48
 801ec04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ec08:	3b01      	subs	r3, #1
 801ec0a:	d503      	bpl.n	801ec14 <__sfp+0x28>
 801ec0c:	6833      	ldr	r3, [r6, #0]
 801ec0e:	b30b      	cbz	r3, 801ec54 <__sfp+0x68>
 801ec10:	6836      	ldr	r6, [r6, #0]
 801ec12:	e7f7      	b.n	801ec04 <__sfp+0x18>
 801ec14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ec18:	b9d5      	cbnz	r5, 801ec50 <__sfp+0x64>
 801ec1a:	4b16      	ldr	r3, [pc, #88]	; (801ec74 <__sfp+0x88>)
 801ec1c:	60e3      	str	r3, [r4, #12]
 801ec1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ec22:	6665      	str	r5, [r4, #100]	; 0x64
 801ec24:	f000 f847 	bl	801ecb6 <__retarget_lock_init_recursive>
 801ec28:	f7ff ff96 	bl	801eb58 <__sfp_lock_release>
 801ec2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ec30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ec34:	6025      	str	r5, [r4, #0]
 801ec36:	61a5      	str	r5, [r4, #24]
 801ec38:	2208      	movs	r2, #8
 801ec3a:	4629      	mov	r1, r5
 801ec3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ec40:	f7ff fac4 	bl	801e1cc <memset>
 801ec44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ec48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ec4c:	4620      	mov	r0, r4
 801ec4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec50:	3468      	adds	r4, #104	; 0x68
 801ec52:	e7d9      	b.n	801ec08 <__sfp+0x1c>
 801ec54:	2104      	movs	r1, #4
 801ec56:	4638      	mov	r0, r7
 801ec58:	f7ff ff62 	bl	801eb20 <__sfmoreglue>
 801ec5c:	4604      	mov	r4, r0
 801ec5e:	6030      	str	r0, [r6, #0]
 801ec60:	2800      	cmp	r0, #0
 801ec62:	d1d5      	bne.n	801ec10 <__sfp+0x24>
 801ec64:	f7ff ff78 	bl	801eb58 <__sfp_lock_release>
 801ec68:	230c      	movs	r3, #12
 801ec6a:	603b      	str	r3, [r7, #0]
 801ec6c:	e7ee      	b.n	801ec4c <__sfp+0x60>
 801ec6e:	bf00      	nop
 801ec70:	0802a1e4 	.word	0x0802a1e4
 801ec74:	ffff0001 	.word	0xffff0001

0801ec78 <_fwalk_reent>:
 801ec78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec7c:	4606      	mov	r6, r0
 801ec7e:	4688      	mov	r8, r1
 801ec80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ec84:	2700      	movs	r7, #0
 801ec86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ec8a:	f1b9 0901 	subs.w	r9, r9, #1
 801ec8e:	d505      	bpl.n	801ec9c <_fwalk_reent+0x24>
 801ec90:	6824      	ldr	r4, [r4, #0]
 801ec92:	2c00      	cmp	r4, #0
 801ec94:	d1f7      	bne.n	801ec86 <_fwalk_reent+0xe>
 801ec96:	4638      	mov	r0, r7
 801ec98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec9c:	89ab      	ldrh	r3, [r5, #12]
 801ec9e:	2b01      	cmp	r3, #1
 801eca0:	d907      	bls.n	801ecb2 <_fwalk_reent+0x3a>
 801eca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801eca6:	3301      	adds	r3, #1
 801eca8:	d003      	beq.n	801ecb2 <_fwalk_reent+0x3a>
 801ecaa:	4629      	mov	r1, r5
 801ecac:	4630      	mov	r0, r6
 801ecae:	47c0      	blx	r8
 801ecb0:	4307      	orrs	r7, r0
 801ecb2:	3568      	adds	r5, #104	; 0x68
 801ecb4:	e7e9      	b.n	801ec8a <_fwalk_reent+0x12>

0801ecb6 <__retarget_lock_init_recursive>:
 801ecb6:	4770      	bx	lr

0801ecb8 <__retarget_lock_acquire_recursive>:
 801ecb8:	4770      	bx	lr

0801ecba <__retarget_lock_release_recursive>:
 801ecba:	4770      	bx	lr

0801ecbc <__swhatbuf_r>:
 801ecbc:	b570      	push	{r4, r5, r6, lr}
 801ecbe:	460e      	mov	r6, r1
 801ecc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ecc4:	2900      	cmp	r1, #0
 801ecc6:	b096      	sub	sp, #88	; 0x58
 801ecc8:	4614      	mov	r4, r2
 801ecca:	461d      	mov	r5, r3
 801eccc:	da08      	bge.n	801ece0 <__swhatbuf_r+0x24>
 801ecce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ecd2:	2200      	movs	r2, #0
 801ecd4:	602a      	str	r2, [r5, #0]
 801ecd6:	061a      	lsls	r2, r3, #24
 801ecd8:	d410      	bmi.n	801ecfc <__swhatbuf_r+0x40>
 801ecda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ecde:	e00e      	b.n	801ecfe <__swhatbuf_r+0x42>
 801ece0:	466a      	mov	r2, sp
 801ece2:	f000 f9eb 	bl	801f0bc <_fstat_r>
 801ece6:	2800      	cmp	r0, #0
 801ece8:	dbf1      	blt.n	801ecce <__swhatbuf_r+0x12>
 801ecea:	9a01      	ldr	r2, [sp, #4]
 801ecec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ecf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ecf4:	425a      	negs	r2, r3
 801ecf6:	415a      	adcs	r2, r3
 801ecf8:	602a      	str	r2, [r5, #0]
 801ecfa:	e7ee      	b.n	801ecda <__swhatbuf_r+0x1e>
 801ecfc:	2340      	movs	r3, #64	; 0x40
 801ecfe:	2000      	movs	r0, #0
 801ed00:	6023      	str	r3, [r4, #0]
 801ed02:	b016      	add	sp, #88	; 0x58
 801ed04:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ed08 <__smakebuf_r>:
 801ed08:	898b      	ldrh	r3, [r1, #12]
 801ed0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ed0c:	079d      	lsls	r5, r3, #30
 801ed0e:	4606      	mov	r6, r0
 801ed10:	460c      	mov	r4, r1
 801ed12:	d507      	bpl.n	801ed24 <__smakebuf_r+0x1c>
 801ed14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ed18:	6023      	str	r3, [r4, #0]
 801ed1a:	6123      	str	r3, [r4, #16]
 801ed1c:	2301      	movs	r3, #1
 801ed1e:	6163      	str	r3, [r4, #20]
 801ed20:	b002      	add	sp, #8
 801ed22:	bd70      	pop	{r4, r5, r6, pc}
 801ed24:	ab01      	add	r3, sp, #4
 801ed26:	466a      	mov	r2, sp
 801ed28:	f7ff ffc8 	bl	801ecbc <__swhatbuf_r>
 801ed2c:	9900      	ldr	r1, [sp, #0]
 801ed2e:	4605      	mov	r5, r0
 801ed30:	4630      	mov	r0, r6
 801ed32:	f000 f895 	bl	801ee60 <_malloc_r>
 801ed36:	b948      	cbnz	r0, 801ed4c <__smakebuf_r+0x44>
 801ed38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ed3c:	059a      	lsls	r2, r3, #22
 801ed3e:	d4ef      	bmi.n	801ed20 <__smakebuf_r+0x18>
 801ed40:	f023 0303 	bic.w	r3, r3, #3
 801ed44:	f043 0302 	orr.w	r3, r3, #2
 801ed48:	81a3      	strh	r3, [r4, #12]
 801ed4a:	e7e3      	b.n	801ed14 <__smakebuf_r+0xc>
 801ed4c:	4b0d      	ldr	r3, [pc, #52]	; (801ed84 <__smakebuf_r+0x7c>)
 801ed4e:	62b3      	str	r3, [r6, #40]	; 0x28
 801ed50:	89a3      	ldrh	r3, [r4, #12]
 801ed52:	6020      	str	r0, [r4, #0]
 801ed54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ed58:	81a3      	strh	r3, [r4, #12]
 801ed5a:	9b00      	ldr	r3, [sp, #0]
 801ed5c:	6163      	str	r3, [r4, #20]
 801ed5e:	9b01      	ldr	r3, [sp, #4]
 801ed60:	6120      	str	r0, [r4, #16]
 801ed62:	b15b      	cbz	r3, 801ed7c <__smakebuf_r+0x74>
 801ed64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ed68:	4630      	mov	r0, r6
 801ed6a:	f000 f9b9 	bl	801f0e0 <_isatty_r>
 801ed6e:	b128      	cbz	r0, 801ed7c <__smakebuf_r+0x74>
 801ed70:	89a3      	ldrh	r3, [r4, #12]
 801ed72:	f023 0303 	bic.w	r3, r3, #3
 801ed76:	f043 0301 	orr.w	r3, r3, #1
 801ed7a:	81a3      	strh	r3, [r4, #12]
 801ed7c:	89a0      	ldrh	r0, [r4, #12]
 801ed7e:	4305      	orrs	r5, r0
 801ed80:	81a5      	strh	r5, [r4, #12]
 801ed82:	e7cd      	b.n	801ed20 <__smakebuf_r+0x18>
 801ed84:	0801eb15 	.word	0x0801eb15

0801ed88 <_free_r>:
 801ed88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ed8a:	2900      	cmp	r1, #0
 801ed8c:	d044      	beq.n	801ee18 <_free_r+0x90>
 801ed8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ed92:	9001      	str	r0, [sp, #4]
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	f1a1 0404 	sub.w	r4, r1, #4
 801ed9a:	bfb8      	it	lt
 801ed9c:	18e4      	addlt	r4, r4, r3
 801ed9e:	f000 f9c1 	bl	801f124 <__malloc_lock>
 801eda2:	4a1e      	ldr	r2, [pc, #120]	; (801ee1c <_free_r+0x94>)
 801eda4:	9801      	ldr	r0, [sp, #4]
 801eda6:	6813      	ldr	r3, [r2, #0]
 801eda8:	b933      	cbnz	r3, 801edb8 <_free_r+0x30>
 801edaa:	6063      	str	r3, [r4, #4]
 801edac:	6014      	str	r4, [r2, #0]
 801edae:	b003      	add	sp, #12
 801edb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801edb4:	f000 b9bc 	b.w	801f130 <__malloc_unlock>
 801edb8:	42a3      	cmp	r3, r4
 801edba:	d908      	bls.n	801edce <_free_r+0x46>
 801edbc:	6825      	ldr	r5, [r4, #0]
 801edbe:	1961      	adds	r1, r4, r5
 801edc0:	428b      	cmp	r3, r1
 801edc2:	bf01      	itttt	eq
 801edc4:	6819      	ldreq	r1, [r3, #0]
 801edc6:	685b      	ldreq	r3, [r3, #4]
 801edc8:	1949      	addeq	r1, r1, r5
 801edca:	6021      	streq	r1, [r4, #0]
 801edcc:	e7ed      	b.n	801edaa <_free_r+0x22>
 801edce:	461a      	mov	r2, r3
 801edd0:	685b      	ldr	r3, [r3, #4]
 801edd2:	b10b      	cbz	r3, 801edd8 <_free_r+0x50>
 801edd4:	42a3      	cmp	r3, r4
 801edd6:	d9fa      	bls.n	801edce <_free_r+0x46>
 801edd8:	6811      	ldr	r1, [r2, #0]
 801edda:	1855      	adds	r5, r2, r1
 801eddc:	42a5      	cmp	r5, r4
 801edde:	d10b      	bne.n	801edf8 <_free_r+0x70>
 801ede0:	6824      	ldr	r4, [r4, #0]
 801ede2:	4421      	add	r1, r4
 801ede4:	1854      	adds	r4, r2, r1
 801ede6:	42a3      	cmp	r3, r4
 801ede8:	6011      	str	r1, [r2, #0]
 801edea:	d1e0      	bne.n	801edae <_free_r+0x26>
 801edec:	681c      	ldr	r4, [r3, #0]
 801edee:	685b      	ldr	r3, [r3, #4]
 801edf0:	6053      	str	r3, [r2, #4]
 801edf2:	4421      	add	r1, r4
 801edf4:	6011      	str	r1, [r2, #0]
 801edf6:	e7da      	b.n	801edae <_free_r+0x26>
 801edf8:	d902      	bls.n	801ee00 <_free_r+0x78>
 801edfa:	230c      	movs	r3, #12
 801edfc:	6003      	str	r3, [r0, #0]
 801edfe:	e7d6      	b.n	801edae <_free_r+0x26>
 801ee00:	6825      	ldr	r5, [r4, #0]
 801ee02:	1961      	adds	r1, r4, r5
 801ee04:	428b      	cmp	r3, r1
 801ee06:	bf04      	itt	eq
 801ee08:	6819      	ldreq	r1, [r3, #0]
 801ee0a:	685b      	ldreq	r3, [r3, #4]
 801ee0c:	6063      	str	r3, [r4, #4]
 801ee0e:	bf04      	itt	eq
 801ee10:	1949      	addeq	r1, r1, r5
 801ee12:	6021      	streq	r1, [r4, #0]
 801ee14:	6054      	str	r4, [r2, #4]
 801ee16:	e7ca      	b.n	801edae <_free_r+0x26>
 801ee18:	b003      	add	sp, #12
 801ee1a:	bd30      	pop	{r4, r5, pc}
 801ee1c:	200007fc 	.word	0x200007fc

0801ee20 <sbrk_aligned>:
 801ee20:	b570      	push	{r4, r5, r6, lr}
 801ee22:	4e0e      	ldr	r6, [pc, #56]	; (801ee5c <sbrk_aligned+0x3c>)
 801ee24:	460c      	mov	r4, r1
 801ee26:	6831      	ldr	r1, [r6, #0]
 801ee28:	4605      	mov	r5, r0
 801ee2a:	b911      	cbnz	r1, 801ee32 <sbrk_aligned+0x12>
 801ee2c:	f000 f88c 	bl	801ef48 <_sbrk_r>
 801ee30:	6030      	str	r0, [r6, #0]
 801ee32:	4621      	mov	r1, r4
 801ee34:	4628      	mov	r0, r5
 801ee36:	f000 f887 	bl	801ef48 <_sbrk_r>
 801ee3a:	1c43      	adds	r3, r0, #1
 801ee3c:	d00a      	beq.n	801ee54 <sbrk_aligned+0x34>
 801ee3e:	1cc4      	adds	r4, r0, #3
 801ee40:	f024 0403 	bic.w	r4, r4, #3
 801ee44:	42a0      	cmp	r0, r4
 801ee46:	d007      	beq.n	801ee58 <sbrk_aligned+0x38>
 801ee48:	1a21      	subs	r1, r4, r0
 801ee4a:	4628      	mov	r0, r5
 801ee4c:	f000 f87c 	bl	801ef48 <_sbrk_r>
 801ee50:	3001      	adds	r0, #1
 801ee52:	d101      	bne.n	801ee58 <sbrk_aligned+0x38>
 801ee54:	f04f 34ff 	mov.w	r4, #4294967295
 801ee58:	4620      	mov	r0, r4
 801ee5a:	bd70      	pop	{r4, r5, r6, pc}
 801ee5c:	20000800 	.word	0x20000800

0801ee60 <_malloc_r>:
 801ee60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee64:	1ccd      	adds	r5, r1, #3
 801ee66:	f025 0503 	bic.w	r5, r5, #3
 801ee6a:	3508      	adds	r5, #8
 801ee6c:	2d0c      	cmp	r5, #12
 801ee6e:	bf38      	it	cc
 801ee70:	250c      	movcc	r5, #12
 801ee72:	2d00      	cmp	r5, #0
 801ee74:	4607      	mov	r7, r0
 801ee76:	db01      	blt.n	801ee7c <_malloc_r+0x1c>
 801ee78:	42a9      	cmp	r1, r5
 801ee7a:	d905      	bls.n	801ee88 <_malloc_r+0x28>
 801ee7c:	230c      	movs	r3, #12
 801ee7e:	603b      	str	r3, [r7, #0]
 801ee80:	2600      	movs	r6, #0
 801ee82:	4630      	mov	r0, r6
 801ee84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee88:	4e2e      	ldr	r6, [pc, #184]	; (801ef44 <_malloc_r+0xe4>)
 801ee8a:	f000 f94b 	bl	801f124 <__malloc_lock>
 801ee8e:	6833      	ldr	r3, [r6, #0]
 801ee90:	461c      	mov	r4, r3
 801ee92:	bb34      	cbnz	r4, 801eee2 <_malloc_r+0x82>
 801ee94:	4629      	mov	r1, r5
 801ee96:	4638      	mov	r0, r7
 801ee98:	f7ff ffc2 	bl	801ee20 <sbrk_aligned>
 801ee9c:	1c43      	adds	r3, r0, #1
 801ee9e:	4604      	mov	r4, r0
 801eea0:	d14d      	bne.n	801ef3e <_malloc_r+0xde>
 801eea2:	6834      	ldr	r4, [r6, #0]
 801eea4:	4626      	mov	r6, r4
 801eea6:	2e00      	cmp	r6, #0
 801eea8:	d140      	bne.n	801ef2c <_malloc_r+0xcc>
 801eeaa:	6823      	ldr	r3, [r4, #0]
 801eeac:	4631      	mov	r1, r6
 801eeae:	4638      	mov	r0, r7
 801eeb0:	eb04 0803 	add.w	r8, r4, r3
 801eeb4:	f000 f848 	bl	801ef48 <_sbrk_r>
 801eeb8:	4580      	cmp	r8, r0
 801eeba:	d13a      	bne.n	801ef32 <_malloc_r+0xd2>
 801eebc:	6821      	ldr	r1, [r4, #0]
 801eebe:	3503      	adds	r5, #3
 801eec0:	1a6d      	subs	r5, r5, r1
 801eec2:	f025 0503 	bic.w	r5, r5, #3
 801eec6:	3508      	adds	r5, #8
 801eec8:	2d0c      	cmp	r5, #12
 801eeca:	bf38      	it	cc
 801eecc:	250c      	movcc	r5, #12
 801eece:	4629      	mov	r1, r5
 801eed0:	4638      	mov	r0, r7
 801eed2:	f7ff ffa5 	bl	801ee20 <sbrk_aligned>
 801eed6:	3001      	adds	r0, #1
 801eed8:	d02b      	beq.n	801ef32 <_malloc_r+0xd2>
 801eeda:	6823      	ldr	r3, [r4, #0]
 801eedc:	442b      	add	r3, r5
 801eede:	6023      	str	r3, [r4, #0]
 801eee0:	e00e      	b.n	801ef00 <_malloc_r+0xa0>
 801eee2:	6822      	ldr	r2, [r4, #0]
 801eee4:	1b52      	subs	r2, r2, r5
 801eee6:	d41e      	bmi.n	801ef26 <_malloc_r+0xc6>
 801eee8:	2a0b      	cmp	r2, #11
 801eeea:	d916      	bls.n	801ef1a <_malloc_r+0xba>
 801eeec:	1961      	adds	r1, r4, r5
 801eeee:	42a3      	cmp	r3, r4
 801eef0:	6025      	str	r5, [r4, #0]
 801eef2:	bf18      	it	ne
 801eef4:	6059      	strne	r1, [r3, #4]
 801eef6:	6863      	ldr	r3, [r4, #4]
 801eef8:	bf08      	it	eq
 801eefa:	6031      	streq	r1, [r6, #0]
 801eefc:	5162      	str	r2, [r4, r5]
 801eefe:	604b      	str	r3, [r1, #4]
 801ef00:	4638      	mov	r0, r7
 801ef02:	f104 060b 	add.w	r6, r4, #11
 801ef06:	f000 f913 	bl	801f130 <__malloc_unlock>
 801ef0a:	f026 0607 	bic.w	r6, r6, #7
 801ef0e:	1d23      	adds	r3, r4, #4
 801ef10:	1af2      	subs	r2, r6, r3
 801ef12:	d0b6      	beq.n	801ee82 <_malloc_r+0x22>
 801ef14:	1b9b      	subs	r3, r3, r6
 801ef16:	50a3      	str	r3, [r4, r2]
 801ef18:	e7b3      	b.n	801ee82 <_malloc_r+0x22>
 801ef1a:	6862      	ldr	r2, [r4, #4]
 801ef1c:	42a3      	cmp	r3, r4
 801ef1e:	bf0c      	ite	eq
 801ef20:	6032      	streq	r2, [r6, #0]
 801ef22:	605a      	strne	r2, [r3, #4]
 801ef24:	e7ec      	b.n	801ef00 <_malloc_r+0xa0>
 801ef26:	4623      	mov	r3, r4
 801ef28:	6864      	ldr	r4, [r4, #4]
 801ef2a:	e7b2      	b.n	801ee92 <_malloc_r+0x32>
 801ef2c:	4634      	mov	r4, r6
 801ef2e:	6876      	ldr	r6, [r6, #4]
 801ef30:	e7b9      	b.n	801eea6 <_malloc_r+0x46>
 801ef32:	230c      	movs	r3, #12
 801ef34:	603b      	str	r3, [r7, #0]
 801ef36:	4638      	mov	r0, r7
 801ef38:	f000 f8fa 	bl	801f130 <__malloc_unlock>
 801ef3c:	e7a1      	b.n	801ee82 <_malloc_r+0x22>
 801ef3e:	6025      	str	r5, [r4, #0]
 801ef40:	e7de      	b.n	801ef00 <_malloc_r+0xa0>
 801ef42:	bf00      	nop
 801ef44:	200007fc 	.word	0x200007fc

0801ef48 <_sbrk_r>:
 801ef48:	b538      	push	{r3, r4, r5, lr}
 801ef4a:	4d06      	ldr	r5, [pc, #24]	; (801ef64 <_sbrk_r+0x1c>)
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	4604      	mov	r4, r0
 801ef50:	4608      	mov	r0, r1
 801ef52:	602b      	str	r3, [r5, #0]
 801ef54:	f7f7 fc10 	bl	8016778 <_sbrk>
 801ef58:	1c43      	adds	r3, r0, #1
 801ef5a:	d102      	bne.n	801ef62 <_sbrk_r+0x1a>
 801ef5c:	682b      	ldr	r3, [r5, #0]
 801ef5e:	b103      	cbz	r3, 801ef62 <_sbrk_r+0x1a>
 801ef60:	6023      	str	r3, [r4, #0]
 801ef62:	bd38      	pop	{r3, r4, r5, pc}
 801ef64:	20000804 	.word	0x20000804

0801ef68 <_raise_r>:
 801ef68:	291f      	cmp	r1, #31
 801ef6a:	b538      	push	{r3, r4, r5, lr}
 801ef6c:	4604      	mov	r4, r0
 801ef6e:	460d      	mov	r5, r1
 801ef70:	d904      	bls.n	801ef7c <_raise_r+0x14>
 801ef72:	2316      	movs	r3, #22
 801ef74:	6003      	str	r3, [r0, #0]
 801ef76:	f04f 30ff 	mov.w	r0, #4294967295
 801ef7a:	bd38      	pop	{r3, r4, r5, pc}
 801ef7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ef7e:	b112      	cbz	r2, 801ef86 <_raise_r+0x1e>
 801ef80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ef84:	b94b      	cbnz	r3, 801ef9a <_raise_r+0x32>
 801ef86:	4620      	mov	r0, r4
 801ef88:	f000 f830 	bl	801efec <_getpid_r>
 801ef8c:	462a      	mov	r2, r5
 801ef8e:	4601      	mov	r1, r0
 801ef90:	4620      	mov	r0, r4
 801ef92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ef96:	f000 b817 	b.w	801efc8 <_kill_r>
 801ef9a:	2b01      	cmp	r3, #1
 801ef9c:	d00a      	beq.n	801efb4 <_raise_r+0x4c>
 801ef9e:	1c59      	adds	r1, r3, #1
 801efa0:	d103      	bne.n	801efaa <_raise_r+0x42>
 801efa2:	2316      	movs	r3, #22
 801efa4:	6003      	str	r3, [r0, #0]
 801efa6:	2001      	movs	r0, #1
 801efa8:	e7e7      	b.n	801ef7a <_raise_r+0x12>
 801efaa:	2400      	movs	r4, #0
 801efac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801efb0:	4628      	mov	r0, r5
 801efb2:	4798      	blx	r3
 801efb4:	2000      	movs	r0, #0
 801efb6:	e7e0      	b.n	801ef7a <_raise_r+0x12>

0801efb8 <raise>:
 801efb8:	4b02      	ldr	r3, [pc, #8]	; (801efc4 <raise+0xc>)
 801efba:	4601      	mov	r1, r0
 801efbc:	6818      	ldr	r0, [r3, #0]
 801efbe:	f7ff bfd3 	b.w	801ef68 <_raise_r>
 801efc2:	bf00      	nop
 801efc4:	200001ec 	.word	0x200001ec

0801efc8 <_kill_r>:
 801efc8:	b538      	push	{r3, r4, r5, lr}
 801efca:	4d07      	ldr	r5, [pc, #28]	; (801efe8 <_kill_r+0x20>)
 801efcc:	2300      	movs	r3, #0
 801efce:	4604      	mov	r4, r0
 801efd0:	4608      	mov	r0, r1
 801efd2:	4611      	mov	r1, r2
 801efd4:	602b      	str	r3, [r5, #0]
 801efd6:	f7f7 fb47 	bl	8016668 <_kill>
 801efda:	1c43      	adds	r3, r0, #1
 801efdc:	d102      	bne.n	801efe4 <_kill_r+0x1c>
 801efde:	682b      	ldr	r3, [r5, #0]
 801efe0:	b103      	cbz	r3, 801efe4 <_kill_r+0x1c>
 801efe2:	6023      	str	r3, [r4, #0]
 801efe4:	bd38      	pop	{r3, r4, r5, pc}
 801efe6:	bf00      	nop
 801efe8:	20000804 	.word	0x20000804

0801efec <_getpid_r>:
 801efec:	f7f7 bb34 	b.w	8016658 <_getpid>

0801eff0 <__sread>:
 801eff0:	b510      	push	{r4, lr}
 801eff2:	460c      	mov	r4, r1
 801eff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eff8:	f000 f8a0 	bl	801f13c <_read_r>
 801effc:	2800      	cmp	r0, #0
 801effe:	bfab      	itete	ge
 801f000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f002:	89a3      	ldrhlt	r3, [r4, #12]
 801f004:	181b      	addge	r3, r3, r0
 801f006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f00a:	bfac      	ite	ge
 801f00c:	6563      	strge	r3, [r4, #84]	; 0x54
 801f00e:	81a3      	strhlt	r3, [r4, #12]
 801f010:	bd10      	pop	{r4, pc}

0801f012 <__swrite>:
 801f012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f016:	461f      	mov	r7, r3
 801f018:	898b      	ldrh	r3, [r1, #12]
 801f01a:	05db      	lsls	r3, r3, #23
 801f01c:	4605      	mov	r5, r0
 801f01e:	460c      	mov	r4, r1
 801f020:	4616      	mov	r6, r2
 801f022:	d505      	bpl.n	801f030 <__swrite+0x1e>
 801f024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f028:	2302      	movs	r3, #2
 801f02a:	2200      	movs	r2, #0
 801f02c:	f000 f868 	bl	801f100 <_lseek_r>
 801f030:	89a3      	ldrh	r3, [r4, #12]
 801f032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f03a:	81a3      	strh	r3, [r4, #12]
 801f03c:	4632      	mov	r2, r6
 801f03e:	463b      	mov	r3, r7
 801f040:	4628      	mov	r0, r5
 801f042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f046:	f000 b817 	b.w	801f078 <_write_r>

0801f04a <__sseek>:
 801f04a:	b510      	push	{r4, lr}
 801f04c:	460c      	mov	r4, r1
 801f04e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f052:	f000 f855 	bl	801f100 <_lseek_r>
 801f056:	1c43      	adds	r3, r0, #1
 801f058:	89a3      	ldrh	r3, [r4, #12]
 801f05a:	bf15      	itete	ne
 801f05c:	6560      	strne	r0, [r4, #84]	; 0x54
 801f05e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f066:	81a3      	strheq	r3, [r4, #12]
 801f068:	bf18      	it	ne
 801f06a:	81a3      	strhne	r3, [r4, #12]
 801f06c:	bd10      	pop	{r4, pc}

0801f06e <__sclose>:
 801f06e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f072:	f000 b813 	b.w	801f09c <_close_r>
	...

0801f078 <_write_r>:
 801f078:	b538      	push	{r3, r4, r5, lr}
 801f07a:	4d07      	ldr	r5, [pc, #28]	; (801f098 <_write_r+0x20>)
 801f07c:	4604      	mov	r4, r0
 801f07e:	4608      	mov	r0, r1
 801f080:	4611      	mov	r1, r2
 801f082:	2200      	movs	r2, #0
 801f084:	602a      	str	r2, [r5, #0]
 801f086:	461a      	mov	r2, r3
 801f088:	f7f7 fb25 	bl	80166d6 <_write>
 801f08c:	1c43      	adds	r3, r0, #1
 801f08e:	d102      	bne.n	801f096 <_write_r+0x1e>
 801f090:	682b      	ldr	r3, [r5, #0]
 801f092:	b103      	cbz	r3, 801f096 <_write_r+0x1e>
 801f094:	6023      	str	r3, [r4, #0]
 801f096:	bd38      	pop	{r3, r4, r5, pc}
 801f098:	20000804 	.word	0x20000804

0801f09c <_close_r>:
 801f09c:	b538      	push	{r3, r4, r5, lr}
 801f09e:	4d06      	ldr	r5, [pc, #24]	; (801f0b8 <_close_r+0x1c>)
 801f0a0:	2300      	movs	r3, #0
 801f0a2:	4604      	mov	r4, r0
 801f0a4:	4608      	mov	r0, r1
 801f0a6:	602b      	str	r3, [r5, #0]
 801f0a8:	f7f7 fb31 	bl	801670e <_close>
 801f0ac:	1c43      	adds	r3, r0, #1
 801f0ae:	d102      	bne.n	801f0b6 <_close_r+0x1a>
 801f0b0:	682b      	ldr	r3, [r5, #0]
 801f0b2:	b103      	cbz	r3, 801f0b6 <_close_r+0x1a>
 801f0b4:	6023      	str	r3, [r4, #0]
 801f0b6:	bd38      	pop	{r3, r4, r5, pc}
 801f0b8:	20000804 	.word	0x20000804

0801f0bc <_fstat_r>:
 801f0bc:	b538      	push	{r3, r4, r5, lr}
 801f0be:	4d07      	ldr	r5, [pc, #28]	; (801f0dc <_fstat_r+0x20>)
 801f0c0:	2300      	movs	r3, #0
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	4608      	mov	r0, r1
 801f0c6:	4611      	mov	r1, r2
 801f0c8:	602b      	str	r3, [r5, #0]
 801f0ca:	f7f7 fb2c 	bl	8016726 <_fstat>
 801f0ce:	1c43      	adds	r3, r0, #1
 801f0d0:	d102      	bne.n	801f0d8 <_fstat_r+0x1c>
 801f0d2:	682b      	ldr	r3, [r5, #0]
 801f0d4:	b103      	cbz	r3, 801f0d8 <_fstat_r+0x1c>
 801f0d6:	6023      	str	r3, [r4, #0]
 801f0d8:	bd38      	pop	{r3, r4, r5, pc}
 801f0da:	bf00      	nop
 801f0dc:	20000804 	.word	0x20000804

0801f0e0 <_isatty_r>:
 801f0e0:	b538      	push	{r3, r4, r5, lr}
 801f0e2:	4d06      	ldr	r5, [pc, #24]	; (801f0fc <_isatty_r+0x1c>)
 801f0e4:	2300      	movs	r3, #0
 801f0e6:	4604      	mov	r4, r0
 801f0e8:	4608      	mov	r0, r1
 801f0ea:	602b      	str	r3, [r5, #0]
 801f0ec:	f7f7 fb2b 	bl	8016746 <_isatty>
 801f0f0:	1c43      	adds	r3, r0, #1
 801f0f2:	d102      	bne.n	801f0fa <_isatty_r+0x1a>
 801f0f4:	682b      	ldr	r3, [r5, #0]
 801f0f6:	b103      	cbz	r3, 801f0fa <_isatty_r+0x1a>
 801f0f8:	6023      	str	r3, [r4, #0]
 801f0fa:	bd38      	pop	{r3, r4, r5, pc}
 801f0fc:	20000804 	.word	0x20000804

0801f100 <_lseek_r>:
 801f100:	b538      	push	{r3, r4, r5, lr}
 801f102:	4d07      	ldr	r5, [pc, #28]	; (801f120 <_lseek_r+0x20>)
 801f104:	4604      	mov	r4, r0
 801f106:	4608      	mov	r0, r1
 801f108:	4611      	mov	r1, r2
 801f10a:	2200      	movs	r2, #0
 801f10c:	602a      	str	r2, [r5, #0]
 801f10e:	461a      	mov	r2, r3
 801f110:	f7f7 fb24 	bl	801675c <_lseek>
 801f114:	1c43      	adds	r3, r0, #1
 801f116:	d102      	bne.n	801f11e <_lseek_r+0x1e>
 801f118:	682b      	ldr	r3, [r5, #0]
 801f11a:	b103      	cbz	r3, 801f11e <_lseek_r+0x1e>
 801f11c:	6023      	str	r3, [r4, #0]
 801f11e:	bd38      	pop	{r3, r4, r5, pc}
 801f120:	20000804 	.word	0x20000804

0801f124 <__malloc_lock>:
 801f124:	4801      	ldr	r0, [pc, #4]	; (801f12c <__malloc_lock+0x8>)
 801f126:	f7ff bdc7 	b.w	801ecb8 <__retarget_lock_acquire_recursive>
 801f12a:	bf00      	nop
 801f12c:	200007f8 	.word	0x200007f8

0801f130 <__malloc_unlock>:
 801f130:	4801      	ldr	r0, [pc, #4]	; (801f138 <__malloc_unlock+0x8>)
 801f132:	f7ff bdc2 	b.w	801ecba <__retarget_lock_release_recursive>
 801f136:	bf00      	nop
 801f138:	200007f8 	.word	0x200007f8

0801f13c <_read_r>:
 801f13c:	b538      	push	{r3, r4, r5, lr}
 801f13e:	4d07      	ldr	r5, [pc, #28]	; (801f15c <_read_r+0x20>)
 801f140:	4604      	mov	r4, r0
 801f142:	4608      	mov	r0, r1
 801f144:	4611      	mov	r1, r2
 801f146:	2200      	movs	r2, #0
 801f148:	602a      	str	r2, [r5, #0]
 801f14a:	461a      	mov	r2, r3
 801f14c:	f7f7 faa6 	bl	801669c <_read>
 801f150:	1c43      	adds	r3, r0, #1
 801f152:	d102      	bne.n	801f15a <_read_r+0x1e>
 801f154:	682b      	ldr	r3, [r5, #0]
 801f156:	b103      	cbz	r3, 801f15a <_read_r+0x1e>
 801f158:	6023      	str	r3, [r4, #0]
 801f15a:	bd38      	pop	{r3, r4, r5, pc}
 801f15c:	20000804 	.word	0x20000804

0801f160 <_init>:
 801f160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f162:	bf00      	nop
 801f164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f166:	bc08      	pop	{r3}
 801f168:	469e      	mov	lr, r3
 801f16a:	4770      	bx	lr

0801f16c <_fini>:
 801f16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f16e:	bf00      	nop
 801f170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f172:	bc08      	pop	{r3}
 801f174:	469e      	mov	lr, r3
 801f176:	4770      	bx	lr
