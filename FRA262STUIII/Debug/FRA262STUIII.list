
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b104  0801ea80  0801ea80  0002ea80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029b84  08029b84  000400d8  2**0
                  CONTENTS
  4 .ARM          00000008  08029b84  08029b84  00039b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029b8c  08029b8c  000400d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029b8c  08029b8c  00039b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029b94  08029b94  00039b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08029b98  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  200000d8  08029c70  000400d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08029c70  00040640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0010502c  00000000  00000000  00040108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc6  00000000  00000000  00145134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a18  00000000  00000000  00147f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004968  00000000  00000000  0014c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb78  00000000  00000000  00151280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021fac  00000000  00000000  0016ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0047841e  00000000  00000000  0018fda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  006081c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000163ec  00000000  00000000  00608214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801ea68 	.word	0x0801ea68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	0801ea68 	.word	0x0801ea68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2a:	f01b fe9d 	bl	801cc68 <sqrtf>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN5Eigen8internal5all_tC1Ev>:

//--------------------------------------------------------------------------------
// Handling of all
//--------------------------------------------------------------------------------

struct all_t { all_t() {} };
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
///////////////////// [UART UI Base System] /////////////////////
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a3d      	ldr	r2, [pc, #244]	; (8001074 <HAL_UARTEx_RxEventCallback+0x108>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d173      	bne.n	800106a <HAL_UARTEx_RxEventCallback+0xfe>
	{
		oldPos_uart = newPos_uart;  // Update the last position before copying new data
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000f84:	881a      	ldrh	r2, [r3, #0]
 8000f86:	4b3d      	ldr	r3, [pc, #244]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f88:	801a      	strh	r2, [r3, #0]
		datasize_uart = Size;
 8000f8a:	4a3d      	ldr	r2, [pc, #244]	; (8001080 <HAL_UARTEx_RxEventCallback+0x114>)
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	8013      	strh	r3, [r2, #0]
		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos_uart+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8000f90:	4b3a      	ldr	r3, [pc, #232]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	4413      	add	r3, r2
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	dd22      	ble.n	8000fe4 <HAL_UARTEx_RxEventCallback+0x78>
		{
			uint16_t datatocopy = MainBuf_SIZE - oldPos_uart;  // find out how much space is left in the main buffer
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	f1c3 0320 	rsb	r3, r3, #32
 8000fa6:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, datatocopy);  // copy data in that remaining space
 8000fa8:	4b34      	ldr	r3, [pc, #208]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HAL_UARTEx_RxEventCallback+0x118>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	89fa      	ldrh	r2, [r7, #14]
 8000fb4:	4934      	ldr	r1, [pc, #208]	; (8001088 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f01c fd7e 	bl	801dab8 <memcpy>

			oldPos_uart = 0;  // point to the start of the buffer
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	4a30      	ldr	r2, [pc, #192]	; (8001088 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000fc6:	1899      	adds	r1, r3, r2
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	89fb      	ldrh	r3, [r7, #14]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	482c      	ldr	r0, [pc, #176]	; (8001084 <HAL_UARTEx_RxEventCallback+0x118>)
 8000fd2:	f01c fd71 	bl	801dab8 <memcpy>
			newPos_uart = (Size-datatocopy);  // update the position
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000fe0:	801a      	strh	r2, [r3, #0]
 8000fe2:	e010      	b.n	8001006 <HAL_UARTEx_RxEventCallback+0x9a>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf + oldPos_uart, RxBuf, Size);
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_UARTEx_RxEventCallback+0x118>)
 8000fec:	4413      	add	r3, r2
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	4925      	ldr	r1, [pc, #148]	; (8001088 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f01c fd60 	bl	801dab8 <memcpy>
			newPos_uart = Size + oldPos_uart;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_UARTEx_RxEventCallback+0x110>)
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	4413      	add	r3, r2
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001004:	801a      	strh	r2, [r3, #0]
		}
		StartM = MainBuf[newPos_uart - datasize_uart]; // 0b1001xxxx for check start & mode
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_UARTEx_RxEventCallback+0x114>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4a1c      	ldr	r2, [pc, #112]	; (8001084 <HAL_UARTEx_RxEventCallback+0x118>)
 8001014:	5cd2      	ldrb	r2, [r2, r3]
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_UARTEx_RxEventCallback+0x120>)
 8001018:	701a      	strb	r2, [r3, #0]
		chkStart = StartM >> 4; // for check "start" or nor
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_UARTEx_RxEventCallback+0x120>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_UARTEx_RxEventCallback+0x124>)
 8001024:	701a      	strb	r2, [r3, #0]
		NameM = (StartM & 15); // Check mode
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_UARTEx_RxEventCallback+0x120>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UARTEx_RxEventCallback+0x128>)
 8001032:	701a      	strb	r2, [r3, #0]

		if (chkStart == 9){ // 0b1001
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_UARTEx_RxEventCallback+0x124>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b09      	cmp	r3, #9
 800103a:	d109      	bne.n	8001050 <HAL_UARTEx_RxEventCallback+0xe4>
			if (NameM >= 1 && NameM <= 14){ // 15 work state or not
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UARTEx_RxEventCallback+0x128>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_UARTEx_RxEventCallback+0xe4>
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <HAL_UARTEx_RxEventCallback+0x128>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b0e      	cmp	r3, #14
 800104a:	d801      	bhi.n	8001050 <HAL_UARTEx_RxEventCallback+0xe4>
				All_mode_UARTUI();
 800104c:	f000 f828 	bl	80010a0 <_Z15All_mode_UARTUIv>
			}
		}

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001050:	2220      	movs	r2, #32
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <HAL_UARTEx_RxEventCallback+0x11c>)
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001056:	f01a fc42 	bl	801b8de <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_UARTEx_RxEventCallback+0x130>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_UARTEx_RxEventCallback+0x130>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0208 	bic.w	r2, r2, #8
 8001068:	601a      	str	r2, [r3, #0]

	} //huart USART2
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400
 8001078:	200005fa 	.word	0x200005fa
 800107c:	200005f8 	.word	0x200005f8
 8001080:	20000612 	.word	0x20000612
 8001084:	200005d8 	.word	0x200005d8
 8001088:	200005b8 	.word	0x200005b8
 800108c:	20000616 	.word	0x20000616
 8001090:	20000614 	.word	0x20000614
 8001094:	20000615 	.word	0x20000615
 8001098:	200002dc 	.word	0x200002dc
 800109c:	20000320 	.word	0x20000320

080010a0 <_Z15All_mode_UARTUIv>:

void All_mode_UARTUI()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	// NameM => 15 mode
		switch (NameM){
 80010a6:	4b89      	ldr	r3, [pc, #548]	; (80012cc <_Z15All_mode_UARTUIv+0x22c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	2b0d      	cmp	r3, #13
 80010ae:	f200 82ff 	bhi.w	80016b0 <_Z15All_mode_UARTUIv+0x610>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <_Z15All_mode_UARTUIv+0x18>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	080010f1 	.word	0x080010f1
 80010bc:	0800115b 	.word	0x0800115b
 80010c0:	08001199 	.word	0x08001199
 80010c4:	080011d7 	.word	0x080011d7
 80010c8:	08001251 	.word	0x08001251
 80010cc:	08001305 	.word	0x08001305
 80010d0:	0800137f 	.word	0x0800137f
 80010d4:	08001431 	.word	0x08001431
 80010d8:	0800147d 	.word	0x0800147d
 80010dc:	080014c9 	.word	0x080014c9
 80010e0:	08001515 	.word	0x08001515
 80010e4:	080015b5 	.word	0x080015b5
 80010e8:	080015f7 	.word	0x080015f7
 80010ec:	0800163f 	.word	0x0800163f
			case 1: // 10010001 01000000 00000000 00101110
				chksum = MainBuf[newPos_uart-1];
 80010f0:	4b77      	ldr	r3, [pc, #476]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a77      	ldr	r2, [pc, #476]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 80010f8:	5cd2      	ldrb	r2, [r2, r3]
 80010fa:	4b77      	ldr	r3, [pc, #476]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 80010fc:	701a      	strb	r2, [r3, #0]
				dataF2 = MainBuf[newPos_uart-2];
 80010fe:	4b74      	ldr	r3, [pc, #464]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	3b02      	subs	r3, #2
 8001104:	4a73      	ldr	r2, [pc, #460]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 8001106:	5cd2      	ldrb	r2, [r2, r3]
 8001108:	4b74      	ldr	r3, [pc, #464]	; (80012dc <_Z15All_mode_UARTUIv+0x23c>)
 800110a:	701a      	strb	r2, [r3, #0]
				dataF1 = MainBuf[newPos_uart-3];
 800110c:	4b70      	ldr	r3, [pc, #448]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	3b03      	subs	r3, #3
 8001112:	4a70      	ldr	r2, [pc, #448]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 8001114:	5cd2      	ldrb	r2, [r2, r3]
 8001116:	4b72      	ldr	r3, [pc, #456]	; (80012e0 <_Z15All_mode_UARTUIv+0x240>)
 8001118:	701a      	strb	r2, [r3, #0]
				chksum2 = ~(StartM + dataF1 + dataF2);
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <_Z15All_mode_UARTUIv+0x244>)
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <_Z15All_mode_UARTUIv+0x240>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b6d      	ldr	r3, [pc, #436]	; (80012dc <_Z15All_mode_UARTUIv+0x23c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b6d      	ldr	r3, [pc, #436]	; (80012e8 <_Z15All_mode_UARTUIv+0x248>)
 8001134:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 8001136:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <_Z15All_mode_UARTUIv+0x248>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	f040 829b 	bne.w	800167a <_Z15All_mode_UARTUIv+0x5da>
					M_state = 1;
 8001144:	4b69      	ldr	r3, [pc, #420]	; (80012ec <_Z15All_mode_UARTUIv+0x24c>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	2202      	movs	r2, #2
 8001150:	4967      	ldr	r1, [pc, #412]	; (80012f0 <_Z15All_mode_UARTUIv+0x250>)
 8001152:	4868      	ldr	r0, [pc, #416]	; (80012f4 <_Z15All_mode_UARTUIv+0x254>)
 8001154:	f01a fb31 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 8001158:	e28f      	b.n	800167a <_Z15All_mode_UARTUIv+0x5da>
			case 2: //10010010 01101101
				chksum = MainBuf[newPos_uart-1];
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	3b01      	subs	r3, #1
 8001160:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 8001162:	5cd2      	ldrb	r2, [r2, r3]
 8001164:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 8001166:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001168:	4b5e      	ldr	r3, [pc, #376]	; (80012e4 <_Z15All_mode_UARTUIv+0x244>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	43db      	mvns	r3, r3
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b61      	ldr	r3, [pc, #388]	; (80012f8 <_Z15All_mode_UARTUIv+0x258>)
 8001172:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001174:	4b58      	ldr	r3, [pc, #352]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <_Z15All_mode_UARTUIv+0x258>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 827e 	bne.w	800167e <_Z15All_mode_UARTUIv+0x5de>
					M_state = 2;
 8001182:	4b5a      	ldr	r3, [pc, #360]	; (80012ec <_Z15All_mode_UARTUIv+0x24c>)
 8001184:	2202      	movs	r2, #2
 8001186:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8001188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118c:	2202      	movs	r2, #2
 800118e:	4958      	ldr	r1, [pc, #352]	; (80012f0 <_Z15All_mode_UARTUIv+0x250>)
 8001190:	4858      	ldr	r0, [pc, #352]	; (80012f4 <_Z15All_mode_UARTUIv+0x254>)
 8001192:	f01a fb12 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 8001196:	e272      	b.n	800167e <_Z15All_mode_UARTUIv+0x5de>
			case 3: //10010011 01101100
					chksum = MainBuf[newPos_uart-1];
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	3b01      	subs	r3, #1
 800119e:	4a4d      	ldr	r2, [pc, #308]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 80011a0:	5cd2      	ldrb	r2, [r2, r3]
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 80011a4:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <_Z15All_mode_UARTUIv+0x244>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <_Z15All_mode_UARTUIv+0x258>)
 80011b0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <_Z15All_mode_UARTUIv+0x258>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	f040 8261 	bne.w	8001682 <_Z15All_mode_UARTUIv+0x5e2>
					M_state = 3;
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <_Z15All_mode_UARTUIv+0x24c>)
 80011c2:	2203      	movs	r2, #3
 80011c4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	2202      	movs	r2, #2
 80011cc:	4948      	ldr	r1, [pc, #288]	; (80012f0 <_Z15All_mode_UARTUIv+0x250>)
 80011ce:	4849      	ldr	r0, [pc, #292]	; (80012f4 <_Z15All_mode_UARTUIv+0x254>)
 80011d0:	f01a faf3 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 80011d4:	e255      	b.n	8001682 <_Z15All_mode_UARTUIv+0x5e2>
			case 4:
					chksum = MainBuf[newPos_uart-1];
 80011d6:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	4a3d      	ldr	r2, [pc, #244]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 80011de:	5cd2      	ldrb	r2, [r2, r3]
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 80011e2:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 80011e4:	4b3a      	ldr	r3, [pc, #232]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3b02      	subs	r3, #2
 80011ea:	4a3a      	ldr	r2, [pc, #232]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 80011ec:	5cd2      	ldrb	r2, [r2, r3]
 80011ee:	4b3b      	ldr	r3, [pc, #236]	; (80012dc <_Z15All_mode_UARTUIv+0x23c>)
 80011f0:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	3b03      	subs	r3, #3
 80011f8:	4a36      	ldr	r2, [pc, #216]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 80011fa:	5cd2      	ldrb	r2, [r2, r3]
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <_Z15All_mode_UARTUIv+0x240>)
 80011fe:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[0] = dataF1;
 8001200:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <_Z15All_mode_UARTUIv+0x240>)
 8001202:	781a      	ldrb	r2, [r3, #0]
 8001204:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <_Z15All_mode_UARTUIv+0x25c>)
 8001206:	701a      	strb	r2, [r3, #0]
					Set_AngVelo[1] = dataF2;
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <_Z15All_mode_UARTUIv+0x23c>)
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <_Z15All_mode_UARTUIv+0x25c>)
 800120e:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8001210:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <_Z15All_mode_UARTUIv+0x244>)
 8001212:	781a      	ldrb	r2, [r3, #0]
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <_Z15All_mode_UARTUIv+0x240>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4413      	add	r3, r2
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <_Z15All_mode_UARTUIv+0x23c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4413      	add	r3, r2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <_Z15All_mode_UARTUIv+0x248>)
 800122a:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <_Z15All_mode_UARTUIv+0x248>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8226 	bne.w	8001686 <_Z15All_mode_UARTUIv+0x5e6>
					M_state = 4;
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <_Z15All_mode_UARTUIv+0x24c>)
 800123c:	2204      	movs	r2, #4
 800123e:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8001240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001244:	2202      	movs	r2, #2
 8001246:	492a      	ldr	r1, [pc, #168]	; (80012f0 <_Z15All_mode_UARTUIv+0x250>)
 8001248:	482a      	ldr	r0, [pc, #168]	; (80012f4 <_Z15All_mode_UARTUIv+0x254>)
 800124a:	f01a fab6 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 800124e:	e21a      	b.n	8001686 <_Z15All_mode_UARTUIv+0x5e6>
			case 5:
					chksum = MainBuf[newPos_uart-1];
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 8001258:	5cd2      	ldrb	r2, [r2, r3]
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 800125c:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	3b02      	subs	r3, #2
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 8001266:	5cd2      	ldrb	r2, [r2, r3]
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <_Z15All_mode_UARTUIv+0x23c>)
 800126a:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <_Z15All_mode_UARTUIv+0x230>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	3b03      	subs	r3, #3
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <_Z15All_mode_UARTUIv+0x234>)
 8001274:	5cd2      	ldrb	r2, [r2, r3]
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <_Z15All_mode_UARTUIv+0x240>)
 8001278:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[0] = dataF1;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <_Z15All_mode_UARTUIv+0x240>)
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <_Z15All_mode_UARTUIv+0x260>)
 8001280:	701a      	strb	r2, [r3, #0]
					Set_AngPosi[1] = dataF2;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <_Z15All_mode_UARTUIv+0x23c>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <_Z15All_mode_UARTUIv+0x260>)
 8001288:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <_Z15All_mode_UARTUIv+0x244>)
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <_Z15All_mode_UARTUIv+0x240>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	b2da      	uxtb	r2, r3
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <_Z15All_mode_UARTUIv+0x23c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	b2db      	uxtb	r3, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_Z15All_mode_UARTUIv+0x248>)
 80012a4:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <_Z15All_mode_UARTUIv+0x238>)
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <_Z15All_mode_UARTUIv+0x248>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	f040 81eb 	bne.w	800168a <_Z15All_mode_UARTUIv+0x5ea>
					M_state = 5;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <_Z15All_mode_UARTUIv+0x24c>)
 80012b6:	2205      	movs	r2, #5
 80012b8:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	2202      	movs	r2, #2
 80012c0:	490b      	ldr	r1, [pc, #44]	; (80012f0 <_Z15All_mode_UARTUIv+0x250>)
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <_Z15All_mode_UARTUIv+0x254>)
 80012c4:	f01a fa79 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 80012c8:	e1df      	b.n	800168a <_Z15All_mode_UARTUIv+0x5ea>
 80012ca:	bf00      	nop
 80012cc:	20000615 	.word	0x20000615
 80012d0:	200005fa 	.word	0x200005fa
 80012d4:	200005d8 	.word	0x200005d8
 80012d8:	20000617 	.word	0x20000617
 80012dc:	2000061c 	.word	0x2000061c
 80012e0:	2000061b 	.word	0x2000061b
 80012e4:	20000616 	.word	0x20000616
 80012e8:	20000619 	.word	0x20000619
 80012ec:	2000061d 	.word	0x2000061d
 80012f0:	2000003c 	.word	0x2000003c
 80012f4:	200002dc 	.word	0x200002dc
 80012f8:	20000618 	.word	0x20000618
 80012fc:	200005fc 	.word	0x200005fc
 8001300:	20000600 	.word	0x20000600
			case 6:
					chksum = MainBuf[newPos_uart-1];
 8001304:	4b96      	ldr	r3, [pc, #600]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	4a96      	ldr	r2, [pc, #600]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 800130c:	5cd2      	ldrb	r2, [r2, r3]
 800130e:	4b96      	ldr	r3, [pc, #600]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 8001310:	701a      	strb	r2, [r3, #0]
					dataF2 = MainBuf[newPos_uart-2];
 8001312:	4b93      	ldr	r3, [pc, #588]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	3b02      	subs	r3, #2
 8001318:	4a92      	ldr	r2, [pc, #584]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 800131a:	5cd2      	ldrb	r2, [r2, r3]
 800131c:	4b93      	ldr	r3, [pc, #588]	; (800156c <_Z15All_mode_UARTUIv+0x4cc>)
 800131e:	701a      	strb	r2, [r3, #0]
					dataF1 = MainBuf[newPos_uart-3];
 8001320:	4b8f      	ldr	r3, [pc, #572]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	3b03      	subs	r3, #3
 8001326:	4a8f      	ldr	r2, [pc, #572]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 8001328:	5cd2      	ldrb	r2, [r2, r3]
 800132a:	4b91      	ldr	r3, [pc, #580]	; (8001570 <_Z15All_mode_UARTUIv+0x4d0>)
 800132c:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[0] = dataF1;
 800132e:	4b90      	ldr	r3, [pc, #576]	; (8001570 <_Z15All_mode_UARTUIv+0x4d0>)
 8001330:	781a      	ldrb	r2, [r3, #0]
 8001332:	4b90      	ldr	r3, [pc, #576]	; (8001574 <_Z15All_mode_UARTUIv+0x4d4>)
 8001334:	701a      	strb	r2, [r3, #0]
					Set_Goal_1Sta[1] = dataF2;
 8001336:	4b8d      	ldr	r3, [pc, #564]	; (800156c <_Z15All_mode_UARTUIv+0x4cc>)
 8001338:	781a      	ldrb	r2, [r3, #0]
 800133a:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <_Z15All_mode_UARTUIv+0x4d4>)
 800133c:	705a      	strb	r2, [r3, #1]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800133e:	4b8e      	ldr	r3, [pc, #568]	; (8001578 <_Z15All_mode_UARTUIv+0x4d8>)
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b8b      	ldr	r3, [pc, #556]	; (8001570 <_Z15All_mode_UARTUIv+0x4d0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b88      	ldr	r3, [pc, #544]	; (800156c <_Z15All_mode_UARTUIv+0x4cc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	b2db      	uxtb	r3, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b89      	ldr	r3, [pc, #548]	; (800157c <_Z15All_mode_UARTUIv+0x4dc>)
 8001358:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum2){
 800135a:	4b83      	ldr	r3, [pc, #524]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	4b87      	ldr	r3, [pc, #540]	; (800157c <_Z15All_mode_UARTUIv+0x4dc>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	f040 8193 	bne.w	800168e <_Z15All_mode_UARTUIv+0x5ee>
					M_state = 6;
 8001368:	4b85      	ldr	r3, [pc, #532]	; (8001580 <_Z15All_mode_UARTUIv+0x4e0>)
 800136a:	2206      	movs	r2, #6
 800136c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	2202      	movs	r2, #2
 8001374:	4983      	ldr	r1, [pc, #524]	; (8001584 <_Z15All_mode_UARTUIv+0x4e4>)
 8001376:	4884      	ldr	r0, [pc, #528]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 8001378:	f01a fa1f 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 800137c:	e187      	b.n	800168e <_Z15All_mode_UARTUIv+0x5ee>
			case 7:
				Nstation = MainBuf[(newPos_uart - datasize_uart)+1];
 800137e:	4b78      	ldr	r3, [pc, #480]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b81      	ldr	r3, [pc, #516]	; (800158c <_Z15All_mode_UARTUIv+0x4ec>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	3301      	adds	r3, #1
 800138c:	4a75      	ldr	r2, [pc, #468]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 800138e:	5cd2      	ldrb	r2, [r2, r3]
 8001390:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <_Z15All_mode_UARTUIv+0x4f0>)
 8001392:	701a      	strb	r2, [r3, #0]
				for(int i=2; i < Nstation+2; i++ ){
 8001394:	2302      	movs	r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <_Z15All_mode_UARTUIv+0x4f0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dc1b      	bgt.n	80013dc <_Z15All_mode_UARTUIv+0x33c>
					dataFSum += MainBuf[newPos_uart-i];
 80013a4:	4b6e      	ldr	r3, [pc, #440]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	4a6d      	ldr	r2, [pc, #436]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 80013b0:	5cd2      	ldrb	r2, [r2, r3]
 80013b2:	4b78      	ldr	r3, [pc, #480]	; (8001594 <_Z15All_mode_UARTUIv+0x4f4>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b76      	ldr	r3, [pc, #472]	; (8001594 <_Z15All_mode_UARTUIv+0x4f4>)
 80013bc:	701a      	strb	r2, [r3, #0]
					Set_Goal_nSta[i-2] = MainBuf[newPos_uart-i];
 80013be:	4b68      	ldr	r3, [pc, #416]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	1ad2      	subs	r2, r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b02      	subs	r3, #2
 80013cc:	4965      	ldr	r1, [pc, #404]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 80013ce:	5c89      	ldrb	r1, [r1, r2]
 80013d0:	4a71      	ldr	r2, [pc, #452]	; (8001598 <_Z15All_mode_UARTUIv+0x4f8>)
 80013d2:	54d1      	strb	r1, [r2, r3]
				for(int i=2; i < Nstation+2; i++ ){
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	e7dd      	b.n	8001398 <_Z15All_mode_UARTUIv+0x2f8>
				}
				chksum = MainBuf[newPos_uart-1];
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a60      	ldr	r2, [pc, #384]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 80013e4:	5cd2      	ldrb	r2, [r2, r3]
 80013e6:	4b60      	ldr	r3, [pc, #384]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 80013e8:	701a      	strb	r2, [r3, #0]
				chksum3 = ~(StartM + Nstation + dataFSum);
 80013ea:	4b63      	ldr	r3, [pc, #396]	; (8001578 <_Z15All_mode_UARTUIv+0x4d8>)
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	4b68      	ldr	r3, [pc, #416]	; (8001590 <_Z15All_mode_UARTUIv+0x4f0>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <_Z15All_mode_UARTUIv+0x4f4>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b66      	ldr	r3, [pc, #408]	; (800159c <_Z15All_mode_UARTUIv+0x4fc>)
 8001404:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum3){
 8001406:	4b58      	ldr	r3, [pc, #352]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 8001408:	781a      	ldrb	r2, [r3, #0]
 800140a:	4b64      	ldr	r3, [pc, #400]	; (800159c <_Z15All_mode_UARTUIv+0x4fc>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	f040 813f 	bne.w	8001692 <_Z15All_mode_UARTUIv+0x5f2>
					M_state = 7;
 8001414:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <_Z15All_mode_UARTUIv+0x4e0>)
 8001416:	2207      	movs	r2, #7
 8001418:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					dataFSum = 0;
 800141a:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <_Z15All_mode_UARTUIv+0x4f4>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 8001420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001424:	2202      	movs	r2, #2
 8001426:	4957      	ldr	r1, [pc, #348]	; (8001584 <_Z15All_mode_UARTUIv+0x4e4>)
 8001428:	4857      	ldr	r0, [pc, #348]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 800142a:	f01a f9c6 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 800142e:	e130      	b.n	8001692 <_Z15All_mode_UARTUIv+0x5f2>
			case 8: //10011000 01100111
				chksum = MainBuf[newPos_uart-1];
 8001430:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 8001438:	5cd2      	ldrb	r2, [r2, r3]
 800143a:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 800143c:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800143e:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <_Z15All_mode_UARTUIv+0x4d8>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	43db      	mvns	r3, r3
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <_Z15All_mode_UARTUIv+0x500>)
 8001448:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800144a:	4b47      	ldr	r3, [pc, #284]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <_Z15All_mode_UARTUIv+0x500>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	f040 811f 	bne.w	8001696 <_Z15All_mode_UARTUIv+0x5f6>
					M_state = 8;
 8001458:	4b49      	ldr	r3, [pc, #292]	; (8001580 <_Z15All_mode_UARTUIv+0x4e0>)
 800145a:	2208      	movs	r2, #8
 800145c:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	2202      	movs	r2, #2
 8001464:	4947      	ldr	r1, [pc, #284]	; (8001584 <_Z15All_mode_UARTUIv+0x4e4>)
 8001466:	4848      	ldr	r0, [pc, #288]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 8001468:	f01a f9a7 	bl	801b7ba <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_f_ack2, 2 ,1000);
 800146c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001470:	2202      	movs	r2, #2
 8001472:	494c      	ldr	r1, [pc, #304]	; (80015a4 <_Z15All_mode_UARTUIv+0x504>)
 8001474:	4844      	ldr	r0, [pc, #272]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 8001476:	f01a f9a0 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 800147a:	e10c      	b.n	8001696 <_Z15All_mode_UARTUIv+0x5f6>
			case 9: //10011001 01100110
				chksum = MainBuf[newPos_uart-1];
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	4a38      	ldr	r2, [pc, #224]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 8001484:	5cd2      	ldrb	r2, [r2, r3]
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 8001488:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <_Z15All_mode_UARTUIv+0x4d8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	43db      	mvns	r3, r3
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <_Z15All_mode_UARTUIv+0x500>)
 8001494:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <_Z15All_mode_UARTUIv+0x500>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	f040 80fb 	bne.w	800169a <_Z15All_mode_UARTUIv+0x5fa>
					M_state = 9;
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <_Z15All_mode_UARTUIv+0x4e0>)
 80014a6:	2209      	movs	r2, #9
 80014a8:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000);
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	2202      	movs	r2, #2
 80014b0:	4934      	ldr	r1, [pc, #208]	; (8001584 <_Z15All_mode_UARTUIv+0x4e4>)
 80014b2:	4835      	ldr	r0, [pc, #212]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 80014b4:	f01a f981 	bl	801b7ba <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_sta, 4 ,1000);
 80014b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014bc:	2204      	movs	r2, #4
 80014be:	493a      	ldr	r1, [pc, #232]	; (80015a8 <_Z15All_mode_UARTUIv+0x508>)
 80014c0:	4831      	ldr	r0, [pc, #196]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 80014c2:	f01a f97a 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 80014c6:	e0e8      	b.n	800169a <_Z15All_mode_UARTUIv+0x5fa>
			case 10: //10011010 01100101
				chksum = MainBuf[newPos_uart-1];
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a25      	ldr	r2, [pc, #148]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 80014d0:	5cd2      	ldrb	r2, [r2, r3]
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 80014d4:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <_Z15All_mode_UARTUIv+0x4d8>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	43db      	mvns	r3, r3
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <_Z15All_mode_UARTUIv+0x500>)
 80014e0:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <_Z15All_mode_UARTUIv+0x500>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	f040 80d7 	bne.w	800169e <_Z15All_mode_UARTUIv+0x5fe>
					M_state = 10;
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <_Z15All_mode_UARTUIv+0x4e0>)
 80014f2:	220a      	movs	r2, #10
 80014f4:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000);
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	2202      	movs	r2, #2
 80014fc:	4921      	ldr	r1, [pc, #132]	; (8001584 <_Z15All_mode_UARTUIv+0x4e4>)
 80014fe:	4822      	ldr	r0, [pc, #136]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 8001500:	f01a f95b 	bl	801b7ba <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_AngPosi, 4 ,1000);
 8001504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001508:	2204      	movs	r2, #4
 800150a:	4928      	ldr	r1, [pc, #160]	; (80015ac <_Z15All_mode_UARTUIv+0x50c>)
 800150c:	481e      	ldr	r0, [pc, #120]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 800150e:	f01a f954 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 8001512:	e0c4      	b.n	800169e <_Z15All_mode_UARTUIv+0x5fe>
			case 11: //10011011 01100100
				chksum = MainBuf[newPos_uart-1];
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <_Z15All_mode_UARTUIv+0x4c0>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_Z15All_mode_UARTUIv+0x4c4>)
 800151c:	5cd2      	ldrb	r2, [r2, r3]
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 8001520:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_Z15All_mode_UARTUIv+0x4d8>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	43db      	mvns	r3, r3
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <_Z15All_mode_UARTUIv+0x500>)
 800152c:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <_Z15All_mode_UARTUIv+0x4c8>)
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <_Z15All_mode_UARTUIv+0x500>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	f040 80b3 	bne.w	80016a2 <_Z15All_mode_UARTUIv+0x602>
					M_state = 11;
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <_Z15All_mode_UARTUIv+0x4e0>)
 800153e:	220b      	movs	r2, #11
 8001540:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000);
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	2202      	movs	r2, #2
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <_Z15All_mode_UARTUIv+0x4e4>)
 800154a:	480f      	ldr	r0, [pc, #60]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 800154c:	f01a f935 	bl	801b7ba <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, (uint8_t*)Req_MaxVelo, 4 ,1000);
 8001550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001554:	2204      	movs	r2, #4
 8001556:	4916      	ldr	r1, [pc, #88]	; (80015b0 <_Z15All_mode_UARTUIv+0x510>)
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <_Z15All_mode_UARTUIv+0x4e8>)
 800155a:	f01a f92e 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 800155e:	e0a0      	b.n	80016a2 <_Z15All_mode_UARTUIv+0x602>
 8001560:	200005fa 	.word	0x200005fa
 8001564:	200005d8 	.word	0x200005d8
 8001568:	20000617 	.word	0x20000617
 800156c:	2000061c 	.word	0x2000061c
 8001570:	2000061b 	.word	0x2000061b
 8001574:	20000604 	.word	0x20000604
 8001578:	20000616 	.word	0x20000616
 800157c:	20000619 	.word	0x20000619
 8001580:	2000061d 	.word	0x2000061d
 8001584:	2000003c 	.word	0x2000003c
 8001588:	200002dc 	.word	0x200002dc
 800158c:	20000612 	.word	0x20000612
 8001590:	2000061e 	.word	0x2000061e
 8001594:	2000061f 	.word	0x2000061f
 8001598:	20000608 	.word	0x20000608
 800159c:	2000061a 	.word	0x2000061a
 80015a0:	20000618 	.word	0x20000618
 80015a4:	20000040 	.word	0x20000040
 80015a8:	20000044 	.word	0x20000044
 80015ac:	20000048 	.word	0x20000048
 80015b0:	2000004c 	.word	0x2000004c
			case 12: //// 12 Enable end effector 10011100 01100011
				chksum = MainBuf[newPos_uart-1];
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <_Z15All_mode_UARTUIv+0x618>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	4a40      	ldr	r2, [pc, #256]	; (80016bc <_Z15All_mode_UARTUIv+0x61c>)
 80015bc:	5cd2      	ldrb	r2, [r2, r3]
 80015be:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <_Z15All_mode_UARTUIv+0x620>)
 80015c0:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <_Z15All_mode_UARTUIv+0x624>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <_Z15All_mode_UARTUIv+0x628>)
 80015cc:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 80015ce:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <_Z15All_mode_UARTUIv+0x620>)
 80015d0:	781a      	ldrb	r2, [r3, #0]
 80015d2:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <_Z15All_mode_UARTUIv+0x628>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d165      	bne.n	80016a6 <_Z15All_mode_UARTUIv+0x606>
					M_state = 12;
 80015da:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <_Z15All_mode_UARTUIv+0x62c>)
 80015dc:	220c      	movs	r2, #12
 80015de:	701a      	strb	r2, [r3, #0]
					flag_efftActi = 1;
 80015e0:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <_Z15All_mode_UARTUIv+0x630>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	2202      	movs	r2, #2
 80015ec:	4939      	ldr	r1, [pc, #228]	; (80016d4 <_Z15All_mode_UARTUIv+0x634>)
 80015ee:	483a      	ldr	r0, [pc, #232]	; (80016d8 <_Z15All_mode_UARTUIv+0x638>)
 80015f0:	f01a f8e3 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 80015f4:	e057      	b.n	80016a6 <_Z15All_mode_UARTUIv+0x606>
			case 13: // 13 Disable end effector 10011101 01100010
				chksum = MainBuf[newPos_uart-1];
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <_Z15All_mode_UARTUIv+0x618>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <_Z15All_mode_UARTUIv+0x61c>)
 80015fe:	5cd2      	ldrb	r2, [r2, r3]
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <_Z15All_mode_UARTUIv+0x620>)
 8001602:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <_Z15All_mode_UARTUIv+0x624>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	43db      	mvns	r3, r3
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <_Z15All_mode_UARTUIv+0x628>)
 800160e:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <_Z15All_mode_UARTUIv+0x620>)
 8001612:	781a      	ldrb	r2, [r3, #0]
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <_Z15All_mode_UARTUIv+0x628>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d146      	bne.n	80016aa <_Z15All_mode_UARTUIv+0x60a>
					M_state = 13;
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <_Z15All_mode_UARTUIv+0x62c>)
 800161e:	220d      	movs	r2, #13
 8001620:	701a      	strb	r2, [r3, #0]

					trig_efftRead = 0;
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <_Z15All_mode_UARTUIv+0x63c>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
					flag_efftRead = 0;
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <_Z15All_mode_UARTUIv+0x640>)
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]

					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	2202      	movs	r2, #2
 8001634:	4927      	ldr	r1, [pc, #156]	; (80016d4 <_Z15All_mode_UARTUIv+0x634>)
 8001636:	4828      	ldr	r0, [pc, #160]	; (80016d8 <_Z15All_mode_UARTUIv+0x638>)
 8001638:	f01a f8bf 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 800163c:	e035      	b.n	80016aa <_Z15All_mode_UARTUIv+0x60a>
			case 14: //10011110 01100001
				chksum = MainBuf[newPos_uart-1];
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <_Z15All_mode_UARTUIv+0x618>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	3b01      	subs	r3, #1
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <_Z15All_mode_UARTUIv+0x61c>)
 8001646:	5cd2      	ldrb	r2, [r2, r3]
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <_Z15All_mode_UARTUIv+0x620>)
 800164a:	701a      	strb	r2, [r3, #0]
				chksum1 = ~(StartM);
 800164c:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <_Z15All_mode_UARTUIv+0x624>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	43db      	mvns	r3, r3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <_Z15All_mode_UARTUIv+0x628>)
 8001656:	701a      	strb	r2, [r3, #0]
				if (chksum == chksum1){
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <_Z15All_mode_UARTUIv+0x620>)
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <_Z15All_mode_UARTUIv+0x628>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d124      	bne.n	80016ae <_Z15All_mode_UARTUIv+0x60e>
					M_state = 14;
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <_Z15All_mode_UARTUIv+0x62c>)
 8001666:	220e      	movs	r2, #14
 8001668:	701a      	strb	r2, [r3, #0]
					//HAL_UART_Transmit_DMA(&huart2, (uint8_t*)temp_s, 2);
					HAL_UART_Transmit(&huart2, (uint8_t*)temp_s_ack1, 2 ,1000); //Xu
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	2202      	movs	r2, #2
 8001670:	4918      	ldr	r1, [pc, #96]	; (80016d4 <_Z15All_mode_UARTUIv+0x634>)
 8001672:	4819      	ldr	r0, [pc, #100]	; (80016d8 <_Z15All_mode_UARTUIv+0x638>)
 8001674:	f01a f8a1 	bl	801b7ba <HAL_UART_Transmit>
				}
				break;
 8001678:	e019      	b.n	80016ae <_Z15All_mode_UARTUIv+0x60e>
				break;
 800167a:	bf00      	nop
 800167c:	e018      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 800167e:	bf00      	nop
 8001680:	e016      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 8001682:	bf00      	nop
 8001684:	e014      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 8001686:	bf00      	nop
 8001688:	e012      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 800168a:	bf00      	nop
 800168c:	e010      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 800168e:	bf00      	nop
 8001690:	e00e      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 8001692:	bf00      	nop
 8001694:	e00c      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 8001696:	bf00      	nop
 8001698:	e00a      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 800169a:	bf00      	nop
 800169c:	e008      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 800169e:	bf00      	nop
 80016a0:	e006      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 80016a2:	bf00      	nop
 80016a4:	e004      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 80016a6:	bf00      	nop
 80016a8:	e002      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 80016aa:	bf00      	nop
 80016ac:	e000      	b.n	80016b0 <_Z15All_mode_UARTUIv+0x610>
				break;
 80016ae:	bf00      	nop
			}

}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200005fa 	.word	0x200005fa
 80016bc:	200005d8 	.word	0x200005d8
 80016c0:	20000617 	.word	0x20000617
 80016c4:	20000616 	.word	0x20000616
 80016c8:	20000618 	.word	0x20000618
 80016cc:	2000061d 	.word	0x2000061d
 80016d0:	200005ab 	.word	0x200005ab
 80016d4:	2000003c 	.word	0x2000003c
 80016d8:	200002dc 	.word	0x200002dc
 80016dc:	200005ad 	.word	0x200005ad
 80016e0:	200005ac 	.word	0x200005ac

080016e4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80016e4:	b5b0      	push	{r4, r5, r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7fe ff18 	bl	8000524 <__aeabi_i2d>
 80016f4:	4604      	mov	r4, r0
 80016f6:	460d      	mov	r5, r1
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f7fe ff13 	bl	8000524 <__aeabi_i2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	ec43 2b11 	vmov	d1, r2, r3
 8001706:	ec45 4b10 	vmov	d0, r4, r5
 800170a:	f01b fa3d 	bl	801cb88 <pow>
 800170e:	eeb0 7a40 	vmov.f32	s14, s0
 8001712:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001716:	eeb0 0a47 	vmov.f32	s0, s14
 800171a:	eef0 0a67 	vmov.f32	s1, s15
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bdb0      	pop	{r4, r5, r7, pc}

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001728:	b0e6      	sub	sp, #408	; 0x198
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/////assign  Matrix  element value  //////////
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 800172c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001730:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001734:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800173e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001742:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001746:	49f0      	ldr	r1, [pc, #960]	; (8001b08 <main+0x3e4>)
 8001748:	4618      	mov	r0, r3
 800174a:	f002 f94c 	bl	80039e6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 800174e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001752:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001756:	4aed      	ldr	r2, [pc, #948]	; (8001b0c <main+0x3e8>)
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f002 f959 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800176a:	4602      	mov	r2, r0
 800176c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001770:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001774:	49e6      	ldr	r1, [pc, #920]	; (8001b10 <main+0x3ec>)
 8001776:	6019      	str	r1, [r3, #0]
 8001778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f002 f94c 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001784:	4602      	mov	r2, r0
		     0 ,    1    ,      Dt    ,
 8001786:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800178a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800178e:	f04f 0100 	mov.w	r1, #0
 8001792:	6019      	str	r1, [r3, #0]
 8001794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f002 f93e 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80017a6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017ae:	6019      	str	r1, [r3, #0]
 80017b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f002 f930 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80017bc:	4602      	mov	r2, r0
 80017be:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80017c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017c6:	49d1      	ldr	r1, [pc, #836]	; (8001b0c <main+0x3e8>)
 80017c8:	6019      	str	r1, [r3, #0]
 80017ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f002 f923 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80017d6:	4602      	mov	r2, r0
			 0 ,    0    ,      1     ;
 80017d8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80017dc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	6019      	str	r1, [r3, #0]
 80017e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f002 f915 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80017f2:	4602      	mov	r2, r0
 80017f4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80017f8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	6019      	str	r1, [r3, #0]
 8001802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f002 f907 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800180e:	4602      	mov	r2, r0
 8001810:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001814:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001818:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800181c:	6019      	str	r1, [r3, #0]
 800181e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001822:	4619      	mov	r1, r3
 8001824:	4610      	mov	r0, r2
 8001826:	f002 f8f9 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		A << 1 ,   Dt    ,   (Dt*Dt)/2 ,
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4618      	mov	r0, r3
 8001830:	f002 f8e8 	bl	8003a04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		X << 0 ,    0    ,      0     ;
 8001834:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001838:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001846:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800184a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800184e:	49b1      	ldr	r1, [pc, #708]	; (8001b14 <main+0x3f0>)
 8001850:	4618      	mov	r0, r3
 8001852:	f002 f953 	bl	8003afc <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001856:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800185a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001868:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f002 f960 	bl	8003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001874:	4602      	mov	r2, r0
 8001876:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800187a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800187e:	f04f 0100 	mov.w	r1, #0
 8001882:	6019      	str	r1, [r3, #0]
 8001884:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f002 f952 	bl	8003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001890:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001894:	4618      	mov	r0, r3
 8001896:	f002 f940 	bl	8003b1a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		X1 << 0 ,    0    ,      0     ;
 800189a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800189e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80018ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018b0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80018b4:	4998      	ldr	r1, [pc, #608]	; (8001b18 <main+0x3f4>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 f920 	bl	8003afc <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 80018bc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80018c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80018ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 f92d 	bl	8003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 80018da:	4602      	mov	r2, r0
 80018dc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80018e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	6019      	str	r1, [r3, #0]
 80018ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f002 f91f 	bl	8003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 80018f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 f90d 	bl	8003b1a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>


		P << 0.000001 , 			0 	 , 			0     ,
 8001900:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001908:	4a84      	ldr	r2, [pc, #528]	; (8001b1c <main+0x3f8>)
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001910:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001914:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001918:	4981      	ldr	r1, [pc, #516]	; (8001b20 <main+0x3fc>)
 800191a:	4618      	mov	r0, r3
 800191c:	f002 f863 	bl	80039e6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001920:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001924:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001932:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f002 f86f 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800193e:	4602      	mov	r2, r0
 8001940:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001944:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	6019      	str	r1, [r3, #0]
 800194e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f002 f861 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800195a:	4602      	mov	r2, r0
		     0 		 ,    0.000001    ,  		0     ,
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f002 f856 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001970:	4602      	mov	r2, r0
 8001972:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <main+0x3f8>)
 8001974:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001978:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f002 f84c 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001984:	4602      	mov	r2, r0
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800198e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f002 f841 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 800199a:	4602      	mov	r2, r0
			 0 		 ,    		0    ,      0.000001     ;
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019a4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f002 f836 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019be:	4619      	mov	r1, r3
 80019c0:	4610      	mov	r0, r2
 80019c2:	f002 f82b 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <main+0x3f8>)
 80019ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80019ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f002 f821 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		P << 0.000001 , 			0 	 , 			0     ,
 80019da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 f810 	bl	8003a04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		O << 0 , 	0 	 , 		0     ,
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80019ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019f0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80019f4:	494b      	ldr	r1, [pc, #300]	; (8001b24 <main+0x400>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fff5 	bl	80039e6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001a04:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001a08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 f804 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a22:	4619      	mov	r1, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	f001 fff9 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a2a:	4602      	mov	r2, r0
		     0 ,    0    ,  	0     ,
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a34:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f001 ffee 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4610      	mov	r0, r2
 8001a52:	f001 ffe3 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001a60:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a64:	4619      	mov	r1, r3
 8001a66:	4610      	mov	r0, r2
 8001a68:	f001 ffd8 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a6c:	4602      	mov	r2, r0
			 0 ,    0    ,      0     ;
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001a76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f001 ffcd 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001a8c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f001 ffc2 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001aa2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f001 ffb7 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		O << 0 , 	0 	 , 		0     ,
 8001aae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 ffa6 	bl	8003a04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		I << 1 , 0 , 0 ,
 8001ab8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ac0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ac4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001ac8:	4917      	ldr	r1, [pc, #92]	; (8001b28 <main+0x404>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 ff8b 	bl	80039e6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001ad8:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8001adc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 ff9a 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001af2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001af6:	4619      	mov	r1, r3
 8001af8:	4610      	mov	r0, r2
 8001afa:	f001 ff8f 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001afe:	4602      	mov	r2, r0
			 0 , 1 , 0 ,
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e012      	b.n	8001b2c <main+0x408>
 8001b06:	bf00      	nop
 8001b08:	20000438 	.word	0x20000438
 8001b0c:	3a83126f 	.word	0x3a83126f
 8001b10:	350637bd 	.word	0x350637bd
 8001b14:	20000520 	.word	0x20000520
 8001b18:	2000052c 	.word	0x2000052c
 8001b1c:	358637bd 	.word	0x358637bd
 8001b20:	2000045c 	.word	0x2000045c
 8001b24:	20000480 	.word	0x20000480
 8001b28:	200004a4 	.word	0x200004a4
 8001b2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b30:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b34:	4619      	mov	r1, r3
 8001b36:	4610      	mov	r0, r2
 8001b38:	f001 ff70 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f001 ff65 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b52:	4602      	mov	r2, r0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001b5c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001b60:	4619      	mov	r1, r3
 8001b62:	4610      	mov	r0, r2
 8001b64:	f001 ff5a 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b68:	4602      	mov	r2, r0
			 0 , 0 , 1 ;
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f001 ff4f 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b88:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f001 ff44 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001b9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f001 ff39 	bl	8003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>
		I << 1 , 0 , 0 ,
 8001baa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 ff28 	bl	8003a04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>

		R << pow(10,1); ;
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f7ff fd94 	bl	80016e4 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bbc:	ec53 2b10 	vmov	r2, r3, d0
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7fe ffc8 	bl	8000b58 <__aeabi_d2f>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bce:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001bd2:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8001bd6:	49b6      	ldr	r1, [pc, #728]	; (8001eb0 <main+0x78c>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 f81b 	bl	8003c14 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001bde:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 f825 	bl	8003c32 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		D << 0 ;
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bf4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001bf8:	49ae      	ldr	r1, [pc, #696]	; (8001eb4 <main+0x790>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 f80a 	bl	8003c14 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8001c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 f814 	bl	8003c32 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>

		B << 0 , 0 , 0 ;
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c12:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001c16:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001c1a:	49a7      	ldr	r1, [pc, #668]	; (8001eb8 <main+0x794>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 ff6d 	bl	8003afc <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c2a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001c2e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 ff7d 	bl	8003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001c44:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f001 ff72 	bl	8003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001c50:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 ff60 	bl	8003b1a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>

		C << 1 , 0 , 0 ;
 8001c5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c5e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001c62:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c66:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001c6a:	4994      	ldr	r1, [pc, #592]	; (8001ebc <main+0x798>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 ffec 	bl	8003c4a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001c7a:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8001c7e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 fffb 	bl	8003c80 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001c94:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f001 fff0 	bl	8003c80 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>
 8001ca0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 ffdf 	bl	8003c68 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>

		G << (Dt*Dt)/2 , Dt , 1 ;
 8001caa:	4b85      	ldr	r3, [pc, #532]	; (8001ec0 <main+0x79c>)
 8001cac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001cb0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001cb4:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8001cb8:	4982      	ldr	r1, [pc, #520]	; (8001ec4 <main+0x7a0>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f001 ff1e 	bl	8003afc <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>
 8001cc0:	4b81      	ldr	r3, [pc, #516]	; (8001ec8 <main+0x7a4>)
 8001cc2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001cc6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8001cca:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 ff2f 	bl	8003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cdc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001ce0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f001 ff24 	bl	8003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>
 8001cec:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 ff12 	bl	8003b1a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf6:	f014 f865 	bl	8015dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cfa:	f000 f913 	bl	8001f24 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cfe:	f000 fb8b 	bl	8002418 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001d02:	f000 fb59 	bl	80023b8 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8001d06:	f000 f97f 	bl	8002008 <_ZL12MX_I2C1_Initv>
  MX_TIM11_Init();
 8001d0a:	f000 fafd 	bl	8002308 <_ZL13MX_TIM11_Initv>
  MX_TIM2_Init();
 8001d0e:	f000 f9e3 	bl	80020d8 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 8001d12:	f000 fa69 	bl	80021e8 <_ZL12MX_TIM4_Initv>
  MX_I2C3_Init();
 8001d16:	f000 f9ab 	bl	8002070 <_ZL12MX_I2C3_Initv>
  MX_USART2_UART_Init();
 8001d1a:	f000 fb1d 	bl	8002358 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8001d1e:	486b      	ldr	r0, [pc, #428]	; (8001ecc <main+0x7a8>)
 8001d20:	f018 fb76 	bl	801a410 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 8001d24:	486a      	ldr	r0, [pc, #424]	; (8001ed0 <main+0x7ac>)
 8001d26:	f018 fb19 	bl	801a35c <HAL_TIM_Base_Start>
    //HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8001d2a:	486a      	ldr	r0, [pc, #424]	; (8001ed4 <main+0x7b0>)
 8001d2c:	f018 fb16 	bl	801a35c <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001d30:	2100      	movs	r1, #0
 8001d32:	4868      	ldr	r0, [pc, #416]	; (8001ed4 <main+0x7b0>)
 8001d34:	f018 fc28 	bl	801a588 <HAL_TIM_PWM_Start>

    //UART UI
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8001d38:	2220      	movs	r2, #32
 8001d3a:	4967      	ldr	r1, [pc, #412]	; (8001ed8 <main+0x7b4>)
 8001d3c:	4867      	ldr	r0, [pc, #412]	; (8001edc <main+0x7b8>)
 8001d3e:	f019 fdce 	bl	801b8de <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001d42:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <main+0x7bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <main+0x7bc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0208 	bic.w	r2, r2, #8
 8001d50:	601a      	str	r2, [r3, #0]

    //MCP23017 setting init
    HAL_Delay(50);
 8001d52:	2032      	movs	r0, #50	; 0x32
 8001d54:	f014 f8a8 	bl	8015ea8 <HAL_Delay>
    IOExpenderInit();
 8001d58:	f001 fc24 	bl	80035a4 <_Z14IOExpenderInitv>
	  	  //if(micros() - TimeStampGrand >= 1000){
	  		//TimeStampGrand = micros();
	  	  //}
*/
	  	  // Encoder I2CRead
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8001d5c:	f001 fd86 	bl	800386c <_Z6microsv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	495f      	ldr	r1, [pc, #380]	; (8001ee4 <main+0x7c0>)
 8001d66:	6809      	ldr	r1, [r1, #0]
 8001d68:	2000      	movs	r0, #0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	1a54      	subs	r4, r2, r1
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	eb63 0501 	sbc.w	r5, r3, r1
 8001d78:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8001d7c:	f175 0300 	sbcs.w	r3, r5, #0
 8001d80:	bf2c      	ite	cs
 8001d82:	2301      	movcs	r3, #1
 8001d84:	2300      	movcc	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00a      	beq.n	8001da2 <main+0x67e>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8001d8c:	f001 fd6e 	bl	800386c <_Z6microsv>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <main+0x7c0>)
 8001d96:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <main+0x7c4>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
	  	              GrandStatumix();
 8001d9e:	f000 fc15 	bl	80025cc <_Z13GrandStatumixv>
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8001da2:	4852      	ldr	r0, [pc, #328]	; (8001eec <main+0x7c8>)
 8001da4:	f001 fc14 	bl	80035d0 <_Z14AbsEncI2CReadxPh>

	  	  ///////////////////// 2KHz change PWM PB6////////////////////

	  	  if(micros() - timestampPWM >= 500){
 8001da8:	f001 fd60 	bl	800386c <_Z6microsv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	494f      	ldr	r1, [pc, #316]	; (8001ef0 <main+0x7cc>)
 8001db2:	6809      	ldr	r1, [r1, #0]
 8001db4:	2000      	movs	r0, #0
 8001db6:	6039      	str	r1, [r7, #0]
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	ebb2 0801 	subs.w	r8, r2, r1
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	eb63 0901 	sbc.w	r9, r3, r1
 8001dc6:	f5b8 7ffa 	cmp.w	r8, #500	; 0x1f4
 8001dca:	f179 0300 	sbcs.w	r3, r9, #0
 8001dce:	bf2c      	ite	cs
 8001dd0:	2301      	movcs	r3, #1
 8001dd2:	2300      	movcc	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d019      	beq.n	8001e0e <main+0x6ea>
	  		  	  timestampPWM = micros(); // stamp
 8001dda:	f001 fd47 	bl	800386c <_Z6microsv>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <main+0x7cc>)
 8001de4:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut); // dutycycle
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <main+0x7d0>)
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <main+0x7b0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		  //__HAL_TIM_SET_PRESCALER(&htim4, pscalr); // Set freq of pwm
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		if (mot_dirctn == 0){
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <main+0x7d4>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <main+0x6e0>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	483f      	ldr	r0, [pc, #252]	; (8001efc <main+0x7d8>)
 8001dfe:	f014 ff35 	bl	8016c6c <HAL_GPIO_WritePin>
 8001e02:	e004      	b.n	8001e0e <main+0x6ea>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2104      	movs	r1, #4
 8001e08:	483c      	ldr	r0, [pc, #240]	; (8001efc <main+0x7d8>)
 8001e0a:	f014 ff2f 	bl	8016c6c <HAL_GPIO_WritePin>
	  	  		}

	  	  	  }

	  	 ////////////// Motor Control//////////////////////
	  	 if (grandState ==  work){
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <main+0x7dc>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d112      	bne.n	8001e3c <main+0x718>

	  		 if(flagNewpos==0){
 8001e16:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <main+0x7e0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <main+0x708>
	  		    Currentpos = CurrentEn;
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <main+0x7e4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a3a      	ldr	r2, [pc, #232]	; (8001f0c <main+0x7e8>)
 8001e24:	6013      	str	r3, [r2, #0]
	  		    flagNewpos = 1;
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <main+0x7e0>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
	  		 }
	  		 Unwrapping();
 8001e2c:	f000 ffa4 	bl	8002d78 <_Z10Unwrappingv>
	  		 Trajectory();
 8001e30:	f000 fcf2 	bl	8002818 <_Z10Trajectoryv>

	  		 Kalmanfilter();
 8001e34:	f001 f854 	bl	8002ee0 <_Z12Kalmanfilterv>
	  		 controlloop();
 8001e38:	f001 fac2 	bl	80033c0 <_Z11controlloopv>
	  		 MotDrvCytron();
	  		 */
	  	 }

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 8001e3c:	f001 fc28 	bl	8003690 <_Z13Efft_activatev>
	  	 Efft_read(&efft_status);
 8001e40:	4833      	ldr	r0, [pc, #204]	; (8001f10 <main+0x7ec>)
 8001e42:	f001 fc75 	bl	8003730 <_Z9Efft_readPh>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && micros() - timestamp_efft >= 200000){
 8001e46:	4b33      	ldr	r3, [pc, #204]	; (8001f14 <main+0x7f0>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00f      	beq.n	8001e6e <main+0x74a>
 8001e4e:	f001 fd0d 	bl	800386c <_Z6microsv>
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <main+0x7f4>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	ebb0 0a02 	subs.w	sl, r0, r2
 8001e5c:	eb61 0b03 	sbc.w	fp, r1, r3
 8001e60:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <main+0x7f8>)
 8001e62:	459a      	cmp	sl, r3
 8001e64:	f17b 0300 	sbcs.w	r3, fp, #0
 8001e68:	d301      	bcc.n	8001e6e <main+0x74a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <main+0x74c>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00f      	beq.n	8001e94 <main+0x770>
	  		 timestamp_efft = micros();
 8001e74:	f001 fcfa 	bl	800386c <_Z6microsv>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4926      	ldr	r1, [pc, #152]	; (8001f18 <main+0x7f4>)
 8001e7e:	e9c1 2300 	strd	r2, r3, [r1]
	  		 flag_efftRead = 1;
 8001e82:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <main+0x7fc>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
	  		 trig_efftRead++;
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <main+0x7f0>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <main+0x7f0>)
 8001e92:	701a      	strb	r2, [r3, #0]

	  	 }
	  	 //// disable this when run with laserwork
	  	 if(trig_efftRead >= 40 || efft_status == 0x78 ){//
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <main+0x7f0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b27      	cmp	r3, #39	; 0x27
 8001e9a:	d804      	bhi.n	8001ea6 <main+0x782>
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <main+0x7ec>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b78      	cmp	r3, #120	; 0x78
 8001ea2:	f47f af5b 	bne.w	8001d5c <main+0x638>
	  		 trig_efftRead = 0;
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <main+0x7f0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8001eac:	e756      	b.n	8001d5c <main+0x638>
 8001eae:	bf00      	nop
 8001eb0:	200004cc 	.word	0x200004cc
 8001eb4:	200004d0 	.word	0x200004d0
 8001eb8:	20000538 	.word	0x20000538
 8001ebc:	200004e4 	.word	0x200004e4
 8001ec0:	350637bd 	.word	0x350637bd
 8001ec4:	200004f0 	.word	0x200004f0
 8001ec8:	3a83126f 	.word	0x3a83126f
 8001ecc:	20000234 	.word	0x20000234
 8001ed0:	200001a4 	.word	0x200001a4
 8001ed4:	200001ec 	.word	0x200001ec
 8001ed8:	200005b8 	.word	0x200005b8
 8001edc:	200002dc 	.word	0x200002dc
 8001ee0:	20000320 	.word	0x20000320
 8001ee4:	200003f4 	.word	0x200003f4
 8001ee8:	200003fe 	.word	0x200003fe
 8001eec:	200003f8 	.word	0x200003f8
 8001ef0:	20000400 	.word	0x20000400
 8001ef4:	2000000a 	.word	0x2000000a
 8001ef8:	20000404 	.word	0x20000404
 8001efc:	40020400 	.word	0x40020400
 8001f00:	200003e0 	.word	0x200003e0
 8001f04:	20000424 	.word	0x20000424
 8001f08:	20000564 	.word	0x20000564
 8001f0c:	20000420 	.word	0x20000420
 8001f10:	200005aa 	.word	0x200005aa
 8001f14:	200005ad 	.word	0x200005ad
 8001f18:	200005b0 	.word	0x200005b0
 8001f1c:	00030d40 	.word	0x00030d40
 8001f20:	200005ac 	.word	0x200005ac

08001f24 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b094      	sub	sp, #80	; 0x50
 8001f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	2230      	movs	r2, #48	; 0x30
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f01b fdce 	bl	801dad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <_Z18SystemClock_Configv+0xdc>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <_Z18SystemClock_Configv+0xdc>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <_Z18SystemClock_Configv+0xdc>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <_Z18SystemClock_Configv+0xe0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	; (8002004 <_Z18SystemClock_Configv+0xe0>)
 8001f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <_Z18SystemClock_Configv+0xe0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f80:	2302      	movs	r3, #2
 8001f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f84:	2301      	movs	r3, #1
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f88:	2310      	movs	r3, #16
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f94:	2308      	movs	r3, #8
 8001f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f98:	2364      	movs	r3, #100	; 0x64
 8001f9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa4:	f107 0320 	add.w	r3, r7, #32
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f017 fcef 	bl	801998c <HAL_RCC_OscConfig>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001fbe:	f001 fc8b 	bl	80038d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fd8:	f107 030c 	add.w	r3, r7, #12
 8001fdc:	2103      	movs	r1, #3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f017 ff4c 	bl	8019e7c <HAL_RCC_ClockConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001ff4:	f001 fc70 	bl	80038d8 <Error_Handler>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000

08002008 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <_ZL12MX_I2C1_Initv+0x60>)
 8002010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 8002014:	4a15      	ldr	r2, [pc, #84]	; (800206c <_ZL12MX_I2C1_Initv+0x64>)
 8002016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 8002026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800202a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 800202e:	2200      	movs	r2, #0
 8002030:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002044:	4807      	ldr	r0, [pc, #28]	; (8002064 <_ZL12MX_I2C1_Initv+0x5c>)
 8002046:	f014 fe43 	bl	8016cd0 <HAL_I2C_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800205a:	f001 fc3d 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200000fc 	.word	0x200000fc
 8002068:	40005400 	.word	0x40005400
 800206c:	00061a80 	.word	0x00061a80

08002070 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 8002076:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <_ZL12MX_I2C3_Initv+0x60>)
 8002078:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <_ZL12MX_I2C3_Initv+0x64>)
 800207e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 800208e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002092:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 8002096:	2200      	movs	r2, #0
 8002098:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80020ac:	4807      	ldr	r0, [pc, #28]	; (80020cc <_ZL12MX_I2C3_Initv+0x5c>)
 80020ae:	f014 fe0f 	bl	8016cd0 <HAL_I2C_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 80020c2:	f001 fc09 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000150 	.word	0x20000150
 80020d0:	40005c00 	.word	0x40005c00
 80020d4:	00061a80 	.word	0x00061a80

080020d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	f107 0318 	add.w	r3, r7, #24
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020f6:	463b      	mov	r3, r7
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002102:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 8002104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800210a:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 800210c:	2263      	movs	r2, #99	; 0x63
 800210e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800212a:	482e      	ldr	r0, [pc, #184]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 800212c:	f018 f8c6 	bl	801a2bc <HAL_TIM_Base_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <_ZL12MX_TIM2_Initv+0x6c>
  {
    Error_Handler();
 8002140:	f001 fbca 	bl	80038d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800214a:	f107 0318 	add.w	r3, r7, #24
 800214e:	4619      	mov	r1, r3
 8002150:	4824      	ldr	r0, [pc, #144]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 8002152:	f018 fd89 	bl	801ac68 <HAL_TIM_ConfigClockSource>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <_ZL12MX_TIM2_Initv+0x92>
  {
    Error_Handler();
 8002166:	f001 fbb7 	bl	80038d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800216a:	481e      	ldr	r0, [pc, #120]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 800216c:	f018 fabc 	bl	801a6e8 <HAL_TIM_IC_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002180:	f001 fbaa 	bl	80038d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4619      	mov	r1, r3
 8002192:	4814      	ldr	r0, [pc, #80]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 8002194:	f019 fa42 	bl	801b61c <HAL_TIMEx_MasterConfigSynchronization>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <_ZL12MX_TIM2_Initv+0xd4>
  {
    Error_Handler();
 80021a8:	f001 fb96 	bl	80038d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021ac:	2300      	movs	r3, #0
 80021ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021b0:	2301      	movs	r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021bc:	463b      	mov	r3, r7
 80021be:	2200      	movs	r2, #0
 80021c0:	4619      	mov	r1, r3
 80021c2:	4808      	ldr	r0, [pc, #32]	; (80021e4 <_ZL12MX_TIM2_Initv+0x10c>)
 80021c4:	f018 fbf1 	bl	801a9aa <HAL_TIM_IC_ConfigChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <_ZL12MX_TIM2_Initv+0x104>
  {
    Error_Handler();
 80021d8:	f001 fb7e 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200001a4 	.word	0x200001a4

080021e8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	f107 0320 	add.w	r3, r7, #32
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
 8002214:	615a      	str	r2, [r3, #20]
 8002216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 800221a:	4a3a      	ldr	r2, [pc, #232]	; (8002304 <_ZL12MX_TIM4_Initv+0x11c>)
 800221c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 800222c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002230:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b33      	ldr	r3, [pc, #204]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002238:	4b31      	ldr	r3, [pc, #196]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800223e:	4830      	ldr	r0, [pc, #192]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 8002240:	f018 f83c 	bl	801a2bc <HAL_TIM_Base_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf14      	ite	ne
 800224a:	2301      	movne	r3, #1
 800224c:	2300      	moveq	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8002254:	f001 fb40 	bl	80038d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800225e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002262:	4619      	mov	r1, r3
 8002264:	4826      	ldr	r0, [pc, #152]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 8002266:	f018 fcff 	bl	801ac68 <HAL_TIM_ConfigClockSource>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 800227a:	f001 fb2d 	bl	80038d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800227e:	4820      	ldr	r0, [pc, #128]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 8002280:	f018 f928 	bl	801a4d4 <HAL_TIM_PWM_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8002294:	f001 fb20 	bl	80038d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022a0:	f107 0320 	add.w	r3, r7, #32
 80022a4:	4619      	mov	r1, r3
 80022a6:	4816      	ldr	r0, [pc, #88]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 80022a8:	f019 f9b8 	bl	801b61c <HAL_TIMEx_MasterConfigSynchronization>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 80022bc:	f001 fb0c 	bl	80038d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c0:	2360      	movs	r3, #96	; 0x60
 80022c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	4619      	mov	r1, r3
 80022d6:	480a      	ldr	r0, [pc, #40]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 80022d8:	f018 fc04 	bl	801aae4 <HAL_TIM_PWM_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bf14      	ite	ne
 80022e2:	2301      	movne	r3, #1
 80022e4:	2300      	moveq	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 80022ec:	f001 faf4 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <_ZL12MX_TIM4_Initv+0x118>)
 80022f2:	f013 fadb 	bl	80158ac <HAL_TIM_MspPostInit>

}
 80022f6:	bf00      	nop
 80022f8:	3738      	adds	r7, #56	; 0x38
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200001ec 	.word	0x200001ec
 8002304:	40000800 	.word	0x40000800

08002308 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <_ZL13MX_TIM11_Initv+0x48>)
 800230e:	4a11      	ldr	r2, [pc, #68]	; (8002354 <_ZL13MX_TIM11_Initv+0x4c>)
 8002310:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <_ZL13MX_TIM11_Initv+0x48>)
 8002314:	2263      	movs	r2, #99	; 0x63
 8002316:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <_ZL13MX_TIM11_Initv+0x48>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <_ZL13MX_TIM11_Initv+0x48>)
 8002320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002324:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <_ZL13MX_TIM11_Initv+0x48>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <_ZL13MX_TIM11_Initv+0x48>)
 800232e:	2200      	movs	r2, #0
 8002330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002332:	4807      	ldr	r0, [pc, #28]	; (8002350 <_ZL13MX_TIM11_Initv+0x48>)
 8002334:	f017 ffc2 	bl	801a2bc <HAL_TIM_Base_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <_ZL13MX_TIM11_Initv+0x44>
  {
    Error_Handler();
 8002348:	f001 fac6 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000234 	.word	0x20000234
 8002354:	40014800 	.word	0x40014800

08002358 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <_ZL19MX_USART2_UART_Initv+0x5c>)
 8002360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002364:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 800236c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002370:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 800237a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002382:	220c      	movs	r2, #12
 8002384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002394:	f019 f9c4 	bl	801b720 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <_ZL19MX_USART2_UART_Initv+0x54>
  {
    Error_Handler();
 80023a8:	f001 fa96 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200002dc 	.word	0x200002dc
 80023b4:	40004400 	.word	0x40004400

080023b8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <_ZL11MX_DMA_Initv+0x5c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <_ZL11MX_DMA_Initv+0x5c>)
 80023c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_ZL11MX_DMA_Initv+0x5c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2010      	movs	r0, #16
 80023e0:	f013 fe61 	bl	80160a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023e4:	2010      	movs	r0, #16
 80023e6:	f013 fe7a 	bl	80160de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	2011      	movs	r0, #17
 80023f0:	f013 fe59 	bl	80160a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023f4:	2011      	movs	r0, #17
 80023f6:	f013 fe72 	bl	80160de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	202f      	movs	r0, #47	; 0x2f
 8002400:	f013 fe51 	bl	80160a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002404:	202f      	movs	r0, #47	; 0x2f
 8002406:	f013 fe6a 	bl	80160de <HAL_NVIC_EnableIRQ>

}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a60      	ldr	r2, [pc, #384]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b5a      	ldr	r3, [pc, #360]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a59      	ldr	r2, [pc, #356]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a4b      	ldr	r2, [pc, #300]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a44      	ldr	r2, [pc, #272]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <_ZL12MX_GPIO_Initv+0x1a0>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2120      	movs	r1, #32
 80024be:	483f      	ldr	r0, [pc, #252]	; (80025bc <_ZL12MX_GPIO_Initv+0x1a4>)
 80024c0:	f014 fbd4 	bl	8016c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80024c4:	2200      	movs	r2, #0
 80024c6:	f24e 0104 	movw	r1, #57348	; 0xe004
 80024ca:	483d      	ldr	r0, [pc, #244]	; (80025c0 <_ZL12MX_GPIO_Initv+0x1a8>)
 80024cc:	f014 fbce 	bl	8016c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 80024d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80024d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4619      	mov	r1, r3
 80024e6:	4837      	ldr	r0, [pc, #220]	; (80025c4 <_ZL12MX_GPIO_Initv+0x1ac>)
 80024e8:	f014 fa24 	bl	8016934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80024ec:	2320      	movs	r3, #32
 80024ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	482e      	ldr	r0, [pc, #184]	; (80025bc <_ZL12MX_GPIO_Initv+0x1a4>)
 8002504:	f014 fa16 	bl	8016934 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8002508:	2302      	movs	r3, #2
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	4829      	ldr	r0, [pc, #164]	; (80025c0 <_ZL12MX_GPIO_Initv+0x1a8>)
 800251c:	f014 fa0a 	bl	8016934 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8002520:	f24e 0304 	movw	r3, #57348	; 0xe004
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4821      	ldr	r0, [pc, #132]	; (80025c0 <_ZL12MX_GPIO_Initv+0x1a8>)
 800253a:	f014 f9fb 	bl	8016934 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 800253e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002544:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4619      	mov	r1, r3
 8002554:	481b      	ldr	r0, [pc, #108]	; (80025c4 <_ZL12MX_GPIO_Initv+0x1ac>)
 8002556:	f014 f9ed 	bl	8016934 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 800255a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <_ZL12MX_GPIO_Initv+0x1ac>)
 8002570:	f014 f9e0 	bl	8016934 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 8002574:	2304      	movs	r3, #4
 8002576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002578:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800257c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	480f      	ldr	r0, [pc, #60]	; (80025c8 <_ZL12MX_GPIO_Initv+0x1b0>)
 800258a:	f014 f9d3 	bl	8016934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	2008      	movs	r0, #8
 8002594:	f013 fd87 	bl	80160a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002598:	2008      	movs	r0, #8
 800259a:	f013 fda0 	bl	80160de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2028      	movs	r0, #40	; 0x28
 80025a4:	f013 fd7f 	bl	80160a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025a8:	2028      	movs	r0, #40	; 0x28
 80025aa:	f013 fd98 	bl	80160de <HAL_NVIC_EnableIRQ>

}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	; 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00

080025cc <_Z13GrandStatumixv>:

/* USER CODE BEGIN 4 */
////////// [Grand State] //////////////////////// [Grand State] ////////////////////////
//======== [Grand State] ======================== [Grand State] ========================
void GrandStatumix(){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80025d0:	4b6c      	ldr	r3, [pc, #432]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <_Z13GrandStatumixv+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025de:	486a      	ldr	r0, [pc, #424]	; (8002788 <_Z13GrandStatumixv+0x1bc>)
 80025e0:	f014 fb44 	bl	8016c6c <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 80025e4:	4b67      	ldr	r3, [pc, #412]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d005      	beq.n	80025f8 <_Z13GrandStatumixv+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f2:	4865      	ldr	r0, [pc, #404]	; (8002788 <_Z13GrandStatumixv+0x1bc>)
 80025f4:	f014 fb3a 	bl	8016c6c <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 80025f8:	4b62      	ldr	r3, [pc, #392]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d103      	bne.n	8002608 <_Z13GrandStatumixv+0x3c>
 8002600:	4b60      	ldr	r3, [pc, #384]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b04      	cmp	r3, #4
 8002606:	d005      	beq.n	8002614 <_Z13GrandStatumixv+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8002608:	2200      	movs	r2, #0
 800260a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260e:	485e      	ldr	r0, [pc, #376]	; (8002788 <_Z13GrandStatumixv+0x1bc>)
 8002610:	f014 fb2c 	bl	8016c6c <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 8002614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002618:	485c      	ldr	r0, [pc, #368]	; (800278c <_Z13GrandStatumixv+0x1c0>)
 800261a:	f014 fb0f 	bl	8016c3c <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	4b5b      	ldr	r3, [pc, #364]	; (8002790 <_Z13GrandStatumixv+0x1c4>)
 8002624:	701a      	strb	r2, [r3, #0]
	pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8002626:	2102      	movs	r1, #2
 8002628:	4857      	ldr	r0, [pc, #348]	; (8002788 <_Z13GrandStatumixv+0x1bc>)
 800262a:	f014 fb07 	bl	8016c3c <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	4b58      	ldr	r3, [pc, #352]	; (8002794 <_Z13GrandStatumixv+0x1c8>)
 8002634:	701a      	strb	r2, [r3, #0]

	switch(grandState){
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	3b01      	subs	r3, #1
 800263c:	2b03      	cmp	r3, #3
 800263e:	d80b      	bhi.n	8002658 <_Z13GrandStatumixv+0x8c>
 8002640:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <_Z13GrandStatumixv+0x7c>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	08002699 	.word	0x08002699
 800264c:	080026d9 	.word	0x080026d9
 8002650:	08002751 	.word	0x08002751
 8002654:	08002727 	.word	0x08002727
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800265e:	484a      	ldr	r0, [pc, #296]	; (8002788 <_Z13GrandStatumixv+0x1bc>)
 8002660:	f014 fb04 	bl	8016c6c <HAL_GPIO_WritePin>
		//PWMOut = 1200;
		Unwrapping();
 8002664:	f000 fb88 	bl	8002d78 <_Z10Unwrappingv>
		Kalmanfilter();
 8002668:	f000 fc3a 	bl	8002ee0 <_Z12Kalmanfilterv>
		//diffvelo();

		if (pwr_sense == 1){grandState = emer;}
 800266c:	4b49      	ldr	r3, [pc, #292]	; (8002794 <_Z13GrandStatumixv+0x1c8>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d102      	bne.n	800267a <_Z13GrandStatumixv+0xae>
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 8002676:	2203      	movs	r2, #3
 8002678:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 800267a:	4b45      	ldr	r3, [pc, #276]	; (8002790 <_Z13GrandStatumixv+0x1c4>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <_Z13GrandStatumixv+0xbc>
 8002682:	4b40      	ldr	r3, [pc, #256]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 8002688:	4b43      	ldr	r3, [pc, #268]	; (8002798 <_Z13GrandStatumixv+0x1cc>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d06e      	beq.n	800276e <_Z13GrandStatumixv+0x1a2>
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
	break;
 8002696:	e06a      	b.n	800276e <_Z13GrandStatumixv+0x1a2>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8002698:	2201      	movs	r2, #1
 800269a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800269e:	483a      	ldr	r0, [pc, #232]	; (8002788 <_Z13GrandStatumixv+0x1bc>)
 80026a0:	f014 fae4 	bl	8016c6c <HAL_GPIO_WritePin>
		//LaserTrajex_workflow();

		if (pwr_sense == 1){
 80026a4:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <_Z13GrandStatumixv+0x1c8>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <_Z13GrandStatumixv+0xee>
			grandState = emer;
 80026ac:	4b35      	ldr	r3, [pc, #212]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 80026ae:	2203      	movs	r2, #3
 80026b0:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80026b2:	4b3a      	ldr	r3, [pc, #232]	; (800279c <_Z13GrandStatumixv+0x1d0>)
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
		}
		if (stop_sense == 0){
 80026ba:	4b35      	ldr	r3, [pc, #212]	; (8002790 <_Z13GrandStatumixv+0x1c4>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d157      	bne.n	8002772 <_Z13GrandStatumixv+0x1a6>
			PWMOut = 0;
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <_Z13GrandStatumixv+0x1d4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 80026c8:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 80026ca:	2204      	movs	r2, #4
 80026cc:	701a      	strb	r2, [r3, #0]
			u_contr = 0;
 80026ce:	4b33      	ldr	r3, [pc, #204]	; (800279c <_Z13GrandStatumixv+0x1d0>)
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
		}
	break;
 80026d6:	e04c      	b.n	8002772 <_Z13GrandStatumixv+0x1a6>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026de:	482a      	ldr	r0, [pc, #168]	; (8002788 <_Z13GrandStatumixv+0x1bc>)
 80026e0:	f014 fac4 	bl	8016c6c <HAL_GPIO_WritePin>
		PWMOut = 0;
 80026e4:	4b2e      	ldr	r3, [pc, #184]	; (80027a0 <_Z13GrandStatumixv+0x1d4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	801a      	strh	r2, [r3, #0]
		u_contr = 0;
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <_Z13GrandStatumixv+0x1d0>)
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

		X(1,0)=0;
 80026f2:	2200      	movs	r2, #0
 80026f4:	2101      	movs	r1, #1
 80026f6:	482b      	ldr	r0, [pc, #172]	; (80027a4 <_Z13GrandStatumixv+0x1d8>)
 80026f8:	f001 fb32 	bl	8003d60 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
		KalV = X(1,0);
 8002704:	2200      	movs	r2, #0
 8002706:	2101      	movs	r1, #1
 8002708:	4826      	ldr	r0, [pc, #152]	; (80027a4 <_Z13GrandStatumixv+0x1d8>)
 800270a:	f001 fb29 	bl	8003d60 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 800270e:	4603      	mov	r3, r0
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <_Z13GrandStatumixv+0x1dc>)
 8002714:	6013      	str	r3, [r2, #0]

		if (stop_sense == 1){
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <_Z13GrandStatumixv+0x1c4>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d12b      	bne.n	8002776 <_Z13GrandStatumixv+0x1aa>
			grandState = Ready;
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]

			// rotation change for dummy test
			//mot_dirctn++;
			//mot_dirctn%=2;
		}
	break;
 8002724:	e027      	b.n	8002776 <_Z13GrandStatumixv+0x1aa>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 8002726:	2201      	movs	r2, #1
 8002728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800272c:	4816      	ldr	r0, [pc, #88]	; (8002788 <_Z13GrandStatumixv+0x1bc>)
 800272e:	f014 fa9d 	bl	8016c6c <HAL_GPIO_WritePin>
			PWMOut = 0;
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <_Z13GrandStatumixv+0x1d4>)
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
			Integral = 0;
 8002738:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <_Z13GrandStatumixv+0x1e0>)
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

			if (stop_sense == 1){
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_Z13GrandStatumixv+0x1c4>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d118      	bne.n	800277a <_Z13GrandStatumixv+0x1ae>
				grandState = work;
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800274e:	e014      	b.n	800277a <_Z13GrandStatumixv+0x1ae>

	case emer:
		ResetParam();
 8002750:	f000 f82e 	bl	80027b0 <_Z10ResetParamv>
		// Reset every variables at control
		if (pwr_sense == 0){
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <_Z13GrandStatumixv+0x1c8>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d110      	bne.n	800277e <_Z13GrandStatumixv+0x1b2>
			grandState = Ready;
 800275c:	4b09      	ldr	r3, [pc, #36]	; (8002784 <_Z13GrandStatumixv+0x1b8>)
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f013 fba0 	bl	8015ea8 <HAL_Delay>
			IOExpenderInit();
 8002768:	f000 ff1c 	bl	80035a4 <_Z14IOExpenderInitv>
		}
	break;
 800276c:	e007      	b.n	800277e <_Z13GrandStatumixv+0x1b2>
	break;
 800276e:	bf00      	nop
 8002770:	e006      	b.n	8002780 <_Z13GrandStatumixv+0x1b4>
	break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <_Z13GrandStatumixv+0x1b4>
	break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <_Z13GrandStatumixv+0x1b4>
		break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <_Z13GrandStatumixv+0x1b4>
	break;
 800277e:	bf00      	nop
	}
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200003e0 	.word	0x200003e0
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	200003e2 	.word	0x200003e2
 8002794:	200003e1 	.word	0x200003e1
 8002798:	20000570 	.word	0x20000570
 800279c:	200005a4 	.word	0x200005a4
 80027a0:	2000000a 	.word	0x2000000a
 80027a4:	20000520 	.word	0x20000520
 80027a8:	20000548 	.word	0x20000548
 80027ac:	20000588 	.word	0x20000588

080027b0 <_Z10ResetParamv>:
		}
		break;
	}
}

void ResetParam(){
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
	// Reset every variables at control
	// reset position buffer
	PWMOut = 0;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <_Z10ResetParamv+0x54>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i <= position_order; i++){
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <_Z10ResetParamv+0x58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4293      	cmp	r3, r2
 80027ca:	dc09      	bgt.n	80027e0 <_Z10ResetParamv+0x30>
		positionlog[position_order] = -1;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <_Z10ResetParamv+0x58>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <_Z10ResetParamv+0x5c>)
 80027d4:	21ff      	movs	r1, #255	; 0xff
 80027d6:	5499      	strb	r1, [r3, r2]
	for(int i = 0; i <= position_order; i++){
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3301      	adds	r3, #1
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	e7ef      	b.n	80027c0 <_Z10ResetParamv+0x10>
	}
	position_order = 0;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <_Z10ResetParamv+0x58>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
	Integral = 0;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <_Z10ResetParamv+0x60>)
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
	u_contr = 0;
 80027ee:	4b09      	ldr	r3, [pc, #36]	; (8002814 <_Z10ResetParamv+0x64>)
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000000a 	.word	0x2000000a
 8002808:	200003f1 	.word	0x200003f1
 800280c:	20000000 	.word	0x20000000
 8002810:	20000588 	.word	0x20000588
 8002814:	200005a4 	.word	0x200005a4

08002818 <_Z10Trajectoryv>:

//////////////////// [Trajectory Path] //////////////////////
void Trajectory(){
 8002818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800281c:	af00      	add	r7, sp, #0
	//0.01 -> 0.1s
	if(micros() - TimeStampTraject >= 1000){
 800281e:	f001 f825 	bl	800386c <_Z6microsv>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	49a3      	ldr	r1, [pc, #652]	; (8002ab4 <_Z10Trajectoryv+0x29c>)
 8002828:	6809      	ldr	r1, [r1, #0]
 800282a:	2000      	movs	r0, #0
 800282c:	4688      	mov	r8, r1
 800282e:	4681      	mov	r9, r0
 8002830:	ebb2 0408 	subs.w	r4, r2, r8
 8002834:	eb63 0509 	sbc.w	r5, r3, r9
 8002838:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800283c:	f175 0300 	sbcs.w	r3, r5, #0
 8002840:	bf2c      	ite	cs
 8002842:	2301      	movcs	r3, #1
 8002844:	2300      	movcc	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8273 	beq.w	8002d34 <_Z10Trajectoryv+0x51c>
		TimeStampTraject = micros();
 800284e:	f001 f80d 	bl	800386c <_Z6microsv>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4b97      	ldr	r3, [pc, #604]	; (8002ab4 <_Z10Trajectoryv+0x29c>)
 8002858:	601a      	str	r2, [r3, #0]

		if (Finalposition/Velocity > Velocity/Acceleration){
 800285a:	4b97      	ldr	r3, [pc, #604]	; (8002ab8 <_Z10Trajectoryv+0x2a0>)
 800285c:	edd3 6a00 	vldr	s13, [r3]
 8002860:	4b96      	ldr	r3, [pc, #600]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286a:	4b94      	ldr	r3, [pc, #592]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 800286c:	ed93 6a00 	vldr	s12, [r3]
 8002870:	4b93      	ldr	r3, [pc, #588]	; (8002ac0 <_Z10Trajectoryv+0x2a8>)
 8002872:	edd3 6a00 	vldr	s13, [r3]
 8002876:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800287a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002882:	dd0b      	ble.n	800289c <_Z10Trajectoryv+0x84>
			Tb = Velocity/Acceleration;
 8002884:	4b8d      	ldr	r3, [pc, #564]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 8002886:	edd3 6a00 	vldr	s13, [r3]
 800288a:	4b8d      	ldr	r3, [pc, #564]	; (8002ac0 <_Z10Trajectoryv+0x2a8>)
 800288c:	ed93 7a00 	vldr	s14, [r3]
 8002890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002894:	4b8b      	ldr	r3, [pc, #556]	; (8002ac4 <_Z10Trajectoryv+0x2ac>)
 8002896:	edc3 7a00 	vstr	s15, [r3]
 800289a:	e01d      	b.n	80028d8 <_Z10Trajectoryv+0xc0>
		}
		else {
			Tb = sqrt(2*Finalposition);
 800289c:	4b86      	ldr	r3, [pc, #536]	; (8002ab8 <_Z10Trajectoryv+0x2a0>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028a6:	eeb0 0a67 	vmov.f32	s0, s15
 80028aa:	f7fe fb37 	bl	8000f1c <_ZSt4sqrtf>
 80028ae:	eef0 7a40 	vmov.f32	s15, s0
 80028b2:	4b84      	ldr	r3, [pc, #528]	; (8002ac4 <_Z10Trajectoryv+0x2ac>)
 80028b4:	edc3 7a00 	vstr	s15, [r3]
			Velocity = sqrt(Finalposition/2);
 80028b8:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <_Z10Trajectoryv+0x2a0>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028c6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ca:	f7fe fb27 	bl	8000f1c <_ZSt4sqrtf>
 80028ce:	eef0 7a40 	vmov.f32	s15, s0
 80028d2:	4b7a      	ldr	r3, [pc, #488]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 80028d4:	edc3 7a00 	vstr	s15, [r3]
		}
		//TimeinS = _micros/10^6;
		timeFinal = (4*Velocity) + ((Finalposition-(2*Velocity*Velocity))/Velocity);
 80028d8:	4b78      	ldr	r3, [pc, #480]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80028e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028e6:	4b74      	ldr	r3, [pc, #464]	; (8002ab8 <_Z10Trajectoryv+0x2a0>)
 80028e8:	edd3 6a00 	vldr	s13, [r3]
 80028ec:	4b73      	ldr	r3, [pc, #460]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80028f6:	4b71      	ldr	r3, [pc, #452]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002900:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8002904:	4b6d      	ldr	r3, [pc, #436]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 8002906:	edd3 6a00 	vldr	s13, [r3]
 800290a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800290e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002912:	4b6d      	ldr	r3, [pc, #436]	; (8002ac8 <_Z10Trajectoryv+0x2b0>)
 8002914:	edc3 7a00 	vstr	s15, [r3]

		if (TimeinS < Tb){
 8002918:	4b6c      	ldr	r3, [pc, #432]	; (8002acc <_Z10Trajectoryv+0x2b4>)
 800291a:	ed93 7a00 	vldr	s14, [r3]
 800291e:	4b69      	ldr	r3, [pc, #420]	; (8002ac4 <_Z10Trajectoryv+0x2ac>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292c:	d552      	bpl.n	80029d4 <_Z10Trajectoryv+0x1bc>
			OutPosition = (0.5*Acceleration*TimeinS*TimeinS)+Currentpos;
 800292e:	4b64      	ldr	r3, [pc, #400]	; (8002ac0 <_Z10Trajectoryv+0x2a8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe08 	bl	8000548 <__aeabi_f2d>
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	4b64      	ldr	r3, [pc, #400]	; (8002ad0 <_Z10Trajectoryv+0x2b8>)
 800293e:	f7fd fe5b 	bl	80005f8 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4614      	mov	r4, r2
 8002948:	461d      	mov	r5, r3
 800294a:	4b60      	ldr	r3, [pc, #384]	; (8002acc <_Z10Trajectoryv+0x2b4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fdfa 	bl	8000548 <__aeabi_f2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4620      	mov	r0, r4
 800295a:	4629      	mov	r1, r5
 800295c:	f7fd fe4c 	bl	80005f8 <__aeabi_dmul>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4614      	mov	r4, r2
 8002966:	461d      	mov	r5, r3
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <_Z10Trajectoryv+0x2b4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fdeb 	bl	8000548 <__aeabi_f2d>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4620      	mov	r0, r4
 8002978:	4629      	mov	r1, r5
 800297a:	f7fd fe3d 	bl	80005f8 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4614      	mov	r4, r2
 8002984:	461d      	mov	r5, r3
 8002986:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <_Z10Trajectoryv+0x2bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fddc 	bl	8000548 <__aeabi_f2d>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4620      	mov	r0, r4
 8002996:	4629      	mov	r1, r5
 8002998:	f7fd fc78 	bl	800028c <__adddf3>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f7fe f8d8 	bl	8000b58 <__aeabi_d2f>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4a4b      	ldr	r2, [pc, #300]	; (8002ad8 <_Z10Trajectoryv+0x2c0>)
 80029ac:	6013      	str	r3, [r2, #0]
			OutVelocity = Acceleration*TimeinS;
 80029ae:	4b44      	ldr	r3, [pc, #272]	; (8002ac0 <_Z10Trajectoryv+0x2a8>)
 80029b0:	ed93 7a00 	vldr	s14, [r3]
 80029b4:	4b45      	ldr	r3, [pc, #276]	; (8002acc <_Z10Trajectoryv+0x2b4>)
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029be:	4b47      	ldr	r3, [pc, #284]	; (8002adc <_Z10Trajectoryv+0x2c4>)
 80029c0:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = Acceleration;
 80029c4:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <_Z10Trajectoryv+0x2a8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a45      	ldr	r2, [pc, #276]	; (8002ae0 <_Z10Trajectoryv+0x2c8>)
 80029ca:	6013      	str	r3, [r2, #0]
			ch = 1;
 80029cc:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <_Z10Trajectoryv+0x2cc>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e19c      	b.n	8002d0e <_Z10Trajectoryv+0x4f6>
		}
		else if(TimeinS < (timeFinal-Tb)){
 80029d4:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <_Z10Trajectoryv+0x2b0>)
 80029d6:	ed93 7a00 	vldr	s14, [r3]
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <_Z10Trajectoryv+0x2ac>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <_Z10Trajectoryv+0x2b4>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	dd79      	ble.n	8002ae8 <_Z10Trajectoryv+0x2d0>
			OutPosition = (0.5*Acceleration*(Tb*Tb)) + (Velocity*(TimeinS-Tb))+Currentpos;
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <_Z10Trajectoryv+0x2a8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fda5 	bl	8000548 <__aeabi_f2d>
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <_Z10Trajectoryv+0x2b8>)
 8002a04:	f7fd fdf8 	bl	80005f8 <__aeabi_dmul>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4614      	mov	r4, r2
 8002a0e:	461d      	mov	r5, r3
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <_Z10Trajectoryv+0x2ac>)
 8002a12:	ed93 7a00 	vldr	s14, [r3]
 8002a16:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <_Z10Trajectoryv+0x2ac>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a20:	ee17 0a90 	vmov	r0, s15
 8002a24:	f7fd fd90 	bl	8000548 <__aeabi_f2d>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	4629      	mov	r1, r5
 8002a30:	f7fd fde2 	bl	80005f8 <__aeabi_dmul>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4614      	mov	r4, r2
 8002a3a:	461d      	mov	r5, r3
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <_Z10Trajectoryv+0x2b4>)
 8002a3e:	ed93 7a00 	vldr	s14, [r3]
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <_Z10Trajectoryv+0x2ac>)
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 8002a4e:	edd3 7a00 	vldr	s15, [r3]
 8002a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a56:	ee17 0a90 	vmov	r0, s15
 8002a5a:	f7fd fd75 	bl	8000548 <__aeabi_f2d>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f7fd fc11 	bl	800028c <__adddf3>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4614      	mov	r4, r2
 8002a70:	461d      	mov	r5, r3
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <_Z10Trajectoryv+0x2bc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fd66 	bl	8000548 <__aeabi_f2d>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4620      	mov	r0, r4
 8002a82:	4629      	mov	r1, r5
 8002a84:	f7fd fc02 	bl	800028c <__adddf3>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f862 	bl	8000b58 <__aeabi_d2f>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <_Z10Trajectoryv+0x2c0>)
 8002a98:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity;
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <_Z10Trajectoryv+0x2a4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <_Z10Trajectoryv+0x2c4>)
 8002aa0:	6013      	str	r3, [r2, #0]
			OutAcceleration = 0;
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <_Z10Trajectoryv+0x2c8>)
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
			ch = 2;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <_Z10Trajectoryv+0x2cc>)
 8002aac:	2202      	movs	r2, #2
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e12d      	b.n	8002d0e <_Z10Trajectoryv+0x4f6>
 8002ab2:	bf00      	nop
 8002ab4:	20000428 	.word	0x20000428
 8002ab8:	2000000c 	.word	0x2000000c
 8002abc:	20000010 	.word	0x20000010
 8002ac0:	20000014 	.word	0x20000014
 8002ac4:	20000414 	.word	0x20000414
 8002ac8:	20000418 	.word	0x20000418
 8002acc:	2000041c 	.word	0x2000041c
 8002ad0:	3fe00000 	.word	0x3fe00000
 8002ad4:	20000420 	.word	0x20000420
 8002ad8:	20000408 	.word	0x20000408
 8002adc:	2000040c 	.word	0x2000040c
 8002ae0:	20000410 	.word	0x20000410
 8002ae4:	200005a8 	.word	0x200005a8
		}
		else if(((timeFinal-Tb) <= TimeinS) && (TimeinS <= timeFinal)){
 8002ae8:	4b97      	ldr	r3, [pc, #604]	; (8002d48 <_Z10Trajectoryv+0x530>)
 8002aea:	ed93 7a00 	vldr	s14, [r3]
 8002aee:	4b97      	ldr	r3, [pc, #604]	; (8002d4c <_Z10Trajectoryv+0x534>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002af8:	4b95      	ldr	r3, [pc, #596]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b06:	f200 80e5 	bhi.w	8002cd4 <_Z10Trajectoryv+0x4bc>
 8002b0a:	4b91      	ldr	r3, [pc, #580]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002b0c:	ed93 7a00 	vldr	s14, [r3]
 8002b10:	4b8d      	ldr	r3, [pc, #564]	; (8002d48 <_Z10Trajectoryv+0x530>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	f200 80d9 	bhi.w	8002cd4 <_Z10Trajectoryv+0x4bc>
			OutPosition = (0.5*Acceleration*(Tb*Tb))+ (Velocity*(timeFinal-(2*Tb)))  + (Velocity*(TimeinS-(timeFinal-Tb))) - (0.5*Acceleration*((TimeinS-(timeFinal-Tb))*(TimeinS-(timeFinal-Tb))))+Currentpos;
 8002b22:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <_Z10Trajectoryv+0x53c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fd0e 	bl	8000548 <__aeabi_f2d>
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	4b89      	ldr	r3, [pc, #548]	; (8002d58 <_Z10Trajectoryv+0x540>)
 8002b32:	f7fd fd61 	bl	80005f8 <__aeabi_dmul>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4614      	mov	r4, r2
 8002b3c:	461d      	mov	r5, r3
 8002b3e:	4b83      	ldr	r3, [pc, #524]	; (8002d4c <_Z10Trajectoryv+0x534>)
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	4b81      	ldr	r3, [pc, #516]	; (8002d4c <_Z10Trajectoryv+0x534>)
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	ee17 0a90 	vmov	r0, s15
 8002b52:	f7fd fcf9 	bl	8000548 <__aeabi_f2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd fd4b 	bl	80005f8 <__aeabi_dmul>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4614      	mov	r4, r2
 8002b68:	461d      	mov	r5, r3
 8002b6a:	4b77      	ldr	r3, [pc, #476]	; (8002d48 <_Z10Trajectoryv+0x530>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	4b76      	ldr	r3, [pc, #472]	; (8002d4c <_Z10Trajectoryv+0x534>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b7e:	4b77      	ldr	r3, [pc, #476]	; (8002d5c <_Z10Trajectoryv+0x544>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b88:	ee17 0a90 	vmov	r0, s15
 8002b8c:	f7fd fcdc 	bl	8000548 <__aeabi_f2d>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4620      	mov	r0, r4
 8002b96:	4629      	mov	r1, r5
 8002b98:	f7fd fb78 	bl	800028c <__adddf3>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4614      	mov	r4, r2
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002ba6:	ed93 7a00 	vldr	s14, [r3]
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <_Z10Trajectoryv+0x530>)
 8002bac:	edd3 6a00 	vldr	s13, [r3]
 8002bb0:	4b66      	ldr	r3, [pc, #408]	; (8002d4c <_Z10Trajectoryv+0x534>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bbe:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <_Z10Trajectoryv+0x544>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc8:	ee17 0a90 	vmov	r0, s15
 8002bcc:	f7fd fcbc 	bl	8000548 <__aeabi_f2d>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	f7fd fb58 	bl	800028c <__adddf3>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4614      	mov	r4, r2
 8002be2:	461d      	mov	r5, r3
 8002be4:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <_Z10Trajectoryv+0x53c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fcad 	bl	8000548 <__aeabi_f2d>
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <_Z10Trajectoryv+0x540>)
 8002bf4:	f7fd fd00 	bl	80005f8 <__aeabi_dmul>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4690      	mov	r8, r2
 8002bfe:	4699      	mov	r9, r3
 8002c00:	4b53      	ldr	r3, [pc, #332]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002c02:	ed93 7a00 	vldr	s14, [r3]
 8002c06:	4b50      	ldr	r3, [pc, #320]	; (8002d48 <_Z10Trajectoryv+0x530>)
 8002c08:	edd3 6a00 	vldr	s13, [r3]
 8002c0c:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <_Z10Trajectoryv+0x534>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c1a:	4b4d      	ldr	r3, [pc, #308]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002c1c:	edd3 6a00 	vldr	s13, [r3]
 8002c20:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <_Z10Trajectoryv+0x530>)
 8002c22:	ed93 6a00 	vldr	s12, [r3]
 8002c26:	4b49      	ldr	r3, [pc, #292]	; (8002d4c <_Z10Trajectoryv+0x534>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002c30:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c38:	ee17 0a90 	vmov	r0, s15
 8002c3c:	f7fd fc84 	bl	8000548 <__aeabi_f2d>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4640      	mov	r0, r8
 8002c46:	4649      	mov	r1, r9
 8002c48:	f7fd fcd6 	bl	80005f8 <__aeabi_dmul>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4620      	mov	r0, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	f7fd fb18 	bl	8000288 <__aeabi_dsub>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	461d      	mov	r5, r3
 8002c60:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <_Z10Trajectoryv+0x548>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fc6f 	bl	8000548 <__aeabi_f2d>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	f7fd fb0b 	bl	800028c <__adddf3>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fd ff6b 	bl	8000b58 <__aeabi_d2f>
 8002c82:	4603      	mov	r3, r0
 8002c84:	4a37      	ldr	r2, [pc, #220]	; (8002d64 <_Z10Trajectoryv+0x54c>)
 8002c86:	6013      	str	r3, [r2, #0]
			OutVelocity = Velocity-(Acceleration*(TimeinS-(timeFinal-Tb)));
 8002c88:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <_Z10Trajectoryv+0x544>)
 8002c8a:	ed93 7a00 	vldr	s14, [r3]
 8002c8e:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002c90:	edd3 6a00 	vldr	s13, [r3]
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <_Z10Trajectoryv+0x530>)
 8002c96:	ed93 6a00 	vldr	s12, [r3]
 8002c9a:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <_Z10Trajectoryv+0x534>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ca4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <_Z10Trajectoryv+0x53c>)
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <_Z10Trajectoryv+0x550>)
 8002cb8:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = -Acceleration;
 8002cbc:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <_Z10Trajectoryv+0x53c>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	eef1 7a67 	vneg.f32	s15, s15
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <_Z10Trajectoryv+0x554>)
 8002cc8:	edc3 7a00 	vstr	s15, [r3]
			ch = 3;
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <_Z10Trajectoryv+0x558>)
 8002cce:	2203      	movs	r2, #3
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e01c      	b.n	8002d0e <_Z10Trajectoryv+0x4f6>
		}
		else if(TimeinS > timeFinal){
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002cd6:	ed93 7a00 	vldr	s14, [r3]
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <_Z10Trajectoryv+0x530>)
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce8:	dd11      	ble.n	8002d0e <_Z10Trajectoryv+0x4f6>
			OutPosition = Finalposition+Currentpos;
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <_Z10Trajectoryv+0x55c>)
 8002cec:	ed93 7a00 	vldr	s14, [r3]
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <_Z10Trajectoryv+0x548>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <_Z10Trajectoryv+0x54c>)
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
			OutAcceleration = 0;
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <_Z10Trajectoryv+0x554>)
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
			ch = 4;
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <_Z10Trajectoryv+0x558>)
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	701a      	strb	r2, [r3, #0]
		}

		TimeinS = TimeinS + Dt;
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fc18 	bl	8000548 <__aeabi_f2d>
 8002d18:	a309      	add	r3, pc, #36	; (adr r3, 8002d40 <_Z10Trajectoryv+0x528>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fab5 	bl	800028c <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd ff15 	bl	8000b58 <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <_Z10Trajectoryv+0x538>)
 8002d32:	6013      	str	r3, [r2, #0]

	 }

	//OutVelocity = 0.523598775 ;
}
 8002d34:	bf00      	nop
 8002d36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d3a:	bf00      	nop
 8002d3c:	f3af 8000 	nop.w
 8002d40:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d44:	3f50624d 	.word	0x3f50624d
 8002d48:	20000418 	.word	0x20000418
 8002d4c:	20000414 	.word	0x20000414
 8002d50:	2000041c 	.word	0x2000041c
 8002d54:	20000014 	.word	0x20000014
 8002d58:	3fe00000 	.word	0x3fe00000
 8002d5c:	20000010 	.word	0x20000010
 8002d60:	20000420 	.word	0x20000420
 8002d64:	20000408 	.word	0x20000408
 8002d68:	2000040c 	.word	0x2000040c
 8002d6c:	20000410 	.word	0x20000410
 8002d70:	200005a8 	.word	0x200005a8
 8002d74:	2000000c 	.word	0x2000000c

08002d78 <_Z10Unwrappingv>:

//////////////////////// [Unwrapping] ///////////////////////
void Unwrapping(){
 8002d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d7c:	af00      	add	r7, sp, #0

	if(micros() - TimeUnwrap >= 1000){
 8002d7e:	f000 fd75 	bl	800386c <_Z6microsv>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	494c      	ldr	r1, [pc, #304]	; (8002eb8 <_Z10Unwrappingv+0x140>)
 8002d88:	6809      	ldr	r1, [r1, #0]
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	4688      	mov	r8, r1
 8002d8e:	4681      	mov	r9, r0
 8002d90:	ebb2 0408 	subs.w	r4, r2, r8
 8002d94:	eb63 0509 	sbc.w	r5, r3, r9
 8002d98:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002d9c:	f175 0300 	sbcs.w	r3, r5, #0
 8002da0:	bf2c      	ite	cs
 8002da2:	2301      	movcs	r3, #1
 8002da4:	2300      	movcc	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d07c      	beq.n	8002ea6 <_Z10Unwrappingv+0x12e>
		TimeUnwrap = micros();
 8002dac:	f000 fd5e 	bl	800386c <_Z6microsv>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <_Z10Unwrappingv+0x140>)
 8002db6:	601a      	str	r2, [r3, #0]
		Pn = BinPosXI*0.006136;
 8002db8:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <_Z10Unwrappingv+0x144>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd fbb1 	bl	8000524 <__aeabi_i2d>
 8002dc2:	a33b      	add	r3, pc, #236	; (adr r3, 8002eb0 <_Z10Unwrappingv+0x138>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f7fd fc16 	bl	80005f8 <__aeabi_dmul>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7fd fec0 	bl	8000b58 <__aeabi_d2f>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a39      	ldr	r2, [pc, #228]	; (8002ec0 <_Z10Unwrappingv+0x148>)
 8002ddc:	6013      	str	r3, [r2, #0]
		if(Pn-P_n <= -1*e){
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <_Z10Unwrappingv+0x148>)
 8002de0:	ed93 7a00 	vldr	s14, [r3]
 8002de4:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <_Z10Unwrappingv+0x14c>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <_Z10Unwrappingv+0x150>)
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	eef1 7a67 	vneg.f32	s15, s15
 8002df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e00:	d80b      	bhi.n	8002e1a <_Z10Unwrappingv+0xa2>
			P0 = P_0 + P_max;
 8002e02:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <_Z10Unwrappingv+0x154>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <_Z10Unwrappingv+0x158>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <_Z10Unwrappingv+0x15c>)
 8002e14:	edc3 7a00 	vstr	s15, [r3]
 8002e18:	e01f      	b.n	8002e5a <_Z10Unwrappingv+0xe2>
		}
		else if(Pn - P_n >= e){
 8002e1a:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <_Z10Unwrappingv+0x148>)
 8002e1c:	ed93 7a00 	vldr	s14, [r3]
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <_Z10Unwrappingv+0x14c>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <_Z10Unwrappingv+0x150>)
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	db0b      	blt.n	8002e52 <_Z10Unwrappingv+0xda>
			P0 = P_0 - P_max;
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <_Z10Unwrappingv+0x154>)
 8002e3c:	ed93 7a00 	vldr	s14, [r3]
 8002e40:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <_Z10Unwrappingv+0x158>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <_Z10Unwrappingv+0x15c>)
 8002e4c:	edc3 7a00 	vstr	s15, [r3]
 8002e50:	e003      	b.n	8002e5a <_Z10Unwrappingv+0xe2>
		}
		else{
			P0 = P_0;
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <_Z10Unwrappingv+0x154>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <_Z10Unwrappingv+0x15c>)
 8002e58:	6013      	str	r3, [r2, #0]
		}

		OutUnwrap = Pn + P0;
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <_Z10Unwrappingv+0x148>)
 8002e5c:	ed93 7a00 	vldr	s14, [r3]
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <_Z10Unwrappingv+0x15c>)
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <_Z10Unwrappingv+0x160>)
 8002e6c:	edc3 7a00 	vstr	s15, [r3]
		CurrentEn = BinPosXI * 0.006136;
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <_Z10Unwrappingv+0x144>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd fb55 	bl	8000524 <__aeabi_i2d>
 8002e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8002eb0 <_Z10Unwrappingv+0x138>)
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f7fd fbba 	bl	80005f8 <__aeabi_dmul>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f7fd fe64 	bl	8000b58 <__aeabi_d2f>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <_Z10Unwrappingv+0x164>)
 8002e94:	6013      	str	r3, [r2, #0]
		P_n = Pn;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <_Z10Unwrappingv+0x148>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <_Z10Unwrappingv+0x14c>)
 8002e9c:	6013      	str	r3, [r2, #0]
		P_0 = P0;
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <_Z10Unwrappingv+0x15c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	; (8002ecc <_Z10Unwrappingv+0x154>)
 8002ea4:	6013      	str	r3, [r2, #0]
	}
}
 8002ea6:	bf00      	nop
 8002ea8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002eac:	f3af 8000 	nop.w
 8002eb0:	f540895d 	.word	0xf540895d
 8002eb4:	3f79220f 	.word	0x3f79220f
 8002eb8:	20000568 	.word	0x20000568
 8002ebc:	200003fc 	.word	0x200003fc
 8002ec0:	20000558 	.word	0x20000558
 8002ec4:	2000055c 	.word	0x2000055c
 8002ec8:	20000020 	.word	0x20000020
 8002ecc:	20000554 	.word	0x20000554
 8002ed0:	2000001c 	.word	0x2000001c
 8002ed4:	20000550 	.word	0x20000550
 8002ed8:	20000560 	.word	0x20000560
 8002edc:	20000564 	.word	0x20000564

08002ee0 <_Z12Kalmanfilterv>:
	}
}


/////////////////////////// [Kalman Filter] ///////////////////////
void Kalmanfilter(){
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b0d4      	sub	sp, #336	; 0x150
 8002ee6:	af00      	add	r7, sp, #0

	 if(micros() - TimeStampKalman >= 1000){
 8002ee8:	f000 fcc0 	bl	800386c <_Z6microsv>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	499c      	ldr	r1, [pc, #624]	; (8003164 <_Z12Kalmanfilterv+0x284>)
 8002ef2:	6809      	ldr	r1, [r1, #0]
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	468a      	mov	sl, r1
 8002ef8:	4683      	mov	fp, r0
 8002efa:	ebb2 040a 	subs.w	r4, r2, sl
 8002efe:	eb63 050b 	sbc.w	r5, r3, fp
 8002f02:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8002f06:	f175 0300 	sbcs.w	r3, r5, #0
 8002f0a:	bf2c      	ite	cs
 8002f0c:	2301      	movcs	r3, #1
 8002f0e:	2300      	movcc	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 811f 	beq.w	8003156 <_Z12Kalmanfilterv+0x276>
		 TimeStampKalman = micros();
 8002f18:	f000 fca8 	bl	800386c <_Z6microsv>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4b90      	ldr	r3, [pc, #576]	; (8003164 <_Z12Kalmanfilterv+0x284>)
 8002f22:	601a      	str	r2, [r3, #0]
		 ////////// Predict ////////////////////
		 Q = G*Q1*G.transpose();
 8002f24:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002f28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f2c:	4a8e      	ldr	r2, [pc, #568]	; (8003168 <_Z12Kalmanfilterv+0x288>)
 8002f2e:	498f      	ldr	r1, [pc, #572]	; (800316c <_Z12Kalmanfilterv+0x28c>)
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 ff59 	bl	8003de8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>
 8002f36:	488d      	ldr	r0, [pc, #564]	; (800316c <_Z12Kalmanfilterv+0x28c>)
 8002f38:	f000 ff8f 	bl	8003e5a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002f42:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002f4c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f50:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002f54:	f107 011c 	add.w	r1, r7, #28
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 ffb0 	bl	8003ebe <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	4619      	mov	r1, r3
 8002f64:	4882      	ldr	r0, [pc, #520]	; (8003170 <_Z12Kalmanfilterv+0x290>)
 8002f66:	f000 ffc1 	bl	8003eec <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X = A*X1 ;
 8002f6a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002f6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <_Z12Kalmanfilterv+0x294>)
 8002f74:	4980      	ldr	r1, [pc, #512]	; (8003178 <_Z12Kalmanfilterv+0x298>)
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 ffc7 	bl	8003f0a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8002f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f80:	4619      	mov	r1, r3
 8002f82:	487e      	ldr	r0, [pc, #504]	; (800317c <_Z12Kalmanfilterv+0x29c>)
 8002f84:	f000 ffd8 	bl	8003f38 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 P = A*O*A.transpose()+Q;
 8002f88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f8c:	4a7c      	ldr	r2, [pc, #496]	; (8003180 <_Z12Kalmanfilterv+0x2a0>)
 8002f8e:	497a      	ldr	r1, [pc, #488]	; (8003178 <_Z12Kalmanfilterv+0x298>)
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 ffe0 	bl	8003f56 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>
 8002f96:	4878      	ldr	r0, [pc, #480]	; (8003178 <_Z12Kalmanfilterv+0x298>)
 8002f98:	f000 fff4 	bl	8003f84 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8002fa0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fa8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fac:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fffa 	bl	8003faa <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>
 8002fb6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002fba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fbe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002fc2:	4a6b      	ldr	r2, [pc, #428]	; (8003170 <_Z12Kalmanfilterv+0x290>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 f807 	bl	8003fd8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>
 8002fca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fce:	4619      	mov	r1, r3
 8002fd0:	486c      	ldr	r0, [pc, #432]	; (8003184 <_Z12Kalmanfilterv+0x2a4>)
 8002fd2:	f001 f81f 	bl	8004014 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>

		 //////////////// Update /////////////////////
	     Z << OutUnwrap ;
 8002fd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fda:	4a6b      	ldr	r2, [pc, #428]	; (8003188 <_Z12Kalmanfilterv+0x2a8>)
 8002fdc:	496b      	ldr	r1, [pc, #428]	; (800318c <_Z12Kalmanfilterv+0x2ac>)
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fe18 	bl	8003c14 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>
 8002fe4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fe22 	bl	8003c32 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
	//     Z << DiffVelo ;
		 K = (P*C.transpose())*(C*P*C.transpose()+R).inverse();
 8002fee:	4868      	ldr	r0, [pc, #416]	; (8003190 <_Z12Kalmanfilterv+0x2b0>)
 8002ff0:	f001 f81f 	bl	8004032 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ffa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ffe:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003002:	4960      	ldr	r1, [pc, #384]	; (8003184 <_Z12Kalmanfilterv+0x2a4>)
 8003004:	4618      	mov	r0, r3
 8003006:	f001 f827 	bl	8004058 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>
 800300a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800300e:	4a5d      	ldr	r2, [pc, #372]	; (8003184 <_Z12Kalmanfilterv+0x2a4>)
 8003010:	495f      	ldr	r1, [pc, #380]	; (8003190 <_Z12Kalmanfilterv+0x2b0>)
 8003012:	4618      	mov	r0, r3
 8003014:	f001 f837 	bl	8004086 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003018:	485d      	ldr	r0, [pc, #372]	; (8003190 <_Z12Kalmanfilterv+0x2b0>)
 800301a:	f001 f80a 	bl	8004032 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800301e:	4603      	mov	r3, r0
 8003020:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003024:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003028:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800302c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8003030:	4618      	mov	r0, r3
 8003032:	f001 f83f 	bl	80040b4 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>
 8003036:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800303a:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800303e:	4a55      	ldr	r2, [pc, #340]	; (8003194 <_Z12Kalmanfilterv+0x2b4>)
 8003040:	4618      	mov	r0, r3
 8003042:	f001 f84e 	bl	80040e2 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 8003046:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800304a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f001 f8a1 	bl	8004198 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>
 8003056:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800305a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800305e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003062:	4618      	mov	r0, r3
 8003064:	f001 f8d0 	bl	8004208 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>
 8003068:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800306c:	4619      	mov	r1, r3
 800306e:	484a      	ldr	r0, [pc, #296]	; (8003198 <_Z12Kalmanfilterv+0x2b8>)
 8003070:	f001 f8e1 	bl	8004236 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>
		 X1 = X+K*(Z-C*X);
 8003074:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003078:	4a40      	ldr	r2, [pc, #256]	; (800317c <_Z12Kalmanfilterv+0x29c>)
 800307a:	4945      	ldr	r1, [pc, #276]	; (8003190 <_Z12Kalmanfilterv+0x2b0>)
 800307c:	4618      	mov	r0, r3
 800307e:	f001 f8e9 	bl	8004254 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 8003082:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003086:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800308a:	4940      	ldr	r1, [pc, #256]	; (800318c <_Z12Kalmanfilterv+0x2ac>)
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f8f8 	bl	8004282 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 8003092:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003096:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800309a:	493f      	ldr	r1, [pc, #252]	; (8003198 <_Z12Kalmanfilterv+0x2b8>)
 800309c:	4618      	mov	r0, r3
 800309e:	f001 f92d 	bl	80042fc <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>
 80030a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030a6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80030aa:	4934      	ldr	r1, [pc, #208]	; (800317c <_Z12Kalmanfilterv+0x29c>)
 80030ac:	4618      	mov	r0, r3
 80030ae:	f001 f952 	bl	8004356 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>
 80030b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030b6:	4619      	mov	r1, r3
 80030b8:	482e      	ldr	r0, [pc, #184]	; (8003174 <_Z12Kalmanfilterv+0x294>)
 80030ba:	f001 f96a 	bl	8004392 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>
		 O = (I-(K*C))*P;
 80030be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80030c2:	4a33      	ldr	r2, [pc, #204]	; (8003190 <_Z12Kalmanfilterv+0x2b0>)
 80030c4:	4934      	ldr	r1, [pc, #208]	; (8003198 <_Z12Kalmanfilterv+0x2b8>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 f972 	bl	80043b0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>
 80030cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80030d0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80030d4:	4931      	ldr	r1, [pc, #196]	; (800319c <_Z12Kalmanfilterv+0x2bc>)
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 f981 	bl	80043de <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>
 80030dc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80030e0:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <_Z12Kalmanfilterv+0x2a4>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 f9b6 	bl	8004458 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>
 80030ec:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80030f0:	4619      	mov	r1, r3
 80030f2:	4823      	ldr	r0, [pc, #140]	; (8003180 <_Z12Kalmanfilterv+0x2a0>)
 80030f4:	f001 f9c7 	bl	8004486 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>

		 KalP = X(0,0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	481f      	ldr	r0, [pc, #124]	; (800317c <_Z12Kalmanfilterv+0x29c>)
 80030fe:	f000 fe2f 	bl	8003d60 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003102:	4603      	mov	r3, r0
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <_Z12Kalmanfilterv+0x2c0>)
 8003108:	6013      	str	r3, [r2, #0]
		 KalV = X(1,0);
 800310a:	2200      	movs	r2, #0
 800310c:	2101      	movs	r1, #1
 800310e:	481b      	ldr	r0, [pc, #108]	; (800317c <_Z12Kalmanfilterv+0x29c>)
 8003110:	f000 fe26 	bl	8003d60 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003114:	4603      	mov	r3, r0
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a22      	ldr	r2, [pc, #136]	; (80031a4 <_Z12Kalmanfilterv+0x2c4>)
 800311a:	6013      	str	r3, [r2, #0]
		 KalA = X(2,0);
 800311c:	2200      	movs	r2, #0
 800311e:	2102      	movs	r1, #2
 8003120:	4816      	ldr	r0, [pc, #88]	; (800317c <_Z12Kalmanfilterv+0x29c>)
 8003122:	f000 fe1d 	bl	8003d60 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>
 8003126:	4603      	mov	r3, r0
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <_Z12Kalmanfilterv+0x2c8>)
 800312c:	6013      	str	r3, [r2, #0]
		 runtime = micros()-TimeStampKalman;
 800312e:	f000 fb9d 	bl	800386c <_Z6microsv>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	490b      	ldr	r1, [pc, #44]	; (8003164 <_Z12Kalmanfilterv+0x284>)
 8003138:	6809      	ldr	r1, [r1, #0]
 800313a:	2000      	movs	r0, #0
 800313c:	4688      	mov	r8, r1
 800313e:	4681      	mov	r9, r0
 8003140:	ebb2 0108 	subs.w	r1, r2, r8
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	eb63 0309 	sbc.w	r3, r3, r9
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	4b17      	ldr	r3, [pc, #92]	; (80031ac <_Z12Kalmanfilterv+0x2cc>)
 800314e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003152:	e9c3 1200 	strd	r1, r2, [r3]

	     //ErrPos[0] = TargetDeg - BinPosXI*0.006136;
	 }

}
 8003156:	bf00      	nop
 8003158:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	2000042c 	.word	0x2000042c
 8003168:	20000018 	.word	0x20000018
 800316c:	200004f0 	.word	0x200004f0
 8003170:	200004fc 	.word	0x200004fc
 8003174:	2000052c 	.word	0x2000052c
 8003178:	20000438 	.word	0x20000438
 800317c:	20000520 	.word	0x20000520
 8003180:	20000480 	.word	0x20000480
 8003184:	2000045c 	.word	0x2000045c
 8003188:	20000560 	.word	0x20000560
 800318c:	200004d4 	.word	0x200004d4
 8003190:	200004e4 	.word	0x200004e4
 8003194:	200004cc 	.word	0x200004cc
 8003198:	200004d8 	.word	0x200004d8
 800319c:	200004a4 	.word	0x200004a4
 80031a0:	20000544 	.word	0x20000544
 80031a4:	20000548 	.word	0x20000548
 80031a8:	2000054c 	.word	0x2000054c
 80031ac:	20000430 	.word	0x20000430

080031b0 <_Z11PIDPositionv>:

///////////////////// [PID cat cat Zero] /////////////////////////////
void PIDPosition(){
 80031b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031b4:	af00      	add	r7, sp, #0
	/*CrrntTime = micros();
	//DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
	PreviTime = CrrntTime; // log previ here for next loop
	*/
	if(micros() - TimeStampPID_P >= 1000){
 80031b6:	f000 fb59 	bl	800386c <_Z6microsv>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4936      	ldr	r1, [pc, #216]	; (8003298 <_Z11PIDPositionv+0xe8>)
 80031c0:	6809      	ldr	r1, [r1, #0]
 80031c2:	2000      	movs	r0, #0
 80031c4:	4688      	mov	r8, r1
 80031c6:	4681      	mov	r9, r0
 80031c8:	ebb2 0408 	subs.w	r4, r2, r8
 80031cc:	eb63 0509 	sbc.w	r5, r3, r9
 80031d0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80031d4:	f175 0300 	sbcs.w	r3, r5, #0
 80031d8:	bf2c      	ite	cs
 80031da:	2301      	movcs	r3, #1
 80031dc:	2300      	movcc	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d055      	beq.n	8003290 <_Z11PIDPositionv+0xe0>
		TimeStampPID_P = micros();
 80031e4:	f000 fb42 	bl	800386c <_Z6microsv>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4b2a      	ldr	r3, [pc, #168]	; (8003298 <_Z11PIDPositionv+0xe8>)
 80031ee:	601a      	str	r2, [r3, #0]

		ErrPos[0] = OutPosition - KalP;
 80031f0:	4b2a      	ldr	r3, [pc, #168]	; (800329c <_Z11PIDPositionv+0xec>)
 80031f2:	ed93 7a00 	vldr	s14, [r3]
 80031f6:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <_Z11PIDPositionv+0xf0>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003200:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <_Z11PIDPositionv+0xf4>)
 8003202:	edc3 7a00 	vstr	s15, [r3]
	//	ErrPos[0] = OutVelocity - KalV;
		sumError = sumError + ErrPos[0];
 8003206:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <_Z11PIDPositionv+0xf4>)
 8003208:	ed93 7a00 	vldr	s14, [r3]
 800320c:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <_Z11PIDPositionv+0xf8>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <_Z11PIDPositionv+0xf8>)
 8003218:	edc3 7a00 	vstr	s15, [r3]

		Propo = K_P * ErrPos[0];
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <_Z11PIDPositionv+0xf4>)
 800321e:	ed93 7a00 	vldr	s14, [r3]
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <_Z11PIDPositionv+0xfc>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322c:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <_Z11PIDPositionv+0x100>)
 800322e:	edc3 7a00 	vstr	s15, [r3]

		Integral = K_I * sumError; // Integral -Newton-Leibniz
 8003232:	4b20      	ldr	r3, [pc, #128]	; (80032b4 <_Z11PIDPositionv+0x104>)
 8003234:	ed93 7a00 	vldr	s14, [r3]
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <_Z11PIDPositionv+0xf8>)
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <_Z11PIDPositionv+0x108>)
 8003244:	edc3 7a00 	vstr	s15, [r3]

		Derivate = K_D * (ErrPos[0]-ErrPos[1]); // d/dt position
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <_Z11PIDPositionv+0xf4>)
 800324a:	ed93 7a00 	vldr	s14, [r3]
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <_Z11PIDPositionv+0xf4>)
 8003250:	edd3 7a01 	vldr	s15, [r3, #4]
 8003254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <_Z11PIDPositionv+0x10c>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <_Z11PIDPositionv+0x110>)
 8003264:	edc3 7a00 	vstr	s15, [r3]

		ufromposit = Propo + Integral + Derivate;
 8003268:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <_Z11PIDPositionv+0x100>)
 800326a:	ed93 7a00 	vldr	s14, [r3]
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <_Z11PIDPositionv+0x108>)
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <_Z11PIDPositionv+0x110>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <_Z11PIDPositionv+0x114>)
 8003284:	edc3 7a00 	vstr	s15, [r3]

		//u_contr = ufromposit ;
		ErrPos[1] = ErrPos[0]; // log previous error
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <_Z11PIDPositionv+0xf4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a05      	ldr	r2, [pc, #20]	; (80032a4 <_Z11PIDPositionv+0xf4>)
 800328e:	6053      	str	r3, [r2, #4]
	}
}
 8003290:	bf00      	nop
 8003292:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003296:	bf00      	nop
 8003298:	2000056c 	.word	0x2000056c
 800329c:	20000408 	.word	0x20000408
 80032a0:	20000544 	.word	0x20000544
 80032a4:	20000574 	.word	0x20000574
 80032a8:	20000580 	.word	0x20000580
 80032ac:	20000028 	.word	0x20000028
 80032b0:	20000584 	.word	0x20000584
 80032b4:	2000002c 	.word	0x2000002c
 80032b8:	20000588 	.word	0x20000588
 80032bc:	20000030 	.word	0x20000030
 80032c0:	2000058c 	.word	0x2000058c
 80032c4:	2000057c 	.word	0x2000057c

080032c8 <_Z11PIDVelocityv>:

void PIDVelocity(){
 80032c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032cc:	af00      	add	r7, sp, #0

	if(micros() - TimeStampPID_V >= 1000){
 80032ce:	f000 facd 	bl	800386c <_Z6microsv>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	492f      	ldr	r1, [pc, #188]	; (8003394 <_Z11PIDVelocityv+0xcc>)
 80032d8:	6809      	ldr	r1, [r1, #0]
 80032da:	2000      	movs	r0, #0
 80032dc:	4688      	mov	r8, r1
 80032de:	4681      	mov	r9, r0
 80032e0:	ebb2 0408 	subs.w	r4, r2, r8
 80032e4:	eb63 0509 	sbc.w	r5, r3, r9
 80032e8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80032ec:	f175 0300 	sbcs.w	r3, r5, #0
 80032f0:	bf2c      	ite	cs
 80032f2:	2301      	movcs	r3, #1
 80032f4:	2300      	movcc	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d048      	beq.n	800338e <_Z11PIDVelocityv+0xc6>
		TimeStampPID_V = micros();
 80032fc:	f000 fab6 	bl	800386c <_Z6microsv>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4b23      	ldr	r3, [pc, #140]	; (8003394 <_Z11PIDVelocityv+0xcc>)
 8003306:	601a      	str	r2, [r3, #0]
		Vcontr[1] = Vcontr[0] ;
		ErrVelo[2] = ErrVelo[1] ;
		ErrVelo[1] = ErrVelo[0] ;
		*/

		ErrVelo[0] = OutVelocity + ufromposit - KalV;
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <_Z11PIDVelocityv+0xd0>)
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <_Z11PIDVelocityv+0xd4>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <_Z11PIDVelocityv+0xd8>)
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <_Z11PIDVelocityv+0xdc>)
 8003324:	edc3 7a00 	vstr	s15, [r3]
		SumAll = SumAll + ErrVelo[0];
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <_Z11PIDVelocityv+0xdc>)
 800332a:	ed93 7a00 	vldr	s14, [r3]
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <_Z11PIDVelocityv+0xe0>)
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <_Z11PIDVelocityv+0xe0>)
 800333a:	edc3 7a00 	vstr	s15, [r3]

		u_contr = (K_P_V * ErrVelo[0])+(K_I_V * SumAll)+(K_D * (ErrVelo[0]-ErrVelo[1])) ;
 800333e:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <_Z11PIDVelocityv+0xdc>)
 8003340:	ed93 7a00 	vldr	s14, [r3]
 8003344:	4b19      	ldr	r3, [pc, #100]	; (80033ac <_Z11PIDVelocityv+0xe4>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <_Z11PIDVelocityv+0xe8>)
 8003350:	edd3 6a00 	vldr	s13, [r3]
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <_Z11PIDVelocityv+0xe0>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <_Z11PIDVelocityv+0xdc>)
 8003364:	edd3 6a00 	vldr	s13, [r3]
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <_Z11PIDVelocityv+0xdc>)
 800336a:	edd3 7a01 	vldr	s15, [r3, #4]
 800336e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <_Z11PIDVelocityv+0xec>)
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <_Z11PIDVelocityv+0xf0>)
 8003382:	edc3 7a00 	vstr	s15, [r3]
		ErrVelo[1] = ErrVelo[0]; // log previous error
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <_Z11PIDVelocityv+0xdc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <_Z11PIDVelocityv+0xdc>)
 800338c:	6053      	str	r3, [r2, #4]
		}
}
 800338e:	bf00      	nop
 8003390:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003394:	200005a0 	.word	0x200005a0
 8003398:	2000040c 	.word	0x2000040c
 800339c:	2000057c 	.word	0x2000057c
 80033a0:	20000548 	.word	0x20000548
 80033a4:	20000590 	.word	0x20000590
 80033a8:	2000059c 	.word	0x2000059c
 80033ac:	20000034 	.word	0x20000034
 80033b0:	20000038 	.word	0x20000038
 80033b4:	20000030 	.word	0x20000030
 80033b8:	200005a4 	.word	0x200005a4
 80033bc:	00000000 	.word	0x00000000

080033c0 <_Z11controlloopv>:

void controlloop(){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0

	if( abs( OutPosition - KalP) < 0.01 && KalV < 0.0005){
 80033c4:	4b20      	ldr	r3, [pc, #128]	; (8003448 <_Z11controlloopv+0x88>)
 80033c6:	ed93 7a00 	vldr	s14, [r3]
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <_Z11controlloopv+0x8c>)
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d4:	eeb0 0a67 	vmov.f32	s0, s15
 80033d8:	f7fd fd90 	bl	8000efc <_ZSt3absf>
 80033dc:	ee10 3a10 	vmov	r3, s0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fd f8b1 	bl	8000548 <__aeabi_f2d>
 80033e6:	a314      	add	r3, pc, #80	; (adr r3, 8003438 <_Z11controlloopv+0x78>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fd fb76 	bl	8000adc <__aeabi_dcmplt>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00e      	beq.n	8003414 <_Z11controlloopv+0x54>
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <_Z11controlloopv+0x90>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f8a4 	bl	8000548 <__aeabi_f2d>
 8003400:	a30f      	add	r3, pc, #60	; (adr r3, 8003440 <_Z11controlloopv+0x80>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fd fb69 	bl	8000adc <__aeabi_dcmplt>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <_Z11controlloopv+0x54>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <_Z11controlloopv+0x56>
 8003414:	2300      	movs	r3, #0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <_Z11controlloopv+0x68>
		PWMOut = 0;
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <_Z11controlloopv+0x94>)
 800341c:	2200      	movs	r2, #0
 800341e:	801a      	strh	r2, [r3, #0]
		check = 8;
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <_Z11controlloopv+0x98>)
 8003422:	2208      	movs	r2, #8
 8003424:	701a      	strb	r2, [r3, #0]
	else{
		PIDPosition();
		PIDVelocity();
		MotDrvCytron();
	}
}
 8003426:	e005      	b.n	8003434 <_Z11controlloopv+0x74>
		PIDPosition();
 8003428:	f7ff fec2 	bl	80031b0 <_Z11PIDPositionv>
		PIDVelocity();
 800342c:	f7ff ff4c 	bl	80032c8 <_Z11PIDVelocityv>
		MotDrvCytron();
 8003430:	f000 f814 	bl	800345c <_Z12MotDrvCytronv>
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	47ae147b 	.word	0x47ae147b
 800343c:	3f847ae1 	.word	0x3f847ae1
 8003440:	d2f1a9fc 	.word	0xd2f1a9fc
 8003444:	3f40624d 	.word	0x3f40624d
 8003448:	20000408 	.word	0x20000408
 800344c:	20000544 	.word	0x20000544
 8003450:	20000548 	.word	0x20000548
 8003454:	2000000a 	.word	0x2000000a
 8003458:	200005a9 	.word	0x200005a9

0800345c <_Z12MotDrvCytronv>:


void MotDrvCytron(){
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0

	//   direction chk
	if(u_contr < 0){mot_dirctn= 0;}
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <_Z12MotDrvCytronv+0xb8>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	d503      	bpl.n	8003478 <_Z12MotDrvCytronv+0x1c>
 8003470:	4b29      	ldr	r3, [pc, #164]	; (8003518 <_Z12MotDrvCytronv+0xbc>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e00e      	b.n	8003496 <_Z12MotDrvCytronv+0x3a>
	else if(u_contr > 0) {mot_dirctn = 1;}
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <_Z12MotDrvCytronv+0xb8>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003486:	dd03      	ble.n	8003490 <_Z12MotDrvCytronv+0x34>
 8003488:	4b23      	ldr	r3, [pc, #140]	; (8003518 <_Z12MotDrvCytronv+0xbc>)
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e002      	b.n	8003496 <_Z12MotDrvCytronv+0x3a>
	else{PWMOut = 0;}
 8003490:	4b22      	ldr	r3, [pc, #136]	; (800351c <_Z12MotDrvCytronv+0xc0>)
 8003492:	2200      	movs	r2, #0
 8003494:	801a      	strh	r2, [r3, #0]


	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8003496:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <_Z12MotDrvCytronv+0xb8>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	eef0 7ae7 	vabs.f32	s15, s15
 80034a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a4:	ee17 3a90 	vmov	r3, s15
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <_Z12MotDrvCytronv+0xc0>)
 80034ac:	801a      	strh	r2, [r3, #0]
	if(PWMOut > 5000){PWMOut = 5000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <_Z12MotDrvCytronv+0xc0>)
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d903      	bls.n	80034c2 <_Z12MotDrvCytronv+0x66>
 80034ba:	4b18      	ldr	r3, [pc, #96]	; (800351c <_Z12MotDrvCytronv+0xc0>)
 80034bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c0:	801a      	strh	r2, [r3, #0]
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <_Z12MotDrvCytronv+0xc0>)
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80034ca:	d20f      	bcs.n	80034ec <_Z12MotDrvCytronv+0x90>
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <_Z12MotDrvCytronv+0xc4>)
 80034ce:	edd3 7a00 	vldr	s15, [r3]
 80034d2:	eef0 7ae7 	vabs.f32	s15, s15
 80034d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80034da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e2:	db03      	blt.n	80034ec <_Z12MotDrvCytronv+0x90>
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <_Z12MotDrvCytronv+0xc0>)
 80034e6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80034ea:	801a      	strh	r2, [r3, #0]
	if(ErrPos[0] < 2){PWMOut = 0;}
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <_Z12MotDrvCytronv+0xc4>)
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80034f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	d400      	bmi.n	8003502 <_Z12MotDrvCytronv+0xa6>
}
 8003500:	e002      	b.n	8003508 <_Z12MotDrvCytronv+0xac>
	if(ErrPos[0] < 2){PWMOut = 0;}
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <_Z12MotDrvCytronv+0xc0>)
 8003504:	2200      	movs	r2, #0
 8003506:	801a      	strh	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	200005a4 	.word	0x200005a4
 8003518:	20000404 	.word	0x20000404
 800351c:	2000000a 	.word	0x2000000a
 8003520:	20000574 	.word	0x20000574

08003524 <_Z13GraytoBinarioth>:

///////////////////// [Abs Encoder I2C] ////////////////////////////////////////////
////////// [Absolute Encoder] ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	460a      	mov	r2, r1
 800352e:	80fb      	strh	r3, [r7, #6]
 8003530:	4613      	mov	r3, r2
 8003532:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8003534:	2300      	movs	r3, #0
 8003536:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8003538:	88fa      	ldrh	r2, [r7, #6]
 800353a:	797b      	ldrb	r3, [r7, #5]
 800353c:	3b01      	subs	r3, #1
 800353e:	fa42 f303 	asr.w	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 800354a:	2301      	movs	r3, #1
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	797b      	ldrb	r3, [r7, #5]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	429a      	cmp	r2, r3
 8003554:	da1e      	bge.n	8003594 <_Z13GraytoBinarioth+0x70>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 8003556:	8afb      	ldrh	r3, [r7, #22]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	7979      	ldrb	r1, [r7, #5]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	3301      	adds	r3, #1
 8003566:	1acb      	subs	r3, r1, r3
 8003568:	fa42 f303 	asr.w	r3, r2, r3
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d103      	bne.n	8003582 <_Z13GraytoBinarioth+0x5e>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 800357a:	8afb      	ldrh	r3, [r7, #22]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	82fb      	strh	r3, [r7, #22]
 8003580:	e004      	b.n	800358c <_Z13GraytoBinarioth+0x68>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 8003582:	8afb      	ldrh	r3, [r7, #22]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	b29b      	uxth	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	3301      	adds	r3, #1
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e7dc      	b.n	800354e <_Z13GraytoBinarioth+0x2a>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 8003594:	8afb      	ldrh	r3, [r7, #22]
}
 8003596:	4618      	mov	r0, r3
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
	...

080035a4 <_Z14IOExpenderInitv>:

void IOExpenderInit() {// call when start system
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 80035aa:	2364      	movs	r3, #100	; 0x64
 80035ac:	9302      	str	r3, [sp, #8]
 80035ae:	2316      	movs	r3, #22
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <_Z14IOExpenderInitv+0x24>)
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2301      	movs	r3, #1
 80035b8:	2200      	movs	r2, #0
 80035ba:	2140      	movs	r1, #64	; 0x40
 80035bc:	4803      	ldr	r0, [pc, #12]	; (80035cc <_Z14IOExpenderInitv+0x28>)
 80035be:	f013 fccb 	bl	8016f58 <HAL_I2C_Mem_Write>
			0x16, 100);
}
 80035c2:	bf00      	nop
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000050 	.word	0x20000050
 80035cc:	200000fc 	.word	0x200000fc

080035d0 <_Z14AbsEncI2CReadxPh>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af04      	add	r7, sp, #16
 80035d6:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 80035d8:	4b28      	ldr	r3, [pc, #160]	; (800367c <_Z14AbsEncI2CReadxPh+0xac>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <_Z14AbsEncI2CReadxPh+0x20>
 80035e0:	4b27      	ldr	r3, [pc, #156]	; (8003680 <_Z14AbsEncI2CReadxPh+0xb0>)
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d101      	bne.n	80035f0 <_Z14AbsEncI2CReadxPh+0x20>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <_Z14AbsEncI2CReadxPh+0x22>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d03e      	beq.n	8003674 <_Z14AbsEncI2CReadxPh+0xa4>
		switch(flag_absenc){
 80035f6:	4b21      	ldr	r3, [pc, #132]	; (800367c <_Z14AbsEncI2CReadxPh+0xac>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d002      	beq.n	8003604 <_Z14AbsEncI2CReadxPh+0x34>
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d010      	beq.n	8003624 <_Z14AbsEncI2CReadxPh+0x54>
		default:
			break;
 8003602:	e037      	b.n	8003674 <_Z14AbsEncI2CReadxPh+0xa4>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8003604:	2364      	movs	r3, #100	; 0x64
 8003606:	9302      	str	r3, [sp, #8]
 8003608:	2302      	movs	r3, #2
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	2301      	movs	r3, #1
 8003612:	2212      	movs	r2, #18
 8003614:	2140      	movs	r1, #64	; 0x40
 8003616:	481a      	ldr	r0, [pc, #104]	; (8003680 <_Z14AbsEncI2CReadxPh+0xb0>)
 8003618:	f013 fd98 	bl	801714c <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <_Z14AbsEncI2CReadxPh+0xac>)
 800361e:	2202      	movs	r2, #2
 8003620:	701a      	strb	r2, [r3, #0]
		break;
 8003622:	e027      	b.n	8003674 <_Z14AbsEncI2CReadxPh+0xa4>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8003624:	4b17      	ldr	r3, [pc, #92]	; (8003684 <_Z14AbsEncI2CReadxPh+0xb4>)
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	b21a      	sxth	r2, r3
 800362c:	4b15      	ldr	r3, [pc, #84]	; (8003684 <_Z14AbsEncI2CReadxPh+0xb4>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b21b      	sxth	r3, r3
 8003632:	4313      	orrs	r3, r2
 8003634:	b21b      	sxth	r3, r3
 8003636:	b29a      	uxth	r2, r3
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <_Z14AbsEncI2CReadxPh+0xb8>)
 800363a:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <_Z14AbsEncI2CReadxPh+0xb8>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	210a      	movs	r1, #10
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff6e 	bl	8003524 <_Z13GraytoBinarioth>
 8003648:	4603      	mov	r3, r0
 800364a:	f2a3 3341 	subw	r3, r3, #833	; 0x341
 800364e:	b29a      	uxth	r2, r3
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <_Z14AbsEncI2CReadxPh+0xbc>)
 8003652:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8003654:	4b0d      	ldr	r3, [pc, #52]	; (800368c <_Z14AbsEncI2CReadxPh+0xbc>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365c:	d306      	bcc.n	800366c <_Z14AbsEncI2CReadxPh+0x9c>
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <_Z14AbsEncI2CReadxPh+0xbc>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003666:	b29a      	uxth	r2, r3
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <_Z14AbsEncI2CReadxPh+0xbc>)
 800366a:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <_Z14AbsEncI2CReadxPh+0xac>)
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
		break;
 8003672:	bf00      	nop
		}
	}
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	200003fe 	.word	0x200003fe
 8003680:	200000fc 	.word	0x200000fc
 8003684:	200003f8 	.word	0x200003f8
 8003688:	200003fa 	.word	0x200003fa
 800368c:	200003fc 	.word	0x200003fc

08003690 <_Z13Efft_activatev>:

/////////////////////// [End Effector] //////////////////////////////////
void Efft_activate(){
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8003696:	2345      	movs	r3, #69	; 0x45
 8003698:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 800369a:	4b21      	ldr	r3, [pc, #132]	; (8003720 <_Z13Efft_activatev+0x90>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d01a      	beq.n	80036d8 <_Z13Efft_activatev+0x48>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <_Z13Efft_activatev+0x94>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <_Z13Efft_activatev+0x2a>
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <_Z13Efft_activatev+0x98>)
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d101      	bne.n	80036ba <_Z13Efft_activatev+0x2a>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <_Z13Efft_activatev+0x2c>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d028      	beq.n	8003712 <_Z13Efft_activatev+0x82>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 80036c0:	1dfa      	adds	r2, r7, #7
 80036c2:	2301      	movs	r3, #1
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	2146      	movs	r1, #70	; 0x46
 80036ca:	4817      	ldr	r0, [pc, #92]	; (8003728 <_Z13Efft_activatev+0x98>)
 80036cc:	f013 ff64 	bl	8017598 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <_Z13Efft_activatev+0x90>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
		}
	break;
 80036d6:	e01c      	b.n	8003712 <_Z13Efft_activatev+0x82>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <_Z13Efft_activatev+0x98>)
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d013      	beq.n	8003716 <_Z13Efft_activatev+0x86>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 80036ee:	1dfa      	adds	r2, r7, #7
 80036f0:	2320      	movs	r3, #32
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2301      	movs	r3, #1
 80036f6:	2146      	movs	r1, #70	; 0x46
 80036f8:	480b      	ldr	r0, [pc, #44]	; (8003728 <_Z13Efft_activatev+0x98>)
 80036fa:	f013 ff4d 	bl	8017598 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <_Z13Efft_activatev+0x90>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <_Z13Efft_activatev+0x94>)
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <_Z13Efft_activatev+0x9c>)
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003710:	e001      	b.n	8003716 <_Z13Efft_activatev+0x86>
	break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <_Z13Efft_activatev+0x88>
	break;
 8003716:	bf00      	nop
	}

}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000620 	.word	0x20000620
 8003724:	200005ab 	.word	0x200005ab
 8003728:	20000150 	.word	0x20000150
 800372c:	200005ad 	.word	0x200005ad

08003730 <_Z9Efft_readPh>:
void Efft_read(uint8_t *Rddata){
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]


	uint8_t readRQ = 0x23;
 8003738:	2323      	movs	r3, #35	; 0x23
 800373a:	73fb      	strb	r3, [r7, #15]
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	static uint8_t efrdStatus = 0;
	switch(efrdStatus){
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <_Z9Efft_readPh+0x90>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d01b      	beq.n	800377c <_Z9Efft_readPh+0x4c>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <_Z9Efft_readPh+0x94>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <_Z9Efft_readPh+0x2c>
 800374c:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <_Z9Efft_readPh+0x98>)
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	d101      	bne.n	800375c <_Z9Efft_readPh+0x2c>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <_Z9Efft_readPh+0x2e>
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d026      	beq.n	80037b0 <_Z9Efft_readPh+0x80>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8003762:	f107 020f 	add.w	r2, r7, #15
 8003766:	2302      	movs	r3, #2
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2301      	movs	r3, #1
 800376c:	2146      	movs	r1, #70	; 0x46
 800376e:	4816      	ldr	r0, [pc, #88]	; (80037c8 <_Z9Efft_readPh+0x98>)
 8003770:	f013 ff12 	bl	8017598 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <_Z9Efft_readPh+0x90>)
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
		}
	break;
 800377a:	e019      	b.n	80037b0 <_Z9Efft_readPh+0x80>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <_Z9Efft_readPh+0x98>)
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	bf0c      	ite	eq
 8003788:	2301      	moveq	r3, #1
 800378a:	2300      	movne	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <_Z9Efft_readPh+0x84>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8003792:	2320      	movs	r3, #32
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2301      	movs	r3, #1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	2146      	movs	r1, #70	; 0x46
 800379c:	480a      	ldr	r0, [pc, #40]	; (80037c8 <_Z9Efft_readPh+0x98>)
 800379e:	f013 ffc1 	bl	8017724 <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <_Z9Efft_readPh+0x94>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <_Z9Efft_readPh+0x90>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
			}
	break;
 80037ae:	e001      	b.n	80037b4 <_Z9Efft_readPh+0x84>
	break;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <_Z9Efft_readPh+0x86>
	break;
 80037b4:	bf00      	nop
	}

}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000621 	.word	0x20000621
 80037c4:	200005ac 	.word	0x200005ac
 80037c8:	20000150 	.word	0x20000150

080037cc <HAL_GPIO_EXTI_Callback>:
	}//end sw chkM

}
*/
/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	80fb      	strh	r3, [r7, #6]
	//// EMER ////
	if(GPIO_Pin == GPIO_PIN_11){
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037dc:	d10e      	bne.n	80037fc <HAL_GPIO_EXTI_Callback+0x30>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		counter_e++;
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_GPIO_EXTI_Callback+0x88>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_GPIO_EXTI_Callback+0x88>)
 80037e8:	701a      	strb	r2, [r3, #0]
		grandState = emer;
 80037ea:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_GPIO_EXTI_Callback+0x8c>)
 80037ec:	2203      	movs	r2, #3
 80037ee:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_GPIO_EXTI_Callback+0x90>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 80037f6:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_GPIO_EXTI_Callback+0x94>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//// Stop ////
	if(GPIO_Pin == GPIO_PIN_10){
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003802:	d10c      	bne.n	800381e <HAL_GPIO_EXTI_Callback+0x52>
		PWMOut = 0;
 8003804:	4b16      	ldr	r3, [pc, #88]	; (8003860 <HAL_GPIO_EXTI_Callback+0x94>)
 8003806:	2200      	movs	r2, #0
 8003808:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 800380a:	4b14      	ldr	r3, [pc, #80]	; (800385c <HAL_GPIO_EXTI_Callback+0x90>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d102      	bne.n	800381e <HAL_GPIO_EXTI_Callback+0x52>
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_GPIO_EXTI_Callback+0x8c>)
 800381a:	2204      	movs	r2, #4
 800381c:	701a      	strb	r2, [r3, #0]
		//else{grandState = stop;}

		}
	//// work Blue button////
	if(GPIO_Pin == GPIO_PIN_13){
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003824:	d108      	bne.n	8003838 <HAL_GPIO_EXTI_Callback+0x6c>
		bluecounter++;
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_GPIO_EXTI_Callback+0x90>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_GPIO_EXTI_Callback+0x90>)
 8003830:	701a      	strb	r2, [r3, #0]
		flag_efftActi = 1;
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <HAL_GPIO_EXTI_Callback+0x98>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
		//trig_efftRead = 1;
	}

	//// setzero ////
		if(GPIO_Pin == GPIO_PIN_2){
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	2b04      	cmp	r3, #4
 800383c:	d103      	bne.n	8003846 <HAL_GPIO_EXTI_Callback+0x7a>
			TargetDeg = 0;
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_GPIO_EXTI_Callback+0x9c>)
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
		}
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	200003f0 	.word	0x200003f0
 8003858:	200003e0 	.word	0x200003e0
 800385c:	20000570 	.word	0x20000570
 8003860:	2000000a 	.word	0x2000000a
 8003864:	200005ab 	.word	0x200005ab
 8003868:	20000024 	.word	0x20000024

0800386c <_Z6microsv>:

///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 800386c:	b4b0      	push	{r4, r5, r7}
 800386e:	af00      	add	r7, sp, #0
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <_Z6microsv+0x2c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2200      	movs	r2, #0
 8003878:	4618      	mov	r0, r3
 800387a:	4611      	mov	r1, r2
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <_Z6microsv+0x30>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	1884      	adds	r4, r0, r2
 8003884:	eb41 0503 	adc.w	r5, r1, r3
 8003888:	4622      	mov	r2, r4
 800388a:	462b      	mov	r3, r5
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	bcb0      	pop	{r4, r5, r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000234 	.word	0x20000234
 800389c:	200003e8 	.word	0x200003e8

080038a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80038a0:	b4b0      	push	{r4, r5, r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10a      	bne.n	80038c6 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038ba:	1854      	adds	r4, r2, r1
 80038bc:	f143 0500 	adc.w	r5, r3, #0
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80038c2:	e9c3 4500 	strd	r4, r5, [r3]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bcb0      	pop	{r4, r5, r7}
 80038ce:	4770      	bx	lr
 80038d0:	20000234 	.word	0x20000234
 80038d4:	200003e8 	.word	0x200003e8

080038d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038dc:	b672      	cpsid	i
}
 80038de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <Error_Handler+0x8>

080038e2 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>:
{
public:
  /** Alias to the template parameter \c tag */
  typedef tag Tag;

  SymbolExpr() {}
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>:
template<int N> class FixedInt
{
public:
  static const int value = N;
  EIGEN_CONSTEXPR operator int() const { return value; }
  FixedInt() {}
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <_ZNK5Eigen8internal8FixedIntILi1EEclEv>:
  template<int M>
  FixedInt<N&M> operator&( FixedInt<M>) const { return FixedInt<N&M>(); }

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
  // Needed in C++14 to allow fix<N>():
  FixedInt operator() () const { return *this; }
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	bf00      	nop
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>:
  AddExpr<Derived,ValueExpr<internal::FixedInt<N> > > operator+(internal::FixedInt<N>) const
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	7039      	strb	r1, [r7, #0]
  { return AddExpr<Derived,ValueExpr<internal::FixedInt<N> > >(derived(), ValueExpr<internal::FixedInt<N> >()); }
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fdb8 	bl	80044a4 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>
 8003934:	4604      	mov	r4, r0
 8003936:	f107 030c 	add.w	r3, r7, #12
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fdbd 	bl	80044ba <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>
 8003940:	f107 020c 	add.w	r2, r7, #12
 8003944:	f107 0308 	add.w	r3, r7, #8
 8003948:	4621      	mov	r1, r4
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fdc0 	bl	80044d0 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>
 8003950:	bf00      	nop
 8003952:	4628      	mov	r0, r5
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bdb0      	pop	{r4, r5, r7, pc}

0800395a <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>:
#endif

// Suppresses 'unused variable' warnings.
namespace Eigen {
  namespace internal {
    template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void ignore_unused_variable(const T&) {}
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>:
      * a matrix to 0 is not supported.
      *
      * \sa resize(Index,Index)
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Matrix() : Base()
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fdc2 	bl	8004502 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
    {
      Base::_check_template_params();
 800397e:	f000 fdd0 	bl	8004522 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>:
    Matrix() : Base()
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fdd6 	bl	8004548 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800399c:	f000 fde4 	bl	8004568 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
    }
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>:
    Matrix() : Base()
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fdea 	bl	800458e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80039ba:	f000 fdf8 	bl	80045ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
    }
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>:
    Matrix() : Base()
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fdfe 	bl	80045d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 80039d8:	f000 fe0c 	bl	80045f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
    }
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEElsERKf>:
  * \note According the c++ standard, the argument expressions of this comma initializer are evaluated in arbitrary order.
  *
  * \sa CommaInitializer::finished(), class CommaInitializer
  */
template<typename Derived>
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
{
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fe04 	bl	8004604 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>
}
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    finished();
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fe39 	bl	8004684 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>
  }
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689c      	ldr	r4, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fe5e 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003a34:	4603      	mov	r3, r0
 8003a36:	429c      	cmp	r4, r3
 8003a38:	bf0c      	ite	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01d      	beq.n	8003a80 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685c      	ldr	r4, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fe4d 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	429c      	cmp	r4, r3
 8003a70:	db05      	blt.n	8003a7e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x62>
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xcc>)
 8003a74:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003a76:	2148      	movs	r1, #72	; 0x48
 8003a78:	481d      	ldr	r0, [pc, #116]	; (8003af0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003a7a:	f019 ffc3 	bl	801da04 <__assert_func>
 8003a7e:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689c      	ldr	r4, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fe31 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	429c      	cmp	r4, r3
 8003a92:	db05      	blt.n	8003aa0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x84>
 8003a94:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd8>)
 8003a96:	4a15      	ldr	r2, [pc, #84]	; (8003aec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003a98:	214b      	movs	r1, #75	; 0x4b
 8003a9a:	4815      	ldr	r0, [pc, #84]	; (8003af0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003a9c:	f019 ffb2 	bl	801da04 <__assert_func>
 8003aa0:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d005      	beq.n	8003ab6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0x9a>
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xdc>)
 8003aac:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd0>)
 8003aae:	214d      	movs	r1, #77	; 0x4d
 8003ab0:	480f      	ldr	r0, [pc, #60]	; (8003af0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEcmERKf+0xd4>)
 8003ab2:	f019 ffa7 	bl	801da04 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461c      	mov	r4, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6858      	ldr	r0, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	1c59      	adds	r1, r3, #1
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6091      	str	r1, [r2, #8]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4601      	mov	r1, r0
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f000 fe24 	bl	800471c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6013      	str	r3, [r2, #0]
    return *this;
 8003adc:	687b      	ldr	r3, [r7, #4]
  }
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd90      	pop	{r4, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	0801ea80 	.word	0x0801ea80
 8003aec:	0801ead0 	.word	0x0801ead0
 8003af0:	0801eb94 	.word	0x0801eb94
 8003af4:	0801ebf0 	.word	0x0801ebf0
 8003af8:	0801ec48 	.word	0x0801ec48

08003afc <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fe1f 	bl	8004750 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>
}
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
    finished();
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fe54 	bl	80047d0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>
  }
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003b34:	b590      	push	{r4, r7, lr}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689c      	ldr	r4, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fe78 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	429c      	cmp	r4, r3
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01d      	beq.n	8003b98 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685c      	ldr	r4, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fe67 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003b84:	4603      	mov	r3, r0
 8003b86:	429c      	cmp	r4, r3
 8003b88:	db05      	blt.n	8003b96 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x62>
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xcc>)
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8003b8e:	2148      	movs	r1, #72	; 0x48
 8003b90:	481d      	ldr	r0, [pc, #116]	; (8003c08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8003b92:	f019 ff37 	bl	801da04 <__assert_func>
 8003b96:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689c      	ldr	r4, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fe4b 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	db05      	blt.n	8003bb8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x84>
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd8>)
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8003bb0:	214b      	movs	r1, #75	; 0x4b
 8003bb2:	4815      	ldr	r0, [pc, #84]	; (8003c08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8003bb4:	f019 ff26 	bl	801da04 <__assert_func>
 8003bb8:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d005      	beq.n	8003bce <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0x9a>
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xdc>)
 8003bc4:	4a0f      	ldr	r2, [pc, #60]	; (8003c04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd0>)
 8003bc6:	214d      	movs	r1, #77	; 0x4d
 8003bc8:	480f      	ldr	r0, [pc, #60]	; (8003c08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEcmERKf+0xd4>)
 8003bca:	f019 ff1b 	bl	801da04 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461c      	mov	r4, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6858      	ldr	r0, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	1c59      	adds	r1, r3, #1
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6091      	str	r1, [r2, #8]
 8003be2:	461a      	mov	r2, r3
 8003be4:	4601      	mov	r1, r0
 8003be6:	4620      	mov	r0, r4
 8003be8:	f000 fe3e 	bl	8004868 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 8003bec:	4602      	mov	r2, r0
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6013      	str	r3, [r2, #0]
    return *this;
 8003bf4:	687b      	ldr	r3, [r7, #4]
  }
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	0801ea80 	.word	0x0801ea80
 8003c04:	0801ec60 	.word	0x0801ec60
 8003c08:	0801eb94 	.word	0x0801eb94
 8003c0c:	0801ebf0 	.word	0x0801ebf0
 8003c10:	0801ec48 	.word	0x0801ec48

08003c14 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68b9      	ldr	r1, [r7, #8]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fe39 	bl	800489c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>
}
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
  inline ~CommaInitializer()
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
    finished();
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fe6e 	bl	800491c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>
  }
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEElsERKf>:
EIGEN_DEVICE_FUNC inline CommaInitializer<Derived> DenseBase<Derived>::operator<< (const Scalar& s)
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  return CommaInitializer<Derived>(*static_cast<Derived*>(this), s);
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68b9      	ldr	r1, [r7, #8]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fe94 	bl	8004988 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>
}
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
  inline ~CommaInitializer()
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
    finished();
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fec9 	bl	8004a08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>
  }
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf>:
  CommaInitializer& operator,(const Scalar& s)
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
    if (m_col==m_xpr.cols())
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689c      	ldr	r4, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 feee 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	429c      	cmp	r4, r3
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01d      	beq.n	8003ce4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x64>
      m_row+=m_currentBlockRows;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	441a      	add	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	605a      	str	r2, [r3, #4]
      m_col = 0;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	609a      	str	r2, [r3, #8]
      m_currentBlockRows = 1;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	60da      	str	r2, [r3, #12]
      eigen_assert(m_row<m_xpr.rows()
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685c      	ldr	r4, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fedd 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	db05      	blt.n	8003ce2 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x62>
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xcc>)
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8003cda:	2148      	movs	r1, #72	; 0x48
 8003cdc:	481d      	ldr	r0, [pc, #116]	; (8003d54 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8003cde:	f019 fe91 	bl	801da04 <__assert_func>
 8003ce2:	bf00      	nop
    eigen_assert(m_col<m_xpr.cols()
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689c      	ldr	r4, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fec1 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	429c      	cmp	r4, r3
 8003cf6:	db05      	blt.n	8003d04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x84>
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd8>)
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8003cfc:	214b      	movs	r1, #75	; 0x4b
 8003cfe:	4815      	ldr	r0, [pc, #84]	; (8003d54 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8003d00:	f019 fe80 	bl	801da04 <__assert_func>
 8003d04:	bf00      	nop
    eigen_assert(m_currentBlockRows==1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d005      	beq.n	8003d1a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0x9a>
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xdc>)
 8003d10:	4a0f      	ldr	r2, [pc, #60]	; (8003d50 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd0>)
 8003d12:	214d      	movs	r1, #77	; 0x4d
 8003d14:	480f      	ldr	r0, [pc, #60]	; (8003d54 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEcmERKf+0xd4>)
 8003d16:	f019 fe75 	bl	801da04 <__assert_func>
    m_xpr.coeffRef(m_row, m_col++) = s;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461c      	mov	r4, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6858      	ldr	r0, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	1c59      	adds	r1, r3, #1
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6091      	str	r1, [r2, #8]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4601      	mov	r1, r0
 8003d32:	4620      	mov	r0, r4
 8003d34:	f000 feb4 	bl	8004aa0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6013      	str	r3, [r2, #0]
    return *this;
 8003d40:	687b      	ldr	r3, [r7, #4]
  }
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	0801ea80 	.word	0x0801ea80
 8003d50:	0801ed24 	.word	0x0801ed24
 8003d54:	0801eb94 	.word	0x0801eb94
 8003d58:	0801ebf0 	.word	0x0801ebf0
 8003d5c:	0801ec48 	.word	0x0801ec48

08003d60 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii>:
      * \sa operator[](Index)
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator()(Index row, Index col)
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
    {
      eigen_assert(row >= 0 && row < rows()
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	db10      	blt.n	8003d94 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fead 	bl	8004ad2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	da09      	bge.n	8003d94 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db06      	blt.n	8003d94 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x34>
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 feb3 	bl	8004af2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4293      	cmp	r3, r2
 8003d92:	db06      	blt.n	8003da2 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x42>
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x58>)
 8003d96:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x5c>)
 8003d98:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8003d9c:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EEclEii+0x60>)
 8003d9e:	f019 fe31 	bl	801da04 <__assert_func>
          && col >= 0 && col < cols());
      return coeffRef(row, col);
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fecc 	bl	8004b44 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>
 8003dac:	4603      	mov	r3, r0
    }
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	0801ede8 	.word	0x0801ede8
 8003dbc:	0801ee20 	.word	0x0801ee20
 8003dc0:	0801ef0c 	.word	0x0801ef0c

08003dc4 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>:
  * on the behavior of CwiseNullaryOp.
  *
  * \sa class CwiseUnaryOp, class CwiseBinaryOp, DenseBase::NullaryExpr
  */
template<typename NullaryOp, typename PlainObjectType>
class CwiseNullaryOp : public internal::dense_xpr_base< CwiseNullaryOp<NullaryOp, PlainObjectType> >::type, internal::no_assignment_operator
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	1d1a      	adds	r2, r3, #4
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4610      	mov	r0, r2
 8003dda:	f000 ffaf 	bl	8004d3c <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlIfEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNS6_18promote_scalar_argIfT_XsrNS6_14has_ReturnTypeINS_20ScalarBinaryOpTraitsIfS9_NS7_IfS9_EEEEEE5valueEE4typeEEEKS2_KNS6_19plain_constant_typeIS2_SG_E4typeEEERKS9_>:
  return CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>(derived(), other.derived(), func);
}


#ifndef EIGEN_PARSED_BY_DOXYGEN
EIGEN_MAKE_SCALAR_BINARY_OP(operator*,product)
 8003de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	68b8      	ldr	r0, [r7, #8]
 8003df6:	f000 fec8 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	68b8      	ldr	r0, [r7, #8]
 8003dfe:	f000 fec4 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fd24 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	68b8      	ldr	r0, [r7, #8]
 8003e0e:	f000 febc 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fd11 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8003e1a:	4606      	mov	r6, r0
 8003e1c:	f107 0318 	add.w	r3, r7, #24
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 febc 	bl	8004ba0 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>
 8003e28:	f107 0318 	add.w	r3, r7, #24
 8003e2c:	f107 0010 	add.w	r0, r7, #16
 8003e30:	4632      	mov	r2, r6
 8003e32:	4629      	mov	r1, r5
 8003e34:	f000 fed0 	bl	8004bd8 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 ff03 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8003e42:	f107 031c 	add.w	r3, r7, #28
 8003e46:	f107 0210 	add.w	r2, r7, #16
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 ff35 	bl	8004cbc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	3724      	adds	r7, #36	; 0x24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e5a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9transposeEv>:
  *
  * \sa transposeInPlace(), adjoint() */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
Transpose<Derived>
DenseBase<Derived>::transpose()
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
{
  return TransposeReturnType(derived());
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 ff86 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 ffa2 	bl	8004dba <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>
 8003e76:	68fb      	ldr	r3, [r7, #12]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>:
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1d1a      	adds	r2, r3, #4
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f7ff ff91 	bl	8003dc4 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f103 020c 	add.w	r2, r3, #12
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f000 ff54 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEmlINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li0EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived, OtherDerived>
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003ebe:	b590      	push	{r4, r7, lr}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)
#ifdef EIGEN_DEBUG_PRODUCT
  internal::product_type<Derived,OtherDerived>::debug();
#endif

  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003eca:	68b8      	ldr	r0, [r7, #8]
 8003ecc:	f000 ff85 	bl	8004dda <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 ff8c 	bl	8004df0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4621      	mov	r1, r4
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 ffd2 	bl	8004e88 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>
}
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}

08003eec <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fff4 	bl	8004ee8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8003f00:	4603      	mov	r3, r0
    }
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003f0a:	b590      	push	{r4, r7, lr}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f000 ffff 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fe33 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	4621      	mov	r1, r4
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f001 f824 	bl	8004f78 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd90      	pop	{r4, r7, pc}

08003f38 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6839      	ldr	r1, [r7, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 f844 	bl	8004fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 8003f4c:	4603      	mov	r3, r0
    }
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlIS2_EEKNS_7ProductIS2_T_Li0EEERKNS0_IS6_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003f56:	b590      	push	{r4, r7, lr}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003f62:	68b8      	ldr	r0, [r7, #8]
 8003f64:	f000 ffd9 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003f68:	4604      	mov	r4, r0
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 ffd5 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	4621      	mov	r1, r4
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f001 f86a 	bl	8005050 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>
}
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd90      	pop	{r4, r7, pc}

08003f84 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f001 f88d 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003f92:	4602      	mov	r2, r0
 8003f94:	f107 030c 	add.w	r3, r7, #12
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 f8a9 	bl	80050f2 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS4_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8003faa:	b590      	push	{r4, r7, lr}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8003fb6:	68b8      	ldr	r0, [r7, #8]
 8003fb8:	f001 f8ab 	bl	8005112 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 f8b2 	bl	8005128 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4621      	mov	r1, r4
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f001 f8f8 	bl	80051c0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>
}
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}

08003fd8 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEplIS3_EEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSB_6traitsIT_E6ScalarEEEKS7_KSE_EERKNS0_ISE_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8003fd8:	b5b0      	push	{r4, r5, r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	68b8      	ldr	r0, [r7, #8]
 8003fe6:	f001 f91b 	bl	8005220 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 8003fea:	4604      	mov	r4, r0
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 ff94 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 f91c 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8003ffe:	f107 0314 	add.w	r3, r7, #20
 8004002:	462a      	mov	r2, r5
 8004004:	4621      	mov	r1, r4
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f001 f954 	bl	80052b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bdb0      	pop	{r4, r5, r7, pc}

08004014 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_IS1_S1_Li0EEENS_9TransposeIS1_EELi0EEEKS1_EEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f001 f992 	bl	800534c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
 8004028:	4603      	mov	r3, r0
    }
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose()
 8004032:	b580      	push	{r7, lr}
 8004034:	b084      	sub	sp, #16
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  return TransposeReturnType(derived());
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f001 f99f 	bl	800537e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004040:	4602      	mov	r2, r0
 8004042:	f107 030c 	add.w	r3, r7, #12
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f9bb 	bl	80053c4 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>
 800404e:	68fb      	ldr	r3, [r7, #12]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmlINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS9_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004064:	68b8      	ldr	r0, [r7, #8]
 8004066:	f000 ff58 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800406a:	4604      	mov	r4, r0
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f001 f9b9 	bl	80053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	4621      	mov	r1, r4
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f001 f9f1 	bl	8005460 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>
}
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}

08004086 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004086:	b590      	push	{r4, r7, lr}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004092:	68b8      	ldr	r0, [r7, #8]
 8004094:	f001 fa12 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004098:	4604      	mov	r4, r0
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 ff3d 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	4621      	mov	r1, r4
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f001 fa38 	bl	800551c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>
}
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd90      	pop	{r4, r7, pc}

080040b4 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEmlINS_9TransposeIS3_EEEEKNS1_IS5_T_Li0EEERKNS0_ISA_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80040c0:	68b8      	ldr	r0, [r7, #8]
 80040c2:	f001 fa59 	bl	8005578 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 80040c6:	4604      	mov	r4, r0
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f001 f98b 	bl	80053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	4621      	mov	r1, r4
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f001 fa8d 	bl	80055f4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>
}
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}

080040e2 <_ZNK5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEplINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal13scalar_sum_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
 80040e2:	b5b0      	push	{r4, r5, r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	68b8      	ldr	r0, [r7, #8]
 80040f0:	f001 fab0 	bl	8005654 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>
 80040f4:	4604      	mov	r4, r0
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f001 fab7 	bl	800566a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 80040fc:	4605      	mov	r5, r0
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	4618      	mov	r0, r3
 8004104:	f001 f897 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	462a      	mov	r2, r5
 800410e:	4621      	mov	r1, r4
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f001 faff 	bl	8005714 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bdb0      	pop	{r4, r5, r7, pc}

0800411e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  inline const Derived& const_derived() const
  { return *static_cast<const Derived*>(this); }

  /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f001 fb34 	bl	8005794 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800412c:	4603      	mov	r3, r0
 800412e:	4618      	mov	r0, r3
 8004130:	f001 fb3b 	bl	80057aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004134:	4603      	mov	r3, r0
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f001 fb24 	bl	8005794 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800414c:	4603      	mov	r3, r0
 800414e:	4618      	mov	r0, r3
 8004150:	f001 fb38 	bl	80057c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004154:	4603      	mov	r3, r0
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>:
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	ca07      	ldmia	r2, {r0, r1, r2}
 800416e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f103 0210 	add.w	r2, r3, #16
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	3310      	adds	r3, #16
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f001 f8d4 	bl	8005334 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv>:
  *
  * \sa computeInverseAndDetWithCheck()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC
inline const Inverse<Derived> MatrixBase<Derived>::inverse() const
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
{
  EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsInteger,THIS_FUNCTION_IS_NOT_FOR_INTEGER_NUMERIC_TYPES)
  eigen_assert(rows() == cols());
 80041a2:	6838      	ldr	r0, [r7, #0]
 80041a4:	f7ff ffbb 	bl	800411e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 80041a8:	4604      	mov	r4, r0
 80041aa:	6838      	ldr	r0, [r7, #0]
 80041ac:	f7ff ffc7 	bl	800413e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 80041b0:	4603      	mov	r3, r0
 80041b2:	429c      	cmp	r4, r3
 80041b4:	d006      	beq.n	80041c4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x2c>
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x44>)
 80041b8:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x48>)
 80041ba:	f240 115f 	movw	r1, #351	; 0x15f
 80041be:	4809      	ldr	r0, [pc, #36]	; (80041e4 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7inverseEv+0x4c>)
 80041c0:	f019 fc20 	bl	801da04 <__assert_func>
  return Inverse<Derived>(derived());
 80041c4:	6838      	ldr	r0, [r7, #0]
 80041c6:	f001 fae5 	bl	8005794 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 80041ca:	4603      	mov	r3, r0
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f001 fb1d 	bl	800580e <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
}
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}
 80041dc:	0801ef68 	.word	0x0801ef68
 80041e0:	0801ef7c 	.word	0x0801ef7c
 80041e4:	0801f0d0 	.word	0x0801f0d0

080041e8 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>:
  * This class represents an abstract expression of A.inverse()
  * and most of the time this is the only way it is used.
  *
  */
template<typename XprType>
class Inverse : public InverseImpl<XprType,typename internal::traits<XprType>::StorageKind>
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ffb0 	bl	800415e <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEmlINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li0EEERKNS0_ISM_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004208:	b590      	push	{r4, r7, lr}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004214:	68b8      	ldr	r0, [r7, #8]
 8004216:	f001 fb0c 	bl	8005832 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800421a:	4604      	mov	r4, r0
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f001 fb13 	bl	8005848 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	4621      	mov	r1, r4
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f001 fb57 	bl	80058dc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>
}
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bd90      	pop	{r4, r7, pc}

08004236 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f001 fb7b 	bl	8005940 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
 800424a:	4603      	mov	r3, r0
    }
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEmlINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004254:	b590      	push	{r4, r7, lr}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f001 f92b 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8004266:	4604      	mov	r4, r0
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fc8e 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	4621      	mov	r1, r4
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f001 fba1 	bl	80059bc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>
}
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bd90      	pop	{r4, r7, pc}

08004282 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEmiINS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 8004282:	b5b0      	push	{r4, r5, r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f001 f9eb 	bl	800566a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 8004294:	4604      	mov	r4, r0
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f001 fbbe 	bl	8005a18 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 800429c:	4605      	mov	r5, r0
 800429e:	f107 0314 	add.w	r3, r7, #20
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fbc3 	bl	8005a2e <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	462a      	mov	r2, r5
 80042ae:	4621      	mov	r1, r4
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f001 fbfb 	bl	8005aac <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bdb0      	pop	{r4, r5, r7, pc}

080042be <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>:
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	1d1a      	adds	r2, r3, #4
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	3304      	adds	r3, #4
 80042d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80042dc:	e882 0003 	stmia.w	r2, {r0, r1}
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f103 020c 	add.w	r2, r3, #12
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f001 fc1f 	bl	8005b30 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004308:	68b8      	ldr	r0, [r7, #8]
 800430a:	f000 fc3e 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800430e:	4604      	mov	r4, r0
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f001 fc19 	bl	8005b48 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	4621      	mov	r1, r4
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f001 fc51 	bl	8005bc4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>
}
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bd90      	pop	{r4, r7, pc}

0800432a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>:
  * The other template parameters are:
  * \tparam Option     can be DefaultProduct, AliasFreeProduct, or LazyProduct
  *
  */
template<typename _Lhs, typename _Rhs, int Option>
class Product : public ProductImpl<_Lhs,_Rhs,Option,
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	1d1a      	adds	r2, r3, #4
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f7ff ffb9 	bl	80042be <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEplINS_7ProductIS2_NS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS5_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEKNS6_INS7_13scalar_sum_opIfNS7_6traitsIT_E6ScalarEEEKS2_KSJ_EERKNS0_ISJ_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
 8004356:	b5b0      	push	{r4, r5, r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	68b8      	ldr	r0, [r7, #8]
 8004364:	f000 fc11 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004368:	4604      	mov	r4, r0
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 fc5a 	bl	8005c24 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>
 8004370:	4605      	mov	r5, r0
 8004372:	f107 0314 	add.w	r3, r7, #20
 8004376:	4618      	mov	r0, r3
 8004378:	f000 ff5d 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800437c:	f107 0314 	add.w	r3, r7, #20
 8004380:	462a      	mov	r2, r5
 8004382:	4621      	mov	r1, r4
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f001 fc8d 	bl	8005ca4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bdb0      	pop	{r4, r5, r7, pc}

08004392 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEaSINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6839      	ldr	r1, [r7, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 fcbf 	bl	8005d24 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
 80043a6:	4603      	mov	r3, r0
    }
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEmlINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li0EEERKNS0_IS7_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 80043bc:	68b8      	ldr	r0, [r7, #8]
 80043be:	f000 fbe4 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 80043c2:	4604      	mov	r4, r0
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f001 f879 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80043ca:	4603      	mov	r3, r0
 80043cc:	461a      	mov	r2, r3
 80043ce:	4621      	mov	r1, r4
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f001 fce5 	bl	8005da0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>
}
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd90      	pop	{r4, r7, pc}

080043de <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEmiINS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEKNS_13CwiseBinaryOpINS_8internal20scalar_difference_opIfNSA_6traitsIT_E6ScalarEEEKS2_KSD_EERKNS0_ISD_EE>:
EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
 80043de:	b5b0      	push	{r4, r5, r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	68b8      	ldr	r0, [r7, #8]
 80043ec:	f000 fd95 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80043f0:	4604      	mov	r4, r0
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f001 fd02 	bl	8005dfc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>
 80043f8:	4605      	mov	r5, r0
 80043fa:	f107 0314 	add.w	r3, r7, #20
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 fb15 	bl	8005a2e <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>
 8004404:	f107 0314 	add.w	r3, r7, #20
 8004408:	462a      	mov	r2, r5
 800440a:	4621      	mov	r1, r4
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f001 fd35 	bl	8005e7c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bdb0      	pop	{r4, r5, r7, pc}

0800441a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>:
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1d1a      	adds	r2, r3, #4
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	3304      	adds	r3, #4
 8004434:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004438:	e882 0003 	stmia.w	r2, {r0, r1}
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f103 020c 	add.w	r2, r3, #12
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f001 fb71 	bl	8005b30 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEmlIS6_EEKNS8_ISD_T_Li0EEERKNS0_ISG_EE>:
MatrixBase<Derived>::operator*(const MatrixBase<OtherDerived> &other) const
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  return Product<Derived, OtherDerived>(derived(), other.derived());
 8004464:	68b8      	ldr	r0, [r7, #8]
 8004466:	f001 fd4b 	bl	8005f00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800446a:	4604      	mov	r4, r0
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fd54 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004472:	4603      	mov	r3, r0
 8004474:	461a      	mov	r2, r3
 8004476:	4621      	mov	r1, r4
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f001 fd7f 	bl	8005f7c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>
}
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	bd90      	pop	{r4, r7, pc}

08004486 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEaSINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERS1_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Matrix& operator=(const DenseBase<OtherDerived>& other)
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
      return Base::_set(other);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6839      	ldr	r1, [r7, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f001 fd9f 	bl	8005fd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
 800449a:	4603      	mov	r3, r0
    }
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <_ZN5Eigen8symbolic9ValueExprINS_8internal8FixedIntILi1EEEEC1Ev>:
  ValueExpr() {}
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <_ZN5Eigen8symbolic7AddExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEENS0_9ValueExprINS3_8FixedIntILi1EEEEEEC1ERKS5_RKS9_>:

template<typename Arg0, typename Arg1>
class AddExpr : public BaseExpr<AddExpr<Arg0,Arg1> >
{
public:
  AddExpr(const Arg0& arg0, const Arg1& arg1) : m_arg0(arg0), m_arg1(arg1) {}
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
    EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<RealScalar>& p)

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 fd89 	bl	800600a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    // Prevent user from trying to instantiate PlainObjectBase objects
    // by making all its constructor protected. See bug 1074.
  protected:

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ffed 	bl	80044ea <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4618      	mov	r0, r3
 8004514:	f001 fd84 	bl	8006020 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>
    {
//       _check_template_params();
//       EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
    }
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void swap(DenseBase<OtherDerived> const & other)
    { Base::swap(other.derived()); }

    EIGEN_DEVICE_FUNC
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0
                        && ((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0))
                        && (MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic)
                        && (MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic)
                        && (Options & (DontAlign|RowMajor)) == Options),
        INVALID_MATRIX_TEMPLATE_PARAMETERS)
    }
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f001 fd7e 	bl	800603a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ffed 	bl	8004530 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	f001 fd79 	bl	8006050 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>
    }
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
    }
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f001 fd73 	bl	800606a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff ffed 	bl	8004576 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fd6e 	bl	8006080 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>
    }
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 80045ae:	b480      	push	{r7}
 80045b0:	af00      	add	r7, sp, #0
    }
 80045b2:	bf00      	nop
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f001 fd68 	bl	800609a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff ffed 	bl	80045bc <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fd63 	bl	80060b0 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>
    }
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
    }
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	609a      	str	r2, [r3, #8]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 f86a 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	dd07      	ble.n	8004648 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x44>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f857 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	dc05      	bgt.n	8004654 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x50>
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x74>)
 800464a:	4a0c      	ldr	r2, [pc, #48]	; (800467c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x78>)
 800464c:	2124      	movs	r1, #36	; 0x24
 800464e:	480c      	ldr	r0, [pc, #48]	; (8004680 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_RKf+0x7c>)
 8004650:	f019 f9d8 	bl	801da04 <__assert_func>
 8004654:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f85c 	bl	800471c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6013      	str	r3, [r2, #0]
  }
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	0801f128 	.word	0x0801f128
 800467c:	0801f184 	.word	0x0801f184
 8004680:	0801eb94 	.word	0x0801eb94

08004684 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	18d4      	adds	r4, r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f833 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80046a0:	4603      	mov	r3, r0
 80046a2:	429c      	cmp	r4, r3
 80046a4:	d007      	beq.n	80046b6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x32>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f820 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x46>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689c      	ldr	r4, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f816 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80046c4:	4603      	mov	r3, r0
 80046c6:	429c      	cmp	r4, r3
 80046c8:	d005      	beq.n	80046d6 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x52>
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x60>)
 80046cc:	4a06      	ldr	r2, [pc, #24]	; (80046e8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x64>)
 80046ce:	217a      	movs	r1, #122	; 0x7a
 80046d0:	4806      	ldr	r0, [pc, #24]	; (80046ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8finishedEv+0x68>)
 80046d2:	f019 f997 	bl	801da04 <__assert_func>
 80046d6:	bf00      	nop
      return m_xpr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
  }
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd90      	pop	{r4, r7, pc}
 80046e4:	0801f234 	.word	0x0801f234
 80046e8:	0801f2d4 	.word	0x0801f2d4
 80046ec:	0801eb94 	.word	0x0801eb94

080046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	f001 fce7 	bl	80060ca <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>
 80046fc:	4603      	mov	r3, r0
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	f001 fce4 	bl	80060da <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004712:	4603      	mov	r3, r0
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4618      	mov	r0, r3
 800472c:	f001 fcdd 	bl	80060ea <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8004730:	4604      	mov	r4, r0
 8004732:	f001 fcd2 	bl	80060da <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>
 8004736:	4602      	mov	r2, r0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	fb03 f202 	mul.w	r2, r3, r2
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4423      	add	r3, r4
    }
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bd90      	pop	{r4, r7, pc}
	...

08004750 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	609a      	str	r2, [r3, #8]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f000 f86a 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	dd07      	ble.n	8004794 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x44>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 f857 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	dc05      	bgt.n	80047a0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x50>
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x74>)
 8004796:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x78>)
 8004798:	2124      	movs	r1, #36	; 0x24
 800479a:	480c      	ldr	r0, [pc, #48]	; (80047cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_RKf+0x7c>)
 800479c:	f019 f932 	bl	801da04 <__assert_func>
 80047a0:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f85c 	bl	8004868 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>
 80047b0:	4602      	mov	r2, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6013      	str	r3, [r2, #0]
  }
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	0801f128 	.word	0x0801f128
 80047c8:	0801f33c 	.word	0x0801f33c
 80047cc:	0801eb94 	.word	0x0801eb94

080047d0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	18d4      	adds	r4, r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f833 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80047ec:	4603      	mov	r3, r0
 80047ee:	429c      	cmp	r4, r3
 80047f0:	d007      	beq.n	8004802 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x32>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f000 f820 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x46>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689c      	ldr	r4, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f816 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004810:	4603      	mov	r3, r0
 8004812:	429c      	cmp	r4, r3
 8004814:	d005      	beq.n	8004822 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x52>
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x60>)
 8004818:	4a06      	ldr	r2, [pc, #24]	; (8004834 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x64>)
 800481a:	217a      	movs	r1, #122	; 0x7a
 800481c:	4806      	ldr	r0, [pc, #24]	; (8004838 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8finishedEv+0x68>)
 800481e:	f019 f8f1 	bl	801da04 <__assert_func>
 8004822:	bf00      	nop
      return m_xpr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
  }
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bd90      	pop	{r4, r7, pc}
 8004830:	0801f234 	.word	0x0801f234
 8004834:	0801f3ec 	.word	0x0801f3ec
 8004838:	0801eb94 	.word	0x0801eb94

0800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	f001 fc5c 	bl	8006100 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>
 8004848:	4603      	mov	r3, r0
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	f001 fc59 	bl	8006110 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 800485e:	4603      	mov	r3, r0
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004868:	b590      	push	{r4, r7, lr}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4618      	mov	r0, r3
 8004878:	f001 fc52 	bl	8006120 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 800487c:	4604      	mov	r4, r0
 800487e:	f001 fc47 	bl	8006110 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	fb03 f202 	mul.w	r2, r3, r2
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4423      	add	r3, r4
    }
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bd90      	pop	{r4, r7, pc}
	...

0800489c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	605a      	str	r2, [r3, #4]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2201      	movs	r2, #1
 80048b8:	609a      	str	r2, [r3, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 ff0e 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	dd07      	ble.n	80048e0 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x44>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 ff11 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	dc05      	bgt.n	80048ec <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x50>
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x74>)
 80048e2:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x78>)
 80048e4:	2124      	movs	r1, #36	; 0x24
 80048e6:	480c      	ldr	r0, [pc, #48]	; (8004918 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS2_RKf+0x7c>)
 80048e8:	f019 f88c 	bl	801da04 <__assert_func>
 80048ec:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 fc1d 	bl	8006136 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 80048fc:	4602      	mov	r2, r0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6013      	str	r3, [r2, #0]
  }
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	0801f128 	.word	0x0801f128
 8004914:	0801f454 	.word	0x0801f454
 8004918:	0801eb94 	.word	0x0801eb94

0800491c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv>:
  inline XprType& finished() {
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	18d4      	adds	r4, r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fed7 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8004938:	4603      	mov	r3, r0
 800493a:	429c      	cmp	r4, r3
 800493c:	d007      	beq.n	800494e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x32>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 feda 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x46>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689c      	ldr	r4, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fed0 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800495c:	4603      	mov	r3, r0
 800495e:	429c      	cmp	r4, r3
 8004960:	d005      	beq.n	800496e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x52>
 8004962:	4b06      	ldr	r3, [pc, #24]	; (800497c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x60>)
 8004964:	4a06      	ldr	r2, [pc, #24]	; (8004980 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x64>)
 8004966:	217a      	movs	r1, #122	; 0x7a
 8004968:	4806      	ldr	r0, [pc, #24]	; (8004984 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8finishedEv+0x68>)
 800496a:	f019 f84b 	bl	801da04 <__assert_func>
 800496e:	bf00      	nop
      return m_xpr;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
  }
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	bd90      	pop	{r4, r7, pc}
 800497c:	0801f234 	.word	0x0801f234
 8004980:	0801f504 	.word	0x0801f504
 8004984:	0801eb94 	.word	0x0801eb94

08004988 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf>:
  inline CommaInitializer(XprType& xpr, const Scalar& s)
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
    : m_xpr(xpr), m_row(0), m_col(1), m_currentBlockRows(1)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	60da      	str	r2, [r3, #12]
    eigen_assert(m_xpr.rows() > 0 && m_xpr.cols() > 0
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f86a 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	dd07      	ble.n	80049cc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x44>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 f857 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	dc05      	bgt.n	80049d8 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x50>
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x74>)
 80049ce:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x78>)
 80049d0:	2124      	movs	r1, #36	; 0x24
 80049d2:	480c      	ldr	r0, [pc, #48]	; (8004a04 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_RKf+0x7c>)
 80049d4:	f019 f816 	bl	801da04 <__assert_func>
 80049d8:	bf00      	nop
    m_xpr.coeffRef(0,0) = s;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f85c 	bl	8004aa0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>
 80049e8:	4602      	mov	r2, r0
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6013      	str	r3, [r2, #0]
  }
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	0801f128 	.word	0x0801f128
 8004a00:	0801f56c 	.word	0x0801f56c
 8004a04:	0801eb94 	.word	0x0801eb94

08004a08 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv>:
  inline XprType& finished() {
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
      eigen_assert(((m_row+m_currentBlockRows) == m_xpr.rows() || m_xpr.cols() == 0)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	18d4      	adds	r4, r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f833 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8004a24:	4603      	mov	r3, r0
 8004a26:	429c      	cmp	r4, r3
 8004a28:	d007      	beq.n	8004a3a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x32>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f820 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x46>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689c      	ldr	r4, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f816 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d005      	beq.n	8004a5a <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x52>
 8004a4e:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x60>)
 8004a50:	4a06      	ldr	r2, [pc, #24]	; (8004a6c <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x64>)
 8004a52:	217a      	movs	r1, #122	; 0x7a
 8004a54:	4806      	ldr	r0, [pc, #24]	; (8004a70 <_ZN5Eigen16CommaInitializerINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8finishedEv+0x68>)
 8004a56:	f018 ffd5 	bl	801da04 <__assert_func>
 8004a5a:	bf00      	nop
      return m_xpr;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
  }
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd90      	pop	{r4, r7, pc}
 8004a68:	0801f234 	.word	0x0801f234
 8004a6c:	0801f61c 	.word	0x0801f61c
 8004a70:	0801eb94 	.word	0x0801eb94

08004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	f001 fb74 	bl	8006168 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	f001 fb71 	bl	8006178 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>
 8004a96:	4603      	mov	r3, r0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
        return m_storage.data()[colId + rowId * m_storage.cols()];
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f001 fb6a 	bl	8006188 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	f001 fb57 	bl	8006168 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	fb03 f202 	mul.w	r2, r3, r2
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4423      	add	r3, r4
    }
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}

08004ad2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f855 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff feb5 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f845 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fe9a 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
protected:
  Index m_outerStride;
};

template<typename Derived>
struct evaluator<PlainObjectBase<Derived> >
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f001 fb4f 	bl	80061be <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:

  plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
};

template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ffec 	bl	8004b12 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_ZN5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1EE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
      return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 f90f 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004b56:	4602      	mov	r2, r0
 8004b58:	f107 0314 	add.w	r3, r7, #20
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fb1d 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8004b64:	f107 0314 	add.w	r3, r7, #20
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 fb31 	bl	80061d4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>
 8004b72:	4604      	mov	r4, r0
 8004b74:	bf00      	nop
 8004b76:	f107 0314 	add.w	r3, r7, #20
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ffd5 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8004b80:	4623      	mov	r3, r4
    }
 8004b82:	4618      	mov	r0, r3
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd90      	pop	{r4, r7, pc}

08004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKf>:
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f001 fb1b 	bl	8006204 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_>:

    typedef typename internal::dense_xpr_base<CwiseNullaryOp>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(CwiseNullaryOp)

    EIGEN_DEVICE_FUNC
    CwiseNullaryOp(Index rows, Index cols, const NullaryOp& func = NullaryOp())
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
      : m_rows(rows), m_cols(cols), m_functor(func)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff ffea 	bl	8004bc0 <_ZN5Eigen10MatrixBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 fb13 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 fb27 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3304      	adds	r3, #4
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f897 	bl	8004d3c <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
    {
      eigen_assert(rows >= 0
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	db08      	blt.n	8004c26 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d105      	bne.n	8004c26 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db02      	blt.n	8004c26 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x4e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d005      	beq.n	8004c32 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x5a>
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x64>)
 8004c28:	4a05      	ldr	r2, [pc, #20]	; (8004c40 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x68>)
 8004c2a:	2147      	movs	r1, #71	; 0x47
 8004c2c:	4805      	ldr	r0, [pc, #20]	; (8004c44 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1EiiRKS3_+0x6c>)
 8004c2e:	f018 fee9 	bl	801da04 <__assert_func>
            && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
            &&  cols >= 0
            && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols));
    }
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	0801f684 	.word	0x0801f684
 8004c40:	0801f71c 	.word	0x0801f71c
 8004c44:	0801f810 	.word	0x0801f810

08004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_product_op)
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f001 fb0c 	bl	8006284 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>:
    const BinaryOp m_functor;
};

// Generic API dispatcher
template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
class CwiseBinaryOpImpl
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff ffed 	bl	8004c5e <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index rows() const { return m_rows.value(); }
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	f001 fb00 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const { return m_cols.value(); }
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	f001 fafd 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f7ff ffd3 	bl	8004c76 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EENS_5DenseEEC1Ev>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff f871 	bl	8003dc4 <_ZN5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS7_>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 f837 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fdae 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ffc8 	bl	8004c8e <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	429c      	cmp	r4, r3
 8004d02:	d10a      	bne.n	8004d1a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x5e>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fd98 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff ffc8 	bl	8004ca4 <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004d14:	4603      	mov	r3, r0
 8004d16:	429c      	cmp	r4, r3
 8004d18:	d005      	beq.n	8004d26 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x6a>
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x74>)
 8004d1c:	4a05      	ldr	r2, [pc, #20]	; (8004d34 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x78>)
 8004d1e:	2174      	movs	r1, #116	; 0x74
 8004d20:	4805      	ldr	r0, [pc, #20]	; (8004d38 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERS6_RSB_RKS3_+0x7c>)
 8004d22:	f018 fe6f 	bl	801da04 <__assert_func>
    }
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd90      	pop	{r4, r7, pc}
 8004d30:	0801f86c 	.word	0x0801f86c
 8004d34:	0801f8a8 	.word	0x0801f8a8
 8004d38:	0801fad0 	.word	0x0801fad0

08004d3c <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>:
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 fa91 	bl	80062ba <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ffed 	bl	8004d8a <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ffec 	bl	8004da2 <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 fa5e 	bl	80062d0 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>:
};

namespace internal {

template<typename Lhs, typename Rhs, int Option, int ProductTag = internal::product_type<Lhs,Rhs>::ret>
class dense_product_base
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ffed 	bl	8004e06 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>:
  public:
    typedef typename internal::generic_xpr_base<Product<Lhs,Rhs,Option>, MatrixXpr, StorageKind>::type Base;
};

template<typename Lhs, typename Rhs, int Option>
class ProductImpl<Lhs,Rhs,Option,Dense>
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff ffed 	bl	8004e1e <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ELi4EEC1Ev>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fcee 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004e60:	4603      	mov	r3, r0
    }
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fce0 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff ffce 	bl	8004e36 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0ENS_5DenseEEC1Ev>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe ffee 	bl	8003e80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3310      	adds	r3, #16
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8004eae:	68b8      	ldr	r0, [r7, #8]
 8004eb0:	f7ff ffcd 	bl	8004e4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ffd7 	bl	8004e6a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	429c      	cmp	r4, r3
 8004ec0:	d005      	beq.n	8004ece <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x46>
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x54>)
 8004ec4:	4a06      	ldr	r2, [pc, #24]	; (8004ee0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x58>)
 8004ec6:	2160      	movs	r1, #96	; 0x60
 8004ec8:	4806      	ldr	r0, [pc, #24]	; (8004ee4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EEC1ERKSD_RKSF_+0x5c>)
 8004eca:	f018 fd9b 	bl	801da04 <__assert_func>
 8004ece:	bf00      	nop
    }
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd90      	pop	{r4, r7, pc}
 8004eda:	bf00      	nop
 8004edc:	0801fb2c 	.word	0x0801fb2c
 8004ee0:	0801fbb8 	.word	0x0801fbb8
 8004ee4:	0801fe7c 	.word	0x0801fe7c

08004ee8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8da 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004ef8:	4604      	mov	r4, r0
 8004efa:	6838      	ldr	r0, [r7, #0]
 8004efc:	f001 f9f3 	bl	80062e6 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4619      	mov	r1, r3
 8004f04:	4620      	mov	r0, r4
 8004f06:	f001 f9f9 	bl	80062fc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>
      return this->derived();
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8ce 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8004f10:	4603      	mov	r3, r0
    }
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}

08004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 f9f4 	bl	8006326 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>:
class dense_product_base
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ffed 	bl	8004f30 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ffed 	bl	8004f48 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi3EEC1Ev>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f7ff ffeb 	bl	8004f60 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff fba9 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fc55 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	429c      	cmp	r4, r3
 8004fac:	d005      	beq.n	8004fba <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 8004fb0:	4a06      	ldr	r2, [pc, #24]	; (8004fcc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 8004fb2:	2160      	movs	r1, #96	; 0x60
 8004fb4:	4806      	ldr	r0, [pc, #24]	; (8004fd0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 8004fb6:	f018 fd25 	bl	801da04 <__assert_func>
 8004fba:	bf00      	nop
    }
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd90      	pop	{r4, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	0801fb2c 	.word	0x0801fb2c
 8004fcc:	0801fed0 	.word	0x0801fed0
 8004fd0:	0801fe7c 	.word	0x0801fe7c

08004fd4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fec8 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	6838      	ldr	r0, [r7, #0]
 8004fe8:	f001 f9a8 	bl	800633c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f001 f9ae 	bl	8006352 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff febc 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8004ffc:	4603      	mov	r3, r0
    }
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	bd90      	pop	{r4, r7, pc}

08005006 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 f9b4 	bl	800637c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>:
class dense_product_base
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ffed 	bl	8005006 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005036:	b580      	push	{r7, lr}
 8005038:	b082      	sub	sp, #8
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff ffed 	bl	800501e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0ELi3EEC1Ev>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff ffea 	bl	8005036 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0ENS_5DenseEEC1Ev>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fb3d 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005076:	4604      	mov	r4, r0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fb43 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005080:	4603      	mov	r3, r0
 8005082:	429c      	cmp	r4, r3
 8005084:	d005      	beq.n	8005092 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x42>
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x50>)
 8005088:	4a06      	ldr	r2, [pc, #24]	; (80050a4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x54>)
 800508a:	2160      	movs	r1, #96	; 0x60
 800508c:	4806      	ldr	r0, [pc, #24]	; (80050a8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEC1ERKS2_S5_+0x58>)
 800508e:	f018 fcb9 	bl	801da04 <__assert_func>
 8005092:	bf00      	nop
    }
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	bd90      	pop	{r4, r7, pc}
 800509e:	bf00      	nop
 80050a0:	0801fb2c 	.word	0x0801fb2c
 80050a4:	0801fff8 	.word	0x0801fff8
 80050a8:	0801fe7c 	.word	0x0801fe7c

080050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 f961 	bl	8006392 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff ffed 	bl	80050c2 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <_ZN5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff ffec 	bl	80050da <_ZN5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEEC1Ev>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>:
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 f92e 	bl	80063a8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>:
class dense_product_base
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff ffed 	bl	800513e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff ffed 	bl	8005156 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0ELi3EEC1Ev>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4618      	mov	r0, r3
 8005194:	f7ff faac 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005198:	4603      	mov	r3, r0
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fa9e 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff ffce 	bl	800516e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051da:	e883 0003 	stmia.w	r3, {r0, r1}
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3308      	adds	r3, #8
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80051e8:	68b8      	ldr	r0, [r7, #8]
 80051ea:	f7ff ffcc 	bl	8005186 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 80051ee:	4604      	mov	r4, r0
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ffd6 	bl	80051a2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80051f6:	4603      	mov	r3, r0
 80051f8:	429c      	cmp	r4, r3
 80051fa:	d005      	beq.n	8005208 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x48>
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x54>)
 80051fe:	4a06      	ldr	r2, [pc, #24]	; (8005218 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x58>)
 8005200:	2160      	movs	r1, #96	; 0x60
 8005202:	4806      	ldr	r0, [pc, #24]	; (800521c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EEC1ERKS3_RKS5_+0x5c>)
 8005204:	f018 fbfe 	bl	801da04 <__assert_func>
 8005208:	bf00      	nop
    }
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	bd90      	pop	{r4, r7, pc}
 8005214:	0801fb2c 	.word	0x0801fb2c
 8005218:	08020120 	.word	0x08020120
 800521c:	0801fe7c 	.word	0x0801fe7c

08005220 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>:
  EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op)
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f001 f8b2 	bl	80063be <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff ffed 	bl	800524c <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f8a4 	bl	80063d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800528c:	4603      	mov	r3, r0
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3308      	adds	r3, #8
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 f8a4 	bl	80063f0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80052a8:	4603      	mov	r3, r0
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80052b4:	b590      	push	{r4, r7, lr}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff ffce 	bl	8005264 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_NS_5DenseEEC1Ev>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80052ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3310      	adds	r3, #16
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f828 	bl	8005334 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80052e4:	68b8      	ldr	r0, [r7, #8]
 80052e6:	f7ff ffc9 	bl	800527c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80052ea:	4604      	mov	r4, r0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fa09 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80052f4:	4603      	mov	r3, r0
 80052f6:	429c      	cmp	r4, r3
 80052f8:	d10a      	bne.n	8005310 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x5c>
 80052fa:	68b8      	ldr	r0, [r7, #8]
 80052fc:	f7ff ffcb 	bl	8005296 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005300:	4604      	mov	r4, r0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff f9f3 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800530a:	4603      	mov	r3, r0
 800530c:	429c      	cmp	r4, r3
 800530e:	d005      	beq.n	800531c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x68>
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x74>)
 8005312:	4a06      	ldr	r2, [pc, #24]	; (800532c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x78>)
 8005314:	2174      	movs	r1, #116	; 0x74
 8005316:	4806      	ldr	r0, [pc, #24]	; (8005330 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_EC1ERSB_RSC_RKS3_+0x7c>)
 8005318:	f018 fb74 	bl	801da04 <__assert_func>
    }
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bd90      	pop	{r4, r7, pc}
 8005326:	bf00      	nop
 8005328:	0801f86c 	.word	0x0801f86c
 800532c:	080202cc 	.word	0x080202cc
 8005330:	0801fad0 	.word	0x0801fad0

08005334 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>:
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_IS2_S2_Li0EEENS_9TransposeIS2_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff fea8 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800535c:	4604      	mov	r4, r0
 800535e:	6838      	ldr	r0, [r7, #0]
 8005360:	f001 f854 	bl	800640c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>
 8005364:	4603      	mov	r3, r0
 8005366:	4619      	mov	r1, r3
 8005368:	4620      	mov	r0, r4
 800536a:	f001 f85a 	bl	8006422 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>
      return this->derived();
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fe9c 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005374:	4603      	mov	r3, r0
    }
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	bd90      	pop	{r4, r7, pc}

0800537e <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 f855 	bl	800644c <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ffed 	bl	8005394 <_ZN5Eigen10MatrixBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <_ZN5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS2_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff ffec 	bl	80053ac <_ZN5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4618      	mov	r0, r3
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 f82d 	bl	8006462 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>:
class dense_product_base
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ffed 	bl	80053fa <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff ffed 	bl	8005412 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ELi3EEC1Ev>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff fb10 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005454:	4603      	mov	r3, r0
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff ffdc 	bl	800542a <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0ENS_5DenseEEC1Ev>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3304      	adds	r3, #4
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff f933 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800548a:	4604      	mov	r4, r0
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ffd8 	bl	8005442 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005492:	4603      	mov	r3, r0
 8005494:	429c      	cmp	r4, r3
 8005496:	d005      	beq.n	80054a4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x44>
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x50>)
 800549a:	4a06      	ldr	r2, [pc, #24]	; (80054b4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x54>)
 800549c:	2160      	movs	r1, #96	; 0x60
 800549e:	4806      	ldr	r0, [pc, #24]	; (80054b8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEC1ERKS2_RKS5_+0x58>)
 80054a0:	f018 fab0 	bl	801da04 <__assert_func>
 80054a4:	bf00      	nop
    }
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd90      	pop	{r4, r7, pc}
 80054b0:	0801fb2c 	.word	0x0801fb2c
 80054b4:	08020540 	.word	0x08020540
 80054b8:	0801fe7c 	.word	0x0801fe7c

080054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>:
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 ffcc 	bl	8006478 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>:
class dense_product_base
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff ffed 	bl	80054d2 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005502:	b580      	push	{r7, lr}
 8005504:	b082      	sub	sp, #8
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff ffed 	bl	80054ea <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0ELi3EEC1Ev>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7ff ffea 	bl	8005502 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0ENS_5DenseEEC1Ev>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff fa99 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005542:	4604      	mov	r4, r0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff f8dd 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800554c:	4603      	mov	r3, r0
 800554e:	429c      	cmp	r4, r3
 8005550:	d005      	beq.n	800555e <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005552:	4b06      	ldr	r3, [pc, #24]	; (800556c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005554:	4a06      	ldr	r2, [pc, #24]	; (8005570 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005556:	2160      	movs	r1, #96	; 0x60
 8005558:	4806      	ldr	r0, [pc, #24]	; (8005574 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 800555a:	f018 fa53 	bl	801da04 <__assert_func>
 800555e:	bf00      	nop
    }
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	bf00      	nop
 800556c:	0801fb2c 	.word	0x0801fb2c
 8005570:	0802068c 	.word	0x0802068c
 8005574:	0801fe7c 	.word	0x0801fe7c

08005578 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>:
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4618      	mov	r0, r3
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 ff79 	bl	800648e <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff ffed 	bl	800558e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff ffed 	bl	80055a6 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0ELi6EEC1Ev>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b082      	sub	sp, #8
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff f884 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80055e8:	4603      	mov	r3, r0
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff ffdc 	bl	80055be <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0ENS_5DenseEEC1Ev>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800560e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3308      	adds	r3, #8
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800561c:	68b8      	ldr	r0, [r7, #8]
 800561e:	f7ff ffda 	bl	80055d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8005622:	4604      	mov	r4, r0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ff0c 	bl	8005442 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800562a:	4603      	mov	r3, r0
 800562c:	429c      	cmp	r4, r3
 800562e:	d005      	beq.n	800563c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x48>
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x54>)
 8005632:	4a06      	ldr	r2, [pc, #24]	; (800564c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x58>)
 8005634:	2160      	movs	r1, #96	; 0x60
 8005636:	4806      	ldr	r0, [pc, #24]	; (8005650 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EEC1ERKS4_RKS6_+0x5c>)
 8005638:	f018 f9e4 	bl	801da04 <__assert_func>
 800563c:	bf00      	nop
    }
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	bd90      	pop	{r4, r7, pc}
 8005648:	0801fb2c 	.word	0x0801fb2c
 800564c:	080207b4 	.word	0x080207b4
 8005650:	0801fe7c 	.word	0x0801fe7c

08005654 <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEE7derivedEv>:
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 ff0b 	bl	80064a4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4618      	mov	r0, r3
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ffed 	bl	8005680 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4618      	mov	r0, r3
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fefd 	bl	80064ba <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3308      	adds	r3, #8
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fefd 	bl	80064d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	f000 ff00 	bl	80064f2 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 80056f2:	4603      	mov	r3, r0
 80056f4:	4618      	mov	r0, r3
 80056f6:	3708      	adds	r7, #8
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	f000 fefd 	bl	8006502 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>
 8005708:	4603      	mov	r3, r0
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff ffb8 	bl	8005698 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEENS_5DenseEEC1Ev>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	ca07      	ldmia	r2, {r0, r1, r2}
 800572e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3310      	adds	r3, #16
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fdf8 	bl	8005334 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005744:	68b8      	ldr	r0, [r7, #8]
 8005746:	f7ff ffb3 	bl	80056b0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 800574a:	4604      	mov	r4, r0
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff ffc9 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005754:	4603      	mov	r3, r0
 8005756:	429c      	cmp	r4, r3
 8005758:	d10a      	bne.n	8005770 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x5c>
 800575a:	68b8      	ldr	r0, [r7, #8]
 800575c:	f7ff ffb5 	bl	80056ca <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8005760:	4604      	mov	r4, r0
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ffc9 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800576a:	4603      	mov	r3, r0
 800576c:	429c      	cmp	r4, r3
 800576e:	d005      	beq.n	800577c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x68>
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x74>)
 8005772:	4a06      	ldr	r2, [pc, #24]	; (800578c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x78>)
 8005774:	2174      	movs	r1, #116	; 0x74
 8005776:	4806      	ldr	r0, [pc, #24]	; (8005790 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERSC_RSE_RKS3_+0x7c>)
 8005778:	f018 f944 	bl	801da04 <__assert_func>
    }
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bd90      	pop	{r4, r7, pc}
 8005786:	bf00      	nop
 8005788:	0801f86c 	.word	0x0801f86c
 800578c:	08020960 	.word	0x08020960
 8005790:	0801fad0 	.word	0x0801fad0

08005794 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>:
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff ff7b 	bl	80056b0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80057ba:	4603      	mov	r3, r0
    }
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff ff7b 	bl	80056ca <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80057d4:	4603      	mov	r3, r0
    }
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fe93 	bl	8006512 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>:
  XprTypeNested m_xpr;
};

// Generic API dispatcher
template<typename XprType, typename StorageKind>
class InverseImpl
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff ffed 	bl	80057de <_ZN5Eigen10MatrixBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit EIGEN_DEVICE_FUNC Inverse(const XprType &xpr)
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
    : m_xpr(xpr)
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ffec 	bl	80057f6 <_ZN5Eigen11InverseImplINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS_5DenseEEC1Ev>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fc9b 	bl	800415e <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKSF_>
  {}
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>:
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>:
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fe5e 	bl	8006528 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>:
class dense_product_base
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff ffed 	bl	800585e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff ffed 	bl	8005876 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ELi4EEC1Ev>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3304      	adds	r3, #4
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fe0f 	bl	80064d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80058b8:	4603      	mov	r3, r0
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index rows() const EIGEN_NOEXCEPT { return m_xpr.cols(); }
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ff79 	bl	80057c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff ffd0 	bl	800588e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0ENS_5DenseEEC1Ev>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3308      	adds	r3, #8
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe fc71 	bl	80041e8 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8005906:	68b8      	ldr	r0, [r7, #8]
 8005908:	f7ff ffcd 	bl	80058a6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800590c:	4604      	mov	r4, r0
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ffd7 	bl	80058c2 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8005914:	4603      	mov	r3, r0
 8005916:	429c      	cmp	r4, r3
 8005918:	d005      	beq.n	8005926 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x4a>
 800591a:	4b06      	ldr	r3, [pc, #24]	; (8005934 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x58>)
 800591c:	4a06      	ldr	r2, [pc, #24]	; (8005938 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x5c>)
 800591e:	2160      	movs	r1, #96	; 0x60
 8005920:	4806      	ldr	r0, [pc, #24]	; (800593c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEC1ERKS6_RKSI_+0x60>)
 8005922:	f018 f86f 	bl	801da04 <__assert_func>
 8005926:	bf00      	nop
    }
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	bd90      	pop	{r4, r7, pc}
 8005932:	bf00      	nop
 8005934:	0801fb2c 	.word	0x0801fb2c
 8005938:	08020bd4 	.word	0x08020bd4
 800593c:	0801fe7c 	.word	0x0801fe7c

08005940 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fa12 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005950:	4604      	mov	r4, r0
 8005952:	6838      	ldr	r0, [r7, #0]
 8005954:	f000 fdf3 	bl	800653e <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8005958:	4603      	mov	r3, r0
 800595a:	4619      	mov	r1, r3
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fdf9 	bl	8006554 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>
      return this->derived();
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fa06 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005968:	4603      	mov	r3, r0
    }
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bd90      	pop	{r4, r7, pc}

08005972 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fdff 	bl	800657e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>:
class dense_product_base<Lhs, Rhs, Option, InnerProduct>
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff ffed 	bl	8005972 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ffed 	bl	800598a <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0ELi6EEC1Ev>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff ffea 	bl	80059a2 <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0ENS_5DenseEEC1Ev>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff f849 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80059e2:	4604      	mov	r4, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe ff33 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80059ec:	4603      	mov	r3, r0
 80059ee:	429c      	cmp	r4, r3
 80059f0:	d005      	beq.n	80059fe <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x42>
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x50>)
 80059f4:	4a06      	ldr	r2, [pc, #24]	; (8005a10 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x54>)
 80059f6:	2160      	movs	r1, #96	; 0x60
 80059f8:	4806      	ldr	r0, [pc, #24]	; (8005a14 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEC1ERKS2_RKS3_+0x58>)
 80059fa:	f018 f803 	bl	801da04 <__assert_func>
 80059fe:	bf00      	nop
    }
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd90      	pop	{r4, r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	0801fb2c 	.word	0x0801fb2c
 8005a10:	08020f5c 	.word	0x08020f5c
 8005a14:	0801fe7c 	.word	0x0801fe7c

08005a18 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <_ZN5Eigen8internal20scalar_difference_opIffEC1Ev>:
template<typename LhsScalar,typename RhsScalar>
struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar>
{
  typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type;
#ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN
  EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op)
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fda1 	bl	8006594 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff ffed 	bl	8005a44 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff f802 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fecd 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f7ff ffce 	bl	8005a5c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS_5DenseEEC1Ev>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ad0:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f828 	bl	8005b30 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fdff 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005ae8:	4604      	mov	r4, r0
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7ff ffc2 	bl	8005a74 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8005af0:	4603      	mov	r3, r0
 8005af2:	429c      	cmp	r4, r3
 8005af4:	d10a      	bne.n	8005b0c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fdff 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8005afe:	4604      	mov	r4, r0
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ffc5 	bl	8005a90 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 8005b06:	4603      	mov	r3, r0
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	d005      	beq.n	8005b18 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8005b0e:	4a06      	ldr	r2, [pc, #24]	; (8005b28 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8005b10:	2174      	movs	r1, #116	; 0x74
 8005b12:	4806      	ldr	r0, [pc, #24]	; (8005b2c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8005b14:	f017 ff76 	bl	801da04 <__assert_func>
    }
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd90      	pop	{r4, r7, pc}
 8005b22:	bf00      	nop
 8005b24:	0801f86c 	.word	0x0801f86c
 8005b28:	08021084 	.word	0x08021084
 8005b2c:	0801fad0 	.word	0x0801fad0

08005b30 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>:
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>:
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fd1f 	bl	80065aa <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>:
class dense_product_base
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff ffed 	bl	8005b5e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff ffed 	bl	8005b76 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0ELi4EEC1Ev>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b082      	sub	sp, #8
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff fd97 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8005bb8:	4603      	mov	r3, r0
    }
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff ffdc 	bl	8005b8e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0ENS_5DenseEEC1Ev>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3304      	adds	r3, #4
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fb6b 	bl	80042be <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fe26 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7ff ffd7 	bl	8005ba6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	429c      	cmp	r4, r3
 8005bfc:	d005      	beq.n	8005c0a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x46>
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x54>)
 8005c00:	4a06      	ldr	r2, [pc, #24]	; (8005c1c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x58>)
 8005c02:	2160      	movs	r1, #96	; 0x60
 8005c04:	4806      	ldr	r0, [pc, #24]	; (8005c20 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKS2_RKSC_+0x5c>)
 8005c06:	f017 fefd 	bl	801da04 <__assert_func>
 8005c0a:	bf00      	nop
    }
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd90      	pop	{r4, r7, pc}
 8005c16:	bf00      	nop
 8005c18:	0801fb2c 	.word	0x0801fb2c
 8005c1c:	0802127c 	.word	0x0802127c
 8005c20:	0801fe7c 	.word	0x0801fe7c

08005c24 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEE7derivedEv>:
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fcbc 	bl	80065c0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff ffed 	bl	8005c3a <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe fdeb 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fc9f 	bl	80065d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff ffcd 	bl	8005c52 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS_13CwiseBinaryOpINS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEENS_5DenseEEC1Ev>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fb30 	bl	800432a <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEC1ERKSD_>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3318      	adds	r3, #24
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fb2f 	bl	8005334 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fdba 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005cde:	4604      	mov	r4, r0
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ffc2 	bl	8005c6a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	429c      	cmp	r4, r3
 8005cea:	d10a      	bne.n	8005d02 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x5e>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fda4 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff ffc5 	bl	8005c86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	429c      	cmp	r4, r3
 8005d00:	d005      	beq.n	8005d0e <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x6a>
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x74>)
 8005d04:	4a05      	ldr	r2, [pc, #20]	; (8005d1c <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x78>)
 8005d06:	2174      	movs	r1, #116	; 0x74
 8005d08:	4805      	ldr	r0, [pc, #20]	; (8005d20 <_ZN5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEEC1ERS6_RSH_RKS3_+0x7c>)
 8005d0a:	f017 fe7b 	bl	801da04 <__assert_func>
    }
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd90      	pop	{r4, r7, pc}
 8005d18:	0801f86c 	.word	0x0801f86c
 8005d1c:	080214e8 	.word	0x080214e8
 8005d20:	0801fad0 	.word	0x0801fad0

08005d24 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4_setINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff f820 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005d34:	4604      	mov	r4, r0
 8005d36:	6838      	ldr	r0, [r7, #0]
 8005d38:	f000 fc5b 	bl	80065f2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fc61 	bl	8006608 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>
      return this->derived();
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff f814 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8005d4c:	4603      	mov	r3, r0
    }
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd90      	pop	{r4, r7, pc}

08005d56 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fc67 	bl	8006632 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>:
class dense_product_base
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ffed 	bl	8005d56 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ffed 	bl	8005d6e <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0ELi4EEC1Ev>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f7ff ffea 	bl	8005d86 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0ENS_5DenseEEC1Ev>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe fd3b 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe fe5d 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	429c      	cmp	r4, r3
 8005dd4:	d005      	beq.n	8005de2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x42>
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x50>)
 8005dd8:	4a06      	ldr	r2, [pc, #24]	; (8005df4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x54>)
 8005dda:	2160      	movs	r1, #96	; 0x60
 8005ddc:	4806      	ldr	r0, [pc, #24]	; (8005df8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEC1ERKS2_RKS3_+0x58>)
 8005dde:	f017 fe11 	bl	801da04 <__assert_func>
 8005de2:	bf00      	nop
    }
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}
 8005dee:	bf00      	nop
 8005df0:	0801fb2c 	.word	0x0801fb2c
 8005df4:	0802181c 	.word	0x0802181c
 8005df8:	0801fe7c 	.word	0x0801fe7c

08005dfc <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE7derivedEv>:
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fc14 	bl	8006648 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff ffed 	bl	8005e12 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe fcff 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8005e54:	4603      	mov	r3, r0
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe fe02 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8005e70:	4603      	mov	r3, r0
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f7ff ffcd 	bl	8005e2a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS_5DenseEEC1Ev>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ea0:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff fe40 	bl	8005b30 <_ZN5Eigen8internal20scalar_difference_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fc27 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ffc1 	bl	8005e42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	429c      	cmp	r4, r3
 8005ec4:	d10a      	bne.n	8005edc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x60>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fc11 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005ece:	4604      	mov	r4, r0
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff ffc4 	bl	8005e5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d005      	beq.n	8005ee8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x6c>
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x78>)
 8005ede:	4a06      	ldr	r2, [pc, #24]	; (8005ef8 <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x7c>)
 8005ee0:	2174      	movs	r1, #116	; 0x74
 8005ee2:	4806      	ldr	r0, [pc, #24]	; (8005efc <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERS6_RSB_RKS3_+0x80>)
 8005ee4:	f017 fd8e 	bl	801da04 <__assert_func>
    }
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd90      	pop	{r4, r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	0801f86c 	.word	0x0801f86c
 8005ef8:	08021944 	.word	0x08021944
 8005efc:	0801fad0 	.word	0x0801fad0

08005f00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>:
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fb9d 	bl	800665e <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>:
class dense_product_base
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff ffed 	bl	8005f16 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff ffed 	bl	8005f2e <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ELi3EEC1Ev>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fbc0 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8005f70:	4603      	mov	r3, r0
    }
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff ffdc 	bl	8005f46 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0ENS_5DenseEEC1Ev>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe fa41 	bl	800441a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 8005f9e:	68b8      	ldr	r0, [r7, #8]
 8005fa0:	f7ff ffdd 	bl	8005f5e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe fbac 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d005      	beq.n	8005fc0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x44>
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x50>)
 8005fb6:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x54>)
 8005fb8:	2160      	movs	r1, #96	; 0x60
 8005fba:	4806      	ldr	r0, [pc, #24]	; (8005fd4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EEC1ERKSC_RS7_+0x58>)
 8005fbc:	f017 fd22 	bl	801da04 <__assert_func>
 8005fc0:	bf00      	nop
    }
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd90      	pop	{r4, r7, pc}
 8005fcc:	0801fb2c 	.word	0x0801fb2c
 8005fd0:	08021b3c 	.word	0x08021b3c
 8005fd4:	0801fe7c 	.word	0x0801fe7c

08005fd8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4_setINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set(const DenseBase<OtherDerived>& other)
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
      internal::call_assignment(this->derived(), other.derived());
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff f862 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8005fe8:	4604      	mov	r4, r0
 8005fea:	6838      	ldr	r0, [r7, #0]
 8005fec:	f000 fb42 	bl	8006674 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 fb48 	bl	800668a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>
      return this->derived();
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff f856 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006000:	4603      	mov	r3, r0
    }
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bd90      	pop	{r4, r7, pc}

0800600a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
    }

  protected:
    EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
    /** Default constructor. Do nothing. */
    EIGEN_DEVICE_FUNC DenseBase()
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
#ifdef EIGEN_INTERNAL_DEBUGGING
      EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor))
                        && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))),
                          INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION)
#endif
    }
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EEC1Ev>:
// purely fixed-size matrix
template<typename T, int Size, int _Rows, int _Cols, int _Options> class DenseStorage
{
    internal::plain_array<T,Size,_Options> m_data;
  public:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fb42 	bl	80066b4 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>
      EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
    }
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
    }
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fb35 	bl	80066ca <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>
    }
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
    }
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fb28 	bl	80066e0 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>
    }
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <_ZN5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
    }
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fb1b 	bl	80066f6 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>
    }
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4colsEv>:
    }
    EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
      numext::swap(m_data, other.m_data);
    }
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 80060ca:	b480      	push	{r7}
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	2303      	movs	r3, #3
 80060d0:	4618      	mov	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 80060da:	b480      	push	{r7}
 80060dc:	af00      	add	r7, sp, #0
 80060de:	2303      	movs	r3, #3
 80060e0:	4618      	mov	r0, r3
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC void conservativeResize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
 8006104:	2301      	movs	r3, #1
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
 8006114:	2303      	movs	r3, #3
 8006116:	4618      	mov	r0, r3
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>:
    EIGEN_STRONG_INLINE Scalar& coeffRef(Index rowId, Index colId)
 8006136:	b590      	push	{r4, r7, lr}
 8006138:	b085      	sub	sp, #20
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
        return m_storage.data()[rowId + colId * m_storage.rows()];
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fae1 	bl	800670c <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800614a:	4604      	mov	r4, r0
 800614c:	f000 f9d1 	bl	80064f2 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>
 8006150:	4602      	mov	r2, r0
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	fb03 f202 	mul.w	r2, r3, r2
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4423      	add	r3, r4
    }
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	bd90      	pop	{r4, r7, pc}

08006168 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
 800616c:	2303      	movs	r3, #3
 800616e:	4618      	mov	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
 800617c:	2301      	movs	r3, #1
 800617e:	4618      	mov	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4618      	mov	r0, r3
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>:

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  evaluator() {}

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit evaluator(const XprType& m)
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	4611      	mov	r1, r2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fab7 	bl	8006722 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
  { }
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4618      	mov	r0, r3
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681c      	ldr	r4, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fab2 	bl	8006750 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 80061ec:	4602      	mov	r2, r0
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	fb03 f202 	mul.w	r2, r3, r2
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4423      	add	r3, r4
  }
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	bd90      	pop	{r4, r7, pc}

08006204 <_ZN5Eigen9DenseBaseINS_14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
    }
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>:
  */
template<typename T, int Value> class variable_if_dynamic
{
  public:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d005      	beq.n	8006238 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x1c>
 800622c:	4b05      	ldr	r3, [pc, #20]	; (8006244 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x28>)
 800622e:	4a06      	ldr	r2, [pc, #24]	; (8006248 <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x2c>)
 8006230:	2185      	movs	r1, #133	; 0x85
 8006232:	4806      	ldr	r0, [pc, #24]	; (800624c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei+0x30>)
 8006234:	f017 fbe6 	bl	801da04 <__assert_func>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	08021da8 	.word	0x08021da8
 8006248:	08021db8 	.word	0x08021db8
 800624c:	08021e20 	.word	0x08021e20

08006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>:
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d005      	beq.n	800626c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x1c>
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x28>)
 8006262:	4a06      	ldr	r2, [pc, #24]	; (800627c <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x2c>)
 8006264:	2185      	movs	r1, #133	; 0x85
 8006266:	4806      	ldr	r0, [pc, #24]	; (8006280 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei+0x30>)
 8006268:	f017 fbcc 	bl	801da04 <__assert_func>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	08021da8 	.word	0x08021da8
 800627c:	08021e7c 	.word	0x08021e7c
 8006280:	08021e20 	.word	0x08021e20

08006284 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
    }
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>:
    EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    T value() { return T(Value); }
 800629a:	b480      	push	{r7}
 800629c:	af00      	add	r7, sp, #0
 800629e:	2303      	movs	r3, #3
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>:
 80062aa:	b480      	push	{r7}
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	2301      	movs	r3, #1
 80062b0:	4618      	mov	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
    }
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
    }
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4618      	mov	r0, r3
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>:
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEEvRT_RKT0_>:
// So this intermediate function removes everything related to "assume-aliasing" such that Assignment
// does not has to bother about these annoying details.

template<typename Dst, typename Src>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src)
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
{
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006306:	f107 030c 	add.w	r3, r7, #12
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fa2b 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006310:	f107 020c 	add.w	r2, r7, #12
 8006314:	2300      	movs	r3, #0
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fa2f 	bl	800677c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
    }
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>:
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 800635c:	f107 030c 	add.w	r3, r7, #12
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fa00 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006366:	f107 020c 	add.w	r2, r7, #12
 800636a:	2300      	movs	r3, #0
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fa1c 	bl	80067ac <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>
}
 8006374:	bf00      	nop
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
    }
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
    }
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
    }
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
    }
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fe f990 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80063e6:	4603      	mov	r3, r0
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fe f982 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006402:	4603      	mov	r3, r0
 8006404:	4618      	mov	r0, r3
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEE7derivedEv>:
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 800642c:	f107 030c 	add.w	r3, r7, #12
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f998 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006436:	f107 020c 	add.w	r2, r7, #12
 800643a:	2300      	movs	r3, #0
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9cc 	bl	80067dc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <_ZN5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
    }
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
    }
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
    }
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS3_EELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
    }
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
    }
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>:
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fadf 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80064cc:	4603      	mov	r3, r0
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fad1 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80064e8:	4603      	mov	r3, r0
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 80064f2:	b480      	push	{r7}
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	2301      	movs	r3, #1
 80064f8:	4618      	mov	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 8006502:	b480      	push	{r7}
 8006504:	af00      	add	r7, sp, #0
 8006506:	2301      	movs	r3, #1
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <_ZN5Eigen9DenseBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
    }
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
    }
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>:
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 800655e:	f107 030c 	add.w	r3, r7, #12
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f8ff 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006568:	f107 020c 	add.w	r2, r7, #12
 800656c:	2300      	movs	r3, #0
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f943 	bl	80067fc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>
}
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
    }
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
    }
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
    }
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
    }
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4618      	mov	r0, r3
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff f88a 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80065e8:	4603      	mov	r3, r0
    }
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>:
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006612:	f107 030c 	add.w	r3, r7, #12
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f8a5 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800661c:	f107 020c 	add.w	r2, r7, #12
 8006620:	2300      	movs	r3, #0
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f901 	bl	800682c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>
}
 800662a:	bf00      	nop
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
    }
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
    }
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
    }
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>:
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEEEEvRT_RKT0_>:
void call_assignment(Dst& dst, const Src& src)
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
  call_assignment(dst, src, internal::assign_op<typename Dst::Scalar,typename Src::Scalar>());
 8006694:	f107 030c 	add.w	r3, r7, #12
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f864 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800669e:	f107 020c 	add.w	r2, r7, #12
 80066a2:	2300      	movs	r3, #0
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f8d8 	bl	800685c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <_ZN5Eigen8internal11plain_arrayIfLi9ELi0ELi0EEC1Ev>:
  plain_array()
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 80066bc:	f000 f8e6 	bl	800688c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <_ZN5Eigen8internal11plain_arrayIfLi1ELi0ELi0EEC1Ev>:
  plain_array()
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 80066d2:	f000 f8e2 	bl	800689a <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>
  }
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <_ZN5Eigen8internal11plain_arrayIfLi3ELi0ELi0EEC1Ev>:
  plain_array()
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 80066e8:	f000 f8de 	bl	80068a8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <_ZN5Eigen8internal11plain_arrayIfLi3ELi1ELi0EEC1Ev>:
  plain_array()
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 80066fe:	f000 f8d3 	bl	80068a8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>
  }
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC T *data() { return m_data.array; }
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8006722:	b590      	push	{r4, r7, lr}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f8cf 	bl	80068d0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
 8006732:	687c      	ldr	r4, [r7, #4]
 8006734:	6838      	ldr	r0, [r7, #0]
 8006736:	f000 f8be 	bl	80068b6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800673a:	4603      	mov	r3, r0
 800673c:	2200      	movs	r2, #0
 800673e:	4619      	mov	r1, r3
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f8d0 	bl	80068e6 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}

08006750 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	2300      	movs	r3, #0
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISN_NS0_16evaluator_traitsISN_E5ShapeEEE5valueEPvE4typeE>:
}

// Deal with "assume-aliasing"
template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
{
  typename plain_matrix_type<Src>::type tmp(src);
 800678a:	f107 0314 	add.w	r3, r7, #20
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f8ba 	bl	800690a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006796:	f107 0314 	add.w	r3, r7, #20
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	4619      	mov	r1, r3
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f8c8 	bl	8006934 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80067a4:	bf00      	nop
 80067a6:	3738      	adds	r7, #56	; 0x38
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISB_NS0_16evaluator_traitsISB_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 80067ba:	f107 0314 	add.w	r3, r7, #20
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f8c8 	bl	8006956 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 80067c6:	f107 0314 	add.w	r3, r7, #20
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	4619      	mov	r1, r3
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 f8d6 	bl	8006980 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80067d4:	bf00      	nop
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXntsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:

template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if<!evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
{
  call_assignment_no_alias(dst, src, func);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f8d7 	bl	80069a2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 80067f4:	bf00      	nop
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISQ_NS0_16evaluator_traitsISQ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800680a:	f107 0314 	add.w	r3, r7, #20
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f8d7 	bl	80069c4 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006816:	f107 0314 	add.w	r3, r7, #20
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4619      	mov	r1, r3
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f8ae 	bl	8006980 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006824:	bf00      	nop
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISO_NS0_16evaluator_traitsISO_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800683a:	f107 0314 	add.w	r3, r7, #20
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	4618      	mov	r0, r3
 8006842:	f000 f8d4 	bl	80069ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006846:	f107 0314 	add.w	r3, r7, #20
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	4619      	mov	r1, r3
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f896 	bl	8006980 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006854:	bf00      	nop
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <_ZN5Eigen8internal15call_assignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_NS0_9enable_ifIXsrNS0_25evaluator_assume_aliasingISJ_NS0_16evaluator_traitsISJ_E5ShapeEEE5valueEPvE4typeE>:
void call_assignment(Dst& dst, const Src& src, const Func& func, typename enable_if< evaluator_assume_aliasing<Src>::value, void*>::type = 0)
 800685c:	b580      	push	{r7, lr}
 800685e:	b08e      	sub	sp, #56	; 0x38
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  typename plain_matrix_type<Src>::type tmp(src);
 800686a:	f107 0314 	add.w	r3, r7, #20
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 f8d1 	bl	8006a18 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>
  call_assignment_no_alias(dst, tmp, func);
 8006876:	f107 0314 	add.w	r3, r7, #20
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	4619      	mov	r1, r3
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 f858 	bl	8006934 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
}
 8006884:	bf00      	nop
 8006886:	3738      	adds	r7, #56	; 0x38
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>:
void check_static_allocation_size()
 800688c:	b480      	push	{r7}
 800688e:	af00      	add	r7, sp, #0
}
 8006890:	bf00      	nop
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <_ZN5Eigen8internal28check_static_allocation_sizeIfLi1EEEvv>:
void check_static_allocation_size()
 800689a:	b480      	push	{r7}
 800689c:	af00      	add	r7, sp, #0
}
 800689e:	bf00      	nop
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <_ZN5Eigen8internal28check_static_allocation_sizeIfLi3EEEvv>:
void check_static_allocation_size()
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b082      	sub	sp, #8
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 f8be 	bl	8006a42 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>
 80068c6:	4603      	mov	r3, r0
 80068c8:	4618      	mov	r0, r3
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	607a      	str	r2, [r7, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 80068f8:	1d3b      	adds	r3, r7, #4
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fd f82d 	bl	800395a <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS0_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS5_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEEEERKT_>:
#ifndef EIGEN_PARSED_BY_DOXYGEN

    // This constructor is for both 1x1 matrices and dynamic vectors
    template<typename T>
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    explicit Matrix(const T& x)
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
    {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd fdf3 	bl	8004502 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800691c:	f7fd fe01 	bl	8004522 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 f8a3 	bl	8006a70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
}


template<typename Dst, typename Src, typename Func>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
                      ) && int(Dst::SizeAtCompileTime) != 1
  };

  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst>::type ActualDstTypeCleaned;
  typedef typename internal::conditional<NeedToTranspose, Transpose<Dst>, Dst&>::type ActualDstType;
  ActualDstType actualDst(dst);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	617b      	str	r3, [r7, #20]
  // TODO check whether this is the right place to perform these checks:
  EIGEN_STATIC_ASSERT_LVALUE(Dst)
  EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(ActualDstTypeCleaned,Src)
  EIGEN_CHECK_BINARY_COMPATIBILIY(Func,typename ActualDstTypeCleaned::Scalar,typename Src::Scalar);

  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	6978      	ldr	r0, [r7, #20]
 800694a:	f000 f89e 	bl	8006a8a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800694e:	bf00      	nop
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
    {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4618      	mov	r0, r3
 8006964:	f7fd fe13 	bl	800458e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006968:	f7fd fe21 	bl	80045ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f000 f89d 	bl	8006ab0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	68b9      	ldr	r1, [r7, #8]
 8006994:	6978      	ldr	r0, [r7, #20]
 8006996:	f000 f898 	bl	8006aca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800699a:	bf00      	nop
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	6978      	ldr	r0, [r7, #20]
 80069b8:	f000 f89a 	bl	8006af0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 80069bc:	bf00      	nop
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS3_INS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS3_INS3_IS6_S4_Li0EEES7_Li0EEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
    {
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fd fddc 	bl	800458e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 80069d6:	f7fd fdea 	bl	80045ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 f899 	bl	8006b16 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>
    }
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS1_KNS_7ProductIS1_NS3_INS4_20scalar_difference_opIffEEKNS0_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEES1_Li0EEEEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
    {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fd fdc7 	bl	800458e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8006a00:	f7fd fdd5 	bl	80045ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f891 	bl	8006b30 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS3_INS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
    {
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fd fd6c 	bl	8004502 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8006a2a:	f7fd fd7a 	bl	8004522 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f889 	bl	8006b4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>
    }
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <_ZNK5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>:
    { }

    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f87f 	bl	8006b64 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>
 8006a66:	4603      	mov	r3, r0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f87d 	bl	8006b7c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
// both partial specialization+SFINAE without ambiguous specialization
template< typename DstXprType, typename SrcXprType, typename Functor, typename Weak>
struct Assignment<DstXprType, SrcXprType, Functor, Dense2Dense, Weak>
{
  EIGEN_DEVICE_FUNC
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
  {
#ifndef EIGEN_NO_DEBUG
    internal::check_for_aliasing(dst, src);
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f890 	bl	8006bbe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>
#endif

    call_dense_assignment_loop(dst, src, func);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 f8c4 	bl	8006c30 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEES7_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f8ef 	bl	8006ca0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f902 	bl	8006ce2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 f908 	bl	8006cf8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f932 	bl	8006d68 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f9ca 	bl	8006ea2 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEESN_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b082      	sub	sp, #8
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f9f5 	bl	8006f12 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEESL_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa09 	bl	8006f54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006b42:	bf00      	nop
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEESG_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fa1d 	bl	8006f96 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fa33 	bl	8006fd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>
 8006b72:	4603      	mov	r3, r0
    }
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS1_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS7_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006b7c:	b5b0      	push	{r4, r5, r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fe fa90 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	6838      	ldr	r0, [r7, #0]
 8006b90:	f7ff fba9 	bl	80062e6 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi0EEEE7derivedEv>
 8006b94:	4605      	mov	r5, r0
 8006b96:	f107 030c 	add.w	r3, r7, #12
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7ff fde3 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 fa27 	bl	8006ffc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fe fa7c 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006bb4:	4603      	mov	r3, r0
    }
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bdb0      	pop	{r4, r5, r7, pc}

08006bbe <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_>:
    {
    }
};

template<typename Dst, typename Src>
void check_for_aliasing(const Dst &dst, const Src &src)
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
{
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fd fd9b 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	dd08      	ble.n	8006be8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fd fd89 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	dd01      	ble.n	8006be8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2a>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x2c>
 8006be8:	2300      	movs	r3, #0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_EEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fa14 	bl	800701e <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa24 	bl	8007054 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b082      	sub	sp, #8
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ffec 	bl	8006bfe <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08c      	sub	sp, #48	; 0x30
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8006c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 f9f6 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa0d 	bl	800706c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8006c52:	f107 0320 	add.w	r3, r7, #32
 8006c56:	68f9      	ldr	r1, [r7, #12]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 f9eb 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fa50 	bl	8007104 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006c6a:	f107 0120 	add.w	r1, r7, #32
 8006c6e:	f107 0010 	add.w	r0, r7, #16
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f000 fa50 	bl	800711a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8006c7a:	f107 0310 	add.w	r3, r7, #16
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fa65 	bl	800714e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8006c84:	f107 0320 	add.w	r3, r7, #32
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff ffc4 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8006c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ffbf 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
}
 8006c98:	bf00      	nop
 8006c9a:	3728      	adds	r7, #40	; 0x28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006ca0:	b5b0      	push	{r4, r5, r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fe f862 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	6838      	ldr	r0, [r7, #0]
 8006cb4:	f7ff fb42 	bl	800633c <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE7derivedEv>
 8006cb8:	4605      	mov	r5, r0
 8006cba:	f107 030c 	add.w	r3, r7, #12
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fd51 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fa49 	bl	8007164 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fe f84e 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006cd8:	4603      	mov	r3, r0
    }
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bdb0      	pop	{r4, r5, r7, pc}

08006ce2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08c      	sub	sp, #48	; 0x30
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8006d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d08:	68b9      	ldr	r1, [r7, #8]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff fa47 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fa37 	bl	8007188 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8006d1a:	f107 0320 	add.w	r3, r7, #32
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fa3c 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fa7a 	bl	8007220 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006d32:	f107 0120 	add.w	r1, r7, #32
 8006d36:	f107 0010 	add.w	r0, r7, #16
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f000 fa7a 	bl	8007236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8006d42:	f107 0310 	add.w	r3, r7, #16
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fa8f 	bl	800726a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 8006d4c:	f107 0320 	add.w	r3, r7, #32
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fd feea 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8006d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fd fee5 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
}
 8006d60:	bf00      	nop
 8006d62:	3728      	adds	r7, #40	; 0x28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fd fcc6 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	dd08      	ble.n	8006d92 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fd fcb4 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	dd01      	ble.n	8006d92 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2a>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x2c>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa70 	bl	8007280 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fa8a 	bl	80072ca <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff ffec 	bl	8006da8 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEED1Ev>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>:
};

// This is the default evaluator implementation for products:
// It creates a temporary and call generic_product_impl
template<typename Lhs, typename Rhs, int Options, int ProductTag, typename LhsShape, typename RhsShape>
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7ff ffeb 	bl	8006dc0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff ffeb 	bl	8006dda <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffED1Ev>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff ffeb 	bl	8006df4 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff feef 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>:
  }

protected:

  // this helper permits to completely eliminate the functor if it is empty
  struct Data
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	332c      	adds	r3, #44	; 0x2c
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff ffea 	bl	8006e28 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff ffd8 	bl	8006e0e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff ffe5 	bl	8006e42 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataD1Ev>
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fa1b 	bl	80072b4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff ffe8 	bl	8006e68 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffED1Ev>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b098      	sub	sp, #96	; 0x60
 8006ea6:	af02      	add	r7, sp, #8
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8006eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 f9ee 	bl	8007296 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fa28 	bl	8007314 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8006ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ec8:	68f9      	ldr	r1, [r7, #12]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f8b2 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f917 	bl	8007104 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006edc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006ee0:	f107 0014 	add.w	r0, r7, #20
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f000 fa5e 	bl	80073a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8006eec:	f107 0314 	add.w	r3, r7, #20
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fa73 	bl	80073dc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8006ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fe8b 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8006f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff ffbf 	bl	8006e88 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>
}
 8006f0a:	bf00      	nop
 8006f0c:	3758      	adds	r7, #88	; 0x58
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS5_INS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS5_INS5_IS8_S6_Li0EEES9_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006f12:	b5b0      	push	{r4, r5, r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7fd ff29 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006f22:	4604      	mov	r4, r0
 8006f24:	6838      	ldr	r0, [r7, #0]
 8006f26:	f7ff fb0a 	bl	800653e <_ZNK5Eigen9EigenBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEEE7derivedEv>
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	f107 030c 	add.w	r3, r7, #12
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff fc18 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006f36:	f107 030c 	add.w	r3, r7, #12
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f000 fa57 	bl	80073f2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7fd ff15 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006f4a:	4603      	mov	r3, r0
    }
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bdb0      	pop	{r4, r5, r7, pc}

08006f54 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKS2_KNS_7ProductIS2_NS5_INS6_20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006f54:	b5b0      	push	{r4, r5, r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fd ff08 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006f64:	4604      	mov	r4, r0
 8006f66:	6838      	ldr	r0, [r7, #0]
 8006f68:	f7ff fb43 	bl	80065f2 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS6_NS1_INS2_20scalar_difference_opIffEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS5_IfLi1ELi3ELi1ELi1ELi3EEES6_Li0EEEEELi0EEEEEE7derivedEv>
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	f107 030c 	add.w	r3, r7, #12
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fbf7 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006f78:	f107 030c 	add.w	r3, r7, #12
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4629      	mov	r1, r5
 8006f80:	4620      	mov	r0, r4
 8006f82:	f000 fa47 	bl	8007414 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fd fef4 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8006f8c:	4603      	mov	r3, r0
    }
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bdb0      	pop	{r4, r5, r7, pc}

08006f96 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS5_INS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 8006f96:	b5b0      	push	{r4, r5, r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7fe f883 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	6838      	ldr	r0, [r7, #0]
 8006faa:	f7ff fb63 	bl	8006674 <_ZNK5Eigen9EigenBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li0EEEE7derivedEv>
 8006fae:	4605      	mov	r5, r0
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff fbd6 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fa37 	bl	8007436 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7fe f86f 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8006fce:	4603      	mov	r3, r0
    }
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bdb0      	pop	{r4, r5, r7, pc}

08006fd8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4sizeEv>:
  /** \returns the number of coefficients, which is rows()*cols().
    * \sa rows(), cols(), SizeAtCompileTime. */
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fd fd76 	bl	8004ad2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fd fd82 	bl	8004af2 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	fb04 f303 	mul.w	r3, r4, r3
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd90      	pop	{r4, r7, pc}

08006ffc <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	6978      	ldr	r0, [r7, #20]
 8007012:	f000 fa3c 	bl	800748e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8007016:	bf00      	nop
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Lb0EE3runERKS3_S6_>:
    static void run(const Derived&, const OtherDerived&)
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
    }
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fa5c 	bl	8007502 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
  { }
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	4618      	mov	r0, r3
 800707c:	f7fd fb43 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007080:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4618      	mov	r0, r3
 8007086:	f7fd fb33 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800708a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4618      	mov	r0, r3
 8007090:	f7fd fb39 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007094:	4602      	mov	r2, r0
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	4293      	cmp	r3, r2
 800709a:	d107      	bne.n	80070ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fd fb26 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d001      	beq.n	80070b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 80070b0:	2300      	movs	r3, #0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	6979      	ldr	r1, [r7, #20]
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 fa3b 	bl	8007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fd fb1e 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80070ca:	4602      	mov	r2, r0
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d107      	bne.n	80070e2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fd fb0b 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80070da:	4602      	mov	r2, r0
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	4293      	cmp	r3, r2
 80070e0:	d006      	beq.n	80070f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 80070e2:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80070e4:	4a05      	ldr	r2, [pc, #20]	; (80070fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80070e6:	f240 21fd 	movw	r1, #765	; 0x2fd
 80070ea:	4805      	ldr	r0, [pc, #20]	; (8007100 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 80070ec:	f016 fc8a 	bl	801da04 <__assert_func>
}
 80070f0:	bf00      	nop
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	08021ee4 	.word	0x08021ee4
 80070fc:	08021f14 	.word	0x08021f14
 8007100:	08021ff8 	.word	0x08021ff8

08007104 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	609a      	str	r2, [r3, #8]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	60da      	str	r2, [r3, #12]
  }
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa20 	bl	800759c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>
  }
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	6978      	ldr	r0, [r7, #20]
 800717a:	f000 fa3a 	bl	80075f2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 800717e:	bf00      	nop
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4618      	mov	r0, r3
 8007198:	f7fd fb5b 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800719c:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fd fb4b 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80071a6:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fd fb51 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80071b0:	4602      	mov	r2, r0
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d107      	bne.n	80071c8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fd fb3e 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d001      	beq.n	80071cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 80071c8:	2301      	movs	r3, #1
 80071ca:	e000      	b.n	80071ce <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 80071cc:	2300      	movs	r3, #0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	6979      	ldr	r1, [r7, #20]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fa45 	bl	8007668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fd fb36 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80071e6:	4602      	mov	r2, r0
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d107      	bne.n	80071fe <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fd fb23 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d006      	beq.n	800720c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8007200:	4a05      	ldr	r2, [pc, #20]	; (8007218 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007202:	f240 21fd 	movw	r1, #765	; 0x2fd
 8007206:	4805      	ldr	r0, [pc, #20]	; (800721c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 8007208:	f016 fbfc 	bl	801da04 <__assert_func>
}
 800720c:	bf00      	nop
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	08021ee4 	.word	0x08021ee4
 8007218:	08022054 	.word	0x08022054
 800721c:	08021ff8 	.word	0x08021ff8

08007220 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	605a      	str	r2, [r3, #4]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	609a      	str	r2, [r3, #8]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	60da      	str	r2, [r3, #12]
  }
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa2a 	bl	80076cc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>
  }
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EELb0EE3runERSD_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
    }
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1ERKSE_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 fa20 	bl	80076ea <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4618      	mov	r0, r3
 80072c0:	370c      	adds	r7, #12
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>:
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fd ffc6 	bl	800527c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80072f0:	4603      	mov	r3, r0
    }
 80072f2:	4618      	mov	r0, r3
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4618      	mov	r0, r3
 8007306:	f7fd ffc6 	bl	8005296 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 800730a:	4603      	mov	r3, r0
    }
 800730c:	4618      	mov	r0, r3
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8007320:	68b8      	ldr	r0, [r7, #8]
 8007322:	f7ff ffdd 	bl	80072e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4rowsEv>
 8007326:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	f7ff ffe6 	bl	80072fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E4colsEv>
 800732e:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4618      	mov	r0, r3
 8007334:	f7fd f9e7 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007338:	4602      	mov	r2, r0
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	4293      	cmp	r3, r2
 800733e:	d107      	bne.n	8007350 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4618      	mov	r0, r3
 8007344:	f7fd f9d4 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	4293      	cmp	r3, r2
 800734e:	d001      	beq.n	8007354 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8007354:	2300      	movs	r3, #0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	6979      	ldr	r1, [r7, #20]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 f8e9 	bl	8007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4618      	mov	r0, r3
 800736a:	f7fd f9cc 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800736e:	4602      	mov	r2, r0
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	4293      	cmp	r3, r2
 8007374:	d107      	bne.n	8007386 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4618      	mov	r0, r3
 800737a:	f7fd f9b9 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4293      	cmp	r3, r2
 8007384:	d006      	beq.n	8007394 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8007388:	4a05      	ldr	r2, [pc, #20]	; (80073a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800738a:	f240 21fd 	movw	r1, #765	; 0x2fd
 800738e:	4805      	ldr	r0, [pc, #20]	; (80073a4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_IS3_S3_Li0EEENS_9TransposeIS3_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8007390:	f016 fb38 	bl	801da04 <__assert_func>
}
 8007394:	bf00      	nop
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	08021ee4 	.word	0x08021ee4
 80073a0:	08022138 	.word	0x08022138
 80073a4:	08021ff8 	.word	0x08021ff8

080073a8 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	609a      	str	r2, [r3, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	60da      	str	r2, [r3, #12]
  }
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f992 	bl	800770e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b086      	sub	sp, #24
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	6978      	ldr	r0, [r7, #20]
 8007408:	f000 f9ac 	bl	8007764 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 800740c:	bf00      	nop
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKS3_KNS_7ProductIS3_NS4_INS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	6978      	ldr	r0, [r7, #20]
 800742a:	f000 f9d5 	bl	80077d8 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>
}
 800742e:	bf00      	nop
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007436:	b580      	push	{r7, lr}
 8007438:	b086      	sub	sp, #24
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68b9      	ldr	r1, [r7, #8]
 800744a:	6978      	ldr	r0, [r7, #20]
 800744c:	f000 fa09 	bl	8007862 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007450:	bf00      	nop
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>:
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4618      	mov	r0, r3
 8007464:	f000 fa37 	bl	80078d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8007468:	4603      	mov	r3, r0
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3310      	adds	r3, #16
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fa37 	bl	80078f2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007484:	4603      	mov	r3, r0
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
struct Assignment<DstXprType, Product<Lhs,Rhs,Options>, internal::assign_op<Scalar,Scalar>, Dense2Dense,
  typename enable_if<(Options==DefaultProduct || Options==AliasFreeProduct)>::type>
{
  typedef Product<Lhs,Rhs,Options> SrcXprType;
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800748e:	b590      	push	{r4, r7, lr}
 8007490:	b087      	sub	sp, #28
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
  {
    Index dstRows = src.rows();
 800749a:	68b8      	ldr	r0, [r7, #8]
 800749c:	f7ff ffdc 	bl	8007458 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4rowsEv>
 80074a0:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 80074a2:	68b8      	ldr	r0, [r7, #8]
 80074a4:	f7ff ffe5 	bl	8007472 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE4colsEv>
 80074a8:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fd f92a 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80074b2:	4602      	mov	r2, r0
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d107      	bne.n	80074ca <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fd f917 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d001      	beq.n	80074ce <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e000      	b.n	80074d0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 80074ce:	2300      	movs	r3, #0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	6979      	ldr	r1, [r7, #20]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f82c 	bl	8007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    // FIXME shall we handle nested_eval here?
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f000 fa14 	bl	800790e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>
 80074e6:	4604      	mov	r4, r0
 80074e8:	68b8      	ldr	r0, [r7, #8]
 80074ea:	f000 fa1b 	bl	8007924 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>
 80074ee:	4603      	mov	r3, r0
 80074f0:	461a      	mov	r2, r3
 80074f2:	4621      	mov	r1, r4
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 fa21 	bl	800793c <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>
  }
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd90      	pop	{r4, r7, pc}

08007502 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8007502:	b5b0      	push	{r4, r5, r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fa50 	bl	80079b2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
 8007512:	687c      	ldr	r4, [r7, #4]
 8007514:	6838      	ldr	r0, [r7, #0]
 8007516:	f000 fa2f 	bl	8007978 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800751a:	4605      	mov	r5, r0
 800751c:	6838      	ldr	r0, [r7, #0]
 800751e:	f000 fa38 	bl	8007992 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>
 8007522:	4603      	mov	r3, r0
 8007524:	461a      	mov	r2, r3
 8007526:	4629      	mov	r1, r5
 8007528:	4620      	mov	r0, r4
 800752a:	f000 fa4d 	bl	80079c8 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bdb0      	pop	{r4, r5, r7, pc}

08007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	2b03      	cmp	r3, #3
 8007548:	d108      	bne.n	800755c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d105      	bne.n	800755c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	db02      	blt.n	800755c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x24>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	da06      	bge.n	800756a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x32>
 800755c:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x58>)
 800755e:	4a0d      	ldr	r2, [pc, #52]	; (8007594 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x5c>)
 8007560:	f240 1111 	movw	r1, #273	; 0x111
 8007564:	480c      	ldr	r0, [pc, #48]	; (8007598 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii+0x60>)
 8007566:	f016 fa4d 	bl	801da04 <__assert_func>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	613b      	str	r3, [r7, #16]
  }
 8007572:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	fb02 f103 	mul.w	r1, r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	f000 fa33 	bl	80079ec <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>
    }
 8007586:	bf00      	nop
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	080222fc 	.word	0x080222fc
 8007594:	0802248c 	.word	0x0802248c
 8007598:	08022518 	.word	0x08022518

0800759c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80075a4:	2100      	movs	r1, #0
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa2d 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa48 	bl	8007a42 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>
  }
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fd f89d 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80075cc:	4603      	mov	r3, r0
 80075ce:	4618      	mov	r0, r3
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fd f92a 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80075e8:	4603      	mov	r3, r0
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 80075f2:	b590      	push	{r4, r7, lr}
 80075f4:	b087      	sub	sp, #28
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 80075fe:	68b8      	ldr	r0, [r7, #8]
 8007600:	f7ff ffdb 	bl	80075ba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 8007604:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007606:	68b8      	ldr	r0, [r7, #8]
 8007608:	f7ff ffe5 	bl	80075d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800760c:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fd f91e 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007616:	4602      	mov	r2, r0
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	4293      	cmp	r3, r2
 800761c:	d107      	bne.n	800762e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x3c>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4618      	mov	r0, r3
 8007622:	f7fd f90b 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007626:	4602      	mov	r2, r0
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4293      	cmp	r3, r2
 800762c:	d001      	beq.n	8007632 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x40>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x42>
 8007632:	2300      	movs	r3, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_+0x52>
      dst.resize(dstRows, dstCols);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	6979      	ldr	r1, [r7, #20]
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f812 	bl	8007668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 8007644:	68b8      	ldr	r0, [r7, #8]
 8007646:	f000 fa0b 	bl	8007a60 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800764a:	4604      	mov	r4, r0
 800764c:	68b8      	ldr	r0, [r7, #8]
 800764e:	f000 fa13 	bl	8007a78 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 8007652:	4603      	mov	r3, r0
 8007654:	461a      	mov	r2, r3
 8007656:	4621      	mov	r1, r4
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fa19 	bl	8007a90 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>
  }
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	bd90      	pop	{r4, r7, pc}
	...

08007668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b03      	cmp	r3, #3
 8007678:	d108      	bne.n	800768c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d105      	bne.n	800768c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	db02      	blt.n	800768c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x24>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	da06      	bge.n	800769a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x32>
 800768c:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x58>)
 800768e:	4a0d      	ldr	r2, [pc, #52]	; (80076c4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x5c>)
 8007690:	f240 1111 	movw	r1, #273	; 0x111
 8007694:	480c      	ldr	r0, [pc, #48]	; (80076c8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii+0x60>)
 8007696:	f016 f9b5 	bl	801da04 <__assert_func>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	617b      	str	r3, [r7, #20]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	613b      	str	r3, [r7, #16]
  }
 80076a2:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	fb02 f103 	mul.w	r1, r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	f000 fa0b 	bl	8007acc <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>
    }
 80076b6:	bf00      	nop
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	080222fc 	.word	0x080222fc
 80076c4:	08022574 	.word	0x08022574
 80076c8:	08022518 	.word	0x08022518

080076cc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80076d4:	2100      	movs	r1, #0
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa05 	bl	8007ae6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa20 	bl	8007b22 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>
  }
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffEC1ERKSE_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fa23 	bl	8007b40 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fa29 	bl	8007b56 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>
  }
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa43 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fa59 	bl	8007bd8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fa5d 	bl	8007bf8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800773e:	4603      	mov	r3, r0
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3308      	adds	r3, #8
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fa5d 	bl	8007c14 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800775a:	4603      	mov	r3, r0
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007764:	b590      	push	{r4, r7, lr}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 8007770:	68b8      	ldr	r0, [r7, #8]
 8007772:	f7ff ffdc 	bl	800772e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4rowsEv>
 8007776:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007778:	68b8      	ldr	r0, [r7, #8]
 800777a:	f7ff ffe5 	bl	8007748 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE4colsEv>
 800777e:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4618      	mov	r0, r3
 8007784:	f7fd f865 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007788:	4602      	mov	r2, r0
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	4293      	cmp	r3, r2
 800778e:	d107      	bne.n	80077a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x3c>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4618      	mov	r0, r3
 8007794:	f7fd f852 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8007798:	4602      	mov	r2, r0
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	4293      	cmp	r3, r2
 800779e:	d001      	beq.n	80077a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x40>
 80077a0:	2301      	movs	r3, #1
 80077a2:	e000      	b.n	80077a6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x42>
 80077a4:	2300      	movs	r3, #0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_+0x52>
      dst.resize(dstRows, dstCols);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff ff59 	bl	8007668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80077b6:	68b8      	ldr	r0, [r7, #8]
 80077b8:	f000 fa39 	bl	8007c2e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>
 80077bc:	4604      	mov	r4, r0
 80077be:	68b8      	ldr	r0, [r7, #8]
 80077c0:	f000 fa40 	bl	8007c44 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>
 80077c4:	4603      	mov	r3, r0
 80077c6:	461a      	mov	r2, r3
 80077c8:	4621      	mov	r1, r4
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 fa46 	bl	8007c5c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>
  }
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd90      	pop	{r4, r7, pc}

080077d8 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_9assign_opIffEENS0_13add_assign_opIffEEE3runINS5_INS0_13scalar_sum_opIffEEKS3_KSE_EESG_EEvRS3_RKT_RKT0_>:
template<typename DstXprType, typename OtherXpr, typename ProductType, typename Func1, typename Func2>
struct assignment_from_xpr_op_product
{
  template<typename SrcXprType, typename InitialFunc>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 80077d8:	b590      	push	{r4, r7, lr}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
  {
    call_assignment_no_alias(dst, src.lhs(), Func1());
 80077e4:	68b8      	ldr	r0, [r7, #8]
 80077e6:	f000 fa57 	bl	8007c98 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>
 80077ea:	4604      	mov	r4, r0
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe ffb8 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80077f6:	f107 0310 	add.w	r3, r7, #16
 80077fa:	461a      	mov	r2, r3
 80077fc:	4621      	mov	r1, r4
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff f8be 	bl	8006980 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	f000 fa53 	bl	8007cb0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>
 800780a:	4604      	mov	r4, r0
 800780c:	f107 0314 	add.w	r3, r7, #20
 8007810:	4618      	mov	r0, r3
 8007812:	f000 fa59 	bl	8007cc8 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 8007816:	f107 0314 	add.w	r3, r7, #20
 800781a:	461a      	mov	r2, r3
 800781c:	4621      	mov	r1, r4
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 fa5d 	bl	8007cde <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	bd90      	pop	{r4, r7, pc}

0800782c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fa62 	bl	8007d00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 800783c:	4603      	mov	r3, r0
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	4618      	mov	r0, r3
 8007854:	f7fc ff4c 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007858:	4603      	mov	r3, r0
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 8007862:	b590      	push	{r4, r7, lr}
 8007864:	b087      	sub	sp, #28
 8007866:	af00      	add	r7, sp, #0
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800786e:	68b8      	ldr	r0, [r7, #8]
 8007870:	f7ff ffdc 	bl	800782c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4rowsEv>
 8007874:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 8007876:	68b8      	ldr	r0, [r7, #8]
 8007878:	f7ff ffe5 	bl	8007846 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE4colsEv>
 800787c:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4618      	mov	r0, r3
 8007882:	f7fc ff40 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007886:	4602      	mov	r2, r0
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	4293      	cmp	r3, r2
 800788c:	d107      	bne.n	800789e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x3c>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4618      	mov	r0, r3
 8007892:	f7fc ff2d 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	4293      	cmp	r3, r2
 800789c:	d001      	beq.n	80078a2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x40>
 800789e:	2301      	movs	r3, #1
 80078a0:	e000      	b.n	80078a4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x42>
 80078a2:	2300      	movs	r3, #0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x52>
      dst.resize(dstRows, dstCols);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	6979      	ldr	r1, [r7, #20]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fe42 	bl	8007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 80078b4:	68b8      	ldr	r0, [r7, #8]
 80078b6:	f000 fa31 	bl	8007d1c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>
 80078ba:	4604      	mov	r4, r0
 80078bc:	68b8      	ldr	r0, [r7, #8]
 80078be:	f000 fa38 	bl	8007d32 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>
 80078c2:	4603      	mov	r3, r0
 80078c4:	461a      	mov	r2, r3
 80078c6:	4621      	mov	r1, r4
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fa3e 	bl	8007d4a <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>
  }
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd90      	pop	{r4, r7, pc}

080078d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fc ffb5 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80078e8:	4603      	mov	r3, r0
    }
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fc ffa7 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8007904:	4603      	mov	r3, r0
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3310      	adds	r3, #16
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EENS_10DenseShapeESG_Li3EE6evalToINS5_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKSD_RKSF_>:
struct generic_product_impl<Lhs,Rhs,DenseShape,DenseShape,CoeffBasedProductMode>
{
  typedef typename Product<Lhs,Rhs>::Scalar Scalar;

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
  {
    // Same as: dst.noalias() = lhs.lazyProduct(rhs);
    // but easier on the compiler side
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007948:	f107 0310 	add.w	r3, r7, #16
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	68b9      	ldr	r1, [r7, #8]
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fa18 	bl	8007d86 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>
 8007956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe ff03 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007960:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007964:	f107 0310 	add.w	r3, r7, #16
 8007968:	4619      	mov	r1, r3
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fa22 	bl	8007db4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007970:	bf00      	nop
 8007972:	3728      	adds	r7, #40	; 0x28
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fa27 	bl	8007dd6 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>
 8007988:	4603      	mov	r3, r0
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3EE11outerStrideEv>:
      *          in a column-major matrix).
      *
      * \sa innerStride(), rowStride(), colStride()
      */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index outerStride() const EIGEN_NOEXCEPT
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
    {
      return derived().outerStride();
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fd fabd 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80079a0:	4603      	mov	r3, r0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fa22 	bl	8007dec <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80079a8:	4603      	mov	r3, r0
    }
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>:
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	601a      	str	r2, [r3, #0]
    EIGEN_UNUSED_VARIABLE(outerStride);
 80079da:	1d3b      	adds	r3, r7, #4
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fb ffbc 	bl	800395a <_ZN5Eigen8internal22ignore_unused_variableIiEEvRKT_>
  }
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
 80079fa:	bf00      	nop
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8007a06:	b5b0      	push	{r4, r5, r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689c      	ldr	r4, [r3, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 f9f2 	bl	8007e04 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>
 8007a20:	4605      	mov	r5, r0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 f9fb 	bl	8007e24 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	461a      	mov	r2, r3
 8007a32:	4629      	mov	r1, r5
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 fa05 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8007a3a:	bf00      	nop
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bdb0      	pop	{r4, r5, r7, pc}

08007a42 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ffda 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fa06 	bl	8007e64 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>
  }
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li3EE6evalToIS4_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007a9c:	f107 0314 	add.w	r3, r7, #20
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 f9ec 	bl	8007e82 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 8007aaa:	f107 031c 	add.w	r3, r7, #28
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fe59 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007ab4:	f107 021c 	add.w	r2, r7, #28
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	4619      	mov	r1, r3
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f9f6 	bl	8007eb0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007ac4:	bf00      	nop
 8007ac6:	3720      	adds	r7, #32
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <_ZN5Eigen12DenseStorageIfLi3ELi3ELi1ELi0EE6resizeEiii>:
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8007ae6:	b5b0      	push	{r4, r5, r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689c      	ldr	r4, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f9e9 	bl	8007ed2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8007b00:	4605      	mov	r5, r0
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 f9f2 	bl	8007ef2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	461a      	mov	r2, r3
 8007b12:	4629      	mov	r1, r5
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 f995 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bdb0      	pop	{r4, r5, r7, pc}

08007b22 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ffda 	bl	8007ae6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9ed 	bl	8007f12 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>
  }
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4DataC1ERKSE_>:
  {
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8007b56:	b590      	push	{r4, r7, lr}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
 8007b60:	687c      	ldr	r4, [r7, #4]
 8007b62:	6838      	ldr	r0, [r7, #0]
 8007b64:	f000 f9e4 	bl	8007f30 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f7fd fbe1 	bl	8005334 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	1d1c      	adds	r4, r3, #4
 8007b76:	6838      	ldr	r0, [r7, #0]
 8007b78:	f000 f9e6 	bl	8007f48 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 f9f8 	bl	8007f76 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8007b8c:	6838      	ldr	r0, [r7, #0]
 8007b8e:	f000 f9e6 	bl	8007f5e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>
 8007b92:	4603      	mov	r3, r0
 8007b94:	4619      	mov	r1, r3
 8007b96:	4620      	mov	r0, r4
 8007b98:	f000 f9fc 	bl	8007f94 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd90      	pop	{r4, r7, pc}

08007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b086      	sub	sp, #24
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8007bb2:	6879      	ldr	r1, [r7, #4]
 8007bb4:	68b8      	ldr	r0, [r7, #8]
 8007bb6:	f000 f9fc 	bl	8007fb2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8007bba:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	68b8      	ldr	r0, [r7, #8]
 8007bc0:	f000 fa03 	bl	8007fca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8007bc4:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	6979      	ldr	r1, [r7, #20]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fa09 	bl	8007fe2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8007bd0:	bf00      	nop
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8007be0:	2201      	movs	r2, #1
 8007be2:	2100      	movs	r1, #0
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ffde 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa1f 	bl	800802e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 8007bf0:	bf00      	nop
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fc fd7e 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>:
  EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR  Index cols() const EIGEN_NOEXCEPT { return m_xpr.rows(); }
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fd fdc3 	bl	80057aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8007c24:	4603      	mov	r3, r0
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3308      	adds	r3, #8
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEENS_10DenseShapeESK_Li3EE6evalToINS3_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS8_RKSJ_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08c      	sub	sp, #48	; 0x30
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007c68:	f107 0310 	add.w	r3, r7, #16
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f9ec 	bl	800804e <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>
 8007c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fd73 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007c80:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007c84:	f107 0310 	add.w	r3, r7, #16
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 f9f6 	bl	800807c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007c90:	bf00      	nop
 8007c92:	3730      	adds	r7, #48	; 0x30
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_7ProductIS5_NS0_INS1_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with addition
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	6978      	ldr	r0, [r7, #20]
 8007cf4:	f000 f9d4 	bl	80080a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8007cf8:	bf00      	nop
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fc fcfa 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8007d12:	4603      	mov	r3, r0
    }
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8007d32:	b480      	push	{r7}
 8007d34:	b083      	sub	sp, #12
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <_ZN5Eigen8internal20generic_product_implINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_NS_10DenseShapeESE_Li3EE6evalToIS6_EEvRT_RKSD_RS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b08a      	sub	sp, #40	; 0x28
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 f9d8 	bl	8008114 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>
 8007d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe fcfc 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8007d6e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007d72:	f107 0310 	add.w	r3, r7, #16
 8007d76:	4619      	mov	r1, r3
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f9e2 	bl	8008142 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8007d7e:	bf00      	nop
 8007d80:	3728      	adds	r7, #40	; 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE11lazyProductINS_9TransposeIS6_EEEEKNS_7ProductISD_T_Li1EEERKNS0_ISJ_EE>:
  */
template<typename Derived>
template<typename OtherDerived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
const Product<Derived,OtherDerived,LazyProduct>
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8007d86:	b590      	push	{r4, r7, lr}
 8007d88:	b085      	sub	sp, #20
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
    INVALID_VECTOR_VECTOR_PRODUCT__IF_YOU_WANTED_A_DOT_OR_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTIONS)
  EIGEN_STATIC_ASSERT(ProductIsValid || !(SameSizes && !AreVectors),
    INVALID_MATRIX_PRODUCT__IF_YOU_WANTED_A_COEFF_WISE_PRODUCT_YOU_MUST_USE_THE_EXPLICIT_FUNCTION)
  EIGEN_STATIC_ASSERT(ProductIsValid || SameSizes, INVALID_MATRIX_PRODUCT)

  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8007d92:	68b8      	ldr	r0, [r7, #8]
 8007d94:	f7fd f821 	bl	8004dda <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 8007d98:	4604      	mov	r4, r0
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7fd f828 	bl	8004df0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 8007da0:	4603      	mov	r3, r0
 8007da2:	461a      	mov	r2, r3
 8007da4:	4621      	mov	r1, r4
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fa00 	bl	80081ac <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>
}
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd90      	pop	{r4, r7, pc}

08007db4 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	6978      	ldr	r0, [r7, #20]
 8007dca:	f000 fa1f 	bl	800820c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>:
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fa1c 	bl	8008232 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
  }
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
  }
 8007e38:	4618      	mov	r0, r3
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	bf00      	nop
 8007e5a:	3714      	adds	r7, #20
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007e6c:	2102      	movs	r1, #2
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff fdc9 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f9e8 	bl	800824a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>
  }
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS1_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8007e82:	b590      	push	{r4, r7, lr}
 8007e84:	b085      	sub	sp, #20
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8007e8e:	68b8      	ldr	r0, [r7, #8]
 8007e90:	f7fd f843 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 8007e94:	4604      	mov	r4, r0
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fc fe77 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fa04 	bl	80082b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>
}
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd90      	pop	{r4, r7, pc}

08007eb0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	6978      	ldr	r0, [r7, #20]
 8007ec6:	f000 fa21 	bl	800830c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8007eca:	bf00      	nop
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
  }
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
  }
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi2ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8007f1a:	2102      	movs	r1, #2
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fde2 	bl	8007ae6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fa05 	bl	8008332 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>
  }
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3310      	adds	r3, #16
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES6_Li0EEENS_9TransposeIS6_EELi0EEEKS6_E3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f9de 	bl	8008346 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERS4_>:
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff f846 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	6039      	str	r1, [r7, #0]
      : inner;
 8007fbc:	683b      	ldr	r3, [r7, #0]
  }
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
      : outer;
 8007fd4:	687b      	ldr	r3, [r7, #4]
  }
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8007fe2:	b5b0      	push	{r4, r5, r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	689c      	ldr	r4, [r3, #8]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	68b9      	ldr	r1, [r7, #8]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f9b2 	bl	8008364 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8008000:	4605      	mov	r5, r0
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f9c2 	bl	8008394 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>
 8008010:	eef0 7a40 	vmov.f32	s15, s0
 8008014:	edc7 7a05 	vstr	s15, [r7, #20]
 8008018:	f107 0314 	add.w	r3, r7, #20
 800801c:	461a      	mov	r2, r3
 800801e:	4629      	mov	r1, r5
 8008020:	4620      	mov	r0, r4
 8008022:	f7ff ff0f 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8008026:	bf00      	nop
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bdb0      	pop	{r4, r5, r7, pc}

0800802e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008036:	2202      	movs	r2, #2
 8008038:	2100      	movs	r1, #0
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff fdb3 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f9ce 	bl	80083e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE11lazyProductINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEEEEKNS1_IS7_T_Li1EEERKNS0_ISM_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800804e:	b590      	push	{r4, r7, lr}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800805a:	68b8      	ldr	r0, [r7, #8]
 800805c:	f7fd fbe9 	bl	8005832 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 8008060:	4604      	mov	r4, r0
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7fd fbf0 	bl	8005848 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 8008068:	4603      	mov	r3, r0
 800806a:	461a      	mov	r2, r3
 800806c:	4621      	mov	r1, r4
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f9ec 	bl	800844c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>
}
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	bd90      	pop	{r4, r7, pc}

0800807c <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	68b9      	ldr	r1, [r7, #8]
 8008090:	6978      	ldr	r0, [r7, #20]
 8008092:	f000 fa0d 	bl	80084b0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>
}
 8008096:	bf00      	nop
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,Scalar> &)
 80080a0:	b590      	push	{r4, r7, lr}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fc fbcf 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80080b4:	4604      	mov	r4, r0
 80080b6:	68b8      	ldr	r0, [r7, #8]
 80080b8:	f7fd fdd7 	bl	8005c6a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4rowsEv>
 80080bc:	4603      	mov	r3, r0
 80080be:	429c      	cmp	r4, r3
 80080c0:	d10a      	bne.n	80080d8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x38>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fc fbb9 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80080ca:	4604      	mov	r4, r0
 80080cc:	68b8      	ldr	r0, [r7, #8]
 80080ce:	f7fd fdda 	bl	8005c86 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE4colsEv>
 80080d2:	4603      	mov	r3, r0
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d005      	beq.n	80080e4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x44>
 80080d8:	4b0b      	ldr	r3, [pc, #44]	; (8008108 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x68>)
 80080da:	4a0c      	ldr	r2, [pc, #48]	; (800810c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x6c>)
 80080dc:	21a1      	movs	r1, #161	; 0xa1
 80080de:	480c      	ldr	r0, [pc, #48]	; (8008110 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi0EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_+0x70>)
 80080e0:	f015 fc90 	bl	801da04 <__assert_func>
    generic_product_impl<Lhs, Rhs>::addTo(dst, src.lhs(), src.rhs());
 80080e4:	68b8      	ldr	r0, [r7, #8]
 80080e6:	f000 f9f6 	bl	80084d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>
 80080ea:	4604      	mov	r4, r0
 80080ec:	68b8      	ldr	r0, [r7, #8]
 80080ee:	f000 f9fe 	bl	80084ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>
 80080f2:	4603      	mov	r3, r0
 80080f4:	461a      	mov	r2, r3
 80080f6:	4621      	mov	r1, r4
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fa04 	bl	8008506 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>
  }
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	bd90      	pop	{r4, r7, pc}
 8008106:	bf00      	nop
 8008108:	08022600 	.word	0x08022600
 800810c:	08022638 	.word	0x08022638
 8008110:	08022af8 	.word	0x08022af8

08008114 <_ZNK5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE11lazyProductIS6_EEKNS8_ISD_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	f7fd feed 	bl	8005f00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 8008126:	4604      	mov	r4, r0
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7fc fef6 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
 8008132:	4621      	mov	r1, r4
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 fa29 	bl	800858c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>
}
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	bd90      	pop	{r4, r7, pc}

08008142 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008142:	b580      	push	{r7, lr}
 8008144:	b086      	sub	sp, #24
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	6978      	ldr	r0, [r7, #20]
 8008158:	f000 fa46 	bl	80085e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 800815c:	bf00      	nop
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fa4e 	bl	800860e <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>:
class dense_product_base
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff ffed 	bl	8008164 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff ffed 	bl	800817c <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ELi4EEC1Ev>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4618      	mov	r0, r3
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80081ac:	b590      	push	{r4, r7, lr}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff ffeb 	bl	8008194 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1ENS_5DenseEEC1Ev>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	68b9      	ldr	r1, [r7, #8]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fb fe5c 	bl	8003e80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3310      	adds	r3, #16
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 80081d2:	68b8      	ldr	r0, [r7, #8]
 80081d4:	f7fc fe3b 	bl	8004e4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 80081d8:	4604      	mov	r4, r0
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fc fe45 	bl	8004e6a <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80081e0:	4603      	mov	r3, r0
 80081e2:	429c      	cmp	r4, r3
 80081e4:	d005      	beq.n	80081f2 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x46>
 80081e6:	4b06      	ldr	r3, [pc, #24]	; (8008200 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x54>)
 80081e8:	4a06      	ldr	r2, [pc, #24]	; (8008204 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x58>)
 80081ea:	2160      	movs	r1, #96	; 0x60
 80081ec:	4806      	ldr	r0, [pc, #24]	; (8008208 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EEC1ERKSD_RKSF_+0x5c>)
 80081ee:	f015 fc09 	bl	801da04 <__assert_func>
 80081f2:	bf00      	nop
    }
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd90      	pop	{r4, r7, pc}
 80081fe:	bf00      	nop
 8008200:	0801fb2c 	.word	0x0801fb2c
 8008204:	08022b58 	.word	0x08022b58
 8008208:	0801fe7c 	.word	0x0801fe7c

0800820c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fa02 	bl	8008624 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 fab3 	bl	8008790 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fae0 	bl	8008800 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008240:	4603      	mov	r3, r0
    }
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008252:	2103      	movs	r1, #3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff fbd6 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fae0 	bl	8008820 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>
  }
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fae4 	bl	800883e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>:
class dense_product_base
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff ffed 	bl	8008268 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7ff ffed 	bl	8008280 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1ELi3EEC1Ev>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80082b0:	b590      	push	{r4, r7, lr}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f7ff ffeb 	bl	8008298 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1ENS_5DenseEEC1Ev>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fc fa0d 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80082d6:	4604      	mov	r4, r0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fc fab9 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80082e0:	4603      	mov	r3, r0
 80082e2:	429c      	cmp	r4, r3
 80082e4:	d005      	beq.n	80082f2 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x42>
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x50>)
 80082e8:	4a06      	ldr	r2, [pc, #24]	; (8008304 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x54>)
 80082ea:	2160      	movs	r1, #96	; 0x60
 80082ec:	4806      	ldr	r0, [pc, #24]	; (8008308 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EEC1ERKS2_RKS3_+0x58>)
 80082ee:	f015 fb89 	bl	801da04 <__assert_func>
 80082f2:	bf00      	nop
    }
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd90      	pop	{r4, r7, pc}
 80082fe:	bf00      	nop
 8008300:	0801fb2c 	.word	0x0801fb2c
 8008304:	08022e1c 	.word	0x08022e1c
 8008308:	0801fe7c 	.word	0x0801fe7c

0800830c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 fa9a 	bl	8008854 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 fac3 	bl	80088b0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi3ELi3EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fae3 	bl	8008920 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681c      	ldr	r4, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fb0f 	bl	800899a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800837c:	4602      	mov	r2, r0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	fb03 f202 	mul.w	r2, r3, r2
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4423      	add	r3, r4
  }
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	bd90      	pop	{r4, r7, pc}

08008394 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8008394:	b5b0      	push	{r4, r5, r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fb04 	bl	80089b0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>
 80083a8:	4604      	mov	r4, r0
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3304      	adds	r3, #4
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	68b9      	ldr	r1, [r7, #8]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fb07 	bl	80089c6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>
 80083b8:	4605      	mov	r5, r0
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	332c      	adds	r3, #44	; 0x2c
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fb17 	bl	80089f6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>
 80083c8:	4603      	mov	r3, r0
 80083ca:	461a      	mov	r2, r3
 80083cc:	4629      	mov	r1, r5
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 fb29 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 80083d4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80083d8:	eeb0 0a67 	vmov.f32	s0, s15
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bdb0      	pop	{r4, r5, r7, pc}

080083e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80083ea:	2200      	movs	r2, #0
 80083ec:	2101      	movs	r1, #1
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff fbd9 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fb2b 	bl	8008a50 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fb30 	bl	8008a70 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>:
class dense_product_base
 800841a:	b580      	push	{r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff ffed 	bl	8008402 <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff ffed 	bl	800841a <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ELi4EEC1Ev>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800844c:	b590      	push	{r4, r7, lr}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f7ff ffea 	bl	8008432 <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1ENS_5DenseEEC1Ev>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008466:	e883 0003 	stmia.w	r3, {r0, r1}
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3308      	adds	r3, #8
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4618      	mov	r0, r3
 8008472:	f7fb feb9 	bl	80041e8 <_ZN5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSH_>
      eigen_assert(lhs.cols() == rhs.rows()
 8008476:	68b8      	ldr	r0, [r7, #8]
 8008478:	f7fd fa15 	bl	80058a6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800847c:	4604      	mov	r4, r0
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7fd fa1f 	bl	80058c2 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 8008484:	4603      	mov	r3, r0
 8008486:	429c      	cmp	r4, r3
 8008488:	d005      	beq.n	8008496 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x4a>
 800848a:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x58>)
 800848c:	4a06      	ldr	r2, [pc, #24]	; (80084a8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x5c>)
 800848e:	2160      	movs	r1, #96	; 0x60
 8008490:	4806      	ldr	r0, [pc, #24]	; (80084ac <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEC1ERKS6_RKSI_+0x60>)
 8008492:	f015 fab7 	bl	801da04 <__assert_func>
 8008496:	bf00      	nop
    }
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd90      	pop	{r4, r7, pc}
 80084a2:	bf00      	nop
 80084a4:	0801fb2c 	.word	0x0801fb2c
 80084a8:	08022f44 	.word	0x08022f44
 80084ac:	0801fe7c 	.word	0x0801fe7c

080084b0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSL_RKSN_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 fae1 	bl	8008a86 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fb23 	bl	8008b14 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEENS_10DenseShapeESE_Li3EE5addToIS3_EEvRT_RKS3_RKSD_>:

  template<typename Dst>
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void addTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8008506:	b580      	push	{r7, lr}
 8008508:	b08a      	sub	sp, #40	; 0x28
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	607a      	str	r2, [r7, #4]
  {
    // dst.noalias() += lhs.lazyProduct(rhs);
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::add_assign_op<typename Dst::Scalar,Scalar>());
 8008512:	f107 0310 	add.w	r3, r7, #16
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fb32 	bl	8008b84 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>
 8008520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff fbcf 	bl	8007cc8 <_ZN5Eigen8internal13add_assign_opIffEC1Ev>
 800852a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800852e:	f107 0310 	add.w	r3, r7, #16
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fb3c 	bl	8008bb2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800853a:	bf00      	nop
 800853c:	3728      	adds	r7, #40	; 0x28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fb42 	bl	8008bd4 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>:
class dense_product_base
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7ff ffed 	bl	8008542 <_ZN5Eigen10MatrixBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f7ff ffed 	bl	800855a <_ZN5Eigen8internal18dense_product_baseINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ELi3EEC1Ev>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f7ff ffea 	bl	8008572 <_ZN5Eigen11ProductImplINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1ENS_5DenseEEC1Ev>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fb ff39 	bl	800441a <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEC1ERKSC_>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	611a      	str	r2, [r3, #16]
      eigen_assert(lhs.cols() == rhs.rows()
 80085ae:	68b8      	ldr	r0, [r7, #8]
 80085b0:	f7fd fcd5 	bl	8005f5e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 80085b4:	4604      	mov	r4, r0
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fc f8a4 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80085be:	4603      	mov	r3, r0
 80085c0:	429c      	cmp	r4, r3
 80085c2:	d005      	beq.n	80085d0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x44>
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x50>)
 80085c6:	4a06      	ldr	r2, [pc, #24]	; (80085e0 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x54>)
 80085c8:	2160      	movs	r1, #96	; 0x60
 80085ca:	4806      	ldr	r0, [pc, #24]	; (80085e4 <_ZN5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EEC1ERKSC_RS7_+0x58>)
 80085cc:	f015 fa1a 	bl	801da04 <__assert_func>
 80085d0:	bf00      	nop
    }
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd90      	pop	{r4, r7, pc}
 80085dc:	0801fb2c 	.word	0x0801fb2c
 80085e0:	080232cc 	.word	0x080232cc
 80085e4:	0801fe7c 	.word	0x0801fe7c

080085e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 faf7 	bl	8008bea <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fb35 	bl	8008c70 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
    }
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4618      	mov	r0, r3
 8008632:	f7fc f868 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008636:	4603      	mov	r3, r0
 8008638:	2b01      	cmp	r3, #1
 800863a:	dd08      	ble.n	800864e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4618      	mov	r0, r3
 8008640:	f7fc f856 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008644:	4603      	mov	r3, r0
 8008646:	2b01      	cmp	r3, #1
 8008648:	dd01      	ble.n	800864e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2a>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x2c>
 800864e:	2300      	movs	r3, #0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fb42 	bl	8008ce0 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct evaluator<const T>
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4618      	mov	r0, r3
 8008670:	f7fc fa5b 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fb5a 	bl	8008d40 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<const T>
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff ffec 	bl	800867e <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3308      	adds	r3, #8
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff ffea 	bl	8008696 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3304      	adds	r3, #4
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff ffcc 	bl	8008664 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff ffe5 	bl	80086b0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fb1f 	bl	8008d2a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b082      	sub	sp, #8
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4618      	mov	r0, r3
 8008702:	f7ff ffe8 	bl	80086d6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffED1Ev>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4618      	mov	r0, r3
 800871c:	f7fc fa05 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fb18 	bl	8008d56 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff ffe8 	bl	8008710 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfED1Ev>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>:

template<int StorageOrder, int UnrollingIndex, typename Lhs, typename Rhs, typename Packet, int LoadMode>
struct etor_product_packet_impl;

template<typename Lhs, typename Rhs, int ProductTag>
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3324      	adds	r3, #36	; 0x24
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff ffea 	bl	8008730 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3314      	adds	r3, #20
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff ffc8 	bl	80086f6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fad4 	bl	8008d14 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff ffe2 	bl	800874a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffED1Ev>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008790:	b580      	push	{r7, lr}
 8008792:	b096      	sub	sp, #88	; 0x58
 8008794:	af02      	add	r7, sp, #8
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800879c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a0:	68b9      	ldr	r1, [r7, #8]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 faa7 	bl	8008cf6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>
  resize_if_allowed(dst, src, func);
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 faf9 	bl	8008da4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80087b2:	f107 0320 	add.w	r3, r7, #32
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fc3b 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7fe fca0 	bl	8007104 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80087ca:	f107 0120 	add.w	r1, r7, #32
 80087ce:	f107 0010 	add.w	r0, r7, #16
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f000 fb2f 	bl	8008e38 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80087da:	f107 0310 	add.w	r3, r7, #16
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fb44 	bl	8008e6c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>
  DstEvaluatorType dstEvaluator(dst);
 80087e4:	f107 0320 	add.w	r3, r7, #32
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fe fa14 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 80087ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7ff ffbf 	bl	8008776 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>
}
 80087f8:	bf00      	nop
 80087fa:	3750      	adds	r7, #80	; 0x50
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fc fb86 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800880e:	4603      	mov	r3, r0
 8008810:	4618      	mov	r0, r3
 8008812:	f7fb ff78 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008816:	4603      	mov	r3, r0
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi4ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008828:	2104      	movs	r1, #4
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff f8eb 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fb26 	bl	8008e82 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>
  }
 8008836:	bf00      	nop
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
    }
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	330c      	adds	r3, #12
 8008876:	4618      	mov	r0, r3
 8008878:	f7fc f957 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3308      	adds	r3, #8
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe f9c8 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fb19 	bl	8008ebe <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff ffe2 	bl	800886a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b090      	sub	sp, #64	; 0x40
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80088bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 faec 	bl	8008ea0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	68b9      	ldr	r1, [r7, #8]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fb1d 	bl	8008f0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80088d2:	f107 0320 	add.w	r3, r7, #32
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fd fc60 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7fe fc9e 	bl	8007220 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80088ea:	f107 0120 	add.w	r1, r7, #32
 80088ee:	f107 0010 	add.w	r0, r7, #16
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f000 fb53 	bl	8008fa0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 80088fa:	f107 0310 	add.w	r3, r7, #16
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 fb68 	bl	8008fd4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8008904:	f107 0320 	add.w	r3, r7, #32
 8008908:	4618      	mov	r0, r3
 800890a:	f7fc f90e 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800890e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff ffbf 	bl	8008896 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>
}
 8008918:	bf00      	nop
 800891a:	3738      	adds	r7, #56	; 0x38
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi0EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 8008920:	b5b0      	push	{r4, r5, r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fb5c 	bl	8008fea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	1d1c      	adds	r4, r3, #4
 8008936:	6838      	ldr	r0, [r7, #0]
 8008938:	f7fc fca0 	bl	800527c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 800893c:	4603      	mov	r3, r0
 800893e:	60bb      	str	r3, [r7, #8]
 8008940:	6838      	ldr	r0, [r7, #0]
 8008942:	f7fc fca8 	bl	8005296 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE4colsEv>
 8008946:	4603      	mov	r3, r0
 8008948:	60fb      	str	r3, [r7, #12]
 800894a:	f107 020c 	add.w	r2, r7, #12
 800894e:	f107 0308 	add.w	r3, r7, #8
 8008952:	4619      	mov	r1, r3
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fb55 	bl	8009004 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4619      	mov	r1, r3
 800895e:	2004      	movs	r0, #4
 8008960:	f7f8 faec 	bl	8000f3c <_ZnwjPv>
 8008964:	4602      	mov	r2, r0
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3304      	adds	r3, #4
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f000 fb62 	bl	8009036 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	1d1c      	adds	r4, r3, #4
 8008976:	6838      	ldr	r0, [r7, #0]
 8008978:	f000 fb6d 	bl	8009056 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 800897c:	4605      	mov	r5, r0
 800897e:	6838      	ldr	r0, [r7, #0]
 8008980:	f000 fb74 	bl	800906c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8008984:	4603      	mov	r3, r0
 8008986:	461a      	mov	r2, r3
 8008988:	4629      	mov	r1, r5
 800898a:	4620      	mov	r0, r4
 800898c:	f000 fb7a 	bl	8009084 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>
  }
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bdb0      	pop	{r4, r5, r7, pc}

0800899a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>:
  Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	2303      	movs	r3, #3
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi0EEEKS7_EENS0_10IndexBasedESF_ffE4Data4funcEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const BinaryOp& func() const { return op; }
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4618      	mov	r0, r3
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80089c6:	b590      	push	{r4, r7, lr}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681c      	ldr	r4, [r3, #0]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff ffde 	bl	800899a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 80089de:	4602      	mov	r2, r0
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	fb03 f202 	mul.w	r2, r3, r2
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4423      	add	r3, r4
  }
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd90      	pop	{r4, r7, pc}

080089f6 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80089f6:	b590      	push	{r4, r7, lr}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681c      	ldr	r4, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff ffc6 	bl	800899a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	fb03 f202 	mul.w	r2, r3, r2
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	4413      	add	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4423      	add	r3, r4
  }
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd90      	pop	{r4, r7, pc}

08008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
 8008a26:	b480      	push	{r7}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	ed93 7a00 	vldr	s14, [r3]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	edd3 7a00 	vldr	s15, [r3]
 8008a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a42:	eeb0 0a67 	vmov.f32	s0, s15
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8008a58:	2201      	movs	r2, #1
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff f8a2 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fb2c 	bl	80090c0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS1_INS1_IS5_S3_Li0EEES6_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
    }
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fb35 	bl	8009114 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4618      	mov	r0, r3
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff ffec 	bl	8008a9c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3314      	adds	r3, #20
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff ffea 	bl	8008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3310      	adds	r3, #16
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fc f820 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fb07 	bl	80090fe <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff ffe2 	bl	8008ace <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffED1Ev>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b092      	sub	sp, #72	; 0x48
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fada 	bl	80090e0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>
  resize_if_allowed(dst, src, func);
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	68b9      	ldr	r1, [r7, #8]
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 fb15 	bl	8009160 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008b36:	f107 0320 	add.w	r3, r7, #32
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd fb2e 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7fe fb6c 	bl	8007220 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008b4e:	f107 0120 	add.w	r1, r7, #32
 8008b52:	f107 0010 	add.w	r0, r7, #16
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f000 fb4b 	bl	80091f4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008b5e:	f107 0310 	add.w	r3, r7, #16
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fb60 	bl	8009228 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>
  DstEvaluatorType dstEvaluator(dst);
 8008b68:	f107 0320 	add.w	r3, r7, #32
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fb ffdc 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff ffbf 	bl	8008afa <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>
}
 8008b7c:	bf00      	nop
 8008b7e:	3740      	adds	r7, #64	; 0x40
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEEEEKNSB_IS2_T_Li1EEERKNS0_ISG_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 8008b84:	b590      	push	{r4, r7, lr}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8008b90:	68b8      	ldr	r0, [r7, #8]
 8008b92:	f7fb fffa 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 8008b96:	4604      	mov	r4, r0
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7fc ffd5 	bl	8005b48 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fb6f 	bl	8009288 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>
}
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd90      	pop	{r4, r7, pc}

08008bb2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b086      	sub	sp, #24
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	6978      	ldr	r0, [r7, #20]
 8008bc8:	f000 fb8e 	bl	80092e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>
}
 8008bcc:	bf00      	nop
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <_ZN5Eigen9DenseBaseINS_7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS1_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
    }
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fb fd85 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	dd08      	ble.n	8008c14 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fb fd73 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	dd01      	ble.n	8008c14 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2a>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e000      	b.n	8008c16 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x2c>
 8008c14:	2300      	movs	r3, #0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fb76 	bl	800930e <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	332c      	adds	r3, #44	; 0x2c
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fd ffed 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3328      	adds	r3, #40	; 0x28
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fd ffe8 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fb7b 	bl	8009342 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff ffe2 	bl	8008c2a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffED1Ev>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b098      	sub	sp, #96	; 0x60
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8008c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 fb4e 	bl	8009324 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fb7f 	bl	8009390 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8008c92:	f107 0320 	add.w	r3, r7, #32
 8008c96:	68f9      	ldr	r1, [r7, #12]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fe f9cb 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7fe fa30 	bl	8007104 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008caa:	f107 0120 	add.w	r1, r7, #32
 8008cae:	f107 0010 	add.w	r0, r7, #16
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f000 fbb5 	bl	8009424 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8008cba:	f107 0310 	add.w	r3, r7, #16
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fbca 	bl	8009458 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8008cc4:	f107 0320 	add.w	r3, r7, #32
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fd ffa4 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8008cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff ffbf 	bl	8008c56 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>
}
 8008cd8:	bf00      	nop
 8008cda:	3758      	adds	r7, #88	; 0x58
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEELb0EE3runERKS3_RKSI_>:
    static void run(const Derived&, const OtherDerived&)
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
    }
 8008cea:	bf00      	nop
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1ERKSH_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b082      	sub	sp, #8
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fbb2 	bl	800946e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe fdad 	bl	80078d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3310      	adds	r3, #16
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fdad 	bl	80078f2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
	...

08008da4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8008db0:	68b8      	ldr	r0, [r7, #8]
 8008db2:	f7ff ffdb 	bl	8008d6c <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4rowsEv>
 8008db6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8008db8:	68b8      	ldr	r0, [r7, #8]
 8008dba:	f7ff ffe4 	bl	8008d86 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE4colsEv>
 8008dbe:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fb fc9f 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d107      	bne.n	8008de0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fb fc8c 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d001      	beq.n	8008de4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8008de0:	2301      	movs	r3, #1
 8008de2:	e000      	b.n	8008de6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8008de4:	2300      	movs	r3, #0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	6979      	ldr	r1, [r7, #20]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fba1 	bl	8007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fb fc84 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d107      	bne.n	8008e16 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fb fc71 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d006      	beq.n	8008e24 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8008e16:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8008e18:	4a05      	ldr	r2, [pc, #20]	; (8008e30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8008e1a:	f240 21fd 	movw	r1, #765	; 0x2fd
 8008e1e:	4805      	ldr	r0, [pc, #20]	; (8008e34 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS2_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEENS_9TransposeIS8_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8008e20:	f014 fdf0 	bl	801da04 <__assert_func>
}
 8008e24:	bf00      	nop
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	08021ee4 	.word	0x08021ee4
 8008e30:	08023538 	.word	0x08023538
 8008e34:	08021ff8 	.word	0x08021ff8

08008e38 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSL_RKSN_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	605a      	str	r2, [r3, #4]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	609a      	str	r2, [r3, #8]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	60da      	str	r2, [r3, #12]
  }
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fb32 	bl	80094de <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>
  }
 8008e7a:	bf00      	nop
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi5ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b082      	sub	sp, #8
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8008e8a:	2105      	movs	r1, #5
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7fe fdba 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fb33 	bl	80094fe <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>
  }
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1ERKS6_>:
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fb34 	bl	800951c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEED1Ev>:
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fb fc10 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fb fc9d 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008f02:	4603      	mov	r3, r0
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 8008f18:	68b8      	ldr	r0, [r7, #8]
 8008f1a:	f7ff ffdb 	bl	8008ed4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4rowsEv>
 8008f1e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f7ff ffe5 	bl	8008ef0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE4colsEv>
 8008f26:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fb fc91 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008f30:	4602      	mov	r2, r0
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d107      	bne.n	8008f48 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fb fc7e 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008f40:	4602      	mov	r2, r0
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d001      	beq.n	8008f4c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e000      	b.n	8008f4e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	6979      	ldr	r1, [r7, #20]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe fb85 	bl	8007668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fb fc76 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8008f66:	4602      	mov	r2, r0
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d107      	bne.n	8008f7e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fb fc63 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8008f76:	4602      	mov	r2, r0
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d006      	beq.n	8008f8c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8008f80:	4a05      	ldr	r2, [pc, #20]	; (8008f98 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8008f82:	f240 21fd 	movw	r1, #765	; 0x2fd
 8008f86:	4805      	ldr	r0, [pc, #20]	; (8008f9c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8008f88:	f014 fd3c 	bl	801da04 <__assert_func>
}
 8008f8c:	bf00      	nop
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	08021ee4 	.word	0x08021ee4
 8008f98:	08023718 	.word	0x08023718
 8008f9c:	08021ff8 	.word	0x08021ff8

08008fa0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	605a      	str	r2, [r3, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	609a      	str	r2, [r3, #8]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	69ba      	ldr	r2, [r7, #24]
 8008fc4:	60da      	str	r2, [r3, #12]
  }
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fad2 	bl	8009586 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
  evaluator() {}
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b082      	sub	sp, #8
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fad5 	bl	80095a4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <_ZN5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
    {
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fae4 	bl	80095e0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8009018:	f000 faf2 	bl	8009600 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	6819      	ldr	r1, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	2300      	movs	r3, #0
 8009028:	f000 faf1 	bl	800960e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f000 faf5 	bl	8009636 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>
  { }
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009056:	b480      	push	{r7}
 8009058:	b083      	sub	sp, #12
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3308      	adds	r3, #8
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EENS_10DenseShapeES8_Li3EE6evalToINS3_IfLi3ELi3ELi1ELi3ELi3EEEEEvRT_RKS5_RKS7_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 8009090:	f107 0310 	add.w	r3, r7, #16
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68b9      	ldr	r1, [r7, #8]
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fae7 	bl	800966c <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>
 800909e:	f107 031c 	add.w	r3, r7, #28
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fd fb5f 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 80090a8:	f107 021c 	add.w	r2, r7, #28
 80090ac:	f107 0310 	add.w	r3, r7, #16
 80090b0:	4619      	mov	r1, r3
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 faf1 	bl	800969a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 80090b8:	bf00      	nop
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80090c8:	2202      	movs	r2, #2
 80090ca:	2101      	movs	r1, #1
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7fe fd6a 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 faf2 	bl	80096bc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1ERKSK_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 faf4 	bl	80096dc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80090fe:	b480      	push	{r7}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4618      	mov	r0, r3
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fd5f 	bl	8007bf8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800913a:	4603      	mov	r3, r0
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3308      	adds	r3, #8
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe fd5f 	bl	8007c14 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 8009156:	4603      	mov	r3, r0
 8009158:	4618      	mov	r0, r3
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800916c:	68b8      	ldr	r0, [r7, #8]
 800916e:	f7ff ffdc 	bl	800912a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4rowsEv>
 8009172:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8009174:	68b8      	ldr	r0, [r7, #8]
 8009176:	f7ff ffe5 	bl	8009144 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE4colsEv>
 800917a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4618      	mov	r0, r3
 8009180:	f7fb fb67 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009184:	4602      	mov	r2, r0
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	4293      	cmp	r3, r2
 800918a:	d107      	bne.n	800919c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	4618      	mov	r0, r3
 8009190:	f7fb fb54 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009194:	4602      	mov	r2, r0
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	4293      	cmp	r3, r2
 800919a:	d001      	beq.n	80091a0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800919c:	2301      	movs	r3, #1
 800919e:	e000      	b.n	80091a2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80091a0:	2300      	movs	r3, #0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	6979      	ldr	r1, [r7, #20]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fe fa5b 	bl	8007668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fb fb4c 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 80091ba:	4602      	mov	r2, r0
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	4293      	cmp	r3, r2
 80091c0:	d107      	bne.n	80091d2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fb fb39 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80091ca:	4602      	mov	r2, r0
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d006      	beq.n	80091e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80091d2:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80091d4:	4a05      	ldr	r2, [pc, #20]	; (80091ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80091d6:	f240 21fd 	movw	r1, #765	; 0x2fd
 80091da:	4805      	ldr	r0, [pc, #20]	; (80091f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS4_INS4_IS7_S5_Li0EEES8_Li0EEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80091dc:	f014 fc12 	bl	801da04 <__assert_func>
}
 80091e0:	bf00      	nop
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	08021ee4 	.word	0x08021ee4
 80091ec:	0802382c 	.word	0x0802382c
 80091f0:	08021ff8 	.word	0x08021ff8

080091f4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSO_RKSQ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	601a      	str	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	605a      	str	r2, [r3, #4]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	609a      	str	r2, [r3, #8]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	60da      	str	r2, [r3, #12]
  }
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fa8e 	bl	8009752 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>
  }
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa92 	bl	8009770 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>:
class dense_product_base
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff ffed 	bl	800923e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f7ff ffed 	bl	8009256 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1ELi4EEC1Ev>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7ff ffea 	bl	800926e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1ENS_5DenseEEC1Ev>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3304      	adds	r3, #4
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fb f809 	bl	80042be <_ZN5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEC1ERKSC_>
      eigen_assert(lhs.cols() == rhs.rows()
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fb fac4 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 80092b4:	4604      	mov	r4, r0
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7fc fc75 	bl	8005ba6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4rowsEv>
 80092bc:	4603      	mov	r3, r0
 80092be:	429c      	cmp	r4, r3
 80092c0:	d005      	beq.n	80092ce <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x46>
 80092c2:	4b06      	ldr	r3, [pc, #24]	; (80092dc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x54>)
 80092c4:	4a06      	ldr	r2, [pc, #24]	; (80092e0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x58>)
 80092c6:	2160      	movs	r1, #96	; 0x60
 80092c8:	4806      	ldr	r0, [pc, #24]	; (80092e4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EEC1ERKS2_RKSC_+0x5c>)
 80092ca:	f014 fb9b 	bl	801da04 <__assert_func>
 80092ce:	bf00      	nop
    }
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd90      	pop	{r4, r7, pc}
 80092da:	bf00      	nop
 80092dc:	0801fb2c 	.word	0x0801fb2c
 80092e0:	08023a70 	.word	0x08023a70
 80092e4:	0801fe7c 	.word	0x0801fe7c

080092e8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSE_RKSG_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 fa45 	bl	8009786 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fa6e 	bl	80097e2 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009306:	bf00      	nop
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEELb0EE3runERS8_RKSE_>:
    static void run(const Derived&, const OtherDerived&)
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
    }
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1ERKSE_>:
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fa8d 	bl	8009852 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEED1Ev>:
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fccc 	bl	8007d00 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4rowsEv>
 8009368:	4603      	mov	r3, r0
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009372:	b580      	push	{r7, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	4618      	mov	r0, r3
 8009380:	f7fb f9b6 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009384:	4603      	mov	r3, r0
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800939c:	68b8      	ldr	r0, [r7, #8]
 800939e:	f7ff ffdb 	bl	8009358 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4rowsEv>
 80093a2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80093a4:	68b8      	ldr	r0, [r7, #8]
 80093a6:	f7ff ffe4 	bl	8009372 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE4colsEv>
 80093aa:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fb f9a9 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80093b4:	4602      	mov	r2, r0
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d107      	bne.n	80093cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fb f996 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80093c4:	4602      	mov	r2, r0
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d001      	beq.n	80093d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80093cc:	2301      	movs	r3, #1
 80093ce:	e000      	b.n	80093d2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80093d0:	2300      	movs	r3, #0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d005      	beq.n	80093e2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe f8ab 	bl	8007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fb f98e 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80093ea:	4602      	mov	r2, r0
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d107      	bne.n	8009402 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fb f97b 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80093fa:	4602      	mov	r2, r0
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	4293      	cmp	r3, r2
 8009400:	d006      	beq.n	8009410 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8009404:	4a05      	ldr	r2, [pc, #20]	; (800941c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8009406:	f240 21fd 	movw	r1, #765	; 0x2fd
 800940a:	4805      	ldr	r0, [pc, #20]	; (8009420 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS4_INS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800940c:	f014 fafa 	bl	801da04 <__assert_func>
}
 8009410:	bf00      	nop
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	08021ee4 	.word	0x08021ee4
 800941c:	08023cdc 	.word	0x08023cdc
 8009420:	08021ff8 	.word	0x08021ff8

08009424 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	605a      	str	r2, [r3, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	609a      	str	r2, [r3, #8]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	69ba      	ldr	r2, [r7, #24]
 8009448:	60da      	str	r2, [r3, #12]
  }
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa2c 	bl	80098be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>
  }
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffEC1ERKSH_>:
  typedef Product<Lhs, Rhs, LazyProduct> XprType;
  typedef typename XprType::Scalar Scalar;
  typedef typename XprType::CoeffReturnType CoeffReturnType;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
 800946e:	b590      	push	{r4, r7, lr}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
    : m_lhs(xpr.lhs()),
      m_rhs(xpr.rhs()),
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
                            //       or perhaps declare them on the fly on the packet method... We have experiment to check what's best.
      m_innerDim(xpr.lhs().cols())
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fa47 	bl	800990c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>
 800947e:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009480:	6838      	ldr	r0, [r7, #0]
 8009482:	f000 fa2c 	bl	80098de <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 8009486:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 8009488:	4619      	mov	r1, r3
 800948a:	4620      	mov	r0, r4
 800948c:	f7fa fcf8 	bl	8003e80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
      m_rhs(xpr.rhs()),
 8009490:	6838      	ldr	r0, [r7, #0]
 8009492:	f000 fa2f 	bl	80098f4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>
 8009496:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3310      	adds	r3, #16
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3314      	adds	r3, #20
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80094a4:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 80094a6:	4611      	mov	r1, r2
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 fa3a 	bl	8009922 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f103 0224 	add.w	r2, r3, #36	; 0x24
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3310      	adds	r3, #16
      m_innerDim(xpr.lhs().cols())
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f000 fa40 	bl	8009940 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>
 80094c0:	6838      	ldr	r0, [r7, #0]
 80094c2:	f000 fa0c 	bl	80098de <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>
 80094c6:	4603      	mov	r3, r0
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fb fcc0 	bl	8004e4e <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4colsEv>
 80094ce:	4602      	mov	r2, r0
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	629a      	str	r2, [r3, #40]	; 0x28
    std::cerr << "CanVectorizeInner=    " << CanVectorizeInner << "\n";
    std::cerr << "EvalToRowMajor=       " << EvalToRowMajor << "\n";
    std::cerr << "Alignment=            " << Alignment << "\n";
    std::cerr << "Flags=                " << Flags << "\n";
#endif
  }
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd90      	pop	{r4, r7, pc}

080094de <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80094e6:	2200      	movs	r2, #0
 80094e8:	2100      	movs	r1, #0
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa37 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fa4d 	bl	8009990 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>
  }
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi6ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80094fe:	b580      	push	{r7, lr}
 8009500:	b082      	sub	sp, #8
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009506:	2106      	movs	r1, #6
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7fe fa7c 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fa4e 	bl	80099b0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>
  }
 8009514:	bf00      	nop
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fa69 	bl	80099fe <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800952c:	6838      	ldr	r0, [r7, #0]
 800952e:	f000 fa4e 	bl	80099ce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 8009532:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8009538:	6838      	ldr	r0, [r7, #0]
 800953a:	f000 fa54 	bl	80099e6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>
 800953e:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	605a      	str	r2, [r3, #4]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800954e:	4619      	mov	r1, r3
 8009550:	4610      	mov	r0, r2
 8009552:	f7fd fd6f 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8009560:	4619      	mov	r1, r3
 8009562:	4610      	mov	r0, r2
 8009564:	f7fc fe1b 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009568:	6838      	ldr	r0, [r7, #0]
 800956a:	f000 fa30 	bl	80099ce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>
 800956e:	4603      	mov	r3, r0
 8009570:	4618      	mov	r0, r3
 8009572:	f7fb f8bd 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8009576:	4602      	mov	r2, r0
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	611a      	str	r2, [r3, #16]
  }
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4618      	mov	r0, r3
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800958e:	2100      	movs	r1, #0
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fa3f 	bl	8009a14 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fa5f 	bl	8009a5a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1Ev>:
  evaluator()
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa63 	bl	8009a78 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2203      	movs	r2, #3
 80095b6:	2100      	movs	r1, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fa05 	bl	80079c8 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fa5c 	bl	8009a8e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_STRONG_INLINE PlainObjectBase() : m_storage()
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff ffed 	bl	80095c8 <_ZN5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fa57 	bl	8009aa4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>
    }
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE22_check_template_paramsEv>:
    static EIGEN_STRONG_INLINE void _check_template_params()
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0
    }
 8009604:	bf00      	nop
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 800960e:	b580      	push	{r7, lr}
 8009610:	b086      	sub	sp, #24
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	607a      	str	r2, [r7, #4]
 800961a:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 800961c:	2301      	movs	r3, #1
 800961e:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8009620:	2301      	movs	r3, #1
 8009622:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	68b9      	ldr	r1, [r7, #8]
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fa49 	bl	8009ac0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
    }
 800962e:	bf00      	nop
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 8009636:	b5b0      	push	{r4, r5, r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fa19 	bl	8009a78 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>
 8009646:	687c      	ldr	r4, [r7, #4]
 8009648:	6838      	ldr	r0, [r7, #0]
 800964a:	f000 fa6b 	bl	8009b24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>
 800964e:	4605      	mov	r5, r0
 8009650:	6838      	ldr	r0, [r7, #0]
 8009652:	f000 fa74 	bl	8009b3e <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>
 8009656:	4603      	mov	r3, r0
 8009658:	461a      	mov	r2, r3
 800965a:	4629      	mov	r1, r5
 800965c:	4620      	mov	r0, r4
 800965e:	f7fe f9b3 	bl	80079c8 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EEC1EPKfi>
  }
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bdb0      	pop	{r4, r5, r7, pc}

0800966c <_ZNK5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE11lazyProductINS_9TransposeIS3_EEEEKNS1_IS4_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800966c:	b590      	push	{r4, r7, lr}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 8009678:	68b8      	ldr	r0, [r7, #8]
 800967a:	f7fb fd4a 	bl	8005112 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800967e:	4604      	mov	r4, r0
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fb fd51 	bl	8005128 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 8009686:	4603      	mov	r3, r0
 8009688:	461a      	mov	r2, r3
 800968a:	4621      	mov	r1, r4
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fa8b 	bl	8009ba8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>
}
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	bd90      	pop	{r4, r7, pc}

0800969a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	6978      	ldr	r0, [r7, #20]
 80096b0:	f000 faaa 	bl	8009c08 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 80096b4:	bf00      	nop
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80096c4:	2200      	movs	r2, #0
 80096c6:	2102      	movs	r1, #2
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7fe fa6c 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 faad 	bl	8009c2e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffEC1ERKSK_>:
  explicit product_evaluator(const XprType& xpr)
 80096dc:	b590      	push	{r4, r7, lr}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fac8 	bl	8009c7c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>
 80096ec:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 80096ee:	6838      	ldr	r0, [r7, #0]
 80096f0:	f000 faad 	bl	8009c4e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 80096f4:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 80096f6:	4619      	mov	r1, r3
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 faca 	bl	8009c92 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f103 040c 	add.w	r4, r3, #12
      m_rhs(xpr.rhs()),
 8009704:	6838      	ldr	r0, [r7, #0]
 8009706:	f000 faad 	bl	8009c64 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>
 800970a:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800970c:	4619      	mov	r1, r3
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fad4 	bl	8009cbc <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	3310      	adds	r3, #16
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009718:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800971a:	4611      	mov	r1, r2
 800971c:	4618      	mov	r0, r3
 800971e:	f7fc fd3e 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f103 0214 	add.w	r2, r3, #20
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	330c      	adds	r3, #12
      m_innerDim(xpr.lhs().cols())
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	f000 fad9 	bl	8009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8009734:	6838      	ldr	r0, [r7, #0]
 8009736:	f000 fa8a 	bl	8009c4e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>
 800973a:	4603      	mov	r3, r0
 800973c:	4618      	mov	r0, r3
 800973e:	f7fc f8b2 	bl	80058a6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 8009742:	4602      	mov	r2, r0
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	619a      	str	r2, [r3, #24]
  }
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4618      	mov	r0, r3
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	bd90      	pop	{r4, r7, pc}

08009752 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800975a:	2100      	movs	r1, #0
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fad2 	bl	8009d06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 faf2 	bl	8009d4c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>
  }
 8009768:	bf00      	nop
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS1_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
    }
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4618      	mov	r0, r3
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	330c      	adds	r3, #12
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff f983 	bl	8008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3308      	adds	r3, #8
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fb f9b9 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fae5 	bl	8009d88 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7ff ffe2 	bl	800979c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffED1Ev>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b090      	sub	sp, #64	; 0x40
 80097e6:	af02      	add	r7, sp, #8
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80097ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 fab8 	bl	8009d6a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>
  resize_if_allowed(dst, src, func);
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 faea 	bl	8009dd8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 8009804:	f107 0320 	add.w	r3, r7, #32
 8009808:	68f9      	ldr	r1, [r7, #12]
 800980a:	4618      	mov	r0, r3
 800980c:	f7fc fcc7 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f7fd fd05 	bl	8007220 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 8009816:	4603      	mov	r3, r0
 8009818:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800981c:	f107 0120 	add.w	r1, r7, #32
 8009820:	f107 0010 	add.w	r0, r7, #16
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f000 fb04 	bl	8009e34 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800982c:	f107 0310 	add.w	r3, r7, #16
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fb19 	bl	8009e68 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>
  DstEvaluatorType dstEvaluator(dst);
 8009836:	f107 0320 	add.w	r3, r7, #32
 800983a:	4618      	mov	r0, r3
 800983c:	f7fb f975 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8009840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff ffbf 	bl	80097c8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>
}
 800984a:	bf00      	nop
 800984c:	3738      	adds	r7, #56	; 0x38
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 8009852:	b590      	push	{r4, r7, lr}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fb25 	bl	8009eac <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>
 8009862:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 8009864:	6838      	ldr	r0, [r7, #0]
 8009866:	f000 fb0a 	bl	8009e7e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 800986a:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800986c:	4619      	mov	r1, r3
 800986e:	4620      	mov	r0, r4
 8009870:	f000 fb27 	bl	8009ec2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>
      m_rhs(xpr.rhs()),
 8009874:	6838      	ldr	r0, [r7, #0]
 8009876:	f000 fb0d 	bl	8009e94 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>
 800987a:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	625a      	str	r2, [r3, #36]	; 0x24
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8009884:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7fd fbd3 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      m_innerDim(xpr.lhs().cols())
 8009898:	4619      	mov	r1, r3
 800989a:	4610      	mov	r0, r2
 800989c:	f7fd fbca 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80098a0:	6838      	ldr	r0, [r7, #0]
 80098a2:	f000 faec 	bl	8009e7e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>
 80098a6:	4603      	mov	r3, r0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fc fb58 	bl	8005f5e <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE4colsEv>
 80098ae:	4602      	mov	r2, r0
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	631a      	str	r2, [r3, #48]	; 0x30
  }
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd90      	pop	{r4, r7, pc}

080098be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80098c6:	2200      	movs	r2, #0
 80098c8:	2100      	movs	r1, #0
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fb0e 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fb24 	bl	8009f1e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>
  }
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEENS_9TransposeIS6_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	3310      	adds	r3, #16
 8009900:	4618      	mov	r0, r3
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	6039      	str	r1, [r7, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f000 fb04 	bl	8009f3e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fb07 	bl	8009f62 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800995e:	b580      	push	{r7, lr}
 8009960:	b086      	sub	sp, #24
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	68b8      	ldr	r0, [r7, #8]
 800996e:	f000 fb0e 	bl	8009f8e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8009972:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	68b8      	ldr	r0, [r7, #8]
 8009978:	f000 fb15 	bl	8009fa6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800997c:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	6979      	ldr	r1, [r7, #20]
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 fb1b 	bl	8009fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8009988:	bf00      	nop
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009998:	2201      	movs	r2, #1
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff ffde 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fb31 	bl	800a00a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>
  }
 80099a8:	bf00      	nop
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi7ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80099b8:	2107      	movs	r1, #7
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7fe f823 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb32 	bl	800a02a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>
  }
 80099c6:	bf00      	nop
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	4618      	mov	r0, r3
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80099fe:	b480      	push	{r7}
 8009a00:	b083      	sub	sp, #12
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8009a14:	b5b0      	push	{r4, r5, r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	689c      	ldr	r4, [r3, #8]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe fa52 	bl	8007ed2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8009a2e:	4605      	mov	r5, r0
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fb06 	bl	800a048 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 8009a3c:	eef0 7a40 	vmov.f32	s15, s0
 8009a40:	edc7 7a03 	vstr	s15, [r7, #12]
 8009a44:	f107 030c 	add.w	r3, r7, #12
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f7fe f9f9 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bdb0      	pop	{r4, r5, r7, pc}

08009a5a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009a62:	2101      	movs	r1, #1
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff ffd5 	bl	8009a14 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fb25 	bl	800a0ba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <_ZN5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8009a8e:	b480      	push	{r7}
 8009a90:	b083      	sub	sp, #12
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
    }
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EEC1Ev>:
    EIGEN_DEVICE_FUNC DenseStorage() {
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 fb12 	bl	800a0d8 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>
    }
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d108      	bne.n	8009ae4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d105      	bne.n	8009ae4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	db02      	blt.n	8009ae4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x24>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	da06      	bge.n	8009af2 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x32>
 8009ae4:	4b0c      	ldr	r3, [pc, #48]	; (8009b18 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x58>)
 8009ae6:	4a0d      	ldr	r2, [pc, #52]	; (8009b1c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x5c>)
 8009ae8:	f240 1111 	movw	r1, #273	; 0x111
 8009aec:	480c      	ldr	r0, [pc, #48]	; (8009b20 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii+0x60>)
 8009aee:	f013 ff89 	bl	801da04 <__assert_func>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	613b      	str	r3, [r7, #16]
  }
 8009afa:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	fb02 f103 	mul.w	r1, r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	f000 faf0 	bl	800a0ee <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>
    }
 8009b0e:	bf00      	nop
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	080222fc 	.word	0x080222fc
 8009b1c:	08023e94 	.word	0x08023e94
 8009b20:	08022518 	.word	0x08022518

08009b24 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 faea 	bl	800a108 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>
 8009b34:	4603      	mov	r3, r0
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <_ZNK5Eigen15DenseCoeffsBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
      return derived().outerStride();
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fae9 	bl	800a11e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 faf0 	bl	800a134 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>
 8009b54:	4603      	mov	r3, r0
    }
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 faf0 	bl	800a14c <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>:
class dense_product_base
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b082      	sub	sp, #8
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff ffed 	bl	8009b5e <_ZN5Eigen10MatrixBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff ffed 	bl	8009b76 <_ZN5Eigen8internal18dense_product_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1ELi3EEC1Ev>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 8009ba8:	b590      	push	{r4, r7, lr}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7ff ffea 	bl	8009b8e <_ZN5Eigen11ProductImplINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1ENS_5DenseEEC1Ev>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009bc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 8009bd0:	68b8      	ldr	r0, [r7, #8]
 8009bd2:	f7fb fad8 	bl	8005186 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f7fb fae2 	bl	80051a2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8009bde:	4603      	mov	r3, r0
 8009be0:	429c      	cmp	r4, r3
 8009be2:	d005      	beq.n	8009bf0 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x48>
 8009be4:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x54>)
 8009be6:	4a06      	ldr	r2, [pc, #24]	; (8009c00 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x58>)
 8009be8:	2160      	movs	r1, #96	; 0x60
 8009bea:	4806      	ldr	r0, [pc, #24]	; (8009c04 <_ZN5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EEC1ERKS3_RKS5_+0x5c>)
 8009bec:	f013 ff0a 	bl	801da04 <__assert_func>
 8009bf0:	bf00      	nop
    }
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd90      	pop	{r4, r7, pc}
 8009bfc:	0801fb2c 	.word	0x0801fb2c
 8009c00:	08023f28 	.word	0x08023f28
 8009c04:	0801fe7c 	.word	0x0801fe7c

08009c08 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fab9 	bl	800a18e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	68b9      	ldr	r1, [r7, #8]
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 fb14 	bl	800a24e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009c36:	2201      	movs	r2, #1
 8009c38:	2102      	movs	r1, #2
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f7fd ffb3 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 fb3c 	bl	800a2be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009c4e:	b480      	push	{r7}
 8009c50:	b083      	sub	sp, #12
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS0_INS0_IS4_S2_Li0EEES5_Li0EEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	3308      	adds	r3, #8
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEC1Ev>:
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4618      	mov	r0, r3
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1INS_7ProductINS0_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS0_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERKT_>:
    explicit Matrix(const T& x)
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b082      	sub	sp, #8
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
    {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fa fc75 	bl	800458e <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1Ev>
      Base::_check_template_params();
 8009ca4:	f7fa fc83 	bl	80045ae <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f000 fb16 	bl	800a2de <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>
    }
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS8_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS1_EEEEEERKT_>:
    explicit Matrix(const T& x)
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
    {
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fa fc3d 	bl	8004548 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8009cce:	f7fa fc4b 	bl	8004568 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fb0e 	bl	800a2f8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>
    }
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 fb0b 	bl	800a312 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>
  { }
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8009d06:	b5b0      	push	{r4, r5, r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689c      	ldr	r4, [r3, #8]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe f8d9 	bl	8007ed2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 8009d20:	4605      	mov	r5, r0
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fb09 	bl	800a340 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>
 8009d2e:	eef0 7a40 	vmov.f32	s15, s0
 8009d32:	edc7 7a03 	vstr	s15, [r7, #12]
 8009d36:	f107 030c 	add.w	r3, r7, #12
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7fe f880 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8009d44:	bf00      	nop
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bdb0      	pop	{r4, r5, r7, pc}

08009d4c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8009d54:	2101      	movs	r1, #1
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff ffd5 	bl	8009d06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fb28 	bl	800a3b2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>
  }
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1ERKSE_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b082      	sub	sp, #8
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	6039      	str	r1, [r7, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 fb29 	bl	800a3d0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4618      	mov	r0, r3
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fa fd51 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009db0:	4603      	mov	r3, r0
 8009db2:	4618      	mov	r0, r3
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b082      	sub	sp, #8
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fc fc05 	bl	80065d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE4colsEv>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8009dd8:	b590      	push	{r4, r7, lr}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fa fd33 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 8009dec:	4604      	mov	r4, r0
 8009dee:	68b8      	ldr	r0, [r7, #8]
 8009df0:	f7ff ffd5 	bl	8009d9e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4rowsEv>
 8009df4:	4603      	mov	r3, r0
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d10a      	bne.n	8009e10 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fa fd1d 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8009e02:	4604      	mov	r4, r0
 8009e04:	68b8      	ldr	r0, [r7, #8]
 8009e06:	f7ff ffd8 	bl	8009dba <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE4colsEv>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	429c      	cmp	r4, r3
 8009e0e:	d006      	beq.n	8009e1e <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 8009e10:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 8009e12:	4a06      	ldr	r2, [pc, #24]	; (8009e2c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 8009e14:	f240 21f2 	movw	r1, #754	; 0x2f2
 8009e18:	4805      	ldr	r0, [pc, #20]	; (8009e30 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductIS3_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS2_IfLi1ELi1ELi0ELi1ELi1EEEKNS4_INS2_IfLi1ELi3ELi1ELi1ELi3EEES3_Li0EEEEELi1EEENS0_13add_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 8009e1a:	f013 fdf3 	bl	801da04 <__assert_func>
}
 8009e1e:	bf00      	nop
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd90      	pop	{r4, r7, pc}
 8009e26:	bf00      	nop
 8009e28:	08022600 	.word	0x08022600
 8009e2c:	080240d4 	.word	0x080240d4
 8009e30:	08021ff8 	.word	0x08021ff8

08009e34 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEC1ERS5_RKSH_RKSJ_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	605a      	str	r2, [r3, #4]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	609a      	str	r2, [r3, #8]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	69ba      	ldr	r2, [r7, #24]
 8009e58:	60da      	str	r2, [r3, #12]
  }
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi2EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fae6 	bl	800a442 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>
  }
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <_ZNK5Eigen7ProductINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS0_INS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES6_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi3ELi1ELi0ELi3ELi1EEENS0_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	6039      	str	r1, [r7, #0]
    {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fa fb17 	bl	8004502 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 8009ed4:	f7fa fb25 	bl	8004522 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fabf 	bl	800a460 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	68b8      	ldr	r0, [r7, #8]
 8009efc:	f000 fabd 	bl	800a47a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8009f00:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	68b8      	ldr	r0, [r7, #8]
 8009f06:	f000 fac4 	bl	800a492 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8009f0a:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	6979      	ldr	r1, [r7, #20]
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 faca 	bl	800a4aa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8009f16:	bf00      	nop
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8009f26:	2201      	movs	r2, #1
 8009f28:	2100      	movs	r1, #0
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff ffde 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fae0 	bl	800a4f6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>
  }
 8009f36:	bf00      	nop
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b082      	sub	sp, #8
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fae4 	bl	800a516 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 faea 	bl	800a52c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8009f62:	b590      	push	{r4, r7, lr}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fb11 	bl	800a594 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8009f72:	687c      	ldr	r4, [r7, #4]
 8009f74:	6838      	ldr	r0, [r7, #0]
 8009f76:	f000 fb01 	bl	800a57c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7fc f90d 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd90      	pop	{r4, r7, pc}

08009f8e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
      : inner;
 8009f98:	683b      	ldr	r3, [r7, #0]
  }
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8009fa6:	b480      	push	{r7}
 8009fa8:	b083      	sub	sp, #12
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	6039      	str	r1, [r7, #0]
      : outer;
 8009fb0:	687b      	ldr	r3, [r7, #4]
  }
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8009fbe:	b5b0      	push	{r4, r5, r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	689c      	ldr	r4, [r3, #8]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	68b9      	ldr	r1, [r7, #8]
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe f9c4 	bl	8008364 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8009fdc:	4605      	mov	r5, r0
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 fadf 	bl	800a5aa <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>
 8009fec:	eef0 7a40 	vmov.f32	s15, s0
 8009ff0:	edc7 7a05 	vstr	s15, [r7, #20]
 8009ff4:	f107 0314 	add.w	r3, r7, #20
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f7fd ff21 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a002:	bf00      	nop
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bdb0      	pop	{r4, r5, r7, pc}

0800a00a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a012:	2202      	movs	r2, #2
 800a014:	2100      	movs	r1, #0
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7ff fca1 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 faf7 	bl	800a610 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>
  }
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi8ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a032:	2108      	movs	r1, #8
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7fd fce6 	bl	8007a06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 faf8 	bl	800a630 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>
  }
 800a040:	bf00      	nop
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS3_IfLi3ELi1ELi0ELi3ELi1EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  /* Allow index-based non-packet access. It is impossible though to allow index-based packed access,
   * which is why we don't set the LinearAccessBit.
   * TODO: this seems possible when the result is a vector
   */
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  const CoeffReturnType coeff(Index index) const
 800a048:	b580      	push	{r7, lr}
 800a04a:	b0a4      	sub	sp, #144	; 0x90
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  {
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6819      	ldr	r1, [r3, #0]
 800a062:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a066:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 faea 	bl	800a644 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800a070:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a074:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a078:	4611      	mov	r1, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 faf5 	bl	800a66a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6859      	ldr	r1, [r3, #4]
 800a084:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a088:	2200      	movs	r2, #0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 fafe 	bl	800a68c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>
 800a090:	f107 030c 	add.w	r3, r7, #12
 800a094:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800a098:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fb08 	bl	800a6b2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a0a2:	f107 030c 	add.w	r3, r7, #12
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fb31 	bl	800a70e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>
 800a0ac:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a0b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a0b4:	3790      	adds	r7, #144	; 0x90
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a0c2:	2102      	movs	r1, #2
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff fca5 	bl	8009a14 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fb3a 	bl	800a744 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <_ZN5Eigen8internal11plain_arrayIfLi9ELi1ELi0EEC1Ev>:
  plain_array()
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
    check_static_allocation_size<T,Size>();
 800a0e0:	f7fc fbd4 	bl	800688c <_ZN5Eigen8internal28check_static_allocation_sizeIfLi9EEEvv>
  }
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800a0ee:	b480      	push	{r7}
 800a0f0:	b085      	sub	sp, #20
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	bf00      	nop
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <_ZNK5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4618      	mov	r0, r3
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <_ZNK5Eigen6MatrixIfLi3ELi3ELi1ELi3ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fb0b 	bl	800a758 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>
 800a142:	4603      	mov	r3, r0
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <_ZN5Eigen9DenseBaseINS_7ProductINS1_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEENS_9TransposeIS3_EELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
    }
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 800a162:	b580      	push	{r7, lr}
 800a164:	b082      	sub	sp, #8
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	f000 fb01 	bl	800a770 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>
 800a16e:	4603      	mov	r3, r0
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	f000 fafe 	bl	800a780 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>
 800a184:	4603      	mov	r3, r0
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7ff ffe1 	bl	800a162 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	dd08      	ble.n	800a1b8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff ffe5 	bl	800a178 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	dd01      	ble.n	800a1b8 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2a>
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e000      	b.n	800a1ba <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x2c>
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800a1be:	6839      	ldr	r1, [r7, #0]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fae5 	bl	800a790 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>
}
 800a1c6:	bf00      	nop
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fc fd1c 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fafb 	bl	800a7da <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b082      	sub	sp, #8
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7ff ffe8 	bl	800a1ce <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4618      	mov	r0, r3
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	332c      	adds	r3, #44	; 0x2c
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff ffea 	bl	800a1ee <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	3328      	adds	r3, #40	; 0x28
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fc fcf9 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 facd 	bl	800a7c4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4618      	mov	r0, r3
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4618      	mov	r0, r3
 800a240:	f7ff ffe2 	bl	800a208 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800a24e:	b580      	push	{r7, lr}
 800a250:	b098      	sub	sp, #96	; 0x60
 800a252:	af02      	add	r7, sp, #8
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800a25a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a25e:	68b9      	ldr	r1, [r7, #8]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 faa0 	bl	800a7a6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	68b9      	ldr	r1, [r7, #8]
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 fadc 	bl	800a828 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800a270:	f107 0320 	add.w	r3, r7, #32
 800a274:	68f9      	ldr	r1, [r7, #12]
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fedd 	bl	8009036 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 fb1d 	bl	800a8bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>
 800a282:	4603      	mov	r3, r0
 800a284:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a288:	f107 0120 	add.w	r1, r7, #32
 800a28c:	f107 0010 	add.w	r0, r7, #16
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f000 fb1d 	bl	800a8d2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800a298:	f107 0310 	add.w	r3, r7, #16
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fb32 	bl	800a906 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800a2a2:	f107 0320 	add.w	r3, r7, #32
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fc fd8a 	bl	8006dc0 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800a2ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7ff ffbf 	bl	800a234 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>
}
 800a2b6:	bf00      	nop
 800a2b8:	3758      	adds	r7, #88	; 0x58
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	2102      	movs	r1, #2
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7fd fc6b 	bl	8007ba6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_IS4_S4_Li0EEENS_9TransposeIS4_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fb23 	bl	800a91c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6_init1INS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEESA_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fb20 	bl	800a930 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEESK_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fb34 	bl	800a972 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 800a312:	b590      	push	{r4, r7, lr}
 800a314:	b083      	sub	sp, #12
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fb56 	bl	800a9ce <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 800a322:	687c      	ldr	r4, [r7, #4]
 800a324:	6838      	ldr	r0, [r7, #0]
 800a326:	f000 fb45 	bl	800a9b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2200      	movs	r2, #0
 800a32e:	4619      	mov	r1, r3
 800a330:	4620      	mov	r0, r4
 800a332:	f7fc fad8 	bl	80068e6 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4618      	mov	r0, r3
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd90      	pop	{r4, r7, pc}

0800a340 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS2_INS2_IS6_S4_Li0EEES7_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEELi4ENS_10DenseShapeESL_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800a340:	b580      	push	{r7, lr}
 800a342:	b0a2      	sub	sp, #136	; 0x88
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800a350:	2300      	movs	r3, #0
 800a352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a35c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fb3f 	bl	800a9e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800a366:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a36a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800a36e:	4611      	mov	r1, r2
 800a370:	4618      	mov	r0, r3
 800a372:	f000 fb4a 	bl	800aa0a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f103 010c 	add.w	r1, r3, #12
 800a37c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a380:	2200      	movs	r2, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f000 fb52 	bl	800aa2c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800a388:	f107 030c 	add.w	r3, r7, #12
 800a38c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800a390:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fb5c 	bl	800aa52 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800a39a:	f107 030c 	add.w	r3, r7, #12
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 fb85 	bl	800aaae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800a3a4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a3a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3ac:	3788      	adds	r7, #136	; 0x88
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a3ba:	2102      	movs	r1, #2
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff fca2 	bl	8009d06 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS6_INS6_IS9_S7_Li0EEESA_Li0EEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fb8e 	bl	800aae4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>
  }
 800a3c8:	bf00      	nop
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffEC1ERKSE_>:
  explicit product_evaluator(const XprType& xpr)
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fba4 	bl	800ab28 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800a3e0:	6838      	ldr	r0, [r7, #0]
 800a3e2:	f000 fb89 	bl	800aaf8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800a3e6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	1d1c      	adds	r4, r3, #4
      m_rhs(xpr.rhs()),
 800a3f0:	6838      	ldr	r0, [r7, #0]
 800a3f2:	f000 fb8d 	bl	800ab10 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>
 800a3f6:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fb9f 	bl	800ab3e <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800a40a:	4619      	mov	r1, r3
 800a40c:	4610      	mov	r0, r2
 800a40e:	f7fb fec6 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f7ff fc61 	bl	8009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 800a424:	6838      	ldr	r0, [r7, #0]
 800a426:	f000 fb67 	bl	800aaf8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>
 800a42a:	4603      	mov	r3, r0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fa fa05 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800a432:	4602      	mov	r2, r0
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	611a      	str	r2, [r3, #16]
  }
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4618      	mov	r0, r3
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd90      	pop	{r4, r7, pc}

0800a442 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi0ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800a44a:	2100      	movs	r1, #0
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fb8b 	bl	800ab68 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fbab 	bl	800abae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>
  }
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800a46a:	6839      	ldr	r1, [r7, #0]
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fbad 	bl	800abcc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800a472:	bf00      	nop
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
      : inner;
 800a484:	683b      	ldr	r3, [r7, #0]
  }
 800a486:	4618      	mov	r0, r3
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	6039      	str	r1, [r7, #0]
      : outer;
 800a49c:	687b      	ldr	r3, [r7, #4]
  }
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800a4aa:	b5b0      	push	{r4, r5, r7, lr}
 800a4ac:	b086      	sub	sp, #24
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	689c      	ldr	r4, [r3, #8]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fd ff4e 	bl	8008364 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 fb9b 	bl	800ac0e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>
 800a4d8:	eef0 7a40 	vmov.f32	s15, s0
 800a4dc:	edc7 7a05 	vstr	s15, [r7, #20]
 800a4e0:	f107 0314 	add.w	r3, r7, #20
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7fd fcab 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800a4ee:	bf00      	nop
 800a4f0:	3718      	adds	r7, #24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bdb0      	pop	{r4, r5, r7, pc}

0800a4f6 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a4fe:	2202      	movs	r2, #2
 800a500:	2100      	movs	r1, #0
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fcf2 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fbb2 	bl	800ac72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>
  }
 800a50e:	bf00      	nop
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800a52c:	b590      	push	{r4, r7, lr}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
 800a536:	687c      	ldr	r4, [r7, #4]
 800a538:	6838      	ldr	r0, [r7, #0]
 800a53a:	f000 fbaa 	bl	800ac92 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>
 800a53e:	4603      	mov	r3, r0
 800a540:	4619      	mov	r1, r3
 800a542:	4620      	mov	r0, r4
 800a544:	f7fa fc0a 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	1d1c      	adds	r4, r3, #4
 800a54c:	6838      	ldr	r0, [r7, #0]
 800a54e:	f000 fbac 	bl	800acaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>
 800a552:	4603      	mov	r3, r0
 800a554:	4619      	mov	r1, r3
 800a556:	4620      	mov	r0, r4
 800a558:	f000 fbbf 	bl	800acda <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f103 0408 	add.w	r4, r3, #8
 800a562:	6838      	ldr	r0, [r7, #0]
 800a564:	f000 fbad 	bl	800acc2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>
 800a568:	4603      	mov	r3, r0
 800a56a:	4619      	mov	r1, r3
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 fbc3 	bl	800acf8 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4618      	mov	r0, r3
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd90      	pop	{r4, r7, pc}

0800a57c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEENS_9TransposeIS7_EELi1EEELi4ENS_10DenseShapeESI_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b0a4      	sub	sp, #144	; 0x90
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800a5b6:	68f9      	ldr	r1, [r7, #12]
 800a5b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fbde 	bl	800ad80 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>
 800a5c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a5c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 fbf9 	bl	800adc6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f103 0110 	add.w	r1, r3, #16
 800a5da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 fc01 	bl	800ade8 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>
 800a5e6:	f107 0310 	add.w	r3, r7, #16
 800a5ea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800a5ee:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 fc0b 	bl	800ae0e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>
 800a5f8:	f107 0310 	add.w	r3, r7, #16
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fc34 	bl	800ae6a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>
 800a602:	eef0 7a40 	vmov.f32	s15, s0
  }
 800a606:	eeb0 0a67 	vmov.f32	s0, s15
 800a60a:	3790      	adds	r7, #144	; 0x90
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800a618:	2200      	movs	r2, #0
 800a61a:	2101      	movs	r1, #1
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff f99e 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fc3c 	bl	800aea0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>
  }
 800a628:	bf00      	nop
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEES6_NS0_9assign_opIffEELi0EEELi9ELi9EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>:
  return RowXpr(derived(), i);
}

/// This is the const version of row(). */
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
ConstRowXpr row(Index i) const
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
{
  return ConstRowXpr(derived(), i);
 800a650:	68b8      	ldr	r0, [r7, #8]
 800a652:	f7fa fc62 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800a656:	4603      	mov	r3, r0
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	4619      	mov	r1, r3
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 fc2f 	bl	800aec0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>
}
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800a674:	6838      	ldr	r0, [r7, #0]
 800a676:	f000 fc4d 	bl	800af14 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>
 800a67a:	4603      	mov	r3, r0
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fc6b 	bl	800af5a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>
}
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800a698:	68b8      	ldr	r0, [r7, #8]
 800a69a:	f7fa fa76 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 fc6f 	bl	800af88 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>
}
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
  * \sa class CwiseBinaryOp, cwiseAbs2
  */
template<typename OtherDerived>
EIGEN_DEVICE_FUNC
EIGEN_STRONG_INLINE const EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800a6b2:	b5b0      	push	{r4, r5, r7, lr}
 800a6b4:	b086      	sub	sp, #24
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	607a      	str	r2, [r7, #4]
{
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800a6be:	68b8      	ldr	r0, [r7, #8]
 800a6c0:	f000 fc8a 	bl	800afd8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fc91 	bl	800afee <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	f107 0314 	add.w	r3, r7, #20
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fa fab8 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800a6d8:	f107 0314 	add.w	r3, r7, #20
 800a6dc:	462a      	mov	r2, r5
 800a6de:	4621      	mov	r1, r4
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 fcd7 	bl	800b094 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bdb0      	pop	{r4, r5, r7, pc}

0800a6ee <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fd2a 	bl	800b150 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fd31 	bl	800b166 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>
 800a704:	4603      	mov	r3, r0
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE3sumEv>:
  *
  * \sa trace(), prod(), mean()
  */
template<typename Derived>
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
DenseBase<Derived>::sum() const
 800a70e:	b590      	push	{r4, r7, lr}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
{
  if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
    return Scalar(0);
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fd1a 	bl	800b150 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800a71c:	4604      	mov	r4, r0
 800a71e:	f107 030c 	add.w	r3, r7, #12
 800a722:	4618      	mov	r0, r3
 800a724:	f7fa fd87 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800a728:	f107 030c 	add.w	r3, r7, #12
 800a72c:	4619      	mov	r1, r3
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 fdf4 	bl	800b31c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800a734:	eef0 7a40 	vmov.f32	s15, s0
 800a738:	bf00      	nop
}
 800a73a:	eeb0 0a67 	vmov.f32	s0, s15
 800a73e:	3714      	adds	r7, #20
 800a740:	46bd      	mov	sp, r7
 800a742:	bd90      	pop	{r4, r7, pc}

0800a744 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fe21 	bl	800b3a8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a766:	4603      	mov	r3, r0
    }
 800a768:	4618      	mov	r0, r3
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4rowsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return _Rows;}
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
 800a774:	2303      	movs	r3, #3
 800a776:	4618      	mov	r0, r3
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <_ZN5Eigen12DenseStorageIfLi9ELi3ELi3ELi1EE4colsEv>:
    EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return _Cols;}
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
 800a784:	2303      	movs	r3, #3
 800a786:	4618      	mov	r0, r3
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEELb0EE3runERKS3_RKS9_>:
    static void run(const Derived&, const OtherDerived&)
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
    }
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 fe07 	bl	800b3c8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3708      	adds	r7, #8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	370c      	adds	r7, #12
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEED1Ev>:
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fb fdea 	bl	80063d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800a800:	4603      	mov	r3, r0
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	3308      	adds	r3, #8
 800a816:	4618      	mov	r0, r3
 800a818:	f7fb fdea 	bl	80063f0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800a81c:	4603      	mov	r3, r0
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800a834:	68b8      	ldr	r0, [r7, #8]
 800a836:	f7ff ffdb 	bl	800a7f0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4rowsEv>
 800a83a:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800a83c:	68b8      	ldr	r0, [r7, #8]
 800a83e:	f7ff ffe4 	bl	800a80a <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE4colsEv>
 800a842:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff fc8b 	bl	800a162 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a84c:	4602      	mov	r2, r0
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	4293      	cmp	r3, r2
 800a852:	d107      	bne.n	800a864 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	4618      	mov	r0, r3
 800a858:	f7ff fc8e 	bl	800a178 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a85c:	4602      	mov	r2, r0
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	4293      	cmp	r3, r2
 800a862:	d001      	beq.n	800a868 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800a868:	2300      	movs	r3, #0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d005      	beq.n	800a87a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	6979      	ldr	r1, [r7, #20]
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff f923 	bl	8009ac0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fc70 	bl	800a162 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4rowsEv>
 800a882:	4602      	mov	r2, r0
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	4293      	cmp	r3, r2
 800a888:	d107      	bne.n	800a89a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7ff fc73 	bl	800a178 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800a892:	4602      	mov	r2, r0
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	4293      	cmp	r3, r2
 800a898:	d006      	beq.n	800a8a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800a89a:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800a89c:	4a05      	ldr	r2, [pc, #20]	; (800a8b4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800a89e:	f240 21fd 	movw	r1, #765	; 0x2fd
 800a8a2:	4805      	ldr	r0, [pc, #20]	; (800a8b8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEENS_7ProductINS4_INS2_IfLi3ELi3ELi0ELi3ELi3EEES5_Li0EEENS_9TransposeIS5_EELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800a8a4:	f013 f8ae 	bl	801da04 <__assert_func>
}
 800a8a8:	bf00      	nop
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	08021ee4 	.word	0x08021ee4
 800a8b4:	08024290 	.word	0x08024290
 800a8b8:	08021ff8 	.word	0x08021ff8

0800a8bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
 800a8de:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	609a      	str	r2, [r3, #8]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	60da      	str	r2, [r3, #12]
  }
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800a906:	b580      	push	{r7, lr}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fd92 	bl	800b438 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>
  }
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_IS5_S5_Li0EEENS_9TransposeIS5_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE12_set_noaliasINS_7ProductINS1_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800a930:	b5b0      	push	{r4, r5, r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7fa fa1a 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a940:	4604      	mov	r4, r0
 800a942:	6838      	ldr	r0, [r7, #0]
 800a944:	f7fa ff75 	bl	8005832 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEEE7derivedEv>
 800a948:	4605      	mov	r5, r0
 800a94a:	f107 030c 	add.w	r3, r7, #12
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fb ff09 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800a954:	f107 030c 	add.w	r3, r7, #12
 800a958:	461a      	mov	r2, r3
 800a95a:	4629      	mov	r1, r5
 800a95c:	4620      	mov	r0, r4
 800a95e:	f000 fd7b 	bl	800b458 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7fa fa06 	bl	8004d74 <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a968:	4603      	mov	r3, r0
    }
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bdb0      	pop	{r4, r5, r7, pc}

0800a972 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINSA_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS2_EEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800a972:	b5b0      	push	{r4, r5, r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fd7c 	bl	800b47a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800a982:	4604      	mov	r4, r0
 800a984:	6838      	ldr	r0, [r7, #0]
 800a986:	f7fa ff5f 	bl	8005848 <_ZNK5Eigen9EigenBaseINS_7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS6_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKNS7_IfLi1ELi1ELi0ELi1ELi1EEEEEEEE7derivedEv>
 800a98a:	4605      	mov	r5, r0
 800a98c:	f107 030c 	add.w	r3, r7, #12
 800a990:	4618      	mov	r0, r3
 800a992:	f7fb fee8 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800a996:	f107 030c 	add.w	r3, r7, #12
 800a99a:	461a      	mov	r2, r3
 800a99c:	4629      	mov	r1, r5
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 fd76 	bl	800b490 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fd68 	bl	800b47a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800a9aa:	4603      	mov	r3, r0
    }
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bdb0      	pop	{r4, r5, r7, pc}

0800a9b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fd77 	bl	800b4b2 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>:
ConstRowXpr row(Index i) const
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800a9f0:	68b8      	ldr	r0, [r7, #8]
 800a9f2:	f7fa f8ca 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f000 fd6f 	bl	800b4e0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>
}
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800aa14:	6838      	ldr	r0, [r7, #0]
 800aa16:	f000 fd8d 	bl	800b534 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fdab 	bl	800b57a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>
}
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>:
ConstColXpr col(Index i) const
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800aa38:	68b8      	ldr	r0, [r7, #8]
 800aa3a:	f7fa fe16 	bl	800566a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	4619      	mov	r1, r3
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 fdaf 	bl	800b5a8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>
}
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800aa52:	b5b0      	push	{r4, r5, r7, lr}
 800aa54:	b086      	sub	sp, #24
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800aa5e:	68b8      	ldr	r0, [r7, #8]
 800aa60:	f000 fdd4 	bl	800b60c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 800aa64:	4604      	mov	r4, r0
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fddb 	bl	800b622 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	f107 0314 	add.w	r3, r7, #20
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fa f8e8 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800aa78:	f107 0314 	add.w	r3, r7, #20
 800aa7c:	462a      	mov	r2, r5
 800aa7e:	4621      	mov	r1, r4
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 fe21 	bl	800b6c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bdb0      	pop	{r4, r5, r7, pc}

0800aa8e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fe72 	bl	800b780 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 fe79 	bl	800b796 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800aaae:	b590      	push	{r4, r7, lr}
 800aab0:	b085      	sub	sp, #20
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fe62 	bl	800b780 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800aabc:	4604      	mov	r4, r0
 800aabe:	f107 030c 	add.w	r3, r7, #12
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fa fbb7 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800aac8:	f107 030c 	add.w	r3, r7, #12
 800aacc:	4619      	mov	r1, r3
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 ff3c 	bl	800b94c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800aad4:	eef0 7a40 	vmov.f32	s15, s0
 800aad8:	bf00      	nop
}
 800aada:	eeb0 0a67 	vmov.f32	s0, s15
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd90      	pop	{r4, r7, pc}

0800aae4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS7_INS7_ISA_S8_Li0EEESB_Li0EEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSS_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS1_IfLi1ELi1ELi0ELi1ELi1EEEKNS0_INS1_IfLi1ELi3ELi1ELi1ELi3EEES2_Li0EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEC1Ev>:
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS1_KNS_7ProductINS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERKT_>:
    explicit Matrix(const T& x)
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
    {
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7f9 fcfc 	bl	8004548 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800ab50:	f7f9 fd0a 	bl	8004568 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6839      	ldr	r1, [r7, #0]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 ff3d 	bl	800b9d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>
    }
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 800ab68:	b5b0      	push	{r4, r5, r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	689c      	ldr	r4, [r3, #8]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fd f9a8 	bl	8007ed2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 800ab82:	4605      	mov	r5, r0
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 ff31 	bl	800b9f2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>
 800ab90:	eef0 7a40 	vmov.f32	s15, s0
 800ab94:	edc7 7a03 	vstr	s15, [r7, #12]
 800ab98:	f107 030c 	add.w	r3, r7, #12
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 ff5f 	bl	800ba64 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>
  }
 800aba6:	bf00      	nop
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bdb0      	pop	{r4, r5, r7, pc}

0800abae <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi1ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800abae:	b580      	push	{r7, lr}
 800abb0:	b082      	sub	sp, #8
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800abb6:	2101      	movs	r1, #1
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff ffd5 	bl	800ab68 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 ff67 	bl	800ba92 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>
  }
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800abcc:	b5b0      	push	{r4, r5, r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7fa fa68 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800abdc:	4604      	mov	r4, r0
 800abde:	6838      	ldr	r0, [r7, #0]
 800abe0:	f7fb f98e 	bl	8005f00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS5_IfLi3ELi1ELi0ELi3ELi1EEENS5_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEEE7derivedEv>
 800abe4:	4605      	mov	r5, r0
 800abe6:	f107 030c 	add.w	r3, r7, #12
 800abea:	4618      	mov	r0, r3
 800abec:	f7fb fdbb 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800abf0:	f107 030c 	add.w	r3, r7, #12
 800abf4:	461a      	mov	r2, r3
 800abf6:	4629      	mov	r1, r5
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 ff59 	bl	800bab0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7fa fa54 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800ac04:	4603      	mov	r3, r0
    }
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bdb0      	pop	{r4, r5, r7, pc}

0800ac0e <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS2_INS6_IfLi3ELi1ELi0ELi3ELi1EEENS6_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES7_Li1EEELi3ENS_10DenseShapeESF_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b0a4      	sub	sp, #144	; 0x90
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	60b9      	str	r1, [r7, #8]
 800ac18:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800ac1a:	68f9      	ldr	r1, [r7, #12]
 800ac1c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff fd0e 	bl	800a644 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800ac28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800ac30:	4611      	mov	r1, r2
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7ff fd19 	bl	800a66a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ac3c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 ff45 	bl	800bad2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 800ac48:	f107 0314 	add.w	r3, r7, #20
 800ac4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ac50:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 ff4f 	bl	800baf8 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 800ac5a:	f107 0314 	add.w	r3, r7, #20
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 ff78 	bl	800bb54 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 800ac64:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ac68:	eeb0 0a67 	vmov.f32	s0, s15
 800ac6c:	3790      	adds	r7, #144	; 0x90
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff f934 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 ff80 	bl	800bb8a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>
  }
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	4618      	mov	r0, r3
 800aca0:	370c      	adds	r7, #12
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr

0800acaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800acaa:	b480      	push	{r7}
 800acac:	b083      	sub	sp, #12
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	3304      	adds	r3, #4
 800acce:	4618      	mov	r0, r3
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	6039      	str	r1, [r7, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fb fa58 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <_ZN5Eigen8internal9evaluatorIKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERS9_>:
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 ff4f 	bl	800bbaa <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>:
    typedef typename internal::ref_selector<XprType>::non_const_type XprTypeNested;
  public:

    typedef typename internal::dense_xpr_base<BlockType>::type Base;
    EIGEN_DENSE_PUBLIC_INTERFACE(BlockType)
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b082      	sub	sp, #8
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	6039      	str	r1, [r7, #0]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	4611      	mov	r1, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7f9 f8aa 	bl	8003e80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3310      	adds	r3, #16
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	6912      	ldr	r2, [r2, #16]
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl)
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff ffe0 	bl	800ad16 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKSF_>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Block)
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	683a      	ldr	r2, [r7, #0]
 800ad6e:	4611      	mov	r1, r2
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff ffe5 	bl	800ad40 <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERKSG_>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE3rowEi>:
ConstRowXpr row(Index i) const
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 800ad8c:	68b8      	ldr	r0, [r7, #8]
 800ad8e:	f7fa f824 	bl	8004dda <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEEE7derivedEv>
 800ad92:	4603      	mov	r3, r0
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	4619      	mov	r1, r3
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 ff1d 	bl	800bbd8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>
}
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Transpose)
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b082      	sub	sp, #8
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	6039      	str	r1, [r7, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	4611      	mov	r1, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7ff ffd2 	bl	800ad60 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 800add0:	6838      	ldr	r0, [r7, #0]
 800add2:	f000 ff29 	bl	800bc28 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>
 800add6:	4603      	mov	r3, r0
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 ff47 	bl	800bc6e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
}
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800adf4:	68b8      	ldr	r0, [r7, #8]
 800adf6:	f7f9 fffb 	bl	8004df0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800adfa:	4603      	mov	r3, r0
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	4619      	mov	r1, r3
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 ff47 	bl	800bc94 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>
}
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS1_IS8_EELi1ELi1ELb0EEEEEKNS3_INS5_IfNS4_6traitsIT_E6ScalarEEEKSJ_KSQ_EERKNS0_ISQ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800ae0e:	b5b0      	push	{r4, r5, r7, lr}
 800ae10:	b086      	sub	sp, #24
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800ae1a:	68b8      	ldr	r0, [r7, #8]
 800ae1c:	f000 ff62 	bl	800bce4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>
 800ae20:	4604      	mov	r4, r0
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 ff69 	bl	800bcfa <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>
 800ae28:	4605      	mov	r5, r0
 800ae2a:	f107 0314 	add.w	r3, r7, #20
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7f9 ff0a 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800ae34:	f107 0314 	add.w	r3, r7, #20
 800ae38:	462a      	mov	r2, r5
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 ffaf 	bl	800bda0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>
}
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bdb0      	pop	{r4, r5, r7, pc}

0800ae4a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>:
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fffe 	bl	800be54 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f001 f805 	bl	800be6a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>
 800ae60:	4603      	mov	r3, r0
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800ae6a:	b590      	push	{r4, r7, lr}
 800ae6c:	b085      	sub	sp, #20
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 ffee 	bl	800be54 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800ae78:	4604      	mov	r4, r0
 800ae7a:	f107 030c 	add.w	r3, r7, #12
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fa f9d9 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800ae84:	f107 030c 	add.w	r3, r7, #12
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f001 f8da 	bl	800c044 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800ae90:	eef0 7a40 	vmov.f32	s15, s0
 800ae94:	bf00      	nop
}
 800ae96:	eeb0 0a67 	vmov.f32	s0, s15
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd90      	pop	{r4, r7, pc}

0800aea0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800aea8:	2201      	movs	r2, #1
 800aeaa:	2101      	movs	r1, #1
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7fe fd56 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 f90c 	bl	800c0d0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>
  }
 800aeb8:	bf00      	nop
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f001 f90c 	bl	800c0f0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	db07      	blt.n	800aeee <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x2e>
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7f9 fc10 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800aee6:	4602      	mov	r2, r0
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4293      	cmp	r3, r2
 800aeec:	db05      	blt.n	800aefa <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x3a>
 800aeee:	4b06      	ldr	r3, [pc, #24]	; (800af08 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x48>)
 800aef0:	4a06      	ldr	r2, [pc, #24]	; (800af0c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x4c>)
 800aef2:	2178      	movs	r1, #120	; 0x78
 800aef4:	4806      	ldr	r0, [pc, #24]	; (800af10 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEC1ERS3_i+0x50>)
 800aef6:	f012 fd85 	bl	801da04 <__assert_func>
 800aefa:	bf00      	nop
    }
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	080243f0 	.word	0x080243f0
 800af0c:	08024498 	.word	0x08024498
 800af10:	08024574 	.word	0x08024574

0800af14 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4618      	mov	r0, r3
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f001 f8ed 	bl	800c112 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4618      	mov	r0, r3
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800af42:	b580      	push	{r7, lr}
 800af44:	b082      	sub	sp, #8
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff ffed 	bl	800af2a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800af5a:	b5b0      	push	{r4, r5, r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	6039      	str	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff ffec 	bl	800af42 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS_5DenseEEC1Ev>
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	4614      	mov	r4, r2
 800af70:	461d      	mov	r5, r3
 800af72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af76:	e895 0003 	ldmia.w	r5, {r0, r1}
 800af7a:	e884 0003 	stmia.w	r4, {r0, r1}
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4618      	mov	r0, r3
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bdb0      	pop	{r4, r5, r7, pc}

0800af88 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	68b9      	ldr	r1, [r7, #8]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f001 f8c4 	bl	800c128 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	db07      	blt.n	800afb6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f9 fc47 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800afae:	4602      	mov	r2, r0
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4293      	cmp	r3, r2
 800afb4:	db05      	blt.n	800afc2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800afb8:	4a05      	ldr	r2, [pc, #20]	; (800afd0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800afba:	2178      	movs	r1, #120	; 0x78
 800afbc:	4805      	ldr	r0, [pc, #20]	; (800afd4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800afbe:	f012 fd21 	bl	801da04 <__assert_func>
    }
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	080243f0 	.word	0x080243f0
 800afd0:	080245c8 	.word	0x080245c8
 800afd4:	08024574 	.word	0x08024574

0800afd8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>:
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4618      	mov	r0, r3
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7derivedEv>:
 800afee:	b480      	push	{r7}
 800aff0:	b083      	sub	sp, #12
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 f89c 	bl	800c14a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4618      	mov	r0, r3
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff ffed 	bl	800b004 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4618      	mov	r0, r3
 800b040:	f001 f88e 	bl	800c160 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>
 800b044:	4603      	mov	r3, r0
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	f001 f88c 	bl	800c176 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>
 800b05e:	4603      	mov	r3, r0
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>:

    typedef typename Base::CoeffReturnType CoeffReturnType;

    /** \copydoc DenseBase::rows() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	f7fb f913 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800b074:	4603      	mov	r3, r0
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>:
    /** \copydoc DenseBase::cols() */
    EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	f7fb f910 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b08a:	4603      	mov	r3, r0
 800b08c:	4618      	mov	r0, r3
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b094:	b5b0      	push	{r4, r5, r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
 800b0a0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f7ff ffba 	bl	800b01c <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	4614      	mov	r4, r2
 800b0ae:	461d      	mov	r5, r3
 800b0b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b0b8:	e884 0003 	stmia.w	r4, {r0, r1}
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f103 0218 	add.w	r2, r3, #24
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4614      	mov	r4, r2
 800b0c6:	461d      	mov	r5, r3
 800b0c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b0d0:	e884 0003 	stmia.w	r4, {r0, r1}
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3330      	adds	r3, #48	; 0x30
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7f9 fe3e 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b0e0:	68b8      	ldr	r0, [r7, #8]
 800b0e2:	f7ff ffa7 	bl	800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff ffbc 	bl	800b068 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	429c      	cmp	r4, r3
 800b0f4:	d10a      	bne.n	800b10c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 800b0f6:	68b8      	ldr	r0, [r7, #8]
 800b0f8:	f7ff ffa9 	bl	800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff ffbc 	bl	800b07e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4colsEv>
 800b106:	4603      	mov	r3, r0
 800b108:	429c      	cmp	r4, r3
 800b10a:	d005      	beq.n	800b118 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 800b10c:	4b05      	ldr	r3, [pc, #20]	; (800b124 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b10e:	4a06      	ldr	r2, [pc, #24]	; (800b128 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b110:	2174      	movs	r1, #116	; 0x74
 800b112:	4806      	ldr	r0, [pc, #24]	; (800b12c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 800b114:	f012 fc76 	bl	801da04 <__assert_func>
    }
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bdb0      	pop	{r4, r5, r7, pc}
 800b122:	bf00      	nop
 800b124:	0801f86c 	.word	0x0801f86c
 800b128:	080246a4 	.word	0x080246a4
 800b12c:	0801fad0 	.word	0x0801fad0

0800b130 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f809 	bl	800b150 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b13e:	4603      	mov	r3, r0
 800b140:	4618      	mov	r0, r3
 800b142:	f001 f823 	bl	800c18c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>
 800b146:	4603      	mov	r3, r0
 800b148:	4618      	mov	r0, r3
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4618      	mov	r0, r3
 800b15c:	370c      	adds	r7, #12
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	f7ff ff5f 	bl	800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800b176:	4603      	mov	r3, r0
    }
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
// but that might complicate template specialization
template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator;

template<typename Derived, typename PlainObjectType>
struct mapbase_evaluator : evaluator_base<Derived>
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f001 f831 	bl	800c1f0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4618      	mov	r0, r3
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>:

// TODO: This evaluator does not actually use the child evaluator;
// all action is via the data() as returned by the Block expression.

template<typename ArgType, int BlockRows, int BlockCols, bool InnerPanel>
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff ffec 	bl	800b180 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b082      	sub	sp, #8
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7ff ffeb 	bl	800b198 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EED1Ev>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
struct evaluator<const T>
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff ffeb 	bl	800b1b2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff ffeb 	bl	800b1cc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 ffef 	bl	800c1da <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b206:	b580      	push	{r7, lr}
 800b208:	b082      	sub	sp, #8
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4618      	mov	r0, r3
 800b212:	f7ff ffe8 	bl	800b1e6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7ff ffeb 	bl	800b206 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 ffdf 	bl	800c206 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4618      	mov	r0, r3
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7ff ffec 	bl	800b23a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_ED1Ev>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff ffeb 	bl	800b252 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EED1Ev>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4618      	mov	r0, r3
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4618      	mov	r0, r3
 800b292:	f7ff ffeb 	bl	800b26c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	330c      	adds	r3, #12
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7ff ffea 	bl	800b286 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff ffb2 	bl	800b220 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff ffe5 	bl	800b2a0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 ff74 	bl	800c1c4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b082      	sub	sp, #8
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff ffe8 	bl	800b2c6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff ffeb 	bl	800b2e6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800b31c:	b580      	push	{r7, lr}
 800b31e:	ed2d 8b02 	vpush	{d8}
 800b322:	b088      	sub	sp, #32
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff f9df 	bl	800a6ee <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4rowsEv>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	dd05      	ble.n	800b342 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff fefa 	bl	800b130 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE4colsEv>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	dc06      	bgt.n	800b350 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800b342:	4b16      	ldr	r3, [pc, #88]	; (800b39c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800b344:	4a16      	ldr	r2, [pc, #88]	; (800b3a0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800b346:	f240 119b 	movw	r1, #411	; 0x19b
 800b34a:	4816      	ldr	r0, [pc, #88]	; (800b3a4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800b34c:	f012 fb5a 	bl	801da04 <__assert_func>
 800b350:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff fefc 	bl	800b150 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b358:	4602      	mov	r2, r0
 800b35a:	f107 030c 	add.w	r3, r7, #12
 800b35e:	4611      	mov	r1, r2
 800b360:	4618      	mov	r0, r3
 800b362:	f000 ff20 	bl	800c1a6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f7ff fef2 	bl	800b150 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE7derivedEv>
 800b36c:	4602      	mov	r2, r0
 800b36e:	f107 030c 	add.w	r3, r7, #12
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	4618      	mov	r0, r3
 800b376:	f000 ff51 	bl	800c21c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800b37a:	eeb0 8a40 	vmov.f32	s16, s0
 800b37e:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b380:	f107 030c 	add.w	r3, r7, #12
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff ffbb 	bl	800b300 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b38a:	eef0 7a48 	vmov.f32	s15, s16
}
 800b38e:	eeb0 0a67 	vmov.f32	s0, s15
 800b392:	3720      	adds	r7, #32
 800b394:	46bd      	mov	sp, r7
 800b396:	ecbd 8b02 	vpop	{d8}
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	080248ec 	.word	0x080248ec
 800b3a0:	08024930 	.word	0x08024930
 800b3a4:	08024af8 	.word	0x08024af8

0800b3a8 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7fe feb4 	bl	800a11e <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE7derivedEv>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7fe fedd 	bl	800a178 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEE4colsEv>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800b3c8:	b590      	push	{r4, r7, lr}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 ff4a 	bl	800c26c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>
 800b3d8:	687c      	ldr	r4, [r7, #4]
    : m_lhs(xpr.lhs()),
 800b3da:	6838      	ldr	r0, [r7, #0]
 800b3dc:	f000 ff2f 	bl	800c23e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800b3e0:	4603      	mov	r3, r0
      m_innerDim(xpr.lhs().cols())
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f000 ff4c 	bl	800c282 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>
      m_rhs(xpr.rhs()),
 800b3ea:	6838      	ldr	r0, [r7, #0]
 800b3ec:	f000 ff32 	bl	800c254 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>
 800b3f0:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3324      	adds	r3, #36	; 0x24
 800b3f6:	6812      	ldr	r2, [r2, #0]
 800b3f8:	601a      	str	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3328      	adds	r3, #40	; 0x28
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800b3fe:	687a      	ldr	r2, [r7, #4]
      m_innerDim(xpr.lhs().cols())
 800b400:	4611      	mov	r1, r2
 800b402:	4618      	mov	r0, r3
 800b404:	f7fb fe16 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3324      	adds	r3, #36	; 0x24
      m_innerDim(xpr.lhs().cols())
 800b412:	4619      	mov	r1, r3
 800b414:	4610      	mov	r0, r2
 800b416:	f000 ff49 	bl	800c2ac <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>
 800b41a:	6838      	ldr	r0, [r7, #0]
 800b41c:	f000 ff0f 	bl	800c23e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>
 800b420:	4603      	mov	r3, r0
 800b422:	4618      	mov	r0, r3
 800b424:	f7f9 feaf 	bl	8005186 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800b428:	4602      	mov	r2, r0
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	631a      	str	r2, [r3, #48]	; 0x30
  }
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	bd90      	pop	{r4, r7, pc}

0800b438 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800b440:	2200      	movs	r2, #0
 800b442:	2100      	movs	r1, #0
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 ff40 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 ff56 	bl	800c2fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>
  }
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	68b9      	ldr	r1, [r7, #8]
 800b46c:	6978      	ldr	r0, [r7, #20]
 800b46e:	f000 ff55 	bl	800c31c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800b472:	bf00      	nop
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>:
  Derived& derived() { return *static_cast<Derived*>(this); }
 800b47a:	b480      	push	{r7}
 800b47c:	b083      	sub	sp, #12
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4618      	mov	r0, r3
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	68b9      	ldr	r1, [r7, #8]
 800b4a4:	6978      	ldr	r0, [r7, #20]
 800b4a6:	f000 ff73 	bl	800c390 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>
}
 800b4aa:	bf00      	nop
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <_ZNK5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 800b4b2:	b480      	push	{r7}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 ff9c 	bl	800c40e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	68b9      	ldr	r1, [r7, #8]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 ff97 	bl	800c426 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	db07      	blt.n	800b50e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	4618      	mov	r0, r3
 800b502:	f7f9 f9a6 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800b506:	4602      	mov	r2, r0
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4293      	cmp	r3, r2
 800b50c:	db05      	blt.n	800b51a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 800b50e:	4b06      	ldr	r3, [pc, #24]	; (800b528 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 800b510:	4a06      	ldr	r2, [pc, #24]	; (800b52c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 800b512:	2178      	movs	r1, #120	; 0x78
 800b514:	4806      	ldr	r0, [pc, #24]	; (800b530 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEC1ERS3_i+0x50>)
 800b516:	f012 fa75 	bl	801da04 <__assert_func>
 800b51a:	bf00      	nop
    }
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	080243f0 	.word	0x080243f0
 800b52c:	08024b4c 	.word	0x08024b4c
 800b530:	08024574 	.word	0x08024574

0800b534 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4618      	mov	r0, r3
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 ff78 	bl	800c448 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4618      	mov	r0, r3
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff ffed 	bl	800b54a <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800b57a:	b5b0      	push	{r4, r5, r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff ffec 	bl	800b562 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	4614      	mov	r4, r2
 800b590:	461d      	mov	r5, r3
 800b592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b596:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b59a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bdb0      	pop	{r4, r5, r7, pc}

0800b5a8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	68b9      	ldr	r1, [r7, #8]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f000 ff4f 	bl	800c45e <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	db0f      	blt.n	800b5e6 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x3e>
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fa f88c 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	db0d      	blt.n	800b5f2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fa f88f 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	db05      	blt.n	800b5f2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x4a>
 800b5e6:	4b06      	ldr	r3, [pc, #24]	; (800b600 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x58>)
 800b5e8:	4a06      	ldr	r2, [pc, #24]	; (800b604 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x5c>)
 800b5ea:	2178      	movs	r1, #120	; 0x78
 800b5ec:	4806      	ldr	r0, [pc, #24]	; (800b608 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEC1ERS3_i+0x60>)
 800b5ee:	f012 fa09 	bl	801da04 <__assert_func>
 800b5f2:	bf00      	nop
    }
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	080243f0 	.word	0x080243f0
 800b604:	08024c28 	.word	0x08024c28
 800b608:	08024574 	.word	0x08024574

0800b60c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>:
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4618      	mov	r0, r3
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7derivedEv>:
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4618      	mov	r0, r3
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 ff1d 	bl	800c480 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4618      	mov	r0, r3
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff ffed 	bl	800b638 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4618      	mov	r0, r3
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 ff0f 	bl	800c496 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>
 800b678:	4603      	mov	r3, r0
 800b67a:	4618      	mov	r0, r3
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800b682:	b580      	push	{r7, lr}
 800b684:	b082      	sub	sp, #8
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 ff0d 	bl	800c4ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>
 800b692:	4603      	mov	r3, r0
 800b694:	4618      	mov	r0, r3
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	f7fa fe01 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b082      	sub	sp, #8
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	f7fa fdf6 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800b6c8:	b5b0      	push	{r4, r5, r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7ff ffba 	bl	800b650 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEENS_5DenseEEC1Ev>
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	461d      	mov	r5, r3
 800b6e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b6e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b6e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b6ec:	e884 0003 	stmia.w	r4, {r0, r1}
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f103 0218 	add.w	r2, r3, #24
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4614      	mov	r4, r2
 800b6fa:	461d      	mov	r5, r3
 800b6fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b6fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	332c      	adds	r3, #44	; 0x2c
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7f9 fb26 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800b710:	68b8      	ldr	r0, [r7, #8]
 800b712:	f7ff ffa9 	bl	800b668 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800b716:	4604      	mov	r4, r0
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff ffbe 	bl	800b69c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4rowsEv>
 800b720:	4603      	mov	r3, r0
 800b722:	429c      	cmp	r4, r3
 800b724:	d10a      	bne.n	800b73c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x74>
 800b726:	68b8      	ldr	r0, [r7, #8]
 800b728:	f7ff ffab 	bl	800b682 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800b72c:	4604      	mov	r4, r0
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4618      	mov	r0, r3
 800b732:	f7ff ffbe 	bl	800b6b2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4colsEv>
 800b736:	4603      	mov	r3, r0
 800b738:	429c      	cmp	r4, r3
 800b73a:	d005      	beq.n	800b748 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x80>
 800b73c:	4b05      	ldr	r3, [pc, #20]	; (800b754 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x8c>)
 800b73e:	4a06      	ldr	r2, [pc, #24]	; (800b758 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 800b740:	2174      	movs	r1, #116	; 0x74
 800b742:	4806      	ldr	r0, [pc, #24]	; (800b75c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 800b744:	f012 f95e 	bl	801da04 <__assert_func>
    }
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bdb0      	pop	{r4, r5, r7, pc}
 800b752:	bf00      	nop
 800b754:	0801f86c 	.word	0x0801f86c
 800b758:	08024d04 	.word	0x08024d04
 800b75c:	0801fad0 	.word	0x0801fad0

0800b760 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f809 	bl	800b780 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b76e:	4603      	mov	r3, r0
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fea6 	bl	800c4c2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>
 800b776:	4603      	mov	r3, r0
 800b778:	4618      	mov	r0, r3
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4618      	mov	r0, r3
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800b796:	b580      	push	{r7, lr}
 800b798:	b082      	sub	sp, #8
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff ff61 	bl	800b668 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 800b7a6:	4603      	mov	r3, r0
    }
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 feb4 	bl	800c526 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7ff ffec 	bl	800b7b0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b082      	sub	sp, #8
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7ff ffeb 	bl	800b7c8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EED1Ev>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3708      	adds	r7, #8
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff ffeb 	bl	800b7e2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff ffeb 	bl	800b7fc <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fe72 	bl	800c510 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff ffe8 	bl	800b816 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff ffeb 	bl	800b836 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4618      	mov	r0, r3
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fe62 	bl	800c53c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff ffec 	bl	800b86a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_ED1Ev>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	4618      	mov	r0, r3
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7ff ffeb 	bl	800b882 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EED1Ev>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff ffeb 	bl	800b89c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	330c      	adds	r3, #12
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7ff ffea 	bl	800b8b6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff ffb2 	bl	800b850 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff ffe5 	bl	800b8d0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fdf7 	bl	800c4fa <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4618      	mov	r0, r3
 800b922:	f7ff ffe8 	bl	800b8f6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7ff ffeb 	bl	800b916 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800b94c:	b580      	push	{r7, lr}
 800b94e:	ed2d 8b02 	vpush	{d8}
 800b952:	b088      	sub	sp, #32
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7ff f897 	bl	800aa8e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4rowsEv>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	dd05      	ble.n	800b972 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7ff fefa 	bl	800b760 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE4colsEv>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dc06      	bgt.n	800b980 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800b972:	4b16      	ldr	r3, [pc, #88]	; (800b9cc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800b974:	4a16      	ldr	r2, [pc, #88]	; (800b9d0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800b976:	f240 119b 	movw	r1, #411	; 0x19b
 800b97a:	4816      	ldr	r0, [pc, #88]	; (800b9d4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800b97c:	f012 f842 	bl	801da04 <__assert_func>
 800b980:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fefc 	bl	800b780 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b988:	4602      	mov	r2, r0
 800b98a:	f107 030c 	add.w	r3, r7, #12
 800b98e:	4611      	mov	r1, r2
 800b990:	4618      	mov	r0, r3
 800b992:	f000 fda3 	bl	800c4dc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7ff fef2 	bl	800b780 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE7derivedEv>
 800b99c:	4602      	mov	r2, r0
 800b99e:	f107 030c 	add.w	r3, r7, #12
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 fdd4 	bl	800c552 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800b9aa:	eeb0 8a40 	vmov.f32	s16, s0
 800b9ae:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800b9b0:	f107 030c 	add.w	r3, r7, #12
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff ffbb 	bl	800b930 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800b9ba:	eef0 7a48 	vmov.f32	s15, s16
}
 800b9be:	eeb0 0a67 	vmov.f32	s0, s15
 800b9c2:	3720      	adds	r7, #32
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	ecbd 8b02 	vpop	{d8}
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	080248ec 	.word	0x080248ec
 800b9d0:	08024f4c 	.word	0x08024f4c
 800b9d4:	08024af8 	.word	0x08024af8

0800b9d8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEESF_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fdc5 	bl	800c574 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800b9ea:	bf00      	nop
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS2_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEELi4ENS_10DenseShapeESF_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b0a2      	sub	sp, #136	; 0x88
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 800ba02:	2300      	movs	r3, #0
 800ba04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6819      	ldr	r1, [r3, #0]
 800ba0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ba10:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe ffe5 	bl	800a9e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 800ba1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ba1e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fe fff0 	bl	800aa0a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	1d19      	adds	r1, r3, #4
 800ba2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ba32:	2200      	movs	r2, #0
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fff9 	bl	800aa2c <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE3colEi>
 800ba3a:	f107 030c 	add.w	r3, r7, #12
 800ba3e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800ba42:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff f803 	bl	800aa52 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800ba4c:	f107 030c 	add.w	r3, r7, #12
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff f82c 	bl	800aaae <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE3sumEv>
 800ba56:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ba5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ba5e:	3788      	adds	r7, #136	; 0x88
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <_ZNK5Eigen8internal13add_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	ed93 7a00 	vldr	s14, [r3]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	edd3 7a00 	vldr	s15, [r3]
 800ba7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	edc3 7a00 	vstr	s15, [r3]
 800ba86:	bf00      	nop
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi2ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800ba9a:	2102      	movs	r1, #2
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7ff f863 	bl	800ab68 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductIS4_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS3_IfLi1ELi1ELi0ELi1ELi1EEEKNS6_INS3_IfLi1ELi3ELi1ELi1ELi3EEES4_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fd87 	bl	800c5b6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>
  }
 800baa8:	bf00      	nop
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	6978      	ldr	r0, [r7, #20]
 800bac6:	f000 fd80 	bl	800c5ca <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800baca:	bf00      	nop
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800bade:	68b8      	ldr	r0, [r7, #8]
 800bae0:	f7f9 fa1b 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800bae4:	4603      	mov	r3, r0
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4619      	mov	r1, r3
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f000 fd98 	bl	800c620 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>
}
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800baf8:	b5b0      	push	{r4, r5, r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800bb04:	68b8      	ldr	r0, [r7, #8]
 800bb06:	f7ff fa67 	bl	800afd8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fdaf 	bl	800c670 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 800bb12:	4605      	mov	r5, r0
 800bb14:	f107 0314 	add.w	r3, r7, #20
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f9 f895 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800bb1e:	f107 0314 	add.w	r3, r7, #20
 800bb22:	462a      	mov	r2, r5
 800bb24:	4621      	mov	r1, r4
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f000 fddc 	bl	800c6e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>
}
 800bb2c:	68f8      	ldr	r0, [r7, #12]
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bdb0      	pop	{r4, r5, r7, pc}

0800bb34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fe2f 	bl	800c7a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800bb42:	4603      	mov	r3, r0
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 fe36 	bl	800c7b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800bb54:	b590      	push	{r4, r7, lr}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 fe1f 	bl	800c7a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800bb62:	4604      	mov	r4, r0
 800bb64:	f107 030c 	add.w	r3, r7, #12
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7f9 fb64 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800bb6e:	f107 030c 	add.w	r3, r7, #12
 800bb72:	4619      	mov	r1, r3
 800bb74:	4620      	mov	r0, r4
 800bb76:	f000 fe9b 	bl	800c8b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800bb7a:	eef0 7a40 	vmov.f32	s15, s0
 800bb7e:	bf00      	nop
}
 800bb80:	eeb0 0a67 	vmov.f32	s0, s15
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd90      	pop	{r4, r7, pc}

0800bb8a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800bb92:	2201      	movs	r2, #1
 800bb94:	2101      	movs	r1, #1
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7fe f9a8 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fecd 	bl	800c93c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>
  }
 800bba2:	bf00      	nop
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <_ZN5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 800bbaa:	b590      	push	{r4, r7, lr}
 800bbac:	b083      	sub	sp, #12
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
    : m_functor(n.functor()), m_wrapper()
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fedd 	bl	800c974 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 800bbba:	687c      	ldr	r4, [r7, #4]
 800bbbc:	6838      	ldr	r0, [r7, #0]
 800bbbe:	f000 fecd 	bl	800c95c <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f7f9 f8b8 	bl	8004d3c <_ZN5Eigen8internal18scalar_constant_opIfEC1ERKS2_>
  }
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd90      	pop	{r4, r7, pc}
	...

0800bbd8 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	68b9      	ldr	r1, [r7, #8]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 fecd 	bl	800c98a <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>
      eigen_assert( (i>=0) && (
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	db06      	blt.n	800bc04 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x2c>
 800bbf6:	68b8      	ldr	r0, [r7, #8]
 800bbf8:	f7fb fe6d 	bl	80078d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4293      	cmp	r3, r2
 800bc02:	db05      	blt.n	800bc10 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x38>
 800bc04:	4b05      	ldr	r3, [pc, #20]	; (800bc1c <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x44>)
 800bc06:	4a06      	ldr	r2, [pc, #24]	; (800bc20 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x48>)
 800bc08:	2178      	movs	r1, #120	; 0x78
 800bc0a:	4806      	ldr	r0, [pc, #24]	; (800bc24 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERSE_i+0x4c>)
 800bc0c:	f011 fefa 	bl	801da04 <__assert_func>
 800bc10:	bf00      	nop
    }
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	080243f0 	.word	0x080243f0
 800bc20:	08025114 	.word	0x08025114
 800bc24:	08024574 	.word	0x08024574

0800bc28 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4618      	mov	r0, r3
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 feb0 	bl	800c9ac <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b082      	sub	sp, #8
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7ff ffed 	bl	800bc3e <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4618      	mov	r0, r3
 800bc68:	3708      	adds	r7, #8
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff ffec 	bl	800bc56 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff f86c 	bl	800ad60 <_ZN5Eigen5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0EEC1ERKSF_>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
	...

0800bc94 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	68b9      	ldr	r1, [r7, #8]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f000 fe8b 	bl	800c9c2 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	db06      	blt.n	800bcc0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x2c>
 800bcb2:	68b8      	ldr	r0, [r7, #8]
 800bcb4:	f7fb fe1d 	bl	80078f2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	db05      	blt.n	800bccc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x38>
 800bcc0:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x44>)
 800bcc2:	4a06      	ldr	r2, [pc, #24]	; (800bcdc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x48>)
 800bcc4:	2178      	movs	r1, #120	; 0x78
 800bcc6:	4806      	ldr	r0, [pc, #24]	; (800bce0 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEC1ERS5_i+0x4c>)
 800bcc8:	f011 fe9c 	bl	801da04 <__assert_func>
    }
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	080243f0 	.word	0x080243f0
 800bcdc:	080252ac 	.word	0x080252ac
 800bce0:	08024574 	.word	0x08024574

0800bce4 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEE7derivedEv>:
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr

0800bcfa <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEE7derivedEv>:
 800bcfa:	b480      	push	{r7}
 800bcfc:	b083      	sub	sp, #12
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fe63 	bl	800c9e4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff ffed 	bl	800bd10 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 fe55 	bl	800c9fa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>
 800bd50:	4603      	mov	r3, r0
 800bd52:	4618      	mov	r0, r3
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fe53 	bl	800ca10 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	f7fa fa95 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bd80:	4603      	mov	r3, r0
 800bd82:	4618      	mov	r0, r3
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}

0800bd8a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800bd8a:	b580      	push	{r7, lr}
 800bd8c:	b082      	sub	sp, #8
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	f7fa fa8a 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800bd96:	4603      	mov	r3, r0
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800bda0:	b5b0      	push	{r4, r5, r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f7ff ffba 	bl	800bd28 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpIS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS8_EELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe fff3 	bl	800ada6 <_ZN5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSI_>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f103 021c 	add.w	r2, r3, #28
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4614      	mov	r4, r2
 800bdca:	461d      	mov	r5, r3
 800bdcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bdd4:	e884 0003 	stmia.w	r4, {r0, r1}
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3334      	adds	r3, #52	; 0x34
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7f8 ffbc 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800bde4:	68b8      	ldr	r0, [r7, #8]
 800bde6:	f7ff ffab 	bl	800bd40 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800bdea:	4604      	mov	r4, r0
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff ffc0 	bl	800bd74 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4rowsEv>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	429c      	cmp	r4, r3
 800bdf8:	d10a      	bne.n	800be10 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x70>
 800bdfa:	68b8      	ldr	r0, [r7, #8]
 800bdfc:	f7ff ffad 	bl	800bd5a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800be00:	4604      	mov	r4, r0
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff ffc0 	bl	800bd8a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4colsEv>
 800be0a:	4603      	mov	r3, r0
 800be0c:	429c      	cmp	r4, r3
 800be0e:	d005      	beq.n	800be1c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x7c>
 800be10:	4b05      	ldr	r3, [pc, #20]	; (800be28 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x88>)
 800be12:	4a06      	ldr	r2, [pc, #24]	; (800be2c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x8c>)
 800be14:	2174      	movs	r1, #116	; 0x74
 800be16:	4806      	ldr	r0, [pc, #24]	; (800be30 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEEC1ERSJ_RSN_RKS3_+0x90>)
 800be18:	f011 fdf4 	bl	801da04 <__assert_func>
    }
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bdb0      	pop	{r4, r5, r7, pc}
 800be26:	bf00      	nop
 800be28:	0801f86c 	.word	0x0801f86c
 800be2c:	0802539c 	.word	0x0802539c
 800be30:	0801fad0 	.word	0x0801fad0

0800be34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 f809 	bl	800be54 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800be42:	4603      	mov	r3, r0
 800be44:	4618      	mov	r0, r3
 800be46:	f000 fdee 	bl	800ca26 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>
 800be4a:	4603      	mov	r3, r0
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4618      	mov	r0, r3
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800be6a:	b580      	push	{r7, lr}
 800be6c:	b082      	sub	sp, #8
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	3304      	adds	r3, #4
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff ff62 	bl	800bd40 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4rowsEv>
 800be7c:	4603      	mov	r3, r0
    }
 800be7e:	4618      	mov	r0, r3
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>:
struct evaluator<const T>
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4618      	mov	r0, r3
 800be92:	f7fc fc30 	bl	80086f6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel>, IndexBased>
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff ffeb 	bl	800be86 <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEED1Ev>
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fdeb 	bl	800ca8c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4618      	mov	r0, r3
 800beba:	3708      	adds	r7, #8
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /*HasDirectAccess*/ false>
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4618      	mov	r0, r3
 800becc:	f7ff ffe8 	bl	800bea0 <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfED1Ev>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800beda:	b580      	push	{r7, lr}
 800bedc:	b082      	sub	sp, #8
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7ff ffeb 	bl	800bec0 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EED1Ev>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4618      	mov	r0, r3
 800bf00:	f7ff ffeb 	bl	800beda <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b082      	sub	sp, #8
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff ffeb 	bl	800bef4 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fda9 	bl	800ca76 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b082      	sub	sp, #8
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff ffe8 	bl	800bf0e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfED1Ev>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<const T>
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f7ff ffeb 	bl	800bf2e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fd99 	bl	800caa2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff ffec 	bl	800bf62 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff ffeb 	bl	800bf7a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EED1Ev>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b082      	sub	sp, #8
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7ff ffeb 	bl	800bf94 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>:
  struct Data
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3320      	adds	r3, #32
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7ff ffea 	bl	800bfae <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff ffb2 	bl	800bf48 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3708      	adds	r7, #8
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7ff ffe5 	bl	800bfc8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataD1Ev>
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fd2e 	bl	800ca60 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4618      	mov	r0, r3
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4618      	mov	r0, r3
 800c01a:	f7ff ffe8 	bl	800bfee <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffED1Ev>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	4618      	mov	r0, r3
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff ffeb 	bl	800c00e <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4618      	mov	r0, r3
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
	...

0800c044 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c044:	b580      	push	{r7, lr}
 800c046:	ed2d 8b02 	vpush	{d8}
 800c04a:	b08c      	sub	sp, #48	; 0x30
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f7fe fef9 	bl	800ae4a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4rowsEv>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	dd05      	ble.n	800c06a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff fee8 	bl	800be34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE4colsEv>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	dc06      	bgt.n	800c078 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c06a:	4b16      	ldr	r3, [pc, #88]	; (800c0c4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c06c:	4a16      	ldr	r2, [pc, #88]	; (800c0c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c06e:	f240 119b 	movw	r1, #411	; 0x19b
 800c072:	4816      	ldr	r0, [pc, #88]	; (800c0cc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c074:	f011 fcc6 	bl	801da04 <__assert_func>
 800c078:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff feea 	bl	800be54 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c080:	4602      	mov	r2, r0
 800c082:	f107 0308 	add.w	r3, r7, #8
 800c086:	4611      	mov	r1, r2
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 fcda 	bl	800ca42 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7ff fee0 	bl	800be54 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE7derivedEv>
 800c094:	4602      	mov	r2, r0
 800c096:	f107 0308 	add.w	r3, r7, #8
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fd0b 	bl	800cab8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>
 800c0a2:	eeb0 8a40 	vmov.f32	s16, s0
 800c0a6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c0a8:	f107 0308 	add.w	r3, r7, #8
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7ff ffbb 	bl	800c028 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c0b2:	eef0 7a48 	vmov.f32	s15, s16
}
 800c0b6:	eeb0 0a67 	vmov.f32	s0, s15
 800c0ba:	3730      	adds	r7, #48	; 0x30
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	ecbd 8b02 	vpop	{d8}
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	080248ec 	.word	0x080248ec
 800c0c8:	08025784 	.word	0x08025784
 800c0cc:	08024af8 	.word	0x08024af8

0800c0d0 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c0d8:	2202      	movs	r2, #2
 800c0da:	2101      	movs	r1, #1
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7fd fc3e 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fcf9 	bl	800cada <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>
  }
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	68b9      	ldr	r1, [r7, #8]
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fcf9 	bl	800cafa <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c112:	b480      	push	{r7}
 800c114:	b083      	sub	sp, #12
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
    }
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4618      	mov	r0, r3
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	68b9      	ldr	r1, [r7, #8]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fd13 	bl	800cb66 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c14a:	b480      	push	{r7}
 800c14c:	b083      	sub	sp, #12
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
    }
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4colsEv>:
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	f7fa f897 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c16c:	4603      	mov	r3, r0
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c176:	b580      	push	{r7, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	f7fa f894 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c182:	4603      	mov	r3, r0
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b082      	sub	sp, #8
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4618      	mov	r0, r3
 800c198:	f7fe ff59 	bl	800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c19c:	4603      	mov	r3, r0
    }
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	6039      	str	r1, [r7, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fd0c 	bl	800cbd2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr

0800c1da <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>:
 800c1da:	b480      	push	{r7}
 800c1dc:	b083      	sub	sp, #12
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEED1Ev>:
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEED1Ev>:
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f000 fce0 	bl	800cbf0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800c230:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c234:	eeb0 0a67 	vmov.f32	s0, s15
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800c23e:	b480      	push	{r7}
 800c240:	b083      	sub	sp, #12
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EEENS_9TransposeIS2_EELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3308      	adds	r3, #8
 800c260:	4618      	mov	r0, r3
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4618      	mov	r0, r3
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr

0800c282 <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1INS_7ProductIS1_S1_Li0EEEEERKT_>:
    explicit Matrix(const T& x)
 800c282:	b580      	push	{r7, lr}
 800c284:	b082      	sub	sp, #8
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	6039      	str	r1, [r7, #0]
    {
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4618      	mov	r0, r3
 800c290:	f7f8 f937 	bl	8004502 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1Ev>
      Base::_check_template_params();
 800c294:	f7f8 f945 	bl	8004522 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 fccb 	bl	800cc38 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>
    }
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 fcc9 	bl	800cc52 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b086      	sub	sp, #24
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	60f8      	str	r0, [r7, #12]
 800c2d2:	60b9      	str	r1, [r7, #8]
 800c2d4:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 800c2d6:	6879      	ldr	r1, [r7, #4]
 800c2d8:	68b8      	ldr	r0, [r7, #8]
 800c2da:	f000 fcd0 	bl	800cc7e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 800c2de:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 800c2e0:	6879      	ldr	r1, [r7, #4]
 800c2e2:	68b8      	ldr	r0, [r7, #8]
 800c2e4:	f000 fcd7 	bl	800cc96 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 800c2e8:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	6979      	ldr	r1, [r7, #20]
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 fcdd 	bl	800ccae <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 800c2f4:	bf00      	nop
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c304:	2201      	movs	r2, #1
 800c306:	2100      	movs	r1, #0
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7ff ffde 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fcf3 	bl	800ccfa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>
  }
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800c31c:	b590      	push	{r4, r7, lr}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c328:	68b8      	ldr	r0, [r7, #8]
 800c32a:	f7fb fc65 	bl	8007bf8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4rowsEv>
 800c32e:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800c330:	68b8      	ldr	r0, [r7, #8]
 800c332:	f7f9 fab8 	bl	80058a6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE4colsEv>
 800c336:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7f8 fa89 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800c340:	4602      	mov	r2, r0
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	4293      	cmp	r3, r2
 800c346:	d107      	bne.n	800c358 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x3c>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7f8 fa76 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800c350:	4602      	mov	r2, r0
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	4293      	cmp	r3, r2
 800c356:	d001      	beq.n	800c35c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x40>
 800c358:	2301      	movs	r3, #1
 800c35a:	e000      	b.n	800c35e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x42>
 800c35c:	2300      	movs	r3, #0
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d005      	beq.n	800c36e <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_+0x52>
      dst.resize(dstRows, dstCols);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	6979      	ldr	r1, [r7, #20]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fb f97d 	bl	8007668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800c36e:	68b8      	ldr	r0, [r7, #8]
 800c370:	f000 fcd3 	bl	800cd1a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>
 800c374:	4604      	mov	r4, r0
 800c376:	68b8      	ldr	r0, [r7, #8]
 800c378:	f000 fcdb 	bl	800cd32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>
 800c37c:	4603      	mov	r3, r0
 800c37e:	461a      	mov	r2, r3
 800c380:	4621      	mov	r1, r4
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f000 fce1 	bl	800cd4a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>
  }
 800c388:	bf00      	nop
 800c38a:	371c      	adds	r7, #28
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd90      	pop	{r4, r7, pc}

0800c390 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_>:
  static void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename XprType::Scalar> &)
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800c39c:	68b8      	ldr	r0, [r7, #8]
 800c39e:	f7f9 fa90 	bl	80058c2 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4rowsEv>
 800c3a2:	61f8      	str	r0, [r7, #28]
    Index dstCols = src.cols();
 800c3a4:	68b8      	ldr	r0, [r7, #8]
 800c3a6:	f7fb fc35 	bl	8007c14 <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE4colsEv>
 800c3aa:	61b8      	str	r0, [r7, #24]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f9 f999 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d107      	bne.n	800c3cc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x3c>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f9 f99c 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d001      	beq.n	800c3d0 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x40>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e000      	b.n	800c3d2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x42>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d005      	beq.n	800c3e2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7InverseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS8_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS9_EELi0EEEKS3_EEEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSI_RKSK_+0x52>
      dst.resize(dstRows, dstCols);
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	69ba      	ldr	r2, [r7, #24]
 800c3da:	69f9      	ldr	r1, [r7, #28]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f000 fcd3 	bl	800cd88 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    const int Size = EIGEN_PLAIN_ENUM_MIN(XprType::ColsAtCompileTime,DstXprType::ColsAtCompileTime);
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	617b      	str	r3, [r7, #20]
    ActualXprType actual_xpr(src.nestedExpression());
 800c3e6:	68b8      	ldr	r0, [r7, #8]
 800c3e8:	f000 fd00 	bl	800cdec <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	f107 0310 	add.w	r3, r7, #16
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 fd04 	bl	800ce02 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>
    compute_inverse<ActualXprTypeCleanded, DstXprType>::run(actual_xpr, dst);
 800c3fa:	f107 0310 	add.w	r3, r7, #16
 800c3fe:	68f9      	ldr	r1, [r7, #12]
 800c400:	4618      	mov	r0, r3
 800c402:	f000 fd13 	bl	800ce2c <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>
  }
 800c406:	bf00      	nop
 800c408:	3720      	adds	r7, #32
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE9innerSizeEv>:
    Index innerSize() const
 800c40e:	b580      	push	{r7, lr}
 800c410:	b082      	sub	sp, #8
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fd47 	bl	800ceaa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>
 800c41c:	4603      	mov	r3, r0
    }
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	60f8      	str	r0, [r7, #12]
 800c42e:	60b9      	str	r1, [r7, #8]
 800c430:	607a      	str	r2, [r7, #4]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	68b9      	ldr	r1, [r7, #8]
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fd58 	bl	800ceee <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
    }
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4618      	mov	r0, r3
 800c454:	370c      	adds	r7, #12
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ENS_5DenseEEC1ERS3_i>:
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	607a      	str	r2, [r7, #4]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	68b9      	ldr	r1, [r7, #8]
 800c470:	4618      	mov	r0, r3
 800c472:	f000 fd6d 	bl	800cf50 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
    }
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	370c      	adds	r7, #12
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	f7f9 ff04 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	f7f9 fef9 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b082      	sub	sp, #8
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff f8d8 	bl	800b682 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 800c4d2:	4603      	mov	r3, r0
    }
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fd61 	bl	800cfb2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800c4fa:	b480      	push	{r7}
 800c4fc:	b083      	sub	sp, #12
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>:
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEED1Ev>:
 800c526:	b480      	push	{r7}
 800c528:	b083      	sub	sp, #12
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4618      	mov	r0, r3
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEED1Ev>:
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4618      	mov	r0, r3
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800c55e:	68b9      	ldr	r1, [r7, #8]
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f000 fd35 	bl	800cfd0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800c566:	eef0 7a40 	vmov.f32	s15, s0
  }
 800c56a:	eeb0 0a67 	vmov.f32	s0, s15
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKS2_KNS_7ProductINS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800c574:	b5b0      	push	{r4, r5, r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7fe ff7b 	bl	800b47a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800c584:	4604      	mov	r4, r0
 800c586:	6838      	ldr	r0, [r7, #0]
 800c588:	f7f9 fade 	bl	8005b48 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS5_IfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEEE7derivedEv>
 800c58c:	4605      	mov	r5, r0
 800c58e:	f107 030c 	add.w	r3, r7, #12
 800c592:	4618      	mov	r0, r3
 800c594:	f7fa f8e7 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800c598:	f107 030c 	add.w	r3, r7, #12
 800c59c:	461a      	mov	r2, r3
 800c59e:	4629      	mov	r1, r5
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f000 fd26 	bl	800cff2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7fe ff67 	bl	800b47a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800c5ac:	4603      	mov	r3, r0
    }
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bdb0      	pop	{r4, r5, r7, pc}

0800c5b6 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductIS5_NS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKNS4_IfLi1ELi1ELi0ELi1ELi1EEEKNS7_INS4_IfLi1ELi3ELi1ELi1ELi3EEES5_Li0EEEEELi1EEEEENS0_13add_assign_opIffEELi0EEELi3ELi3EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800c5b6:	b480      	push	{r7}
 800c5b8:	b083      	sub	sp, #12
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	bf00      	nop
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800c5ca:	b590      	push	{r4, r7, lr}
 800c5cc:	b087      	sub	sp, #28
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	60f8      	str	r0, [r7, #12]
 800c5d2:	60b9      	str	r1, [r7, #8]
 800c5d4:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800c5d6:	68b8      	ldr	r0, [r7, #8]
 800c5d8:	f000 fd1c 	bl	800d014 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>
 800c5dc:	4604      	mov	r4, r0
 800c5de:	f107 0310 	add.w	r3, r7, #16
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fa f8bf 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800c5e8:	f107 0310 	add.w	r3, r7, #16
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f7fa f99f 	bl	8006934 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800c5f6:	68b8      	ldr	r0, [r7, #8]
 800c5f8:	f000 fd18 	bl	800d02c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	f107 0314 	add.w	r3, r7, #20
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fd1e 	bl	800d044 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800c608:	f107 0314 	add.w	r3, r7, #20
 800c60c:	461a      	mov	r2, r3
 800c60e:	4621      	mov	r1, r4
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f000 fd22 	bl	800d05a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800c616:	bf00      	nop
 800c618:	371c      	adds	r7, #28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd90      	pop	{r4, r7, pc}
	...

0800c620 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	68b9      	ldr	r1, [r7, #8]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 fd22 	bl	800d07c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	db07      	blt.n	800c64e <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x2e>
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	4618      	mov	r0, r3
 800c642:	f7f8 f855 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800c646:	4602      	mov	r2, r0
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4293      	cmp	r3, r2
 800c64c:	db05      	blt.n	800c65a <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x3a>
 800c64e:	4b05      	ldr	r3, [pc, #20]	; (800c664 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x44>)
 800c650:	4a05      	ldr	r2, [pc, #20]	; (800c668 <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x48>)
 800c652:	2178      	movs	r1, #120	; 0x78
 800c654:	4805      	ldr	r0, [pc, #20]	; (800c66c <_ZN5Eigen5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEC1ERS3_i+0x4c>)
 800c656:	f011 f9d5 	bl	801da04 <__assert_func>
    }
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	080243f0 	.word	0x080243f0
 800c668:	08025a18 	.word	0x08025a18
 800c66c:	08024574 	.word	0x08024574

0800c670 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>:
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4618      	mov	r0, r3
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
 800c686:	b580      	push	{r7, lr}
 800c688:	b082      	sub	sp, #8
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 fd05 	bl	800d09e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4618      	mov	r0, r3
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff ffed 	bl	800c686 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>:
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
 800c6be:	f7f9 fdec 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	f7f9 fde9 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
	...

0800c6e4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800c6e4:	b5b0      	push	{r4, r5, r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f7ff ffd3 	bl	800c69e <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEENS_5DenseEEC1Ev>
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	4614      	mov	r4, r2
 800c6fe:	461d      	mov	r5, r3
 800c700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c704:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c708:	e884 0003 	stmia.w	r4, {r0, r1}
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f103 0218 	add.w	r2, r3, #24
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4614      	mov	r4, r2
 800c716:	461d      	mov	r5, r3
 800c718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c71a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c71c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c720:	e884 0003 	stmia.w	r4, {r0, r1}
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	3330      	adds	r3, #48	; 0x30
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f8 fb16 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800c730:	68b8      	ldr	r0, [r7, #8]
 800c732:	f7fe fc7f 	bl	800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800c736:	4604      	mov	r4, r0
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff ffbb 	bl	800c6b6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 800c740:	4603      	mov	r3, r0
 800c742:	429c      	cmp	r4, r3
 800c744:	d10a      	bne.n	800c75c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x78>
 800c746:	68b8      	ldr	r0, [r7, #8]
 800c748:	f7fe fc81 	bl	800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800c74c:	4604      	mov	r4, r0
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff ffbb 	bl	800c6cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 800c756:	4603      	mov	r3, r0
 800c758:	429c      	cmp	r4, r3
 800c75a:	d005      	beq.n	800c768 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x84>
 800c75c:	4b05      	ldr	r3, [pc, #20]	; (800c774 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x90>)
 800c75e:	4a06      	ldr	r2, [pc, #24]	; (800c778 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x94>)
 800c760:	2174      	movs	r1, #116	; 0x74
 800c762:	4806      	ldr	r0, [pc, #24]	; (800c77c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEEC1ERSC_RSE_RKS3_+0x98>)
 800c764:	f011 f94e 	bl	801da04 <__assert_func>
    }
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	4618      	mov	r0, r3
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bdb0      	pop	{r4, r5, r7, pc}
 800c772:	bf00      	nop
 800c774:	0801f86c 	.word	0x0801f86c
 800c778:	08025af4 	.word	0x08025af4
 800c77c:	0801fad0 	.word	0x0801fad0

0800c780 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f809 	bl	800c7a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c78e:	4603      	mov	r3, r0
 800c790:	4618      	mov	r0, r3
 800c792:	f000 fc8f 	bl	800d0b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>
 800c796:	4603      	mov	r3, r0
 800c798:	4618      	mov	r0, r3
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fe fc37 	bl	800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800c7c6:	4603      	mov	r3, r0
    }
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fc92 	bl	800d102 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff ffec 	bl	800c7d0 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff ffeb 	bl	800c7e8 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EED1Ev>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4618      	mov	r0, r3
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff ffeb 	bl	800c802 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}

0800c836 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800c836:	b580      	push	{r7, lr}
 800c838:	b082      	sub	sp, #8
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	330c      	adds	r3, #12
 800c842:	4618      	mov	r0, r3
 800c844:	f7ff ffea 	bl	800c81c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	3304      	adds	r3, #4
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe fce7 	bl	800b220 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4618      	mov	r0, r3
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4618      	mov	r0, r3
 800c868:	f7ff ffe5 	bl	800c836 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fc3d 	bl	800d0ec <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4618      	mov	r0, r3
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4618      	mov	r0, r3
 800c888:	f7ff ffe8 	bl	800c85c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7ff ffeb 	bl	800c87c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3708      	adds	r7, #8
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	ed2d 8b02 	vpush	{d8}
 800c8b6:	b088      	sub	sp, #32
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff f938 	bl	800bb34 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4rowsEv>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	dd05      	ble.n	800c8d6 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff ff58 	bl	800c780 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE4colsEv>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	dc06      	bgt.n	800c8e4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800c8d6:	4b16      	ldr	r3, [pc, #88]	; (800c930 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800c8d8:	4a16      	ldr	r2, [pc, #88]	; (800c934 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800c8da:	f240 119b 	movw	r1, #411	; 0x19b
 800c8de:	4816      	ldr	r0, [pc, #88]	; (800c938 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800c8e0:	f011 f890 	bl	801da04 <__assert_func>
 800c8e4:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff ff5a 	bl	800c7a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	f107 030c 	add.w	r3, r7, #12
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 fbea 	bl	800d0ce <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7ff ff50 	bl	800c7a0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE7derivedEv>
 800c900:	4602      	mov	r2, r0
 800c902:	f107 030c 	add.w	r3, r7, #12
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fc05 	bl	800d118 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 800c90e:	eeb0 8a40 	vmov.f32	s16, s0
 800c912:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800c914:	f107 030c 	add.w	r3, r7, #12
 800c918:	4618      	mov	r0, r3
 800c91a:	f7ff ffbc 	bl	800c896 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800c91e:	eef0 7a48 	vmov.f32	s15, s16
}
 800c922:	eeb0 0a67 	vmov.f32	s0, s15
 800c926:	3720      	adds	r7, #32
 800c928:	46bd      	mov	sp, r7
 800c92a:	ecbd 8b02 	vpop	{d8}
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	080248ec 	.word	0x080248ec
 800c934:	08025d3c 	.word	0x08025d3c
 800c938:	08024af8 	.word	0x08024af8

0800c93c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800c944:	2202      	movs	r2, #2
 800c946:	2101      	movs	r1, #1
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f7fd facf 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fbf3 	bl	800d13a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>
  }
 800c954:	bf00      	nop
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <_ZNK5Eigen14CwiseNullaryOpINS_8internal18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:

    /** \returns the functor representing the nullary operation */
    EIGEN_DEVICE_FUNC
    const NullaryOp& functor() const { return m_functor; }
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	3304      	adds	r3, #4
 800c968:	4618      	mov	r0, r3
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <_ZN5Eigen8internal14evaluator_baseINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4618      	mov	r0, r3
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <_ZN5Eigen9BlockImplIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ENS_5DenseEEC1ERSE_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b084      	sub	sp, #16
 800c98e:	af00      	add	r7, sp, #0
 800c990:	60f8      	str	r0, [r7, #12]
 800c992:	60b9      	str	r1, [r7, #8]
 800c994:	607a      	str	r2, [r7, #4]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	68b9      	ldr	r1, [r7, #8]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 fbe8 	bl	800d172 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS4_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
    }
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ENS_5DenseEEC1ERS5_i>:
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	607a      	str	r2, [r7, #4]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	68b9      	ldr	r1, [r7, #8]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 fbf7 	bl	800d1c8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3710      	adds	r7, #16
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS1_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS2_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
    }
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	370c      	adds	r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4colsEv>:
      : m_xpr(xpr), m_startRow(startRow), m_startCol(startCol),
                    m_blockRows(blockRows), m_blockCols(blockCols)
    {}

    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
    EIGEN_DEVICE_FUNC inline Index cols() const { return m_blockCols.value(); }
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b082      	sub	sp, #8
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	f7f9 fc52 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ca06:	4603      	mov	r3, r0
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE4rowsEv>:
    EIGEN_DEVICE_FUNC inline Index rows() const { return m_blockRows.value(); }
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	f7f9 fc47 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b082      	sub	sp, #8
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	3304      	adds	r3, #4
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff f991 	bl	800bd5a <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE4colsEv>
 800ca38:	4603      	mov	r3, r0
    }
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b082      	sub	sp, #8
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 fbeb 	bl	800d22c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEED1Ev>:
 800ca76:	b480      	push	{r7}
 800ca78:	b083      	sub	sp, #12
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4618      	mov	r0, r3
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEED1Ev>:
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEED1Ev>:
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4618      	mov	r0, r3
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi2EE3runISS_EEfRKST_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 fbbf 	bl	800d24a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>
 800cacc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cad0:	eeb0 0a67 	vmov.f32	s0, s15
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800cada:	b580      	push	{r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cae2:	2200      	movs	r2, #0
 800cae4:	2102      	movs	r1, #2
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7fc ff39 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f000 fbbd 	bl	800d26c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>
  }
 800caf2:	bf00      	nop
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERS4_i>:
    EIGEN_INHERIT_ASSIGNMENT_OPERATORS(BlockImpl_dense)

    /** Column or Row constructor
      */
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    BlockImpl_dense(XprType& xpr, Index i)
 800cafa:	b5b0      	push	{r4, r5, r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	60f8      	str	r0, [r7, #12]
 800cb02:	60b9      	str	r1, [r7, #8]
 800cb04:	607a      	str	r2, [r7, #4]
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
             BlockRows==1 ? 1 : xpr.rows(),
             BlockCols==1 ? 1 : xpr.cols()),
        m_xpr(xpr),
        m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? i : 0),
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cb06:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fa ff34 	bl	8007978 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800cb10:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800cb12:	68b8      	ldr	r0, [r7, #8]
 800cb14:	f000 fbba 	bl	800d28c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800cb18:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	fb02 f303 	mul.w	r3, r2, r3
 800cb20:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cb22:	441d      	add	r5, r3
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7f7 fde2 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2201      	movs	r2, #1
 800cb30:	4629      	mov	r1, r5
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 fbc2 	bl	800d2bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	609a      	str	r2, [r3, #8]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	330c      	adds	r3, #12
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fbf7 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3310      	adds	r3, #16
 800cb4e:	2100      	movs	r1, #0
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 fbf1 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
    {
      init();
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f000 fbfd 	bl	800d356 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>
    }
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bdb0      	pop	{r4, r5, r7, pc}

0800cb66 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800cb66:	b5b0      	push	{r4, r5, r7, lr}
 800cb68:	b084      	sub	sp, #16
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	60f8      	str	r0, [r7, #12]
 800cb6e:	60b9      	str	r1, [r7, #8]
 800cb70:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cb72:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7f9 fe9d 	bl	80068b6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800cb7c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800cb7e:	68b8      	ldr	r0, [r7, #8]
 800cb80:	f7f9 ff6a 	bl	8006a58 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800cb84:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	fb02 f303 	mul.w	r3, r2, r3
 800cb8c:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cb8e:	441d      	add	r5, r3
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7f7 fe5d 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 fc00 	bl	800d3a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	609a      	str	r2, [r3, #8]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	330c      	adds	r3, #12
 800cbae:	2100      	movs	r1, #0
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 fbc1 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3310      	adds	r3, #16
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f000 fc2f 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 fc46 	bl	800d454 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bdb0      	pop	{r4, r5, r7, pc}

0800cbd2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
 800cbda:	6039      	str	r1, [r7, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6839      	ldr	r1, [r7, #0]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 fc47 	bl	800d474 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fc4b 	bl	800d498 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800cc02:	eef0 7a40 	vmov.f32	s15, s0
 800cc06:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fc54 	bl	800d4ba <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800cc12:	eef0 7a40 	vmov.f32	s15, s0
 800cc16:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800cc1a:	f107 020c 	add.w	r2, r7, #12
 800cc1e:	f107 0308 	add.w	r3, r7, #8
 800cc22:	4619      	mov	r1, r3
 800cc24:	6838      	ldr	r0, [r7, #0]
 800cc26:	f7fb fefe 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800cc2a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cc2e:	eeb0 0a67 	vmov.f32	s0, s15
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6_init1INS_7ProductIS2_S2_Li0EEES6_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fc5c 	bl	800d502 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800cc4a:	bf00      	nop
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}

0800cc52 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800cc52:	b590      	push	{r4, r7, lr}
 800cc54:	b083      	sub	sp, #12
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	6039      	str	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fc7d 	bl	800d55c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>
 800cc62:	687c      	ldr	r4, [r7, #4]
 800cc64:	6838      	ldr	r0, [r7, #0]
 800cc66:	f000 fc6d 	bl	800d544 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f7fa f9e0 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4618      	mov	r0, r3
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd90      	pop	{r4, r7, pc}

0800cc7e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 800cc7e:	b480      	push	{r7}
 800cc80:	b083      	sub	sp, #12
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
 800cc86:	6039      	str	r1, [r7, #0]
      : inner;
 800cc88:	687b      	ldr	r3, [r7, #4]
  }
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	370c      	adds	r7, #12
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
 800cc9e:	6039      	str	r1, [r7, #0]
      : outer;
 800cca0:	683b      	ldr	r3, [r7, #0]
  }
 800cca2:	4618      	mov	r0, r3
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 800ccae:	b5b0      	push	{r4, r5, r7, lr}
 800ccb0:	b086      	sub	sp, #24
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	60f8      	str	r0, [r7, #12]
 800ccb6:	60b9      	str	r1, [r7, #8]
 800ccb8:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	689c      	ldr	r4, [r3, #8]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	68b9      	ldr	r1, [r7, #8]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 fc53 	bl	800d572 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>
 800cccc:	4605      	mov	r5, r0
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	68b9      	ldr	r1, [r7, #8]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 fc63 	bl	800d5a2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>
 800ccdc:	eef0 7a40 	vmov.f32	s15, s0
 800cce0:	edc7 7a05 	vstr	s15, [r7, #20]
 800cce4:	f107 0314 	add.w	r3, r7, #20
 800cce8:	461a      	mov	r2, r3
 800ccea:	4629      	mov	r1, r5
 800ccec:	4620      	mov	r0, r4
 800ccee:	f7fb f8a9 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 800ccf2:	bf00      	nop
 800ccf4:	3718      	adds	r7, #24
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bdb0      	pop	{r4, r5, r7, pc}

0800ccfa <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800cd02:	2202      	movs	r2, #2
 800cd04:	2100      	movs	r1, #0
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7ff fadf 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 fc7b 	bl	800d608 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>
  }
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800cd1a:	b480      	push	{r7}
 800cd1c:	b083      	sub	sp, #12
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800cd32:	b480      	push	{r7}
 800cd34:	b083      	sub	sp, #12
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	4618      	mov	r0, r3
 800cd40:	370c      	adds	r7, #12
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEENS_10DenseShapeES7_Li3EE6evalToINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEvRT_RKS3_RKS6_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b088      	sub	sp, #32
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60f8      	str	r0, [r7, #12]
 800cd52:	60b9      	str	r1, [r7, #8]
 800cd54:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800cd56:	f107 0314 	add.w	r3, r7, #20
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	68b9      	ldr	r1, [r7, #8]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 fc62 	bl	800d628 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>
 800cd64:	f107 031c 	add.w	r3, r7, #28
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7f9 fcfc 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800cd6e:	f107 021c 	add.w	r2, r7, #28
 800cd72:	f107 0314 	add.w	r3, r7, #20
 800cd76:	4619      	mov	r1, r3
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f000 fc6c 	bl	800d656 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800cd7e:	bf00      	nop
 800cd80:	3720      	adds	r7, #32
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
	...

0800cd88 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d108      	bne.n	800cdac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d105      	bne.n	800cdac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	db02      	blt.n	800cdac <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x24>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	da06      	bge.n	800cdba <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x32>
 800cdac:	4b0c      	ldr	r3, [pc, #48]	; (800cde0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x58>)
 800cdae:	4a0d      	ldr	r2, [pc, #52]	; (800cde4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x5c>)
 800cdb0:	f240 1111 	movw	r1, #273	; 0x111
 800cdb4:	480c      	ldr	r0, [pc, #48]	; (800cde8 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii+0x60>)
 800cdb6:	f010 fe25 	bl	801da04 <__assert_func>
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	617b      	str	r3, [r7, #20]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	613b      	str	r3, [r7, #16]
  }
 800cdc2:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	fb02 f103 	mul.w	r1, r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	f000 fc51 	bl	800d678 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>
    }
 800cdd6:	bf00      	nop
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	080222fc 	.word	0x080222fc
 800cde4:	08025f04 	.word	0x08025f04
 800cde8:	08022518 	.word	0x08022518

0800cdec <_ZNK5Eigen7InverseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE16nestedExpressionEv>:
  EIGEN_DEVICE_FUNC const XprTypeNestedCleaned& nestedExpression() const { return m_xpr; }
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS7_INS0_IfLi1ELi3ELi1ELi1ELi3EEENS0_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS1_EEEERKT_>:
    explicit Matrix(const T& x)
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
 800ce0a:	6039      	str	r1, [r7, #0]
    {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7f7 fb9a 	bl	8004548 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 800ce14:	f7f7 fba8 	bl	8004568 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init1<T>(x);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 fc38 	bl	800d692 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>
    }
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <_ZN5Eigen8internal15compute_inverseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_Li1EE3runERKS3_RS3_>:
  static inline void run(const MatrixType& matrix, ResultType& result)
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	ed2d 8b02 	vpush	{d8}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800ce3a:	f107 030c 	add.w	r3, r7, #12
 800ce3e:	6879      	ldr	r1, [r7, #4]
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fc ff50 	bl	8009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    result.coeffRef(0,0) = Scalar(1) / matrixEval.coeff(0,0);
 800ce46:	f107 030c 	add.w	r3, r7, #12
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 fc2c 	bl	800d6ac <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>
 800ce54:	4603      	mov	r3, r0
 800ce56:	ed93 8a00 	vldr	s16, [r3]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2100      	movs	r1, #0
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7f9 f968 	bl	8006136 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800ce66:	4603      	mov	r3, r0
 800ce68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce6c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800ce70:	edc3 7a00 	vstr	s15, [r3]
    internal::evaluator<MatrixType> matrixEval(matrix);
 800ce74:	f107 030c 	add.w	r3, r7, #12
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fb fe1b 	bl	8008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  }
 800ce7e:	bf00      	nop
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	ecbd 8b02 	vpop	{d8}
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b082      	sub	sp, #8
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7f8 fbe9 	bl	800566a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7f8 fc23 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800cea0:	4603      	mov	r3, r0
 800cea2:	4618      	mov	r0, r3
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 800ceaa:	b590      	push	{r4, r7, lr}
 800ceac:	b083      	sub	sp, #12
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff ffe9 	bl	800ce8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800ceb8:	4604      	mov	r4, r0
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f807 	bl	800cece <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800cec0:	4603      	mov	r3, r0
 800cec2:	fb04 f303 	mul.w	r3, r4, r3
 800cec6:	4618      	mov	r0, r3
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd90      	pop	{r4, r7, pc}

0800cece <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800cece:	b580      	push	{r7, lr}
 800ced0:	b082      	sub	sp, #8
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7f8 fbc7 	bl	800566a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800cedc:	4603      	mov	r3, r0
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f8 fc0c 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800cee4:	4603      	mov	r3, r0
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800ceee:	b5b0      	push	{r4, r5, r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	60f8      	str	r0, [r7, #12]
 800cef6:	60b9      	str	r1, [r7, #8]
 800cef8:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cefa:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7f9 fcd9 	bl	80068b6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800cf04:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800cf06:	68b8      	ldr	r0, [r7, #8]
 800cf08:	f000 fa35 	bl	800d376 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800cf0c:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	fb02 f303 	mul.w	r3, r2, r3
 800cf14:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cf16:	18e9      	adds	r1, r5, r3
 800cf18:	2301      	movs	r3, #1
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	f000 fbe9 	bl	800d6f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	609a      	str	r2, [r3, #8]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	330c      	adds	r3, #12
 800cf2c:	6879      	ldr	r1, [r7, #4]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 fa02 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	3310      	adds	r3, #16
 800cf38:	2100      	movs	r1, #0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 fa70 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f000 fc15 	bl	800d770 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>
    }
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bdb0      	pop	{r4, r5, r7, pc}

0800cf50 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800cf50:	b5b0      	push	{r4, r5, r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cf5c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fd fd27 	bl	800a9b4 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4dataEv>
 800cf66:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800cf68:	68b8      	ldr	r0, [r7, #8]
 800cf6a:	f000 fc11 	bl	800d790 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 800cf6e:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	fb02 f303 	mul.w	r3, r2, r3
 800cf76:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800cf78:	18e9      	adds	r1, r5, r3
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f000 fc1e 	bl	800d7c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	609a      	str	r2, [r3, #8]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	330c      	adds	r3, #12
 800cf8e:	6879      	ldr	r1, [r7, #4]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f000 fa45 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	330d      	adds	r3, #13
 800cf9a:	6879      	ldr	r1, [r7, #4]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 fa3f 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f000 fc4a 	bl	800d83c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>
    }
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bdb0      	pop	{r4, r5, r7, pc}

0800cfb2 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	6039      	str	r1, [r7, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f000 fc4b 	bl	800d85c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fc4e 	bl	800d880 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800cfe4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800cfe8:	eeb0 0a67 	vmov.f32	s0, s15
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KNS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b086      	sub	sp, #24
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	68b9      	ldr	r1, [r7, #8]
 800d006:	6978      	ldr	r0, [r7, #20]
 800d008:	f000 fc4d 	bl	800d8a6 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>
}
 800d00c:	bf00      	nop
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4618      	mov	r0, r3
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEKNS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	3304      	adds	r3, #4
 800d038:	4618      	mov	r0, r3
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>:
  * \brief Template functor for scalar/packet assignment with subtraction
  *
  */
template<typename DstScalar,typename SrcScalar> struct sub_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(sub_assign_op)
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4618      	mov	r0, r3
 800d050:	370c      	adds	r7, #12
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b086      	sub	sp, #24
 800d05e:	af00      	add	r7, sp, #0
 800d060:	60f8      	str	r0, [r7, #12]
 800d062:	60b9      	str	r1, [r7, #8]
 800d064:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	68b9      	ldr	r1, [r7, #8]
 800d06e:	6978      	ldr	r0, [r7, #20]
 800d070:	f000 fc44 	bl	800d8fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800d074:	bf00      	nop
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	687a      	ldr	r2, [r7, #4]
 800d08c:	68b9      	ldr	r1, [r7, #8]
 800d08e:	4618      	mov	r0, r3
 800d090:	f000 fc6e 	bl	800d970 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800d09e:	b480      	push	{r7}
 800d0a0:	b083      	sub	sp, #12
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
    }
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fd ffc5 	bl	800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800d0c4:	4603      	mov	r3, r0
    }
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b082      	sub	sp, #8
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f000 fc7d 	bl	800d9dc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800d0ec:	b480      	push	{r7}
 800d0ee:	b083      	sub	sp, #12
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>:
 800d102:	b480      	push	{r7}
 800d104:	b083      	sub	sp, #12
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4618      	mov	r0, r3
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800d124:	68b9      	ldr	r1, [r7, #8]
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f000 fc67 	bl	800d9fa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>
 800d12c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d130:	eeb0 0a67 	vmov.f32	s0, s15
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b082      	sub	sp, #8
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d142:	2200      	movs	r2, #0
 800d144:	2102      	movs	r1, #2
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7fc fed0 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 fc78 	bl	800da42 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>
  }
 800d152:	bf00      	nop
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b082      	sub	sp, #8
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fc7d 	bl	800da62 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4618      	mov	r0, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <_ZN5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERSE_i>:
    inline BlockImpl_dense(XprType& xpr, Index i)
 800d172:	b580      	push	{r7, lr}
 800d174:	b084      	sub	sp, #16
 800d176:	af00      	add	r7, sp, #0
 800d178:	60f8      	str	r0, [r7, #12]
 800d17a:	60b9      	str	r1, [r7, #8]
 800d17c:	607a      	str	r2, [r7, #4]
        m_blockCols(BlockCols==1 ? 1 : xpr.cols())
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f7ff ffeb 	bl	800d15a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	68b9      	ldr	r1, [r7, #8]
 800d188:	4618      	mov	r0, r3
 800d18a:	f7f6 fe79 	bl	8003e80 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEEC1ERKSC_>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	3310      	adds	r3, #16
 800d192:	6879      	ldr	r1, [r7, #4]
 800d194:	4618      	mov	r0, r3
 800d196:	f000 f8cf 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	3314      	adds	r3, #20
 800d19e:	2100      	movs	r1, #0
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 f93d 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	3315      	adds	r3, #21
 800d1aa:	2101      	movs	r1, #1
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f9 f84f 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3316      	adds	r3, #22
 800d1b6:	2101      	movs	r1, #1
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7f9 f849 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
    {}
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d1c8:	b5b0      	push	{r4, r5, r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d1d4:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d1d6:	68b8      	ldr	r0, [r7, #8]
 800d1d8:	f000 fc4e 	bl	800da78 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>
 800d1dc:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d1de:	68b8      	ldr	r0, [r7, #8]
 800d1e0:	f000 fc5e 	bl	800daa0 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 800d1e4:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	fb02 f303 	mul.w	r3, r2, r3
 800d1ec:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d1ee:	18e9      	adds	r1, r5, r3
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f000 fc87 	bl	800db08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	6812      	ldr	r2, [r2, #0]
 800d202:	601a      	str	r2, [r3, #0]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	330c      	adds	r3, #12
 800d208:	2100      	movs	r1, #0
 800d20a:	4618      	mov	r0, r3
 800d20c:	f000 f908 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	3310      	adds	r3, #16
 800d214:	6879      	ldr	r1, [r7, #4]
 800d216:	4618      	mov	r0, r3
 800d218:	f000 f88e 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f000 fcb1 	bl	800db84 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>
    }
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	4618      	mov	r0, r3
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bdb0      	pop	{r4, r5, r7, pc}

0800d22c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1ERKSP_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f000 fcb2 	bl	800dba4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4618      	mov	r0, r3
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS5_IS7_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEELi1ELi1ELb0EEEEEKNS9_IKNS8_ISB_EELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKST_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b082      	sub	sp, #8
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d254:	2200      	movs	r2, #0
 800d256:	2100      	movs	r1, #0
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 fcb5 	bl	800dbc8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 800d25e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d262:	eeb0 0a67 	vmov.f32	s0, s15
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d274:	2201      	movs	r2, #1
 800d276:	2102      	movs	r1, #2
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7fc fb70 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fcb5 	bl	800dbee <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>
  }
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	2301      	movs	r3, #1
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fcaf 	bl	800dc0e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3708      	adds	r7, #8
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
	...

0800d2bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii>:
      checkSanity<Derived>();
    }

    /** \internal Constructor for dynamically sized matrices */
    EIGEN_DEVICE_FUNC
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	607a      	str	r2, [r7, #4]
 800d2c8:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7ff ffe9 	bl	800d2a2 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	601a      	str	r2, [r3, #0]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	3304      	adds	r3, #4
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7f8 ffb7 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	3305      	adds	r3, #5
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7f8 ff97 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
    {
      eigen_assert( (dataPtr == 0)
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d011      	beq.n	800d318 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	db08      	blt.n	800d30c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d105      	bne.n	800d30c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	db02      	blt.n	800d30c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x50>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b03      	cmp	r3, #3
 800d30a:	d005      	beq.n	800d318 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x5c>
 800d30c:	4b07      	ldr	r3, [pc, #28]	; (800d32c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x70>)
 800d30e:	4a08      	ldr	r2, [pc, #32]	; (800d330 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x74>)
 800d310:	21b0      	movs	r1, #176	; 0xb0
 800d312:	4808      	ldr	r0, [pc, #32]	; (800d334 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EEC1EPKfii+0x78>)
 800d314:	f010 fb76 	bl	801da04 <__assert_func>
              || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
                  && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
      checkSanity<Derived>();
 800d318:	2100      	movs	r1, #0
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f000 fc82 	bl	800dc24 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	08025f90 	.word	0x08025f90
 800d330:	0802603c 	.word	0x0802603c
 800d334:	08026140 	.word	0x08026140

0800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>:

template<typename T> class variable_if_dynamic<T, Dynamic>
{
    T m_value;
  public:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW : m_value(value) {}
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	601a      	str	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4618      	mov	r0, r3
 800d34c:	370c      	adds	r7, #12
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE4initEv>:
    }
    #endif

  protected:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    void init()
 800d356:	b580      	push	{r7, lr}
 800d358:	b082      	sub	sp, #8
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
    {
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
                    ? m_xpr.outerStride()
                    : m_xpr.innerStride();
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff ff92 	bl	800d28c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800d368:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	615a      	str	r2, [r3, #20]
    }
 800d36e:	bf00      	nop
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>:
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	2301      	movs	r3, #1
 800d380:	4618      	mov	r0, r3
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fc50 	bl	800dc3a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4618      	mov	r0, r3
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	607a      	str	r2, [r7, #4]
 800d3b0:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f7ff ffea 	bl	800d38c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	68ba      	ldr	r2, [r7, #8]
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7f8 ff29 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3305      	adds	r3, #5
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7f8 ff3d 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d011      	beq.n	800d400 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	db08      	blt.n	800d3f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d105      	bne.n	800d3f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	db02      	blt.n	800d3f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d005      	beq.n	800d400 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d3f4:	4b07      	ldr	r3, [pc, #28]	; (800d414 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800d3f6:	4a08      	ldr	r2, [pc, #32]	; (800d418 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800d3f8:	21b0      	movs	r1, #176	; 0xb0
 800d3fa:	4808      	ldr	r0, [pc, #32]	; (800d41c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800d3fc:	f010 fb02 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 800d400:	2100      	movs	r1, #0
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f000 fc24 	bl	800dc50 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	08025f90 	.word	0x08025f90
 800d418:	08026194 	.word	0x08026194
 800d41c:	08026140 	.word	0x08026140

0800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d005      	beq.n	800d43c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x1c>
 800d430:	4b05      	ldr	r3, [pc, #20]	; (800d448 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x28>)
 800d432:	4a06      	ldr	r2, [pc, #24]	; (800d44c <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x2c>)
 800d434:	2185      	movs	r1, #133	; 0x85
 800d436:	4806      	ldr	r0, [pc, #24]	; (800d450 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei+0x30>)
 800d438:	f010 fae4 	bl	801da04 <__assert_func>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4618      	mov	r0, r3
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop
 800d448:	08021da8 	.word	0x08021da8
 800d44c:	08026298 	.word	0x08026298
 800d450:	08021e20 	.word	0x08021e20

0800d454 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	4618      	mov	r0, r3
 800d462:	f7f9 faf9 	bl	8006a58 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d466:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	615a      	str	r2, [r3, #20]
    }
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fbf1 	bl	800dc66 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6839      	ldr	r1, [r7, #0]
 800d488:	4618      	mov	r0, r3
 800d48a:	f000 fbf7 	bl	800dc7c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4618      	mov	r0, r3
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fc10 	bl	800dccc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800d4ac:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d4b0:	eeb0 0a67 	vmov.f32	s0, s15
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d4ba:	b580      	push	{r7, lr}
 800d4bc:	b084      	sub	sp, #16
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
 800d4c2:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fc13 	bl	800dcf2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 800d4cc:	eef0 7a40 	vmov.f32	s15, s0
 800d4d0:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800d4d4:	6839      	ldr	r1, [r7, #0]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 fc1c 	bl	800dd14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 800d4dc:	eef0 7a40 	vmov.f32	s15, s0
 800d4e0:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800d4e4:	f107 020c 	add.w	r2, r7, #12
 800d4e8:	f107 0308 	add.w	r3, r7, #8
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	6838      	ldr	r0, [r7, #0]
 800d4f0:	f7fb fa99 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800d4f4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d4f8:	eeb0 0a67 	vmov.f32	s0, s15
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE12_set_noaliasINS_7ProductIS2_S2_Li0EEEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800d502:	b5b0      	push	{r4, r5, r7, lr}
 800d504:	b084      	sub	sp, #16
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7f7 fdcd 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d512:	4604      	mov	r4, r0
 800d514:	6838      	ldr	r0, [r7, #0]
 800d516:	f7f7 fdfc 	bl	8005112 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li0EEEE7derivedEv>
 800d51a:	4605      	mov	r5, r0
 800d51c:	f107 030c 	add.w	r3, r7, #12
 800d520:	4618      	mov	r0, r3
 800d522:	f7f9 f920 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d526:	f107 030c 	add.w	r3, r7, #12
 800d52a:	461a      	mov	r2, r3
 800d52c:	4629      	mov	r1, r5
 800d52e:	4620      	mov	r0, r4
 800d530:	f000 fc01 	bl	800dd36 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7f7 fdb9 	bl	80050ac <_ZN5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d53a:	4603      	mov	r3, r0
    }
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bdb0      	pop	{r4, r5, r7, pc}

0800d544 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4618      	mov	r0, r3
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4618      	mov	r0, r3
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEEE8coeffRefEii>:
  Scalar& coeffRef(Index row, Index col)
 800d572:	b590      	push	{r4, r7, lr}
 800d574:	b085      	sub	sp, #20
 800d576:	af00      	add	r7, sp, #0
 800d578:	60f8      	str	r0, [r7, #12]
 800d57a:	60b9      	str	r1, [r7, #8]
 800d57c:	607a      	str	r2, [r7, #4]
      return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681c      	ldr	r4, [r3, #0]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	4618      	mov	r0, r3
 800d586:	f7fb fa08 	bl	800899a <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi3EE11outerStrideEv>
 800d58a:	4602      	mov	r2, r0
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	fb03 f202 	mul.w	r2, r3, r2
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4413      	add	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4423      	add	r3, r4
  }
 800d59a:	4618      	mov	r0, r3
 800d59c:	3714      	adds	r7, #20
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd90      	pop	{r4, r7, pc}

0800d5a2 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li0EEENS_9TransposeIS4_EELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b0a4      	sub	sp, #144	; 0x90
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	60f8      	str	r0, [r7, #12]
 800d5aa:	60b9      	str	r1, [r7, #8]
 800d5ac:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 800d5ae:	68f9      	ldr	r1, [r7, #12]
 800d5b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fd f844 	bl	800a644 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 800d5bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fd f84f 	bl	800a66a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d5d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f000 fbbd 	bl	800dd58 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>
 800d5de:	f107 0314 	add.w	r3, r7, #20
 800d5e2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800d5e6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 fbc7 	bl	800dd7e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 800d5f0:	f107 0314 	add.w	r3, r7, #20
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f000 fbf0 	bl	800ddda <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>
 800d5fa:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d5fe:	eeb0 0a67 	vmov.f32	s0, s15
 800d602:	3790      	adds	r7, #144	; 0x90
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800d610:	2200      	movs	r2, #0
 800d612:	2101      	movs	r1, #1
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f7fe fe58 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fbf8 	bl	800de10 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>
  }
 800d620:	bf00      	nop
 800d622:	3708      	adds	r7, #8
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductINS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS9_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800d628:	b590      	push	{r4, r7, lr}
 800d62a:	b085      	sub	sp, #20
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800d634:	68b8      	ldr	r0, [r7, #8]
 800d636:	f7f7 fc70 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800d63a:	4604      	mov	r4, r0
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7f7 fed1 	bl	80053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800d642:	4603      	mov	r3, r0
 800d644:	461a      	mov	r2, r3
 800d646:	4621      	mov	r1, r4
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f000 fc15 	bl	800de78 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>
}
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	3714      	adds	r7, #20
 800d652:	46bd      	mov	sp, r7
 800d654:	bd90      	pop	{r4, r7, pc}

0800d656 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800d656:	b580      	push	{r7, lr}
 800d658:	b086      	sub	sp, #24
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	60f8      	str	r0, [r7, #12]
 800d65e:	60b9      	str	r1, [r7, #8]
 800d660:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	68b9      	ldr	r1, [r7, #8]
 800d66a:	6978      	ldr	r0, [r7, #20]
 800d66c:	f000 fc32 	bl	800ded4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>
}
 800d670:	bf00      	nop
 800d672:	3718      	adds	r7, #24
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <_ZN5Eigen12DenseStorageIfLi1ELi1ELi1ELi0EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	603b      	str	r3, [r7, #0]
 800d686:	bf00      	nop
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init1INS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EESI_EEvRKNS_9DenseBaseIT0_EE>:
    EIGEN_STRONG_INLINE void _init1(const DenseBase<OtherDerived>& other){
 800d692:	b580      	push	{r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
 800d69a:	6039      	str	r1, [r7, #0]
      this->_set_noalias(other);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fc2b 	bl	800defa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>
    }
 800d6a4:	bf00      	nop
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800d6ac:	b590      	push	{r4, r7, lr}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681c      	ldr	r4, [r3, #0]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7f9 f846 	bl	8006750 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	fb03 f202 	mul.w	r2, r3, r2
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	4423      	add	r3, r4
  }
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd90      	pop	{r4, r7, pc}

0800d6dc <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 fc29 	bl	800df3c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
 800d700:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f7ff ffea 	bl	800d6dc <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	3304      	adds	r3, #4
 800d712:	6879      	ldr	r1, [r7, #4]
 800d714:	4618      	mov	r0, r3
 800d716:	f7f8 fd9b 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	3305      	adds	r3, #5
 800d71e:	6839      	ldr	r1, [r7, #0]
 800d720:	4618      	mov	r0, r3
 800d722:	f7f8 fd95 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d011      	beq.n	800d750 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	db08      	blt.n	800d744 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d105      	bne.n	800d744 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	db02      	blt.n	800d744 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d005      	beq.n	800d750 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800d744:	4b07      	ldr	r3, [pc, #28]	; (800d764 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800d746:	4a08      	ldr	r2, [pc, #32]	; (800d768 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800d748:	21b0      	movs	r1, #176	; 0xb0
 800d74a:	4808      	ldr	r0, [pc, #32]	; (800d76c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800d74c:	f010 f95a 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 800d750:	2100      	movs	r1, #0
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	f000 fbfd 	bl	800df52 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	08025f90 	.word	0x08025f90
 800d768:	08026300 	.word	0x08026300
 800d76c:	08026140 	.word	0x08026140

0800d770 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7f9 f96b 	bl	8006a58 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800d782:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	615a      	str	r2, [r3, #20]
    }
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>:
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	2301      	movs	r3, #1
 800d79a:	4618      	mov	r0, r3
 800d79c:	370c      	adds	r7, #12
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b082      	sub	sp, #8
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fbda 	bl	800df68 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
	...

0800d7c0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
 800d7cc:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7ff ffe9 	bl	800d7a6 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3304      	adds	r3, #4
 800d7de:	6879      	ldr	r1, [r7, #4]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7f8 fd35 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3305      	adds	r3, #5
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7f8 fd2f 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d011      	beq.n	800d81c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	db08      	blt.n	800d810 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d105      	bne.n	800d810 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	db02      	blt.n	800d810 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d005      	beq.n	800d81c <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800d810:	4b07      	ldr	r3, [pc, #28]	; (800d830 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800d812:	4a08      	ldr	r2, [pc, #32]	; (800d834 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800d814:	21b0      	movs	r1, #176	; 0xb0
 800d816:	4808      	ldr	r0, [pc, #32]	; (800d838 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800d818:	f010 f8f4 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 800d81c:	2100      	movs	r1, #0
 800d81e:	68f8      	ldr	r0, [r7, #12]
 800d820:	f000 fbad 	bl	800df7e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	08025f90 	.word	0x08025f90
 800d834:	08026404 	.word	0x08026404
 800d838:	08026140 	.word	0x08026140

0800d83c <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE4initEv>:
    void init()
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fd fe3d 	bl	800b4c8 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 800d84e:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	611a      	str	r2, [r3, #16]
    }
 800d854:	bf00      	nop
 800d856:	3708      	adds	r7, #8
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fb94 	bl	800df94 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	4618      	mov	r0, r3
 800d872:	f000 fb9a 	bl	800dfaa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4618      	mov	r0, r3
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	68b9      	ldr	r1, [r7, #8]
 800d892:	4618      	mov	r0, r3
 800d894:	f000 fbb1 	bl	800dffa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800d898:	eef0 7a40 	vmov.f32	s15, s0
 800d89c:	eeb0 0a67 	vmov.f32	s0, s15
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <_ZN5Eigen8internal30assignment_from_xpr_op_productINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_9assign_opIffEENS0_13sub_assign_opIffEEE3runINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS3_KS7_EES9_EEvRS3_RKT_RKT0_>:
  void run(DstXprType &dst, const SrcXprType &src, const InitialFunc& /*func*/)
 800d8a6:	b590      	push	{r4, r7, lr}
 800d8a8:	b087      	sub	sp, #28
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	60f8      	str	r0, [r7, #12]
 800d8ae:	60b9      	str	r1, [r7, #8]
 800d8b0:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, src.lhs(), Func1());
 800d8b2:	68b8      	ldr	r0, [r7, #8]
 800d8b4:	f000 fbd1 	bl	800e05a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	f107 0310 	add.w	r3, r7, #16
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7f8 ff51 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800d8c4:	f107 0310 	add.w	r3, r7, #16
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f000 fbd0 	bl	800e072 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
    call_assignment_no_alias(dst, src.rhs(), Func2());
 800d8d2:	68b8      	ldr	r0, [r7, #8]
 800d8d4:	f000 fbde 	bl	800e094 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>
 800d8d8:	4604      	mov	r4, r0
 800d8da:	f107 0314 	add.w	r3, r7, #20
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fbb0 	bl	800d044 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800d8e4:	f107 0314 	add.w	r3, r7, #20
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	4621      	mov	r1, r4
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f000 fbdd 	bl	800e0ac <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800d8f2:	bf00      	nop
 800d8f4:	371c      	adds	r7, #28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd90      	pop	{r4, r7, pc}
	...

0800d8fc <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800d8fc:	b590      	push	{r4, r7, lr}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f6 fefb 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800d910:	4604      	mov	r4, r0
 800d912:	68b8      	ldr	r0, [r7, #8]
 800d914:	f7f8 fa95 	bl	8005e42 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4rowsEv>
 800d918:	4603      	mov	r3, r0
 800d91a:	429c      	cmp	r4, r3
 800d91c:	d10a      	bne.n	800d934 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	4618      	mov	r0, r3
 800d922:	f7f6 fee5 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800d926:	4604      	mov	r4, r0
 800d928:	68b8      	ldr	r0, [r7, #8]
 800d92a:	f7f8 fa98 	bl	8005e5e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE4colsEv>
 800d92e:	4603      	mov	r3, r0
 800d930:	429c      	cmp	r4, r3
 800d932:	d005      	beq.n	800d940 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800d934:	4b0b      	ldr	r3, [pc, #44]	; (800d964 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800d936:	4a0c      	ldr	r2, [pc, #48]	; (800d968 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800d938:	21b0      	movs	r1, #176	; 0xb0
 800d93a:	480c      	ldr	r0, [pc, #48]	; (800d96c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800d93c:	f010 f862 	bl	801da04 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800d940:	68b8      	ldr	r0, [r7, #8]
 800d942:	f000 fbc4 	bl	800e0ce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>
 800d946:	4604      	mov	r4, r0
 800d948:	68b8      	ldr	r0, [r7, #8]
 800d94a:	f000 fbcc 	bl	800e0e6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>
 800d94e:	4603      	mov	r3, r0
 800d950:	461a      	mov	r2, r3
 800d952:	4621      	mov	r1, r4
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f000 fbd2 	bl	800e0fe <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>
  }
 800d95a:	bf00      	nop
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd90      	pop	{r4, r7, pc}
 800d962:	bf00      	nop
 800d964:	08022600 	.word	0x08022600
 800d968:	08026508 	.word	0x08026508
 800d96c:	08022af8 	.word	0x08022af8

0800d970 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800d970:	b5b0      	push	{r4, r5, r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d97c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	4618      	mov	r0, r3
 800d982:	f7f9 fff9 	bl	8007978 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800d986:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800d988:	68b8      	ldr	r0, [r7, #8]
 800d98a:	f7fa fa2f 	bl	8007dec <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800d98e:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	fb02 f303 	mul.w	r3, r2, r3
 800d996:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800d998:	441d      	add	r5, r3
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7f6 feb2 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f000 fbd3 	bl	800e154 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	609a      	str	r2, [r3, #8]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	330c      	adds	r3, #12
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7ff fcbc 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	3310      	adds	r3, #16
 800d9c4:	6879      	ldr	r1, [r7, #4]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff fcb6 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f000 fbff 	bl	800e1d0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>
    }
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3710      	adds	r7, #16
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bdb0      	pop	{r4, r5, r7, pc}

0800d9dc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 fc00 	bl	800e1f0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b084      	sub	sp, #16
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800da04:	6839      	ldr	r1, [r7, #0]
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fc04 	bl	800e214 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>
 800da0c:	eef0 7a40 	vmov.f32	s15, s0
 800da10:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fc0d 	bl	800e236 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>
 800da1c:	eef0 7a40 	vmov.f32	s15, s0
 800da20:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800da24:	f107 020c 	add.w	r2, r7, #12
 800da28:	f107 0308 	add.w	r3, r7, #8
 800da2c:	4619      	mov	r1, r3
 800da2e:	6838      	ldr	r0, [r7, #0]
 800da30:	f7fa fff9 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800da34:	eef0 7a40 	vmov.f32	s15, s0
  }
 800da38:	eeb0 0a67 	vmov.f32	s0, s15
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800da4a:	2201      	movs	r2, #1
 800da4c:	2102      	movs	r1, #2
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7fc fa4c 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fc12 	bl	800e27e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>
  }
 800da5a:	bf00      	nop
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800da62:	b480      	push	{r7}
 800da64:	b083      	sub	sp, #12
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
    }
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4618      	mov	r0, r3
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7f7 f9b5 	bl	8004df0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800da86:	4603      	mov	r3, r0
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fc fd77 	bl	800a57c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800da8e:	4603      	mov	r3, r0
 800da90:	4618      	mov	r0, r3
 800da92:	f7f8 ff10 	bl	80068b6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4dataEv>
 800da96:	4603      	mov	r3, r0
 800da98:	4618      	mov	r0, r3
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7f7 f9a1 	bl	8004df0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800daae:	4603      	mov	r3, r0
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7fc fd63 	bl	800a57c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800dab6:	4603      	mov	r3, r0
 800dab8:	4618      	mov	r0, r3
 800daba:	f7ff fc5c 	bl	800d376 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 800dabe:	4603      	mov	r3, r0
 800dac0:	4618      	mov	r0, r3
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7f7 f98d 	bl	8004df0 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800dad6:	4603      	mov	r3, r0
 800dad8:	4618      	mov	r0, r3
 800dada:	f7fc fd4f 	bl	800a57c <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE16nestedExpressionEv>
 800dade:	4603      	mov	r3, r0
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7f8 ffb9 	bl	8006a58 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 800dae6:	4603      	mov	r3, r0
 800dae8:	4618      	mov	r0, r3
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 fbd0 	bl	800e29e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4618      	mov	r0, r3
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f7ff ffea 	bl	800daf0 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	68ba      	ldr	r2, [r7, #8]
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	3304      	adds	r3, #4
 800db26:	6879      	ldr	r1, [r7, #4]
 800db28:	4618      	mov	r0, r3
 800db2a:	f7f8 fb91 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3305      	adds	r3, #5
 800db32:	6839      	ldr	r1, [r7, #0]
 800db34:	4618      	mov	r0, r3
 800db36:	f7f8 fb8b 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d011      	beq.n	800db64 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	db08      	blt.n	800db58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d105      	bne.n	800db58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	db02      	blt.n	800db58 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d005      	beq.n	800db64 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 800db58:	4b07      	ldr	r3, [pc, #28]	; (800db78 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 800db5a:	4a08      	ldr	r2, [pc, #32]	; (800db7c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 800db5c:	21b0      	movs	r1, #176	; 0xb0
 800db5e:	4808      	ldr	r0, [pc, #32]	; (800db80 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 800db60:	f00f ff50 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 800db64:	2100      	movs	r1, #0
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f000 fba4 	bl	800e2b4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	08025f90 	.word	0x08025f90
 800db7c:	08026884 	.word	0x08026884
 800db80:	08026140 	.word	0x08026140

0800db84 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	3308      	adds	r3, #8
 800db90:	4618      	mov	r0, r3
 800db92:	f7ff ff99 	bl	800dac8 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 800db96:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	615a      	str	r2, [r3, #20]
    }
 800db9c:	bf00      	nop
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffEC1ERKSP_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 fb8b 	bl	800e2ca <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6839      	ldr	r1, [r7, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f000 fb91 	bl	800e2e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>
  }
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	68b9      	ldr	r1, [r7, #8]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f000 fba8 	bl	800e330 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>
 800dbe0:	eef0 7a40 	vmov.f32	s15, s0
 800dbe4:	eeb0 0a67 	vmov.f32	s0, s15
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b082      	sub	sp, #8
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	2102      	movs	r1, #2
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7fb feaf 	bl	800995e <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS3_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESB_EEEENS_9TransposeISA_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 fbc5 	bl	800e390 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>
  }
 800dc06:	bf00      	nop
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800dc0e:	b480      	push	{r7}
 800dc10:	b083      	sub	sp, #12
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
    }
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
#endif
    }

    template<typename T>
    EIGEN_DEVICE_FUNC
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
    {}
 800dc2e:	bf00      	nop
 800dc30:	370c      	adds	r7, #12
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr

0800dc3a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800dc3a:	b480      	push	{r7}
 800dc3c:	b083      	sub	sp, #12
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
    }
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4618      	mov	r0, r3
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
    {}
 800dc5a:	bf00      	nop
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800dc66:	b480      	push	{r7}
 800dc68:	b083      	sub	sp, #12
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800dc7c:	b590      	push	{r4, r7, lr}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
 800dc86:	687c      	ldr	r4, [r7, #4]
 800dc88:	6838      	ldr	r0, [r7, #0]
 800dc8a:	f000 fb8b 	bl	800e3a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	4619      	mov	r1, r3
 800dc92:	4620      	mov	r0, r4
 800dc94:	f7f7 f862 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	1d1c      	adds	r4, r3, #4
 800dc9c:	6838      	ldr	r0, [r7, #0]
 800dc9e:	f000 fb8d 	bl	800e3bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>
 800dca2:	4603      	mov	r3, r0
 800dca4:	4619      	mov	r1, r3
 800dca6:	4620      	mov	r0, r4
 800dca8:	f000 fb9f 	bl	800e3ea <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f103 040c 	add.w	r4, r3, #12
 800dcb2:	6838      	ldr	r0, [r7, #0]
 800dcb4:	f000 fb8d 	bl	800e3d2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	4619      	mov	r1, r3
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f000 fba3 	bl	800e408 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd90      	pop	{r4, r7, pc}

0800dccc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	68ba      	ldr	r2, [r7, #8]
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 fba1 	bl	800e426 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 800dce4:	eef0 7a40 	vmov.f32	s15, s0
 800dce8:	eeb0 0a67 	vmov.f32	s0, s15
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	2100      	movs	r1, #0
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f7ff ffe3 	bl	800dccc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800dd06:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dd0a:	eeb0 0a67 	vmov.f32	s0, s15
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNSA_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800dd1e:	2202      	movs	r2, #2
 800dd20:	2100      	movs	r1, #0
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff ffd2 	bl	800dccc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800dd28:	eef0 7a40 	vmov.f32	s15, s0
  }
 800dd2c:	eeb0 0a67 	vmov.f32	s0, s15
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b086      	sub	sp, #24
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	60f8      	str	r0, [r7, #12]
 800dd3e:	60b9      	str	r1, [r7, #8]
 800dd40:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	68b9      	ldr	r1, [r7, #8]
 800dd4a:	6978      	ldr	r0, [r7, #20]
 800dd4c:	f000 fb9b 	bl	800e486 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800dd50:	bf00      	nop
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 800dd64:	68b8      	ldr	r0, [r7, #8]
 800dd66:	f7f7 f9df 	bl	8005128 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	4619      	mov	r1, r3
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f000 fbc3 	bl	800e4fc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>
}
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_IS4_EELi3ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800dd7e:	b5b0      	push	{r4, r5, r7, lr}
 800dd80:	b086      	sub	sp, #24
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	60f8      	str	r0, [r7, #12]
 800dd86:	60b9      	str	r1, [r7, #8]
 800dd88:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800dd8a:	68b8      	ldr	r0, [r7, #8]
 800dd8c:	f7fd f924 	bl	800afd8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 800dd90:	4604      	mov	r4, r0
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 fbda 	bl	800e54c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>
 800dd98:	4605      	mov	r5, r0
 800dd9a:	f107 0314 	add.w	r3, r7, #20
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f6 ff52 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800dda4:	f107 0314 	add.w	r3, r7, #20
 800dda8:	462a      	mov	r2, r5
 800ddaa:	4621      	mov	r1, r4
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f000 fc07 	bl	800e5c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 800ddb2:	68f8      	ldr	r0, [r7, #12]
 800ddb4:	3718      	adds	r7, #24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bdb0      	pop	{r4, r5, r7, pc}

0800ddba <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b082      	sub	sp, #8
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fc5a 	bl	800e67c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 fc61 	bl	800e692 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800ddda:	b590      	push	{r4, r7, lr}
 800dddc:	b085      	sub	sp, #20
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fc4a 	bl	800e67c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800dde8:	4604      	mov	r4, r0
 800ddea:	f107 030c 	add.w	r3, r7, #12
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7f7 fa21 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800ddf4:	f107 030c 	add.w	r3, r7, #12
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f000 fcc6 	bl	800e78c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800de00:	eef0 7a40 	vmov.f32	s15, s0
 800de04:	bf00      	nop
}
 800de06:	eeb0 0a67 	vmov.f32	s0, s15
 800de0a:	3714      	adds	r7, #20
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd90      	pop	{r4, r7, pc}

0800de10 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800de18:	2201      	movs	r2, #1
 800de1a:	2101      	movs	r1, #1
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f7fe fa54 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fcf8 	bl	800e818 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>
  }
 800de28:	bf00      	nop
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fcfd 	bl	800e838 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4618      	mov	r0, r3
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>:
class dense_product_base
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f7ff ffed 	bl	800de30 <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff ffed 	bl	800de48 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ELi3EEC1Ev>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800de78:	b590      	push	{r4, r7, lr}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	68f8      	ldr	r0, [r7, #12]
 800de86:	f7ff ffeb 	bl	800de60 <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1ENS_5DenseEEC1Ev>
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	601a      	str	r2, [r3, #0]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3304      	adds	r3, #4
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	6812      	ldr	r2, [r2, #0]
 800de98:	601a      	str	r2, [r3, #0]
      eigen_assert(lhs.cols() == rhs.rows()
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7f6 fc27 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800dea2:	4604      	mov	r4, r0
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7f7 facc 	bl	8005442 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800deaa:	4603      	mov	r3, r0
 800deac:	429c      	cmp	r4, r3
 800deae:	d005      	beq.n	800debc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x44>
 800deb0:	4b05      	ldr	r3, [pc, #20]	; (800dec8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x50>)
 800deb2:	4a06      	ldr	r2, [pc, #24]	; (800decc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x54>)
 800deb4:	2160      	movs	r1, #96	; 0x60
 800deb6:	4806      	ldr	r0, [pc, #24]	; (800ded0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEC1ERKS2_RKS5_+0x58>)
 800deb8:	f00f fda4 	bl	801da04 <__assert_func>
 800debc:	bf00      	nop
    }
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	4618      	mov	r0, r3
 800dec2:	3714      	adds	r7, #20
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd90      	pop	{r4, r7, pc}
 800dec8:	0801fb2c 	.word	0x0801fb2c
 800decc:	0802699c 	.word	0x0802699c
 800ded0:	0801fe7c 	.word	0x0801fe7c

0800ded4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS9_RKSB_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800dee0:	68b9      	ldr	r1, [r7, #8]
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f000 fcb3 	bl	800e84e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	68b9      	ldr	r1, [r7, #8]
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f000 fd12 	bl	800e916 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800def2:	bf00      	nop
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE12_set_noaliasINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS9_INS1_IfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS2_EEEERS2_RKNS_9DenseBaseIT_EE>:
    EIGEN_STRONG_INLINE Derived& _set_noalias(const DenseBase<OtherDerived>& other)
 800defa:	b5b0      	push	{r4, r5, r7, lr}
 800defc:	b084      	sub	sp, #16
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
 800df02:	6039      	str	r1, [r7, #0]
      internal::call_assignment_no_alias(this->derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>());
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7fd fab8 	bl	800b47a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800df0a:	4604      	mov	r4, r0
 800df0c:	6838      	ldr	r0, [r7, #0]
 800df0e:	f7f7 fc41 	bl	8005794 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEE7derivedEv>
 800df12:	4605      	mov	r5, r0
 800df14:	f107 030c 	add.w	r3, r7, #12
 800df18:	4618      	mov	r0, r3
 800df1a:	f7f8 fc24 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800df1e:	f107 030c 	add.w	r3, r7, #12
 800df22:	461a      	mov	r2, r3
 800df24:	4629      	mov	r1, r5
 800df26:	4620      	mov	r0, r4
 800df28:	f000 fd2d 	bl	800e986 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
      return this->derived();
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7fd faa4 	bl	800b47a <_ZN5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE7derivedEv>
 800df32:	4603      	mov	r3, r0
    }
 800df34:	4618      	mov	r0, r3
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bdb0      	pop	{r4, r5, r7, pc}

0800df3c <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
    }
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	4618      	mov	r0, r3
 800df48:	370c      	adds	r7, #12
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr

0800df52 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800df52:	b480      	push	{r7}
 800df54:	b083      	sub	sp, #12
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	6039      	str	r1, [r7, #0]
    {}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
    }
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4618      	mov	r0, r3
 800df74:	370c      	adds	r7, #12
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr

0800df7e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800df7e:	b480      	push	{r7}
 800df80:	b083      	sub	sp, #12
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	6039      	str	r1, [r7, #0]
    {}
 800df88:	bf00      	nop
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	370c      	adds	r7, #12
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800dfaa:	b590      	push	{r4, r7, lr}
 800dfac:	b083      	sub	sp, #12
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
 800dfb2:	6039      	str	r1, [r7, #0]
 800dfb4:	687c      	ldr	r4, [r7, #4]
 800dfb6:	6838      	ldr	r0, [r7, #0]
 800dfb8:	f000 fcf6 	bl	800e9a8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f7f6 fecb 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	1d1c      	adds	r4, r3, #4
 800dfca:	6838      	ldr	r0, [r7, #0]
 800dfcc:	f000 fcf8 	bl	800e9c0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	f000 fd0a 	bl	800e9ee <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f103 040c 	add.w	r4, r3, #12
 800dfe0:	6838      	ldr	r0, [r7, #0]
 800dfe2:	f000 fcf8 	bl	800e9d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	4619      	mov	r1, r3
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 fd0e 	bl	800ea0c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	4618      	mov	r0, r3
 800dff4:	370c      	adds	r7, #12
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd90      	pop	{r4, r7, pc}

0800dffa <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800dffa:	b590      	push	{r4, r7, lr}
 800dffc:	b087      	sub	sp, #28
 800dffe:	af00      	add	r7, sp, #0
 800e000:	60f8      	str	r0, [r7, #12]
 800e002:	60b9      	str	r1, [r7, #8]
 800e004:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	4618      	mov	r0, r3
 800e00a:	f000 fd0e 	bl	800ea2a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e00e:	4604      	mov	r4, r0
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	3304      	adds	r3, #4
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	68b9      	ldr	r1, [r7, #8]
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 fd11 	bl	800ea40 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e01e:	eef0 7a40 	vmov.f32	s15, s0
 800e022:	edc7 7a04 	vstr	s15, [r7, #16]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	330c      	adds	r3, #12
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	68b9      	ldr	r1, [r7, #8]
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 fd19 	bl	800ea66 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>
 800e034:	eef0 7a40 	vmov.f32	s15, s0
 800e038:	edc7 7a05 	vstr	s15, [r7, #20]
 800e03c:	f107 0214 	add.w	r2, r7, #20
 800e040:	f107 0310 	add.w	r3, r7, #16
 800e044:	4619      	mov	r1, r3
 800e046:	4620      	mov	r0, r4
 800e048:	f000 fd2e 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e04c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e050:	eeb0 0a67 	vmov.f32	s0, s15
 800e054:	371c      	adds	r7, #28
 800e056:	46bd      	mov	sp, r7
 800e058:	bd90      	pop	{r4, r7, pc}

0800e05a <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e05a:	b480      	push	{r7}
 800e05c:	b083      	sub	sp, #12
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4618      	mov	r0, r3
 800e068:	370c      	adds	r7, #12
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr

0800e072 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e072:	b580      	push	{r7, lr}
 800e074:	b086      	sub	sp, #24
 800e076:	af00      	add	r7, sp, #0
 800e078:	60f8      	str	r0, [r7, #12]
 800e07a:	60b9      	str	r1, [r7, #8]
 800e07c:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	68b9      	ldr	r1, [r7, #8]
 800e086:	6978      	ldr	r0, [r7, #20]
 800e088:	f000 fd23 	bl	800ead2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>
}
 800e08c:	bf00      	nop
 800e08e:	3718      	adds	r7, #24
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <_ZNK5Eigen13CwiseBinaryOpINS_8internal20scalar_difference_opIffEEKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEKNS_7ProductINS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi1ELi0ELi3ELi1EEELi0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e094:	b480      	push	{r7}
 800e096:	b083      	sub	sp, #12
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	370c      	adds	r7, #12
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0aa:	4770      	bx	lr

0800e0ac <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b086      	sub	sp, #24
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	68b9      	ldr	r1, [r7, #8]
 800e0c0:	6978      	ldr	r0, [r7, #20]
 800e0c2:	f000 fd19 	bl	800eaf8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800e0c6:	bf00      	nop
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800e0ce:	b480      	push	{r7}
 800e0d0:	b083      	sub	sp, #12
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800e0e6:	b480      	push	{r7}
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	370c      	adds	r7, #12
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEENS_10DenseShapeES5_Li3EE5subToINS2_IfLi3ELi3ELi0ELi3ELi3EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b088      	sub	sp, #32
 800e102:	af00      	add	r7, sp, #0
 800e104:	60f8      	str	r0, [r7, #12]
 800e106:	60b9      	str	r1, [r7, #8]
 800e108:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::sub_assign_op<typename Dst::Scalar,Scalar>());
 800e10a:	f107 0314 	add.w	r3, r7, #20
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	68b9      	ldr	r1, [r7, #8]
 800e112:	4618      	mov	r0, r3
 800e114:	f000 fd2a 	bl	800eb6c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 800e118:	f107 031c 	add.w	r3, r7, #28
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe ff91 	bl	800d044 <_ZN5Eigen8internal13sub_assign_opIffEC1Ev>
 800e122:	f107 021c 	add.w	r2, r7, #28
 800e126:	f107 0314 	add.w	r3, r7, #20
 800e12a:	4619      	mov	r1, r3
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f000 fd34 	bl	800eb9a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800e132:	bf00      	nop
 800e134:	3720      	adds	r7, #32
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b082      	sub	sp, #8
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fd3a 	bl	800ebbc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4618      	mov	r0, r3
 800e14c:	3708      	adds	r7, #8
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
	...

0800e154 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
 800e160:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	f7ff ffe9 	bl	800e13a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	601a      	str	r2, [r3, #0]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3304      	adds	r3, #4
 800e172:	6879      	ldr	r1, [r7, #4]
 800e174:	4618      	mov	r0, r3
 800e176:	f7f8 f851 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	3305      	adds	r3, #5
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	4618      	mov	r0, r3
 800e182:	f7f8 f865 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d011      	beq.n	800e1b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	db08      	blt.n	800e1a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2b03      	cmp	r3, #3
 800e196:	d105      	bne.n	800e1a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	db02      	blt.n	800e1a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d005      	beq.n	800e1b0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 800e1a4:	4b07      	ldr	r3, [pc, #28]	; (800e1c4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 800e1a6:	4a08      	ldr	r2, [pc, #32]	; (800e1c8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 800e1a8:	21b0      	movs	r1, #176	; 0xb0
 800e1aa:	4808      	ldr	r0, [pc, #32]	; (800e1cc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 800e1ac:	f00f fc2a 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f000 fd0d 	bl	800ebd2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3710      	adds	r7, #16
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	08025f90 	.word	0x08025f90
 800e1c8:	08026ae8 	.word	0x08026ae8
 800e1cc:	08026140 	.word	0x08026140

0800e1d0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7f9 fe05 	bl	8007dec <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800e1e2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	615a      	str	r2, [r3, #20]
    }
 800e1e8:	bf00      	nop
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fcf4 	bl	800ebe8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6839      	ldr	r1, [r7, #0]
 800e204:	4618      	mov	r0, r3
 800e206:	f000 fcfa 	bl	800ebfe <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	4618      	mov	r0, r3
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800e21e:	2200      	movs	r2, #0
 800e220:	2100      	movs	r1, #0
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fd13 	bl	800ec4e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800e228:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e22c:	eeb0 0a67 	vmov.f32	s0, s15
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800e236:	b580      	push	{r7, lr}
 800e238:	b084      	sub	sp, #16
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 fd16 	bl	800ec74 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>
 800e248:	eef0 7a40 	vmov.f32	s15, s0
 800e24c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 fd1f 	bl	800ec96 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>
 800e258:	eef0 7a40 	vmov.f32	s15, s0
 800e25c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800e260:	f107 020c 	add.w	r2, r7, #12
 800e264:	f107 0308 	add.w	r3, r7, #8
 800e268:	4619      	mov	r1, r3
 800e26a:	6838      	ldr	r0, [r7, #0]
 800e26c:	f7fa fbdb 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800e270:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e274:	eeb0 0a67 	vmov.f32	s0, s15
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e286:	2202      	movs	r2, #2
 800e288:	2102      	movs	r1, #2
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f7fb fe2e 	bl	8009eec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS4_KNS6_INS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fd11 	bl	800ecb8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>
  }
 800e296:	bf00      	nop
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e29e:	b480      	push	{r7}
 800e2a0:	b083      	sub	sp, #12
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
    }
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
    {}
 800e2be:	bf00      	nop
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800e2ca:	b480      	push	{r7}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4DataC1ERKSP_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800e2e0:	b590      	push	{r4, r7, lr}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
 800e2ea:	687c      	ldr	r4, [r7, #4]
 800e2ec:	6838      	ldr	r0, [r7, #0]
 800e2ee:	f000 fced 	bl	800eccc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f7f6 fd30 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	1d1c      	adds	r4, r3, #4
 800e300:	6838      	ldr	r0, [r7, #0]
 800e302:	f000 fcef 	bl	800ece4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>
 800e306:	4603      	mov	r3, r0
 800e308:	4619      	mov	r1, r3
 800e30a:	4620      	mov	r0, r4
 800e30c:	f000 fd02 	bl	800ed14 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f103 0420 	add.w	r4, r3, #32
 800e316:	6838      	ldr	r0, [r7, #0]
 800e318:	f000 fcf0 	bl	800ecfc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>
 800e31c:	4603      	mov	r3, r0
 800e31e:	4619      	mov	r1, r3
 800e320:	4620      	mov	r0, r4
 800e322:	f000 fd06 	bl	800ed32 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4618      	mov	r0, r3
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd90      	pop	{r4, r7, pc}

0800e330 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e330:	b590      	push	{r4, r7, lr}
 800e332:	b087      	sub	sp, #28
 800e334:	af00      	add	r7, sp, #0
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 fd06 	bl	800ed50 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>
 800e344:	4604      	mov	r4, r0
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	3304      	adds	r3, #4
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	68b9      	ldr	r1, [r7, #8]
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 fd09 	bl	800ed66 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e354:	eef0 7a40 	vmov.f32	s15, s0
 800e358:	edc7 7a04 	vstr	s15, [r7, #16]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3320      	adds	r3, #32
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	68b9      	ldr	r1, [r7, #8]
 800e364:	4618      	mov	r0, r3
 800e366:	f000 fd11 	bl	800ed8c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 800e36a:	eef0 7a40 	vmov.f32	s15, s0
 800e36e:	edc7 7a05 	vstr	s15, [r7, #20]
 800e372:	f107 0214 	add.w	r2, r7, #20
 800e376:	f107 0310 	add.w	r3, r7, #16
 800e37a:	4619      	mov	r1, r3
 800e37c:	4620      	mov	r0, r4
 800e37e:	f000 fb93 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e382:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e386:	eeb0 0a67 	vmov.f32	s0, s15
 800e38a:	371c      	adds	r7, #28
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd90      	pop	{r4, r7, pc}

0800e390 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS4_IfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEESC_EEEENS_9TransposeISB_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSP_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	bf00      	nop
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3330      	adds	r3, #48	; 0x30
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr

0800e3d2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS6_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e3d2:	b480      	push	{r7}
 800e3d4:	b083      	sub	sp, #12
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	3318      	adds	r3, #24
 800e3de:	4618      	mov	r0, r3
 800e3e0:	370c      	adds	r7, #12
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b082      	sub	sp, #8
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	6039      	str	r1, [r7, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6839      	ldr	r1, [r7, #0]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f000 fce8 	bl	800edce <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4618      	mov	r0, r3
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERS7_>:
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6839      	ldr	r1, [r7, #0]
 800e416:	4618      	mov	r0, r3
 800e418:	f000 fce8 	bl	800edec <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4618      	mov	r0, r3
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800e426:	b590      	push	{r4, r7, lr}
 800e428:	b087      	sub	sp, #28
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	60f8      	str	r0, [r7, #12]
 800e42e:	60b9      	str	r1, [r7, #8]
 800e430:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	4618      	mov	r0, r3
 800e436:	f000 fce8 	bl	800ee0a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 800e43a:	4604      	mov	r4, r0
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	3304      	adds	r3, #4
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	68b9      	ldr	r1, [r7, #8]
 800e444:	4618      	mov	r0, r3
 800e446:	f000 fceb 	bl	800ee20 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800e44a:	eef0 7a40 	vmov.f32	s15, s0
 800e44e:	edc7 7a04 	vstr	s15, [r7, #16]
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	330c      	adds	r3, #12
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 fcf3 	bl	800ee46 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>
 800e460:	eef0 7a40 	vmov.f32	s15, s0
 800e464:	edc7 7a05 	vstr	s15, [r7, #20]
 800e468:	f107 0214 	add.w	r2, r7, #20
 800e46c:	f107 0310 	add.w	r3, r7, #16
 800e470:	4619      	mov	r1, r3
 800e472:	4620      	mov	r0, r4
 800e474:	f000 fb18 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800e478:	eef0 7a40 	vmov.f32	s15, s0
  }
 800e47c:	eeb0 0a67 	vmov.f32	s0, s15
 800e480:	371c      	adds	r7, #28
 800e482:	46bd      	mov	sp, r7
 800e484:	bd90      	pop	{r4, r7, pc}

0800e486 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,Scalar> &)
 800e486:	b590      	push	{r4, r7, lr}
 800e488:	b087      	sub	sp, #28
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	60f8      	str	r0, [r7, #12]
 800e48e:	60b9      	str	r1, [r7, #8]
 800e490:	607a      	str	r2, [r7, #4]
    Index dstRows = src.rows();
 800e492:	68b8      	ldr	r0, [r7, #8]
 800e494:	f7f7 ff9e 	bl	80063d4 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4rowsEv>
 800e498:	6178      	str	r0, [r7, #20]
    Index dstCols = src.cols();
 800e49a:	68b8      	ldr	r0, [r7, #8]
 800e49c:	f7f6 fe73 	bl	8005186 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE4colsEv>
 800e4a0:	6138      	str	r0, [r7, #16]
    if((dst.rows()!=dstRows) || (dst.cols()!=dstCols))
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7f6 f92e 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d107      	bne.n	800e4c2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x3c>
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7f6 f91b 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d001      	beq.n	800e4c6 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x40>
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e000      	b.n	800e4c8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x42>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d005      	beq.n	800e4d8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li0EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_+0x52>
      dst.resize(dstRows, dstCols);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	693a      	ldr	r2, [r7, #16]
 800e4d0:	6979      	ldr	r1, [r7, #20]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7f9 f830 	bl	8007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
    generic_product_impl<Lhs, Rhs>::evalTo(dst, src.lhs(), src.rhs());
 800e4d8:	68b8      	ldr	r0, [r7, #8]
 800e4da:	f000 fcd5 	bl	800ee88 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>
 800e4de:	4604      	mov	r4, r0
 800e4e0:	68b8      	ldr	r0, [r7, #8]
 800e4e2:	f000 fcdd 	bl	800eea0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	4621      	mov	r1, r4
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f000 fce3 	bl	800eeb8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>
  }
 800e4f2:	bf00      	nop
 800e4f4:	371c      	adds	r7, #28
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd90      	pop	{r4, r7, pc}
	...

0800e4fc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	607a      	str	r2, [r7, #4]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	68b9      	ldr	r1, [r7, #8]
 800e50e:	4618      	mov	r0, r3
 800e510:	f000 fcf0 	bl	800eef4 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	db06      	blt.n	800e528 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x2c>
 800e51a:	68b8      	ldr	r0, [r7, #8]
 800e51c:	f7f7 ff68 	bl	80063f0 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800e520:	4602      	mov	r2, r0
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4293      	cmp	r3, r2
 800e526:	db05      	blt.n	800e534 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x38>
 800e528:	4b05      	ldr	r3, [pc, #20]	; (800e540 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x44>)
 800e52a:	4a06      	ldr	r2, [pc, #24]	; (800e544 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x48>)
 800e52c:	2178      	movs	r1, #120	; 0x78
 800e52e:	4806      	ldr	r0, [pc, #24]	; (800e548 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEC1ERS5_i+0x4c>)
 800e530:	f00f fa68 	bl	801da04 <__assert_func>
    }
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	080243f0 	.word	0x080243f0
 800e544:	08026bec 	.word	0x08026bec
 800e548:	08024574 	.word	0x08024574

0800e54c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4618      	mov	r0, r3
 800e558:	370c      	adds	r7, #12
 800e55a:	46bd      	mov	sp, r7
 800e55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e560:	4770      	bx	lr

0800e562 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 800e562:	b580      	push	{r7, lr}
 800e564:	b082      	sub	sp, #8
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fcd3 	bl	800ef16 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4618      	mov	r0, r3
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b082      	sub	sp, #8
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f7ff ffed 	bl	800e562 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	4618      	mov	r0, r3
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 800e592:	b580      	push	{r7, lr}
 800e594:	b082      	sub	sp, #8
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
 800e59a:	f7f7 fe7e 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	f7f7 fe7b 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
	...

0800e5c0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 800e5c0:	b5b0      	push	{r4, r5, r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f7ff ffd3 	bl	800e57a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEENS_5DenseEEC1Ev>
 800e5d4:	68fa      	ldr	r2, [r7, #12]
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	4614      	mov	r4, r2
 800e5da:	461d      	mov	r5, r3
 800e5dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e5e4:	e884 0003 	stmia.w	r4, {r0, r1}
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f103 0218 	add.w	r2, r3, #24
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4614      	mov	r4, r2
 800e5f2:	461d      	mov	r5, r3
 800e5f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e5fc:	e884 0003 	stmia.w	r4, {r0, r1}
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3330      	adds	r3, #48	; 0x30
 800e604:	6839      	ldr	r1, [r7, #0]
 800e606:	4618      	mov	r0, r3
 800e608:	f7f6 fba8 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 800e60c:	68b8      	ldr	r0, [r7, #8]
 800e60e:	f7fc fd11 	bl	800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800e612:	4604      	mov	r4, r0
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4618      	mov	r0, r3
 800e618:	f7ff ffbb 	bl	800e592 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4rowsEv>
 800e61c:	4603      	mov	r3, r0
 800e61e:	429c      	cmp	r4, r3
 800e620:	d10a      	bne.n	800e638 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 800e622:	68b8      	ldr	r0, [r7, #8]
 800e624:	f7fc fd13 	bl	800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800e628:	4604      	mov	r4, r0
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff ffbb 	bl	800e5a8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4colsEv>
 800e632:	4603      	mov	r3, r0
 800e634:	429c      	cmp	r4, r3
 800e636:	d005      	beq.n	800e644 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 800e638:	4b05      	ldr	r3, [pc, #20]	; (800e650 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 800e63a:	4a06      	ldr	r2, [pc, #24]	; (800e654 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 800e63c:	2174      	movs	r1, #116	; 0x74
 800e63e:	4806      	ldr	r0, [pc, #24]	; (800e658 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 800e640:	f00f f9e0 	bl	801da04 <__assert_func>
    }
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bdb0      	pop	{r4, r5, r7, pc}
 800e64e:	bf00      	nop
 800e650:	0801f86c 	.word	0x0801f86c
 800e654:	08026cdc 	.word	0x08026cdc
 800e658:	0801fad0 	.word	0x0801fad0

0800e65c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f000 f809 	bl	800e67c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e66a:	4603      	mov	r3, r0
 800e66c:	4618      	mov	r0, r3
 800e66e:	f000 fc5d 	bl	800ef2c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>
 800e672:	4603      	mov	r3, r0
 800e674:	4618      	mov	r0, r3
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	4618      	mov	r0, r3
 800e688:	370c      	adds	r7, #12
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr

0800e692 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 800e692:	b580      	push	{r7, lr}
 800e694:	b082      	sub	sp, #8
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7fc fcc9 	bl	800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 800e6a2:	4603      	mov	r3, r0
    }
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b082      	sub	sp, #8
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 fc60 	bl	800ef7a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff ffec 	bl	800e6ac <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b082      	sub	sp, #8
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff ffeb 	bl	800e6c4 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EED1Ev>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4618      	mov	r0, r3
 800e704:	f7ff ffeb 	bl	800e6de <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4618      	mov	r0, r3
 800e70c:	3708      	adds	r7, #8
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 800e712:	b580      	push	{r7, lr}
 800e714:	b082      	sub	sp, #8
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	330c      	adds	r3, #12
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff ffea 	bl	800e6f8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	3304      	adds	r3, #4
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fc fd79 	bl	800b220 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4618      	mov	r0, r3
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4618      	mov	r0, r3
 800e744:	f7ff ffe5 	bl	800e712 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 fc0b 	bl	800ef64 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4618      	mov	r0, r3
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4618      	mov	r0, r3
 800e764:	f7ff ffe8 	bl	800e738 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 800e772:	b580      	push	{r7, lr}
 800e774:	b082      	sub	sp, #8
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7ff ffeb 	bl	800e758 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	4618      	mov	r0, r3
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 800e78c:	b580      	push	{r7, lr}
 800e78e:	ed2d 8b02 	vpush	{d8}
 800e792:	b088      	sub	sp, #32
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7ff fb0d 	bl	800ddba <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4rowsEv>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	dd05      	ble.n	800e7b2 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f7ff ff58 	bl	800e65c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE4colsEv>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	dc06      	bgt.n	800e7c0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 800e7b2:	4b16      	ldr	r3, [pc, #88]	; (800e80c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 800e7b4:	4a16      	ldr	r2, [pc, #88]	; (800e810 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 800e7b6:	f240 119b 	movw	r1, #411	; 0x19b
 800e7ba:	4816      	ldr	r0, [pc, #88]	; (800e814 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 800e7bc:	f00f f922 	bl	801da04 <__assert_func>
 800e7c0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7ff ff5a 	bl	800e67c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	f107 030c 	add.w	r3, r7, #12
 800e7ce:	4611      	mov	r1, r2
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f000 fbb8 	bl	800ef46 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff ff50 	bl	800e67c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE7derivedEv>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	f107 030c 	add.w	r3, r7, #12
 800e7e2:	6839      	ldr	r1, [r7, #0]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f000 fbd3 	bl	800ef90 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 800e7ea:	eeb0 8a40 	vmov.f32	s16, s0
 800e7ee:	bf00      	nop
  ThisEvaluator thisEval(derived());
 800e7f0:	f107 030c 	add.w	r3, r7, #12
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7ff ffbc 	bl	800e772 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 800e7fa:	eef0 7a48 	vmov.f32	s15, s16
}
 800e7fe:	eeb0 0a67 	vmov.f32	s0, s15
 800e802:	3720      	adds	r7, #32
 800e804:	46bd      	mov	sp, r7
 800e806:	ecbd 8b02 	vpop	{d8}
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	080248ec 	.word	0x080248ec
 800e810:	08026f4c 	.word	0x08026f4c
 800e814:	08024af8 	.word	0x08024af8

0800e818 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800e820:	2202      	movs	r2, #2
 800e822:	2101      	movs	r1, #1
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f7fd fd50 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 fbc1 	bl	800efb2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>
  }
 800e830:	bf00      	nop
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
    }
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4618      	mov	r0, r3
 800e844:	370c      	adds	r7, #12
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr

0800e84e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800e84e:	b480      	push	{r7}
 800e850:	b083      	sub	sp, #12
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
 800e856:	6039      	str	r1, [r7, #0]
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<PlainObjectBase<Derived> >
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fbd5 	bl	800f01c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4618      	mov	r0, r3
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b082      	sub	sp, #8
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4618      	mov	r0, r3
 800e888:	f7ff ffec 	bl	800e864 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4618      	mov	r0, r3
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 800e896:	b580      	push	{r7, lr}
 800e898:	b082      	sub	sp, #8
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff ffeb 	bl	800e87c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 fbad 	bl	800f006 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b082      	sub	sp, #8
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7ff ffe8 	bl	800e896 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	330c      	adds	r3, #12
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff ffea 	bl	800e8b6 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	3308      	adds	r3, #8
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7f8 f995 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 fb7f 	bl	800eff0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4618      	mov	r0, r3
 800e908:	f7ff ffe2 	bl	800e8d0 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffED1Ev>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4618      	mov	r0, r3
 800e910:	3708      	adds	r7, #8
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800e916:	b580      	push	{r7, lr}
 800e918:	b090      	sub	sp, #64	; 0x40
 800e91a:	af02      	add	r7, sp, #8
 800e91c:	60f8      	str	r0, [r7, #12]
 800e91e:	60b9      	str	r1, [r7, #8]
 800e920:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800e922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e926:	68b9      	ldr	r1, [r7, #8]
 800e928:	4618      	mov	r0, r3
 800e92a:	f000 fb52 	bl	800efd2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>
  resize_if_allowed(dst, src, func);
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	68b9      	ldr	r1, [r7, #8]
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f000 fb9a 	bl	800f06c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800e938:	f107 0320 	add.w	r3, r7, #32
 800e93c:	68f9      	ldr	r1, [r7, #12]
 800e93e:	4618      	mov	r0, r3
 800e940:	f7f7 fc2d 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f7f8 fc6b 	bl	8007220 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE18const_cast_derivedEv>
 800e94a:	4603      	mov	r3, r0
 800e94c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e950:	f107 0120 	add.w	r1, r7, #32
 800e954:	f107 0010 	add.w	r0, r7, #16
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f000 fbd0 	bl	800f100 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800e960:	f107 0310 	add.w	r3, r7, #16
 800e964:	4618      	mov	r0, r3
 800e966:	f000 fbe5 	bl	800f134 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>
  DstEvaluatorType dstEvaluator(dst);
 800e96a:	f107 0320 	add.w	r3, r7, #32
 800e96e:	4618      	mov	r0, r3
 800e970:	f7f6 f8db 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800e974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff ffbf 	bl	800e8fc <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>
}
 800e97e:	bf00      	nop
 800e980:	3738      	adds	r7, #56	; 0x38
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800e986:	b580      	push	{r7, lr}
 800e988:	b086      	sub	sp, #24
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	68b9      	ldr	r1, [r7, #8]
 800e99a:	6978      	ldr	r0, [r7, #20]
 800e99c:	f000 fbd5 	bl	800f14a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>
}
 800e9a0:	bf00      	nop
 800e9a2:	3718      	adds	r7, #24
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	332c      	adds	r3, #44	; 0x2c
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr

0800e9d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800e9d6:	b480      	push	{r7}
 800e9d8:	b083      	sub	sp, #12
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	3318      	adds	r3, #24
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b082      	sub	sp, #8
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6839      	ldr	r1, [r7, #0]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 fbb7 	bl	800f170 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4618      	mov	r0, r3
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERS7_>:
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f000 fbb7 	bl	800f18e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	4618      	mov	r0, r3
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800ea2a:	b480      	push	{r7}
 800ea2c:	b083      	sub	sp, #12
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	4618      	mov	r0, r3
 800ea36:	370c      	adds	r7, #12
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	6879      	ldr	r1, [r7, #4]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f000 fbaa 	bl	800f1ac <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>
 800ea58:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ea5c:	eeb0 0a67 	vmov.f32	s0, s15
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ea66:	b5b0      	push	{r4, r5, r7, lr}
 800ea68:	b084      	sub	sp, #16
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	60f8      	str	r0, [r7, #12]
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681c      	ldr	r4, [r3, #0]
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f000 fbb9 	bl	800f1ee <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	fb03 f502 	mul.w	r5, r3, r2
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f000 fbbd 	bl	800f204 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	fb02 f303 	mul.w	r3, r2, r3
 800ea92:	442b      	add	r3, r5
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4423      	add	r3, r4
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	ee07 3a90 	vmov	s15, r3
  }
 800ea9e:	eeb0 0a67 	vmov.f32	s0, s15
 800eaa2:	3710      	adds	r7, #16
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bdb0      	pop	{r4, r5, r7, pc}

0800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	ed93 7a00 	vldr	s14, [r3]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	edd3 7a00 	vldr	s15, [r3]
 800eac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eac4:	eeb0 0a67 	vmov.f32	s0, s15
 800eac8:	3714      	adds	r7, #20
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS3_RKS5_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b084      	sub	sp, #16
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	60f8      	str	r0, [r7, #12]
 800eada:	60b9      	str	r1, [r7, #8]
 800eadc:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800eade:	68b9      	ldr	r1, [r7, #8]
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f000 fb9a 	bl	800f21a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	68b9      	ldr	r1, [r7, #8]
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f000 fba0 	bl	800f230 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800eaf0:	bf00      	nop
 800eaf2:	3710      	adds	r7, #16
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  void run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,Scalar> &)
 800eaf8:	b590      	push	{r4, r7, lr}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
    eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7f6 fded 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	68b8      	ldr	r0, [r7, #8]
 800eb10:	f7f6 ffb0 	bl	8005a74 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4rowsEv>
 800eb14:	4603      	mov	r3, r0
 800eb16:	429c      	cmp	r4, r3
 800eb18:	d10a      	bne.n	800eb30 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x38>
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7f6 fded 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800eb22:	4604      	mov	r4, r0
 800eb24:	68b8      	ldr	r0, [r7, #8]
 800eb26:	f7f6 ffb3 	bl	8005a90 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE4colsEv>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	429c      	cmp	r4, r3
 800eb2e:	d005      	beq.n	800eb3c <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x44>
 800eb30:	4b0b      	ldr	r3, [pc, #44]	; (800eb60 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x68>)
 800eb32:	4a0c      	ldr	r2, [pc, #48]	; (800eb64 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x6c>)
 800eb34:	21b0      	movs	r1, #176	; 0xb0
 800eb36:	480c      	ldr	r0, [pc, #48]	; (800eb68 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_7ProductINS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEELi0EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_+0x70>)
 800eb38:	f00e ff64 	bl	801da04 <__assert_func>
    generic_product_impl<Lhs, Rhs>::subTo(dst, src.lhs(), src.rhs());
 800eb3c:	68b8      	ldr	r0, [r7, #8]
 800eb3e:	f000 fbaf 	bl	800f2a0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>
 800eb42:	4604      	mov	r4, r0
 800eb44:	68b8      	ldr	r0, [r7, #8]
 800eb46:	f000 fbb7 	bl	800f2b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	4621      	mov	r1, r4
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f000 fbbd 	bl	800f2d0 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>
  }
 800eb56:	bf00      	nop
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd90      	pop	{r4, r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	08022600 	.word	0x08022600
 800eb64:	08027128 	.word	0x08027128
 800eb68:	08022af8 	.word	0x08022af8

0800eb6c <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE11lazyProductINS1_IfLi1ELi3ELi1ELi1ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800eb6c:	b590      	push	{r4, r7, lr}
 800eb6e:	b085      	sub	sp, #20
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800eb78:	68b8      	ldr	r0, [r7, #8]
 800eb7a:	f7f6 f806 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800eb7e:	4604      	mov	r4, r0
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7f6 fc9b 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800eb86:	4603      	mov	r3, r0
 800eb88:	461a      	mov	r2, r3
 800eb8a:	4621      	mov	r1, r4
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f000 fbf3 	bl	800f378 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>
}
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	3714      	adds	r7, #20
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd90      	pop	{r4, r7, pc}

0800eb9a <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b086      	sub	sp, #24
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	60f8      	str	r0, [r7, #12]
 800eba2:	60b9      	str	r1, [r7, #8]
 800eba4:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	68b9      	ldr	r1, [r7, #8]
 800ebae:	6978      	ldr	r0, [r7, #20]
 800ebb0:	f000 fc10 	bl	800f3d4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>
}
 800ebb4:	bf00      	nop
 800ebb6:	3718      	adds	r7, #24
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
    }
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	370c      	adds	r7, #12
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr

0800ebd2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 800ebd2:	b480      	push	{r7}
 800ebd4:	b083      	sub	sp, #12
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
 800ebda:	6039      	str	r1, [r7, #0]
    {}
 800ebdc:	bf00      	nop
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr

0800ebe8 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	370c      	adds	r7, #12
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 800ebfe:	b590      	push	{r4, r7, lr}
 800ec00:	b083      	sub	sp, #12
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	6039      	str	r1, [r7, #0]
 800ec08:	687c      	ldr	r4, [r7, #4]
 800ec0a:	6838      	ldr	r0, [r7, #0]
 800ec0c:	f000 fbf5 	bl	800f3fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>
 800ec10:	4603      	mov	r3, r0
 800ec12:	4619      	mov	r1, r3
 800ec14:	4620      	mov	r0, r4
 800ec16:	f7f6 f8a1 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	1d1c      	adds	r4, r3, #4
 800ec1e:	6838      	ldr	r0, [r7, #0]
 800ec20:	f000 fbf7 	bl	800f412 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>
 800ec24:	4603      	mov	r3, r0
 800ec26:	4619      	mov	r1, r3
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f7ff fbde 	bl	800e3ea <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f103 040c 	add.w	r4, r3, #12
 800ec34:	6838      	ldr	r0, [r7, #0]
 800ec36:	f000 fbf7 	bl	800f428 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f000 fbfe 	bl	800f440 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	4618      	mov	r0, r3
 800ec48:	370c      	adds	r7, #12
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd90      	pop	{r4, r7, pc}

0800ec4e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	60f8      	str	r0, [r7, #12]
 800ec56:	60b9      	str	r1, [r7, #8]
 800ec58:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	68ba      	ldr	r2, [r7, #8]
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	4618      	mov	r0, r3
 800ec62:	f000 fbfc 	bl	800f45e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>
 800ec66:	eef0 7a40 	vmov.f32	s15, s0
 800ec6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ec6e:	3710      	adds	r7, #16
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800ec7e:	2201      	movs	r2, #1
 800ec80:	2100      	movs	r1, #0
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7ff ffe3 	bl	800ec4e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800ec88:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ec8c:	eeb0 0a67 	vmov.f32	s0, s15
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}

0800ec96 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_ISC_Li3ELi1ELb1EEEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 800ec96:	b580      	push	{r7, lr}
 800ec98:	b082      	sub	sp, #8
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 800eca0:	2202      	movs	r2, #2
 800eca2:	2100      	movs	r1, #0
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff ffd2 	bl	800ec4e <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 800ecaa:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ecae:	eeb0 0a67 	vmov.f32	s0, s15
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS_13CwiseBinaryOpINS0_20scalar_difference_opIffEEKS5_KNS7_INS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi0EEEEES5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSL_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 800ecb8:	b480      	push	{r7}
 800ecba:	b083      	sub	sp, #12
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	bf00      	nop
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	3334      	adds	r3, #52	; 0x34
 800ecd8:	4618      	mov	r0, r3
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS0_IS3_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEEKNS5_IKNS4_IS7_EELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	331c      	adds	r3, #28
 800ed08:	4618      	mov	r0, r3
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERSK_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f000 fbcb 	bl	800f4be <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERS9_>:
 800ed32:	b580      	push	{r7, lr}
 800ed34:	b082      	sub	sp, #8
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
 800ed3a:	6039      	str	r1, [r7, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f000 fbcb 	bl	800f4dc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS2_IS4_KNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEKNS6_IKNS5_IS8_EELi1ELi1ELb0EEEEENS0_10IndexBasedESQ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr

0800ed66 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	60f8      	str	r0, [r7, #12]
 800ed6e:	60b9      	str	r1, [r7, #8]
 800ed70:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	6879      	ldr	r1, [r7, #4]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f000 fbc6 	bl	800f50a <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>
 800ed7e:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ed82:	eeb0 0a67 	vmov.f32	s0, s15
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ed8c:	b5b0      	push	{r4, r5, r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681c      	ldr	r4, [r3, #0]
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f000 fbd4 	bl	800f54a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 800eda2:	4602      	mov	r2, r0
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	fb03 f502 	mul.w	r5, r3, r2
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f000 fbd8 	bl	800f560 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 800edb0:	4602      	mov	r2, r0
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	fb02 f303 	mul.w	r3, r2, r3
 800edb8:	442b      	add	r3, r5
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	4423      	add	r3, r4
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	ee07 3a90 	vmov	s15, r3
  }
 800edc4:	eeb0 0a67 	vmov.f32	s0, s15
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bdb0      	pop	{r4, r5, r7, pc}

0800edce <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800edce:	b580      	push	{r7, lr}
 800edd0:	b082      	sub	sp, #8
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
 800edd6:	6039      	str	r1, [r7, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6839      	ldr	r1, [r7, #0]
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 fbca 	bl	800f576 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6839      	ldr	r1, [r7, #0]
 800edfa:	4618      	mov	r0, r3
 800edfc:	f000 fbd1 	bl	800f5a2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4618      	mov	r0, r3
 800ee04:	3708      	adds	r7, #8
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS7_IfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800ee0a:	b480      	push	{r7}
 800ee0c:	b083      	sub	sp, #12
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4618      	mov	r0, r3
 800ee16:	370c      	adds	r7, #12
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	6879      	ldr	r1, [r7, #4]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f000 fbc9 	bl	800f5ca <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>
 800ee38:	eef0 7a40 	vmov.f32	s15, s0
  }
 800ee3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800ee46:	b5b0      	push	{r4, r5, r7, lr}
 800ee48:	b084      	sub	sp, #16
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	60f8      	str	r0, [r7, #12]
 800ee4e:	60b9      	str	r1, [r7, #8]
 800ee50:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681c      	ldr	r4, [r3, #0]
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f000 fbd8 	bl	800f60c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	fb03 f502 	mul.w	r5, r3, r2
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f000 fbdc 	bl	800f622 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	fb02 f303 	mul.w	r3, r2, r3
 800ee72:	442b      	add	r3, r5
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	4423      	add	r3, r4
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	ee07 3a90 	vmov	s15, r3
  }
 800ee7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ee82:	3710      	adds	r7, #16
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bdb0      	pop	{r4, r5, r7, pc}

0800ee88 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4618      	mov	r0, r3
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	4618      	mov	r0, r3
 800eeae:	370c      	adds	r7, #12
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_NS_10DenseShapeES4_Li3EE6evalToIS3_EEvRT_RKS3_SA_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b088      	sub	sp, #32
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 800eec4:	f107 0314 	add.w	r3, r7, #20
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	68b9      	ldr	r1, [r7, #8]
 800eecc:	4618      	mov	r0, r3
 800eece:	f000 fbb3 	bl	800f638 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>
 800eed2:	f107 031c 	add.w	r3, r7, #28
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7f7 fc45 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 800eedc:	f107 021c 	add.w	r2, r7, #28
 800eee0:	f107 0314 	add.w	r3, r7, #20
 800eee4:	4619      	mov	r1, r3
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f000 fbbd 	bl	800f666 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800eeec:	bf00      	nop
 800eeee:	3720      	adds	r7, #32
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f000 fbbe 	bl	800f688 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800ef16:	b480      	push	{r7}
 800ef18:	b083      	sub	sp, #12
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
    }
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4618      	mov	r0, r3
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fc f889 	bl	800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 800ef3c:	4603      	mov	r3, r0
    }
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b082      	sub	sp, #8
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
 800ef4e:	6039      	str	r1, [r7, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6839      	ldr	r1, [r7, #0]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 fbcd 	bl	800f6f4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3708      	adds	r7, #8
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	370c      	adds	r7, #12
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr

0800ef7a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEED1Ev>:
 800ef7a:	b480      	push	{r7}
 800ef7c:	b083      	sub	sp, #12
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 800ef9c:	68b9      	ldr	r1, [r7, #8]
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	f000 fbb7 	bl	800f712 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 800efa4:	eef0 7a40 	vmov.f32	s15, s0
  }
 800efa8:	eeb0 0a67 	vmov.f32	s0, s15
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b082      	sub	sp, #8
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800efba:	2200      	movs	r2, #0
 800efbc:	2102      	movs	r1, #2
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f7fd f983 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fbc8 	bl	800f75a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>
  }
 800efca:	bf00      	nop
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1ERKS8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b082      	sub	sp, #8
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	6039      	str	r1, [r7, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6839      	ldr	r1, [r7, #0]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f000 fbca 	bl	800f77a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4618      	mov	r0, r3
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEED1Ev>:
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4618      	mov	r0, r3
 800effc:	370c      	adds	r7, #12
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr

0800f006 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 800f006:	b480      	push	{r7}
 800f008:	b083      	sub	sp, #12
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4618      	mov	r0, r3
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4618      	mov	r0, r3
 800f028:	370c      	adds	r7, #12
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr

0800f032 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 800f032:	b580      	push	{r7, lr}
 800f034:	b082      	sub	sp, #8
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7f5 fb61 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f044:	4603      	mov	r3, r0
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 800f04e:	b580      	push	{r7, lr}
 800f050:	b082      	sub	sp, #8
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3304      	adds	r3, #4
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7f7 fa3b 	bl	80064d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 800f060:	4603      	mov	r3, r0
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f078:	68b8      	ldr	r0, [r7, #8]
 800f07a:	f7ff ffda 	bl	800f032 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4rowsEv>
 800f07e:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f080:	68b8      	ldr	r0, [r7, #8]
 800f082:	f7ff ffe4 	bl	800f04e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE4colsEv>
 800f086:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7f5 fbe1 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f090:	4602      	mov	r2, r0
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	4293      	cmp	r3, r2
 800f096:	d107      	bne.n	800f0a8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f5 fbce 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d001      	beq.n	800f0ac <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e000      	b.n	800f0ae <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d005      	beq.n	800f0be <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	693a      	ldr	r2, [r7, #16]
 800f0b6:	6979      	ldr	r1, [r7, #20]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7f8 fad5 	bl	8007668 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7f5 fbc6 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d107      	bne.n	800f0de <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7f5 fbb3 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d006      	beq.n	800f0ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 800f0de:	4b05      	ldr	r3, [pc, #20]	; (800f0f4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 800f0e0:	4a05      	ldr	r2, [pc, #20]	; (800f0f8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800f0e2:	f240 21fd 	movw	r1, #765	; 0x2fd
 800f0e6:	4805      	ldr	r0, [pc, #20]	; (800f0fc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_7ProductINS2_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS2_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800f0e8:	f00e fc8c 	bl	801da04 <__assert_func>
}
 800f0ec:	bf00      	nop
 800f0ee:	3718      	adds	r7, #24
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	08021ee4 	.word	0x08021ee4
 800f0f8:	080274a4 	.word	0x080274a4
 800f0fc:	08021ff8 	.word	0x08021ff8

0800f100 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKSC_RKSE_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
 800f10c:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	605a      	str	r2, [r3, #4]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	683a      	ldr	r2, [r7, #0]
 800f11e:	609a      	str	r2, [r3, #8]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	69ba      	ldr	r2, [r7, #24]
 800f124:	60da      	str	r2, [r3, #12]
  }
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	4618      	mov	r0, r3
 800f12a:	3714      	adds	r7, #20
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 fb53 	bl	800f7e8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>
  }
 800f142:	bf00      	nop
 800f144:	3708      	adds	r7, #8
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKSG_RKSI_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b084      	sub	sp, #16
 800f14e:	af00      	add	r7, sp, #0
 800f150:	60f8      	str	r0, [r7, #12]
 800f152:	60b9      	str	r1, [r7, #8]
 800f154:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f156:	68b9      	ldr	r1, [r7, #8]
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f000 fb54 	bl	800f806 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	68b9      	ldr	r1, [r7, #8]
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f000 fbbe 	bl	800f8e4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f168:	bf00      	nop
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6839      	ldr	r1, [r7, #0]
 800f17e:	4618      	mov	r0, r3
 800f180:	f000 fbe8 	bl	800f954 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4618      	mov	r0, r3
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}

0800f18e <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f18e:	b580      	push	{r7, lr}
 800f190:	b082      	sub	sp, #8
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
 800f196:	6039      	str	r1, [r7, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6839      	ldr	r1, [r7, #0]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 fbef 	bl	800f980 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>
  }
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f1ac:	b5b0      	push	{r4, r5, r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681c      	ldr	r4, [r3, #0]
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f000 fbf3 	bl	800f9a8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	fb03 f502 	mul.w	r5, r3, r2
 800f1ca:	68f8      	ldr	r0, [r7, #12]
 800f1cc:	f000 fbf7 	bl	800f9be <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	fb02 f303 	mul.w	r3, r2, r3
 800f1d8:	442b      	add	r3, r5
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	4423      	add	r3, r4
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	ee07 3a90 	vmov	s15, r3
  }
 800f1e4:	eeb0 0a67 	vmov.f32	s0, s15
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bdb0      	pop	{r4, r5, r7, pc}

0800f1ee <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b082      	sub	sp, #8
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f1f6:	f7f7 f858 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f1fa:	4603      	mov	r3, r0
  }
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3708      	adds	r7, #8
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}

0800f204 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f20c:	f7f7 f84d 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f210:	4603      	mov	r3, r0
  }
 800f212:	4618      	mov	r0, r3
 800f214:	3708      	adds	r7, #8
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_EEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f21a:	b480      	push	{r7}
 800f21c:	b083      	sub	sp, #12
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
 800f222:	6039      	str	r1, [r7, #0]
}
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_NS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f230:	b580      	push	{r7, lr}
 800f232:	b08c      	sub	sp, #48	; 0x30
 800f234:	af02      	add	r7, sp, #8
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f23c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f240:	68b9      	ldr	r1, [r7, #8]
 800f242:	4618      	mov	r0, r3
 800f244:	f7fa fd4f 	bl	8009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  resize_if_allowed(dst, src, func);
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	68b9      	ldr	r1, [r7, #8]
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f000 fbc1 	bl	800f9d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f252:	f107 0320 	add.w	r3, r7, #32
 800f256:	68f9      	ldr	r1, [r7, #12]
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fa fd44 	bl	8009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f000 fc04 	bl	800fa6c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800f264:	4603      	mov	r3, r0
 800f266:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f26a:	f107 0120 	add.w	r1, r7, #32
 800f26e:	f107 0010 	add.w	r0, r7, #16
 800f272:	9300      	str	r3, [sp, #0]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f000 fc04 	bl	800fa82 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f27a:	f107 0310 	add.w	r3, r7, #16
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 fc19 	bl	800fab6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>
  DstEvaluatorType dstEvaluator(dst);
 800f284:	f107 0320 	add.w	r3, r7, #32
 800f288:	4618      	mov	r0, r3
 800f28a:	f7f9 fc13 	bl	8008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f28e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f292:	4618      	mov	r0, r3
 800f294:	f7f9 fc0e 	bl	8008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
}
 800f298:	bf00      	nop
 800f29a:	3728      	adds	r7, #40	; 0x28
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr

0800f2b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi1ELi0ELi3ELi1EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	370c      	adds	r7, #12
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi1ELi0ELi3ELi1EEENS_10DenseShapeES5_Li6EE5subToINS2_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void subTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	ed2d 8b02 	vpush	{d8}
 800f2d6:	b088      	sub	sp, #32
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
  { dst.coeffRef(0,0) -= (lhs.transpose().cwiseProduct(rhs)).sum(); }
 800f2e0:	68b8      	ldr	r0, [r7, #8]
 800f2e2:	f000 fbf3 	bl	800facc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	61fb      	str	r3, [r7, #28]
 800f2ea:	f107 0310 	add.w	r3, r7, #16
 800f2ee:	f107 011c 	add.w	r1, r7, #28
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f000 fbfc 	bl	800faf2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>
 800f2fa:	f107 0310 	add.w	r3, r7, #16
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fc25 	bl	800fb4e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>
 800f304:	eeb0 8a40 	vmov.f32	s16, s0
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	2100      	movs	r1, #0
 800f30e:	4618      	mov	r0, r3
 800f310:	f7f6 ff11 	bl	8006136 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 800f314:	4603      	mov	r3, r0
 800f316:	edd3 7a00 	vldr	s15, [r3]
 800f31a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f31e:	edc3 7a00 	vstr	s15, [r3]
 800f322:	bf00      	nop
 800f324:	3720      	adds	r7, #32
 800f326:	46bd      	mov	sp, r7
 800f328:	ecbd 8b02 	vpop	{d8}
 800f32c:	bd80      	pop	{r7, pc}

0800f32e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
 800f32e:	b580      	push	{r7, lr}
 800f330:	b082      	sub	sp, #8
 800f332:	af00      	add	r7, sp, #0
 800f334:	6078      	str	r0, [r7, #4]
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fc24 	bl	800fb84 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4618      	mov	r0, r3
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>:
class dense_product_base
 800f346:	b580      	push	{r7, lr}
 800f348:	b082      	sub	sp, #8
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f7ff ffed 	bl	800f32e <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800f35e:	b580      	push	{r7, lr}
 800f360:	b082      	sub	sp, #8
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f7ff ffed 	bl	800f346 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi4EEC1Ev>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800f378:	b590      	push	{r4, r7, lr}
 800f37a:	b085      	sub	sp, #20
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f7ff ffea 	bl	800f35e <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1ENS_5DenseEEC1Ev>
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	68ba      	ldr	r2, [r7, #8]
 800f38e:	601a      	str	r2, [r3, #0]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	4618      	mov	r0, r3
 800f39a:	f7f5 fa4f 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 800f39e:	4604      	mov	r4, r0
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7f5 fb71 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	429c      	cmp	r4, r3
 800f3ac:	d005      	beq.n	800f3ba <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 800f3ae:	4b06      	ldr	r3, [pc, #24]	; (800f3c8 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 800f3b0:	4a06      	ldr	r2, [pc, #24]	; (800f3cc <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 800f3b2:	2160      	movs	r1, #96	; 0x60
 800f3b4:	4806      	ldr	r0, [pc, #24]	; (800f3d0 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 800f3b6:	f00e fb25 	bl	801da04 <__assert_func>
 800f3ba:	bf00      	nop
    }
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd90      	pop	{r4, r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	0801fb2c 	.word	0x0801fb2c
 800f3cc:	080275cc 	.word	0x080275cc
 800f3d0:	0801fe7c 	.word	0x0801fe7c

0800f3d4 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS7_RKS9_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800f3e0:	68b9      	ldr	r1, [r7, #8]
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f000 fbd9 	bl	800fb9a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	68b9      	ldr	r1, [r7, #8]
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f000 fc17 	bl	800fc20 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800f3f2:	bf00      	nop
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 800f3fa:	b480      	push	{r7}
 800f3fc:	b083      	sub	sp, #12
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	3330      	adds	r3, #48	; 0x30
 800f406:	4618      	mov	r0, r3
 800f408:	370c      	adds	r7, #12
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr

0800f412 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 800f412:	b480      	push	{r7}
 800f414:	b083      	sub	sp, #12
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	4618      	mov	r0, r3
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IS8_Li3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	3318      	adds	r3, #24
 800f434:	4618      	mov	r0, r3
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6839      	ldr	r1, [r7, #0]
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 fc1e 	bl	800fc90 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4618      	mov	r0, r3
 800f458:	3708      	adds	r7, #8
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f45e:	b590      	push	{r4, r7, lr}
 800f460:	b087      	sub	sp, #28
 800f462:	af00      	add	r7, sp, #0
 800f464:	60f8      	str	r0, [r7, #12]
 800f466:	60b9      	str	r1, [r7, #8]
 800f468:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	4618      	mov	r0, r3
 800f46e:	f000 fc1e 	bl	800fcae <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 800f472:	4604      	mov	r4, r0
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3304      	adds	r3, #4
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	68b9      	ldr	r1, [r7, #8]
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7ff fccf 	bl	800ee20 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 800f482:	eef0 7a40 	vmov.f32	s15, s0
 800f486:	edc7 7a04 	vstr	s15, [r7, #16]
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	330c      	adds	r3, #12
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	68b9      	ldr	r1, [r7, #8]
 800f492:	4618      	mov	r0, r3
 800f494:	f000 fc16 	bl	800fcc4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 800f498:	eef0 7a40 	vmov.f32	s15, s0
 800f49c:	edc7 7a05 	vstr	s15, [r7, #20]
 800f4a0:	f107 0214 	add.w	r2, r7, #20
 800f4a4:	f107 0310 	add.w	r3, r7, #16
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f7ff fafc 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800f4b0:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f4b4:	eeb0 0a67 	vmov.f32	s0, s15
 800f4b8:	371c      	adds	r7, #28
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd90      	pop	{r4, r7, pc}

0800f4be <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1ERKSJ_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b082      	sub	sp, #8
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	6039      	str	r1, [r7, #0]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6839      	ldr	r1, [r7, #0]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f000 fc1a 	bl	800fd06 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3708      	adds	r7, #8
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f000 fc21 	bl	800fd32 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>
  }
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>:
    T value() { return T(Value); }
 800f4fa:	b480      	push	{r7}
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	2300      	movs	r3, #0
 800f500:	4618      	mov	r0, r3
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr

0800f50a <_ZNK5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f50a:	b5b0      	push	{r4, r5, r7, lr}
 800f50c:	b084      	sub	sp, #16
 800f50e:	af00      	add	r7, sp, #0
 800f510:	60f8      	str	r0, [r7, #12]
 800f512:	60b9      	str	r1, [r7, #8]
 800f514:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(m_startRow.value() + row, m_startCol.value() + col);
 800f516:	68fc      	ldr	r4, [r7, #12]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	3310      	adds	r3, #16
 800f51c:	4618      	mov	r0, r3
 800f51e:	f000 fc1c 	bl	800fd5a <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 800f522:	4602      	mov	r2, r0
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	18d5      	adds	r5, r2, r3
 800f528:	f7ff ffe7 	bl	800f4fa <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 800f52c:	4602      	mov	r2, r0
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4413      	add	r3, r2
 800f532:	461a      	mov	r2, r3
 800f534:	4629      	mov	r1, r5
 800f536:	4620      	mov	r0, r4
 800f538:	f000 fc1b 	bl	800fd72 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>
 800f53c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f540:	eeb0 0a67 	vmov.f32	s0, s15
 800f544:	3710      	adds	r7, #16
 800f546:	46bd      	mov	sp, r7
 800f548:	bdb0      	pop	{r4, r5, r7, pc}

0800f54a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b082      	sub	sp, #8
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f552:	f7f6 feaa 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f556:	4603      	mov	r3, r0
  }
 800f558:	4618      	mov	r0, r3
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f568:	f7f6 fe97 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f56c:	4603      	mov	r3, r0
  }
 800f56e:	4618      	mov	r0, r3
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800f576:	b590      	push	{r4, r7, lr}
 800f578:	b083      	sub	sp, #12
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	6039      	str	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fc2d 	bl	800fde0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>
 800f586:	687c      	ldr	r4, [r7, #4]
 800f588:	6838      	ldr	r0, [r7, #0]
 800f58a:	f000 fc1e 	bl	800fdca <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>
 800f58e:	4603      	mov	r3, r0
 800f590:	4619      	mov	r1, r3
 800f592:	4620      	mov	r0, r4
 800f594:	f000 fc2f 	bl	800fdf6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4618      	mov	r0, r3
 800f59c:	370c      	adds	r7, #12
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd90      	pop	{r4, r7, pc}

0800f5a2 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
{
  typedef Block<ArgType, BlockRows, BlockCols, InnerPanel> XprType;
  typedef typename XprType::Scalar Scalar;

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit block_evaluator(const XprType& block)
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
 800f5aa:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6839      	ldr	r1, [r7, #0]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f000 fc2f 	bl	800fe14 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>
  {
    // TODO: for the 3.3 release, this should be turned to an internal assertion, but let's keep it as is for the beta lifetime
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f000 fc55 	bl	800fe68 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800f5be:	bf00      	nop
  }
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800f5ca:	b5b0      	push	{r4, r5, r7, lr}
 800f5cc:	b084      	sub	sp, #16
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	60f8      	str	r0, [r7, #12]
 800f5d2:	60b9      	str	r1, [r7, #8]
 800f5d4:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681c      	ldr	r4, [r3, #0]
 800f5da:	68f8      	ldr	r0, [r7, #12]
 800f5dc:	f000 fc50 	bl	800fe80 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	fb03 f502 	mul.w	r5, r3, r2
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f000 fc54 	bl	800fe96 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	fb02 f303 	mul.w	r3, r2, r3
 800f5f6:	442b      	add	r3, r5
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	4423      	add	r3, r4
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	ee07 3a90 	vmov	s15, r3
  }
 800f602:	eeb0 0a67 	vmov.f32	s0, s15
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bdb0      	pop	{r4, r5, r7, pc}

0800f60c <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f614:	f7f6 fe41 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f618:	4603      	mov	r3, r0
  }
 800f61a:	4618      	mov	r0, r3
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f622:	b580      	push	{r7, lr}
 800f624:	b082      	sub	sp, #8
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f62a:	f7f6 fe3e 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f62e:	4603      	mov	r3, r0
  }
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE11lazyProductIS2_EEKNS_7ProductIS2_T_Li1EEERKNS0_IS6_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 800f638:	b590      	push	{r4, r7, lr}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 800f644:	68b8      	ldr	r0, [r7, #8]
 800f646:	f7f5 fc68 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800f64a:	4604      	mov	r4, r0
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7f5 fc64 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 800f652:	4603      	mov	r3, r0
 800f654:	461a      	mov	r2, r3
 800f656:	4621      	mov	r1, r4
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	f000 fc4b 	bl	800fef4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>
}
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	3714      	adds	r7, #20
 800f662:	46bd      	mov	sp, r7
 800f664:	bd90      	pop	{r4, r7, pc}

0800f666 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 800f666:	b580      	push	{r7, lr}
 800f668:	b086      	sub	sp, #24
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	60f8      	str	r0, [r7, #12]
 800f66e:	60b9      	str	r1, [r7, #8]
 800f670:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	68b9      	ldr	r1, [r7, #8]
 800f67a:	6978      	ldr	r0, [r7, #20]
 800f67c:	f000 fc68 	bl	800ff50 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>
}
 800f680:	bf00      	nop
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 800f688:	b5b0      	push	{r4, r5, r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800f694:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800f696:	68b8      	ldr	r0, [r7, #8]
 800f698:	f000 fc6d 	bl	800ff76 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>
 800f69c:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 800f69e:	68b8      	ldr	r0, [r7, #8]
 800f6a0:	f000 fc7d 	bl	800ff9e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 800f6a4:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	fb02 f303 	mul.w	r3, r2, r3
 800f6ac:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 800f6ae:	441d      	add	r5, r3
 800f6b0:	68b8      	ldr	r0, [r7, #8]
 800f6b2:	f7f5 fd76 	bl	80051a2 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f000 fca3 	bl	8010008 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	3308      	adds	r3, #8
 800f6c6:	68ba      	ldr	r2, [r7, #8]
 800f6c8:	6812      	ldr	r2, [r2, #0]
 800f6ca:	601a      	str	r2, [r3, #0]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	330c      	adds	r3, #12
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fd fe30 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	3310      	adds	r3, #16
 800f6dc:	6879      	ldr	r1, [r7, #4]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fd fe2a 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 800f6e4:	68f8      	ldr	r0, [r7, #12]
 800f6e6:	f000 fccd 	bl	8010084 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>
    }
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bdb0      	pop	{r4, r5, r7, pc}

0800f6f4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	4618      	mov	r0, r3
 800f704:	f000 fcce 	bl	80100a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	4618      	mov	r0, r3
 800f70c:	3708      	adds	r7, #8
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}

0800f712 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 800f712:	b580      	push	{r7, lr}
 800f714:	b084      	sub	sp, #16
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
 800f71a:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800f71c:	6839      	ldr	r1, [r7, #0]
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 fcd2 	bl	80100c8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 800f724:	eef0 7a40 	vmov.f32	s15, s0
 800f728:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 fcdb 	bl	80100ea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 800f734:	eef0 7a40 	vmov.f32	s15, s0
 800f738:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 800f73c:	f107 020c 	add.w	r2, r7, #12
 800f740:	f107 0308 	add.w	r3, r7, #8
 800f744:	4619      	mov	r1, r3
 800f746:	6838      	ldr	r0, [r7, #0]
 800f748:	f7f9 f96d 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 800f74c:	eef0 7a40 	vmov.f32	s15, s0
  }
 800f750:	eeb0 0a67 	vmov.f32	s0, s15
 800f754:	3710      	adds	r7, #16
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b082      	sub	sp, #8
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 800f762:	2201      	movs	r2, #1
 800f764:	2102      	movs	r1, #2
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f7fc fdaf 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f000 fce0 	bl	8010132 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>
  }
 800f772:	bf00      	nop
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}

0800f77a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffEC1ERKS8_>:
  explicit product_evaluator(const XprType& xpr)
 800f77a:	b580      	push	{r7, lr}
 800f77c:	b082      	sub	sp, #8
 800f77e:	af00      	add	r7, sp, #0
 800f780:	6078      	str	r0, [r7, #4]
 800f782:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 fcfc 	bl	8010182 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 800f78a:	6838      	ldr	r0, [r7, #0]
 800f78c:	f000 fce1 	bl	8010152 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800f790:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 800f796:	6838      	ldr	r0, [r7, #0]
 800f798:	f000 fce7 	bl	801016a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>
 800f79c:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	3304      	adds	r3, #4
 800f7a2:	6812      	ldr	r2, [r2, #0]
 800f7a4:	601a      	str	r2, [r3, #0]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	4610      	mov	r0, r2
 800f7b4:	f7f7 fc3e 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	3304      	adds	r3, #4
      m_innerDim(xpr.lhs().cols())
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	f000 fce7 	bl	8010198 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 800f7ca:	6838      	ldr	r0, [r7, #0]
 800f7cc:	f000 fcc1 	bl	8010152 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7f4 ff8c 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	611a      	str	r2, [r3, #16]
  }
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f000 fcdf 	bl	80101b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 fcff 	bl	80101fc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>
  }
 800f7fe:	bf00      	nop
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800f806:	b480      	push	{r7}
 800f808:	b083      	sub	sp, #12
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	6039      	str	r1, [r7, #0]
}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	4618      	mov	r0, r3
 800f828:	f7f9 f944 	bl	8008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4618      	mov	r0, r3
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800f836:	b580      	push	{r7, lr}
 800f838:	b082      	sub	sp, #8
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	f7ff ffeb 	bl	800f81c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffED1Ev>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>:
struct evaluator<const T>
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7ff ffeb 	bl	800f836 <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>:
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	f7f9 f91d 	bl	8008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	330c      	adds	r3, #12
 800f890:	4618      	mov	r0, r3
 800f892:	f7ff ffea 	bl	800f86a <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	3304      	adds	r3, #4
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7ff ffd8 	bl	800f850 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEED1Ev>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b082      	sub	sp, #8
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff ffe5 	bl	800f884 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f000 fcbc 	bl	8010238 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3708      	adds	r7, #8
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b082      	sub	sp, #8
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff ffe8 	bl	800f8aa <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffED1Ev>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b090      	sub	sp, #64	; 0x40
 800f8e8:	af02      	add	r7, sp, #8
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800f8f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8f4:	68b9      	ldr	r1, [r7, #8]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f000 fc8f 	bl	801021a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>
  resize_if_allowed(dst, src, func);
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	68b9      	ldr	r1, [r7, #8]
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f000 fca5 	bl	8010250 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 800f906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f90a:	68f9      	ldr	r1, [r7, #12]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fa f9ea 	bl	8009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800f912:	68f8      	ldr	r0, [r7, #12]
 800f914:	f000 f8aa 	bl	800fa6c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>
 800f918:	4603      	mov	r3, r0
 800f91a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f91e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f922:	f107 0014 	add.w	r0, r7, #20
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f000 fcdb 	bl	80102e4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800f92e:	f107 0314 	add.w	r3, r7, #20
 800f932:	4618      	mov	r0, r3
 800f934:	f000 fcf0 	bl	8010318 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>
  DstEvaluatorType dstEvaluator(dst);
 800f938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f93c:	4618      	mov	r0, r3
 800f93e:	f7f9 f8b9 	bl	8008ab4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800f942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f946:	4618      	mov	r0, r3
 800f948:	f7ff ffbf 	bl	800f8ca <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>
}
 800f94c:	bf00      	nop
 800f94e:	3738      	adds	r7, #56	; 0x38
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800f954:	b590      	push	{r4, r7, lr}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	6039      	str	r1, [r7, #0]
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 fcf0 	bl	8010344 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>
 800f964:	687c      	ldr	r4, [r7, #4]
 800f966:	6838      	ldr	r0, [r7, #0]
 800f968:	f000 fce1 	bl	801032e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800f96c:	4603      	mov	r3, r0
 800f96e:	4619      	mov	r1, r3
 800f970:	4620      	mov	r0, r4
 800f972:	f000 fcf2 	bl	801035a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4618      	mov	r0, r3
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd90      	pop	{r4, r7, pc}

0800f980 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6839      	ldr	r1, [r7, #0]
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 fcf2 	bl	8010378 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	4618      	mov	r0, r3
 800f998:	f000 fd18 	bl	80103cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 800f99c:	bf00      	nop
  }
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}

0800f9a8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800f9b0:	f7f6 fc73 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800f9b4:	4603      	mov	r3, r0
  }
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3708      	adds	r7, #8
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b082      	sub	sp, #8
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800f9c6:	f7f6 fc70 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800f9ca:	4603      	mov	r3, r0
  }
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3708      	adds	r7, #8
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b086      	sub	sp, #24
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7f5 fe7f 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f9e8:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7f5 fe85 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800f9f2:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7f5 fe75 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d107      	bne.n	800fa14 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f5 fe78 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d001      	beq.n	800fa18 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x44>
 800fa14:	2301      	movs	r3, #1
 800fa16:	e000      	b.n	800fa1a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x46>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d005      	beq.n	800fa2a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x56>
    dst.resize(dstRows, dstCols);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	693a      	ldr	r2, [r7, #16]
 800fa22:	6979      	ldr	r1, [r7, #20]
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fd f9af 	bl	800cd88 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7f5 fe5a 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 800fa32:	4602      	mov	r2, r0
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d107      	bne.n	800fa4a <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x76>
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7f5 fe5d 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 800fa42:	4602      	mov	r2, r0
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d006      	beq.n	800fa58 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x84>
 800fa4a:	4b05      	ldr	r3, [pc, #20]	; (800fa60 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 800fa4c:	4a05      	ldr	r2, [pc, #20]	; (800fa64 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 800fa4e:	f240 21fd 	movw	r1, #765	; 0x2fd
 800fa52:	4805      	ldr	r0, [pc, #20]	; (800fa68 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEES3_ffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x94>)
 800fa54:	f00d ffd6 	bl	801da04 <__assert_func>
}
 800fa58:	bf00      	nop
 800fa5a:	3718      	adds	r7, #24
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	08021ee4 	.word	0x08021ee4
 800fa64:	080276f4 	.word	0x080276f4
 800fa68:	08021ff8 	.word	0x08021ff8

0800fa6c <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4618      	mov	r0, r3
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EEC1ERS5_RKS5_RKS7_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 800fa82:	b480      	push	{r7}
 800fa84:	b085      	sub	sp, #20
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	60f8      	str	r0, [r7, #12]
 800fa8a:	60b9      	str	r1, [r7, #8]
 800fa8c:	607a      	str	r2, [r7, #4]
 800fa8e:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	601a      	str	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	605a      	str	r2, [r3, #4]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	683a      	ldr	r2, [r7, #0]
 800faa0:	609a      	str	r2, [r3, #8]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	69ba      	ldr	r2, [r7, #24]
 800faa6:	60da      	str	r2, [r3, #12]
  }
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	4618      	mov	r0, r3
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr

0800fab6 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi2EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b082      	sub	sp, #8
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 fc90 	bl	80103e4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>
  }
 800fac4:	bf00      	nop
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  return ConstTransposeReturnType(derived());
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7f5 fcf1 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 800fada:	4602      	mov	r2, r0
 800fadc:	f107 030c 	add.w	r3, r7, #12
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f000 fca5 	bl	8010432 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>
 800fae8:	68fb      	ldr	r3, [r7, #12]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE12cwiseProductINS2_IfLi3ELi1ELi0ELi3ELi1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSA_6traitsIT_E6ScalarEEEKS5_KSD_EERKNS0_ISD_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 800faf2:	b5b0      	push	{r4, r5, r7, lr}
 800faf4:	b086      	sub	sp, #24
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	60f8      	str	r0, [r7, #12]
 800fafa:	60b9      	str	r1, [r7, #8]
 800fafc:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 800fafe:	68b8      	ldr	r0, [r7, #8]
 800fb00:	f000 fca7 	bl	8010452 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 800fb04:	4604      	mov	r4, r0
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7f5 f83f 	bl	8004b8a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE7derivedEv>
 800fb0c:	4605      	mov	r5, r0
 800fb0e:	f107 0314 	add.w	r3, r7, #20
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f5 f898 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 800fb18:	f107 0314 	add.w	r3, r7, #20
 800fb1c:	462a      	mov	r2, r5
 800fb1e:	4621      	mov	r1, r4
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f000 fcd5 	bl	80104d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>
}
 800fb26:	68f8      	ldr	r0, [r7, #12]
 800fb28:	3718      	adds	r7, #24
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bdb0      	pop	{r4, r5, r7, pc}

0800fb2e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b082      	sub	sp, #8
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 fd18 	bl	801056c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f000 fd1f 	bl	8010582 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 800fb44:	4603      	mov	r3, r0
 800fb46:	4618      	mov	r0, r3
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 800fb4e:	b590      	push	{r4, r7, lr}
 800fb50:	b085      	sub	sp, #20
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fd08 	bl	801056c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	f107 030c 	add.w	r3, r7, #12
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7f5 fb67 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 800fb68:	f107 030c 	add.w	r3, r7, #12
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	4620      	mov	r0, r4
 800fb70:	f000 fd88 	bl	8010684 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 800fb74:	eef0 7a40 	vmov.f32	s15, s0
 800fb78:	bf00      	nop
}
 800fb7a:	eeb0 0a67 	vmov.f32	s0, s15
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd90      	pop	{r4, r7, pc}

0800fb84 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
    }
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	370c      	adds	r7, #12
 800fb92:	46bd      	mov	sp, r7
 800fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb98:	4770      	bx	lr

0800fb9a <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b082      	sub	sp, #8
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6078      	str	r0, [r7, #4]
 800fba2:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7f4 fdad 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	dd08      	ble.n	800fbc4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7f4 fd9b 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	dd01      	ble.n	800fbc4 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2a>
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	e000      	b.n	800fbc6 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x2c>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d003      	beq.n	800fbd2 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 800fbca:	6839      	ldr	r1, [r7, #0]
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fd9f 	bl	8010710 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>
}
 800fbd2:	bf00      	nop
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	330c      	adds	r3, #12
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe fe48 	bl	800e87c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3308      	adds	r3, #8
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7f4 ff9a 	bl	8004b2a <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 fda4 	bl	8010744 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b082      	sub	sp, #8
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7ff ffe2 	bl	800fbda <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffED1Ev>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b090      	sub	sp, #64	; 0x40
 800fc24:	af02      	add	r7, sp, #8
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 800fc2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f000 fd77 	bl	8010726 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	68b9      	ldr	r1, [r7, #8]
 800fc3c:	68f8      	ldr	r0, [r7, #12]
 800fc3e:	f000 fda9 	bl	8010794 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>
  DstEvaluatorType dstEvaluator(dst);
 800fc42:	f107 0320 	add.w	r3, r7, #32
 800fc46:	68f9      	ldr	r1, [r7, #12]
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7f7 f9f3 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 800fc4e:	68f8      	ldr	r0, [r7, #12]
 800fc50:	f7f7 fa58 	bl	8007104 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 800fc54:	4603      	mov	r3, r0
 800fc56:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fc5a:	f107 0120 	add.w	r1, r7, #32
 800fc5e:	f107 0010 	add.w	r0, r7, #16
 800fc62:	9300      	str	r3, [sp, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f000 fdc3 	bl	80107f0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 800fc6a:	f107 0310 	add.w	r3, r7, #16
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f000 fdd8 	bl	8010824 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>
  DstEvaluatorType dstEvaluator(dst);
 800fc74:	f107 0320 	add.w	r3, r7, #32
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7f6 ffcc 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 800fc7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7ff ffbf 	bl	800fc06 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>
}
 800fc88:	bf00      	nop
 800fc8a:	3738      	adds	r7, #56	; 0x38
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6839      	ldr	r1, [r7, #0]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f000 fdcb 	bl	801083a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>
  }
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	4618      	mov	r0, r3
 800fca8:	3708      	adds	r7, #8
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}

0800fcae <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 800fcae:	b480      	push	{r7}
 800fcb0:	b083      	sub	sp, #12
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	370c      	adds	r7, #12
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fcc4:	b5b0      	push	{r4, r5, r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681c      	ldr	r4, [r3, #0]
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f000 fdc4 	bl	8010862 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	fb03 f502 	mul.w	r5, r3, r2
 800fce2:	68f8      	ldr	r0, [r7, #12]
 800fce4:	f000 fdc8 	bl	8010878 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 800fce8:	4602      	mov	r2, r0
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	fb02 f303 	mul.w	r3, r2, r3
 800fcf0:	442b      	add	r3, r5
 800fcf2:	009b      	lsls	r3, r3, #2
 800fcf4:	4423      	add	r3, r4
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	ee07 3a90 	vmov	s15, r3
  }
 800fcfc:	eeb0 0a67 	vmov.f32	s0, s15
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bdb0      	pop	{r4, r5, r7, pc}

0800fd06 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEENS0_10IndexBasedEfEC1ERKSJ_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 800fd06:	b590      	push	{r4, r7, lr}
 800fd08:	b083      	sub	sp, #12
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
 800fd0e:	6039      	str	r1, [r7, #0]
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fdc7 	bl	80108a4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>
 800fd16:	687c      	ldr	r4, [r7, #4]
 800fd18:	6838      	ldr	r0, [r7, #0]
 800fd1a:	f000 fdb8 	bl	801088e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	4619      	mov	r1, r3
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 fdc9 	bl	80108ba <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	370c      	adds	r7, #12
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd90      	pop	{r4, r7, pc}

0800fd32 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b082      	sub	sp, #8
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
 800fd3a:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	4618      	mov	r0, r3
 800fd42:	f000 fdc9 	bl	80108d8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f000 fdef 	bl	801092c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 800fd4e:	bf00      	nop
  }
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4618      	mov	r0, r3
 800fd54:	3708      	adds	r7, #8
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T value() const { return m_value; }
 800fd5a:	b480      	push	{r7}
 800fd5c:	b083      	sub	sp, #12
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4618      	mov	r0, r3
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 800fd72:	b5b0      	push	{r4, r5, r7, lr}
 800fd74:	b086      	sub	sp, #24
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	60f8      	str	r0, [r7, #12]
 800fd7a:	60b9      	str	r1, [r7, #8]
 800fd7c:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	4618      	mov	r0, r3
 800fd82:	f000 fddf 	bl	8010944 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 800fd86:	4604      	mov	r4, r0
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	68b9      	ldr	r1, [r7, #8]
 800fd90:	4618      	mov	r0, r3
 800fd92:	f000 fde2 	bl	801095a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 800fd96:	4605      	mov	r5, r0
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	68b9      	ldr	r1, [r7, #8]
 800fda0:	4618      	mov	r0, r3
 800fda2:	f000 fdf2 	bl	801098a <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>
 800fda6:	eef0 7a40 	vmov.f32	s15, s0
 800fdaa:	edc7 7a05 	vstr	s15, [r7, #20]
 800fdae:	f107 0314 	add.w	r3, r7, #20
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f7fe fe76 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 800fdbc:	eef0 7a40 	vmov.f32	s15, s0
  }
 800fdc0:	eeb0 0a67 	vmov.f32	s0, s15
 800fdc4:	3718      	adds	r7, #24
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bdb0      	pop	{r4, r5, r7, pc}

0800fdca <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 800fdca:	b480      	push	{r7}
 800fdcc:	b083      	sub	sp, #12
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	4618      	mov	r0, r3
 800fdec:	370c      	adds	r7, #12
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr

0800fdf6 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b082      	sub	sp, #8
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	6039      	str	r1, [r7, #0]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6839      	ldr	r1, [r7, #0]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f000 fdd4 	bl	80109b2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3708      	adds	r7, #8
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 800fe14:	b590      	push	{r4, r7, lr}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
 800fe1c:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 fdf2 	bl	8010a08 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	4618      	mov	r0, r3
 800fe28:	f000 f81e 	bl	800fe68 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>
 800fe2c:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	601a      	str	r2, [r3, #0]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	1d1c      	adds	r4, r3, #4
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	4618      	mov	r0, r3
 800fe3a:	f000 fdc9 	bl	80109d0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	4619      	mov	r1, r3
 800fe42:	4620      	mov	r0, r4
 800fe44:	f7f6 fa04 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	1d5c      	adds	r4, r3, #5
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f000 fdcc 	bl	80109ec <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 800fe54:	4603      	mov	r3, r0
 800fe56:	4619      	mov	r1, r3
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f7f6 f9df 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	4618      	mov	r0, r3
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd90      	pop	{r4, r7, pc}

0800fe68 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	4618      	mov	r0, r3
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 800fe88:	f7f6 fa07 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 800fe8c:	4603      	mov	r3, r0
  }
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b082      	sub	sp, #8
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 800fe9e:	f7f6 fa04 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 800fea2:	4603      	mov	r3, r0
  }
 800fea4:	4618      	mov	r0, r3
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 fdb2 	bl	8010a1e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>:
class dense_product_base
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7ff ffed 	bl	800feac <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4618      	mov	r0, r3
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f7ff ffed 	bl	800fec4 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1ELi3EEC1Ev>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 800fef4:	b590      	push	{r4, r7, lr}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
 800ff00:	68f8      	ldr	r0, [r7, #12]
 800ff02:	f7ff ffeb 	bl	800fedc <_ZN5Eigen11ProductImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1ENS_5DenseEEC1Ev>
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	601a      	str	r2, [r3, #0]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7f4 fbeb 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7f4 fbf1 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 800ff24:	4603      	mov	r3, r0
 800ff26:	429c      	cmp	r4, r3
 800ff28:	d005      	beq.n	800ff36 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x42>
 800ff2a:	4b06      	ldr	r3, [pc, #24]	; (800ff44 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x50>)
 800ff2c:	4a06      	ldr	r2, [pc, #24]	; (800ff48 <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x54>)
 800ff2e:	2160      	movs	r1, #96	; 0x60
 800ff30:	4806      	ldr	r0, [pc, #24]	; (800ff4c <_ZN5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EEC1ERKS2_S5_+0x58>)
 800ff32:	f00d fd67 	bl	801da04 <__assert_func>
 800ff36:	bf00      	nop
    }
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3714      	adds	r7, #20
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd90      	pop	{r4, r7, pc}
 800ff42:	bf00      	nop
 800ff44:	0801fb2c 	.word	0x0801fb2c
 800ff48:	080277d8 	.word	0x080277d8
 800ff4c:	0801fe7c 	.word	0x0801fe7c

0800ff50 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS5_RKS7_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 800ff5c:	68b9      	ldr	r1, [r7, #8]
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f000 fd68 	bl	8010a34 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	68b9      	ldr	r1, [r7, #8]
 800ff68:	68f8      	ldr	r0, [r7, #12]
 800ff6a:	f000 fda6 	bl	8010aba <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 800ff6e:	bf00      	nop
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b082      	sub	sp, #8
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f7f5 f8d2 	bl	8005128 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800ff84:	4603      	mov	r3, r0
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fd fadc 	bl	800d544 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7f7 fcf2 	bl	8007978 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4dataEv>
 800ff94:	4603      	mov	r3, r0
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	b082      	sub	sp, #8
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f7f5 f8be 	bl	8005128 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800ffac:	4603      	mov	r3, r0
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fd fac8 	bl	800d544 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fd f968 	bl	800d28c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b082      	sub	sp, #8
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7f5 f8aa 	bl	8005128 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE7derivedEv>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fd fab4 	bl	800d544 <_ZNK5Eigen9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE16nestedExpressionEv>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7f7 ff04 	bl	8007dec <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}

0800ffee <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fd97 	bl	8010b2a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
	...

08010008 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	607a      	str	r2, [r7, #4]
 8010014:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f7ff ffe9 	bl	800ffee <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	68ba      	ldr	r2, [r7, #8]
 8010020:	601a      	str	r2, [r3, #0]
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	3304      	adds	r3, #4
 8010026:	6879      	ldr	r1, [r7, #4]
 8010028:	4618      	mov	r0, r3
 801002a:	f7f6 f8f7 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	3305      	adds	r3, #5
 8010032:	6839      	ldr	r1, [r7, #0]
 8010034:	4618      	mov	r0, r3
 8010036:	f7f6 f90b 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d011      	beq.n	8010064 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2b00      	cmp	r3, #0
 8010044:	db08      	blt.n	8010058 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b03      	cmp	r3, #3
 801004a:	d105      	bne.n	8010058 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	db02      	blt.n	8010058 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	2b01      	cmp	r3, #1
 8010056:	d005      	beq.n	8010064 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8010058:	4b07      	ldr	r3, [pc, #28]	; (8010078 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 801005a:	4a08      	ldr	r2, [pc, #32]	; (801007c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 801005c:	21b0      	movs	r1, #176	; 0xb0
 801005e:	4808      	ldr	r0, [pc, #32]	; (8010080 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 8010060:	f00d fcd0 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 8010064:	2100      	movs	r1, #0
 8010066:	68f8      	ldr	r0, [r7, #12]
 8010068:	f000 fd6a 	bl	8010b40 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	08025f90 	.word	0x08025f90
 801007c:	08027900 	.word	0x08027900
 8010080:	08026140 	.word	0x08026140

08010084 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE4initEv>:
    void init()
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 8010090:	4618      	mov	r0, r3
 8010092:	f7ff ff84 	bl	800ff9e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8010096:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	615a      	str	r2, [r3, #20]
    }
 801009c:	bf00      	nop
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 fd51 	bl	8010b56 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	4618      	mov	r0, r3
 80100ba:	f000 fd57 	bl	8010b6c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4618      	mov	r0, r3
 80100c2:	3708      	adds	r7, #8
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80100d2:	2200      	movs	r2, #0
 80100d4:	2100      	movs	r1, #0
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 fd70 	bl	8010bbc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80100dc:	eef0 7a40 	vmov.f32	s15, s0
  }
 80100e0:	eeb0 0a67 	vmov.f32	s0, s15
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b084      	sub	sp, #16
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
 80100f2:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80100f4:	6839      	ldr	r1, [r7, #0]
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fd73 	bl	8010be2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 80100fc:	eef0 7a40 	vmov.f32	s15, s0
 8010100:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8010104:	6839      	ldr	r1, [r7, #0]
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 fd7c 	bl	8010c04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 801010c:	eef0 7a40 	vmov.f32	s15, s0
 8010110:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8010114:	f107 020c 	add.w	r2, r7, #12
 8010118:	f107 0308 	add.w	r3, r7, #8
 801011c:	4619      	mov	r1, r3
 801011e:	6838      	ldr	r0, [r7, #0]
 8010120:	f7f8 fc81 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8010124:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010128:	eeb0 0a67 	vmov.f32	s0, s15
 801012c:	3710      	adds	r7, #16
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}

08010132 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010132:	b580      	push	{r7, lr}
 8010134:	b082      	sub	sp, #8
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801013a:	2202      	movs	r2, #2
 801013c:	2102      	movs	r1, #2
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f7fc f8c3 	bl	800c2ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS2_INS_7ProductINS6_INS3_IfLi3ELi3ELi0ELi3ELi3EEES7_Li0EEENS_9TransposeIS7_EELi1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f000 fd6e 	bl	8010c26 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>
  }
 801014a:	bf00      	nop
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}

08010152 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8010152:	b480      	push	{r7}
 8010154:	b083      	sub	sp, #12
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4618      	mov	r0, r3
 8010160:	370c      	adds	r7, #12
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr

0801016a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS1_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 801016a:	b480      	push	{r7}
 801016c:	b083      	sub	sp, #12
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	3304      	adds	r3, #4
 8010176:	4618      	mov	r0, r3
 8010178:	370c      	adds	r7, #12
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr

08010182 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010182:	b480      	push	{r7}
 8010184:	b083      	sub	sp, #12
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4618      	mov	r0, r3
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6839      	ldr	r1, [r7, #0]
 80101a6:	4618      	mov	r0, r3
 80101a8:	f000 fd47 	bl	8010c3a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4618      	mov	r0, r3
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80101b6:	b5b0      	push	{r4, r5, r7, lr}
 80101b8:	b084      	sub	sp, #16
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
 80101be:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	689c      	ldr	r4, [r3, #8]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	6839      	ldr	r1, [r7, #0]
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7f7 fe81 	bl	8007ed2 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE8coeffRefEi>
 80101d0:	4605      	mov	r5, r0
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	6839      	ldr	r1, [r7, #0]
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 fd44 	bl	8010c66 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>
 80101de:	eef0 7a40 	vmov.f32	s15, s0
 80101e2:	edc7 7a03 	vstr	s15, [r7, #12]
 80101e6:	f107 030c 	add.w	r3, r7, #12
 80101ea:	461a      	mov	r2, r3
 80101ec:	4629      	mov	r1, r5
 80101ee:	4620      	mov	r0, r4
 80101f0:	f7f7 fe28 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80101f4:	bf00      	nop
 80101f6:	3710      	adds	r7, #16
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bdb0      	pop	{r4, r5, r7, pc}

080101fc <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010204:	2101      	movs	r1, #1
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7ff ffd5 	bl	80101b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 fd63 	bl	8010cd8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>
  }
 8010212:	bf00      	nop
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801021a:	b580      	push	{r7, lr}
 801021c:	b082      	sub	sp, #8
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
 8010222:	6039      	str	r1, [r7, #0]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6839      	ldr	r1, [r7, #0]
 8010228:	4618      	mov	r0, r3
 801022a:	f000 fd64 	bl	8010cf6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4618      	mov	r0, r3
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	4618      	mov	r0, r3
 8010244:	370c      	adds	r7, #12
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr
	...

08010250 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 801025c:	68b8      	ldr	r0, [r7, #8]
 801025e:	f7f5 faa4 	bl	80057aa <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010262:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 8010264:	68b8      	ldr	r0, [r7, #8]
 8010266:	f7f5 faad 	bl	80057c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 801026a:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	4618      	mov	r0, r3
 8010270:	f7f5 fa39 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 8010274:	4602      	mov	r2, r0
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	4293      	cmp	r3, r2
 801027a:	d107      	bne.n	801028c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	4618      	mov	r0, r3
 8010280:	f7f5 fa3c 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 8010284:	4602      	mov	r2, r0
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	4293      	cmp	r3, r2
 801028a:	d001      	beq.n	8010290 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 801028c:	2301      	movs	r3, #1
 801028e:	e000      	b.n	8010292 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8010290:	2300      	movs	r3, #0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	693a      	ldr	r2, [r7, #16]
 801029a:	6979      	ldr	r1, [r7, #20]
 801029c:	4618      	mov	r0, r3
 801029e:	f7fc fd73 	bl	800cd88 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7f5 fa1e 	bl	80056e6 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4rowsEv>
 80102aa:	4602      	mov	r2, r0
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d107      	bne.n	80102c2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7f5 fa21 	bl	80056fc <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE4colsEv>
 80102ba:	4602      	mov	r2, r0
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	4293      	cmp	r3, r2
 80102c0:	d006      	beq.n	80102d0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 80102c2:	4b05      	ldr	r3, [pc, #20]	; (80102d8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 80102c4:	4a05      	ldr	r2, [pc, #20]	; (80102dc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 80102c6:	f240 21fd 	movw	r1, #765	; 0x2fd
 80102ca:	4805      	ldr	r0, [pc, #20]	; (80102e0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEENS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS7_INS2_IfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS8_EELi0EEEKS3_EEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 80102cc:	f00d fb9a 	bl	801da04 <__assert_func>
}
 80102d0:	bf00      	nop
 80102d2:	3718      	adds	r7, #24
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	08021ee4 	.word	0x08021ee4
 80102dc:	08027a18 	.word	0x08027a18
 80102e0:	08021ff8 	.word	0x08021ff8

080102e4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EEC1ERS5_RKSJ_RKSL_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	607a      	str	r2, [r7, #4]
 80102f0:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	68ba      	ldr	r2, [r7, #8]
 80102f6:	601a      	str	r2, [r3, #0]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	605a      	str	r2, [r3, #4]
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	609a      	str	r2, [r3, #8]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	69ba      	ldr	r2, [r7, #24]
 8010308:	60da      	str	r2, [r3, #12]
  }
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	4618      	mov	r0, r3
 801030e:	3714      	adds	r7, #20
 8010310:	46bd      	mov	sp, r7
 8010312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010316:	4770      	bx	lr

08010318 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 fcfa 	bl	8010d1a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>
  }
 8010326:	bf00      	nop
 8010328:	3708      	adds	r7, #8
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 801032e:	b480      	push	{r7}
 8010330:	b083      	sub	sp, #12
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	4618      	mov	r0, r3
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4618      	mov	r0, r3
 8010350:	370c      	adds	r7, #12
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr

0801035a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801035a:	b580      	push	{r7, lr}
 801035c:	b082      	sub	sp, #8
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	6039      	str	r1, [r7, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6839      	ldr	r1, [r7, #0]
 8010368:	4618      	mov	r0, r3
 801036a:	f000 fce5 	bl	8010d38 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010378:	b590      	push	{r4, r7, lr}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f000 fd03 	bl	8010d8e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	4618      	mov	r0, r3
 801038c:	f000 f81e 	bl	80103cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>
 8010390:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	601a      	str	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	1d1c      	adds	r4, r3, #4
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	4618      	mov	r0, r3
 801039e:	f000 fcda 	bl	8010d56 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>
 80103a2:	4603      	mov	r3, r0
 80103a4:	4619      	mov	r1, r3
 80103a6:	4620      	mov	r0, r4
 80103a8:	f7f5 ff52 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	1d5c      	adds	r4, r3, #5
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f000 fcdd 	bl	8010d72 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>
 80103b8:	4603      	mov	r3, r0
 80103ba:	4619      	mov	r1, r3
 80103bc:	4620      	mov	r0, r4
 80103be:	f7f5 ff47 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4618      	mov	r0, r3
 80103c6:	370c      	adds	r7, #12
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd90      	pop	{r4, r7, pc}

080103cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	4618      	mov	r0, r3
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi0ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80103ec:	2100      	movs	r1, #0
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 fcd8 	bl	8010da4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 fcf3 	bl	8010de0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>
  }
 80103fa:	bf00      	nop
 80103fc:	3708      	adds	r7, #8
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
 8010402:	b580      	push	{r7, lr}
 8010404:	b082      	sub	sp, #8
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f000 fcf2 	bl	8010df4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4618      	mov	r0, r3
 8010414:	3708      	adds	r7, #8
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 801041a:	b580      	push	{r7, lr}
 801041c:	b082      	sub	sp, #8
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f7ff ffed 	bl	8010402 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	4618      	mov	r0, r3
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <_ZN5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS3_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8010432:	b580      	push	{r7, lr}
 8010434:	b082      	sub	sp, #8
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
 801043a:	6039      	str	r1, [r7, #0]
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7ff ffec 	bl	801041a <_ZN5Eigen13TransposeImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEEC1Ev>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	683a      	ldr	r2, [r7, #0]
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4618      	mov	r0, r3
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8010452:	b480      	push	{r7}
 8010454:	b083      	sub	sp, #12
 8010456:	af00      	add	r7, sp, #0
 8010458:	6078      	str	r0, [r7, #4]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4618      	mov	r0, r3
 801045e:	370c      	adds	r7, #12
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f000 fcca 	bl	8010e0a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	4618      	mov	r0, r3
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}

08010480 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8010480:	b580      	push	{r7, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7ff ffed 	bl	8010468 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7f4 fae5 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80104aa:	4603      	mov	r3, r0
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7f4 fae2 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80104c6:	4603      	mov	r3, r0
 80104c8:	4618      	mov	r0, r3
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80104d0:	b590      	push	{r4, r7, lr}
 80104d2:	b085      	sub	sp, #20
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
 80104dc:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7ff ffce 	bl	8010480 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEEC1Ev>
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	68ba      	ldr	r2, [r7, #8]
 80104e8:	6812      	ldr	r2, [r2, #0]
 80104ea:	601a      	str	r2, [r3, #0]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	605a      	str	r2, [r3, #4]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	3308      	adds	r3, #8
 80104f6:	6839      	ldr	r1, [r7, #0]
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7f4 fc2f 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80104fe:	68b8      	ldr	r0, [r7, #8]
 8010500:	f7ff ffca 	bl	8010498 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010504:	4604      	mov	r4, r0
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	f7f4 f9a2 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 801050e:	4603      	mov	r3, r0
 8010510:	429c      	cmp	r4, r3
 8010512:	d10a      	bne.n	801052a <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x5a>
 8010514:	68b8      	ldr	r0, [r7, #8]
 8010516:	f7ff ffcd 	bl	80104b4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801051a:	4604      	mov	r4, r0
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	4618      	mov	r0, r3
 8010520:	f7f4 f98c 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010524:	4603      	mov	r3, r0
 8010526:	429c      	cmp	r4, r3
 8010528:	d005      	beq.n	8010536 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x66>
 801052a:	4b05      	ldr	r3, [pc, #20]	; (8010540 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x70>)
 801052c:	4a05      	ldr	r2, [pc, #20]	; (8010544 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x74>)
 801052e:	2174      	movs	r1, #116	; 0x74
 8010530:	4805      	ldr	r0, [pc, #20]	; (8010548 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERS9_RSB_RKS3_+0x78>)
 8010532:	f00d fa67 	bl	801da04 <__assert_func>
    }
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	4618      	mov	r0, r3
 801053a:	3714      	adds	r7, #20
 801053c:	46bd      	mov	sp, r7
 801053e:	bd90      	pop	{r4, r7, pc}
 8010540:	0801f86c 	.word	0x0801f86c
 8010544:	08027bdc 	.word	0x08027bdc
 8010548:	0801fad0 	.word	0x0801fad0

0801054c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 f809 	bl	801056c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 801055a:	4603      	mov	r3, r0
 801055c:	4618      	mov	r0, r3
 801055e:	f000 fc5f 	bl	8010e20 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010562:	4603      	mov	r3, r0
 8010564:	4618      	mov	r0, r3
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}

0801056c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	4618      	mov	r0, r3
 8010578:	370c      	adds	r7, #12
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr

08010582 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8010582:	b580      	push	{r7, lr}
 8010584:	b082      	sub	sp, #8
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4618      	mov	r0, r3
 801058e:	f7ff ff83 	bl	8010498 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8010592:	4603      	mov	r3, r0
    }
 8010594:	4618      	mov	r0, r3
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>:
struct evaluator<const T>
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fe f968 	bl	800e87c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4618      	mov	r0, r3
 80105b0:	3708      	adds	r7, #8
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b082      	sub	sp, #8
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7ff ffeb 	bl	801059c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f000 fc51 	bl	8010e6e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b082      	sub	sp, #8
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff ffe8 	bl	80105b6 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfED1Ev>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	4618      	mov	r0, r3
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
struct evaluator<const T>
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7ff ffeb 	bl	80105d6 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4618      	mov	r0, r3
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>:
  struct Data
 801060a:	b580      	push	{r7, lr}
 801060c:	b082      	sub	sp, #8
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	3308      	adds	r3, #8
 8010616:	4618      	mov	r0, r3
 8010618:	f7f8 f824 	bl	8008664 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	3304      	adds	r3, #4
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff ffe5 	bl	80105f0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4618      	mov	r0, r3
 801063c:	f7ff ffe5 	bl	801060a <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataD1Ev>
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f000 fc09 	bl	8010e58 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	4618      	mov	r0, r3
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8010650:	b580      	push	{r7, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4618      	mov	r0, r3
 801065c:	f7ff ffe8 	bl	8010630 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffED1Ev>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4618      	mov	r0, r3
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801066a:	b580      	push	{r7, lr}
 801066c:	b082      	sub	sp, #8
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	f7ff ffeb 	bl	8010650 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4618      	mov	r0, r3
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8010684:	b580      	push	{r7, lr}
 8010686:	ed2d 8b02 	vpush	{d8}
 801068a:	b086      	sub	sp, #24
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f7ff fa4b 	bl	800fb2e <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4rowsEv>
 8010698:	4603      	mov	r3, r0
 801069a:	2b00      	cmp	r3, #0
 801069c:	dd05      	ble.n	80106aa <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 801069e:	6878      	ldr	r0, [r7, #4]
 80106a0:	f7ff ff54 	bl	801054c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE4colsEv>
 80106a4:	4603      	mov	r3, r0
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	dc06      	bgt.n	80106b8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 80106aa:	4b16      	ldr	r3, [pc, #88]	; (8010704 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 80106ac:	4a16      	ldr	r2, [pc, #88]	; (8010708 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 80106ae:	f240 119b 	movw	r1, #411	; 0x19b
 80106b2:	4816      	ldr	r0, [pc, #88]	; (801070c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 80106b4:	f00d f9a6 	bl	801da04 <__assert_func>
 80106b8:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f7ff ff56 	bl	801056c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80106c0:	4602      	mov	r2, r0
 80106c2:	f107 030c 	add.w	r3, r7, #12
 80106c6:	4611      	mov	r1, r2
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 fbb6 	bl	8010e3a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7ff ff4c 	bl	801056c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE7derivedEv>
 80106d4:	4602      	mov	r2, r0
 80106d6:	f107 030c 	add.w	r3, r7, #12
 80106da:	6839      	ldr	r1, [r7, #0]
 80106dc:	4618      	mov	r0, r3
 80106de:	f000 fbd1 	bl	8010e84 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>
 80106e2:	eeb0 8a40 	vmov.f32	s16, s0
 80106e6:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80106e8:	f107 030c 	add.w	r3, r7, #12
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7ff ffbc 	bl	801066a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80106f2:	eef0 7a48 	vmov.f32	s15, s16
}
 80106f6:	eeb0 0a67 	vmov.f32	s0, s15
 80106fa:	3718      	adds	r7, #24
 80106fc:	46bd      	mov	sp, r7
 80106fe:	ecbd 8b02 	vpop	{d8}
 8010702:	bd80      	pop	{r7, pc}
 8010704:	080248ec 	.word	0x080248ec
 8010708:	08027da4 	.word	0x08027da4
 801070c:	08024af8 	.word	0x08024af8

08010710 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELb0EE3runERKS3_RKS7_>:
    static void run(const Derived&, const OtherDerived&)
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
    }
 801071a:	bf00      	nop
 801071c:	370c      	adds	r7, #12
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8010726:	b580      	push	{r7, lr}
 8010728:	b082      	sub	sp, #8
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6839      	ldr	r1, [r7, #0]
 8010734:	4618      	mov	r0, r3
 8010736:	f000 fbb6 	bl	8010ea6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4618      	mov	r0, r3
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	4618      	mov	r0, r3
 8010750:	370c      	adds	r7, #12
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr

0801075a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 801075a:	b580      	push	{r7, lr}
 801075c:	b082      	sub	sp, #8
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4618      	mov	r0, r3
 8010768:	f7f4 f873 	bl	8004852 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4rowsEv>
 801076c:	4603      	mov	r3, r0
 801076e:	4618      	mov	r0, r3
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8010776:	b580      	push	{r7, lr}
 8010778:	b082      	sub	sp, #8
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	4618      	mov	r0, r3
 8010784:	f7f4 f976 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010788:	4603      	mov	r3, r0
 801078a:	4618      	mov	r0, r3
 801078c:	3708      	adds	r7, #8
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
	...

08010794 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const Functor &/*func*/)
 8010794:	b590      	push	{r4, r7, lr}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
  eigen_assert(dst.rows() == src.rows() && dst.cols() == src.cols());
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7f3 ffaf 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80107a8:	4604      	mov	r4, r0
 80107aa:	68b8      	ldr	r0, [r7, #8]
 80107ac:	f7ff ffd5 	bl	801075a <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4rowsEv>
 80107b0:	4603      	mov	r3, r0
 80107b2:	429c      	cmp	r4, r3
 80107b4:	d10a      	bne.n	80107cc <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x38>
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7f3 ff99 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80107be:	4604      	mov	r4, r0
 80107c0:	68b8      	ldr	r0, [r7, #8]
 80107c2:	f7ff ffd8 	bl	8010776 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE4colsEv>
 80107c6:	4603      	mov	r3, r0
 80107c8:	429c      	cmp	r4, r3
 80107ca:	d006      	beq.n	80107da <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x46>
 80107cc:	4b05      	ldr	r3, [pc, #20]	; (80107e4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x50>)
 80107ce:	4a06      	ldr	r2, [pc, #24]	; (80107e8 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x54>)
 80107d0:	f240 21f2 	movw	r1, #754	; 0x2f2
 80107d4:	4805      	ldr	r0, [pc, #20]	; (80107ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductINS2_IfLi3ELi1ELi0ELi3ELi1EEENS2_IfLi1ELi3ELi1ELi1ELi3EEELi1EEENS0_13sub_assign_opIffEEEEvRT_RKT0_RKT1_+0x58>)
 80107d6:	f00d f915 	bl	801da04 <__assert_func>
}
 80107da:	bf00      	nop
 80107dc:	3714      	adds	r7, #20
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd90      	pop	{r4, r7, pc}
 80107e2:	bf00      	nop
 80107e4:	08022600 	.word	0x08022600
 80107e8:	08027f28 	.word	0x08027f28
 80107ec:	08021ff8 	.word	0x08021ff8

080107f0 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEC1ERS5_RKSA_RKSC_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 80107f0:	b480      	push	{r7}
 80107f2:	b085      	sub	sp, #20
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	60f8      	str	r0, [r7, #12]
 80107f8:	60b9      	str	r1, [r7, #8]
 80107fa:	607a      	str	r2, [r7, #4]
 80107fc:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	68ba      	ldr	r2, [r7, #8]
 8010802:	601a      	str	r2, [r3, #0]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	605a      	str	r2, [r3, #4]
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	609a      	str	r2, [r3, #8]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	69ba      	ldr	r2, [r7, #24]
 8010814:	60da      	str	r2, [r3, #12]
  }
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	4618      	mov	r0, r3
 801081a:	3714      	adds	r7, #20
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi2EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 fb6f 	bl	8010f10 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>
  }
 8010832:	bf00      	nop
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS4_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 801083a:	b580      	push	{r7, lr}
 801083c:	b082      	sub	sp, #8
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6839      	ldr	r1, [r7, #0]
 8010848:	4618      	mov	r0, r3
 801084a:	f000 fb71 	bl	8010f30 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	4618      	mov	r0, r3
 8010852:	f000 fb97 	bl	8010f84 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010856:	bf00      	nop
  }
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4618      	mov	r0, r3
 801085c:	3708      	adds	r7, #8
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8010862:	b580      	push	{r7, lr}
 8010864:	b082      	sub	sp, #8
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801086a:	f7f5 fd16 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801086e:	4603      	mov	r3, r0
  }
 8010870:	4618      	mov	r0, r3
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8010880:	f7f5 fd13 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8010884:	4603      	mov	r3, r0
  }
 8010886:	4618      	mov	r0, r3
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS3_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 801088e:	b480      	push	{r7}
 8010890:	b083      	sub	sp, #12
 8010892:	af00      	add	r7, sp, #0
 8010894:	6078      	str	r0, [r7, #4]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES9_EEEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	4618      	mov	r0, r3
 80108b0:	370c      	adds	r7, #12
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr

080108ba <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERSH_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b082      	sub	sp, #8
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	6039      	str	r1, [r7, #0]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6839      	ldr	r1, [r7, #0]
 80108c8:	4618      	mov	r0, r3
 80108ca:	f000 fb67 	bl	8010f9c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4618      	mov	r0, r3
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEENS4_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 80108d8:	b590      	push	{r4, r7, lr}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 fb85 	bl	8010ff2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	4618      	mov	r0, r3
 80108ec:	f000 f81e 	bl	801092c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>
 80108f0:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	601a      	str	r2, [r3, #0]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	1d1c      	adds	r4, r3, #4
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f000 fb5c 	bl	8010fba <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8010902:	4603      	mov	r3, r0
 8010904:	4619      	mov	r1, r3
 8010906:	4620      	mov	r0, r4
 8010908:	f7f5 fca2 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	1d5c      	adds	r4, r3, #5
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	4618      	mov	r0, r3
 8010914:	f000 fb5f 	bl	8010fd6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8010918:	4603      	mov	r3, r0
 801091a:	4619      	mov	r1, r3
 801091c:	4620      	mov	r0, r4
 801091e:	f7f5 fc7d 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4618      	mov	r0, r3
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	bd90      	pop	{r4, r7, pc}

0801092c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEELi0EE4dataEv>:
 801092c:	b480      	push	{r7}
 801092e:	b083      	sub	sp, #12
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4618      	mov	r0, r3
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	4618      	mov	r0, r3
 8010950:	370c      	adds	r7, #12
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr

0801095a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801095a:	b590      	push	{r4, r7, lr}
 801095c:	b085      	sub	sp, #20
 801095e:	af00      	add	r7, sp, #0
 8010960:	60f8      	str	r0, [r7, #12]
 8010962:	60b9      	str	r1, [r7, #8]
 8010964:	607a      	str	r2, [r7, #4]
      return m_d.data[row + col * m_d.outerStride()];
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	681c      	ldr	r4, [r3, #0]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	4618      	mov	r0, r3
 801096e:	f7f5 feef 	bl	8006750 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8010972:	4602      	mov	r2, r0
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	fb03 f202 	mul.w	r2, r3, r2
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	4413      	add	r3, r2
 801097e:	009b      	lsls	r3, r3, #2
 8010980:	4423      	add	r3, r4
  }
 8010982:	4618      	mov	r0, r3
 8010984:	3714      	adds	r7, #20
 8010986:	46bd      	mov	sp, r7
 8010988:	bd90      	pop	{r4, r7, pc}

0801098a <_ZNK5Eigen8internal9evaluatorINS_14CwiseNullaryOpINS0_18scalar_constant_opIfEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffIiEEfT_SB_>:
  CoeffReturnType coeff(IndexType row, IndexType col) const
 801098a:	b580      	push	{r7, lr}
 801098c:	b084      	sub	sp, #16
 801098e:	af00      	add	r7, sp, #0
 8010990:	60f8      	str	r0, [r7, #12]
 8010992:	60b9      	str	r1, [r7, #8]
 8010994:	607a      	str	r2, [r7, #4]
    return m_wrapper(m_functor, row, col);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	1d18      	adds	r0, r3, #4
 801099a:	68f9      	ldr	r1, [r7, #12]
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	68ba      	ldr	r2, [r7, #8]
 80109a0:	f000 fb32 	bl	8011008 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>
 80109a4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80109a8:	eeb0 0a67 	vmov.f32	s0, s15
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b082      	sub	sp, #8
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	6039      	str	r1, [r7, #0]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6839      	ldr	r1, [r7, #0]
 80109c0:	4618      	mov	r0, r3
 80109c2:	f000 fb32 	bl	801102a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>
  }
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	689b      	ldr	r3, [r3, #8]
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fc fcca 	bl	800d376 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 80109e2:	4603      	mov	r3, r0
    }
 80109e4:	4618      	mov	r0, r3
 80109e6:	3708      	adds	r7, #8
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7f6 f82d 	bl	8006a58 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 80109fe:	4603      	mov	r3, r0
    }
 8010a00:	4618      	mov	r0, r3
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	4618      	mov	r0, r3
 8010a14:	370c      	adds	r7, #12
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr

08010a1e <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES3_Li1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010a1e:	b480      	push	{r7}
 8010a20:	b083      	sub	sp, #12
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
    }
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	4618      	mov	r0, r3
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  if((!Dst::IsVectorAtCompileTime) && dst.rows()>1 && dst.cols()>1)
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7f3 fe60 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 8010a46:	4603      	mov	r3, r0
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	dd08      	ble.n	8010a5e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7f3 fe4e 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	dd01      	ble.n	8010a5e <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2a>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e000      	b.n	8010a60 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x2c>
 8010a5e:	2300      	movs	r3, #0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d003      	beq.n	8010a6c <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEEEvRKT_RKT0_+0x38>
    internal::checkTransposeAliasing_impl<Dst, Src>::run(dst, src);
 8010a64:	6839      	ldr	r1, [r7, #0]
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f000 faf3 	bl	8011052 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>
}
 8010a6c:	bf00      	nop
 8010a6e:	3708      	adds	r7, #8
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	330c      	adds	r3, #12
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7f6 f8c8 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	3308      	adds	r3, #8
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7f6 f8c3 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f000 faf8 	bl	8011086 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3708      	adds	r7, #8
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7ff ffe2 	bl	8010a74 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffED1Ev>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b090      	sub	sp, #64	; 0x40
 8010abe:	af02      	add	r7, sp, #8
 8010ac0:	60f8      	str	r0, [r7, #12]
 8010ac2:	60b9      	str	r1, [r7, #8]
 8010ac4:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 8010ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010aca:	68b9      	ldr	r1, [r7, #8]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f000 facb 	bl	8011068 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>
  resize_if_allowed(dst, src, func);
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	68b9      	ldr	r1, [r7, #8]
 8010ad6:	68f8      	ldr	r0, [r7, #12]
 8010ad8:	f000 fafc 	bl	80110d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 8010adc:	f107 0320 	add.w	r3, r7, #32
 8010ae0:	68f9      	ldr	r1, [r7, #12]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7f6 faa6 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8010ae8:	68f8      	ldr	r0, [r7, #12]
 8010aea:	f7f6 fb0b 	bl	8007104 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE18const_cast_derivedEv>
 8010aee:	4603      	mov	r3, r0
 8010af0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010af4:	f107 0120 	add.w	r1, r7, #32
 8010af8:	f107 0010 	add.w	r0, r7, #16
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f000 fb32 	bl	8011168 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 8010b04:	f107 0310 	add.w	r3, r7, #16
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f000 fb47 	bl	801119c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>
  DstEvaluatorType dstEvaluator(dst);
 8010b0e:	f107 0320 	add.w	r3, r7, #32
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7f6 f87f 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8010b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7ff ffbf 	bl	8010aa0 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>
}
 8010b22:	bf00      	nop
 8010b24:	3738      	adds	r7, #56	; 0x38
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010b2a:	b480      	push	{r7}
 8010b2c:	b083      	sub	sp, #12
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
    }
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4618      	mov	r0, r3
 8010b36:	370c      	adds	r7, #12
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3e:	4770      	bx	lr

08010b40 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8010b40:	b480      	push	{r7}
 8010b42:	b083      	sub	sp, #12
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]
    {}
 8010b4a:	bf00      	nop
 8010b4c:	370c      	adds	r7, #12
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEEC1Ev>:
 8010b56:	b480      	push	{r7}
 8010b58:	b083      	sub	sp, #12
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	4618      	mov	r0, r3
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr

08010b6c <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8010b6c:	b590      	push	{r4, r7, lr}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	6039      	str	r1, [r7, #0]
 8010b76:	687c      	ldr	r4, [r7, #4]
 8010b78:	6838      	ldr	r0, [r7, #0]
 8010b7a:	f000 fb1a 	bl	80111b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	4619      	mov	r1, r3
 8010b82:	4620      	mov	r0, r4
 8010b84:	f7f4 f8ea 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	1d1c      	adds	r4, r3, #4
 8010b8c:	6838      	ldr	r0, [r7, #0]
 8010b8e:	f000 fb1c 	bl	80111ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>
 8010b92:	4603      	mov	r3, r0
 8010b94:	4619      	mov	r1, r3
 8010b96:	4620      	mov	r0, r4
 8010b98:	f7fd fc27 	bl	800e3ea <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f103 040c 	add.w	r4, r3, #12
 8010ba2:	6838      	ldr	r0, [r7, #0]
 8010ba4:	f000 fb1c 	bl	80111e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	4619      	mov	r1, r3
 8010bac:	4620      	mov	r0, r4
 8010bae:	f000 fb23 	bl	80111f8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	370c      	adds	r7, #12
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd90      	pop	{r4, r7, pc}

08010bbc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b084      	sub	sp, #16
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	6879      	ldr	r1, [r7, #4]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f000 fb21 	bl	8011216 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8010bd4:	eef0 7a40 	vmov.f32	s15, s0
 8010bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b082      	sub	sp, #8
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
 8010bea:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010bec:	2201      	movs	r2, #1
 8010bee:	2100      	movs	r1, #0
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f7ff ffe3 	bl	8010bbc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010bf6:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_ISB_EELi3ELi1ELb0EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8010c0e:	2202      	movs	r2, #2
 8010c10:	2100      	movs	r1, #0
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff ffd2 	bl	8010bbc <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 8010c18:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi1ELi3ELi3EEEEENS3_INS_7ProductINS7_INS4_IfLi3ELi3ELi0ELi3ELi3EEES8_Li0EEENS_9TransposeIS8_EELi1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8010c26:	b480      	push	{r7}
 8010c28:	b083      	sub	sp, #12
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
 8010c2e:	bf00      	nop
 8010c30:	370c      	adds	r7, #12
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr

08010c3a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS5_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8010c3a:	b590      	push	{r4, r7, lr}
 8010c3c:	b083      	sub	sp, #12
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
 8010c42:	6039      	str	r1, [r7, #0]
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 fb22 	bl	801128e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8010c4a:	687c      	ldr	r4, [r7, #4]
 8010c4c:	6838      	ldr	r0, [r7, #0]
 8010c4e:	f000 fb12 	bl	8011276 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8010c52:	4603      	mov	r3, r0
 8010c54:	4619      	mov	r1, r3
 8010c56:	4620      	mov	r0, r4
 8010c58:	f000 fb24 	bl	80112a4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	370c      	adds	r7, #12
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd90      	pop	{r4, r7, pc}

08010c66 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEELi3ENS_10DenseShapeES9_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 8010c66:	b580      	push	{r7, lr}
 8010c68:	b0a4      	sub	sp, #144	; 0x90
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	6078      	str	r0, [r7, #4]
 8010c6e:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6819      	ldr	r1, [r3, #0]
 8010c80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010c84:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7f9 fcdb 	bl	800a644 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 8010c8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010c92:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010c96:	4611      	mov	r1, r2
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7f9 fce6 	bl	800a66a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	1d19      	adds	r1, r3, #4
 8010ca2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f000 fb0b 	bl	80112c4 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>
 8010cae:	f107 030c 	add.w	r3, r7, #12
 8010cb2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8010cb6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 fb15 	bl	80112ea <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>
 8010cc0:	f107 030c 	add.w	r3, r7, #12
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f000 fb3e 	bl	8011346 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>
 8010cca:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010cce:	eeb0 0a67 	vmov.f32	s0, s15
 8010cd2:	3790      	adds	r7, #144	; 0x90
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010ce0:	2102      	movs	r1, #2
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f7ff fa67 	bl	80101b6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS2_INS_7ProductINS3_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 fb47 	bl	801137c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>
  }
 8010cee:	bf00      	nop
 8010cf0:	3708      	adds	r7, #8
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8010cf6:	b580      	push	{r7, lr}
 8010cf8:	b082      	sub	sp, #8
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
 8010cfe:	6039      	str	r1, [r7, #0]
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 fb45 	bl	8011390 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6839      	ldr	r1, [r7, #0]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f000 fb4b 	bl	80113a6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	4618      	mov	r0, r3
 8010d14:	3708      	adds	r7, #8
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi0ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b082      	sub	sp, #8
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8010d22:	2100      	movs	r1, #0
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 fb66 	bl	80113f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f000 fb86 	bl	801143c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>
  }
 8010d30:	bf00      	nop
 8010d32:	3708      	adds	r7, #8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6839      	ldr	r1, [r7, #0]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f000 fb82 	bl	8011450 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fc fd14 	bl	800d790 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11innerStrideEv>
 8010d68:	4603      	mov	r3, r0
    }
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b082      	sub	sp, #8
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	689b      	ldr	r3, [r3, #8]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fa fba2 	bl	800b4c8 <_ZNK5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EE11outerStrideEv>
 8010d84:	4603      	mov	r3, r0
    }
 8010d86:	4618      	mov	r0, r3
 8010d88:	3708      	adds	r7, #8
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEELi1ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010d8e:	b480      	push	{r7}
 8010d90:	b083      	sub	sp, #12
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES5_NS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8010da4:	b5b0      	push	{r4, r5, r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	689c      	ldr	r4, [r3, #8]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	6839      	ldr	r1, [r7, #0]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f000 fb5d 	bl	8011478 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8010dbe:	4605      	mov	r5, r0
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	6839      	ldr	r1, [r7, #0]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f000 fb66 	bl	8011498 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	461a      	mov	r2, r3
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	f7f7 f836 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8010dd8:	bf00      	nop
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bdb0      	pop	{r4, r5, r7, pc}

08010de0 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEES6_NS0_9assign_opIffEELi0EEELi1ELi1EE3runERS9_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	bf00      	nop
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
    }
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	370c      	adds	r7, #12
 8010e02:	46bd      	mov	sp, r7
 8010e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e08:	4770      	bx	lr

08010e0a <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8010e0a:	b480      	push	{r7}
 8010e0c:	b083      	sub	sp, #12
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
    }
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4618      	mov	r0, r3
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7ff fb42 	bl	80104b4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8010e30:	4603      	mov	r3, r0
    }
 8010e32:	4618      	mov	r0, r3
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}

08010e3a <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8010e3a:	b580      	push	{r7, lr}
 8010e3c:	b082      	sub	sp, #8
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
 8010e42:	6039      	str	r1, [r7, #0]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6839      	ldr	r1, [r7, #0]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f000 fb35 	bl	80114b8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	4618      	mov	r0, r3
 8010e52:	3708      	adds	r7, #8
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	4618      	mov	r0, r3
 8010e64:	370c      	adds	r7, #12
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr

08010e6e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 8010e6e:	b480      	push	{r7}
 8010e70:	b083      	sub	sp, #12
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	4618      	mov	r0, r3
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi2EE3runISG_EEfRKSH_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8010e90:	68b9      	ldr	r1, [r7, #8]
 8010e92:	68f8      	ldr	r0, [r7, #12]
 8010e94:	f000 fb1f 	bl	80114d6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>
 8010e98:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b082      	sub	sp, #8
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
 8010eae:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f000 fb4c 	bl	801154e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 8010eb6:	6838      	ldr	r0, [r7, #0]
 8010eb8:	f000 fb31 	bl	801151e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8010ebc:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 8010ec2:	6838      	ldr	r0, [r7, #0]
 8010ec4:	f000 fb37 	bl	8011536 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>
 8010ec8:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	605a      	str	r2, [r3, #4]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 8010ed8:	4619      	mov	r1, r3
 8010eda:	4610      	mov	r0, r2
 8010edc:	f7f5 f95f 	bl	800619e <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS3_>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 8010eea:	4619      	mov	r1, r3
 8010eec:	4610      	mov	r0, r2
 8010eee:	f000 f9d9 	bl	80112a4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8010ef2:	6838      	ldr	r0, [r7, #0]
 8010ef4:	f000 fb13 	bl	801151e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7f3 fc9e 	bl	800483c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE4colsEv>
 8010f00:	4602      	mov	r2, r0
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	611a      	str	r2, [r3, #16]
  }
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3708      	adds	r7, #8
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi0ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8010f18:	2200      	movs	r2, #0
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f000 fb21 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 fb37 	bl	8011596 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>
  }
 8010f28:	bf00      	nop
 8010f2a:	3708      	adds	r7, #8
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8010f30:	b590      	push	{r4, r7, lr}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 fb57 	bl	80115ee <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	4618      	mov	r0, r3
 8010f44:	f000 f81e 	bl	8010f84 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>
 8010f48:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	601a      	str	r2, [r3, #0]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	1d1c      	adds	r4, r3, #4
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 fb2e 	bl	80115b6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f7f5 f976 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	1d5c      	adds	r4, r3, #5
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f000 fb31 	bl	80115d2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8010f70:	4603      	mov	r3, r0
 8010f72:	4619      	mov	r1, r3
 8010f74:	4620      	mov	r0, r4
 8010f76:	f7f5 f951 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd90      	pop	{r4, r7, pc}

08010f84 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4618      	mov	r0, r3
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1ERKSG_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6839      	ldr	r1, [r7, #0]
 8010faa:	4618      	mov	r0, r3
 8010fac:	f000 fb2a 	bl	8011604 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>
  }
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}

08010fba <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8010fba:	b580      	push	{r7, lr}
 8010fbc:	b082      	sub	sp, #8
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	3308      	adds	r3, #8
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fc fd6a 	bl	800daa0 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11innerStrideEv>
 8010fcc:	4603      	mov	r3, r0
    }
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b082      	sub	sp, #8
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	3308      	adds	r3, #8
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fc fd70 	bl	800dac8 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS_5DenseEE11outerStrideEv>
 8010fe8:	4603      	mov	r3, r0
    }
 8010fea:	4618      	mov	r0, r3
 8010fec:	3708      	adds	r7, #8
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}

08010ff2 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8010ff2:	b480      	push	{r7}
 8010ff4:	b083      	sub	sp, #12
 8010ff6:	af00      	add	r7, sp, #0
 8010ff8:	6078      	str	r0, [r7, #4]
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	370c      	adds	r7, #12
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr

08011008 <_ZNK5Eigen8internal15nullary_wrapperIfNS0_18scalar_constant_opIfEELb1ELb0ELb0EEclIiEEfRKS3_T_S8_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexType=0) const { return op(); }
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
 8011014:	603b      	str	r3, [r7, #0]
 8011016:	68b8      	ldr	r0, [r7, #8]
 8011018:	f000 fb03 	bl	8011622 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>
 801101c:	eef0 7a40 	vmov.f32	s15, s0
 8011020:	eeb0 0a67 	vmov.f32	s0, s15
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 801102a:	b580      	push	{r7, lr}
 801102c:	b082      	sub	sp, #8
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
 8011032:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6839      	ldr	r1, [r7, #0]
 8011038:	4618      	mov	r0, r3
 801103a:	f000 fb01 	bl	8011640 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	4618      	mov	r0, r3
 8011042:	f000 fb27 	bl	8011694 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011046:	bf00      	nop
  }
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	4618      	mov	r0, r3
 801104c:	3708      	adds	r7, #8
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}

08011052 <_ZN5Eigen8internal27checkTransposeAliasing_implINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEELb0EE3runERKS3_RKS5_>:
    static void run(const Derived&, const OtherDerived&)
 8011052:	b480      	push	{r7}
 8011054:	b083      	sub	sp, #12
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
 801105a:	6039      	str	r1, [r7, #0]
    }
 801105c:	bf00      	nop
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1ERKS5_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6839      	ldr	r1, [r7, #0]
 8011076:	4618      	mov	r0, r3
 8011078:	f000 fb18 	bl	80116ac <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	4618      	mov	r0, r3
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}

08011086 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011086:	b480      	push	{r7}
 8011088:	b083      	sub	sp, #12
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	4618      	mov	r0, r3
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7f3 fb2c 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80110ae:	4603      	mov	r3, r0
 80110b0:	4618      	mov	r0, r3
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7f3 fb13 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80110ca:	4603      	mov	r3, r0
 80110cc:	4618      	mov	r0, r3
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b086      	sub	sp, #24
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80110e0:	68b8      	ldr	r0, [r7, #8]
 80110e2:	f7ff ffdb 	bl	801109c <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4rowsEv>
 80110e6:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80110e8:	68b8      	ldr	r0, [r7, #8]
 80110ea:	f7ff ffe5 	bl	80110b8 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE4colsEv>
 80110ee:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7f3 fb07 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80110f8:	4602      	mov	r2, r0
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d107      	bne.n	8011110 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4618      	mov	r0, r3
 8011104:	f7f3 faf4 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011108:	4602      	mov	r2, r0
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	4293      	cmp	r3, r2
 801110e:	d001      	beq.n	8011114 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 8011110:	2301      	movs	r3, #1
 8011112:	e000      	b.n	8011116 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 8011114:	2300      	movs	r3, #0
 8011116:	2b00      	cmp	r3, #0
 8011118:	d005      	beq.n	8011126 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	693a      	ldr	r2, [r7, #16]
 801111e:	6979      	ldr	r1, [r7, #20]
 8011120:	4618      	mov	r0, r3
 8011122:	f7f6 fa09 	bl	8007538 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	4618      	mov	r0, r3
 801112a:	f7f3 faec 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 801112e:	4602      	mov	r2, r0
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	4293      	cmp	r3, r2
 8011134:	d107      	bne.n	8011146 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	4618      	mov	r0, r3
 801113a:	f7f3 fad9 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 801113e:	4602      	mov	r2, r0
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	4293      	cmp	r3, r2
 8011144:	d006      	beq.n	8011154 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8011146:	4b05      	ldr	r3, [pc, #20]	; (801115c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8011148:	4a05      	ldr	r2, [pc, #20]	; (8011160 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 801114a:	f240 21fd 	movw	r1, #765	; 0x2fd
 801114e:	4805      	ldr	r0, [pc, #20]	; (8011164 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_7ProductIS3_S3_Li1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 8011150:	f00c fc58 	bl	801da04 <__assert_func>
}
 8011154:	bf00      	nop
 8011156:	3718      	adds	r7, #24
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}
 801115c:	08021ee4 	.word	0x08021ee4
 8011160:	08028040 	.word	0x08028040
 8011164:	08021ff8 	.word	0x08021ff8

08011168 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS8_RKSA_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
 8011174:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	68ba      	ldr	r2, [r7, #8]
 801117a:	601a      	str	r2, [r3, #0]
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	605a      	str	r2, [r3, #4]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	683a      	ldr	r2, [r7, #0]
 8011186:	609a      	str	r2, [r3, #8]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	69ba      	ldr	r2, [r7, #24]
 801118c:	60da      	str	r2, [r3, #12]
  }
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	4618      	mov	r0, r3
 8011192:	3714      	adds	r7, #20
 8011194:	46bd      	mov	sp, r7
 8011196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119a:	4770      	bx	lr

0801119c <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi2EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f000 fab6 	bl	8011716 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>
  }
 80111aa:	bf00      	nop
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80111b2:	b480      	push	{r7}
 80111b4:	b083      	sub	sp, #12
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	3330      	adds	r3, #48	; 0x30
 80111be:	4618      	mov	r0, r3
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr

080111ca <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80111ca:	b480      	push	{r7}
 80111cc:	b083      	sub	sp, #12
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_IS7_EELi3ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	3318      	adds	r3, #24
 80111ec:	4618      	mov	r0, r3
 80111ee:	370c      	adds	r7, #12
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr

080111f8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6839      	ldr	r1, [r7, #0]
 8011206:	4618      	mov	r0, r3
 8011208:	f000 fa95 	bl	8011736 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8011216:	b590      	push	{r4, r7, lr}
 8011218:	b087      	sub	sp, #28
 801121a:	af00      	add	r7, sp, #0
 801121c:	60f8      	str	r0, [r7, #12]
 801121e:	60b9      	str	r1, [r7, #8]
 8011220:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	4618      	mov	r0, r3
 8011226:	f000 fa95 	bl	8011754 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 801122a:	4604      	mov	r4, r0
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	3304      	adds	r3, #4
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	68b9      	ldr	r1, [r7, #8]
 8011234:	4618      	mov	r0, r3
 8011236:	f7fd fdf3 	bl	800ee20 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 801123a:	eef0 7a40 	vmov.f32	s15, s0
 801123e:	edc7 7a04 	vstr	s15, [r7, #16]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	330c      	adds	r3, #12
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	68b9      	ldr	r1, [r7, #8]
 801124a:	4618      	mov	r0, r3
 801124c:	f000 fa8d 	bl	801176a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8011250:	eef0 7a40 	vmov.f32	s15, s0
 8011254:	edc7 7a05 	vstr	s15, [r7, #20]
 8011258:	f107 0214 	add.w	r2, r7, #20
 801125c:	f107 0310 	add.w	r3, r7, #16
 8011260:	4619      	mov	r1, r3
 8011262:	4620      	mov	r0, r4
 8011264:	f7fd fc20 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8011268:	eef0 7a40 	vmov.f32	s15, s0
  }
 801126c:	eeb0 0a67 	vmov.f32	s0, s15
 8011270:	371c      	adds	r7, #28
 8011272:	46bd      	mov	sp, r7
 8011274:	bd90      	pop	{r4, r7, pc}

08011276 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8011276:	b480      	push	{r7}
 8011278:	b083      	sub	sp, #12
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4618      	mov	r0, r3
 8011284:	370c      	adds	r7, #12
 8011286:	46bd      	mov	sp, r7
 8011288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128c:	4770      	bx	lr

0801128e <_ZN5Eigen8internal14evaluator_baseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801128e:	b480      	push	{r7}
 8011290:	b083      	sub	sp, #12
 8011292:	af00      	add	r7, sp, #0
 8011294:	6078      	str	r0, [r7, #4]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	4618      	mov	r0, r3
 801129a:	370c      	adds	r7, #12
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>:
  explicit evaluator(const XprType& m)
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
    : evaluator<PlainObjectBase<XprType> >(m)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	683a      	ldr	r2, [r7, #0]
 80112b2:	4611      	mov	r1, r2
 80112b4:	4618      	mov	r0, r3
 80112b6:	f000 fa79 	bl	80117ac <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
  { }
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	4618      	mov	r0, r3
 80112be:	3708      	adds	r7, #8
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}

080112c4 <_ZNK5Eigen9DenseBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE3colEi>:
ConstColXpr col(Index i) const
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b084      	sub	sp, #16
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 80112d0:	68b8      	ldr	r0, [r7, #8]
 80112d2:	f7f4 f887 	bl	80053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80112d6:	4603      	mov	r3, r0
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	4619      	mov	r1, r3
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f000 fa7d 	bl	80117dc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>
}
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	3710      	adds	r7, #16
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}

080112ea <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IKNS1_INS3_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSG_6traitsIT_E6ScalarEEEKS8_KSJ_EERKNS0_ISJ_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80112ea:	b5b0      	push	{r4, r5, r7, lr}
 80112ec:	b086      	sub	sp, #24
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	60f8      	str	r0, [r7, #12]
 80112f2:	60b9      	str	r1, [r7, #8]
 80112f4:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80112f6:	68b8      	ldr	r0, [r7, #8]
 80112f8:	f7f9 fe6e 	bl	800afd8 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE7derivedEv>
 80112fc:	4604      	mov	r4, r0
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 fa94 	bl	801182c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>
 8011304:	4605      	mov	r5, r0
 8011306:	f107 0314 	add.w	r3, r7, #20
 801130a:	4618      	mov	r0, r3
 801130c:	f7f3 fc9c 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8011310:	f107 0314 	add.w	r3, r7, #20
 8011314:	462a      	mov	r2, r5
 8011316:	4621      	mov	r1, r4
 8011318:	68f8      	ldr	r0, [r7, #12]
 801131a:	f000 fac1 	bl	80118a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>
}
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	3718      	adds	r7, #24
 8011322:	46bd      	mov	sp, r7
 8011324:	bdb0      	pop	{r4, r5, r7, pc}

08011326 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8011326:	b580      	push	{r7, lr}
 8011328:	b082      	sub	sp, #8
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 fb14 	bl	801195c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011334:	4603      	mov	r3, r0
 8011336:	4618      	mov	r0, r3
 8011338:	f000 fb1b 	bl	8011972 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>
 801133c:	4603      	mov	r3, r0
 801133e:	4618      	mov	r0, r3
 8011340:	3708      	adds	r7, #8
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}

08011346 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8011346:	b590      	push	{r4, r7, lr}
 8011348:	b085      	sub	sp, #20
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 fb04 	bl	801195c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011354:	4604      	mov	r4, r0
 8011356:	f107 030c 	add.w	r3, r7, #12
 801135a:	4618      	mov	r0, r3
 801135c:	f7f3 ff6b 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8011360:	f107 030c 	add.w	r3, r7, #12
 8011364:	4619      	mov	r1, r3
 8011366:	4620      	mov	r0, r4
 8011368:	f000 fb80 	bl	8011a6c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801136c:	eef0 7a40 	vmov.f32	s15, s0
 8011370:	bf00      	nop
}
 8011372:	eeb0 0a67 	vmov.f32	s0, s15
 8011376:	3714      	adds	r7, #20
 8011378:	46bd      	mov	sp, r7
 801137a:	bd90      	pop	{r4, r7, pc}

0801137c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEENS3_INS_7ProductINS4_IfLi3ELi3ELi0ELi3ELi3EEENS_9TransposeINS4_IfLi1ELi3ELi1ELi1ELi3EEEEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSG_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801137c:	b480      	push	{r7}
 801137e:	b083      	sub	sp, #12
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	bf00      	nop
 8011386:	370c      	adds	r7, #12
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	4618      	mov	r0, r3
 801139c:	370c      	adds	r7, #12
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr

080113a6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80113a6:	b590      	push	{r4, r7, lr}
 80113a8:	b083      	sub	sp, #12
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	6078      	str	r0, [r7, #4]
 80113ae:	6039      	str	r1, [r7, #0]
 80113b0:	687c      	ldr	r4, [r7, #4]
 80113b2:	6838      	ldr	r0, [r7, #0]
 80113b4:	f000 fba0 	bl	8011af8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>
 80113b8:	4603      	mov	r3, r0
 80113ba:	4619      	mov	r1, r3
 80113bc:	4620      	mov	r0, r4
 80113be:	f7f3 ffb9 	bl	8005334 <_ZN5Eigen8internal13scalar_sum_opIffEC1ERKS2_>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	1d1c      	adds	r4, r3, #4
 80113c6:	6838      	ldr	r0, [r7, #0]
 80113c8:	f000 fba2 	bl	8011b10 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>
 80113cc:	4603      	mov	r3, r0
 80113ce:	4619      	mov	r1, r3
 80113d0:	4620      	mov	r0, r4
 80113d2:	f000 fbb4 	bl	8011b3e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f103 040c 	add.w	r4, r3, #12
 80113dc:	6838      	ldr	r0, [r7, #0]
 80113de:	f000 fba2 	bl	8011b26 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>
 80113e2:	4603      	mov	r3, r0
 80113e4:	4619      	mov	r1, r3
 80113e6:	4620      	mov	r0, r4
 80113e8:	f000 fbb8 	bl	8011b5c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4618      	mov	r0, r3
 80113f0:	370c      	adds	r7, #12
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd90      	pop	{r4, r7, pc}

080113f6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS2_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS9_INS3_IfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISA_EELi0EEEKS4_EEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 80113f6:	b5b0      	push	{r4, r5, r7, lr}
 80113f8:	b084      	sub	sp, #16
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	689c      	ldr	r4, [r3, #8]
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	4618      	mov	r0, r3
 801140c:	f000 f834 	bl	8011478 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>
 8011410:	4605      	mov	r5, r0
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	6839      	ldr	r1, [r7, #0]
 8011418:	4618      	mov	r0, r3
 801141a:	f000 fbae 	bl	8011b7a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>
 801141e:	eef0 7a40 	vmov.f32	s15, s0
 8011422:	edc7 7a03 	vstr	s15, [r7, #12]
 8011426:	f107 030c 	add.w	r3, r7, #12
 801142a:	461a      	mov	r2, r3
 801142c:	4629      	mov	r1, r5
 801142e:	4620      	mov	r0, r4
 8011430:	f7f6 fd08 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 8011434:	bf00      	nop
 8011436:	3710      	adds	r7, #16
 8011438:	46bd      	mov	sp, r7
 801143a:	bdb0      	pop	{r4, r5, r7, pc}

0801143c <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEENS3_INS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINSA_INS4_IfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeISB_EELi0EEEKS5_EEEENS0_9assign_opIffEELi0EEELi1ELi1EE3runERSN_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	bf00      	nop
 8011446:	370c      	adds	r7, #12
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6839      	ldr	r1, [r7, #0]
 801145e:	4618      	mov	r0, r3
 8011460:	f000 fbaf 	bl	8011bc2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	4618      	mov	r0, r3
 8011468:	f000 fbd5 	bl	8011c16 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 801146c:	bf00      	nop
  }
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	4618      	mov	r0, r3
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 8011478:	b480      	push	{r7}
 801147a:	b083      	sub	sp, #12
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	4413      	add	r3, r2
  }
 801148c:	4618      	mov	r0, r3
 801148e:	370c      	adds	r7, #12
 8011490:	46bd      	mov	sp, r7
 8011492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011496:	4770      	bx	lr

08011498 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011498:	b480      	push	{r7}
 801149a:	b083      	sub	sp, #12
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
    return m_d.data[index];
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	4413      	add	r3, r2
  }
 80114ac:	4618      	mov	r0, r3
 80114ae:	370c      	adds	r7, #12
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr

080114b8 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1ERKSD_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6839      	ldr	r1, [r7, #0]
 80114c6:	4618      	mov	r0, r3
 80114c8:	f000 fbb1 	bl	8011c2e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4618      	mov	r0, r3
 80114d0:	3708      	adds	r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}

080114d6 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi3EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80114d6:	b580      	push	{r7, lr}
 80114d8:	b084      	sub	sp, #16
 80114da:	af00      	add	r7, sp, #0
 80114dc:	6078      	str	r0, [r7, #4]
 80114de:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80114e0:	6839      	ldr	r1, [r7, #0]
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 fbb5 	bl	8011c52 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>
 80114e8:	eef0 7a40 	vmov.f32	s15, s0
 80114ec:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 fbbe 	bl	8011c74 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>
 80114f8:	eef0 7a40 	vmov.f32	s15, s0
 80114fc:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011500:	f107 020c 	add.w	r2, r7, #12
 8011504:	f107 0308 	add.w	r3, r7, #8
 8011508:	4619      	mov	r1, r3
 801150a:	6838      	ldr	r0, [r7, #0]
 801150c:	f7f7 fa8b 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011510:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011514:	eeb0 0a67 	vmov.f32	s0, s15
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 801151e:	b480      	push	{r7}
 8011520:	b083      	sub	sp, #12
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4618      	mov	r0, r3
 801152c:	370c      	adds	r7, #12
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr

08011536 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS1_IfLi1ELi3ELi1ELi1ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8011536:	b480      	push	{r7}
 8011538:	b083      	sub	sp, #12
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	4618      	mov	r0, r3
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr

0801154e <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801154e:	b480      	push	{r7}
 8011550:	b083      	sub	sp, #12
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4618      	mov	r0, r3
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011564:	b580      	push	{r7, lr}
 8011566:	b086      	sub	sp, #24
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011570:	6879      	ldr	r1, [r7, #4]
 8011572:	68b8      	ldr	r0, [r7, #8]
 8011574:	f000 fba2 	bl	8011cbc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011578:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 801157a:	6879      	ldr	r1, [r7, #4]
 801157c:	68b8      	ldr	r0, [r7, #8]
 801157e:	f000 fba9 	bl	8011cd4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011582:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011584:	693a      	ldr	r2, [r7, #16]
 8011586:	6979      	ldr	r1, [r7, #20]
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	f000 fbaf 	bl	8011cec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>
  }
 801158e:	bf00      	nop
 8011590:	3718      	adds	r7, #24
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi1ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011596:	b580      	push	{r7, lr}
 8011598:	b082      	sub	sp, #8
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801159e:	2201      	movs	r2, #1
 80115a0:	2100      	movs	r1, #0
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7ff ffde 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f000 fbc5 	bl	8011d38 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>
  }
 80115ae:	bf00      	nop
 80115b0:	3708      	adds	r7, #8
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b082      	sub	sp, #8
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7fb fe62 	bl	800d28c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 80115c8:	4603      	mov	r3, r0
    }
 80115ca:	4618      	mov	r0, r3
 80115cc:	3708      	adds	r7, #8
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}

080115d2 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80115d2:	b580      	push	{r7, lr}
 80115d4:	b082      	sub	sp, #8
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	4618      	mov	r0, r3
 80115e0:	f7f6 fc04 	bl	8007dec <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 80115e4:	4603      	mov	r3, r0
    }
 80115e6:	4618      	mov	r0, r3
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1Ev>:
 80115ee:	b480      	push	{r7}
 80115f0:	b083      	sub	sp, #12
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4618      	mov	r0, r3
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <_ZN5Eigen8internal15block_evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EEC1ERKNS_5BlockISE_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011604:	b580      	push	{r7, lr}
 8011606:	b082      	sub	sp, #8
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
    : unary_evaluator<XprType>(block)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6839      	ldr	r1, [r7, #0]
 8011612:	4618      	mov	r0, r3
 8011614:	f000 fbb9 	bl	8011d8a <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>
  {}
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	4618      	mov	r0, r3
 801161c:	3708      	adds	r7, #8
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}

08011622 <_ZNK5Eigen8internal18scalar_constant_opIfEclEv>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar operator() () const { return m_other; }
 8011622:	b480      	push	{r7}
 8011624:	b083      	sub	sp, #12
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	ee07 3a90 	vmov	s15, r3
 8011632:	eeb0 0a67 	vmov.f32	s0, s15
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEENS3_IfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011640:	b590      	push	{r4, r7, lr}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 fc05 	bl	8011e5a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	4618      	mov	r0, r3
 8011654:	f000 f81e 	bl	8011694 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>
 8011658:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	601a      	str	r2, [r3, #0]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	1d1c      	adds	r4, r3, #4
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	4618      	mov	r0, r3
 8011666:	f000 fbdc 	bl	8011e22 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>
 801166a:	4603      	mov	r3, r0
 801166c:	4619      	mov	r1, r3
 801166e:	4620      	mov	r0, r4
 8011670:	f7f4 fdd4 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	1d5c      	adds	r4, r3, #5
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	4618      	mov	r0, r3
 801167c:	f000 fbdf 	bl	8011e3e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>
 8011680:	4603      	mov	r3, r0
 8011682:	4619      	mov	r1, r3
 8011684:	4620      	mov	r0, r4
 8011686:	f7f4 fde3 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4618      	mov	r0, r3
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	bd90      	pop	{r4, r7, pc}

08011694 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEELi0EE4dataEv>:
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4618      	mov	r0, r3
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffEC1ERKS5_>:
  explicit product_evaluator(const XprType& xpr)
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 fbf2 	bl	8011ea0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80116bc:	6838      	ldr	r0, [r7, #0]
 80116be:	f000 fbd7 	bl	8011e70 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 80116c2:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 80116c8:	6838      	ldr	r0, [r7, #0]
 80116ca:	f000 fbdd 	bl	8011e88 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>
 80116ce:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	605a      	str	r2, [r3, #4]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 80116de:	4619      	mov	r1, r3
 80116e0:	4610      	mov	r0, r2
 80116e2:	f7f5 fca7 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 80116f0:	4619      	mov	r1, r3
 80116f2:	4610      	mov	r0, r2
 80116f4:	f7f5 fc9e 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80116f8:	6838      	ldr	r0, [r7, #0]
 80116fa:	f000 fbb9 	bl	8011e70 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>
 80116fe:	4603      	mov	r3, r0
 8011700:	4618      	mov	r0, r3
 8011702:	f7f2 fff5 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 8011706:	4602      	mov	r2, r0
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	611a      	str	r2, [r3, #16]
  }
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	4618      	mov	r0, r3
 8011710:	3708      	adds	r7, #8
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}

08011716 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi0ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011716:	b580      	push	{r7, lr}
 8011718:	b082      	sub	sp, #8
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801171e:	2200      	movs	r2, #0
 8011720:	2100      	movs	r1, #0
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 fbc7 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f000 fbdd 	bl	8011ee8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>
  }
 801172e:	bf00      	nop
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}

08011736 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8011736:	b580      	push	{r7, lr}
 8011738:	b082      	sub	sp, #8
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	6039      	str	r1, [r7, #0]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6839      	ldr	r1, [r7, #0]
 8011744:	4618      	mov	r0, r3
 8011746:	f000 fbdf 	bl	8011f08 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>
  }
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	4618      	mov	r0, r3
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_IS8_EELi3ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	4618      	mov	r0, r3
 8011760:	370c      	adds	r7, #12
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr

0801176a <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801176a:	b5b0      	push	{r4, r5, r7, lr}
 801176c:	b084      	sub	sp, #16
 801176e:	af00      	add	r7, sp, #0
 8011770:	60f8      	str	r0, [r7, #12]
 8011772:	60b9      	str	r1, [r7, #8]
 8011774:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681c      	ldr	r4, [r3, #0]
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f000 fbd8 	bl	8011f30 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 8011780:	4602      	mov	r2, r0
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	fb03 f502 	mul.w	r5, r3, r2
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f000 fbdc 	bl	8011f46 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 801178e:	4602      	mov	r2, r0
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	fb02 f303 	mul.w	r3, r2, r3
 8011796:	442b      	add	r3, r5
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	4423      	add	r3, r4
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	ee07 3a90 	vmov	s15, r3
  }
 80117a2:	eeb0 0a67 	vmov.f32	s0, s15
 80117a6:	3710      	adds	r7, #16
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bdb0      	pop	{r4, r5, r7, pc}

080117ac <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>:
  explicit evaluator(const PlainObjectType& m)
 80117ac:	b590      	push	{r4, r7, lr}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
    : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f000 fbdd 	bl	8011f76 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 80117bc:	687c      	ldr	r4, [r7, #4]
 80117be:	6838      	ldr	r0, [r7, #0]
 80117c0:	f000 fbcc 	bl	8011f5c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80117c4:	4603      	mov	r3, r0
 80117c6:	2200      	movs	r2, #0
 80117c8:	4619      	mov	r1, r3
 80117ca:	4620      	mov	r0, r4
 80117cc:	f7f5 f88b 	bl	80068e6 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4618      	mov	r0, r3
 80117d4:	370c      	adds	r7, #12
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd90      	pop	{r4, r7, pc}
	...

080117dc <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 80117dc:	b580      	push	{r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	68b9      	ldr	r1, [r7, #8]
 80117ee:	4618      	mov	r0, r3
 80117f0:	f000 fbcc 	bl	8011f8c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>
      eigen_assert( (i>=0) && (
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	db06      	blt.n	8011808 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x2c>
 80117fa:	68b8      	ldr	r0, [r7, #8]
 80117fc:	f7f4 fe6b 	bl	80064d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8011800:	4602      	mov	r2, r0
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4293      	cmp	r3, r2
 8011806:	db05      	blt.n	8011814 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x38>
 8011808:	4b05      	ldr	r3, [pc, #20]	; (8011820 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x44>)
 801180a:	4a06      	ldr	r2, [pc, #24]	; (8011824 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x48>)
 801180c:	2178      	movs	r1, #120	; 0x78
 801180e:	4806      	ldr	r0, [pc, #24]	; (8011828 <_ZN5Eigen5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEC1ERS5_i+0x4c>)
 8011810:	f00c f8f8 	bl	801da04 <__assert_func>
    }
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	4618      	mov	r0, r3
 8011818:	3710      	adds	r7, #16
 801181a:	46bd      	mov	sp, r7
 801181c:	bd80      	pop	{r7, pc}
 801181e:	bf00      	nop
 8011820:	080243f0 	.word	0x080243f0
 8011824:	08028154 	.word	0x08028154
 8011828:	08024574 	.word	0x08024574

0801182c <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	4618      	mov	r0, r3
 8011838:	370c      	adds	r7, #12
 801183a:	46bd      	mov	sp, r7
 801183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011840:	4770      	bx	lr

08011842 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
 8011842:	b580      	push	{r7, lr}
 8011844:	b082      	sub	sp, #8
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 fbaf 	bl	8011fae <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	4618      	mov	r0, r3
 8011854:	3708      	adds	r7, #8
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}

0801185a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 801185a:	b580      	push	{r7, lr}
 801185c:	b082      	sub	sp, #8
 801185e:	af00      	add	r7, sp, #0
 8011860:	6078      	str	r0, [r7, #4]
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7ff ffed 	bl	8011842 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	4618      	mov	r0, r3
 801186c:	3708      	adds	r7, #8
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8011872:	b580      	push	{r7, lr}
 8011874:	b082      	sub	sp, #8
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
 801187a:	f7f4 fd0e 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801187e:	4603      	mov	r3, r0
 8011880:	4618      	mov	r0, r3
 8011882:	3708      	adds	r7, #8
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	f7f4 fd0b 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8011894:	4603      	mov	r3, r0
 8011896:	4618      	mov	r0, r3
 8011898:	3708      	adds	r7, #8
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
	...

080118a0 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 80118a0:	b5b0      	push	{r4, r5, r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	60f8      	str	r0, [r7, #12]
 80118a8:	60b9      	str	r1, [r7, #8]
 80118aa:	607a      	str	r2, [r7, #4]
 80118ac:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 80118ae:	68f8      	ldr	r0, [r7, #12]
 80118b0:	f7ff ffd3 	bl	801185a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	4614      	mov	r4, r2
 80118ba:	461d      	mov	r5, r3
 80118bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80118c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f103 0218 	add.w	r2, r3, #24
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	4614      	mov	r4, r2
 80118d2:	461d      	mov	r5, r3
 80118d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80118dc:	e884 0003 	stmia.w	r4, {r0, r1}
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	3330      	adds	r3, #48	; 0x30
 80118e4:	6839      	ldr	r1, [r7, #0]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7f3 fa38 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 80118ec:	68b8      	ldr	r0, [r7, #8]
 80118ee:	f7f9 fba1 	bl	800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 80118f2:	4604      	mov	r4, r0
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7ff ffbb 	bl	8011872 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4rowsEv>
 80118fc:	4603      	mov	r3, r0
 80118fe:	429c      	cmp	r4, r3
 8011900:	d10a      	bne.n	8011918 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x78>
 8011902:	68b8      	ldr	r0, [r7, #8]
 8011904:	f7f9 fba3 	bl	800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8011908:	4604      	mov	r4, r0
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4618      	mov	r0, r3
 801190e:	f7ff ffbb 	bl	8011888 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4colsEv>
 8011912:	4603      	mov	r3, r0
 8011914:	429c      	cmp	r4, r3
 8011916:	d005      	beq.n	8011924 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x84>
 8011918:	4b05      	ldr	r3, [pc, #20]	; (8011930 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x90>)
 801191a:	4a06      	ldr	r2, [pc, #24]	; (8011934 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x94>)
 801191c:	2174      	movs	r1, #116	; 0x74
 801191e:	4806      	ldr	r0, [pc, #24]	; (8011938 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERSC_RSH_RKS3_+0x98>)
 8011920:	f00c f870 	bl	801da04 <__assert_func>
    }
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	4618      	mov	r0, r3
 8011928:	3710      	adds	r7, #16
 801192a:	46bd      	mov	sp, r7
 801192c:	bdb0      	pop	{r4, r5, r7, pc}
 801192e:	bf00      	nop
 8011930:	0801f86c 	.word	0x0801f86c
 8011934:	08028244 	.word	0x08028244
 8011938:	0801fad0 	.word	0x0801fad0

0801193c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 f809 	bl	801195c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 801194a:	4603      	mov	r3, r0
 801194c:	4618      	mov	r0, r3
 801194e:	f000 fb39 	bl	8011fc4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>
 8011952:	4603      	mov	r3, r0
 8011954:	4618      	mov	r0, r3
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 801195c:	b480      	push	{r7}
 801195e:	b083      	sub	sp, #12
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	4618      	mov	r0, r3
 8011968:	370c      	adds	r7, #12
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr

08011972 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8011972:	b580      	push	{r7, lr}
 8011974:	b082      	sub	sp, #8
 8011976:	af00      	add	r7, sp, #0
 8011978:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4618      	mov	r0, r3
 801197e:	f7f9 fb59 	bl	800b034 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4rowsEv>
 8011982:	4603      	mov	r3, r0
    }
 8011984:	4618      	mov	r0, r3
 8011986:	3708      	adds	r7, #8
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}

0801198c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f000 fb3c 	bl	8012012 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	4618      	mov	r0, r3
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}

080119a4 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7ff ffec 	bl	801198c <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEED1Ev>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	4618      	mov	r0, r3
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 80119be:	b580      	push	{r7, lr}
 80119c0:	b082      	sub	sp, #8
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7ff ffeb 	bl	80119a4 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EED1Ev>
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	4618      	mov	r0, r3
 80119d2:	3708      	adds	r7, #8
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
struct evaluator<const T>
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff ffeb 	bl	80119be <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	4618      	mov	r0, r3
 80119ec:	3708      	adds	r7, #8
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>:
  struct Data
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b082      	sub	sp, #8
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	330c      	adds	r3, #12
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7ff ffea 	bl	80119d8 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	3304      	adds	r3, #4
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7f9 fc09 	bl	800b220 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEED1Ev>
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	4618      	mov	r0, r3
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7ff ffe5 	bl	80119f2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataD1Ev>
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f000 fae7 	bl	8011ffc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	4618      	mov	r0, r3
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7ff ffe8 	bl	8011a18 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffED1Ev>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b082      	sub	sp, #8
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7ff ffeb 	bl	8011a38 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4618      	mov	r0, r3
 8011a66:	3708      	adds	r7, #8
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	ed2d 8b02 	vpush	{d8}
 8011a72:	b088      	sub	sp, #32
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f7ff fc53 	bl	8011326 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4rowsEv>
 8011a80:	4603      	mov	r3, r0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	dd05      	ble.n	8011a92 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7ff ff58 	bl	801193c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE4colsEv>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	dc06      	bgt.n	8011aa0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8011a92:	4b16      	ldr	r3, [pc, #88]	; (8011aec <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8011a94:	4a16      	ldr	r2, [pc, #88]	; (8011af0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8011a96:	f240 119b 	movw	r1, #411	; 0x19b
 8011a9a:	4816      	ldr	r0, [pc, #88]	; (8011af4 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8011a9c:	f00b ffb2 	bl	801da04 <__assert_func>
 8011aa0:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ff ff5a 	bl	801195c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	f107 030c 	add.w	r3, r7, #12
 8011aae:	4611      	mov	r1, r2
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f000 fa94 	bl	8011fde <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f7ff ff50 	bl	801195c <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE7derivedEv>
 8011abc:	4602      	mov	r2, r0
 8011abe:	f107 030c 	add.w	r3, r7, #12
 8011ac2:	6839      	ldr	r1, [r7, #0]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f000 faaf 	bl	8012028 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>
 8011aca:	eeb0 8a40 	vmov.f32	s16, s0
 8011ace:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8011ad0:	f107 030c 	add.w	r3, r7, #12
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7ff ffbc 	bl	8011a52 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8011ada:	eef0 7a48 	vmov.f32	s15, s16
}
 8011ade:	eeb0 0a67 	vmov.f32	s0, s15
 8011ae2:	3720      	adds	r7, #32
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	ecbd 8b02 	vpop	{d8}
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	080248ec 	.word	0x080248ec
 8011af0:	080284b4 	.word	0x080284b4
 8011af4:	08024af8 	.word	0x08024af8

08011af8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8011af8:	b480      	push	{r7}
 8011afa:	b083      	sub	sp, #12
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	3310      	adds	r3, #16
 8011b04:	4618      	mov	r0, r3
 8011b06:	370c      	adds	r7, #12
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <_ZNK5Eigen13CwiseBinaryOpINS_8internal13scalar_sum_opIffEEKNS_7ProductINS4_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS5_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS6_EELi0EEEKNS5_IfLi1ELi1ELi0ELi1ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8011b26:	b480      	push	{r7}
 8011b28:	b083      	sub	sp, #12
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	4618      	mov	r0, r3
 8011b34:	370c      	adds	r7, #12
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr

08011b3e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8011b3e:	b580      	push	{r7, lr}
 8011b40:	b082      	sub	sp, #8
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
 8011b46:	6039      	str	r1, [r7, #0]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6839      	ldr	r1, [r7, #0]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f000 fa7c 	bl	801204a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4618      	mov	r0, r3
 8011b56:	3708      	adds	r7, #8
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}

08011b5c <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERS4_>:
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6839      	ldr	r1, [r7, #0]
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7f8 f8bb 	bl	8009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	4618      	mov	r0, r3
 8011b74:	3708      	adds	r7, #8
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE5coeffEi>:
  CoeffReturnType coeff(Index index) const
 8011b7a:	b5b0      	push	{r4, r5, r7, lr}
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
 8011b82:	6039      	str	r1, [r7, #0]
    return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	4618      	mov	r0, r3
 8011b88:	f000 fa6e 	bl	8012068 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	3304      	adds	r3, #4
 8011b92:	6839      	ldr	r1, [r7, #0]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7ff fc7f 	bl	8011498 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	330c      	adds	r3, #12
 8011ba0:	6839      	ldr	r1, [r7, #0]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7ff fc78 	bl	8011498 <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEE5coeffEi>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	461a      	mov	r2, r3
 8011bac:	4629      	mov	r1, r5
 8011bae:	4620      	mov	r0, r4
 8011bb0:	f7f6 ff39 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011bb4:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bdb0      	pop	{r4, r5, r7, pc}

08011bc2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8011bc2:	b590      	push	{r4, r7, lr}
 8011bc4:	b083      	sub	sp, #12
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
 8011bca:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f000 fa72 	bl	80120b6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f000 f81e 	bl	8011c16 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>
 8011bda:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	601a      	str	r2, [r3, #0]
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	1d1c      	adds	r4, r3, #4
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	4618      	mov	r0, r3
 8011be8:	f000 fa49 	bl	801207e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8011bec:	4603      	mov	r3, r0
 8011bee:	4619      	mov	r1, r3
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	f7f4 fb2d 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	1d5c      	adds	r4, r3, #5
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f000 fa4c 	bl	801209a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 8011c02:	4603      	mov	r3, r0
 8011c04:	4619      	mov	r1, r3
 8011c06:	4620      	mov	r0, r4
 8011c08:	f7f4 fb08 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	4618      	mov	r0, r3
 8011c10:	370c      	adds	r7, #12
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd90      	pop	{r4, r7, pc}

08011c16 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8011c16:	b480      	push	{r7}
 8011c18:	b083      	sub	sp, #12
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4618      	mov	r0, r3
 8011c24:	370c      	adds	r7, #12
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr

08011c2e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffEC1ERKSD_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8011c2e:	b580      	push	{r7, lr}
 8011c30:	b082      	sub	sp, #8
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
 8011c36:	6039      	str	r1, [r7, #0]
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 fa47 	bl	80120cc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6839      	ldr	r1, [r7, #0]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f000 fa4d 	bl	80120e2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>
  }
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}

08011c52 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi0ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8011c52:	b580      	push	{r7, lr}
 8011c54:	b082      	sub	sp, #8
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	6078      	str	r0, [r7, #4]
 8011c5a:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	2100      	movs	r1, #0
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f000 fa66 	bl	8012132 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 8011c66:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8011c6e:	3708      	adds	r7, #8
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi2EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011c7e:	6839      	ldr	r1, [r7, #0]
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f000 fa69 	bl	8012158 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>
 8011c86:	eef0 7a40 	vmov.f32	s15, s0
 8011c8a:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fa72 	bl	801217a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>
 8011c96:	eef0 7a40 	vmov.f32	s15, s0
 8011c9a:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8011c9e:	f107 020c 	add.w	r2, r7, #12
 8011ca2:	f107 0308 	add.w	r3, r7, #8
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	6838      	ldr	r0, [r7, #0]
 8011caa:	f7f6 febc 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8011cae:	eef0 7a40 	vmov.f32	s15, s0
  }
 8011cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8011cb6:	3710      	adds	r7, #16
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 8011cbc:	b480      	push	{r7}
 8011cbe:	b083      	sub	sp, #12
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	6039      	str	r1, [r7, #0]
      : inner;
 8011cc6:	683b      	ldr	r3, [r7, #0]
  }
 8011cc8:	4618      	mov	r0, r3
 8011cca:	370c      	adds	r7, #12
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr

08011cd4 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 8011cd4:	b480      	push	{r7}
 8011cd6:	b083      	sub	sp, #12
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
 8011cdc:	6039      	str	r1, [r7, #0]
      : outer;
 8011cde:	687b      	ldr	r3, [r7, #4]
  }
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	370c      	adds	r7, #12
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cea:	4770      	bx	lr

08011cec <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 8011cec:	b5b0      	push	{r4, r5, r7, lr}
 8011cee:	b086      	sub	sp, #24
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	689c      	ldr	r4, [r3, #8]
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	68b9      	ldr	r1, [r7, #8]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7f6 fb2d 	bl	8008364 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 8011d0a:	4605      	mov	r5, r0
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	68b9      	ldr	r1, [r7, #8]
 8011d14:	4618      	mov	r0, r3
 8011d16:	f000 fa41 	bl	801219c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>
 8011d1a:	eef0 7a40 	vmov.f32	s15, s0
 8011d1e:	edc7 7a05 	vstr	s15, [r7, #20]
 8011d22:	f107 0314 	add.w	r3, r7, #20
 8011d26:	461a      	mov	r2, r3
 8011d28:	4629      	mov	r1, r5
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	f000 fa69 	bl	8012202 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>
  }
 8011d30:	bf00      	nop
 8011d32:	3718      	adds	r7, #24
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bdb0      	pop	{r4, r5, r7, pc}

08011d38 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi2ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011d40:	2202      	movs	r2, #2
 8011d42:	2100      	movs	r1, #0
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f7ff fc0d 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f000 fa70 	bl	8012230 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>
  }
 8011d50:	bf00      	nop
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>:
    StorageIndex startRow() const EIGEN_NOEXCEPT
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
      return m_startRow.value();
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	3310      	adds	r3, #16
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7fd fff8 	bl	800fd5a <_ZNK5Eigen8internal19variable_if_dynamicIiLin1EE5valueEv>
 8011d6a:	4603      	mov	r3, r0
    }
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>:
    StorageIndex startCol() const EIGEN_NOEXCEPT
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b082      	sub	sp, #8
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
      return m_startCol.value();
 8011d7c:	f7fd fbbd 	bl	800f4fa <_ZN5Eigen8internal19variable_if_dynamicIiLi0EE5valueEv>
 8011d80:	4603      	mov	r3, r0
    }
 8011d82:	4618      	mov	r0, r3
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}

08011d8a <_ZN5Eigen8internal15unary_evaluatorINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEENS0_10IndexBasedEfEC1ERKSG_>:
  explicit unary_evaluator(const XprType& block)
 8011d8a:	b5b0      	push	{r4, r5, r7, lr}
 8011d8c:	b082      	sub	sp, #8
 8011d8e:	af00      	add	r7, sp, #0
 8011d90:	6078      	str	r0, [r7, #4]
 8011d92:	6039      	str	r1, [r7, #0]
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f000 fa66 	bl	8012266 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>
 8011d9a:	687c      	ldr	r4, [r7, #4]
    : m_argImpl(block.nestedExpression()),
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f000 fa56 	bl	8012250 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8011da4:	4603      	mov	r3, r0
      m_linear_offset(ForwardLinearAccess?(ArgType::IsRowMajor ? block.startRow()*block.nestedExpression().cols() + block.startCol() : block.startCol()*block.nestedExpression().rows() + block.startRow()):0)
 8011da6:	4619      	mov	r1, r3
 8011da8:	4620      	mov	r0, r4
 8011daa:	f000 fa67 	bl	801227c <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f103 0410 	add.w	r4, r3, #16
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7ff ffce 	bl	8011d58 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f7fb fab9 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f103 0414 	add.w	r4, r3, #20
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7ff ffd0 	bl	8011d74 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f7fb fb21 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f103 0518 	add.w	r5, r3, #24
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7ff ffc4 	bl	8011d74 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startColEv>
 8011dec:	4604      	mov	r4, r0
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f000 fa2d 	bl	8012250 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>
 8011df6:	4603      	mov	r3, r0
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7f5 fd6c 	bl	80078d6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS1_18scalar_constant_opIfEES6_EEE4rowsEv>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	fb03 f404 	mul.w	r4, r3, r4
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7ff ffa6 	bl	8011d58 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE8startRowEv>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	4423      	add	r3, r4
 8011e10:	4619      	mov	r1, r3
 8011e12:	4628      	mov	r0, r5
 8011e14:	f7fb fa90 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
  { }
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3708      	adds	r7, #8
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bdb0      	pop	{r4, r5, r7, pc}

08011e22 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8011e22:	b580      	push	{r7, lr}
 8011e24:	b082      	sub	sp, #8
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	689b      	ldr	r3, [r3, #8]
             ? m_xpr.innerStride()
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7f5 ffdc 	bl	8007dec <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11outerStrideEv>
 8011e34:	4603      	mov	r3, r0
    }
 8011e36:	4618      	mov	r0, r3
 8011e38:	3708      	adds	r7, #8
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}

08011e3e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8011e3e:	b580      	push	{r7, lr}
 8011e40:	b082      	sub	sp, #8
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	689b      	ldr	r3, [r3, #8]
                    ? m_xpr.outerStride()
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fb fa1e 	bl	800d28c <_ZNK5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EE11innerStrideEv>
 8011e50:	4603      	mov	r3, r0
    }
 8011e52:	4618      	mov	r0, r3
 8011e54:	3708      	adds	r7, #8
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011e5a:	b480      	push	{r7}
 8011e5c:	b083      	sub	sp, #12
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	4618      	mov	r0, r3
 8011e66:	370c      	adds	r7, #12
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6e:	4770      	bx	lr

08011e70 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8011e70:	b480      	push	{r7}
 8011e72:	b083      	sub	sp, #12
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	370c      	adds	r7, #12
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <_ZNK5Eigen7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES2_Li1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	4618      	mov	r0, r3
 8011e96:	370c      	adds	r7, #12
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9e:	4770      	bx	lr

08011ea0 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEEEC1Ev>:
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	4618      	mov	r0, r3
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr

08011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeffByOuterInner(Index outer, Index inner)
 8011eb6:	b580      	push	{r7, lr}
 8011eb8:	b086      	sub	sp, #24
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	60f8      	str	r0, [r7, #12]
 8011ebe:	60b9      	str	r1, [r7, #8]
 8011ec0:	607a      	str	r2, [r7, #4]
    Index row = rowIndexByOuterInner(outer, inner);
 8011ec2:	6879      	ldr	r1, [r7, #4]
 8011ec4:	68b8      	ldr	r0, [r7, #8]
 8011ec6:	f000 f9e8 	bl	801229a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>
 8011eca:	6178      	str	r0, [r7, #20]
    Index col = colIndexByOuterInner(outer, inner);
 8011ecc:	6879      	ldr	r1, [r7, #4]
 8011ece:	68b8      	ldr	r0, [r7, #8]
 8011ed0:	f000 f9ef 	bl	80122b2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>
 8011ed4:	6138      	str	r0, [r7, #16]
    assignCoeff(row, col);
 8011ed6:	693a      	ldr	r2, [r7, #16]
 8011ed8:	6979      	ldr	r1, [r7, #20]
 8011eda:	68f8      	ldr	r0, [r7, #12]
 8011edc:	f000 f9f5 	bl	80122ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>
  }
 8011ee0:	bf00      	nop
 8011ee2:	3718      	adds	r7, #24
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}

08011ee8 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi1ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b082      	sub	sp, #8
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	2100      	movs	r1, #0
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f7ff ffde 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 fa0b 	bl	8012316 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>
  }
 8011f00:	bf00      	nop
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6839      	ldr	r1, [r7, #0]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f000 fa0d 	bl	8012336 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f000 fa33 	bl	801238a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 8011f24:	bf00      	nop
  }
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8011f38:	f7f4 f9b7 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8011f3c:	4603      	mov	r3, r0
  }
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b082      	sub	sp, #8
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8011f4e:	f7f4 f9a4 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8011f52:	4603      	mov	r3, r0
  }
 8011f54:	4618      	mov	r0, r3
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}

08011f5c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
    { return m_storage.data(); }
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f000 fa1b 	bl	80123a2 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3708      	adds	r7, #8
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8011f76:	b480      	push	{r7}
 8011f78:	b083      	sub	sp, #12
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	4618      	mov	r0, r3
 8011f82:	370c      	adds	r7, #12
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr

08011f8c <_ZN5Eigen9BlockImplIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ENS_5DenseEEC1ERS5_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b084      	sub	sp, #16
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	607a      	str	r2, [r7, #4]
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	68b9      	ldr	r1, [r7, #8]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f000 fa16 	bl	80123d0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3710      	adds	r7, #16
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}

08011fae <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8011fae:	b480      	push	{r7}
 8011fb0:	b083      	sub	sp, #12
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
    }
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	370c      	adds	r7, #12
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr

08011fc4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b082      	sub	sp, #8
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7f9 f83d 	bl	800b04e <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE4colsEv>
 8011fd4:	4603      	mov	r3, r0
    }
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3708      	adds	r7, #8
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}

08011fde <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8011fde:	b580      	push	{r7, lr}
 8011fe0:	b082      	sub	sp, #8
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	6078      	str	r0, [r7, #4]
 8011fe6:	6039      	str	r1, [r7, #0]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6839      	ldr	r1, [r7, #0]
 8011fec:	4618      	mov	r0, r3
 8011fee:	f000 fa25 	bl	801243c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	3708      	adds	r7, #8
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}

08011ffc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	4618      	mov	r0, r3
 8012008:	370c      	adds	r7, #12
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr

08012012 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEED1Ev>:
 8012012:	b480      	push	{r7}
 8012014:	b083      	sub	sp, #12
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	4618      	mov	r0, r3
 801201e:	370c      	adds	r7, #12
 8012020:	46bd      	mov	sp, r7
 8012022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012026:	4770      	bx	lr

08012028 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISM_EEfRKSN_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8012034:	68b9      	ldr	r1, [r7, #8]
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f000 fa0f 	bl	801245a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>
 801203c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012040:	eeb0 0a67 	vmov.f32	s0, s15
 8012044:	3710      	adds	r7, #16
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}

0801204a <_ZN5Eigen8internal9evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEEEC1ERKS9_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801204a:	b580      	push	{r7, lr}
 801204c:	b082      	sub	sp, #8
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
 8012052:	6039      	str	r1, [r7, #0]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6839      	ldr	r1, [r7, #0]
 8012058:	4618      	mov	r0, r3
 801205a:	f000 fa22 	bl	80124a2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	4618      	mov	r0, r3
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_13scalar_sum_opIffEEKNS_7ProductINS5_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS7_EELi0EEEKNS6_IfLi1ELi1ELi0ELi1ELi1EEEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4618      	mov	r0, r3
 8012074:	370c      	adds	r7, #12
 8012076:	46bd      	mov	sp, r7
 8012078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207c:	4770      	bx	lr

0801207e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801207e:	b580      	push	{r7, lr}
 8012080:	b082      	sub	sp, #8
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	689b      	ldr	r3, [r3, #8]
 801208a:	4618      	mov	r0, r3
 801208c:	f7fb f973 	bl	800d376 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11innerStrideEv>
 8012090:	4603      	mov	r3, r0
    }
 8012092:	4618      	mov	r0, r3
 8012094:	3708      	adds	r7, #8
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}

0801209a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801209a:	b580      	push	{r7, lr}
 801209c:	b082      	sub	sp, #8
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	689b      	ldr	r3, [r3, #8]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7f4 fcd6 	bl	8006a58 <_ZNK5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EE11outerStrideEv>
 80120ac:	4603      	mov	r3, r0
    }
 80120ae:	4618      	mov	r0, r3
 80120b0:	3708      	adds	r7, #8
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}

080120b6 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80120b6:	b480      	push	{r7}
 80120b8:	b083      	sub	sp, #12
 80120ba:	af00      	add	r7, sp, #0
 80120bc:	6078      	str	r0, [r7, #4]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4618      	mov	r0, r3
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr

080120cc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEEC1Ev>:
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	4618      	mov	r0, r3
 80120d8:	370c      	adds	r7, #12
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4DataC1ERKSD_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80120e2:	b590      	push	{r4, r7, lr}
 80120e4:	b083      	sub	sp, #12
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
 80120ea:	6039      	str	r1, [r7, #0]
 80120ec:	687c      	ldr	r4, [r7, #4]
 80120ee:	6838      	ldr	r0, [r7, #0]
 80120f0:	f000 fa14 	bl	801251c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>
 80120f4:	4603      	mov	r3, r0
 80120f6:	4619      	mov	r1, r3
 80120f8:	4620      	mov	r0, r4
 80120fa:	f7f2 fe2f 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	1d1c      	adds	r4, r3, #4
 8012102:	6838      	ldr	r0, [r7, #0]
 8012104:	f000 fa16 	bl	8012534 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>
 8012108:	4603      	mov	r3, r0
 801210a:	4619      	mov	r1, r3
 801210c:	4620      	mov	r0, r4
 801210e:	f000 fa28 	bl	8012562 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f103 0408 	add.w	r4, r3, #8
 8012118:	6838      	ldr	r0, [r7, #0]
 801211a:	f000 fa16 	bl	801254a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>
 801211e:	4603      	mov	r3, r0
 8012120:	4619      	mov	r1, r3
 8012122:	4620      	mov	r0, r4
 8012124:	f7f8 fdd9 	bl	800acda <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEC1ERS4_>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	4618      	mov	r0, r3
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	bd90      	pop	{r4, r7, pc}

08012132 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8012132:	b580      	push	{r7, lr}
 8012134:	b084      	sub	sp, #16
 8012136:	af00      	add	r7, sp, #0
 8012138:	60f8      	str	r0, [r7, #12]
 801213a:	60b9      	str	r1, [r7, #8]
 801213c:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	68ba      	ldr	r2, [r7, #8]
 8012142:	6879      	ldr	r1, [r7, #4]
 8012144:	4618      	mov	r0, r3
 8012146:	f000 fa1b 	bl	8012580 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>
 801214a:	eef0 7a40 	vmov.f32	s15, s0
 801214e:	eeb0 0a67 	vmov.f32	s0, s15
 8012152:	3710      	adds	r7, #16
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi1ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012162:	2201      	movs	r2, #1
 8012164:	2100      	movs	r1, #0
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f7ff ffe3 	bl	8012132 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 801216c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012170:	eeb0 0a67 	vmov.f32	s0, s15
 8012174:	3708      	adds	r7, #8
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}

0801217a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS9_IfLi3ELi1ELi0ELi3ELi1EEEEEEELi2ELi1EE3runERKSH_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 801217a:	b580      	push	{r7, lr}
 801217c:	b082      	sub	sp, #8
 801217e:	af00      	add	r7, sp, #0
 8012180:	6078      	str	r0, [r7, #4]
 8012182:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012184:	2202      	movs	r2, #2
 8012186:	2100      	movs	r1, #0
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7ff ffd2 	bl	8012132 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEEE17coeffByOuterInnerEii>
 801218e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012192:	eeb0 0a67 	vmov.f32	s0, s15
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEELi4ENS_10DenseShapeES7_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 801219c:	b580      	push	{r7, lr}
 801219e:	b0a4      	sub	sp, #144	; 0x90
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	6819      	ldr	r1, [r3, #0]
 80121ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80121b0:	68ba      	ldr	r2, [r7, #8]
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7f8 fc16 	bl	800a9e4 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEE3rowEi>
 80121b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80121bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80121c0:	4611      	mov	r1, r2
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7f8 fc21 	bl	800aa0a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE9transposeEv>
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6859      	ldr	r1, [r3, #4]
 80121cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80121d0:	687a      	ldr	r2, [r7, #4]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f000 f9ff 	bl	80125d6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>
 80121d8:	f107 0314 	add.w	r3, r7, #20
 80121dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80121e0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80121e4:	4618      	mov	r0, r3
 80121e6:	f000 fa09 	bl	80125fc <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 80121ea:	f107 0314 	add.w	r3, r7, #20
 80121ee:	4618      	mov	r0, r3
 80121f0:	f000 fa32 	bl	8012658 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>
 80121f4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80121f8:	eeb0 0a67 	vmov.f32	s0, s15
 80121fc:	3790      	adds	r7, #144	; 0x90
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <_ZNK5Eigen8internal13sub_assign_opIffE11assignCoeffERfRKf>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a -= b; }
 8012202:	b480      	push	{r7}
 8012204:	b085      	sub	sp, #20
 8012206:	af00      	add	r7, sp, #0
 8012208:	60f8      	str	r0, [r7, #12]
 801220a:	60b9      	str	r1, [r7, #8]
 801220c:	607a      	str	r2, [r7, #4]
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	ed93 7a00 	vldr	s14, [r3]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	edd3 7a00 	vldr	s15, [r3]
 801221a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	edc3 7a00 	vstr	s15, [r3]
 8012224:	bf00      	nop
 8012226:	3714      	adds	r7, #20
 8012228:	46bd      	mov	sp, r7
 801222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222e:	4770      	bx	lr

08012230 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi3ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012238:	2200      	movs	r2, #0
 801223a:	2101      	movs	r1, #1
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff f991 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f000 fa23 	bl	801268e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>
  }
 8012248:	bf00      	nop
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEELi1ELi1ELb0ELb0EE16nestedExpressionEv>:
    const typename internal::remove_all<XprTypeNested>::type& nestedExpression() const
 8012250:	b480      	push	{r7}
 8012252:	b083      	sub	sp, #12
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
      return m_xpr;
 8012258:	687b      	ldr	r3, [r7, #4]
    }
 801225a:	4618      	mov	r0, r3
 801225c:	370c      	adds	r7, #12
 801225e:	46bd      	mov	sp, r7
 8012260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012264:	4770      	bx	lr

08012266 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES8_EEEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012266:	b480      	push	{r7}
 8012268:	b083      	sub	sp, #12
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4618      	mov	r0, r3
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr

0801227c <_ZN5Eigen8internal9evaluatorIKNS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERSE_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
 8012284:	6039      	str	r1, [r7, #0]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	6839      	ldr	r1, [r7, #0]
 801228a:	4618      	mov	r0, r3
 801228c:	f7f7 fb49 	bl	8009922 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEKNS_14CwiseNullaryOpINS0_18scalar_constant_opIfEES7_EEEEEC1ERKSD_>
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	4618      	mov	r0, r3
 8012294:	3708      	adds	r7, #8
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20rowIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner)
 801229a:	b480      	push	{r7}
 801229c:	b083      	sub	sp, #12
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
 80122a2:	6039      	str	r1, [r7, #0]
      : inner;
 80122a4:	683b      	ldr	r3, [r7, #0]
  }
 80122a6:	4618      	mov	r0, r3
 80122a8:	370c      	adds	r7, #12
 80122aa:	46bd      	mov	sp, r7
 80122ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b0:	4770      	bx	lr

080122b2 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE20colIndexByOuterInnerEii>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner)
 80122b2:	b480      	push	{r7}
 80122b4:	b083      	sub	sp, #12
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
 80122ba:	6039      	str	r1, [r7, #0]
      : outer;
 80122bc:	687b      	ldr	r3, [r7, #4]
  }
 80122be:	4618      	mov	r0, r3
 80122c0:	370c      	adds	r7, #12
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr

080122ca <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index row, Index col)
 80122ca:	b5b0      	push	{r4, r5, r7, lr}
 80122cc:	b086      	sub	sp, #24
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	60f8      	str	r0, [r7, #12]
 80122d2:	60b9      	str	r1, [r7, #8]
 80122d4:	607a      	str	r2, [r7, #4]
    m_functor.assignCoeff(m_dst.coeffRef(row,col), m_src.coeff(row,col));
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	689c      	ldr	r4, [r3, #8]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	687a      	ldr	r2, [r7, #4]
 80122e0:	68b9      	ldr	r1, [r7, #8]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7f6 f83e 	bl	8008364 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEEE8coeffRefEii>
 80122e8:	4605      	mov	r5, r0
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	685b      	ldr	r3, [r3, #4]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	68b9      	ldr	r1, [r7, #8]
 80122f2:	4618      	mov	r0, r3
 80122f4:	f000 f9db 	bl	80126ae <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>
 80122f8:	eef0 7a40 	vmov.f32	s15, s0
 80122fc:	edc7 7a05 	vstr	s15, [r7, #20]
 8012300:	f107 0314 	add.w	r3, r7, #20
 8012304:	461a      	mov	r2, r3
 8012306:	4629      	mov	r1, r5
 8012308:	4620      	mov	r0, r4
 801230a:	f7f5 fd9b 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 801230e:	bf00      	nop
 8012310:	3718      	adds	r7, #24
 8012312:	46bd      	mov	sp, r7
 8012314:	bdb0      	pop	{r4, r5, r7, pc}

08012316 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi2ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012316:	b580      	push	{r7, lr}
 8012318:	b082      	sub	sp, #8
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801231e:	2202      	movs	r2, #2
 8012320:	2100      	movs	r1, #0
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f7ff fdc7 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 f9f3 	bl	8012714 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>
  }
 801232e:	bf00      	nop
 8012330:	3708      	adds	r7, #8
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}

08012336 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8012336:	b590      	push	{r4, r7, lr}
 8012338:	b083      	sub	sp, #12
 801233a:	af00      	add	r7, sp, #0
 801233c:	6078      	str	r0, [r7, #4]
 801233e:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 fa13 	bl	801276c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	4618      	mov	r0, r3
 801234a:	f000 f81e 	bl	801238a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>
 801234e:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	601a      	str	r2, [r3, #0]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	1d1c      	adds	r4, r3, #4
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	4618      	mov	r0, r3
 801235c:	f000 f9ea 	bl	8012734 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>
 8012360:	4603      	mov	r3, r0
 8012362:	4619      	mov	r1, r3
 8012364:	4620      	mov	r0, r4
 8012366:	f7f3 ff59 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	1d5c      	adds	r4, r3, #5
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	4618      	mov	r0, r3
 8012372:	f000 f9ed 	bl	8012750 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>
 8012376:	4603      	mov	r3, r0
 8012378:	4619      	mov	r1, r3
 801237a:	4620      	mov	r0, r4
 801237c:	f7f3 ff68 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
  }
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	4618      	mov	r0, r3
 8012384:	370c      	adds	r7, #12
 8012386:	46bd      	mov	sp, r7
 8012388:	bd90      	pop	{r4, r7, pc}

0801238a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEELi0EE4dataEv>:
 801238a:	b480      	push	{r7}
 801238c:	b083      	sub	sp, #12
 801238e:	af00      	add	r7, sp, #0
 8012390:	6078      	str	r0, [r7, #4]
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	4618      	mov	r0, r3
 8012398:	370c      	adds	r7, #12
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr

080123a2 <_ZNK5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE4dataEv>:
    EIGEN_DEVICE_FUNC const T *data() const { return m_data.array; }
 80123a2:	b480      	push	{r7}
 80123a4:	b083      	sub	sp, #12
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	6078      	str	r0, [r7, #4]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	4618      	mov	r0, r3
 80123ae:	370c      	adds	r7, #12
 80123b0:	46bd      	mov	sp, r7
 80123b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b6:	4770      	bx	lr

080123b8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>:
    inline Index outerStride() const EIGEN_NOEXCEPT { return this->innerSize(); }
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 f9de 	bl	8012782 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>
 80123c6:	4603      	mov	r3, r0
 80123c8:	4618      	mov	r0, r3
 80123ca:	3708      	adds	r7, #8
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERS6_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 80123d0:	b5b0      	push	{r4, r5, r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80123dc:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80123de:	68b8      	ldr	r0, [r7, #8]
 80123e0:	f000 f9db 	bl	801279a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>
 80123e4:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 80123e6:	68b8      	ldr	r0, [r7, #8]
 80123e8:	f000 f9ff 	bl	80127ea <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80123ec:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	fb02 f303 	mul.w	r3, r2, r3
 80123f4:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 80123f6:	441d      	add	r5, r3
 80123f8:	68b8      	ldr	r0, [r7, #8]
 80123fa:	f7f3 f822 	bl	8005442 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80123fe:	4602      	mov	r2, r0
 8012400:	2301      	movs	r3, #1
 8012402:	4629      	mov	r1, r5
 8012404:	4620      	mov	r0, r4
 8012406:	f000 fa11 	bl	801282c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	3308      	adds	r3, #8
 801240e:	68ba      	ldr	r2, [r7, #8]
 8012410:	6812      	ldr	r2, [r2, #0]
 8012412:	601a      	str	r2, [r3, #0]
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	330c      	adds	r3, #12
 8012418:	2100      	movs	r1, #0
 801241a:	4618      	mov	r0, r3
 801241c:	f7fa ff8c 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	3310      	adds	r3, #16
 8012424:	6879      	ldr	r1, [r7, #4]
 8012426:	4618      	mov	r0, r3
 8012428:	f7fa fffa 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
      init();
 801242c:	68f8      	ldr	r0, [r7, #12]
 801242e:	f000 fa3b 	bl	80128a8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>
    }
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	4618      	mov	r0, r3
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bdb0      	pop	{r4, r5, r7, pc}

0801243c <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1ERKSJ_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801243c:	b580      	push	{r7, lr}
 801243e:	b082      	sub	sp, #8
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6839      	ldr	r1, [r7, #0]
 801244a:	4618      	mov	r0, r3
 801244c:	f000 fa3c 	bl	80128c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	4618      	mov	r0, r3
 8012454:	3708      	adds	r7, #8
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801245a:	b580      	push	{r7, lr}
 801245c:	b084      	sub	sp, #16
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
 8012462:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012464:	6839      	ldr	r1, [r7, #0]
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f000 fa40 	bl	80128ec <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>
 801246c:	eef0 7a40 	vmov.f32	s15, s0
 8012470:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012474:	6839      	ldr	r1, [r7, #0]
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f000 fa49 	bl	801290e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>
 801247c:	eef0 7a40 	vmov.f32	s15, s0
 8012480:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012484:	f107 020c 	add.w	r2, r7, #12
 8012488:	f107 0308 	add.w	r3, r7, #8
 801248c:	4619      	mov	r1, r3
 801248e:	6838      	ldr	r0, [r7, #0]
 8012490:	f7f6 fac9 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012494:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012498:	eeb0 0a67 	vmov.f32	s0, s15
 801249c:	3710      	adds	r7, #16
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS2_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EELi0EEELi6ENS_10DenseShapeESA_ffEC1ERKS9_>:
  explicit product_evaluator(const XprType& xpr)
 80124a2:	b5b0      	push	{r4, r5, r7, lr}
 80124a4:	b084      	sub	sp, #16
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	6078      	str	r0, [r7, #4]
 80124aa:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	4618      	mov	r0, r3
 80124b0:	f000 fa51 	bl	8012956 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	1d1c      	adds	r4, r3, #4
 80124b8:	6838      	ldr	r0, [r7, #0]
 80124ba:	f7f3 f8f9 	bl	80056b0 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4rowsEv>
 80124be:	4603      	mov	r3, r0
 80124c0:	60bb      	str	r3, [r7, #8]
 80124c2:	6838      	ldr	r0, [r7, #0]
 80124c4:	f7f3 f901 	bl	80056ca <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE4colsEv>
 80124c8:	4603      	mov	r3, r0
 80124ca:	60fb      	str	r3, [r7, #12]
 80124cc:	f107 020c 	add.w	r2, r7, #12
 80124d0:	f107 0308 	add.w	r3, r7, #8
 80124d4:	4619      	mov	r1, r3
 80124d6:	4620      	mov	r0, r4
 80124d8:	f000 fa4a 	bl	8012970 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	4619      	mov	r1, r3
 80124e0:	2004      	movs	r0, #4
 80124e2:	f7ee fd2b 	bl	8000f3c <_ZnwjPv>
 80124e6:	4602      	mov	r2, r0
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	3304      	adds	r3, #4
 80124ec:	4619      	mov	r1, r3
 80124ee:	4610      	mov	r0, r2
 80124f0:	f7f7 fbf9 	bl	8009ce6 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	1d1c      	adds	r4, r3, #4
 80124f8:	6838      	ldr	r0, [r7, #0]
 80124fa:	f000 fa52 	bl	80129a2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>
 80124fe:	4605      	mov	r5, r0
 8012500:	6838      	ldr	r0, [r7, #0]
 8012502:	f000 fa59 	bl	80129b8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>
 8012506:	4603      	mov	r3, r0
 8012508:	461a      	mov	r2, r3
 801250a:	4629      	mov	r1, r5
 801250c:	4620      	mov	r0, r4
 801250e:	f000 fa5f 	bl	80129d0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>
  }
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	4618      	mov	r0, r3
 8012516:	3710      	adds	r7, #16
 8012518:	46bd      	mov	sp, r7
 801251a:	bdb0      	pop	{r4, r5, r7, pc}

0801251c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	3308      	adds	r3, #8
 8012528:	4618      	mov	r0, r3
 801252a:	370c      	adds	r7, #12
 801252c:	46bd      	mov	sp, r7
 801252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012532:	4770      	bx	lr

08012534 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	4618      	mov	r0, r3
 8012540:	370c      	adds	r7, #12
 8012542:	46bd      	mov	sp, r7
 8012544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012548:	4770      	bx	lr

0801254a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS5_IfLi3ELi1ELi0ELi3ELi1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 801254a:	b480      	push	{r7}
 801254c:	b083      	sub	sp, #12
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	4618      	mov	r0, r3
 8012558:	370c      	adds	r7, #12
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr

08012562 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8012562:	b580      	push	{r7, lr}
 8012564:	b082      	sub	sp, #8
 8012566:	af00      	add	r7, sp, #0
 8012568:	6078      	str	r0, [r7, #4]
 801256a:	6039      	str	r1, [r7, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6839      	ldr	r1, [r7, #0]
 8012570:	4618      	mov	r0, r3
 8012572:	f000 fa55 	bl	8012a20 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012580:	b590      	push	{r4, r7, lr}
 8012582:	b087      	sub	sp, #28
 8012584:	af00      	add	r7, sp, #0
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	4618      	mov	r0, r3
 8012590:	f000 fa55 	bl	8012a3e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>
 8012594:	4604      	mov	r4, r0
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	3304      	adds	r3, #4
 801259a:	687a      	ldr	r2, [r7, #4]
 801259c:	68b9      	ldr	r1, [r7, #8]
 801259e:	4618      	mov	r0, r3
 80125a0:	f000 fa58 	bl	8012a54 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 80125a4:	eef0 7a40 	vmov.f32	s15, s0
 80125a8:	edc7 7a05 	vstr	s15, [r7, #20]
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	3308      	adds	r3, #8
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	68b9      	ldr	r1, [r7, #8]
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fe f9d0 	bl	801095a <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEEEEE5coeffEii>
 80125ba:	4602      	mov	r2, r0
 80125bc:	f107 0314 	add.w	r3, r7, #20
 80125c0:	4619      	mov	r1, r3
 80125c2:	4620      	mov	r0, r4
 80125c4:	f7fc fa70 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 80125c8:	eef0 7a40 	vmov.f32	s15, s0
  }
 80125cc:	eeb0 0a67 	vmov.f32	s0, s15
 80125d0:	371c      	adds	r7, #28
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd90      	pop	{r4, r7, pc}

080125d6 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3colEi>:
ConstColXpr col(Index i) const
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b084      	sub	sp, #16
 80125da:	af00      	add	r7, sp, #0
 80125dc:	60f8      	str	r0, [r7, #12]
 80125de:	60b9      	str	r1, [r7, #8]
 80125e0:	607a      	str	r2, [r7, #4]
  return ConstColXpr(derived(), i);
 80125e2:	68b8      	ldr	r0, [r7, #8]
 80125e4:	f7f2 ff6a 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80125e8:	4603      	mov	r3, r0
 80125ea:	687a      	ldr	r2, [r7, #4]
 80125ec:	4619      	mov	r1, r3
 80125ee:	68f8      	ldr	r0, [r7, #12]
 80125f0:	f000 fa46 	bl	8012a80 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>
}
 80125f4:	68f8      	ldr	r0, [r7, #12]
 80125f6:	3710      	adds	r7, #16
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE12cwiseProductINS2_IKNS3_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80125fc:	b5b0      	push	{r4, r5, r7, lr}
 80125fe:	b086      	sub	sp, #24
 8012600:	af00      	add	r7, sp, #0
 8012602:	60f8      	str	r0, [r7, #12]
 8012604:	60b9      	str	r1, [r7, #8]
 8012606:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012608:	68b8      	ldr	r0, [r7, #8]
 801260a:	f7f8 ffff 	bl	800b60c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEE7derivedEv>
 801260e:	4604      	mov	r4, r0
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f000 fa5d 	bl	8012ad0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>
 8012616:	4605      	mov	r5, r0
 8012618:	f107 0314 	add.w	r3, r7, #20
 801261c:	4618      	mov	r0, r3
 801261e:	f7f2 fb13 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012622:	f107 0314 	add.w	r3, r7, #20
 8012626:	462a      	mov	r2, r5
 8012628:	4621      	mov	r1, r4
 801262a:	68f8      	ldr	r0, [r7, #12]
 801262c:	f000 fa8a 	bl	8012b44 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>
}
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	3718      	adds	r7, #24
 8012634:	46bd      	mov	sp, r7
 8012636:	bdb0      	pop	{r4, r5, r7, pc}

08012638 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 fadd 	bl	8012c00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012646:	4603      	mov	r3, r0
 8012648:	4618      	mov	r0, r3
 801264a:	f000 fae4 	bl	8012c16 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>
 801264e:	4603      	mov	r3, r0
 8012650:	4618      	mov	r0, r3
 8012652:	3708      	adds	r7, #8
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 8012658:	b590      	push	{r4, r7, lr}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 facd 	bl	8012c00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012666:	4604      	mov	r4, r0
 8012668:	f107 030c 	add.w	r3, r7, #12
 801266c:	4618      	mov	r0, r3
 801266e:	f7f2 fde2 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8012672:	f107 030c 	add.w	r3, r7, #12
 8012676:	4619      	mov	r1, r3
 8012678:	4620      	mov	r0, r4
 801267a:	f000 fb49 	bl	8012d10 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 801267e:	eef0 7a40 	vmov.f32	s15, s0
 8012682:	bf00      	nop
}
 8012684:	eeb0 0a67 	vmov.f32	s0, s15
 8012688:	3714      	adds	r7, #20
 801268a:	46bd      	mov	sp, r7
 801268c:	bd90      	pop	{r4, r7, pc}

0801268e <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi4ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801268e:	b580      	push	{r7, lr}
 8012690:	b082      	sub	sp, #8
 8012692:	af00      	add	r7, sp, #0
 8012694:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012696:	2201      	movs	r2, #1
 8012698:	2101      	movs	r1, #1
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f7fe ff62 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f000 fb7b 	bl	8012d9c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>
  }
 80126a6:	bf00      	nop
 80126a8:	3708      	adds	r7, #8
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}

080126ae <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEES4_Li1EEELi3ENS_10DenseShapeES6_ffE5coeffEii>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const CoeffReturnType coeff(Index row, Index col) const
 80126ae:	b580      	push	{r7, lr}
 80126b0:	b0a4      	sub	sp, #144	; 0x90
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	60f8      	str	r0, [r7, #12]
 80126b6:	60b9      	str	r1, [r7, #8]
 80126b8:	607a      	str	r2, [r7, #4]
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6819      	ldr	r1, [r3, #0]
 80126be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7f7 ffbd 	bl	800a644 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3rowEi>
 80126ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80126d2:	4611      	mov	r1, r2
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7f7 ffc8 	bl	800a66a <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEE9transposeEv>
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6859      	ldr	r1, [r3, #4]
 80126de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7f9 f9f4 	bl	800bad2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 80126ea:	f107 0314 	add.w	r3, r7, #20
 80126ee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80126f2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7f9 f9fe 	bl	800baf8 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEE12cwiseProductINS2_IS5_Li3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 80126fc:	f107 0314 	add.w	r3, r7, #20
 8012700:	4618      	mov	r0, r3
 8012702:	f7f9 fa27 	bl	800bb54 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IS9_Li3ELi1ELb1EEEEEE3sumEv>
 8012706:	eef0 7a40 	vmov.f32	s15, s0
  }
 801270a:	eeb0 0a67 	vmov.f32	s0, s15
 801270e:	3790      	adds	r7, #144	; 0x90
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi3ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 801271c:	2200      	movs	r2, #0
 801271e:	2101      	movs	r1, #1
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7ff fbc8 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 fb48 	bl	8012dbc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>
  }
 801272c:	bf00      	nop
 801272e:	3708      	adds	r7, #8
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
             : m_xpr.outerStride();
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	3308      	adds	r3, #8
             ? m_xpr.innerStride()
 8012740:	4618      	mov	r0, r3
 8012742:	f7fd fc40 	bl	800ffc6 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11outerStrideEv>
 8012746:	4603      	mov	r3, r0
    }
 8012748:	4618      	mov	r0, r3
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
                    : m_xpr.innerStride();
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	3308      	adds	r3, #8
                    ? m_xpr.outerStride()
 801275c:	4618      	mov	r0, r3
 801275e:	f7fd fc1e 	bl	800ff9e <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEENS_5DenseEE11innerStrideEv>
 8012762:	4603      	mov	r3, r0
    }
 8012764:	4618      	mov	r0, r3
 8012766:	3708      	adds	r7, #8
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}

0801276c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEELi3ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	4618      	mov	r0, r3
 8012778:	370c      	adds	r7, #12
 801277a:	46bd      	mov	sp, r7
 801277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012780:	4770      	bx	lr

08012782 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE9innerSizeEv>:
    Index innerSize() const
 8012782:	b580      	push	{r7, lr}
 8012784:	b082      	sub	sp, #8
 8012786:	af00      	add	r7, sp, #0
 8012788:	6078      	str	r0, [r7, #4]
      return IsVectorAtCompileTime ? this->size()
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f000 fb36 	bl	8012dfc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>
 8012790:	4603      	mov	r3, r0
    }
 8012792:	4618      	mov	r0, r3
 8012794:	3708      	adds	r7, #8
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}

0801279a <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE4dataEv>:
    const Scalar* data() const { return derived().nestedExpression().data(); }
 801279a:	b580      	push	{r7, lr}
 801279c:	b082      	sub	sp, #8
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f7f2 fe1e 	bl	80053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80127a8:	4603      	mov	r3, r0
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fe fd63 	bl	8011276 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80127b0:	4603      	mov	r3, r0
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7ff fbd2 	bl	8011f5c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 80127b8:	4603      	mov	r3, r0
 80127ba:	4618      	mov	r0, r3
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}

080127c2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>:
    Index innerStride() const { return derived().nestedExpression().innerStride(); }
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b082      	sub	sp, #8
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7f2 fe0a 	bl	80053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80127d0:	4603      	mov	r3, r0
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fe fd4f 	bl	8011276 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 80127d8:	4603      	mov	r3, r0
 80127da:	4618      	mov	r0, r3
 80127dc:	f000 fb30 	bl	8012e40 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 80127e0:	4603      	mov	r3, r0
 80127e2:	4618      	mov	r0, r3
 80127e4:	3708      	adds	r7, #8
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>:
    Index outerStride() const { return derived().nestedExpression().outerStride(); }
 80127ea:	b580      	push	{r7, lr}
 80127ec:	b082      	sub	sp, #8
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f7f2 fdf6 	bl	80053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 80127f8:	4603      	mov	r3, r0
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7fe fd3b 	bl	8011276 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 8012800:	4603      	mov	r3, r0
 8012802:	4618      	mov	r0, r3
 8012804:	f7ff fdd8 	bl	80123b8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8012808:	4603      	mov	r3, r0
 801280a:	4618      	mov	r0, r3
 801280c:	3708      	adds	r7, #8
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}

08012812 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
 8012812:	b580      	push	{r7, lr}
 8012814:	b082      	sub	sp, #8
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 fb1b 	bl	8012e56 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	4618      	mov	r0, r3
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
	...

0801282c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	60f8      	str	r0, [r7, #12]
 8012834:	60b9      	str	r1, [r7, #8]
 8012836:	607a      	str	r2, [r7, #4]
 8012838:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 801283a:	68f8      	ldr	r0, [r7, #12]
 801283c:	f7ff ffe9 	bl	8012812 <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	68ba      	ldr	r2, [r7, #8]
 8012844:	601a      	str	r2, [r3, #0]
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	3304      	adds	r3, #4
 801284a:	6879      	ldr	r1, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	f7f3 fce5 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	3305      	adds	r3, #5
 8012856:	6839      	ldr	r1, [r7, #0]
 8012858:	4618      	mov	r0, r3
 801285a:	f7f3 fcf9 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d011      	beq.n	8012888 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	db08      	blt.n	801287c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2b03      	cmp	r3, #3
 801286e:	d105      	bne.n	801287c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	db02      	blt.n	801287c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x50>
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	2b01      	cmp	r3, #1
 801287a:	d005      	beq.n	8012888 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x5c>
 801287c:	4b07      	ldr	r3, [pc, #28]	; (801289c <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x70>)
 801287e:	4a08      	ldr	r2, [pc, #32]	; (80128a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x74>)
 8012880:	21b0      	movs	r1, #176	; 0xb0
 8012882:	4808      	ldr	r0, [pc, #32]	; (80128a4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EEC1EPKfii+0x78>)
 8012884:	f00b f8be 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 8012888:	2100      	movs	r1, #0
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f000 faee 	bl	8012e6c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	4618      	mov	r0, r3
 8012894:	3710      	adds	r7, #16
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	08025f90 	.word	0x08025f90
 80128a0:	0802868c 	.word	0x0802868c
 80128a4:	08026140 	.word	0x08026140

080128a8 <_ZN5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE4initEv>:
    void init()
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3308      	adds	r3, #8
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7ff ff98 	bl	80127ea <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 80128ba:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	615a      	str	r2, [r3, #20]
    }
 80128c0:	bf00      	nop
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffEC1ERKSJ_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
 80128d0:	6039      	str	r1, [r7, #0]
 80128d2:	6878      	ldr	r0, [r7, #4]
 80128d4:	f000 fad5 	bl	8012e82 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6839      	ldr	r1, [r7, #0]
 80128dc:	4618      	mov	r0, r3
 80128de:	f000 fadb 	bl	8012e98 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>
  }
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80128f6:	2200      	movs	r2, #0
 80128f8:	2100      	movs	r1, #0
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f000 faf4 	bl	8012ee8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012900:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012904:	eeb0 0a67 	vmov.f32	s0, s15
 8012908:	3708      	adds	r7, #8
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}

0801290e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 801290e:	b580      	push	{r7, lr}
 8012910:	b084      	sub	sp, #16
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
 8012916:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012918:	6839      	ldr	r1, [r7, #0]
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f000 faf7 	bl	8012f0e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>
 8012920:	eef0 7a40 	vmov.f32	s15, s0
 8012924:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8012928:	6839      	ldr	r1, [r7, #0]
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 fb00 	bl	8012f30 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>
 8012930:	eef0 7a40 	vmov.f32	s15, s0
 8012934:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8012938:	f107 020c 	add.w	r2, r7, #12
 801293c:	f107 0308 	add.w	r3, r7, #8
 8012940:	4619      	mov	r1, r3
 8012942:	6838      	ldr	r0, [r7, #0]
 8012944:	f7f6 f86f 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8012948:	eef0 7a40 	vmov.f32	s15, s0
  }
 801294c:	eeb0 0a67 	vmov.f32	s0, s15
 8012950:	3710      	adds	r7, #16
 8012952:	46bd      	mov	sp, r7
 8012954:	bd80      	pop	{r7, pc}

08012956 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>:
  evaluator() {}
 8012956:	b580      	push	{r7, lr}
 8012958:	b082      	sub	sp, #8
 801295a:	af00      	add	r7, sp, #0
 801295c:	6078      	str	r0, [r7, #4]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4618      	mov	r0, r3
 8012962:	f000 faf6 	bl	8012f52 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	607a      	str	r2, [r7, #4]
    {
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	4618      	mov	r0, r3
 8012980:	f7f1 fde2 	bl	8004548 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
      Base::_check_template_params();
 8012984:	f7f1 fdf0 	bl	8004568 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 8012988:	68f8      	ldr	r0, [r7, #12]
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	6819      	ldr	r1, [r3, #0]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	2300      	movs	r3, #0
 8012994:	f000 faef 	bl	8012f76 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	4618      	mov	r0, r3
 801299c:	3710      	adds	r7, #16
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 80129a2:	b480      	push	{r7}
 80129a4:	b083      	sub	sp, #12
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4618      	mov	r0, r3
 80129ae:	370c      	adds	r7, #12
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr

080129b8 <_ZNK5Eigen7ProductINS0_INS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS2_EELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	3308      	adds	r3, #8
 80129c4:	4618      	mov	r0, r3
 80129c6:	370c      	adds	r7, #12
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr

080129d0 <_ZN5Eigen8internal20generic_product_implINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_9TransposeIS4_EENS_10DenseShapeES9_Li6EE6evalToINS3_IfLi1ELi1ELi0ELi1ELi1EEEEEvRT_RKS6_RKS8_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 80129d0:	b590      	push	{r4, r7, lr}
 80129d2:	b08b      	sub	sp, #44	; 0x2c
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	60b9      	str	r1, [r7, #8]
 80129da:	607a      	str	r2, [r7, #4]
    dst.coeffRef(0,0) = (lhs.transpose().cwiseProduct(rhs)).sum();
 80129dc:	f107 0320 	add.w	r3, r7, #32
 80129e0:	68b9      	ldr	r1, [r7, #8]
 80129e2:	4618      	mov	r0, r3
 80129e4:	f000 fadb 	bl	8012f9e <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>
 80129e8:	f107 0310 	add.w	r3, r7, #16
 80129ec:	f107 0120 	add.w	r1, r7, #32
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	4618      	mov	r0, r3
 80129f4:	f000 fae4 	bl	8012fc0 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	2200      	movs	r2, #0
 80129fc:	2100      	movs	r1, #0
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7f3 fb99 	bl	8006136 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE8coeffRefEii>
 8012a04:	4604      	mov	r4, r0
 8012a06:	f107 0310 	add.w	r3, r7, #16
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f000 fb06 	bl	801301c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>
 8012a10:	eef0 7a40 	vmov.f32	s15, s0
 8012a14:	edc4 7a00 	vstr	s15, [r4]
  }
 8012a18:	bf00      	nop
 8012a1a:	372c      	adds	r7, #44	; 0x2c
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd90      	pop	{r4, r7, pc}

08012a20 <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS6_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	6839      	ldr	r1, [r7, #0]
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f000 fb0f 	bl	8013052 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	4618      	mov	r0, r3
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}

08012a3e <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEKNS6_IfLi3ELi1ELi0ELi3ELi1EEEEENS0_10IndexBasedESE_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8012a3e:	b480      	push	{r7}
 8012a40:	b083      	sub	sp, #12
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	4618      	mov	r0, r3
 8012a4a:	370c      	adds	r7, #12
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a52:	4770      	bx	lr

08012a54 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	60f8      	str	r0, [r7, #12]
 8012a5c:	60b9      	str	r1, [r7, #8]
 8012a5e:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	6879      	ldr	r1, [r7, #4]
 8012a66:	4618      	mov	r0, r3
 8012a68:	f000 fb09 	bl	801307e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	ee07 3a90 	vmov	s15, r3
  }
 8012a74:	eeb0 0a67 	vmov.f32	s0, s15
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
	...

08012a80 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	607a      	str	r2, [r7, #4]
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	687a      	ldr	r2, [r7, #4]
 8012a90:	68b9      	ldr	r1, [r7, #8]
 8012a92:	4618      	mov	r0, r3
 8012a94:	f000 fb0b 	bl	80130ae <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	db07      	blt.n	8012aae <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x2e>
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7f1 ffe7 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	4293      	cmp	r3, r2
 8012aac:	db05      	blt.n	8012aba <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x3a>
 8012aae:	4b05      	ldr	r3, [pc, #20]	; (8012ac4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x44>)
 8012ab0:	4a05      	ldr	r2, [pc, #20]	; (8012ac8 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x48>)
 8012ab2:	2178      	movs	r1, #120	; 0x78
 8012ab4:	4805      	ldr	r0, [pc, #20]	; (8012acc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEC1ERS3_i+0x4c>)
 8012ab6:	f00a ffa5 	bl	801da04 <__assert_func>
    }
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	4618      	mov	r0, r3
 8012abe:	3710      	adds	r7, #16
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	080243f0 	.word	0x080243f0
 8012ac8:	080287a0 	.word	0x080287a0
 8012acc:	08024574 	.word	0x08024574

08012ad0 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012ad0:	b480      	push	{r7}
 8012ad2:	b083      	sub	sp, #12
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	4618      	mov	r0, r3
 8012adc:	370c      	adds	r7, #12
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae4:	4770      	bx	lr

08012ae6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
 8012ae6:	b580      	push	{r7, lr}
 8012ae8:	b082      	sub	sp, #8
 8012aea:	af00      	add	r7, sp, #0
 8012aec:	6078      	str	r0, [r7, #4]
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 faee 	bl	80130d0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	4618      	mov	r0, r3
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b082      	sub	sp, #8
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7ff ffed 	bl	8012ae6 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3708      	adds	r7, #8
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}

08012b16 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8012b16:	b580      	push	{r7, lr}
 8012b18:	b082      	sub	sp, #8
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	6078      	str	r0, [r7, #4]
 8012b1e:	f7f3 fbc4 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012b22:	4603      	mov	r3, r0
 8012b24:	4618      	mov	r0, r3
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b082      	sub	sp, #8
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	f7f3 fbb9 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3708      	adds	r7, #8
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
	...

08012b44 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8012b44:	b5b0      	push	{r4, r5, r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	607a      	str	r2, [r7, #4]
 8012b50:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8012b52:	68f8      	ldr	r0, [r7, #12]
 8012b54:	f7ff ffd3 	bl	8012afe <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS_5DenseEEC1Ev>
 8012b58:	68fa      	ldr	r2, [r7, #12]
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	4614      	mov	r4, r2
 8012b5e:	461d      	mov	r5, r3
 8012b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012b68:	e884 0003 	stmia.w	r4, {r0, r1}
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	f103 0218 	add.w	r2, r3, #24
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	4614      	mov	r4, r2
 8012b76:	461d      	mov	r5, r3
 8012b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012b80:	e884 0003 	stmia.w	r4, {r0, r1}
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	3330      	adds	r3, #48	; 0x30
 8012b88:	6839      	ldr	r1, [r7, #0]
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	f7f2 f8e6 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8012b90:	68b8      	ldr	r0, [r7, #8]
 8012b92:	f7f8 fd69 	bl	800b668 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8012b96:	4604      	mov	r4, r0
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7ff ffbb 	bl	8012b16 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4rowsEv>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	429c      	cmp	r4, r3
 8012ba4:	d10a      	bne.n	8012bbc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x78>
 8012ba6:	68b8      	ldr	r0, [r7, #8]
 8012ba8:	f7f8 fd6b 	bl	800b682 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 8012bac:	4604      	mov	r4, r0
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7ff ffbb 	bl	8012b2c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4colsEv>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	429c      	cmp	r4, r3
 8012bba:	d005      	beq.n	8012bc8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x84>
 8012bbc:	4b05      	ldr	r3, [pc, #20]	; (8012bd4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x90>)
 8012bbe:	4a06      	ldr	r2, [pc, #24]	; (8012bd8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x94>)
 8012bc0:	2174      	movs	r1, #116	; 0x74
 8012bc2:	4806      	ldr	r0, [pc, #24]	; (8012bdc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERSC_RSG_RKS3_+0x98>)
 8012bc4:	f00a ff1e 	bl	801da04 <__assert_func>
    }
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3710      	adds	r7, #16
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8012bd2:	bf00      	nop
 8012bd4:	0801f86c 	.word	0x0801f86c
 8012bd8:	0802887c 	.word	0x0802887c
 8012bdc:	0801fad0 	.word	0x0801fad0

08012be0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f000 f809 	bl	8012c00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f000 fa78 	bl	80130e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8012c00:	b480      	push	{r7}
 8012c02:	b083      	sub	sp, #12
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	370c      	adds	r7, #12
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr

08012c16 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8012c16:	b580      	push	{r7, lr}
 8012c18:	b082      	sub	sp, #8
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7f8 fd21 	bl	800b668 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4rowsEv>
 8012c26:	4603      	mov	r3, r0
    }
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3708      	adds	r7, #8
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f000 fa7b 	bl	8013134 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	4618      	mov	r0, r3
 8012c42:	3708      	adds	r7, #8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7ff ffec 	bl	8012c30 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEED1Ev>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3708      	adds	r7, #8
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}

08012c62 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8012c62:	b580      	push	{r7, lr}
 8012c64:	b082      	sub	sp, #8
 8012c66:	af00      	add	r7, sp, #0
 8012c68:	6078      	str	r0, [r7, #4]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ff ffeb 	bl	8012c48 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EED1Ev>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}

08012c7c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
struct evaluator<const T>
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7ff ffeb 	bl	8012c62 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3708      	adds	r7, #8
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}

08012c96 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8012c96:	b580      	push	{r7, lr}
 8012c98:	b082      	sub	sp, #8
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	330c      	adds	r3, #12
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ff ffea 	bl	8012c7c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	3304      	adds	r3, #4
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7f8 fdcf 	bl	800b850 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEED1Ev>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	3708      	adds	r7, #8
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	bd80      	pop	{r7, pc}

08012cbc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b082      	sub	sp, #8
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7ff ffe5 	bl	8012c96 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f000 fa26 	bl	801311e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7ff ffe8 	bl	8012cbc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3708      	adds	r7, #8
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}

08012cf6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8012cf6:	b580      	push	{r7, lr}
 8012cf8:	b082      	sub	sp, #8
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff ffeb 	bl	8012cdc <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8012d10:	b580      	push	{r7, lr}
 8012d12:	ed2d 8b02 	vpush	{d8}
 8012d16:	b088      	sub	sp, #32
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f7ff fc8a 	bl	8012638 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4rowsEv>
 8012d24:	4603      	mov	r3, r0
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	dd05      	ble.n	8012d36 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f7ff ff58 	bl	8012be0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE4colsEv>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	dc06      	bgt.n	8012d44 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8012d36:	4b16      	ldr	r3, [pc, #88]	; (8012d90 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8012d38:	4a16      	ldr	r2, [pc, #88]	; (8012d94 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8012d3a:	f240 119b 	movw	r1, #411	; 0x19b
 8012d3e:	4816      	ldr	r0, [pc, #88]	; (8012d98 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8012d40:	f00a fe60 	bl	801da04 <__assert_func>
 8012d44:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f7ff ff5a 	bl	8012c00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012d4c:	4602      	mov	r2, r0
 8012d4e:	f107 030c 	add.w	r3, r7, #12
 8012d52:	4611      	mov	r1, r2
 8012d54:	4618      	mov	r0, r3
 8012d56:	f000 f9d3 	bl	8013100 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f7ff ff50 	bl	8012c00 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE7derivedEv>
 8012d60:	4602      	mov	r2, r0
 8012d62:	f107 030c 	add.w	r3, r7, #12
 8012d66:	6839      	ldr	r1, [r7, #0]
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f000 f9ee 	bl	801314a <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8012d6e:	eeb0 8a40 	vmov.f32	s16, s0
 8012d72:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8012d74:	f107 030c 	add.w	r3, r7, #12
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7ff ffbc 	bl	8012cf6 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8012d7e:	eef0 7a48 	vmov.f32	s15, s16
}
 8012d82:	eeb0 0a67 	vmov.f32	s0, s15
 8012d86:	3720      	adds	r7, #32
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	ecbd 8b02 	vpop	{d8}
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	080248ec 	.word	0x080248ec
 8012d94:	08028ac8 	.word	0x08028ac8
 8012d98:	08024af8 	.word	0x08024af8

08012d9c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi5ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012da4:	2202      	movs	r2, #2
 8012da6:	2101      	movs	r1, #1
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f7fe fbdb 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f000 f9dc 	bl	801316c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>
  }
 8012db4:	bf00      	nop
 8012db6:	3708      	adds	r7, #8
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}

08012dbc <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi4ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	2101      	movs	r1, #1
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f7ff f874 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	f000 f9dc 	bl	801318c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>
  }
 8012dd4:	bf00      	nop
 8012dd6:	3708      	adds	r7, #8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7f2 fb69 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012dea:	4603      	mov	r3, r0
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7f1 fe4c 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012df2:	4603      	mov	r3, r0
 8012df4:	4618      	mov	r0, r3
 8012df6:	3708      	adds	r7, #8
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}

08012dfc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4sizeEv>:
  inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 8012dfc:	b590      	push	{r4, r7, lr}
 8012dfe:	b083      	sub	sp, #12
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f7ff ffe9 	bl	8012ddc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f000 f807 	bl	8012e20 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012e12:	4603      	mov	r3, r0
 8012e14:	fb04 f303 	mul.w	r3, r4, r3
 8012e18:	4618      	mov	r0, r3
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd90      	pop	{r4, r7, pc}

08012e20 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b082      	sub	sp, #8
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7f2 fb47 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7f1 fe1f 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8012e36:	4603      	mov	r3, r0
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3708      	adds	r7, #8
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>:
    inline Index innerStride() const EIGEN_NOEXCEPT { return 1; }
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	2301      	movs	r3, #1
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	370c      	adds	r7, #12
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e54:	4770      	bx	lr

08012e56 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8012e56:	b480      	push	{r7}
 8012e58:	b083      	sub	sp, #12
 8012e5a:	af00      	add	r7, sp, #0
 8012e5c:	6078      	str	r0, [r7, #4]
    }
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4618      	mov	r0, r3
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE11checkSanityIS7_EEvNS_8internal9enable_ifIXeqsrNSA_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
    {}
 8012e76:	bf00      	nop
 8012e78:	370c      	adds	r7, #12
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr

08012e82 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8012e82:	b480      	push	{r7}
 8012e84:	b083      	sub	sp, #12
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	370c      	adds	r7, #12
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr

08012e98 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4DataC1ERKSJ_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8012e98:	b590      	push	{r4, r7, lr}
 8012e9a:	b083      	sub	sp, #12
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
 8012ea2:	687c      	ldr	r4, [r7, #4]
 8012ea4:	6838      	ldr	r0, [r7, #0]
 8012ea6:	f000 f981 	bl	80131ac <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	4619      	mov	r1, r3
 8012eae:	4620      	mov	r0, r4
 8012eb0:	f7f1 ff54 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	1d1c      	adds	r4, r3, #4
 8012eb8:	6838      	ldr	r0, [r7, #0]
 8012eba:	f000 f983 	bl	80131c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	f7fb fa91 	bl	800e3ea <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEEC1ERSA_>
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f103 040c 	add.w	r4, r3, #12
 8012ece:	6838      	ldr	r0, [r7, #0]
 8012ed0:	f000 f983 	bl	80131da <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f000 f98a 	bl	80131f2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd90      	pop	{r4, r7, pc}

08012ee8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	68ba      	ldr	r2, [r7, #8]
 8012ef8:	6879      	ldr	r1, [r7, #4]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f000 f988 	bl	8013210 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>
 8012f00:	eef0 7a40 	vmov.f32	s15, s0
 8012f04:	eeb0 0a67 	vmov.f32	s0, s15
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}

08012f0e <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b082      	sub	sp, #8
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
 8012f16:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012f18:	2201      	movs	r2, #1
 8012f1a:	2100      	movs	r1, #0
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f7ff ffe3 	bl	8012ee8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012f22:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012f26:	eeb0 0a67 	vmov.f32	s0, s15
 8012f2a:	3708      	adds	r7, #8
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS9_IKNS8_INSA_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSN_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
 8012f38:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8012f3a:	2202      	movs	r2, #2
 8012f3c:	2100      	movs	r1, #0
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7ff ffd2 	bl	8012ee8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8012f44:	eef0 7a40 	vmov.f32	s15, s0
  }
 8012f48:	eeb0 0a67 	vmov.f32	s0, s15
 8012f4c:	3708      	adds	r7, #8
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEEEC1Ev>:
  evaluator()
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b082      	sub	sp, #8
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f7f7 fd37 	bl	800a9ce <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEEC1Ev>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2200      	movs	r2, #0
 8012f64:	2100      	movs	r1, #0
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7f3 fcbd 	bl	80068e6 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}

08012f76 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 8012f76:	b580      	push	{r7, lr}
 8012f78:	b086      	sub	sp, #24
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	60f8      	str	r0, [r7, #12]
 8012f7e:	60b9      	str	r1, [r7, #8]
 8012f80:	607a      	str	r2, [r7, #4]
 8012f82:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 8012f84:	2301      	movs	r3, #1
 8012f86:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 8012f88:	2301      	movs	r3, #1
 8012f8a:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	68b9      	ldr	r1, [r7, #8]
 8012f90:	68f8      	ldr	r0, [r7, #12]
 8012f92:	f7f9 fef9 	bl	800cd88 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi1ELi0ELi1ELi1EEEE6resizeEii>
    }
 8012f96:	bf00      	nop
 8012f98:	3718      	adds	r7, #24
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}

08012f9e <_ZNK5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 8012f9e:	b580      	push	{r7, lr}
 8012fa0:	b082      	sub	sp, #8
 8012fa2:	af00      	add	r7, sp, #0
 8012fa4:	6078      	str	r0, [r7, #4]
 8012fa6:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 8012fa8:	6838      	ldr	r0, [r7, #0]
 8012faa:	f7f2 fae5 	bl	8005578 <_ZNK5Eigen9EigenBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE7derivedEv>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 f974 	bl	80132a0 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>
}
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE12cwiseProductINS1_IS4_EEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSD_6traitsIT_E6ScalarEEEKS8_KSG_EERKNS0_ISG_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 8012fc0:	b5b0      	push	{r4, r5, r7, lr}
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 8012fcc:	68b8      	ldr	r0, [r7, #8]
 8012fce:	f000 f97a 	bl	80132c6 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f7f2 fa05 	bl	80053e4 <_ZNK5Eigen9EigenBaseINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE7derivedEv>
 8012fda:	4605      	mov	r5, r0
 8012fdc:	f107 0314 	add.w	r3, r7, #20
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7f1 fe31 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 8012fe6:	f107 0314 	add.w	r3, r7, #20
 8012fea:	462a      	mov	r2, r5
 8012fec:	4621      	mov	r1, r4
 8012fee:	68f8      	ldr	r0, [r7, #12]
 8012ff0:	f000 f9a6 	bl	8013340 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>
}
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	3718      	adds	r7, #24
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bdb0      	pop	{r4, r5, r7, pc}

08012ffc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f000 f9eb 	bl	80133e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 801300a:	4603      	mov	r3, r0
 801300c:	4618      	mov	r0, r3
 801300e:	f000 f9f2 	bl	80133f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>
 8013012:	4603      	mov	r3, r0
 8013014:	4618      	mov	r0, r3
 8013016:	3708      	adds	r7, #8
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}

0801301c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE3sumEv>:
DenseBase<Derived>::sum() const
 801301c:	b590      	push	{r4, r7, lr}
 801301e:	b085      	sub	sp, #20
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f000 f9db 	bl	80133e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 801302a:	4604      	mov	r4, r0
 801302c:	f107 030c 	add.w	r3, r7, #12
 8013030:	4618      	mov	r0, r3
 8013032:	f7f2 f900 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8013036:	f107 030c 	add.w	r3, r7, #12
 801303a:	4619      	mov	r1, r3
 801303c:	4620      	mov	r0, r4
 801303e:	f000 fa83 	bl	8013548 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8013042:	eef0 7a40 	vmov.f32	s15, s0
 8013046:	bf00      	nop
}
 8013048:	eeb0 0a67 	vmov.f32	s0, s15
 801304c:	3714      	adds	r7, #20
 801304e:	46bd      	mov	sp, r7
 8013050:	bd90      	pop	{r4, r7, pc}

08013052 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfEC1ERKS6_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8013052:	b590      	push	{r4, r7, lr}
 8013054:	b083      	sub	sp, #12
 8013056:	af00      	add	r7, sp, #0
 8013058:	6078      	str	r0, [r7, #4]
 801305a:	6039      	str	r1, [r7, #0]
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f000 fac5 	bl	80135ec <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 8013062:	687c      	ldr	r4, [r7, #4]
 8013064:	6838      	ldr	r0, [r7, #0]
 8013066:	f000 fab5 	bl	80135d4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>
 801306a:	4603      	mov	r3, r0
 801306c:	4619      	mov	r1, r3
 801306e:	4620      	mov	r0, r4
 8013070:	f000 fac7 	bl	8013602 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	4618      	mov	r0, r3
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	bd90      	pop	{r4, r7, pc}

0801307e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 801307e:	b590      	push	{r4, r7, lr}
 8013080:	b085      	sub	sp, #20
 8013082:	af00      	add	r7, sp, #0
 8013084:	60f8      	str	r0, [r7, #12]
 8013086:	60b9      	str	r1, [r7, #8]
 8013088:	607a      	str	r2, [r7, #4]
      return m_d.data[row * m_d.outerStride() + col];
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	681c      	ldr	r4, [r3, #0]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	4618      	mov	r0, r3
 8013092:	f7f3 fb5d 	bl	8006750 <_ZNK5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EE11outerStrideEv>
 8013096:	4602      	mov	r2, r0
 8013098:	68bb      	ldr	r3, [r7, #8]
 801309a:	fb03 f202 	mul.w	r2, r3, r2
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	4413      	add	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	4423      	add	r3, r4
  }
 80130a6:	4618      	mov	r0, r3
 80130a8:	3714      	adds	r7, #20
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd90      	pop	{r4, r7, pc}

080130ae <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 80130ae:	b580      	push	{r7, lr}
 80130b0:	b084      	sub	sp, #16
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	60f8      	str	r0, [r7, #12]
 80130b6:	60b9      	str	r1, [r7, #8]
 80130b8:	607a      	str	r2, [r7, #4]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	687a      	ldr	r2, [r7, #4]
 80130be:	68b9      	ldr	r1, [r7, #8]
 80130c0:	4618      	mov	r0, r3
 80130c2:	f000 faad 	bl	8013620 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	4618      	mov	r0, r3
 80130ca:	3710      	adds	r7, #16
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 80130d0:	b480      	push	{r7}
 80130d2:	b083      	sub	sp, #12
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
    }
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	4618      	mov	r0, r3
 80130dc:	370c      	adds	r7, #12
 80130de:	46bd      	mov	sp, r7
 80130e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e4:	4770      	bx	lr

080130e6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80130e6:	b580      	push	{r7, lr}
 80130e8:	b082      	sub	sp, #8
 80130ea:	af00      	add	r7, sp, #0
 80130ec:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7f8 fac6 	bl	800b682 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEE4colsEv>
 80130f6:	4603      	mov	r3, r0
    }
 80130f8:	4618      	mov	r0, r3
 80130fa:	3708      	adds	r7, #8
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6839      	ldr	r1, [r7, #0]
 801310e:	4618      	mov	r0, r3
 8013110:	f000 fab7 	bl	8013682 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	4618      	mov	r0, r3
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 801311e:	b480      	push	{r7}
 8013120:	b083      	sub	sp, #12
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	4618      	mov	r0, r3
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEED1Ev>:
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	4618      	mov	r0, r3
 8013140:	370c      	adds	r7, #12
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr

0801314a <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 801314a:	b580      	push	{r7, lr}
 801314c:	b084      	sub	sp, #16
 801314e:	af00      	add	r7, sp, #0
 8013150:	60f8      	str	r0, [r7, #12]
 8013152:	60b9      	str	r1, [r7, #8]
 8013154:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013156:	68b9      	ldr	r1, [r7, #8]
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f000 faa1 	bl	80136a0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 801315e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013162:	eeb0 0a67 	vmov.f32	s0, s15
 8013166:	3710      	adds	r7, #16
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}

0801316c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi6ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013174:	2200      	movs	r2, #0
 8013176:	2102      	movs	r1, #2
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7fe f9f3 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f000 fa9f 	bl	80136c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>
  }
 8013184:	bf00      	nop
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi5ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013194:	2202      	movs	r2, #2
 8013196:	2101      	movs	r1, #1
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f7fe fe8c 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f000 fa9f 	bl	80136e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>
  }
 80131a4:	bf00      	nop
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}

080131ac <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	3330      	adds	r3, #48	; 0x30
 80131b8:	4618      	mov	r0, r3
 80131ba:	370c      	adds	r7, #12
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80131c4:	b480      	push	{r7}
 80131c6:	b083      	sub	sp, #12
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	4618      	mov	r0, r3
 80131d0:	370c      	adds	r7, #12
 80131d2:	46bd      	mov	sp, r7
 80131d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d8:	4770      	bx	lr

080131da <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS5_IKNS4_INS6_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80131da:	b480      	push	{r7}
 80131dc:	b083      	sub	sp, #12
 80131de:	af00      	add	r7, sp, #0
 80131e0:	6078      	str	r0, [r7, #4]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	3318      	adds	r3, #24
 80131e6:	4618      	mov	r0, r3
 80131e8:	370c      	adds	r7, #12
 80131ea:	46bd      	mov	sp, r7
 80131ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f0:	4770      	bx	lr

080131f2 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERS9_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80131f2:	b580      	push	{r7, lr}
 80131f4:	b082      	sub	sp, #8
 80131f6:	af00      	add	r7, sp, #0
 80131f8:	6078      	str	r0, [r7, #4]
 80131fa:	6039      	str	r1, [r7, #0]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6839      	ldr	r1, [r7, #0]
 8013200:	4618      	mov	r0, r3
 8013202:	f000 fa7e 	bl	8013702 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	4618      	mov	r0, r3
 801320a:	3708      	adds	r7, #8
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}

08013210 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013210:	b590      	push	{r4, r7, lr}
 8013212:	b087      	sub	sp, #28
 8013214:	af00      	add	r7, sp, #0
 8013216:	60f8      	str	r0, [r7, #12]
 8013218:	60b9      	str	r1, [r7, #8]
 801321a:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	4618      	mov	r0, r3
 8013220:	f000 fa7e 	bl	8013720 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>
 8013224:	4604      	mov	r4, r0
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	3304      	adds	r3, #4
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	68b9      	ldr	r1, [r7, #8]
 801322e:	4618      	mov	r0, r3
 8013230:	f7fb fdf6 	bl	800ee20 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013234:	eef0 7a40 	vmov.f32	s15, s0
 8013238:	edc7 7a04 	vstr	s15, [r7, #16]
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	330c      	adds	r3, #12
 8013240:	687a      	ldr	r2, [r7, #4]
 8013242:	68b9      	ldr	r1, [r7, #8]
 8013244:	4618      	mov	r0, r3
 8013246:	f000 fa76 	bl	8013736 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 801324a:	eef0 7a40 	vmov.f32	s15, s0
 801324e:	edc7 7a05 	vstr	s15, [r7, #20]
 8013252:	f107 0214 	add.w	r2, r7, #20
 8013256:	f107 0310 	add.w	r3, r7, #16
 801325a:	4619      	mov	r1, r3
 801325c:	4620      	mov	r0, r4
 801325e:	f7fb fc23 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013262:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013266:	eeb0 0a67 	vmov.f32	s0, s15
 801326a:	371c      	adds	r7, #28
 801326c:	46bd      	mov	sp, r7
 801326e:	bd90      	pop	{r4, r7, pc}

08013270 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f000 fa7d 	bl	8013778 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	4618      	mov	r0, r3
 8013282:	3708      	adds	r7, #8
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 8013288:	b580      	push	{r7, lr}
 801328a:	b082      	sub	sp, #8
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7ff ffed 	bl	8013270 <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	4618      	mov	r0, r3
 801329a:	3708      	adds	r7, #8
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <_ZN5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f7ff ffec 	bl	8013288 <_ZN5Eigen13TransposeImplIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEENS_5DenseEEC1Ev>
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	683a      	ldr	r2, [r7, #0]
 80132b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	4618      	mov	r0, r3
 80132c0:	3708      	adds	r7, #8
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}

080132c6 <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80132c6:	b480      	push	{r7}
 80132c8:	b083      	sub	sp, #12
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	6078      	str	r0, [r7, #4]
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	4618      	mov	r0, r3
 80132d2:	370c      	adds	r7, #12
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	4770      	bx	lr

080132dc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f000 fa52 	bl	801378e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	4618      	mov	r0, r3
 80132ee:	3708      	adds	r7, #8
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b082      	sub	sp, #8
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f7ff ffed 	bl	80132dc <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	4618      	mov	r0, r3
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	4618      	mov	r0, r3
 8013318:	f7f2 f95d 	bl	80055d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 801331c:	4603      	mov	r3, r0
 801331e:	4618      	mov	r0, r3
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}

08013326 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8013326:	b580      	push	{r7, lr}
 8013328:	b082      	sub	sp, #8
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	4618      	mov	r0, r3
 8013332:	f7f3 f8c2 	bl	80064ba <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8013336:	4603      	mov	r3, r0
 8013338:	4618      	mov	r0, r3
 801333a:	3708      	adds	r7, #8
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8013340:	b590      	push	{r4, r7, lr}
 8013342:	b085      	sub	sp, #20
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	607a      	str	r2, [r7, #4]
 801334c:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 801334e:	68f8      	ldr	r0, [r7, #12]
 8013350:	f7ff ffd0 	bl	80132f4 <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EENS_5DenseEEC1Ev>
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	68ba      	ldr	r2, [r7, #8]
 8013358:	e892 0003 	ldmia.w	r2, {r0, r1}
 801335c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	3308      	adds	r3, #8
 8013364:	687a      	ldr	r2, [r7, #4]
 8013366:	6812      	ldr	r2, [r2, #0]
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	330c      	adds	r3, #12
 801336e:	6839      	ldr	r1, [r7, #0]
 8013370:	4618      	mov	r0, r3
 8013372:	f7f1 fcf3 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8013376:	68b8      	ldr	r0, [r7, #8]
 8013378:	f7ff ffc8 	bl	801330c <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 801337c:	4604      	mov	r4, r0
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7f2 f85f 	bl	8005442 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8013384:	4603      	mov	r3, r0
 8013386:	429c      	cmp	r4, r3
 8013388:	d109      	bne.n	801339e <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x5e>
 801338a:	68b8      	ldr	r0, [r7, #8]
 801338c:	f7ff ffcb 	bl	8013326 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 8013390:	4604      	mov	r4, r0
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7f3 f89f 	bl	80064d6 <_ZNK5Eigen9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8013398:	4603      	mov	r3, r0
 801339a:	429c      	cmp	r4, r3
 801339c:	d005      	beq.n	80133aa <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x6a>
 801339e:	4b05      	ldr	r3, [pc, #20]	; (80133b4 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x74>)
 80133a0:	4a05      	ldr	r2, [pc, #20]	; (80133b8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x78>)
 80133a2:	2174      	movs	r1, #116	; 0x74
 80133a4:	4805      	ldr	r0, [pc, #20]	; (80133bc <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEEC1ERSC_RSE_RKS3_+0x7c>)
 80133a6:	f00a fb2d 	bl	801da04 <__assert_func>
    }
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	4618      	mov	r0, r3
 80133ae:	3714      	adds	r7, #20
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd90      	pop	{r4, r7, pc}
 80133b4:	0801f86c 	.word	0x0801f86c
 80133b8:	08028c90 	.word	0x08028c90
 80133bc:	0801fad0 	.word	0x0801fad0

080133c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f000 f809 	bl	80133e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 80133ce:	4603      	mov	r3, r0
 80133d0:	4618      	mov	r0, r3
 80133d2:	f000 f9e7 	bl	80137a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>
 80133d6:	4603      	mov	r3, r0
 80133d8:	4618      	mov	r0, r3
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}

080133e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80133e0:	b480      	push	{r7}
 80133e2:	b083      	sub	sp, #12
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	4618      	mov	r0, r3
 80133ec:	370c      	adds	r7, #12
 80133ee:	46bd      	mov	sp, r7
 80133f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f4:	4770      	bx	lr

080133f6 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 80133f6:	b580      	push	{r7, lr}
 80133f8:	b082      	sub	sp, #8
 80133fa:	af00      	add	r7, sp, #0
 80133fc:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	4618      	mov	r0, r3
 8013402:	f7ff ff83 	bl	801330c <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4rowsEv>
 8013406:	4603      	mov	r3, r0
    }
 8013408:	4618      	mov	r0, r3
 801340a:	3708      	adds	r7, #8
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}

08013410 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, Options>, ProductTag, LhsShape, RhsShape>
 8013410:	b580      	push	{r7, lr}
 8013412:	b082      	sub	sp, #8
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	4618      	mov	r0, r3
 801341c:	f7fb fa2e 	bl	800e87c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	4618      	mov	r0, r3
 8013424:	3708      	adds	r7, #8
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}

0801342a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 801342a:	b580      	push	{r7, lr}
 801342c:	b082      	sub	sp, #8
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	4618      	mov	r0, r3
 8013436:	f7ff ffeb 	bl	8013410 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffED1Ev>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4618      	mov	r0, r3
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>:
struct evaluator<const T>
 8013444:	b580      	push	{r7, lr}
 8013446:	b082      	sub	sp, #8
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	4618      	mov	r0, r3
 8013450:	f7ff ffeb 	bl	801342a <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	4618      	mov	r0, r3
 8013458:	3708      	adds	r7, #8
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}

0801345e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 801345e:	b580      	push	{r7, lr}
 8013460:	b082      	sub	sp, #8
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	4618      	mov	r0, r3
 801346a:	f7ff ffeb 	bl	8013444 <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEED1Ev>
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f000 f9bf 	bl	80137f2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	4618      	mov	r0, r3
 8013478:	3708      	adds	r7, #8
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}

0801347e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 801347e:	b580      	push	{r7, lr}
 8013480:	b082      	sub	sp, #8
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	4618      	mov	r0, r3
 801348a:	f7ff ffe8 	bl	801345e <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfED1Ev>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	4618      	mov	r0, r3
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
struct evaluator<const T>
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7ff ffeb 	bl	801347e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	4618      	mov	r0, r3
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}

080134b2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>:
 80134b2:	b580      	push	{r7, lr}
 80134b4:	b082      	sub	sp, #8
 80134b6:	af00      	add	r7, sp, #0
 80134b8:	6078      	str	r0, [r7, #4]
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	4618      	mov	r0, r3
 80134be:	f7fb f9fa 	bl	800e8b6 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	4618      	mov	r0, r3
 80134c6:	3708      	adds	r7, #8
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>:
  struct Data
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b082      	sub	sp, #8
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	3314      	adds	r3, #20
 80134d8:	4618      	mov	r0, r3
 80134da:	f7ff ffea 	bl	80134b2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEED1Ev>
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	3304      	adds	r3, #4
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7ff ffd8 	bl	8013498 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	4618      	mov	r0, r3
 80134ec:	3708      	adds	r7, #8
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}

080134f2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 80134f2:	b580      	push	{r7, lr}
 80134f4:	b082      	sub	sp, #8
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ff ffe5 	bl	80134cc <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataD1Ev>
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f000 f96a 	bl	80137dc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	4618      	mov	r0, r3
 801350c:	3708      	adds	r7, #8
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}

08013512 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8013512:	b580      	push	{r7, lr}
 8013514:	b082      	sub	sp, #8
 8013516:	af00      	add	r7, sp, #0
 8013518:	6078      	str	r0, [r7, #4]
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	4618      	mov	r0, r3
 801351e:	f7ff ffe8 	bl	80134f2 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffED1Ev>
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	4618      	mov	r0, r3
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	4618      	mov	r0, r3
 8013538:	f7ff ffeb 	bl	8013512 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	4618      	mov	r0, r3
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
	...

08013548 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8013548:	b580      	push	{r7, lr}
 801354a:	ed2d 8b02 	vpush	{d8}
 801354e:	b088      	sub	sp, #32
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
 8013554:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f7ff fd50 	bl	8012ffc <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4rowsEv>
 801355c:	4603      	mov	r3, r0
 801355e:	2b00      	cmp	r3, #0
 8013560:	dd05      	ble.n	801356e <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f7ff ff2c 	bl	80133c0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE4colsEv>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	dc06      	bgt.n	801357c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 801356e:	4b16      	ldr	r3, [pc, #88]	; (80135c8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8013570:	4a16      	ldr	r2, [pc, #88]	; (80135cc <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8013572:	f240 119b 	movw	r1, #411	; 0x19b
 8013576:	4816      	ldr	r0, [pc, #88]	; (80135d0 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8013578:	f00a fa44 	bl	801da04 <__assert_func>
 801357c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f7ff ff2e 	bl	80133e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013584:	4602      	mov	r2, r0
 8013586:	f107 0308 	add.w	r3, r7, #8
 801358a:	4611      	mov	r1, r2
 801358c:	4618      	mov	r0, r3
 801358e:	f000 f916 	bl	80137be <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7ff ff24 	bl	80133e0 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE7derivedEv>
 8013598:	4602      	mov	r2, r0
 801359a:	f107 0308 	add.w	r3, r7, #8
 801359e:	6839      	ldr	r1, [r7, #0]
 80135a0:	4618      	mov	r0, r3
 80135a2:	f000 f931 	bl	8013808 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>
 80135a6:	eeb0 8a40 	vmov.f32	s16, s0
 80135aa:	bf00      	nop
  ThisEvaluator thisEval(derived());
 80135ac:	f107 0308 	add.w	r3, r7, #8
 80135b0:	4618      	mov	r0, r3
 80135b2:	f7ff ffbb 	bl	801352c <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 80135b6:	eef0 7a48 	vmov.f32	s15, s16
}
 80135ba:	eeb0 0a67 	vmov.f32	s0, s15
 80135be:	3720      	adds	r7, #32
 80135c0:	46bd      	mov	sp, r7
 80135c2:	ecbd 8b02 	vpop	{d8}
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	080248ec 	.word	0x080248ec
 80135cc:	08028edc 	.word	0x08028edc
 80135d0:	08024af8 	.word	0x08024af8

080135d4 <_ZNK5Eigen9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 80135d4:	b480      	push	{r7}
 80135d6:	b083      	sub	sp, #12
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	4618      	mov	r0, r3
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr

080135ec <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80135ec:	b480      	push	{r7}
 80135ee:	b083      	sub	sp, #12
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	4618      	mov	r0, r3
 80135f8:	370c      	adds	r7, #12
 80135fa:	46bd      	mov	sp, r7
 80135fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013600:	4770      	bx	lr

08013602 <_ZN5Eigen8internal9evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERS4_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013602:	b580      	push	{r7, lr}
 8013604:	b082      	sub	sp, #8
 8013606:	af00      	add	r7, sp, #0
 8013608:	6078      	str	r0, [r7, #4]
 801360a:	6039      	str	r1, [r7, #0]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6839      	ldr	r1, [r7, #0]
 8013610:	4618      	mov	r0, r3
 8013612:	f7fd fe47 	bl	80112a4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	4618      	mov	r0, r3
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}

08013620 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8013620:	b5b0      	push	{r4, r5, r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 801362c:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	4618      	mov	r0, r3
 8013632:	f7fe fc93 	bl	8011f5c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8013636:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8013638:	68b8      	ldr	r0, [r7, #8]
 801363a:	f7ff fc01 	bl	8012e40 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 801363e:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	fb02 f303 	mul.w	r3, r2, r3
 8013646:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8013648:	18e9      	adds	r1, r5, r3
 801364a:	2301      	movs	r3, #1
 801364c:	2201      	movs	r2, #1
 801364e:	4620      	mov	r0, r4
 8013650:	f000 f8f8 	bl	8013844 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	609a      	str	r2, [r3, #8]
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	330c      	adds	r3, #12
 801365e:	2100      	movs	r1, #0
 8013660:	4618      	mov	r0, r3
 8013662:	f7f9 fedd 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	3310      	adds	r3, #16
 801366a:	6879      	ldr	r1, [r7, #4]
 801366c:	4618      	mov	r0, r3
 801366e:	f7f9 fe63 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8013672:	68f8      	ldr	r0, [r7, #12]
 8013674:	f000 f924 	bl	80138c0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>
    }
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	4618      	mov	r0, r3
 801367c:	3710      	adds	r7, #16
 801367e:	46bd      	mov	sp, r7
 8013680:	bdb0      	pop	{r4, r5, r7, pc}

08013682 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8013682:	b580      	push	{r7, lr}
 8013684:	b082      	sub	sp, #8
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
 801368a:	6039      	str	r1, [r7, #0]
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6839      	ldr	r1, [r7, #0]
 8013690:	4618      	mov	r0, r3
 8013692:	f000 f925 	bl	80138e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	4618      	mov	r0, r3
 801369a:	3708      	adds	r7, #8
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}

080136a0 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS9_IKNSA_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b082      	sub	sp, #8
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 80136aa:	2200      	movs	r2, #0
 80136ac:	2100      	movs	r1, #0
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f000 f928 	bl	8013904 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>
 80136b4:	eef0 7a40 	vmov.f32	s15, s0
  }
 80136b8:	eeb0 0a67 	vmov.f32	s0, s15
 80136bc:	3708      	adds	r7, #8
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}

080136c2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi7ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80136c2:	b580      	push	{r7, lr}
 80136c4:	b082      	sub	sp, #8
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80136ca:	2201      	movs	r2, #1
 80136cc:	2102      	movs	r1, #2
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f7fd ff48 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f000 f928 	bl	801392a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>
  }
 80136da:	bf00      	nop
 80136dc:	3708      	adds	r7, #8
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}

080136e2 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi6ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b082      	sub	sp, #8
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 80136ea:	2200      	movs	r2, #0
 80136ec:	2102      	movs	r1, #2
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f7fe fbe1 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f000 f928 	bl	801394a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>
  }
 80136fa:	bf00      	nop
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}

08013702 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1ERKS8_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013702:	b580      	push	{r7, lr}
 8013704:	b082      	sub	sp, #8
 8013706:	af00      	add	r7, sp, #0
 8013708:	6078      	str	r0, [r7, #4]
 801370a:	6039      	str	r1, [r7, #0]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6839      	ldr	r1, [r7, #0]
 8013710:	4618      	mov	r0, r3
 8013712:	f000 f92a 	bl	801396a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>
  }
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	4618      	mov	r0, r3
 801371a:	3708      	adds	r7, #8
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}

08013720 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi1ELi3ELb0EEEEEKNS6_IKNS5_INS7_IfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEENS0_10IndexBasedESK_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013720:	b480      	push	{r7}
 8013722:	b083      	sub	sp, #12
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	4618      	mov	r0, r3
 801372c:	370c      	adds	r7, #12
 801372e:	46bd      	mov	sp, r7
 8013730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013734:	4770      	bx	lr

08013736 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013736:	b5b0      	push	{r4, r5, r7, lr}
 8013738:	b084      	sub	sp, #16
 801373a:	af00      	add	r7, sp, #0
 801373c:	60f8      	str	r0, [r7, #12]
 801373e:	60b9      	str	r1, [r7, #8]
 8013740:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	681c      	ldr	r4, [r3, #0]
 8013746:	68f8      	ldr	r0, [r7, #12]
 8013748:	f000 f923 	bl	8013992 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>
 801374c:	4602      	mov	r2, r0
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	fb03 f502 	mul.w	r5, r3, r2
 8013754:	68f8      	ldr	r0, [r7, #12]
 8013756:	f000 f927 	bl	80139a8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>
 801375a:	4602      	mov	r2, r0
 801375c:	68bb      	ldr	r3, [r7, #8]
 801375e:	fb02 f303 	mul.w	r3, r2, r3
 8013762:	442b      	add	r3, r5
 8013764:	009b      	lsls	r3, r3, #2
 8013766:	4423      	add	r3, r4
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	ee07 3a90 	vmov	s15, r3
  }
 801376e:	eeb0 0a67 	vmov.f32	s0, s15
 8013772:	3710      	adds	r7, #16
 8013774:	46bd      	mov	sp, r7
 8013776:	bdb0      	pop	{r4, r5, r7, pc}

08013778 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013778:	b480      	push	{r7}
 801377a:	b083      	sub	sp, #12
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
    }
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	4618      	mov	r0, r3
 8013784:	370c      	adds	r7, #12
 8013786:	46bd      	mov	sp, r7
 8013788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378c:	4770      	bx	lr

0801378e <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801378e:	b480      	push	{r7}
 8013790:	b083      	sub	sp, #12
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
    }
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	4618      	mov	r0, r3
 801379a:	370c      	adds	r7, #12
 801379c:	46bd      	mov	sp, r7
 801379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7ff fdb9 	bl	8013326 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE4colsEv>
 80137b4:	4603      	mov	r3, r0
    }
 80137b6:	4618      	mov	r0, r3
 80137b8:	3708      	adds	r7, #8
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}

080137be <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 80137be:	b580      	push	{r7, lr}
 80137c0:	b082      	sub	sp, #8
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	6078      	str	r0, [r7, #4]
 80137c6:	6039      	str	r1, [r7, #0]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6839      	ldr	r1, [r7, #0]
 80137cc:	4618      	mov	r0, r3
 80137ce:	f000 f8f6 	bl	80139be <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4618      	mov	r0, r3
 80137d6:	3708      	adds	r7, #8
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 80137dc:	b480      	push	{r7}
 80137de:	b083      	sub	sp, #12
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4618      	mov	r0, r3
 80137e8:	370c      	adds	r7, #12
 80137ea:	46bd      	mov	sp, r7
 80137ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f0:	4770      	bx	lr

080137f2 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEED1Ev>:
 80137f2:	b480      	push	{r7}
 80137f4:	b083      	sub	sp, #12
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4618      	mov	r0, r3
 80137fe:	370c      	adds	r7, #12
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi2EE3runISJ_EEfRKSK_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8013814:	68b9      	ldr	r1, [r7, #8]
 8013816:	68f8      	ldr	r0, [r7, #12]
 8013818:	f000 f8e0 	bl	80139dc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>
 801381c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013820:	eeb0 0a67 	vmov.f32	s0, s15
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}

0801382a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
 801382a:	b580      	push	{r7, lr}
 801382c:	b082      	sub	sp, #8
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 f8f6 	bl	8013a24 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	4618      	mov	r0, r3
 801383c:	3708      	adds	r7, #8
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
	...

08013844 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8013844:	b580      	push	{r7, lr}
 8013846:	b084      	sub	sp, #16
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	607a      	str	r2, [r7, #4]
 8013850:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8013852:	68f8      	ldr	r0, [r7, #12]
 8013854:	f7ff ffe9 	bl	801382a <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	68ba      	ldr	r2, [r7, #8]
 801385c:	601a      	str	r2, [r3, #0]
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	3304      	adds	r3, #4
 8013862:	6879      	ldr	r1, [r7, #4]
 8013864:	4618      	mov	r0, r3
 8013866:	f7f2 fcf3 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	3305      	adds	r3, #5
 801386e:	6839      	ldr	r1, [r7, #0]
 8013870:	4618      	mov	r0, r3
 8013872:	f7f2 fced 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d011      	beq.n	80138a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2b00      	cmp	r3, #0
 8013880:	db08      	blt.n	8013894 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	2b01      	cmp	r3, #1
 8013886:	d105      	bne.n	8013894 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	db02      	blt.n	8013894 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x50>
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	2b01      	cmp	r3, #1
 8013892:	d005      	beq.n	80138a0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x5c>
 8013894:	4b07      	ldr	r3, [pc, #28]	; (80138b4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x70>)
 8013896:	4a08      	ldr	r2, [pc, #32]	; (80138b8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x74>)
 8013898:	21b0      	movs	r1, #176	; 0xb0
 801389a:	4808      	ldr	r0, [pc, #32]	; (80138bc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EEC1EPKfii+0x78>)
 801389c:	f00a f8b2 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 80138a0:	2100      	movs	r1, #0
 80138a2:	68f8      	ldr	r0, [r7, #12]
 80138a4:	f000 f8c9 	bl	8013a3a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	4618      	mov	r0, r3
 80138ac:	3710      	adds	r7, #16
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd80      	pop	{r7, pc}
 80138b2:	bf00      	nop
 80138b4:	08025f90 	.word	0x08025f90
 80138b8:	080290a4 	.word	0x080290a4
 80138bc:	08026140 	.word	0x08026140

080138c0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE4initEv>:
    void init()
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b082      	sub	sp, #8
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	689b      	ldr	r3, [r3, #8]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7fe fd73 	bl	80123b8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80138d2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	615a      	str	r2, [r3, #20]
    }
 80138d8:	bf00      	nop
 80138da:	3708      	adds	r7, #8
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	6039      	str	r1, [r7, #0]
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f000 f8b0 	bl	8013a50 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6839      	ldr	r1, [r7, #0]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f000 f8b6 	bl	8013a66 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	4618      	mov	r0, r3
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013904:	b580      	push	{r7, lr}
 8013906:	b084      	sub	sp, #16
 8013908:	af00      	add	r7, sp, #0
 801390a:	60f8      	str	r0, [r7, #12]
 801390c:	60b9      	str	r1, [r7, #8]
 801390e:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	68b9      	ldr	r1, [r7, #8]
 8013916:	4618      	mov	r0, r3
 8013918:	f000 f8cd 	bl	8013ab6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 801391c:	eef0 7a40 	vmov.f32	s15, s0
 8013920:	eeb0 0a67 	vmov.f32	s0, s15
 8013924:	3710      	adds	r7, #16
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}

0801392a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi8ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801392a:	b580      	push	{r7, lr}
 801392c:	b082      	sub	sp, #8
 801392e:	af00      	add	r7, sp, #0
 8013930:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013932:	2202      	movs	r2, #2
 8013934:	2102      	movs	r1, #2
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f7fd fe14 	bl	8011564 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductINS3_IfLi3ELi1ELi0ELi3ELi1EEENS3_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f000 f8ea 	bl	8013b16 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>
  }
 8013942:	bf00      	nop
 8013944:	3708      	adds	r7, #8
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}

0801394a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi7ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801394a:	b580      	push	{r7, lr}
 801394c:	b082      	sub	sp, #8
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013952:	2201      	movs	r2, #1
 8013954:	2102      	movs	r1, #2
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	f7fe faad 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f000 f8e4 	bl	8013b2a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>
  }
 8013962:	bf00      	nop
 8013964:	3708      	adds	r7, #8
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}

0801396a <_ZN5Eigen8internal15block_evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EEC1ERKNS_5BlockIS6_Li3ELi1ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 801396a:	b580      	push	{r7, lr}
 801396c:	b082      	sub	sp, #8
 801396e:	af00      	add	r7, sp, #0
 8013970:	6078      	str	r0, [r7, #4]
 8013972:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6839      	ldr	r1, [r7, #0]
 8013978:	4618      	mov	r0, r3
 801397a:	f000 f8e6 	bl	8013b4a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	4618      	mov	r0, r3
 8013982:	f000 f90c 	bl	8013b9e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 8013986:	bf00      	nop
  }
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	4618      	mov	r0, r3
 801398c:	3708      	adds	r7, #8
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}

08013992 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8013992:	b580      	push	{r7, lr}
 8013994:	b082      	sub	sp, #8
 8013996:	af00      	add	r7, sp, #0
 8013998:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 801399a:	f7f2 fc7e 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 801399e:	4603      	mov	r3, r0
  }
 80139a0:	4618      	mov	r0, r3
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 80139b0:	f7f2 fc7b 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 80139b4:	4603      	mov	r3, r0
  }
 80139b6:	4618      	mov	r0, r3
 80139b8:	3708      	adds	r7, #8
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1ERKSG_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 80139be:	b580      	push	{r7, lr}
 80139c0:	b082      	sub	sp, #8
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
 80139c6:	6039      	str	r1, [r7, #0]
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6839      	ldr	r1, [r7, #0]
 80139cc:	4618      	mov	r0, r3
 80139ce:	f000 f8f2 	bl	8013bb6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	4618      	mov	r0, r3
 80139d6:	3708      	adds	r7, #8
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}

080139dc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi3EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 80139dc:	b580      	push	{r7, lr}
 80139de:	b084      	sub	sp, #16
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 80139e6:	6839      	ldr	r1, [r7, #0]
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f000 f8f6 	bl	8013bda <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>
 80139ee:	eef0 7a40 	vmov.f32	s15, s0
 80139f2:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 80139f6:	6839      	ldr	r1, [r7, #0]
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f000 f8ff 	bl	8013bfc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>
 80139fe:	eef0 7a40 	vmov.f32	s15, s0
 8013a02:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013a06:	f107 020c 	add.w	r2, r7, #12
 8013a0a:	f107 0308 	add.w	r3, r7, #8
 8013a0e:	4619      	mov	r1, r3
 8013a10:	6838      	ldr	r0, [r7, #0]
 8013a12:	f7f5 f808 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8013a16:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8013a1e:	3710      	adds	r7, #16
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}

08013a24 <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8013a24:	b480      	push	{r7}
 8013a26:	b083      	sub	sp, #12
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
    }
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	4618      	mov	r0, r3
 8013a30:	370c      	adds	r7, #12
 8013a32:	46bd      	mov	sp, r7
 8013a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a38:	4770      	bx	lr

08013a3a <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 8013a3a:	b480      	push	{r7}
 8013a3c:	b083      	sub	sp, #12
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	6078      	str	r0, [r7, #4]
 8013a42:	6039      	str	r1, [r7, #0]
    {}
 8013a44:	bf00      	nop
 8013a46:	370c      	adds	r7, #12
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr

08013a50 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013a50:	b480      	push	{r7}
 8013a52:	b083      	sub	sp, #12
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	370c      	adds	r7, #12
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a64:	4770      	bx	lr

08013a66 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013a66:	b590      	push	{r4, r7, lr}
 8013a68:	b083      	sub	sp, #12
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	6078      	str	r0, [r7, #4]
 8013a6e:	6039      	str	r1, [r7, #0]
 8013a70:	687c      	ldr	r4, [r7, #4]
 8013a72:	6838      	ldr	r0, [r7, #0]
 8013a74:	f000 f8e6 	bl	8013c44 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f7f1 f96d 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	1d1c      	adds	r4, r3, #4
 8013a86:	6838      	ldr	r0, [r7, #0]
 8013a88:	f000 f8e8 	bl	8013c5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	4619      	mov	r1, r3
 8013a90:	4620      	mov	r0, r4
 8013a92:	f7fa ffac 	bl	800e9ee <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEEC1ERSA_>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f103 040c 	add.w	r4, r3, #12
 8013a9c:	6838      	ldr	r0, [r7, #0]
 8013a9e:	f000 f8e8 	bl	8013c72 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	f000 f8ef 	bl	8013c8a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4618      	mov	r0, r3
 8013ab0:	370c      	adds	r7, #12
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd90      	pop	{r4, r7, pc}

08013ab6 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013ab6:	b590      	push	{r4, r7, lr}
 8013ab8:	b087      	sub	sp, #28
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	60f8      	str	r0, [r7, #12]
 8013abe:	60b9      	str	r1, [r7, #8]
 8013ac0:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f000 f8ef 	bl	8013ca8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8013aca:	4604      	mov	r4, r0
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	3304      	adds	r3, #4
 8013ad0:	687a      	ldr	r2, [r7, #4]
 8013ad2:	68b9      	ldr	r1, [r7, #8]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7fa ffb3 	bl	800ea40 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013ada:	eef0 7a40 	vmov.f32	s15, s0
 8013ade:	edc7 7a04 	vstr	s15, [r7, #16]
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	330c      	adds	r3, #12
 8013ae6:	687a      	ldr	r2, [r7, #4]
 8013ae8:	68b9      	ldr	r1, [r7, #8]
 8013aea:	4618      	mov	r0, r3
 8013aec:	f000 f8e7 	bl	8013cbe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>
 8013af0:	eef0 7a40 	vmov.f32	s15, s0
 8013af4:	edc7 7a05 	vstr	s15, [r7, #20]
 8013af8:	f107 0214 	add.w	r2, r7, #20
 8013afc:	f107 0310 	add.w	r3, r7, #16
 8013b00:	4619      	mov	r1, r3
 8013b02:	4620      	mov	r0, r4
 8013b04:	f7fa ffd0 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013b08:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8013b10:	371c      	adds	r7, #28
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd90      	pop	{r4, r7, pc}

08013b16 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductINS4_IfLi3ELi1ELi0ELi3ELi1EEENS4_IfLi1ELi3ELi1ELi1ELi3EEELi1EEEEENS0_13sub_assign_opIffEELi0EEELi9ELi9EE3runERSE_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8013b16:	b480      	push	{r7}
 8013b18:	b083      	sub	sp, #12
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
 8013b1e:	bf00      	nop
 8013b20:	370c      	adds	r7, #12
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr

08013b2a <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi8ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 8013b2a:	b580      	push	{r7, lr}
 8013b2c:	b082      	sub	sp, #8
 8013b2e:	af00      	add	r7, sp, #0
 8013b30:	6078      	str	r0, [r7, #4]
    kernel.assignCoeffByOuterInner(outer, inner);
 8013b32:	2202      	movs	r2, #2
 8013b34:	2102      	movs	r1, #2
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7fe f9bd 	bl	8011eb6 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS2_INS_7ProductIS4_S4_Li1EEEEENS0_9assign_opIffEELi0EE23assignCoeffByOuterInnerEii>
    copy_using_evaluator_DefaultTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f000 f8df 	bl	8013d00 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>
  }
 8013b42:	bf00      	nop
 8013b44:	3708      	adds	r7, #8
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEENS4_IfLi3ELi1ELi0ELi3ELi1EEEEC1ERKS8_>:
  explicit mapbase_evaluator(const XprType& map)
 8013b4a:	b590      	push	{r4, r7, lr}
 8013b4c:	b083      	sub	sp, #12
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	6078      	str	r0, [r7, #4]
 8013b52:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f000 f8f9 	bl	8013d4c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f000 f81e 	bl	8013b9e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>
 8013b62:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	601a      	str	r2, [r3, #0]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	1d1c      	adds	r4, r3, #4
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f000 f8d0 	bl	8013d14 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>
 8013b74:	4603      	mov	r3, r0
 8013b76:	4619      	mov	r1, r3
 8013b78:	4620      	mov	r0, r4
 8013b7a:	f7f2 fb69 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	1d5c      	adds	r4, r3, #5
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f000 f8d3 	bl	8013d30 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	4620      	mov	r0, r4
 8013b90:	f7f2 fb44 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	4618      	mov	r0, r3
 8013b98:	370c      	adds	r7, #12
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd90      	pop	{r4, r7, pc}

08013b9e <_ZNK5Eigen7MapBaseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8013b9e:	b480      	push	{r7}
 8013ba0:	b083      	sub	sp, #12
 8013ba2:	af00      	add	r7, sp, #0
 8013ba4:	6078      	str	r0, [r7, #4]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4618      	mov	r0, r3
 8013bac:	370c      	adds	r7, #12
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb4:	4770      	bx	lr

08013bb6 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffEC1ERKSG_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b082      	sub	sp, #8
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
 8013bbe:	6039      	str	r1, [r7, #0]
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f000 f8ce 	bl	8013d62 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6839      	ldr	r1, [r7, #0]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f000 f8d4 	bl	8013d78 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>
  }
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3708      	adds	r7, #8
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}

08013bda <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi0ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013bda:	b580      	push	{r7, lr}
 8013bdc:	b082      	sub	sp, #8
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013be4:	2200      	movs	r2, #0
 8013be6:	2100      	movs	r1, #0
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f000 f8ed 	bl	8013dc8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013bee:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8013bf6:	3708      	adds	r7, #8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi2EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b084      	sub	sp, #16
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013c06:	6839      	ldr	r1, [r7, #0]
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f000 f8f0 	bl	8013dee <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>
 8013c0e:	eef0 7a40 	vmov.f32	s15, s0
 8013c12:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8013c16:	6839      	ldr	r1, [r7, #0]
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f000 f8f9 	bl	8013e10 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>
 8013c1e:	eef0 7a40 	vmov.f32	s15, s0
 8013c22:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8013c26:	f107 020c 	add.w	r2, r7, #12
 8013c2a:	f107 0308 	add.w	r3, r7, #8
 8013c2e:	4619      	mov	r1, r3
 8013c30:	6838      	ldr	r0, [r7, #0]
 8013c32:	f7f4 fef8 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8013c36:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8013c3e:	3710      	adds	r7, #16
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}

08013c44 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	3330      	adds	r3, #48	; 0x30
 8013c50:	4618      	mov	r0, r3
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013c5c:	b480      	push	{r7}
 8013c5e:	b083      	sub	sp, #12
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	4618      	mov	r0, r3
 8013c68:	370c      	adds	r7, #12
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c70:	4770      	bx	lr

08013c72 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS5_IKNS6_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013c72:	b480      	push	{r7}
 8013c74:	b083      	sub	sp, #12
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	3318      	adds	r3, #24
 8013c7e:	4618      	mov	r0, r3
 8013c80:	370c      	adds	r7, #12
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr

08013c8a <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013c8a:	b580      	push	{r7, lr}
 8013c8c:	b082      	sub	sp, #8
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
 8013c92:	6039      	str	r1, [r7, #0]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	6839      	ldr	r1, [r7, #0]
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f000 f8ca 	bl	8013e32 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	3708      	adds	r7, #8
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}

08013ca8 <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi3ELi1ELi0ELi3ELi1EEELi1ELi1ELb0EEEEEKNS6_IKNS7_IfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	370c      	adds	r7, #12
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbc:	4770      	bx	lr

08013cbe <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013cbe:	b5b0      	push	{r4, r5, r7, lr}
 8013cc0:	b084      	sub	sp, #16
 8013cc2:	af00      	add	r7, sp, #0
 8013cc4:	60f8      	str	r0, [r7, #12]
 8013cc6:	60b9      	str	r1, [r7, #8]
 8013cc8:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	681c      	ldr	r4, [r3, #0]
 8013cce:	68f8      	ldr	r0, [r7, #12]
 8013cd0:	f000 f8be 	bl	8013e50 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	fb03 f502 	mul.w	r5, r3, r2
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	f000 f8c2 	bl	8013e66 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>
 8013ce2:	4602      	mov	r2, r0
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	fb02 f303 	mul.w	r3, r2, r3
 8013cea:	442b      	add	r3, r5
 8013cec:	009b      	lsls	r3, r3, #2
 8013cee:	4423      	add	r3, r4
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	ee07 3a90 	vmov	s15, r3
  }
 8013cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8013cfa:	3710      	adds	r7, #16
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bdb0      	pop	{r4, r5, r7, pc}

08013d00 <_ZN5Eigen8internal55copy_using_evaluator_DefaultTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEENS3_INS_7ProductIS5_S5_Li1EEEEENS0_9assign_opIffEELi0EEELi9ELi9EE3runERSC_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8013d00:	b480      	push	{r7}
 8013d02:	b083      	sub	sp, #12
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	bf00      	nop
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d12:	4770      	bx	lr

08013d14 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	3308      	adds	r3, #8
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fe fd4e 	bl	80127c2 <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11innerStrideEv>
 8013d26:	4603      	mov	r3, r0
    }
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3708      	adds	r7, #8
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	3308      	adds	r3, #8
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	f7fe fd54 	bl	80127ea <_ZNK5Eigen13TransposeImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_5DenseEE11outerStrideEv>
 8013d42:	4603      	mov	r3, r0
    }
 8013d44:	4618      	mov	r0, r3
 8013d46:	3708      	adds	r7, #8
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}

08013d4c <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEELi3ELi1ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	4618      	mov	r0, r3
 8013d58:	370c      	adds	r7, #12
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr

08013d62 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEEC1Ev>:
 8013d62:	b480      	push	{r7}
 8013d64:	b083      	sub	sp, #12
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	6078      	str	r0, [r7, #4]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	370c      	adds	r7, #12
 8013d70:	46bd      	mov	sp, r7
 8013d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d76:	4770      	bx	lr

08013d78 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4DataC1ERKSG_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 8013d78:	b590      	push	{r4, r7, lr}
 8013d7a:	b083      	sub	sp, #12
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
 8013d82:	687c      	ldr	r4, [r7, #4]
 8013d84:	6838      	ldr	r0, [r7, #0]
 8013d86:	f000 f879 	bl	8013e7c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	4619      	mov	r1, r3
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f7f0 ffe4 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	1d1c      	adds	r4, r3, #4
 8013d98:	6838      	ldr	r0, [r7, #0]
 8013d9a:	f000 f87b 	bl	8013e94 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	4619      	mov	r1, r3
 8013da2:	4620      	mov	r0, r4
 8013da4:	f000 f88d 	bl	8013ec2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f103 0414 	add.w	r4, r3, #20
 8013dae:	6838      	ldr	r0, [r7, #0]
 8013db0:	f000 f87b 	bl	8013eaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>
 8013db4:	4603      	mov	r3, r0
 8013db6:	4619      	mov	r1, r3
 8013db8:	4620      	mov	r0, r4
 8013dba:	f000 f891 	bl	8013ee0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	370c      	adds	r7, #12
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd90      	pop	{r4, r7, pc}

08013dc8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	60f8      	str	r0, [r7, #12]
 8013dd0:	60b9      	str	r1, [r7, #8]
 8013dd2:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	68ba      	ldr	r2, [r7, #8]
 8013dd8:	6879      	ldr	r1, [r7, #4]
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f000 f88f 	bl	8013efe <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>
 8013de0:	eef0 7a40 	vmov.f32	s15, s0
 8013de4:	eeb0 0a67 	vmov.f32	s0, s15
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}

08013dee <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi1ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013dee:	b580      	push	{r7, lr}
 8013df0:	b082      	sub	sp, #8
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013df8:	2201      	movs	r2, #1
 8013dfa:	2100      	movs	r1, #0
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f7ff ffe3 	bl	8013dc8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013e02:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013e06:	eeb0 0a67 	vmov.f32	s0, s15
 8013e0a:	3708      	adds	r7, #8
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENSA_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS8_ISB_EEEEEELi2ELi1EE3runERKSK_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8013e1a:	2202      	movs	r2, #2
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7ff ffd2 	bl	8013dc8 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEEE17coeffByOuterInnerEii>
 8013e24:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013e28:	eeb0 0a67 	vmov.f32	s0, s15
 8013e2c:	3708      	adds	r7, #8
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 8013e32:	b580      	push	{r7, lr}
 8013e34:	b082      	sub	sp, #8
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	6078      	str	r0, [r7, #4]
 8013e3a:	6039      	str	r1, [r7, #0]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6839      	ldr	r1, [r7, #0]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 f887 	bl	8013f54 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>
  }
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3708      	adds	r7, #8
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}

08013e50 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8013e58:	f7f2 fa27 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8013e5c:	4603      	mov	r3, r0
  }
 8013e5e:	4618      	mov	r0, r3
 8013e60:	3708      	adds	r7, #8
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}

08013e66 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEE9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8013e66:	b580      	push	{r7, lr}
 8013e68:	b082      	sub	sp, #8
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 8013e6e:	f7f2 fa14 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8013e72:	4603      	mov	r3, r0
  }
 8013e74:	4618      	mov	r0, r3
 8013e76:	3708      	adds	r7, #8
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 8013e7c:	b480      	push	{r7}
 8013e7e:	b083      	sub	sp, #12
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	330c      	adds	r3, #12
 8013e88:	4618      	mov	r0, r3
 8013e8a:	370c      	adds	r7, #12
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr

08013e94 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 8013e94:	b480      	push	{r7}
 8013e96:	b083      	sub	sp, #12
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	370c      	adds	r7, #12
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea8:	4770      	bx	lr

08013eaa <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS6_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS4_IS7_EEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 8013eaa:	b480      	push	{r7}
 8013eac:	b083      	sub	sp, #12
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	6078      	str	r0, [r7, #4]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	3308      	adds	r3, #8
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	370c      	adds	r7, #12
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec0:	4770      	bx	lr

08013ec2 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8013ec2:	b580      	push	{r7, lr}
 8013ec4:	b082      	sub	sp, #8
 8013ec6:	af00      	add	r7, sp, #0
 8013ec8:	6078      	str	r0, [r7, #4]
 8013eca:	6039      	str	r1, [r7, #0]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	6839      	ldr	r1, [r7, #0]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f000 f853 	bl	8013f7c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3708      	adds	r7, #8
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERS6_>:
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	6039      	str	r1, [r7, #0]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6839      	ldr	r1, [r7, #0]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f7fc f952 	bl	8010198 <_ZN5Eigen8internal9evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1ERKS5_>
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3708      	adds	r7, #8
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}

08013efe <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013efe:	b590      	push	{r4, r7, lr}
 8013f00:	b087      	sub	sp, #28
 8013f02:	af00      	add	r7, sp, #0
 8013f04:	60f8      	str	r0, [r7, #12]
 8013f06:	60b9      	str	r1, [r7, #8]
 8013f08:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f000 f844 	bl	8013f9a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>
 8013f12:	4604      	mov	r4, r0
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	3304      	adds	r3, #4
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	68b9      	ldr	r1, [r7, #8]
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f000 f847 	bl	8013fb0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>
 8013f22:	eef0 7a40 	vmov.f32	s15, s0
 8013f26:	edc7 7a05 	vstr	s15, [r7, #20]
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	3314      	adds	r3, #20
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	68b9      	ldr	r1, [r7, #8]
 8013f32:	4618      	mov	r0, r3
 8013f34:	f000 f851 	bl	8013fda <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>
 8013f38:	4602      	mov	r2, r0
 8013f3a:	f107 0314 	add.w	r3, r7, #20
 8013f3e:	4619      	mov	r1, r3
 8013f40:	4620      	mov	r0, r4
 8013f42:	f7fa fdb1 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8013f46:	eef0 7a40 	vmov.f32	s15, s0
  }
 8013f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8013f4e:	371c      	adds	r7, #28
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd90      	pop	{r4, r7, pc}

08013f54 <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EEC1ERKNS_5BlockIS4_Li1ELi1ELb0EEE>:
  explicit block_evaluator(const XprType& block)
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b082      	sub	sp, #8
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
 8013f5c:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6839      	ldr	r1, [r7, #0]
 8013f62:	4618      	mov	r0, r3
 8013f64:	f000 f84a 	bl	8013ffc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f000 f870 	bl	8014050 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8013f70:	bf00      	nop
  }
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4618      	mov	r0, r3
 8013f76:	3708      	adds	r7, #8
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b082      	sub	sp, #8
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6839      	ldr	r1, [r7, #0]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f000 f86c 	bl	8014068 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	4618      	mov	r0, r3
 8013f94:	3708      	adds	r7, #8
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}

08013f9a <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS7_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEKNS5_IS8_EEEENS0_10IndexBasedESH_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 8013f9a:	b480      	push	{r7}
 8013f9c:	b083      	sub	sp, #12
 8013f9e:	af00      	add	r7, sp, #0
 8013fa0:	6078      	str	r0, [r7, #4]
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	370c      	adds	r7, #12
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fae:	4770      	bx	lr

08013fb0 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	60f8      	str	r0, [r7, #12]
 8013fb8:	60b9      	str	r1, [r7, #8]
 8013fba:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	68ba      	ldr	r2, [r7, #8]
 8013fc0:	6879      	ldr	r1, [r7, #4]
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7ff f85b 	bl	801307e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	ee07 3a90 	vmov	s15, r3
  }
 8013fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8013fd4:	3710      	adds	r7, #16
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8013fda:	b580      	push	{r7, lr}
 8013fdc:	b084      	sub	sp, #16
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	60f8      	str	r0, [r7, #12]
 8013fe2:	60b9      	str	r1, [r7, #8]
 8013fe4:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	68ba      	ldr	r2, [r7, #8]
 8013fea:	6879      	ldr	r1, [r7, #4]
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7ff f846 	bl	801307e <_ZNK5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE5coeffEii>
 8013ff2:	4603      	mov	r3, r0
  }
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	3710      	adds	r7, #16
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	bd80      	pop	{r7, pc}

08013ffc <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEENS3_IfLi1ELi1ELi1ELi1ELi1EEEEC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 8013ffc:	b590      	push	{r4, r7, lr}
 8013ffe:	b083      	sub	sp, #12
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f000 f860 	bl	80140cc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	4618      	mov	r0, r3
 8014010:	f000 f81e 	bl	8014050 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>
 8014014:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	601a      	str	r2, [r3, #0]
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	1d1c      	adds	r4, r3, #4
 801401e:	683b      	ldr	r3, [r7, #0]
 8014020:	4618      	mov	r0, r3
 8014022:	f000 f837 	bl	8014094 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>
 8014026:	4603      	mov	r3, r0
 8014028:	4619      	mov	r1, r3
 801402a:	4620      	mov	r0, r4
 801402c:	f7f2 f910 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	1d5c      	adds	r4, r3, #5
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	4618      	mov	r0, r3
 8014038:	f000 f83a 	bl	80140b0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>
 801403c:	4603      	mov	r3, r0
 801403e:	4619      	mov	r1, r3
 8014040:	4620      	mov	r0, r4
 8014042:	f7f2 f8eb 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	4618      	mov	r0, r3
 801404a:	370c      	adds	r7, #12
 801404c:	46bd      	mov	sp, r7
 801404e:	bd90      	pop	{r4, r7, pc}

08014050 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEELi0EE4dataEv>:
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	4618      	mov	r0, r3
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 8014068:	b590      	push	{r4, r7, lr}
 801406a:	b083      	sub	sp, #12
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	6039      	str	r1, [r7, #0]
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	f000 f840 	bl	80140f8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>
 8014078:	687c      	ldr	r4, [r7, #4]
 801407a:	6838      	ldr	r0, [r7, #0]
 801407c:	f000 f831 	bl	80140e2 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>
 8014080:	4603      	mov	r3, r0
 8014082:	4619      	mov	r1, r3
 8014084:	4620      	mov	r0, r4
 8014086:	f000 f842 	bl	801410e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	4618      	mov	r0, r3
 801408e:	370c      	adds	r7, #12
 8014090:	46bd      	mov	sp, r7
 8014092:	bd90      	pop	{r4, r7, pc}

08014094 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	689b      	ldr	r3, [r3, #8]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7fe fecd 	bl	8012e40 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 80140a6:	4603      	mov	r3, r0
    }
 80140a8:	4618      	mov	r0, r3
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	689b      	ldr	r3, [r3, #8]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7fe f97b 	bl	80123b8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 80140c2:	4603      	mov	r3, r0
    }
 80140c4:	4618      	mov	r0, r3
 80140c6:	3708      	adds	r7, #8
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi1ELb0EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80140cc:	b480      	push	{r7}
 80140ce:	b083      	sub	sp, #12
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	4618      	mov	r0, r3
 80140d8:	370c      	adds	r7, #12
 80140da:	46bd      	mov	sp, r7
 80140dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e0:	4770      	bx	lr

080140e2 <_ZNK5Eigen9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEE16nestedExpressionEv>:
 80140e2:	b480      	push	{r7}
 80140e4:	b083      	sub	sp, #12
 80140e6:	af00      	add	r7, sp, #0
 80140e8:	6078      	str	r0, [r7, #4]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	4618      	mov	r0, r3
 80140ee:	370c      	adds	r7, #12
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr

080140f8 <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS4_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEEEC1Ev>:
 80140f8:	b480      	push	{r7}
 80140fa:	b083      	sub	sp, #12
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	4618      	mov	r0, r3
 8014104:	370c      	adds	r7, #12
 8014106:	46bd      	mov	sp, r7
 8014108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410c:	4770      	bx	lr

0801410e <_ZN5Eigen8internal9evaluatorIKNS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 801410e:	b580      	push	{r7, lr}
 8014110:	b082      	sub	sp, #8
 8014112:	af00      	add	r7, sp, #0
 8014114:	6078      	str	r0, [r7, #4]
 8014116:	6039      	str	r1, [r7, #0]
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6839      	ldr	r1, [r7, #0]
 801411c:	4618      	mov	r0, r3
 801411e:	f000 f805 	bl	801412c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4618      	mov	r0, r3
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	6839      	ldr	r1, [r7, #0]
 801413a:	4618      	mov	r0, r3
 801413c:	f000 f805 	bl	801414a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	4618      	mov	r0, r3
 8014144:	3708      	adds	r7, #8
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}

0801414a <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi0EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 801414a:	b5b0      	push	{r4, r5, r7, lr}
 801414c:	b084      	sub	sp, #16
 801414e:	af00      	add	r7, sp, #0
 8014150:	6078      	str	r0, [r7, #4]
 8014152:	6039      	str	r1, [r7, #0]
    : m_result(xpr.rows(), xpr.cols())
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	4618      	mov	r0, r3
 8014158:	f000 f834 	bl	80141c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	1d1c      	adds	r4, r3, #4
 8014160:	6838      	ldr	r0, [r7, #0]
 8014162:	f7f2 f9aa 	bl	80064ba <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4rowsEv>
 8014166:	4603      	mov	r3, r0
 8014168:	60bb      	str	r3, [r7, #8]
 801416a:	6838      	ldr	r0, [r7, #0]
 801416c:	f7f1 fa33 	bl	80055d6 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE4colsEv>
 8014170:	4603      	mov	r3, r0
 8014172:	60fb      	str	r3, [r7, #12]
 8014174:	f107 020c 	add.w	r2, r7, #12
 8014178:	f107 0308 	add.w	r3, r7, #8
 801417c:	4619      	mov	r1, r3
 801417e:	4620      	mov	r0, r4
 8014180:	f000 f82d 	bl	80141de <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>
    ::new (static_cast<Base*>(this)) Base(m_result);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	4619      	mov	r1, r3
 8014188:	2004      	movs	r0, #4
 801418a:	f7ec fed7 	bl	8000f3c <_ZnwjPv>
 801418e:	4602      	mov	r2, r0
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	3304      	adds	r3, #4
 8014194:	4619      	mov	r1, r3
 8014196:	4610      	mov	r0, r2
 8014198:	f7fd f884 	bl	80112a4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	1d1c      	adds	r4, r3, #4
 80141a0:	6838      	ldr	r0, [r7, #0]
 80141a2:	f000 f835 	bl	8014210 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>
 80141a6:	4605      	mov	r5, r0
 80141a8:	6838      	ldr	r0, [r7, #0]
 80141aa:	f000 f83d 	bl	8014228 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>
 80141ae:	4603      	mov	r3, r0
 80141b0:	461a      	mov	r2, r3
 80141b2:	4629      	mov	r1, r5
 80141b4:	4620      	mov	r0, r4
 80141b6:	f000 f843 	bl	8014240 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>
  }
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	4618      	mov	r0, r3
 80141be:	3710      	adds	r7, #16
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bdb0      	pop	{r4, r5, r7, pc}

080141c4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>:
  evaluator() {}
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f000 f854 	bl	801427c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	4618      	mov	r0, r3
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}

080141de <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1IiiEERKT_RKT0_>:
    Matrix(const T0& x, const T1& y)
 80141de:	b580      	push	{r7, lr}
 80141e0:	b084      	sub	sp, #16
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	60f8      	str	r0, [r7, #12]
 80141e6:	60b9      	str	r1, [r7, #8]
 80141e8:	607a      	str	r2, [r7, #4]
    {
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7f0 f9f1 	bl	80045d4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
      Base::_check_template_params();
 80141f2:	f7f0 f9ff 	bl	80045f4 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE22_check_template_paramsEv>
      Base::template _init2<T0,T1>(x, y);
 80141f6:	68f8      	ldr	r0, [r7, #12]
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	6819      	ldr	r1, [r3, #0]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	2300      	movs	r3, #0
 8014202:	f000 f84d 	bl	80142a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>
    }
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	4618      	mov	r0, r3
 801420a:	3710      	adds	r7, #16
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 8014210:	b480      	push	{r7}
 8014212:	b083      	sub	sp, #12
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	4618      	mov	r0, r3
 801421e:	370c      	adds	r7, #12
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr

08014228 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi0EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014228:	b480      	push	{r7}
 801422a:	b083      	sub	sp, #12
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	4618      	mov	r0, r3
 8014236:	370c      	adds	r7, #12
 8014238:	46bd      	mov	sp, r7
 801423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423e:	4770      	bx	lr

08014240 <_ZN5Eigen8internal20generic_product_implINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEENS_10DenseShapeES5_Li3EE6evalToIS3_EEvRT_RKS3_RKS4_>:
  static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void evalTo(Dst& dst, const Lhs& lhs, const Rhs& rhs)
 8014240:	b580      	push	{r7, lr}
 8014242:	b088      	sub	sp, #32
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	60b9      	str	r1, [r7, #8]
 801424a:	607a      	str	r2, [r7, #4]
    call_assignment_no_alias(dst, lhs.lazyProduct(rhs), internal::assign_op<typename Dst::Scalar,Scalar>());
 801424c:	f107 0314 	add.w	r3, r7, #20
 8014250:	687a      	ldr	r2, [r7, #4]
 8014252:	68b9      	ldr	r1, [r7, #8]
 8014254:	4618      	mov	r0, r3
 8014256:	f000 f837 	bl	80142c8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>
 801425a:	f107 031c 	add.w	r3, r7, #28
 801425e:	4618      	mov	r0, r3
 8014260:	f7f2 fa81 	bl	8006766 <_ZN5Eigen8internal9assign_opIffEC1Ev>
 8014264:	f107 021c 	add.w	r2, r7, #28
 8014268:	f107 0314 	add.w	r3, r7, #20
 801426c:	4619      	mov	r1, r3
 801426e:	68f8      	ldr	r0, [r7, #12]
 8014270:	f000 f841 	bl	80142f6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 8014274:	bf00      	nop
 8014276:	3720      	adds	r7, #32
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}

0801427c <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEEC1Ev>:
  evaluator()
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
    : m_d(0,OuterStrideAtCompileTime)
 8014284:	6878      	ldr	r0, [r7, #4]
 8014286:	f7fd fe76 	bl	8011f76 <_ZN5Eigen8internal14evaluator_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1Ev>
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2200      	movs	r2, #0
 801428e:	2100      	movs	r1, #0
 8014290:	4618      	mov	r0, r3
 8014292:	f7f2 fb28 	bl	80068e6 <_ZN5Eigen8internal30plainobjectbase_evaluator_dataIfLi0EEC1EPKfi>
  }
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	4618      	mov	r0, r3
 801429a:	3708      	adds	r7, #8
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6_init2IiiEEviiPNS_8internal9enable_ifILb1ET_E4typeE>:
    EIGEN_STRONG_INLINE void _init2(Index rows, Index cols, typename internal::enable_if<Base::SizeAtCompileTime!=2,T0>::type* = 0)
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b086      	sub	sp, #24
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	60b9      	str	r1, [r7, #8]
 80142aa:	607a      	str	r2, [r7, #4]
 80142ac:	603b      	str	r3, [r7, #0]
      const bool t0_is_integer_alike = internal::is_valid_index_type<T0>::value;
 80142ae:	2301      	movs	r3, #1
 80142b0:	75fb      	strb	r3, [r7, #23]
      const bool t1_is_integer_alike = internal::is_valid_index_type<T1>::value;
 80142b2:	2301      	movs	r3, #1
 80142b4:	75bb      	strb	r3, [r7, #22]
      resize(rows,cols);
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	68b9      	ldr	r1, [r7, #8]
 80142ba:	68f8      	ldr	r0, [r7, #12]
 80142bc:	f000 f82c 	bl	8014318 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
    }
 80142c0:	bf00      	nop
 80142c2:	3718      	adds	r7, #24
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <_ZNK5Eigen10MatrixBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE11lazyProductINS1_IfLi3ELi3ELi0ELi3ELi3EEEEEKNS_7ProductIS2_T_Li1EEERKNS0_IS7_EE>:
MatrixBase<Derived>::lazyProduct(const MatrixBase<OtherDerived> &other) const
 80142c8:	b590      	push	{r4, r7, lr}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
  return Product<Derived,OtherDerived,LazyProduct>(derived(), other.derived());
 80142d4:	68b8      	ldr	r0, [r7, #8]
 80142d6:	f7f1 f8f1 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 80142da:	4604      	mov	r4, r0
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f7f0 fe1c 	bl	8004f1a <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE7derivedEv>
 80142e2:	4603      	mov	r3, r0
 80142e4:	461a      	mov	r2, r3
 80142e6:	4621      	mov	r1, r4
 80142e8:	68f8      	ldr	r0, [r7, #12]
 80142ea:	f000 f86b 	bl	80143c4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>
}
 80142ee:	68f8      	ldr	r0, [r7, #12]
 80142f0:	3714      	adds	r7, #20
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd90      	pop	{r4, r7, pc}

080142f6 <_ZN5Eigen8internal24call_assignment_no_aliasINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
void call_assignment_no_alias(Dst& dst, const Src& src, const Func& func)
 80142f6:	b580      	push	{r7, lr}
 80142f8:	b086      	sub	sp, #24
 80142fa:	af00      	add	r7, sp, #0
 80142fc:	60f8      	str	r0, [r7, #12]
 80142fe:	60b9      	str	r1, [r7, #8]
 8014300:	607a      	str	r2, [r7, #4]
  ActualDstType actualDst(dst);
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	617b      	str	r3, [r7, #20]
  Assignment<ActualDstTypeCleaned,Src,Func>::run(actualDst, src, func);
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	68b9      	ldr	r1, [r7, #8]
 801430a:	6978      	ldr	r0, [r7, #20]
 801430c:	f000 f888 	bl	8014420 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>
}
 8014310:	bf00      	nop
 8014312:	3718      	adds	r7, #24
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>:
    EIGEN_STRONG_INLINE void resize(Index rows, Index cols)
 8014318:	b580      	push	{r7, lr}
 801431a:	b086      	sub	sp, #24
 801431c:	af00      	add	r7, sp, #0
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	60b9      	str	r1, [r7, #8]
 8014322:	607a      	str	r2, [r7, #4]
      eigen_assert(   EIGEN_IMPLIES(RowsAtCompileTime!=Dynamic,rows==RowsAtCompileTime)
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	2b01      	cmp	r3, #1
 8014328:	d108      	bne.n	801433c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2b03      	cmp	r3, #3
 801432e:	d105      	bne.n	801433c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	2b00      	cmp	r3, #0
 8014334:	db02      	blt.n	801433c <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x24>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2b00      	cmp	r3, #0
 801433a:	da06      	bge.n	801434a <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x32>
 801433c:	4b0c      	ldr	r3, [pc, #48]	; (8014370 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x58>)
 801433e:	4a0d      	ldr	r2, [pc, #52]	; (8014374 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x5c>)
 8014340:	f240 1111 	movw	r1, #273	; 0x111
 8014344:	480c      	ldr	r0, [pc, #48]	; (8014378 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii+0x60>)
 8014346:	f009 fb5d 	bl	801da04 <__assert_func>
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	617b      	str	r3, [r7, #20]
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	613b      	str	r3, [r7, #16]
  }
 8014352:	bf00      	nop
        m_storage.resize(rows*cols, rows, cols);
 8014354:	68f8      	ldr	r0, [r7, #12]
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	fb02 f103 	mul.w	r1, r2, r3
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	68ba      	ldr	r2, [r7, #8]
 8014362:	f000 f870 	bl	8014446 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>
    }
 8014366:	bf00      	nop
 8014368:	3718      	adds	r7, #24
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	080222fc 	.word	0x080222fc
 8014374:	080291a8 	.word	0x080291a8
 8014378:	08022518 	.word	0x08022518

0801437c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f000 f86b 	bl	8014460 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	4618      	mov	r0, r3
 801438e:	3708      	adds	r7, #8
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}

08014394 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>:
class dense_product_base
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f7ff ffed 	bl	801437c <_ZN5Eigen10MatrixBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	4618      	mov	r0, r3
 80143a6:	3708      	adds	r7, #8
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>:
class ProductImpl<Lhs,Rhs,Option,Dense>
 80143ac:	b580      	push	{r7, lr}
 80143ae:	b082      	sub	sp, #8
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f7ff ffed 	bl	8014394 <_ZN5Eigen8internal18dense_product_baseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1ELi3EEC1Ev>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	4618      	mov	r0, r3
 80143be:	3708      	adds	r7, #8
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_>:
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
 80143c4:	b590      	push	{r4, r7, lr}
 80143c6:	b085      	sub	sp, #20
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	60b9      	str	r1, [r7, #8]
 80143ce:	607a      	str	r2, [r7, #4]
 80143d0:	68f8      	ldr	r0, [r7, #12]
 80143d2:	f7ff ffeb 	bl	80143ac <_ZN5Eigen11ProductImplINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1ENS_5DenseEEC1Ev>
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	68ba      	ldr	r2, [r7, #8]
 80143da:	601a      	str	r2, [r3, #0]
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	605a      	str	r2, [r3, #4]
      eigen_assert(lhs.cols() == rhs.rows()
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7f0 fb45 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80143ea:	4604      	mov	r4, r0
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7f0 f989 	bl	8004706 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4rowsEv>
 80143f4:	4603      	mov	r3, r0
 80143f6:	429c      	cmp	r4, r3
 80143f8:	d005      	beq.n	8014406 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x42>
 80143fa:	4b06      	ldr	r3, [pc, #24]	; (8014414 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x50>)
 80143fc:	4a06      	ldr	r2, [pc, #24]	; (8014418 <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x54>)
 80143fe:	2160      	movs	r1, #96	; 0x60
 8014400:	4806      	ldr	r0, [pc, #24]	; (801441c <_ZN5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EEC1ERKS2_RKS3_+0x58>)
 8014402:	f009 faff 	bl	801da04 <__assert_func>
 8014406:	bf00      	nop
    }
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	4618      	mov	r0, r3
 801440c:	3714      	adds	r7, #20
 801440e:	46bd      	mov	sp, r7
 8014410:	bd90      	pop	{r4, r7, pc}
 8014412:	bf00      	nop
 8014414:	0801fb2c 	.word	0x0801fb2c
 8014418:	08029234 	.word	0x08029234
 801441c:	0801fe7c 	.word	0x0801fe7c

08014420 <_ZN5Eigen8internal10AssignmentINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEENS0_11Dense2DenseEvE3runERS3_RKS6_RKS8_>:
  static EIGEN_STRONG_INLINE void run(DstXprType &dst, const SrcXprType &src, const Functor &func)
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
    internal::check_for_aliasing(dst, src);
 801442c:	68b9      	ldr	r1, [r7, #8]
 801442e:	68f8      	ldr	r0, [r7, #12]
 8014430:	f000 f821 	bl	8014476 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>
    call_dense_assignment_loop(dst, src, func);
 8014434:	687a      	ldr	r2, [r7, #4]
 8014436:	68b9      	ldr	r1, [r7, #8]
 8014438:	68f8      	ldr	r0, [r7, #12]
 801443a:	f000 f84a 	bl	80144d2 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>
  }
 801443e:	bf00      	nop
 8014440:	3710      	adds	r7, #16
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}

08014446 <_ZN5Eigen12DenseStorageIfLi3ELi1ELi3ELi1EE6resizeEiii>:
    EIGEN_DEVICE_FUNC void resize(Index,Index,Index) {}
 8014446:	b480      	push	{r7}
 8014448:	b085      	sub	sp, #20
 801444a:	af00      	add	r7, sp, #0
 801444c:	60f8      	str	r0, [r7, #12]
 801444e:	60b9      	str	r1, [r7, #8]
 8014450:	607a      	str	r2, [r7, #4]
 8014452:	603b      	str	r3, [r7, #0]
 8014454:	bf00      	nop
 8014456:	3714      	adds	r7, #20
 8014458:	46bd      	mov	sp, r7
 801445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445e:	4770      	bx	lr

08014460 <_ZN5Eigen9DenseBaseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014460:	b480      	push	{r7}
 8014462:	b083      	sub	sp, #12
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
    }
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	4618      	mov	r0, r3
 801446c:	370c      	adds	r7, #12
 801446e:	46bd      	mov	sp, r7
 8014470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014474:	4770      	bx	lr

08014476 <_ZN5Eigen8internal18check_for_aliasingINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEEvRKT_RKT0_>:
void check_for_aliasing(const Dst &dst, const Src &src)
 8014476:	b480      	push	{r7}
 8014478:	b083      	sub	sp, #12
 801447a:	af00      	add	r7, sp, #0
 801447c:	6078      	str	r0, [r7, #4]
 801447e:	6039      	str	r1, [r7, #0]
}
 8014480:	bf00      	nop
 8014482:	370c      	adds	r7, #12
 8014484:	46bd      	mov	sp, r7
 8014486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448a:	4770      	bx	lr

0801448c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>:
struct product_evaluator<Product<Lhs, Rhs, LazyProduct>, ProductTag, DenseShape, DenseShape>
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	330c      	adds	r3, #12
 8014498:	4618      	mov	r0, r3
 801449a:	f7f2 fbbc 	bl	8006c16 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEED1Ev>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	3308      	adds	r3, #8
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7fa f9ea 	bl	800e87c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f000 f859 	bl	8014560 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	4618      	mov	r0, r3
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}

080144b8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
struct evaluator<Product<Lhs, Rhs, Options> >
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7ff ffe2 	bl	801448c <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffED1Ev>
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	4618      	mov	r0, r3
 80144cc:	3708      	adds	r7, #8
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <_ZN5Eigen8internal26call_dense_assignment_loopINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEENS0_9assign_opIffEEEEvRT_RKT0_RKT1_>:
EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void call_dense_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)
 80144d2:	b580      	push	{r7, lr}
 80144d4:	b090      	sub	sp, #64	; 0x40
 80144d6:	af02      	add	r7, sp, #8
 80144d8:	60f8      	str	r0, [r7, #12]
 80144da:	60b9      	str	r1, [r7, #8]
 80144dc:	607a      	str	r2, [r7, #4]
  SrcEvaluatorType srcEvaluator(src);
 80144de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144e2:	68b9      	ldr	r1, [r7, #8]
 80144e4:	4618      	mov	r0, r3
 80144e6:	f000 f82c 	bl	8014542 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>
  resize_if_allowed(dst, src, func);
 80144ea:	687a      	ldr	r2, [r7, #4]
 80144ec:	68b9      	ldr	r1, [r7, #8]
 80144ee:	68f8      	ldr	r0, [r7, #12]
 80144f0:	f000 f85e 	bl	80145b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>
  DstEvaluatorType dstEvaluator(dst);
 80144f4:	f107 0320 	add.w	r3, r7, #32
 80144f8:	68f9      	ldr	r1, [r7, #12]
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fc fed2 	bl	80112a4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
  Kernel kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived());
 8014500:	68f8      	ldr	r0, [r7, #12]
 8014502:	f000 f89f 	bl	8014644 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>
 8014506:	4603      	mov	r3, r0
 8014508:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801450c:	f107 0120 	add.w	r1, r7, #32
 8014510:	f107 0010 	add.w	r0, r7, #16
 8014514:	9300      	str	r3, [sp, #0]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f000 f89f 	bl	801465a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>
  dense_assignment_loop<Kernel>::run(kernel);
 801451c:	f107 0310 	add.w	r3, r7, #16
 8014520:	4618      	mov	r0, r3
 8014522:	f000 f8b4 	bl	801468e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>
  DstEvaluatorType dstEvaluator(dst);
 8014526:	f107 0320 	add.w	r3, r7, #32
 801452a:	4618      	mov	r0, r3
 801452c:	f7fa f9a6 	bl	800e87c <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEED1Ev>
  SrcEvaluatorType srcEvaluator(src);
 8014530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014534:	4618      	mov	r0, r3
 8014536:	f7ff ffbf 	bl	80144b8 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>
}
 801453a:	bf00      	nop
 801453c:	3738      	adds	r7, #56	; 0x38
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}

08014542 <_ZN5Eigen8internal9evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1ERKS6_>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014542:	b580      	push	{r7, lr}
 8014544:	b082      	sub	sp, #8
 8014546:	af00      	add	r7, sp, #0
 8014548:	6078      	str	r0, [r7, #4]
 801454a:	6039      	str	r1, [r7, #0]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6839      	ldr	r1, [r7, #0]
 8014550:	4618      	mov	r0, r3
 8014552:	f000 f8a7 	bl	80146a4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	4618      	mov	r0, r3
 801455a:	3708      	adds	r7, #8
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014560:	b480      	push	{r7}
 8014562:	b083      	sub	sp, #12
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	4618      	mov	r0, r3
 801456c:	370c      	adds	r7, #12
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr

08014576 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
 8014576:	b580      	push	{r7, lr}
 8014578:	b082      	sub	sp, #8
 801457a:	af00      	add	r7, sp, #0
 801457c:	6078      	str	r0, [r7, #4]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	4618      	mov	r0, r3
 8014584:	f7f0 fa81 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 8014588:	4603      	mov	r3, r0
 801458a:	4618      	mov	r0, r3
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}

08014592 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }
 8014592:	b580      	push	{r7, lr}
 8014594:	b082      	sub	sp, #8
 8014596:	af00      	add	r7, sp, #0
 8014598:	6078      	str	r0, [r7, #4]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	685b      	ldr	r3, [r3, #4]
 801459e:	4618      	mov	r0, r3
 80145a0:	f7f0 f8a6 	bl	80046f0 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE4colsEv>
 80145a4:	4603      	mov	r3, r0
 80145a6:	4618      	mov	r0, r3
 80145a8:	3708      	adds	r7, #8
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
	...

080145b0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE>:
void resize_if_allowed(DstXprType &dst, const SrcXprType& src, const internal::assign_op<T1,T2> &/*func*/)
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b086      	sub	sp, #24
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	607a      	str	r2, [r7, #4]
  Index dstRows = src.rows();
 80145bc:	68b8      	ldr	r0, [r7, #8]
 80145be:	f7ff ffda 	bl	8014576 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4rowsEv>
 80145c2:	6178      	str	r0, [r7, #20]
  Index dstCols = src.cols();
 80145c4:	68b8      	ldr	r0, [r7, #8]
 80145c6:	f7ff ffe4 	bl	8014592 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE4colsEv>
 80145ca:	6138      	str	r0, [r7, #16]
  if(((dst.rows()!=dstRows) || (dst.cols()!=dstCols)))
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7f0 fa5b 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 80145d4:	4602      	mov	r2, r0
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	4293      	cmp	r3, r2
 80145da:	d107      	bne.n	80145ec <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x3c>
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	4618      	mov	r0, r3
 80145e0:	f7f0 fa48 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80145e4:	4602      	mov	r2, r0
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	4293      	cmp	r3, r2
 80145ea:	d001      	beq.n	80145f0 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x40>
 80145ec:	2301      	movs	r3, #1
 80145ee:	e000      	b.n	80145f2 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x42>
 80145f0:	2300      	movs	r3, #0
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d005      	beq.n	8014602 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x52>
    dst.resize(dstRows, dstCols);
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	693a      	ldr	r2, [r7, #16]
 80145fa:	6979      	ldr	r1, [r7, #20]
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7ff fe8b 	bl	8014318 <_ZN5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE6resizeEii>
  eigen_assert(dst.rows() == dstRows && dst.cols() == dstCols);
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	4618      	mov	r0, r3
 8014606:	f7f0 fa40 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801460a:	4602      	mov	r2, r0
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	4293      	cmp	r3, r2
 8014610:	d107      	bne.n	8014622 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x72>
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	4618      	mov	r0, r3
 8014616:	f7f0 fa2d 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 801461a:	4602      	mov	r2, r0
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	4293      	cmp	r3, r2
 8014620:	d006      	beq.n	8014630 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x80>
 8014622:	4b05      	ldr	r3, [pc, #20]	; (8014638 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x88>)
 8014624:	4a05      	ldr	r2, [pc, #20]	; (801463c <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x8c>)
 8014626:	f240 21fd 	movw	r1, #765	; 0x2fd
 801462a:	4805      	ldr	r0, [pc, #20]	; (8014640 <_ZN5Eigen8internal17resize_if_allowedINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS_7ProductIS3_NS2_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEffEEvRT_RKT0_RKNS0_9assign_opIT1_T2_EE+0x90>)
 801462c:	f009 f9ea 	bl	801da04 <__assert_func>
}
 8014630:	bf00      	nop
 8014632:	3718      	adds	r7, #24
 8014634:	46bd      	mov	sp, r7
 8014636:	bd80      	pop	{r7, pc}
 8014638:	08021ee4 	.word	0x08021ee4
 801463c:	0802935c 	.word	0x0802935c
 8014640:	08021ff8 	.word	0x08021ff8

08014644 <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE18const_cast_derivedEv>:
  inline Derived& const_cast_derived() const
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
  { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	4618      	mov	r0, r3
 8014650:	370c      	adds	r7, #12
 8014652:	46bd      	mov	sp, r7
 8014654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014658:	4770      	bx	lr

0801465a <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEC1ERS5_RKS9_RKSB_RS4_>:
  generic_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr)
 801465a:	b480      	push	{r7}
 801465c:	b085      	sub	sp, #20
 801465e:	af00      	add	r7, sp, #0
 8014660:	60f8      	str	r0, [r7, #12]
 8014662:	60b9      	str	r1, [r7, #8]
 8014664:	607a      	str	r2, [r7, #4]
 8014666:	603b      	str	r3, [r7, #0]
    : m_dst(dst), m_src(src), m_functor(func), m_dstExpr(dstExpr)
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	68ba      	ldr	r2, [r7, #8]
 801466c:	601a      	str	r2, [r3, #0]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	687a      	ldr	r2, [r7, #4]
 8014672:	605a      	str	r2, [r3, #4]
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	683a      	ldr	r2, [r7, #0]
 8014678:	609a      	str	r2, [r3, #8]
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	69ba      	ldr	r2, [r7, #24]
 801467e:	60da      	str	r2, [r3, #12]
  }
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	4618      	mov	r0, r3
 8014684:	3714      	adds	r7, #20
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr

0801468e <_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi2EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel &kernel)
 801468e:	b580      	push	{r7, lr}
 8014690:	b082      	sub	sp, #8
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, 0, DstXprType::SizeAtCompileTime>::run(kernel);
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f000 f839 	bl	801470e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>
  }
 801469c:	bf00      	nop
 801469e:	3708      	adds	r7, #8
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}

080146a4 <_ZN5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffEC1ERKS6_>:
  explicit product_evaluator(const XprType& xpr)
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
      m_innerDim(xpr.lhs().cols())
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f000 f854 	bl	801475c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>
    : m_lhs(xpr.lhs()),
 80146b4:	6838      	ldr	r0, [r7, #0]
 80146b6:	f000 f839 	bl	801472c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 80146ba:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	601a      	str	r2, [r3, #0]
      m_rhs(xpr.rhs()),
 80146c0:	6838      	ldr	r0, [r7, #0]
 80146c2:	f000 f83f 	bl	8014744 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>
 80146c6:	4602      	mov	r2, r0
      m_innerDim(xpr.lhs().cols())
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	605a      	str	r2, [r3, #4]
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f103 0208 	add.w	r2, r3, #8
      m_lhsImpl(m_lhs),     // FIXME the creation of the evaluator objects should result in a no-op, but check that!
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	681b      	ldr	r3, [r3, #0]
      m_innerDim(xpr.lhs().cols())
 80146d6:	4619      	mov	r1, r3
 80146d8:	4610      	mov	r0, r2
 80146da:	f7fc fde3 	bl	80112a4 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEC1ERKS3_>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f103 020c 	add.w	r2, r3, #12
      m_rhsImpl(m_rhs),     //       Moreover, they are only useful for the packet path, so we could completely disable them when not needed,
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	685b      	ldr	r3, [r3, #4]
      m_innerDim(xpr.lhs().cols())
 80146e8:	4619      	mov	r1, r3
 80146ea:	4610      	mov	r0, r2
 80146ec:	f7f2 fca2 	bl	8007034 <_ZN5Eigen8internal9evaluatorINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEEC1ERKS3_>
 80146f0:	6838      	ldr	r0, [r7, #0]
 80146f2:	f000 f81b 	bl	801472c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>
 80146f6:	4603      	mov	r3, r0
 80146f8:	4618      	mov	r0, r3
 80146fa:	f7f0 f9bb 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 80146fe:	4602      	mov	r2, r0
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	611a      	str	r2, [r3, #16]
  }
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	4618      	mov	r0, r3
 8014708:	3708      	adds	r7, #8
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}

0801470e <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi0ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 801470e:	b580      	push	{r7, lr}
 8014710:	b082      	sub	sp, #8
 8014712:	af00      	add	r7, sp, #0
 8014714:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014716:	2100      	movs	r1, #0
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f000 f82a 	bl	8014772 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f000 f84a 	bl	80147b8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>
  }
 8014724:	bf00      	nop
 8014726:	3708      	adds	r7, #8
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}

0801472c <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3lhsEv>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4618      	mov	r0, r3
 801473a:	370c      	adds	r7, #12
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <_ZNK5Eigen7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS1_IfLi3ELi3ELi0ELi3ELi3EEELi1EE3rhsEv>:
    const RhsNestedCleaned& rhs() const { return m_rhs; }
 8014744:	b480      	push	{r7}
 8014746:	b083      	sub	sp, #12
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	685b      	ldr	r3, [r3, #4]
 8014750:	4618      	mov	r0, r3
 8014752:	370c      	adds	r7, #12
 8014754:	46bd      	mov	sp, r7
 8014756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475a:	4770      	bx	lr

0801475c <_ZN5Eigen8internal14evaluator_baseINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	4618      	mov	r0, r3
 8014768:	370c      	adds	r7, #12
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(Index index)
 8014772:	b5b0      	push	{r4, r5, r7, lr}
 8014774:	b084      	sub	sp, #16
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	6039      	str	r1, [r7, #0]
    m_functor.assignCoeff(m_dst.coeffRef(index), m_src.coeff(index));
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	689c      	ldr	r4, [r3, #8]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	6839      	ldr	r1, [r7, #0]
 8014786:	4618      	mov	r0, r3
 8014788:	f000 f825 	bl	80147d6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>
 801478c:	4605      	mov	r5, r0
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	6839      	ldr	r1, [r7, #0]
 8014794:	4618      	mov	r0, r3
 8014796:	f000 f82e 	bl	80147f6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>
 801479a:	eef0 7a40 	vmov.f32	s15, s0
 801479e:	edc7 7a03 	vstr	s15, [r7, #12]
 80147a2:	f107 030c 	add.w	r3, r7, #12
 80147a6:	461a      	mov	r2, r3
 80147a8:	4629      	mov	r1, r5
 80147aa:	4620      	mov	r0, r4
 80147ac:	f7f3 fb4a 	bl	8007e44 <_ZNK5Eigen8internal9assign_opIffE11assignCoeffERfRKf>
  }
 80147b0:	bf00      	nop
 80147b2:	3710      	adds	r7, #16
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bdb0      	pop	{r4, r5, r7, pc}

080147b8 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi1ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
 80147be:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 80147c0:	2101      	movs	r1, #1
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f7ff ffd5 	bl	8014772 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 f84d 	bl	8014868 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>
  }
 80147ce:	bf00      	nop
 80147d0:	3708      	adds	r7, #8
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}

080147d6 <_ZN5Eigen8internal9evaluatorINS_15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEEE8coeffRefEi>:
  Scalar& coeffRef(Index index)
 80147d6:	b480      	push	{r7}
 80147d8:	b083      	sub	sp, #12
 80147da:	af00      	add	r7, sp, #0
 80147dc:	6078      	str	r0, [r7, #4]
 80147de:	6039      	str	r1, [r7, #0]
    return const_cast<Scalar*>(m_d.data)[index];
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	681a      	ldr	r2, [r3, #0]
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	009b      	lsls	r3, r3, #2
 80147e8:	4413      	add	r3, r2
  }
 80147ea:	4618      	mov	r0, r3
 80147ec:	370c      	adds	r7, #12
 80147ee:	46bd      	mov	sp, r7
 80147f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f4:	4770      	bx	lr

080147f6 <_ZNK5Eigen8internal17product_evaluatorINS_7ProductINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEENS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEELi3ENS_10DenseShapeES7_ffE5coeffEi>:
  const CoeffReturnType coeff(Index index) const
 80147f6:	b580      	push	{r7, lr}
 80147f8:	b0a4      	sub	sp, #144	; 0x90
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	6078      	str	r0, [r7, #4]
 80147fe:	6039      	str	r1, [r7, #0]
    const Index row = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? 0 : index;
 8014800:	2300      	movs	r3, #0
 8014802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    const Index col = (RowsAtCompileTime == 1 || MaxRowsAtCompileTime==1) ? index : 0;
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (m_lhs.row(row).transpose().cwiseProduct( m_rhs.col(col) )).sum();
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6819      	ldr	r1, [r3, #0]
 8014810:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014814:	2200      	movs	r2, #0
 8014816:	4618      	mov	r0, r3
 8014818:	f000 f835 	bl	8014886 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>
 801481c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014820:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014824:	4611      	mov	r1, r2
 8014826:	4618      	mov	r0, r3
 8014828:	f000 f840 	bl	80148ac <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6859      	ldr	r1, [r3, #4]
 8014830:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014834:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014838:	4618      	mov	r0, r3
 801483a:	f7f7 f94a 	bl	800bad2 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEEE3colEi>
 801483e:	f107 030c 	add.w	r3, r7, #12
 8014842:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8014846:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801484a:	4618      	mov	r0, r3
 801484c:	f000 f83f 	bl	80148ce <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>
 8014850:	f107 030c 	add.w	r3, r7, #12
 8014854:	4618      	mov	r0, r3
 8014856:	f000 f868 	bl	801492a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>
 801485a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801485e:	eeb0 0a67 	vmov.f32	s0, s15
 8014862:	3790      	adds	r7, #144	; 0x90
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}

08014868 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi2ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel& kernel)
 8014868:	b580      	push	{r7, lr}
 801486a:	b082      	sub	sp, #8
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
    kernel.assignCoeff(Index);
 8014870:	2102      	movs	r1, #2
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7ff ff7d 	bl	8014772 <_ZN5Eigen8internal31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS2_INS_7ProductIS4_NS3_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EE11assignCoeffEi>
    copy_using_evaluator_LinearTraversal_CompleteUnrolling<Kernel, Index+1, Stop>::run(kernel);
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f000 f871 	bl	8014960 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>
  }
 801487e:	bf00      	nop
 8014880:	3708      	adds	r7, #8
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}

08014886 <_ZNK5Eigen9DenseBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE3rowEi>:
ConstRowXpr row(Index i) const
 8014886:	b580      	push	{r7, lr}
 8014888:	b084      	sub	sp, #16
 801488a:	af00      	add	r7, sp, #0
 801488c:	60f8      	str	r0, [r7, #12]
 801488e:	60b9      	str	r1, [r7, #8]
 8014890:	607a      	str	r2, [r7, #4]
  return ConstRowXpr(derived(), i);
 8014892:	68b8      	ldr	r0, [r7, #8]
 8014894:	f7f0 fe12 	bl	80054bc <_ZNK5Eigen9EigenBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE7derivedEv>
 8014898:	4603      	mov	r3, r0
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	4619      	mov	r1, r3
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f000 f868 	bl	8014974 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>
}
 80148a4:	68f8      	ldr	r0, [r7, #12]
 80148a6:	3710      	adds	r7, #16
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}

080148ac <_ZNK5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE9transposeEv>:
DenseBase<Derived>::transpose() const
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	6039      	str	r1, [r7, #0]
  return ConstTransposeReturnType(derived());
 80148b6:	6838      	ldr	r0, [r7, #0]
 80148b8:	f000 f886 	bl	80149c8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>
 80148bc:	4603      	mov	r3, r0
 80148be:	4619      	mov	r1, r3
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f000 f8a4 	bl	8014a0e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>
}
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	3708      	adds	r7, #8
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}

080148ce <_ZNK5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE12cwiseProductINS2_IKNS3_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEKNS_13CwiseBinaryOpINS_8internal17scalar_product_opIfNSF_6traitsIT_E6ScalarEEEKS8_KSI_EERKNS0_ISI_EE>:
cwiseProduct(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other) const
 80148ce:	b5b0      	push	{r4, r5, r7, lr}
 80148d0:	b086      	sub	sp, #24
 80148d2:	af00      	add	r7, sp, #0
 80148d4:	60f8      	str	r0, [r7, #12]
 80148d6:	60b9      	str	r1, [r7, #8]
 80148d8:	607a      	str	r2, [r7, #4]
  return EIGEN_CWISE_BINARY_RETURN_TYPE(Derived,OtherDerived,product)(derived(), other.derived());
 80148da:	68b8      	ldr	r0, [r7, #8]
 80148dc:	f000 f8ae 	bl	8014a3c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>
 80148e0:	4604      	mov	r4, r0
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7f7 fec4 	bl	800c670 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7derivedEv>
 80148e8:	4605      	mov	r5, r0
 80148ea:	f107 0314 	add.w	r3, r7, #20
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7f0 f9aa 	bl	8004c48 <_ZN5Eigen8internal17scalar_product_opIffEC1Ev>
 80148f4:	f107 0314 	add.w	r3, r7, #20
 80148f8:	462a      	mov	r2, r5
 80148fa:	4621      	mov	r1, r4
 80148fc:	68f8      	ldr	r0, [r7, #12]
 80148fe:	f000 f8db 	bl	8014ab8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>
}
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	3718      	adds	r7, #24
 8014906:	46bd      	mov	sp, r7
 8014908:	bdb0      	pop	{r4, r5, r7, pc}

0801490a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>:
  inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
 801490a:	b580      	push	{r7, lr}
 801490c:	b082      	sub	sp, #8
 801490e:	af00      	add	r7, sp, #0
 8014910:	6078      	str	r0, [r7, #4]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f000 f92e 	bl	8014b74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014918:	4603      	mov	r3, r0
 801491a:	4618      	mov	r0, r3
 801491c:	f000 f935 	bl	8014b8a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>
 8014920:	4603      	mov	r3, r0
 8014922:	4618      	mov	r0, r3
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE3sumEv>:
DenseBase<Derived>::sum() const
 801492a:	b590      	push	{r4, r7, lr}
 801492c:	b085      	sub	sp, #20
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
  return derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>());
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f000 f91e 	bl	8014b74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014938:	4604      	mov	r4, r0
 801493a:	f107 030c 	add.w	r3, r7, #12
 801493e:	4618      	mov	r0, r3
 8014940:	f7f0 fc79 	bl	8005236 <_ZN5Eigen8internal13scalar_sum_opIffEC1Ev>
 8014944:	f107 030c 	add.w	r3, r7, #12
 8014948:	4619      	mov	r1, r3
 801494a:	4620      	mov	r0, r4
 801494c:	f000 f9c4 	bl	8014cd8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>
 8014950:	eef0 7a40 	vmov.f32	s15, s0
 8014954:	bf00      	nop
}
 8014956:	eeb0 0a67 	vmov.f32	s0, s15
 801495a:	3714      	adds	r7, #20
 801495c:	46bd      	mov	sp, r7
 801495e:	bd90      	pop	{r4, r7, pc}

08014960 <_ZN5Eigen8internal54copy_using_evaluator_LinearTraversal_CompleteUnrollingINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEEENS3_INS_7ProductIS5_NS4_IfLi3ELi3ELi0ELi3ELi3EEELi1EEEEENS0_9assign_opIffEELi0EEELi3ELi3EE3runERSD_>:
  EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE void run(Kernel&) { }
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	bf00      	nop
 801496a:	370c      	adds	r7, #12
 801496c:	46bd      	mov	sp, r7
 801496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014972:	4770      	bx	lr

08014974 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i>:
    Block(XprType& xpr, Index i) : Impl(xpr,i)
 8014974:	b580      	push	{r7, lr}
 8014976:	b084      	sub	sp, #16
 8014978:	af00      	add	r7, sp, #0
 801497a:	60f8      	str	r0, [r7, #12]
 801497c:	60b9      	str	r1, [r7, #8]
 801497e:	607a      	str	r2, [r7, #4]
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	687a      	ldr	r2, [r7, #4]
 8014984:	68b9      	ldr	r1, [r7, #8]
 8014986:	4618      	mov	r0, r3
 8014988:	f000 f9ec 	bl	8014d64 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>
      eigen_assert( (i>=0) && (
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b00      	cmp	r3, #0
 8014990:	db07      	blt.n	80149a2 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x2e>
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	4618      	mov	r0, r3
 8014996:	f7f0 f878 	bl	8004a8a <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4rowsEv>
 801499a:	4602      	mov	r2, r0
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	4293      	cmp	r3, r2
 80149a0:	db05      	blt.n	80149ae <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x3a>
 80149a2:	4b06      	ldr	r3, [pc, #24]	; (80149bc <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x48>)
 80149a4:	4a06      	ldr	r2, [pc, #24]	; (80149c0 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x4c>)
 80149a6:	2178      	movs	r1, #120	; 0x78
 80149a8:	4806      	ldr	r0, [pc, #24]	; (80149c4 <_ZN5Eigen5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEC1ERS3_i+0x50>)
 80149aa:	f009 f82b 	bl	801da04 <__assert_func>
 80149ae:	bf00      	nop
    }
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	4618      	mov	r0, r3
 80149b4:	3710      	adds	r7, #16
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	080243f0 	.word	0x080243f0
 80149c0:	08029470 	.word	0x08029470
 80149c4:	08024574 	.word	0x08024574

080149c8 <_ZNK5Eigen9EigenBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 80149c8:	b480      	push	{r7}
 80149ca:	b083      	sub	sp, #12
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	4618      	mov	r0, r3
 80149d4:	370c      	adds	r7, #12
 80149d6:	46bd      	mov	sp, r7
 80149d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149dc:	4770      	bx	lr

080149de <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
 80149de:	b580      	push	{r7, lr}
 80149e0:	b082      	sub	sp, #8
 80149e2:	af00      	add	r7, sp, #0
 80149e4:	6078      	str	r0, [r7, #4]
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 f9cd 	bl	8014d86 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	4618      	mov	r0, r3
 80149f0:	3708      	adds	r7, #8
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}

080149f6 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>:
    EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TransposeImpl)
 80149f6:	b580      	push	{r7, lr}
 80149f8:	b082      	sub	sp, #8
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	6078      	str	r0, [r7, #4]
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f7ff ffed 	bl	80149de <_ZN5Eigen10MatrixBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	4618      	mov	r0, r3
 8014a08:	3708      	adds	r7, #8
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}

08014a0e <_ZN5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS6_>:
    explicit EIGEN_STRONG_INLINE Transpose(MatrixType& matrix) : m_matrix(matrix) {}
 8014a0e:	b5b0      	push	{r4, r5, r7, lr}
 8014a10:	b082      	sub	sp, #8
 8014a12:	af00      	add	r7, sp, #0
 8014a14:	6078      	str	r0, [r7, #4]
 8014a16:	6039      	str	r1, [r7, #0]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f7ff ffec 	bl	80149f6 <_ZN5Eigen13TransposeImplIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEENS_5DenseEEC1Ev>
 8014a1e:	687a      	ldr	r2, [r7, #4]
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	4614      	mov	r4, r2
 8014a24:	461d      	mov	r5, r3
 8014a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014a2e:	e884 0003 	stmia.w	r4, {r0, r1}
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	4618      	mov	r0, r3
 8014a36:	3708      	adds	r7, #8
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bdb0      	pop	{r4, r5, r7, pc}

08014a3c <_ZNK5Eigen9EigenBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEE7derivedEv>:
 8014a3c:	b480      	push	{r7}
 8014a3e:	b083      	sub	sp, #12
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	4618      	mov	r0, r3
 8014a48:	370c      	adds	r7, #12
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a50:	4770      	bx	lr

08014a52 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
 8014a52:	b580      	push	{r7, lr}
 8014a54:	b082      	sub	sp, #8
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	6078      	str	r0, [r7, #4]
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f000 f99e 	bl	8014d9c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	4618      	mov	r0, r3
 8014a64:	3708      	adds	r7, #8
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>:
class CwiseBinaryOpImpl
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b082      	sub	sp, #8
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f7ff ffed 	bl	8014a52 <_ZN5Eigen10MatrixBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3708      	adds	r7, #8
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}

08014a82 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT { return m_matrix.cols(); }
 8014a82:	b580      	push	{r7, lr}
 8014a84:	b082      	sub	sp, #8
 8014a86:	af00      	add	r7, sp, #0
 8014a88:	6078      	str	r0, [r7, #4]
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f000 f990 	bl	8014db2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>
 8014a92:	4603      	mov	r3, r0
 8014a94:	4618      	mov	r0, r3
 8014a96:	3708      	adds	r7, #8
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}

08014a9c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT { return m_matrix.rows(); }
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f000 f98e 	bl	8014dc8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>
 8014aac:	4603      	mov	r3, r0
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3708      	adds	r7, #8
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
	...

08014ab8 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_>:
    CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 8014ab8:	b5b0      	push	{r4, r5, r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
 8014ac4:	603b      	str	r3, [r7, #0]
      : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 8014ac6:	68f8      	ldr	r0, [r7, #12]
 8014ac8:	f7ff ffcf 	bl	8014a6a <_ZN5Eigen17CwiseBinaryOpImplINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS_5DenseEEC1Ev>
 8014acc:	68fa      	ldr	r2, [r7, #12]
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	4614      	mov	r4, r2
 8014ad2:	461d      	mov	r5, r3
 8014ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ad8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014adc:	e884 0003 	stmia.w	r4, {r0, r1}
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f103 0218 	add.w	r2, r3, #24
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	4614      	mov	r4, r2
 8014aea:	461d      	mov	r5, r3
 8014aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014af0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014af4:	e884 0003 	stmia.w	r4, {r0, r1}
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	3330      	adds	r3, #48	; 0x30
 8014afc:	6839      	ldr	r1, [r7, #0]
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7f0 f92c 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
      eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 8014b04:	68b8      	ldr	r0, [r7, #8]
 8014b06:	f7ff ffbc 	bl	8014a82 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7f7 fdd1 	bl	800c6b6 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4rowsEv>
 8014b14:	4603      	mov	r3, r0
 8014b16:	429c      	cmp	r4, r3
 8014b18:	d10a      	bne.n	8014b30 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x78>
 8014b1a:	68b8      	ldr	r0, [r7, #8]
 8014b1c:	f7ff ffbe 	bl	8014a9c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8014b20:	4604      	mov	r4, r0
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f7 fdd1 	bl	800c6cc <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEELi0EE4colsEv>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	429c      	cmp	r4, r3
 8014b2e:	d005      	beq.n	8014b3c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x84>
 8014b30:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x90>)
 8014b32:	4a06      	ldr	r2, [pc, #24]	; (8014b4c <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x94>)
 8014b34:	2174      	movs	r1, #116	; 0x74
 8014b36:	4806      	ldr	r0, [pc, #24]	; (8014b50 <_ZN5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERSC_RSG_RKS3_+0x98>)
 8014b38:	f008 ff64 	bl	801da04 <__assert_func>
    }
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3710      	adds	r7, #16
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bdb0      	pop	{r4, r5, r7, pc}
 8014b46:	bf00      	nop
 8014b48:	0801f86c 	.word	0x0801f86c
 8014b4c:	0802954c 	.word	0x0802954c
 8014b50:	0801fad0 	.word	0x0801fad0

08014b54 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>:
  inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f000 f809 	bl	8014b74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014b62:	4603      	mov	r3, r0
 8014b64:	4618      	mov	r0, r3
 8014b66:	f000 f93a 	bl	8014dde <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3708      	adds	r7, #8
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd80      	pop	{r7, pc}

08014b74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>:
  const Derived& derived() const { return *static_cast<const Derived*>(this); }
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	4618      	mov	r0, r3
 8014b80:	370c      	adds	r7, #12
 8014b82:	46bd      	mov	sp, r7
 8014b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b88:	4770      	bx	lr

08014b8a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4rowsEv>:
    Index rows() const EIGEN_NOEXCEPT {
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b082      	sub	sp, #8
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::RowsAtCompileTime==Dynamic ? m_rhs.rows() : m_lhs.rows();
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7ff ff74 	bl	8014a82 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4rowsEv>
 8014b9a:	4603      	mov	r3, r0
    }
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	3708      	adds	r7, #8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}

08014ba4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>:
struct mapbase_evaluator : evaluator_base<Derived>
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f000 f948 	bl	8014e42 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	3708      	adds	r7, #8
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}

08014bbc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>:
struct block_evaluator<ArgType, BlockRows, BlockCols, InnerPanel, /* HasDirectAccess */ true>
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7ff ffec 	bl	8014ba4 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_ED1Ev>
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3708      	adds	r7, #8
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}

08014bd6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<Block<ArgType, BlockRows, BlockCols, InnerPanel> >
 8014bd6:	b580      	push	{r7, lr}
 8014bd8:	b082      	sub	sp, #8
 8014bda:	af00      	add	r7, sp, #0
 8014bdc:	6078      	str	r0, [r7, #4]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7ff ffeb 	bl	8014bbc <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EED1Ev>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	4618      	mov	r0, r3
 8014bea:	3708      	adds	r7, #8
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
struct evaluator<const T>
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7ff ffeb 	bl	8014bd6 <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	4618      	mov	r0, r3
 8014c04:	3708      	adds	r7, #8
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}

08014c0a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>:
struct unary_evaluator<Transpose<ArgType>, IndexBased>
 8014c0a:	b580      	push	{r7, lr}
 8014c0c:	b082      	sub	sp, #8
 8014c0e:	af00      	add	r7, sp, #0
 8014c10:	6078      	str	r0, [r7, #4]
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7ff ffeb 	bl	8014bf0 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>
 8014c1a:	6878      	ldr	r0, [r7, #4]
 8014c1c:	f000 f906 	bl	8014e2c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	4618      	mov	r0, r3
 8014c24:	3708      	adds	r7, #8
 8014c26:	46bd      	mov	sp, r7
 8014c28:	bd80      	pop	{r7, pc}

08014c2a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator : public unary_evaluator<T>
 8014c2a:	b580      	push	{r7, lr}
 8014c2c:	b082      	sub	sp, #8
 8014c2e:	af00      	add	r7, sp, #0
 8014c30:	6078      	str	r0, [r7, #4]
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	4618      	mov	r0, r3
 8014c36:	f7ff ffe8 	bl	8014c0a <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfED1Ev>
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3708      	adds	r7, #8
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}

08014c44 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
struct evaluator<const T>
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b082      	sub	sp, #8
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7ff ffeb 	bl	8014c2a <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	4618      	mov	r0, r3
 8014c58:	3708      	adds	r7, #8
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}

08014c5e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>:
  struct Data
 8014c5e:	b580      	push	{r7, lr}
 8014c60:	b082      	sub	sp, #8
 8014c62:	af00      	add	r7, sp, #0
 8014c64:	6078      	str	r0, [r7, #4]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	330c      	adds	r3, #12
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7f7 fdd6 	bl	800c81c <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEED1Ev>
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	3304      	adds	r3, #4
 8014c74:	4618      	mov	r0, r3
 8014c76:	f7ff ffe5 	bl	8014c44 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3708      	adds	r7, #8
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>:
struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b082      	sub	sp, #8
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7ff ffe5 	bl	8014c5e <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataD1Ev>
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f000 f8be 	bl	8014e16 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3708      	adds	r7, #8
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7ff ffe8 	bl	8014c84 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffED1Ev>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	3708      	adds	r7, #8
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}

08014cbe <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
class redux_evaluator : public internal::evaluator<_XprType>
 8014cbe:	b580      	push	{r7, lr}
 8014cc0:	b082      	sub	sp, #8
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	6078      	str	r0, [r7, #4]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7ff ffeb 	bl	8014ca4 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	3708      	adds	r7, #8
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}

08014cd8 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_>:
DenseBase<Derived>::redux(const Func& func) const
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	ed2d 8b02 	vpush	{d8}
 8014cde:	b088      	sub	sp, #32
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	6039      	str	r1, [r7, #0]
  eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f7ff fe0f 	bl	801490a <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4rowsEv>
 8014cec:	4603      	mov	r3, r0
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	dd05      	ble.n	8014cfe <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x26>
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f7ff ff2e 	bl	8014b54 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE4colsEv>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	dc06      	bgt.n	8014d0c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x34>
 8014cfe:	4b16      	ldr	r3, [pc, #88]	; (8014d58 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x80>)
 8014d00:	4a16      	ldr	r2, [pc, #88]	; (8014d5c <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x84>)
 8014d02:	f240 119b 	movw	r1, #411	; 0x19b
 8014d06:	4816      	ldr	r0, [pc, #88]	; (8014d60 <_ZNK5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE5reduxINS2_13scalar_sum_opIffEEEEfRKT_+0x88>)
 8014d08:	f008 fe7c 	bl	801da04 <__assert_func>
 8014d0c:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f7ff ff30 	bl	8014b74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014d14:	4602      	mov	r2, r0
 8014d16:	f107 030c 	add.w	r3, r7, #12
 8014d1a:	4611      	mov	r1, r2
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f000 f86b 	bl	8014df8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7ff ff26 	bl	8014b74 <_ZNK5Eigen9EigenBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE7derivedEv>
 8014d28:	4602      	mov	r2, r0
 8014d2a:	f107 030c 	add.w	r3, r7, #12
 8014d2e:	6839      	ldr	r1, [r7, #0]
 8014d30:	4618      	mov	r0, r3
 8014d32:	f000 f891 	bl	8014e58 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>
 8014d36:	eeb0 8a40 	vmov.f32	s16, s0
 8014d3a:	bf00      	nop
  ThisEvaluator thisEval(derived());
 8014d3c:	f107 030c 	add.w	r3, r7, #12
 8014d40:	4618      	mov	r0, r3
 8014d42:	f7ff ffbc 	bl	8014cbe <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>
  return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 8014d46:	eef0 7a48 	vmov.f32	s15, s16
}
 8014d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8014d4e:	3720      	adds	r7, #32
 8014d50:	46bd      	mov	sp, r7
 8014d52:	ecbd 8b02 	vpop	{d8}
 8014d56:	bd80      	pop	{r7, pc}
 8014d58:	080248ec 	.word	0x080248ec
 8014d5c:	08029794 	.word	0x08029794
 8014d60:	08024af8 	.word	0x08024af8

08014d64 <_ZN5Eigen9BlockImplIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ENS_5DenseEEC1ERS3_i>:
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE BlockImpl(XprType& xpr, Index i) : Impl(xpr,i) {}
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	607a      	str	r2, [r7, #4]
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	687a      	ldr	r2, [r7, #4]
 8014d74:	68b9      	ldr	r1, [r7, #8]
 8014d76:	4618      	mov	r0, r3
 8014d78:	f000 f87f 	bl	8014e7a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3710      	adds	r7, #16
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}

08014d86 <_ZN5Eigen9DenseBaseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014d86:	b480      	push	{r7}
 8014d88:	b083      	sub	sp, #12
 8014d8a:	af00      	add	r7, sp, #0
 8014d8c:	6078      	str	r0, [r7, #4]
    }
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	4618      	mov	r0, r3
 8014d92:	370c      	adds	r7, #12
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr

08014d9c <_ZN5Eigen9DenseBaseINS_13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
    }
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	4618      	mov	r0, r3
 8014da8:	370c      	adds	r7, #12
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr

08014db2 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4colsEv>:
    inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
 8014db2:	b580      	push	{r7, lr}
 8014db4:	b082      	sub	sp, #8
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	6078      	str	r0, [r7, #4]
 8014dba:	f7f1 fa6e 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3708      	adds	r7, #8
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}

08014dc8 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4rowsEv>:
    inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
 8014dd0:	f7f1 fa6b 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	3708      	adds	r7, #8
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE4colsEv>:
    Index cols() const EIGEN_NOEXCEPT {
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b082      	sub	sp, #8
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	6078      	str	r0, [r7, #4]
      return internal::traits<typename internal::remove_all<LhsNested>::type>::ColsAtCompileTime==Dynamic ? m_rhs.cols() : m_lhs.cols();
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7ff fe57 	bl	8014a9c <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE4colsEv>
 8014dee:	4603      	mov	r3, r0
    }
 8014df0:	4618      	mov	r0, r3
 8014df2:	3708      	adds	r7, #8
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}

08014df8 <_ZN5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6839      	ldr	r1, [r7, #0]
 8014e06:	4618      	mov	r0, r3
 8014e08:	f000 f86d 	bl	8014ee6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	4618      	mov	r0, r3
 8014e10:	3708      	adds	r7, #8
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}

08014e16 <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEED1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 8014e16:	b480      	push	{r7}
 8014e18:	b083      	sub	sp, #12
 8014e1a:	af00      	add	r7, sp, #0
 8014e1c:	6078      	str	r0, [r7, #4]
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	4618      	mov	r0, r3
 8014e22:	370c      	adds	r7, #12
 8014e24:	46bd      	mov	sp, r7
 8014e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2a:	4770      	bx	lr

08014e2c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEED1Ev>:
 8014e2c:	b480      	push	{r7}
 8014e2e:	b083      	sub	sp, #12
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	4618      	mov	r0, r3
 8014e38:	370c      	adds	r7, #12
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr

08014e42 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEED1Ev>:
 8014e42:	b480      	push	{r7}
 8014e44:	b083      	sub	sp, #12
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	370c      	adds	r7, #12
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr

08014e58 <_ZN5Eigen8internal10redux_implINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi2EE3runISL_EEfRKSM_RKS3_RKT_>:
  Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b084      	sub	sp, #16
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	60f8      	str	r0, [r7, #12]
 8014e60:	60b9      	str	r1, [r7, #8]
 8014e62:	607a      	str	r2, [r7, #4]
    return Base::run(eval,func);
 8014e64:	68b9      	ldr	r1, [r7, #8]
 8014e66:	68f8      	ldr	r0, [r7, #12]
 8014e68:	f000 f84c 	bl	8014f04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>
 8014e6c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014e70:	eeb0 0a67 	vmov.f32	s0, s15
 8014e74:	3710      	adds	r7, #16
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERS4_i>:
    BlockImpl_dense(XprType& xpr, Index i)
 8014e7a:	b5b0      	push	{r4, r5, r7, lr}
 8014e7c:	b084      	sub	sp, #16
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	60f8      	str	r0, [r7, #12]
 8014e82:	60b9      	str	r1, [r7, #8]
 8014e84:	607a      	str	r2, [r7, #4]
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8014e86:	68fc      	ldr	r4, [r7, #12]
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7fd f866 	bl	8011f5c <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4dataEv>
 8014e90:	4605      	mov	r5, r0
                                || ((BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) && ( XprTypeIsRowMajor)) ? xpr.innerStride() : xpr.outerStride()),
 8014e92:	68b8      	ldr	r0, [r7, #8]
 8014e94:	f7fd fa90 	bl	80123b8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014e98:	4602      	mov	r2, r0
      : Base(xpr.data() + i * (    ((BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) && (!XprTypeIsRowMajor))
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	fb02 f303 	mul.w	r3, r2, r3
 8014ea0:	009b      	lsls	r3, r3, #2
        m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? i : 0)
 8014ea2:	441d      	add	r5, r3
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7ef fde4 	bl	8004a74 <_ZNK5Eigen15PlainObjectBaseINS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEEE4colsEv>
 8014eac:	4603      	mov	r3, r0
 8014eae:	2201      	movs	r2, #1
 8014eb0:	4629      	mov	r1, r5
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f000 f856 	bl	8014f64 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	68ba      	ldr	r2, [r7, #8]
 8014ebc:	609a      	str	r2, [r3, #8]
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	330c      	adds	r3, #12
 8014ec2:	6879      	ldr	r1, [r7, #4]
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7f8 faab 	bl	800d420 <_ZN5Eigen8internal19variable_if_dynamicIiLi0EEC1Ei>
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	3310      	adds	r3, #16
 8014ece:	2100      	movs	r1, #0
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7f8 fa31 	bl	800d338 <_ZN5Eigen8internal19variable_if_dynamicIiLin1EEC1Ei>
      init();
 8014ed6:	68f8      	ldr	r0, [r7, #12]
 8014ed8:	f000 f882 	bl	8014fe0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>
    }
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3710      	adds	r7, #16
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bdb0      	pop	{r4, r5, r7, pc}

08014ee6 <_ZN5Eigen8internal9evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1ERKSI_>:
  explicit evaluator(const XprType& xpr) : Base(xpr) {}
 8014ee6:	b580      	push	{r7, lr}
 8014ee8:	b082      	sub	sp, #8
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
 8014eee:	6039      	str	r1, [r7, #0]
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	6839      	ldr	r1, [r7, #0]
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f000 f883 	bl	8015000 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	4618      	mov	r0, r3
 8014efe:	3708      	adds	r7, #8
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi3EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b084      	sub	sp, #16
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014f0e:	6839      	ldr	r1, [r7, #0]
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f000 f887 	bl	8015024 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>
 8014f16:	eef0 7a40 	vmov.f32	s15, s0
 8014f1a:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8014f1e:	6839      	ldr	r1, [r7, #0]
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f000 f890 	bl	8015046 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>
 8014f26:	eef0 7a40 	vmov.f32	s15, s0
 8014f2a:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8014f2e:	f107 020c 	add.w	r2, r7, #12
 8014f32:	f107 0308 	add.w	r3, r7, #8
 8014f36:	4619      	mov	r1, r3
 8014f38:	6838      	ldr	r0, [r7, #0]
 8014f3a:	f7f3 fd74 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8014f3e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8014f42:	eeb0 0a67 	vmov.f32	s0, s15
 8014f46:	3710      	adds	r7, #16
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b082      	sub	sp, #8
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f000 f89a 	bl	801508e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3708      	adds	r7, #8
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii>:
    inline MapBase(PointerType dataPtr, Index rows, Index cols)
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	603b      	str	r3, [r7, #0]
            : m_data(dataPtr), m_rows(rows), m_cols(cols)
 8014f72:	68f8      	ldr	r0, [r7, #12]
 8014f74:	f7ff ffea 	bl	8014f4c <_ZN5Eigen10MatrixBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	68ba      	ldr	r2, [r7, #8]
 8014f7c:	601a      	str	r2, [r3, #0]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	3304      	adds	r3, #4
 8014f82:	6879      	ldr	r1, [r7, #4]
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7f1 f963 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	3305      	adds	r3, #5
 8014f8e:	6839      	ldr	r1, [r7, #0]
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7f1 f943 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
      eigen_assert( (dataPtr == 0)
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d011      	beq.n	8014fc0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	db08      	blt.n	8014fb4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2b01      	cmp	r3, #1
 8014fa6:	d105      	bne.n	8014fb4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	db02      	blt.n	8014fb4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x50>
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	2b03      	cmp	r3, #3
 8014fb2:	d005      	beq.n	8014fc0 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x5c>
 8014fb4:	4b07      	ldr	r3, [pc, #28]	; (8014fd4 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x70>)
 8014fb6:	4a08      	ldr	r2, [pc, #32]	; (8014fd8 <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x74>)
 8014fb8:	21b0      	movs	r1, #176	; 0xb0
 8014fba:	4808      	ldr	r0, [pc, #32]	; (8014fdc <_ZN5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EEC1EPKfii+0x78>)
 8014fbc:	f008 fd22 	bl	801da04 <__assert_func>
      checkSanity<Derived>();
 8014fc0:	2100      	movs	r1, #0
 8014fc2:	68f8      	ldr	r0, [r7, #12]
 8014fc4:	f000 f86e 	bl	80150a4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>
    }
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	4618      	mov	r0, r3
 8014fcc:	3710      	adds	r7, #16
 8014fce:	46bd      	mov	sp, r7
 8014fd0:	bd80      	pop	{r7, pc}
 8014fd2:	bf00      	nop
 8014fd4:	08025f90 	.word	0x08025f90
 8014fd8:	08029958 	.word	0x08029958
 8014fdc:	08026140 	.word	0x08026140

08014fe0 <_ZN5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE4initEv>:
    void init()
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	689b      	ldr	r3, [r3, #8]
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fd f9e3 	bl	80123b8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 8014ff2:	4602      	mov	r2, r0
      m_outerStride = internal::traits<BlockType>::HasSameStorageOrderAsXprType
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	615a      	str	r2, [r3, #20]
    }
 8014ff8:	bf00      	nop
 8014ffa:	3708      	adds	r7, #8
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffEC1ERKSI_>:
  explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	6039      	str	r1, [r7, #0]
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f000 f855 	bl	80150ba <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	6839      	ldr	r1, [r7, #0]
 8015014:	4618      	mov	r0, r3
 8015016:	f000 f85b 	bl	80150d0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>
  }
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	4618      	mov	r0, r3
 801501e:	3708      	adds	r7, #8
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}

08015024 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi0ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015024:	b580      	push	{r7, lr}
 8015026:	b082      	sub	sp, #8
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
 801502c:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 801502e:	2200      	movs	r2, #0
 8015030:	2100      	movs	r1, #0
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f000 f874 	bl	8015120 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 8015038:	eef0 7a40 	vmov.f32	s15, s0
  }
 801503c:	eeb0 0a67 	vmov.f32	s0, s15
 8015040:	3708      	adds	r7, #8
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}

08015046 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi2EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 8015046:	b580      	push	{r7, lr}
 8015048:	b084      	sub	sp, #16
 801504a:	af00      	add	r7, sp, #0
 801504c:	6078      	str	r0, [r7, #4]
 801504e:	6039      	str	r1, [r7, #0]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015050:	6839      	ldr	r1, [r7, #0]
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f000 f877 	bl	8015146 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>
 8015058:	eef0 7a40 	vmov.f32	s15, s0
 801505c:	edc7 7a02 	vstr	s15, [r7, #8]
                redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eval,func));
 8015060:	6839      	ldr	r1, [r7, #0]
 8015062:	6878      	ldr	r0, [r7, #4]
 8015064:	f000 f880 	bl	8015168 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>
 8015068:	eef0 7a40 	vmov.f32	s15, s0
 801506c:	edc7 7a03 	vstr	s15, [r7, #12]
    return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 8015070:	f107 020c 	add.w	r2, r7, #12
 8015074:	f107 0308 	add.w	r3, r7, #8
 8015078:	4619      	mov	r1, r3
 801507a:	6838      	ldr	r0, [r7, #0]
 801507c:	f7f3 fcd3 	bl	8008a26 <_ZNK5Eigen8internal13scalar_sum_opIffEclERKfS4_>
 8015080:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015084:	eeb0 0a67 	vmov.f32	s0, s15
 8015088:	3710      	adds	r7, #16
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}

0801508e <_ZN5Eigen9DenseBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
    EIGEN_DEVICE_FUNC DenseBase()
 801508e:	b480      	push	{r7}
 8015090:	b083      	sub	sp, #12
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
    }
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	4618      	mov	r0, r3
 801509a:	370c      	adds	r7, #12
 801509c:	46bd      	mov	sp, r7
 801509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a2:	4770      	bx	lr

080150a4 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE11checkSanityIS5_EEvNS_8internal9enable_ifIXeqsrNS8_6traitsIT_EE9AlignmentLi0EEPvE4typeE>:
    void checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0) const
 80150a4:	b480      	push	{r7}
 80150a6:	b083      	sub	sp, #12
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
    {}
 80150ae:	bf00      	nop
 80150b0:	370c      	adds	r7, #12
 80150b2:	46bd      	mov	sp, r7
 80150b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b8:	4770      	bx	lr

080150ba <_ZN5Eigen8internal14evaluator_baseINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 80150ba:	b480      	push	{r7}
 80150bc:	b083      	sub	sp, #12
 80150be:	af00      	add	r7, sp, #0
 80150c0:	6078      	str	r0, [r7, #4]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	4618      	mov	r0, r3
 80150c6:	370c      	adds	r7, #12
 80150c8:	46bd      	mov	sp, r7
 80150ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ce:	4770      	bx	lr

080150d0 <_ZN5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4DataC1ERKSI_>:
    Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 80150d0:	b590      	push	{r4, r7, lr}
 80150d2:	b083      	sub	sp, #12
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	6039      	str	r1, [r7, #0]
 80150da:	687c      	ldr	r4, [r7, #4]
 80150dc:	6838      	ldr	r0, [r7, #0]
 80150de:	f000 f854 	bl	801518a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>
 80150e2:	4603      	mov	r3, r0
 80150e4:	4619      	mov	r1, r3
 80150e6:	4620      	mov	r0, r4
 80150e8:	f7ef fe38 	bl	8004d5c <_ZN5Eigen8internal17scalar_product_opIffEC1ERKS2_>
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	1d1c      	adds	r4, r3, #4
 80150f0:	6838      	ldr	r0, [r7, #0]
 80150f2:	f000 f856 	bl	80151a2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>
 80150f6:	4603      	mov	r3, r0
 80150f8:	4619      	mov	r1, r3
 80150fa:	4620      	mov	r0, r4
 80150fc:	f000 f868 	bl	80151d0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f103 040c 	add.w	r4, r3, #12
 8015106:	6838      	ldr	r0, [r7, #0]
 8015108:	f000 f856 	bl	80151b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>
 801510c:	4603      	mov	r3, r0
 801510e:	4619      	mov	r1, r3
 8015110:	4620      	mov	r0, r4
 8015112:	f7fa f995 	bl	800f440 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEC1ERS7_>
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	4618      	mov	r0, r3
 801511a:	370c      	adds	r7, #12
 801511c:	46bd      	mov	sp, r7
 801511e:	bd90      	pop	{r4, r7, pc}

08015120 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>:
  CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	607a      	str	r2, [r7, #4]
  { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	68ba      	ldr	r2, [r7, #8]
 8015130:	6879      	ldr	r1, [r7, #4]
 8015132:	4618      	mov	r0, r3
 8015134:	f000 f85b 	bl	80151ee <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>
 8015138:	eef0 7a40 	vmov.f32	s15, s0
 801513c:	eeb0 0a67 	vmov.f32	s0, s15
 8015140:	3710      	adds	r7, #16
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}

08015146 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi1ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015146:	b580      	push	{r7, lr}
 8015148:	b082      	sub	sp, #8
 801514a:	af00      	add	r7, sp, #0
 801514c:	6078      	str	r0, [r7, #4]
 801514e:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015150:	2201      	movs	r2, #1
 8015152:	2100      	movs	r1, #0
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f7ff ffe3 	bl	8015120 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801515a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801515e:	eeb0 0a67 	vmov.f32	s0, s15
 8015162:	3708      	adds	r7, #8
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}

08015168 <_ZN5Eigen8internal20redux_novec_unrollerINS0_13scalar_sum_opIffEENS0_15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS9_IKNSA_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEEELi2ELi1EE3runERKSM_RKS3_>:
  static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
 8015170:	6039      	str	r1, [r7, #0]
    return eval.coeffByOuterInner(outer, inner);
 8015172:	2202      	movs	r2, #2
 8015174:	2100      	movs	r1, #0
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f7ff ffd2 	bl	8015120 <_ZNK5Eigen8internal15redux_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEEE17coeffByOuterInnerEii>
 801517c:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015180:	eeb0 0a67 	vmov.f32	s0, s15
 8015184:	3708      	adds	r7, #8
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}

0801518a <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE7functorEv>:
    const BinaryOp& functor() const { return m_functor; }
 801518a:	b480      	push	{r7}
 801518c:	b083      	sub	sp, #12
 801518e:	af00      	add	r7, sp, #0
 8015190:	6078      	str	r0, [r7, #4]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	3330      	adds	r3, #48	; 0x30
 8015196:	4618      	mov	r0, r3
 8015198:	370c      	adds	r7, #12
 801519a:	46bd      	mov	sp, r7
 801519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a0:	4770      	bx	lr

080151a2 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3lhsEv>:
    const _LhsNested& lhs() const { return m_lhs; }
 80151a2:	b480      	push	{r7}
 80151a4:	b083      	sub	sp, #12
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	6078      	str	r0, [r7, #4]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	4618      	mov	r0, r3
 80151ae:	370c      	adds	r7, #12
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr

080151b8 <_ZNK5Eigen13CwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS5_IKNS6_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEE3rhsEv>:
    const _RhsNested& rhs() const { return m_rhs; }
 80151b8:	b480      	push	{r7}
 80151ba:	b083      	sub	sp, #12
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	3318      	adds	r3, #24
 80151c4:	4618      	mov	r0, r3
 80151c6:	370c      	adds	r7, #12
 80151c8:	46bd      	mov	sp, r7
 80151ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ce:	4770      	bx	lr

080151d0 <_ZN5Eigen8internal9evaluatorIKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERSA_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6839      	ldr	r1, [r7, #0]
 80151de:	4618      	mov	r0, r3
 80151e0:	f000 f835 	bl	801524e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	4618      	mov	r0, r3
 80151e8:	3708      	adds	r7, #8
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}

080151ee <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80151ee:	b590      	push	{r4, r7, lr}
 80151f0:	b087      	sub	sp, #28
 80151f2:	af00      	add	r7, sp, #0
 80151f4:	60f8      	str	r0, [r7, #12]
 80151f6:	60b9      	str	r1, [r7, #8]
 80151f8:	607a      	str	r2, [r7, #4]
    return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	4618      	mov	r0, r3
 80151fe:	f000 f835 	bl	801526c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>
 8015202:	4604      	mov	r4, r0
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	3304      	adds	r3, #4
 8015208:	687a      	ldr	r2, [r7, #4]
 801520a:	68b9      	ldr	r1, [r7, #8]
 801520c:	4618      	mov	r0, r3
 801520e:	f000 f838 	bl	8015282 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>
 8015212:	eef0 7a40 	vmov.f32	s15, s0
 8015216:	edc7 7a04 	vstr	s15, [r7, #16]
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	330c      	adds	r3, #12
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	68b9      	ldr	r1, [r7, #8]
 8015222:	4618      	mov	r0, r3
 8015224:	f7fa fd4e 	bl	800fcc4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEENS3_IfLi3ELi1ELi0ELi3ELi1EEEE5coeffEii>
 8015228:	eef0 7a40 	vmov.f32	s15, s0
 801522c:	edc7 7a05 	vstr	s15, [r7, #20]
 8015230:	f107 0214 	add.w	r2, r7, #20
 8015234:	f107 0310 	add.w	r3, r7, #16
 8015238:	4619      	mov	r1, r3
 801523a:	4620      	mov	r0, r4
 801523c:	f7f9 fc34 	bl	800eaa8 <_ZNK5Eigen8internal17scalar_product_opIffEclERKfS4_>
 8015240:	eef0 7a40 	vmov.f32	s15, s0
  }
 8015244:	eeb0 0a67 	vmov.f32	s0, s15
 8015248:	371c      	adds	r7, #28
 801524a:	46bd      	mov	sp, r7
 801524c:	bd90      	pop	{r4, r7, pc}

0801524e <_ZN5Eigen8internal9evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1ERKS9_>:
  explicit evaluator(const T& xpr) : Base(xpr) {}
 801524e:	b580      	push	{r7, lr}
 8015250:	b082      	sub	sp, #8
 8015252:	af00      	add	r7, sp, #0
 8015254:	6078      	str	r0, [r7, #4]
 8015256:	6039      	str	r1, [r7, #0]
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6839      	ldr	r1, [r7, #0]
 801525c:	4618      	mov	r0, r3
 801525e:	f000 f823 	bl	80152a8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	4618      	mov	r0, r3
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <_ZNK5Eigen8internal16binary_evaluatorINS_13CwiseBinaryOpINS0_17scalar_product_opIffEEKNS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEKNS6_IKNS7_IfLi3ELi3ELi0ELi3ELi3EEELi3ELi1ELb1EEEEENS0_10IndexBasedESJ_ffE4Data4funcEv>:
    const BinaryOp& func() const { return op; }
 801526c:	b480      	push	{r7}
 801526e:	b083      	sub	sp, #12
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	4618      	mov	r0, r3
 8015278:	370c      	adds	r7, #12
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr

08015282 <_ZNK5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfE5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 8015282:	b580      	push	{r7, lr}
 8015284:	b084      	sub	sp, #16
 8015286:	af00      	add	r7, sp, #0
 8015288:	60f8      	str	r0, [r7, #12]
 801528a:	60b9      	str	r1, [r7, #8]
 801528c:	607a      	str	r2, [r7, #4]
    return m_argImpl.coeff(col, row);
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	68ba      	ldr	r2, [r7, #8]
 8015292:	6879      	ldr	r1, [r7, #4]
 8015294:	4618      	mov	r0, r3
 8015296:	f000 f81d 	bl	80152d4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>
 801529a:	eef0 7a40 	vmov.f32	s15, s0
  }
 801529e:	eeb0 0a67 	vmov.f32	s0, s15
 80152a2:	3710      	adds	r7, #16
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <_ZN5Eigen8internal15unary_evaluatorINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEENS0_10IndexBasedEfEC1ERKS9_>:
  explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 80152a8:	b590      	push	{r4, r7, lr}
 80152aa:	b083      	sub	sp, #12
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	6039      	str	r1, [r7, #0]
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f000 f83a 	bl	801532c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>
 80152b8:	687c      	ldr	r4, [r7, #4]
 80152ba:	6838      	ldr	r0, [r7, #0]
 80152bc:	f000 f82b 	bl	8015316 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>
 80152c0:	4603      	mov	r3, r0
 80152c2:	4619      	mov	r1, r3
 80152c4:	4620      	mov	r0, r4
 80152c6:	f000 f83c 	bl	8015342 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	4618      	mov	r0, r3
 80152ce:	370c      	adds	r7, #12
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd90      	pop	{r4, r7, pc}

080152d4 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E5coeffEii>:
  CoeffReturnType coeff(Index row, Index col) const
 80152d4:	b5b0      	push	{r4, r5, r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	60f8      	str	r0, [r7, #12]
 80152dc:	60b9      	str	r1, [r7, #8]
 80152de:	607a      	str	r2, [r7, #4]
    return m_data[col * colStride() + row * rowStride()];
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	681c      	ldr	r4, [r3, #0]
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f000 f83b 	bl	8015360 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>
 80152ea:	4602      	mov	r2, r0
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	fb03 f502 	mul.w	r5, r3, r2
 80152f2:	68f8      	ldr	r0, [r7, #12]
 80152f4:	f000 f83f 	bl	8015376 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>
 80152f8:	4602      	mov	r2, r0
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	fb02 f303 	mul.w	r3, r2, r3
 8015300:	442b      	add	r3, r5
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	4423      	add	r3, r4
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	ee07 3a90 	vmov	s15, r3
  }
 801530c:	eeb0 0a67 	vmov.f32	s0, s15
 8015310:	3710      	adds	r7, #16
 8015312:	46bd      	mov	sp, r7
 8015314:	bdb0      	pop	{r4, r5, r7, pc}

08015316 <_ZNK5Eigen9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEE16nestedExpressionEv>:
    nestedExpression() const { return m_matrix; }
 8015316:	b480      	push	{r7}
 8015318:	b083      	sub	sp, #12
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	4618      	mov	r0, r3
 8015322:	370c      	adds	r7, #12
 8015324:	46bd      	mov	sp, r7
 8015326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801532a:	4770      	bx	lr

0801532c <_ZN5Eigen8internal14evaluator_baseINS_9TransposeIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	4618      	mov	r0, r3
 8015338:	370c      	adds	r7, #12
 801533a:	46bd      	mov	sp, r7
 801533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015340:	4770      	bx	lr

08015342 <_ZN5Eigen8internal9evaluatorIKNS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERS7_>:
  explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 8015342:	b580      	push	{r7, lr}
 8015344:	b082      	sub	sp, #8
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
 801534a:	6039      	str	r1, [r7, #0]
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	6839      	ldr	r1, [r7, #0]
 8015350:	4618      	mov	r0, r3
 8015352:	f000 f81b 	bl	801538c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	4618      	mov	r0, r3
 801535a:	3708      	adds	r7, #8
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}

08015360 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9colStrideEv>:
  Index colStride() const EIGEN_NOEXCEPT {
 8015360:	b580      	push	{r7, lr}
 8015362:	b082      	sub	sp, #8
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
     return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
 8015368:	f7f0 ff9f 	bl	80062aa <_ZN5Eigen8internal19variable_if_dynamicIiLi1EE5valueEv>
 801536c:	4603      	mov	r3, r0
  }
 801536e:	4618      	mov	r0, r3
 8015370:	3708      	adds	r7, #8
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <_ZNK5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_E9rowStrideEv>:
  Index rowStride() const EIGEN_NOEXCEPT {
 8015376:	b580      	push	{r7, lr}
 8015378:	b082      	sub	sp, #8
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
    return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
 801537e:	f7f0 ff8c 	bl	800629a <_ZN5Eigen8internal19variable_if_dynamicIiLi3EE5valueEv>
 8015382:	4603      	mov	r3, r0
  }
 8015384:	4618      	mov	r0, r3
 8015386:	3708      	adds	r7, #8
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}

0801538c <_ZN5Eigen8internal9evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1ERKS6_>:
  explicit evaluator(const XprType& block) : block_evaluator_type(block)
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
 8015394:	6039      	str	r1, [r7, #0]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6839      	ldr	r1, [r7, #0]
 801539a:	4618      	mov	r0, r3
 801539c:	f000 f805 	bl	80153aa <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>
  }
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	4618      	mov	r0, r3
 80153a4:	3708      	adds	r7, #8
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}

080153aa <_ZN5Eigen8internal15block_evaluatorIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EEC1ERKNS_5BlockIS4_Li1ELi3ELb1EEE>:
  explicit block_evaluator(const XprType& block)
 80153aa:	b580      	push	{r7, lr}
 80153ac:	b082      	sub	sp, #8
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	6078      	str	r0, [r7, #4]
 80153b2:	6039      	str	r1, [r7, #0]
    : mapbase_evaluator<XprType, typename XprType::PlainObject>(block)
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6839      	ldr	r1, [r7, #0]
 80153b8:	4618      	mov	r0, r3
 80153ba:	f000 f80a 	bl	80153d2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>
    eigen_assert(((internal::UIntPtr(block.data()) % EIGEN_PLAIN_ENUM_MAX(1,evaluator<XprType>::Alignment)) == 0) && "data is not aligned");
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	4618      	mov	r0, r3
 80153c2:	f000 f830 	bl	8015426 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 80153c6:	bf00      	nop
  }
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	4618      	mov	r0, r3
 80153cc:	3708      	adds	r7, #8
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <_ZN5Eigen8internal17mapbase_evaluatorINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEES4_EC1ERKS6_>:
  explicit mapbase_evaluator(const XprType& map)
 80153d2:	b590      	push	{r4, r7, lr}
 80153d4:	b083      	sub	sp, #12
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
 80153da:	6039      	str	r1, [r7, #0]
      m_outerStride(map.outerStride())
 80153dc:	6878      	ldr	r0, [r7, #4]
 80153de:	f000 f84a 	bl	8015476 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>
    : m_data(const_cast<PointerType>(map.data())),
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f000 f81e 	bl	8015426 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>
 80153ea:	4602      	mov	r2, r0
      m_outerStride(map.outerStride())
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	601a      	str	r2, [r3, #0]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	1d1c      	adds	r4, r3, #4
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	4618      	mov	r0, r3
 80153f8:	f000 f821 	bl	801543e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>
 80153fc:	4603      	mov	r3, r0
 80153fe:	4619      	mov	r1, r3
 8015400:	4620      	mov	r0, r4
 8015402:	f7f0 ff25 	bl	8006250 <_ZN5Eigen8internal19variable_if_dynamicIiLi1EEC1Ei>
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	1d5c      	adds	r4, r3, #5
 801540a:	683b      	ldr	r3, [r7, #0]
 801540c:	4618      	mov	r0, r3
 801540e:	f000 f824 	bl	801545a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>
 8015412:	4603      	mov	r3, r0
 8015414:	4619      	mov	r1, r3
 8015416:	4620      	mov	r0, r4
 8015418:	f7f0 ff00 	bl	800621c <_ZN5Eigen8internal19variable_if_dynamicIiLi3EEC1Ei>
  }
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	4618      	mov	r0, r3
 8015420:	370c      	adds	r7, #12
 8015422:	46bd      	mov	sp, r7
 8015424:	bd90      	pop	{r4, r7, pc}

08015426 <_ZNK5Eigen7MapBaseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEELi0EE4dataEv>:
    EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 8015426:	b480      	push	{r7}
 8015428:	b083      	sub	sp, #12
 801542a:	af00      	add	r7, sp, #0
 801542c:	6078      	str	r0, [r7, #4]
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	4618      	mov	r0, r3
 8015434:	370c      	adds	r7, #12
 8015436:	46bd      	mov	sp, r7
 8015438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543c:	4770      	bx	lr

0801543e <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11innerStrideEv>:
    Index innerStride() const EIGEN_NOEXCEPT
 801543e:	b580      	push	{r7, lr}
 8015440:	b082      	sub	sp, #8
 8015442:	af00      	add	r7, sp, #0
 8015444:	6078      	str	r0, [r7, #4]
             ? m_xpr.innerStride()
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	689b      	ldr	r3, [r3, #8]
 801544a:	4618      	mov	r0, r3
 801544c:	f7fd fcf8 	bl	8012e40 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11innerStrideEv>
 8015450:	4603      	mov	r3, r0
    }
 8015452:	4618      	mov	r0, r3
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <_ZNK5Eigen8internal15BlockImpl_denseIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1ELb1EE11outerStrideEv>:
    Index outerStride() const EIGEN_NOEXCEPT
 801545a:	b580      	push	{r7, lr}
 801545c:	b082      	sub	sp, #8
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
                    ? m_xpr.outerStride()
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	689b      	ldr	r3, [r3, #8]
 8015466:	4618      	mov	r0, r3
 8015468:	f7fc ffa6 	bl	80123b8 <_ZNK5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EE11outerStrideEv>
 801546c:	4603      	mov	r3, r0
    }
 801546e:	4618      	mov	r0, r3
 8015470:	3708      	adds	r7, #8
 8015472:	46bd      	mov	sp, r7
 8015474:	bd80      	pop	{r7, pc}

08015476 <_ZN5Eigen8internal14evaluator_baseINS_5BlockIKNS_6MatrixIfLi1ELi3ELi1ELi1ELi3EEELi1ELi3ELb1EEEEC1Ev>:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 8015476:	b480      	push	{r7}
 8015478:	b083      	sub	sp, #12
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	4618      	mov	r0, r3
 8015482:	370c      	adds	r7, #12
 8015484:	46bd      	mov	sp, r7
 8015486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548a:	4770      	bx	lr

0801548c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 801548c:	b590      	push	{r4, r7, lr}
 801548e:	b083      	sub	sp, #12
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	6039      	str	r1, [r7, #0]
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2b01      	cmp	r3, #1
 801549a:	d141      	bne.n	8015520 <_Z41__static_initialization_and_destruction_0ii+0x94>
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154a2:	4293      	cmp	r3, r2
 80154a4:	d13c      	bne.n	8015520 <_Z41__static_initialization_and_destruction_0ii+0x94>
static const symbolic::SymbolExpr<internal::symbolic_last_tag> last; // PLEASE use Eigen::last   instead of Eigen::placeholders::last
 80154a6:	4820      	ldr	r0, [pc, #128]	; (8015528 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80154a8:	f7ee fa1b 	bl	80038e2 <_ZN5Eigen8symbolic10SymbolExprINS_8internal17symbolic_last_tagEEC1Ev>

#ifndef EIGEN_PARSED_BY_DOXYGEN

#if EIGEN_HAS_CXX14_VARIABLE_TEMPLATES
template<int N>
static const internal::FixedInt<N> fix{};
 80154ac:	481f      	ldr	r0, [pc, #124]	; (801552c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80154ae:	f7ee fa23 	bl	80038f8 <_ZN5Eigen8internal8FixedIntILi1EEC1Ev>
static const symbolic::AddExpr<symbolic::SymbolExpr<internal::symbolic_last_tag>,symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > lastp1(last+fix<1>());
 80154b2:	481e      	ldr	r0, [pc, #120]	; (801552c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80154b4:	f7ee fa2b 	bl	800390e <_ZNK5Eigen8internal8FixedIntILi1EEclEv>
 80154b8:	4621      	mov	r1, r4
 80154ba:	481b      	ldr	r0, [pc, #108]	; (8015528 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80154bc:	f7ee fa32 	bl	8003924 <_ZNK5Eigen8symbolic8BaseExprINS0_10SymbolExprINS_8internal17symbolic_last_tagEEEEplILi1EEENS0_7AddExprIS5_NS0_9ValueExprINS3_8FixedIntIXT_EEEEEEESB_>

/** \var all
  * \ingroup Core_Module
  * Can be used as a parameter to DenseBase::operator()(const RowIndices&, const ColIndices&) to index all rows or columns
  */
static const Eigen::internal::all_t all; // PLEASE use Eigen::all instead of Eigen::placeholders::all
 80154c0:	481b      	ldr	r0, [pc, #108]	; (8015530 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80154c2:	f7eb fd47 	bl	8000f54 <_ZN5Eigen8internal5all_tC1Ev>
Matrix <float,3,3> A ;
 80154c6:	481b      	ldr	r0, [pc, #108]	; (8015534 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80154c8:	f7ee fa51 	bl	800396e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> P ;
 80154cc:	481a      	ldr	r0, [pc, #104]	; (8015538 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80154ce:	f7ee fa4e 	bl	800396e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> O ;
 80154d2:	481a      	ldr	r0, [pc, #104]	; (801553c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80154d4:	f7ee fa4b 	bl	800396e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,3,3> I ;
 80154d8:	4819      	ldr	r0, [pc, #100]	; (8015540 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80154da:	f7ee fa48 	bl	800396e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Matrix <float,1,1> S ;
 80154de:	4819      	ldr	r0, [pc, #100]	; (8015544 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80154e0:	f7ee fa54 	bl	800398c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> R ;
 80154e4:	4818      	ldr	r0, [pc, #96]	; (8015548 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80154e6:	f7ee fa51 	bl	800398c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> D ;
 80154ea:	4818      	ldr	r0, [pc, #96]	; (801554c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80154ec:	f7ee fa4e 	bl	800398c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,1,1> Z ;
 80154f0:	4817      	ldr	r0, [pc, #92]	; (8015550 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80154f2:	f7ee fa4b 	bl	800398c <_ZN5Eigen6MatrixIfLi1ELi1ELi0ELi1ELi1EEC1Ev>
Matrix <float,3,1> K ;
 80154f6:	4817      	ldr	r0, [pc, #92]	; (8015554 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80154f8:	f7ee fa57 	bl	80039aa <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,1,3> C ;
 80154fc:	4816      	ldr	r0, [pc, #88]	; (8015558 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80154fe:	f7ee fa63 	bl	80039c8 <_ZN5Eigen6MatrixIfLi1ELi3ELi1ELi1ELi3EEC1Ev>
Matrix <float,3,1> G ;
 8015502:	4816      	ldr	r0, [pc, #88]	; (801555c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8015504:	f7ee fa51 	bl	80039aa <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Matrix <float,3,3> Q ;
 8015508:	4815      	ldr	r0, [pc, #84]	; (8015560 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 801550a:	f7ee fa30 	bl	800396e <_ZN5Eigen6MatrixIfLi3ELi3ELi0ELi3ELi3EEC1Ev>
Vector3f X;
 801550e:	4815      	ldr	r0, [pc, #84]	; (8015564 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8015510:	f7ee fa4b 	bl	80039aa <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f X1;
 8015514:	4814      	ldr	r0, [pc, #80]	; (8015568 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8015516:	f7ee fa48 	bl	80039aa <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
Vector3f B;
 801551a:	4814      	ldr	r0, [pc, #80]	; (801556c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 801551c:	f7ee fa45 	bl	80039aa <_ZN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEC1Ev>
}
 8015520:	bf00      	nop
 8015522:	370c      	adds	r7, #12
 8015524:	46bd      	mov	sp, r7
 8015526:	bd90      	pop	{r4, r7, pc}
 8015528:	200000f4 	.word	0x200000f4
 801552c:	20000624 	.word	0x20000624
 8015530:	200000f8 	.word	0x200000f8
 8015534:	20000438 	.word	0x20000438
 8015538:	2000045c 	.word	0x2000045c
 801553c:	20000480 	.word	0x20000480
 8015540:	200004a4 	.word	0x200004a4
 8015544:	200004c8 	.word	0x200004c8
 8015548:	200004cc 	.word	0x200004cc
 801554c:	200004d0 	.word	0x200004d0
 8015550:	200004d4 	.word	0x200004d4
 8015554:	200004d8 	.word	0x200004d8
 8015558:	200004e4 	.word	0x200004e4
 801555c:	200004f0 	.word	0x200004f0
 8015560:	200004fc 	.word	0x200004fc
 8015564:	20000520 	.word	0x20000520
 8015568:	2000052c 	.word	0x2000052c
 801556c:	20000538 	.word	0x20000538

08015570 <_GLOBAL__sub_I_hi2c1>:
 8015570:	b580      	push	{r7, lr}
 8015572:	af00      	add	r7, sp, #0
 8015574:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015578:	2001      	movs	r0, #1
 801557a:	f7ff ff87 	bl	801548c <_Z41__static_initialization_and_destruction_0ii>
 801557e:	bd80      	pop	{r7, pc}

08015580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015586:	2300      	movs	r3, #0
 8015588:	607b      	str	r3, [r7, #4]
 801558a:	4b10      	ldr	r3, [pc, #64]	; (80155cc <HAL_MspInit+0x4c>)
 801558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801558e:	4a0f      	ldr	r2, [pc, #60]	; (80155cc <HAL_MspInit+0x4c>)
 8015590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015594:	6453      	str	r3, [r2, #68]	; 0x44
 8015596:	4b0d      	ldr	r3, [pc, #52]	; (80155cc <HAL_MspInit+0x4c>)
 8015598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801559a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801559e:	607b      	str	r3, [r7, #4]
 80155a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80155a2:	2300      	movs	r3, #0
 80155a4:	603b      	str	r3, [r7, #0]
 80155a6:	4b09      	ldr	r3, [pc, #36]	; (80155cc <HAL_MspInit+0x4c>)
 80155a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155aa:	4a08      	ldr	r2, [pc, #32]	; (80155cc <HAL_MspInit+0x4c>)
 80155ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80155b0:	6413      	str	r3, [r2, #64]	; 0x40
 80155b2:	4b06      	ldr	r3, [pc, #24]	; (80155cc <HAL_MspInit+0x4c>)
 80155b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80155ba:	603b      	str	r3, [r7, #0]
 80155bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80155be:	2007      	movs	r0, #7
 80155c0:	f000 fd66 	bl	8016090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80155c4:	bf00      	nop
 80155c6:	3708      	adds	r7, #8
 80155c8:	46bd      	mov	sp, r7
 80155ca:	bd80      	pop	{r7, pc}
 80155cc:	40023800 	.word	0x40023800

080155d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b08c      	sub	sp, #48	; 0x30
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155d8:	f107 031c 	add.w	r3, r7, #28
 80155dc:	2200      	movs	r2, #0
 80155de:	601a      	str	r2, [r3, #0]
 80155e0:	605a      	str	r2, [r3, #4]
 80155e2:	609a      	str	r2, [r3, #8]
 80155e4:	60da      	str	r2, [r3, #12]
 80155e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	4a52      	ldr	r2, [pc, #328]	; (8015738 <HAL_I2C_MspInit+0x168>)
 80155ee:	4293      	cmp	r3, r2
 80155f0:	d13d      	bne.n	801566e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80155f2:	2300      	movs	r3, #0
 80155f4:	61bb      	str	r3, [r7, #24]
 80155f6:	4b51      	ldr	r3, [pc, #324]	; (801573c <HAL_I2C_MspInit+0x16c>)
 80155f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155fa:	4a50      	ldr	r2, [pc, #320]	; (801573c <HAL_I2C_MspInit+0x16c>)
 80155fc:	f043 0302 	orr.w	r3, r3, #2
 8015600:	6313      	str	r3, [r2, #48]	; 0x30
 8015602:	4b4e      	ldr	r3, [pc, #312]	; (801573c <HAL_I2C_MspInit+0x16c>)
 8015604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015606:	f003 0302 	and.w	r3, r3, #2
 801560a:	61bb      	str	r3, [r7, #24]
 801560c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801560e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015614:	2312      	movs	r3, #18
 8015616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015618:	2300      	movs	r3, #0
 801561a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801561c:	2303      	movs	r3, #3
 801561e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015620:	2304      	movs	r3, #4
 8015622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015624:	f107 031c 	add.w	r3, r7, #28
 8015628:	4619      	mov	r1, r3
 801562a:	4845      	ldr	r0, [pc, #276]	; (8015740 <HAL_I2C_MspInit+0x170>)
 801562c:	f001 f982 	bl	8016934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015630:	2300      	movs	r3, #0
 8015632:	617b      	str	r3, [r7, #20]
 8015634:	4b41      	ldr	r3, [pc, #260]	; (801573c <HAL_I2C_MspInit+0x16c>)
 8015636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015638:	4a40      	ldr	r2, [pc, #256]	; (801573c <HAL_I2C_MspInit+0x16c>)
 801563a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801563e:	6413      	str	r3, [r2, #64]	; 0x40
 8015640:	4b3e      	ldr	r3, [pc, #248]	; (801573c <HAL_I2C_MspInit+0x16c>)
 8015642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015648:	617b      	str	r3, [r7, #20]
 801564a:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801564c:	2200      	movs	r2, #0
 801564e:	2100      	movs	r1, #0
 8015650:	201f      	movs	r0, #31
 8015652:	f000 fd28 	bl	80160a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8015656:	201f      	movs	r0, #31
 8015658:	f000 fd41 	bl	80160de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 801565c:	2200      	movs	r2, #0
 801565e:	2100      	movs	r1, #0
 8015660:	2020      	movs	r0, #32
 8015662:	f000 fd20 	bl	80160a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8015666:	2020      	movs	r0, #32
 8015668:	f000 fd39 	bl	80160de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 801566c:	e060      	b.n	8015730 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	4a34      	ldr	r2, [pc, #208]	; (8015744 <HAL_I2C_MspInit+0x174>)
 8015674:	4293      	cmp	r3, r2
 8015676:	d15b      	bne.n	8015730 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015678:	2300      	movs	r3, #0
 801567a:	613b      	str	r3, [r7, #16]
 801567c:	4b2f      	ldr	r3, [pc, #188]	; (801573c <HAL_I2C_MspInit+0x16c>)
 801567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015680:	4a2e      	ldr	r2, [pc, #184]	; (801573c <HAL_I2C_MspInit+0x16c>)
 8015682:	f043 0304 	orr.w	r3, r3, #4
 8015686:	6313      	str	r3, [r2, #48]	; 0x30
 8015688:	4b2c      	ldr	r3, [pc, #176]	; (801573c <HAL_I2C_MspInit+0x16c>)
 801568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801568c:	f003 0304 	and.w	r3, r3, #4
 8015690:	613b      	str	r3, [r7, #16]
 8015692:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015694:	2300      	movs	r3, #0
 8015696:	60fb      	str	r3, [r7, #12]
 8015698:	4b28      	ldr	r3, [pc, #160]	; (801573c <HAL_I2C_MspInit+0x16c>)
 801569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801569c:	4a27      	ldr	r2, [pc, #156]	; (801573c <HAL_I2C_MspInit+0x16c>)
 801569e:	f043 0301 	orr.w	r3, r3, #1
 80156a2:	6313      	str	r3, [r2, #48]	; 0x30
 80156a4:	4b25      	ldr	r3, [pc, #148]	; (801573c <HAL_I2C_MspInit+0x16c>)
 80156a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156a8:	f003 0301 	and.w	r3, r3, #1
 80156ac:	60fb      	str	r3, [r7, #12]
 80156ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80156b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80156b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80156b6:	2312      	movs	r3, #18
 80156b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156ba:	2300      	movs	r3, #0
 80156bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80156be:	2303      	movs	r3, #3
 80156c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80156c2:	2304      	movs	r3, #4
 80156c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80156c6:	f107 031c 	add.w	r3, r7, #28
 80156ca:	4619      	mov	r1, r3
 80156cc:	481e      	ldr	r0, [pc, #120]	; (8015748 <HAL_I2C_MspInit+0x178>)
 80156ce:	f001 f931 	bl	8016934 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80156d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80156d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80156d8:	2312      	movs	r3, #18
 80156da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156dc:	2300      	movs	r3, #0
 80156de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80156e0:	2303      	movs	r3, #3
 80156e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80156e4:	2304      	movs	r3, #4
 80156e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80156e8:	f107 031c 	add.w	r3, r7, #28
 80156ec:	4619      	mov	r1, r3
 80156ee:	4817      	ldr	r0, [pc, #92]	; (801574c <HAL_I2C_MspInit+0x17c>)
 80156f0:	f001 f920 	bl	8016934 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80156f4:	2300      	movs	r3, #0
 80156f6:	60bb      	str	r3, [r7, #8]
 80156f8:	4b10      	ldr	r3, [pc, #64]	; (801573c <HAL_I2C_MspInit+0x16c>)
 80156fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156fc:	4a0f      	ldr	r2, [pc, #60]	; (801573c <HAL_I2C_MspInit+0x16c>)
 80156fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015702:	6413      	str	r3, [r2, #64]	; 0x40
 8015704:	4b0d      	ldr	r3, [pc, #52]	; (801573c <HAL_I2C_MspInit+0x16c>)
 8015706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801570c:	60bb      	str	r3, [r7, #8]
 801570e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8015710:	2200      	movs	r2, #0
 8015712:	2100      	movs	r1, #0
 8015714:	2048      	movs	r0, #72	; 0x48
 8015716:	f000 fcc6 	bl	80160a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 801571a:	2048      	movs	r0, #72	; 0x48
 801571c:	f000 fcdf 	bl	80160de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8015720:	2200      	movs	r2, #0
 8015722:	2100      	movs	r1, #0
 8015724:	2049      	movs	r0, #73	; 0x49
 8015726:	f000 fcbe 	bl	80160a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 801572a:	2049      	movs	r0, #73	; 0x49
 801572c:	f000 fcd7 	bl	80160de <HAL_NVIC_EnableIRQ>
}
 8015730:	bf00      	nop
 8015732:	3730      	adds	r7, #48	; 0x30
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}
 8015738:	40005400 	.word	0x40005400
 801573c:	40023800 	.word	0x40023800
 8015740:	40020400 	.word	0x40020400
 8015744:	40005c00 	.word	0x40005c00
 8015748:	40020800 	.word	0x40020800
 801574c:	40020000 	.word	0x40020000

08015750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b08c      	sub	sp, #48	; 0x30
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015758:	f107 031c 	add.w	r3, r7, #28
 801575c:	2200      	movs	r2, #0
 801575e:	601a      	str	r2, [r3, #0]
 8015760:	605a      	str	r2, [r3, #4]
 8015762:	609a      	str	r2, [r3, #8]
 8015764:	60da      	str	r2, [r3, #12]
 8015766:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015770:	d15d      	bne.n	801582e <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8015772:	2300      	movs	r3, #0
 8015774:	61bb      	str	r3, [r7, #24]
 8015776:	4b47      	ldr	r3, [pc, #284]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 8015778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801577a:	4a46      	ldr	r2, [pc, #280]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 801577c:	f043 0301 	orr.w	r3, r3, #1
 8015780:	6413      	str	r3, [r2, #64]	; 0x40
 8015782:	4b44      	ldr	r3, [pc, #272]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 8015784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015786:	f003 0301 	and.w	r3, r3, #1
 801578a:	61bb      	str	r3, [r7, #24]
 801578c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801578e:	2300      	movs	r3, #0
 8015790:	617b      	str	r3, [r7, #20]
 8015792:	4b40      	ldr	r3, [pc, #256]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 8015794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015796:	4a3f      	ldr	r2, [pc, #252]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 8015798:	f043 0301 	orr.w	r3, r3, #1
 801579c:	6313      	str	r3, [r2, #48]	; 0x30
 801579e:	4b3d      	ldr	r3, [pc, #244]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 80157a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157a2:	f003 0301 	and.w	r3, r3, #1
 80157a6:	617b      	str	r3, [r7, #20]
 80157a8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 80157aa:	2301      	movs	r3, #1
 80157ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80157ae:	2302      	movs	r3, #2
 80157b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157b2:	2300      	movs	r3, #0
 80157b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80157b6:	2300      	movs	r3, #0
 80157b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80157ba:	2301      	movs	r3, #1
 80157bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80157be:	f107 031c 	add.w	r3, r7, #28
 80157c2:	4619      	mov	r1, r3
 80157c4:	4834      	ldr	r0, [pc, #208]	; (8015898 <HAL_TIM_Base_MspInit+0x148>)
 80157c6:	f001 f8b5 	bl	8016934 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80157ca:	4b34      	ldr	r3, [pc, #208]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 80157cc:	4a34      	ldr	r2, [pc, #208]	; (80158a0 <HAL_TIM_Base_MspInit+0x150>)
 80157ce:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80157d0:	4b32      	ldr	r3, [pc, #200]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 80157d2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80157d6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80157d8:	4b30      	ldr	r3, [pc, #192]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 80157da:	2200      	movs	r2, #0
 80157dc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80157de:	4b2f      	ldr	r3, [pc, #188]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 80157e0:	2200      	movs	r2, #0
 80157e2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80157e4:	4b2d      	ldr	r3, [pc, #180]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 80157e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80157ea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80157ec:	4b2b      	ldr	r3, [pc, #172]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 80157ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80157f2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80157f4:	4b29      	ldr	r3, [pc, #164]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 80157f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80157fa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80157fc:	4b27      	ldr	r3, [pc, #156]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 80157fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015802:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8015804:	4b25      	ldr	r3, [pc, #148]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 8015806:	2200      	movs	r2, #0
 8015808:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801580a:	4b24      	ldr	r3, [pc, #144]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 801580c:	2200      	movs	r2, #0
 801580e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8015810:	4822      	ldr	r0, [pc, #136]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 8015812:	f000 fc7f 	bl	8016114 <HAL_DMA_Init>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	d001      	beq.n	8015820 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 801581c:	f7ee f85c 	bl	80038d8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	4a1e      	ldr	r2, [pc, #120]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 8015824:	625a      	str	r2, [r3, #36]	; 0x24
 8015826:	4a1d      	ldr	r2, [pc, #116]	; (801589c <HAL_TIM_Base_MspInit+0x14c>)
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 801582c:	e02e      	b.n	801588c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	4a1c      	ldr	r2, [pc, #112]	; (80158a4 <HAL_TIM_Base_MspInit+0x154>)
 8015834:	4293      	cmp	r3, r2
 8015836:	d10e      	bne.n	8015856 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8015838:	2300      	movs	r3, #0
 801583a:	613b      	str	r3, [r7, #16]
 801583c:	4b15      	ldr	r3, [pc, #84]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 801583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015840:	4a14      	ldr	r2, [pc, #80]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 8015842:	f043 0304 	orr.w	r3, r3, #4
 8015846:	6413      	str	r3, [r2, #64]	; 0x40
 8015848:	4b12      	ldr	r3, [pc, #72]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 801584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801584c:	f003 0304 	and.w	r3, r3, #4
 8015850:	613b      	str	r3, [r7, #16]
 8015852:	693b      	ldr	r3, [r7, #16]
}
 8015854:	e01a      	b.n	801588c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM11)
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	4a13      	ldr	r2, [pc, #76]	; (80158a8 <HAL_TIM_Base_MspInit+0x158>)
 801585c:	4293      	cmp	r3, r2
 801585e:	d115      	bne.n	801588c <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8015860:	2300      	movs	r3, #0
 8015862:	60fb      	str	r3, [r7, #12]
 8015864:	4b0b      	ldr	r3, [pc, #44]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 8015866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015868:	4a0a      	ldr	r2, [pc, #40]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 801586a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801586e:	6453      	str	r3, [r2, #68]	; 0x44
 8015870:	4b08      	ldr	r3, [pc, #32]	; (8015894 <HAL_TIM_Base_MspInit+0x144>)
 8015872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015878:	60fb      	str	r3, [r7, #12]
 801587a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 801587c:	2200      	movs	r2, #0
 801587e:	2100      	movs	r1, #0
 8015880:	201a      	movs	r0, #26
 8015882:	f000 fc10 	bl	80160a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8015886:	201a      	movs	r0, #26
 8015888:	f000 fc29 	bl	80160de <HAL_NVIC_EnableIRQ>
}
 801588c:	bf00      	nop
 801588e:	3730      	adds	r7, #48	; 0x30
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}
 8015894:	40023800 	.word	0x40023800
 8015898:	40020000 	.word	0x40020000
 801589c:	2000027c 	.word	0x2000027c
 80158a0:	40026088 	.word	0x40026088
 80158a4:	40000800 	.word	0x40000800
 80158a8:	40014800 	.word	0x40014800

080158ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b088      	sub	sp, #32
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80158b4:	f107 030c 	add.w	r3, r7, #12
 80158b8:	2200      	movs	r2, #0
 80158ba:	601a      	str	r2, [r3, #0]
 80158bc:	605a      	str	r2, [r3, #4]
 80158be:	609a      	str	r2, [r3, #8]
 80158c0:	60da      	str	r2, [r3, #12]
 80158c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	4a12      	ldr	r2, [pc, #72]	; (8015914 <HAL_TIM_MspPostInit+0x68>)
 80158ca:	4293      	cmp	r3, r2
 80158cc:	d11d      	bne.n	801590a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80158ce:	2300      	movs	r3, #0
 80158d0:	60bb      	str	r3, [r7, #8]
 80158d2:	4b11      	ldr	r3, [pc, #68]	; (8015918 <HAL_TIM_MspPostInit+0x6c>)
 80158d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158d6:	4a10      	ldr	r2, [pc, #64]	; (8015918 <HAL_TIM_MspPostInit+0x6c>)
 80158d8:	f043 0302 	orr.w	r3, r3, #2
 80158dc:	6313      	str	r3, [r2, #48]	; 0x30
 80158de:	4b0e      	ldr	r3, [pc, #56]	; (8015918 <HAL_TIM_MspPostInit+0x6c>)
 80158e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158e2:	f003 0302 	and.w	r3, r3, #2
 80158e6:	60bb      	str	r3, [r7, #8]
 80158e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 80158ea:	2340      	movs	r3, #64	; 0x40
 80158ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80158ee:	2302      	movs	r3, #2
 80158f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158f2:	2300      	movs	r3, #0
 80158f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80158f6:	2300      	movs	r3, #0
 80158f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80158fa:	2302      	movs	r3, #2
 80158fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 80158fe:	f107 030c 	add.w	r3, r7, #12
 8015902:	4619      	mov	r1, r3
 8015904:	4805      	ldr	r0, [pc, #20]	; (801591c <HAL_TIM_MspPostInit+0x70>)
 8015906:	f001 f815 	bl	8016934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 801590a:	bf00      	nop
 801590c:	3720      	adds	r7, #32
 801590e:	46bd      	mov	sp, r7
 8015910:	bd80      	pop	{r7, pc}
 8015912:	bf00      	nop
 8015914:	40000800 	.word	0x40000800
 8015918:	40023800 	.word	0x40023800
 801591c:	40020400 	.word	0x40020400

08015920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b08a      	sub	sp, #40	; 0x28
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015928:	f107 0314 	add.w	r3, r7, #20
 801592c:	2200      	movs	r2, #0
 801592e:	601a      	str	r2, [r3, #0]
 8015930:	605a      	str	r2, [r3, #4]
 8015932:	609a      	str	r2, [r3, #8]
 8015934:	60da      	str	r2, [r3, #12]
 8015936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	4a4b      	ldr	r2, [pc, #300]	; (8015a6c <HAL_UART_MspInit+0x14c>)
 801593e:	4293      	cmp	r3, r2
 8015940:	f040 8090 	bne.w	8015a64 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8015944:	2300      	movs	r3, #0
 8015946:	613b      	str	r3, [r7, #16]
 8015948:	4b49      	ldr	r3, [pc, #292]	; (8015a70 <HAL_UART_MspInit+0x150>)
 801594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801594c:	4a48      	ldr	r2, [pc, #288]	; (8015a70 <HAL_UART_MspInit+0x150>)
 801594e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015952:	6413      	str	r3, [r2, #64]	; 0x40
 8015954:	4b46      	ldr	r3, [pc, #280]	; (8015a70 <HAL_UART_MspInit+0x150>)
 8015956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801595c:	613b      	str	r3, [r7, #16]
 801595e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015960:	2300      	movs	r3, #0
 8015962:	60fb      	str	r3, [r7, #12]
 8015964:	4b42      	ldr	r3, [pc, #264]	; (8015a70 <HAL_UART_MspInit+0x150>)
 8015966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015968:	4a41      	ldr	r2, [pc, #260]	; (8015a70 <HAL_UART_MspInit+0x150>)
 801596a:	f043 0301 	orr.w	r3, r3, #1
 801596e:	6313      	str	r3, [r2, #48]	; 0x30
 8015970:	4b3f      	ldr	r3, [pc, #252]	; (8015a70 <HAL_UART_MspInit+0x150>)
 8015972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015974:	f003 0301 	and.w	r3, r3, #1
 8015978:	60fb      	str	r3, [r7, #12]
 801597a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801597c:	230c      	movs	r3, #12
 801597e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015980:	2302      	movs	r3, #2
 8015982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015984:	2300      	movs	r3, #0
 8015986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015988:	2303      	movs	r3, #3
 801598a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801598c:	2307      	movs	r3, #7
 801598e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015990:	f107 0314 	add.w	r3, r7, #20
 8015994:	4619      	mov	r1, r3
 8015996:	4837      	ldr	r0, [pc, #220]	; (8015a74 <HAL_UART_MspInit+0x154>)
 8015998:	f000 ffcc 	bl	8016934 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream7;
 801599c:	4b36      	ldr	r3, [pc, #216]	; (8015a78 <HAL_UART_MspInit+0x158>)
 801599e:	4a37      	ldr	r2, [pc, #220]	; (8015a7c <HAL_UART_MspInit+0x15c>)
 80159a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 80159a2:	4b35      	ldr	r3, [pc, #212]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159a4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80159a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80159aa:	4b33      	ldr	r3, [pc, #204]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159ac:	2200      	movs	r2, #0
 80159ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80159b0:	4b31      	ldr	r3, [pc, #196]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159b2:	2200      	movs	r2, #0
 80159b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80159b6:	4b30      	ldr	r3, [pc, #192]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80159bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80159be:	4b2e      	ldr	r3, [pc, #184]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159c0:	2200      	movs	r2, #0
 80159c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80159c4:	4b2c      	ldr	r3, [pc, #176]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159c6:	2200      	movs	r2, #0
 80159c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80159ca:	4b2b      	ldr	r3, [pc, #172]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159cc:	2200      	movs	r2, #0
 80159ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80159d0:	4b29      	ldr	r3, [pc, #164]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159d2:	2200      	movs	r2, #0
 80159d4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80159d6:	4b28      	ldr	r3, [pc, #160]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159d8:	2200      	movs	r2, #0
 80159da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80159dc:	4826      	ldr	r0, [pc, #152]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159de:	f000 fb99 	bl	8016114 <HAL_DMA_Init>
 80159e2:	4603      	mov	r3, r0
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d001      	beq.n	80159ec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80159e8:	f7ed ff76 	bl	80038d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	4a22      	ldr	r2, [pc, #136]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159f0:	639a      	str	r2, [r3, #56]	; 0x38
 80159f2:	4a21      	ldr	r2, [pc, #132]	; (8015a78 <HAL_UART_MspInit+0x158>)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80159f8:	4b21      	ldr	r3, [pc, #132]	; (8015a80 <HAL_UART_MspInit+0x160>)
 80159fa:	4a22      	ldr	r2, [pc, #136]	; (8015a84 <HAL_UART_MspInit+0x164>)
 80159fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80159fe:	4b20      	ldr	r3, [pc, #128]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015a04:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015a06:	4b1e      	ldr	r3, [pc, #120]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a08:	2240      	movs	r2, #64	; 0x40
 8015a0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8015a0c:	4b1c      	ldr	r3, [pc, #112]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a0e:	2200      	movs	r2, #0
 8015a10:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015a12:	4b1b      	ldr	r3, [pc, #108]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015a18:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8015a1a:	4b19      	ldr	r3, [pc, #100]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8015a20:	4b17      	ldr	r3, [pc, #92]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a22:	2200      	movs	r2, #0
 8015a24:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8015a26:	4b16      	ldr	r3, [pc, #88]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a28:	2200      	movs	r2, #0
 8015a2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8015a2c:	4b14      	ldr	r3, [pc, #80]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a2e:	2200      	movs	r2, #0
 8015a30:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8015a32:	4b13      	ldr	r3, [pc, #76]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a34:	2200      	movs	r2, #0
 8015a36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8015a38:	4811      	ldr	r0, [pc, #68]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a3a:	f000 fb6b 	bl	8016114 <HAL_DMA_Init>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d001      	beq.n	8015a48 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8015a44:	f7ed ff48 	bl	80038d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	4a0d      	ldr	r2, [pc, #52]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8015a4e:	4a0c      	ldr	r2, [pc, #48]	; (8015a80 <HAL_UART_MspInit+0x160>)
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8015a54:	2200      	movs	r2, #0
 8015a56:	2100      	movs	r1, #0
 8015a58:	2026      	movs	r0, #38	; 0x26
 8015a5a:	f000 fb24 	bl	80160a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8015a5e:	2026      	movs	r0, #38	; 0x26
 8015a60:	f000 fb3d 	bl	80160de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8015a64:	bf00      	nop
 8015a66:	3728      	adds	r7, #40	; 0x28
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}
 8015a6c:	40004400 	.word	0x40004400
 8015a70:	40023800 	.word	0x40023800
 8015a74:	40020000 	.word	0x40020000
 8015a78:	20000320 	.word	0x20000320
 8015a7c:	400260b8 	.word	0x400260b8
 8015a80:	20000380 	.word	0x20000380
 8015a84:	400260a0 	.word	0x400260a0

08015a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015a88:	b480      	push	{r7}
 8015a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8015a8c:	e7fe      	b.n	8015a8c <NMI_Handler+0x4>

08015a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015a8e:	b480      	push	{r7}
 8015a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015a92:	e7fe      	b.n	8015a92 <HardFault_Handler+0x4>

08015a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015a94:	b480      	push	{r7}
 8015a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015a98:	e7fe      	b.n	8015a98 <MemManage_Handler+0x4>

08015a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015a9a:	b480      	push	{r7}
 8015a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015a9e:	e7fe      	b.n	8015a9e <BusFault_Handler+0x4>

08015aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015aa4:	e7fe      	b.n	8015aa4 <UsageFault_Handler+0x4>

08015aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8015aa6:	b480      	push	{r7}
 8015aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8015aaa:	bf00      	nop
 8015aac:	46bd      	mov	sp, r7
 8015aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab2:	4770      	bx	lr

08015ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015ab4:	b480      	push	{r7}
 8015ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015ab8:	bf00      	nop
 8015aba:	46bd      	mov	sp, r7
 8015abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac0:	4770      	bx	lr

08015ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8015ac2:	b480      	push	{r7}
 8015ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8015ac6:	bf00      	nop
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr

08015ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8015ad4:	f000 f9c8 	bl	8015e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015ad8:	bf00      	nop
 8015ada:	bd80      	pop	{r7, pc}

08015adc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8015ae0:	2004      	movs	r0, #4
 8015ae2:	f001 f8dd 	bl	8016ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8015ae6:	bf00      	nop
 8015ae8:	bd80      	pop	{r7, pc}
	...

08015aec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8015af0:	4802      	ldr	r0, [pc, #8]	; (8015afc <DMA1_Stream5_IRQHandler+0x10>)
 8015af2:	f000 fca7 	bl	8016444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8015af6:	bf00      	nop
 8015af8:	bd80      	pop	{r7, pc}
 8015afa:	bf00      	nop
 8015afc:	2000027c 	.word	0x2000027c

08015b00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8015b04:	4802      	ldr	r0, [pc, #8]	; (8015b10 <DMA1_Stream6_IRQHandler+0x10>)
 8015b06:	f000 fc9d 	bl	8016444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8015b0a:	bf00      	nop
 8015b0c:	bd80      	pop	{r7, pc}
 8015b0e:	bf00      	nop
 8015b10:	20000380 	.word	0x20000380

08015b14 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8015b14:	b580      	push	{r7, lr}
 8015b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8015b18:	4802      	ldr	r0, [pc, #8]	; (8015b24 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8015b1a:	f004 fe3e 	bl	801a79a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8015b1e:	bf00      	nop
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	20000234 	.word	0x20000234

08015b28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8015b2c:	4802      	ldr	r0, [pc, #8]	; (8015b38 <I2C1_EV_IRQHandler+0x10>)
 8015b2e:	f001 fef7 	bl	8017920 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8015b32:	bf00      	nop
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	200000fc 	.word	0x200000fc

08015b3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8015b40:	4802      	ldr	r0, [pc, #8]	; (8015b4c <I2C1_ER_IRQHandler+0x10>)
 8015b42:	f002 f85e 	bl	8017c02 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8015b46:	bf00      	nop
 8015b48:	bd80      	pop	{r7, pc}
 8015b4a:	bf00      	nop
 8015b4c:	200000fc 	.word	0x200000fc

08015b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8015b54:	4802      	ldr	r0, [pc, #8]	; (8015b60 <USART2_IRQHandler+0x10>)
 8015b56:	f005 ff27 	bl	801b9a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8015b5a:	bf00      	nop
 8015b5c:	bd80      	pop	{r7, pc}
 8015b5e:	bf00      	nop
 8015b60:	200002dc 	.word	0x200002dc

08015b64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8015b68:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8015b6c:	f001 f898 	bl	8016ca0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8015b70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015b74:	f001 f894 	bl	8016ca0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8015b78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8015b7c:	f001 f890 	bl	8016ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8015b80:	bf00      	nop
 8015b82:	bd80      	pop	{r7, pc}

08015b84 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8015b88:	4802      	ldr	r0, [pc, #8]	; (8015b94 <DMA1_Stream7_IRQHandler+0x10>)
 8015b8a:	f000 fc5b 	bl	8016444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8015b8e:	bf00      	nop
 8015b90:	bd80      	pop	{r7, pc}
 8015b92:	bf00      	nop
 8015b94:	20000320 	.word	0x20000320

08015b98 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8015b9c:	4802      	ldr	r0, [pc, #8]	; (8015ba8 <I2C3_EV_IRQHandler+0x10>)
 8015b9e:	f001 febf 	bl	8017920 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8015ba2:	bf00      	nop
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	20000150 	.word	0x20000150

08015bac <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8015bb0:	4802      	ldr	r0, [pc, #8]	; (8015bbc <I2C3_ER_IRQHandler+0x10>)
 8015bb2:	f002 f826 	bl	8017c02 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8015bb6:	bf00      	nop
 8015bb8:	bd80      	pop	{r7, pc}
 8015bba:	bf00      	nop
 8015bbc:	20000150 	.word	0x20000150

08015bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8015bc0:	b480      	push	{r7}
 8015bc2:	af00      	add	r7, sp, #0
	return 1;
 8015bc4:	2301      	movs	r3, #1
}
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bce:	4770      	bx	lr

08015bd0 <_kill>:

int _kill(int pid, int sig)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8015bda:	f007 ff31 	bl	801da40 <__errno>
 8015bde:	4603      	mov	r3, r0
 8015be0:	2216      	movs	r2, #22
 8015be2:	601a      	str	r2, [r3, #0]
	return -1;
 8015be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	3708      	adds	r7, #8
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <_exit>:

void _exit (int status)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8015bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f7ff ffe7 	bl	8015bd0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8015c02:	e7fe      	b.n	8015c02 <_exit+0x12>

08015c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b086      	sub	sp, #24
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	60f8      	str	r0, [r7, #12]
 8015c0c:	60b9      	str	r1, [r7, #8]
 8015c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015c10:	2300      	movs	r3, #0
 8015c12:	617b      	str	r3, [r7, #20]
 8015c14:	e00a      	b.n	8015c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8015c16:	f3af 8000 	nop.w
 8015c1a:	4601      	mov	r1, r0
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	1c5a      	adds	r2, r3, #1
 8015c20:	60ba      	str	r2, [r7, #8]
 8015c22:	b2ca      	uxtb	r2, r1
 8015c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015c26:	697b      	ldr	r3, [r7, #20]
 8015c28:	3301      	adds	r3, #1
 8015c2a:	617b      	str	r3, [r7, #20]
 8015c2c:	697a      	ldr	r2, [r7, #20]
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	dbf0      	blt.n	8015c16 <_read+0x12>
	}

return len;
 8015c34:	687b      	ldr	r3, [r7, #4]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3718      	adds	r7, #24
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}

08015c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8015c3e:	b580      	push	{r7, lr}
 8015c40:	b086      	sub	sp, #24
 8015c42:	af00      	add	r7, sp, #0
 8015c44:	60f8      	str	r0, [r7, #12]
 8015c46:	60b9      	str	r1, [r7, #8]
 8015c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	617b      	str	r3, [r7, #20]
 8015c4e:	e009      	b.n	8015c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	1c5a      	adds	r2, r3, #1
 8015c54:	60ba      	str	r2, [r7, #8]
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	3301      	adds	r3, #1
 8015c62:	617b      	str	r3, [r7, #20]
 8015c64:	697a      	ldr	r2, [r7, #20]
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	dbf1      	blt.n	8015c50 <_write+0x12>
	}
	return len;
 8015c6c:	687b      	ldr	r3, [r7, #4]
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3718      	adds	r7, #24
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}

08015c76 <_close>:

int _close(int file)
{
 8015c76:	b480      	push	{r7}
 8015c78:	b083      	sub	sp, #12
 8015c7a:	af00      	add	r7, sp, #0
 8015c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8015c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	370c      	adds	r7, #12
 8015c86:	46bd      	mov	sp, r7
 8015c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8c:	4770      	bx	lr

08015c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8015c8e:	b480      	push	{r7}
 8015c90:	b083      	sub	sp, #12
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
 8015c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8015ca0:	2300      	movs	r3, #0
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	370c      	adds	r7, #12
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cac:	4770      	bx	lr

08015cae <_isatty>:

int _isatty(int file)
{
 8015cae:	b480      	push	{r7}
 8015cb0:	b083      	sub	sp, #12
 8015cb2:	af00      	add	r7, sp, #0
 8015cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8015cb6:	2301      	movs	r3, #1
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	370c      	adds	r7, #12
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr

08015cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b085      	sub	sp, #20
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	607a      	str	r2, [r7, #4]
	return 0;
 8015cd0:	2300      	movs	r3, #0
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	3714      	adds	r7, #20
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cdc:	4770      	bx	lr
	...

08015ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b086      	sub	sp, #24
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8015ce8:	4a14      	ldr	r2, [pc, #80]	; (8015d3c <_sbrk+0x5c>)
 8015cea:	4b15      	ldr	r3, [pc, #84]	; (8015d40 <_sbrk+0x60>)
 8015cec:	1ad3      	subs	r3, r2, r3
 8015cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015cf4:	4b13      	ldr	r3, [pc, #76]	; (8015d44 <_sbrk+0x64>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d102      	bne.n	8015d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8015cfc:	4b11      	ldr	r3, [pc, #68]	; (8015d44 <_sbrk+0x64>)
 8015cfe:	4a12      	ldr	r2, [pc, #72]	; (8015d48 <_sbrk+0x68>)
 8015d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8015d02:	4b10      	ldr	r3, [pc, #64]	; (8015d44 <_sbrk+0x64>)
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	4413      	add	r3, r2
 8015d0a:	693a      	ldr	r2, [r7, #16]
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	d207      	bcs.n	8015d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8015d10:	f007 fe96 	bl	801da40 <__errno>
 8015d14:	4603      	mov	r3, r0
 8015d16:	220c      	movs	r2, #12
 8015d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8015d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015d1e:	e009      	b.n	8015d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8015d20:	4b08      	ldr	r3, [pc, #32]	; (8015d44 <_sbrk+0x64>)
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8015d26:	4b07      	ldr	r3, [pc, #28]	; (8015d44 <_sbrk+0x64>)
 8015d28:	681a      	ldr	r2, [r3, #0]
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	4413      	add	r3, r2
 8015d2e:	4a05      	ldr	r2, [pc, #20]	; (8015d44 <_sbrk+0x64>)
 8015d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8015d32:	68fb      	ldr	r3, [r7, #12]
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3718      	adds	r7, #24
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	20020000 	.word	0x20020000
 8015d40:	00000400 	.word	0x00000400
 8015d44:	20000628 	.word	0x20000628
 8015d48:	20000640 	.word	0x20000640

08015d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015d4c:	b480      	push	{r7}
 8015d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8015d50:	4b06      	ldr	r3, [pc, #24]	; (8015d6c <SystemInit+0x20>)
 8015d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015d56:	4a05      	ldr	r2, [pc, #20]	; (8015d6c <SystemInit+0x20>)
 8015d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8015d60:	bf00      	nop
 8015d62:	46bd      	mov	sp, r7
 8015d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d68:	4770      	bx	lr
 8015d6a:	bf00      	nop
 8015d6c:	e000ed00 	.word	0xe000ed00

08015d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8015d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015da8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015d74:	480d      	ldr	r0, [pc, #52]	; (8015dac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015d76:	490e      	ldr	r1, [pc, #56]	; (8015db0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015d78:	4a0e      	ldr	r2, [pc, #56]	; (8015db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8015d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015d7c:	e002      	b.n	8015d84 <LoopCopyDataInit>

08015d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015d82:	3304      	adds	r3, #4

08015d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015d88:	d3f9      	bcc.n	8015d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015d8a:	4a0b      	ldr	r2, [pc, #44]	; (8015db8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8015d8c:	4c0b      	ldr	r4, [pc, #44]	; (8015dbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8015d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015d90:	e001      	b.n	8015d96 <LoopFillZerobss>

08015d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015d94:	3204      	adds	r2, #4

08015d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015d98:	d3fb      	bcc.n	8015d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8015d9a:	f7ff ffd7 	bl	8015d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015d9e:	f007 fe67 	bl	801da70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015da2:	f7eb fcbf 	bl	8001724 <main>
  bx  lr    
 8015da6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8015da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8015dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015db0:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8015db4:	08029b98 	.word	0x08029b98
  ldr r2, =_sbss
 8015db8:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8015dbc:	20000640 	.word	0x20000640

08015dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015dc0:	e7fe      	b.n	8015dc0 <ADC_IRQHandler>
	...

08015dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015dc8:	4b0e      	ldr	r3, [pc, #56]	; (8015e04 <HAL_Init+0x40>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	4a0d      	ldr	r2, [pc, #52]	; (8015e04 <HAL_Init+0x40>)
 8015dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015dd4:	4b0b      	ldr	r3, [pc, #44]	; (8015e04 <HAL_Init+0x40>)
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	4a0a      	ldr	r2, [pc, #40]	; (8015e04 <HAL_Init+0x40>)
 8015dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015de0:	4b08      	ldr	r3, [pc, #32]	; (8015e04 <HAL_Init+0x40>)
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	4a07      	ldr	r2, [pc, #28]	; (8015e04 <HAL_Init+0x40>)
 8015de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015dec:	2003      	movs	r0, #3
 8015dee:	f000 f94f 	bl	8016090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015df2:	2000      	movs	r0, #0
 8015df4:	f000 f808 	bl	8015e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015df8:	f7ff fbc2 	bl	8015580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015dfc:	2300      	movs	r3, #0
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop
 8015e04:	40023c00 	.word	0x40023c00

08015e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8015e10:	4b12      	ldr	r3, [pc, #72]	; (8015e5c <HAL_InitTick+0x54>)
 8015e12:	681a      	ldr	r2, [r3, #0]
 8015e14:	4b12      	ldr	r3, [pc, #72]	; (8015e60 <HAL_InitTick+0x58>)
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	4619      	mov	r1, r3
 8015e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e26:	4618      	mov	r0, r3
 8015e28:	f000 f967 	bl	80160fa <HAL_SYSTICK_Config>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d001      	beq.n	8015e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8015e32:	2301      	movs	r3, #1
 8015e34:	e00e      	b.n	8015e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	2b0f      	cmp	r3, #15
 8015e3a:	d80a      	bhi.n	8015e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	6879      	ldr	r1, [r7, #4]
 8015e40:	f04f 30ff 	mov.w	r0, #4294967295
 8015e44:	f000 f92f 	bl	80160a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015e48:	4a06      	ldr	r2, [pc, #24]	; (8015e64 <HAL_InitTick+0x5c>)
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	e000      	b.n	8015e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8015e52:	2301      	movs	r3, #1
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	3708      	adds	r7, #8
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd80      	pop	{r7, pc}
 8015e5c:	20000068 	.word	0x20000068
 8015e60:	20000070 	.word	0x20000070
 8015e64:	2000006c 	.word	0x2000006c

08015e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015e68:	b480      	push	{r7}
 8015e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015e6c:	4b06      	ldr	r3, [pc, #24]	; (8015e88 <HAL_IncTick+0x20>)
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	461a      	mov	r2, r3
 8015e72:	4b06      	ldr	r3, [pc, #24]	; (8015e8c <HAL_IncTick+0x24>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	4413      	add	r3, r2
 8015e78:	4a04      	ldr	r2, [pc, #16]	; (8015e8c <HAL_IncTick+0x24>)
 8015e7a:	6013      	str	r3, [r2, #0]
}
 8015e7c:	bf00      	nop
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e84:	4770      	bx	lr
 8015e86:	bf00      	nop
 8015e88:	20000070 	.word	0x20000070
 8015e8c:	2000062c 	.word	0x2000062c

08015e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015e90:	b480      	push	{r7}
 8015e92:	af00      	add	r7, sp, #0
  return uwTick;
 8015e94:	4b03      	ldr	r3, [pc, #12]	; (8015ea4 <HAL_GetTick+0x14>)
 8015e96:	681b      	ldr	r3, [r3, #0]
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea0:	4770      	bx	lr
 8015ea2:	bf00      	nop
 8015ea4:	2000062c 	.word	0x2000062c

08015ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b084      	sub	sp, #16
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015eb0:	f7ff ffee 	bl	8015e90 <HAL_GetTick>
 8015eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ec0:	d005      	beq.n	8015ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015ec2:	4b0a      	ldr	r3, [pc, #40]	; (8015eec <HAL_Delay+0x44>)
 8015ec4:	781b      	ldrb	r3, [r3, #0]
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	4413      	add	r3, r2
 8015ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8015ece:	bf00      	nop
 8015ed0:	f7ff ffde 	bl	8015e90 <HAL_GetTick>
 8015ed4:	4602      	mov	r2, r0
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	1ad3      	subs	r3, r2, r3
 8015eda:	68fa      	ldr	r2, [r7, #12]
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d8f7      	bhi.n	8015ed0 <HAL_Delay+0x28>
  {
  }
}
 8015ee0:	bf00      	nop
 8015ee2:	bf00      	nop
 8015ee4:	3710      	adds	r7, #16
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	20000070 	.word	0x20000070

08015ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015ef0:	b480      	push	{r7}
 8015ef2:	b085      	sub	sp, #20
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f003 0307 	and.w	r3, r3, #7
 8015efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015f00:	4b0c      	ldr	r3, [pc, #48]	; (8015f34 <__NVIC_SetPriorityGrouping+0x44>)
 8015f02:	68db      	ldr	r3, [r3, #12]
 8015f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015f06:	68ba      	ldr	r2, [r7, #8]
 8015f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015f0c:	4013      	ands	r3, r2
 8015f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015f22:	4a04      	ldr	r2, [pc, #16]	; (8015f34 <__NVIC_SetPriorityGrouping+0x44>)
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	60d3      	str	r3, [r2, #12]
}
 8015f28:	bf00      	nop
 8015f2a:	3714      	adds	r7, #20
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f32:	4770      	bx	lr
 8015f34:	e000ed00 	.word	0xe000ed00

08015f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015f38:	b480      	push	{r7}
 8015f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015f3c:	4b04      	ldr	r3, [pc, #16]	; (8015f50 <__NVIC_GetPriorityGrouping+0x18>)
 8015f3e:	68db      	ldr	r3, [r3, #12]
 8015f40:	0a1b      	lsrs	r3, r3, #8
 8015f42:	f003 0307 	and.w	r3, r3, #7
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4e:	4770      	bx	lr
 8015f50:	e000ed00 	.word	0xe000ed00

08015f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015f54:	b480      	push	{r7}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	db0b      	blt.n	8015f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015f66:	79fb      	ldrb	r3, [r7, #7]
 8015f68:	f003 021f 	and.w	r2, r3, #31
 8015f6c:	4907      	ldr	r1, [pc, #28]	; (8015f8c <__NVIC_EnableIRQ+0x38>)
 8015f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f72:	095b      	lsrs	r3, r3, #5
 8015f74:	2001      	movs	r0, #1
 8015f76:	fa00 f202 	lsl.w	r2, r0, r2
 8015f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8015f7e:	bf00      	nop
 8015f80:	370c      	adds	r7, #12
 8015f82:	46bd      	mov	sp, r7
 8015f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f88:	4770      	bx	lr
 8015f8a:	bf00      	nop
 8015f8c:	e000e100 	.word	0xe000e100

08015f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015f90:	b480      	push	{r7}
 8015f92:	b083      	sub	sp, #12
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	4603      	mov	r3, r0
 8015f98:	6039      	str	r1, [r7, #0]
 8015f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	db0a      	blt.n	8015fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015fa4:	683b      	ldr	r3, [r7, #0]
 8015fa6:	b2da      	uxtb	r2, r3
 8015fa8:	490c      	ldr	r1, [pc, #48]	; (8015fdc <__NVIC_SetPriority+0x4c>)
 8015faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015fae:	0112      	lsls	r2, r2, #4
 8015fb0:	b2d2      	uxtb	r2, r2
 8015fb2:	440b      	add	r3, r1
 8015fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015fb8:	e00a      	b.n	8015fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	b2da      	uxtb	r2, r3
 8015fbe:	4908      	ldr	r1, [pc, #32]	; (8015fe0 <__NVIC_SetPriority+0x50>)
 8015fc0:	79fb      	ldrb	r3, [r7, #7]
 8015fc2:	f003 030f 	and.w	r3, r3, #15
 8015fc6:	3b04      	subs	r3, #4
 8015fc8:	0112      	lsls	r2, r2, #4
 8015fca:	b2d2      	uxtb	r2, r2
 8015fcc:	440b      	add	r3, r1
 8015fce:	761a      	strb	r2, [r3, #24]
}
 8015fd0:	bf00      	nop
 8015fd2:	370c      	adds	r7, #12
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fda:	4770      	bx	lr
 8015fdc:	e000e100 	.word	0xe000e100
 8015fe0:	e000ed00 	.word	0xe000ed00

08015fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b089      	sub	sp, #36	; 0x24
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	60f8      	str	r0, [r7, #12]
 8015fec:	60b9      	str	r1, [r7, #8]
 8015fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	f003 0307 	and.w	r3, r3, #7
 8015ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015ff8:	69fb      	ldr	r3, [r7, #28]
 8015ffa:	f1c3 0307 	rsb	r3, r3, #7
 8015ffe:	2b04      	cmp	r3, #4
 8016000:	bf28      	it	cs
 8016002:	2304      	movcs	r3, #4
 8016004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016006:	69fb      	ldr	r3, [r7, #28]
 8016008:	3304      	adds	r3, #4
 801600a:	2b06      	cmp	r3, #6
 801600c:	d902      	bls.n	8016014 <NVIC_EncodePriority+0x30>
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	3b03      	subs	r3, #3
 8016012:	e000      	b.n	8016016 <NVIC_EncodePriority+0x32>
 8016014:	2300      	movs	r3, #0
 8016016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016018:	f04f 32ff 	mov.w	r2, #4294967295
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	fa02 f303 	lsl.w	r3, r2, r3
 8016022:	43da      	mvns	r2, r3
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	401a      	ands	r2, r3
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801602c:	f04f 31ff 	mov.w	r1, #4294967295
 8016030:	697b      	ldr	r3, [r7, #20]
 8016032:	fa01 f303 	lsl.w	r3, r1, r3
 8016036:	43d9      	mvns	r1, r3
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801603c:	4313      	orrs	r3, r2
         );
}
 801603e:	4618      	mov	r0, r3
 8016040:	3724      	adds	r7, #36	; 0x24
 8016042:	46bd      	mov	sp, r7
 8016044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016048:	4770      	bx	lr
	...

0801604c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	3b01      	subs	r3, #1
 8016058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801605c:	d301      	bcc.n	8016062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801605e:	2301      	movs	r3, #1
 8016060:	e00f      	b.n	8016082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016062:	4a0a      	ldr	r2, [pc, #40]	; (801608c <SysTick_Config+0x40>)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	3b01      	subs	r3, #1
 8016068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801606a:	210f      	movs	r1, #15
 801606c:	f04f 30ff 	mov.w	r0, #4294967295
 8016070:	f7ff ff8e 	bl	8015f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016074:	4b05      	ldr	r3, [pc, #20]	; (801608c <SysTick_Config+0x40>)
 8016076:	2200      	movs	r2, #0
 8016078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801607a:	4b04      	ldr	r3, [pc, #16]	; (801608c <SysTick_Config+0x40>)
 801607c:	2207      	movs	r2, #7
 801607e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016080:	2300      	movs	r3, #0
}
 8016082:	4618      	mov	r0, r3
 8016084:	3708      	adds	r7, #8
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}
 801608a:	bf00      	nop
 801608c:	e000e010 	.word	0xe000e010

08016090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7ff ff29 	bl	8015ef0 <__NVIC_SetPriorityGrouping>
}
 801609e:	bf00      	nop
 80160a0:	3708      	adds	r7, #8
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80160a6:	b580      	push	{r7, lr}
 80160a8:	b086      	sub	sp, #24
 80160aa:	af00      	add	r7, sp, #0
 80160ac:	4603      	mov	r3, r0
 80160ae:	60b9      	str	r1, [r7, #8]
 80160b0:	607a      	str	r2, [r7, #4]
 80160b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80160b4:	2300      	movs	r3, #0
 80160b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80160b8:	f7ff ff3e 	bl	8015f38 <__NVIC_GetPriorityGrouping>
 80160bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	68b9      	ldr	r1, [r7, #8]
 80160c2:	6978      	ldr	r0, [r7, #20]
 80160c4:	f7ff ff8e 	bl	8015fe4 <NVIC_EncodePriority>
 80160c8:	4602      	mov	r2, r0
 80160ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160ce:	4611      	mov	r1, r2
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7ff ff5d 	bl	8015f90 <__NVIC_SetPriority>
}
 80160d6:	bf00      	nop
 80160d8:	3718      	adds	r7, #24
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80160de:	b580      	push	{r7, lr}
 80160e0:	b082      	sub	sp, #8
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	4603      	mov	r3, r0
 80160e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80160e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160ec:	4618      	mov	r0, r3
 80160ee:	f7ff ff31 	bl	8015f54 <__NVIC_EnableIRQ>
}
 80160f2:	bf00      	nop
 80160f4:	3708      	adds	r7, #8
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}

080160fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80160fa:	b580      	push	{r7, lr}
 80160fc:	b082      	sub	sp, #8
 80160fe:	af00      	add	r7, sp, #0
 8016100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f7ff ffa2 	bl	801604c <SysTick_Config>
 8016108:	4603      	mov	r3, r0
}
 801610a:	4618      	mov	r0, r3
 801610c:	3708      	adds	r7, #8
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
	...

08016114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b086      	sub	sp, #24
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801611c:	2300      	movs	r3, #0
 801611e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8016120:	f7ff feb6 	bl	8015e90 <HAL_GetTick>
 8016124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d101      	bne.n	8016130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801612c:	2301      	movs	r3, #1
 801612e:	e099      	b.n	8016264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2202      	movs	r2, #2
 8016134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2200      	movs	r2, #0
 801613c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	681a      	ldr	r2, [r3, #0]
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	f022 0201 	bic.w	r2, r2, #1
 801614e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016150:	e00f      	b.n	8016172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016152:	f7ff fe9d 	bl	8015e90 <HAL_GetTick>
 8016156:	4602      	mov	r2, r0
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	1ad3      	subs	r3, r2, r3
 801615c:	2b05      	cmp	r3, #5
 801615e:	d908      	bls.n	8016172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2220      	movs	r2, #32
 8016164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2203      	movs	r2, #3
 801616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801616e:	2303      	movs	r3, #3
 8016170:	e078      	b.n	8016264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	f003 0301 	and.w	r3, r3, #1
 801617c:	2b00      	cmp	r3, #0
 801617e:	d1e8      	bne.n	8016152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8016188:	697a      	ldr	r2, [r7, #20]
 801618a:	4b38      	ldr	r3, [pc, #224]	; (801626c <HAL_DMA_Init+0x158>)
 801618c:	4013      	ands	r3, r2
 801618e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	685a      	ldr	r2, [r3, #4]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	689b      	ldr	r3, [r3, #8]
 8016198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801619e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	691b      	ldr	r3, [r3, #16]
 80161a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80161aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	699b      	ldr	r3, [r3, #24]
 80161b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80161b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	6a1b      	ldr	r3, [r3, #32]
 80161bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80161be:	697a      	ldr	r2, [r7, #20]
 80161c0:	4313      	orrs	r3, r2
 80161c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c8:	2b04      	cmp	r3, #4
 80161ca:	d107      	bne.n	80161dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161d4:	4313      	orrs	r3, r2
 80161d6:	697a      	ldr	r2, [r7, #20]
 80161d8:	4313      	orrs	r3, r2
 80161da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	697a      	ldr	r2, [r7, #20]
 80161e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	695b      	ldr	r3, [r3, #20]
 80161ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	f023 0307 	bic.w	r3, r3, #7
 80161f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161f8:	697a      	ldr	r2, [r7, #20]
 80161fa:	4313      	orrs	r3, r2
 80161fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016202:	2b04      	cmp	r3, #4
 8016204:	d117      	bne.n	8016236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801620a:	697a      	ldr	r2, [r7, #20]
 801620c:	4313      	orrs	r3, r2
 801620e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00e      	beq.n	8016236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8016218:	6878      	ldr	r0, [r7, #4]
 801621a:	f000 fb0f 	bl	801683c <DMA_CheckFifoParam>
 801621e:	4603      	mov	r3, r0
 8016220:	2b00      	cmp	r3, #0
 8016222:	d008      	beq.n	8016236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2240      	movs	r2, #64	; 0x40
 8016228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2201      	movs	r2, #1
 801622e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8016232:	2301      	movs	r3, #1
 8016234:	e016      	b.n	8016264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	697a      	ldr	r2, [r7, #20]
 801623c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f000 fac6 	bl	80167d0 <DMA_CalcBaseAndBitshift>
 8016244:	4603      	mov	r3, r0
 8016246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801624c:	223f      	movs	r2, #63	; 0x3f
 801624e:	409a      	lsls	r2, r3
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2200      	movs	r2, #0
 8016258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	2201      	movs	r2, #1
 801625e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8016262:	2300      	movs	r3, #0
}
 8016264:	4618      	mov	r0, r3
 8016266:	3718      	adds	r7, #24
 8016268:	46bd      	mov	sp, r7
 801626a:	bd80      	pop	{r7, pc}
 801626c:	f010803f 	.word	0xf010803f

08016270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b086      	sub	sp, #24
 8016274:	af00      	add	r7, sp, #0
 8016276:	60f8      	str	r0, [r7, #12]
 8016278:	60b9      	str	r1, [r7, #8]
 801627a:	607a      	str	r2, [r7, #4]
 801627c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801627e:	2300      	movs	r3, #0
 8016280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801628e:	2b01      	cmp	r3, #1
 8016290:	d101      	bne.n	8016296 <HAL_DMA_Start_IT+0x26>
 8016292:	2302      	movs	r3, #2
 8016294:	e040      	b.n	8016318 <HAL_DMA_Start_IT+0xa8>
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2201      	movs	r2, #1
 801629a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80162a4:	b2db      	uxtb	r3, r3
 80162a6:	2b01      	cmp	r3, #1
 80162a8:	d12f      	bne.n	801630a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	2202      	movs	r2, #2
 80162ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	2200      	movs	r2, #0
 80162b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	687a      	ldr	r2, [r7, #4]
 80162bc:	68b9      	ldr	r1, [r7, #8]
 80162be:	68f8      	ldr	r0, [r7, #12]
 80162c0:	f000 fa58 	bl	8016774 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80162c8:	223f      	movs	r2, #63	; 0x3f
 80162ca:	409a      	lsls	r2, r3
 80162cc:	693b      	ldr	r3, [r7, #16]
 80162ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	681a      	ldr	r2, [r3, #0]
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	f042 0216 	orr.w	r2, r2, #22
 80162de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d007      	beq.n	80162f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	681a      	ldr	r2, [r3, #0]
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	f042 0208 	orr.w	r2, r2, #8
 80162f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	f042 0201 	orr.w	r2, r2, #1
 8016306:	601a      	str	r2, [r3, #0]
 8016308:	e005      	b.n	8016316 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2200      	movs	r2, #0
 801630e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8016312:	2302      	movs	r3, #2
 8016314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8016316:	7dfb      	ldrb	r3, [r7, #23]
}
 8016318:	4618      	mov	r0, r3
 801631a:	3718      	adds	r7, #24
 801631c:	46bd      	mov	sp, r7
 801631e:	bd80      	pop	{r7, pc}

08016320 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b084      	sub	sp, #16
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801632c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801632e:	f7ff fdaf 	bl	8015e90 <HAL_GetTick>
 8016332:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801633a:	b2db      	uxtb	r3, r3
 801633c:	2b02      	cmp	r3, #2
 801633e:	d008      	beq.n	8016352 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	2280      	movs	r2, #128	; 0x80
 8016344:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2200      	movs	r2, #0
 801634a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801634e:	2301      	movs	r3, #1
 8016350:	e052      	b.n	80163f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	681a      	ldr	r2, [r3, #0]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	f022 0216 	bic.w	r2, r2, #22
 8016360:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	695a      	ldr	r2, [r3, #20]
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016370:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016376:	2b00      	cmp	r3, #0
 8016378:	d103      	bne.n	8016382 <HAL_DMA_Abort+0x62>
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801637e:	2b00      	cmp	r3, #0
 8016380:	d007      	beq.n	8016392 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	681a      	ldr	r2, [r3, #0]
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	f022 0208 	bic.w	r2, r2, #8
 8016390:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	681a      	ldr	r2, [r3, #0]
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	f022 0201 	bic.w	r2, r2, #1
 80163a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80163a2:	e013      	b.n	80163cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80163a4:	f7ff fd74 	bl	8015e90 <HAL_GetTick>
 80163a8:	4602      	mov	r2, r0
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	1ad3      	subs	r3, r2, r3
 80163ae:	2b05      	cmp	r3, #5
 80163b0:	d90c      	bls.n	80163cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2220      	movs	r2, #32
 80163b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2203      	movs	r2, #3
 80163bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	2200      	movs	r2, #0
 80163c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80163c8:	2303      	movs	r3, #3
 80163ca:	e015      	b.n	80163f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	f003 0301 	and.w	r3, r3, #1
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d1e4      	bne.n	80163a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80163de:	223f      	movs	r2, #63	; 0x3f
 80163e0:	409a      	lsls	r2, r3
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	2201      	movs	r2, #1
 80163ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	2200      	movs	r2, #0
 80163f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80163f6:	2300      	movs	r3, #0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3710      	adds	r7, #16
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016400:	b480      	push	{r7}
 8016402:	b083      	sub	sp, #12
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801640e:	b2db      	uxtb	r3, r3
 8016410:	2b02      	cmp	r3, #2
 8016412:	d004      	beq.n	801641e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2280      	movs	r2, #128	; 0x80
 8016418:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801641a:	2301      	movs	r3, #1
 801641c:	e00c      	b.n	8016438 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2205      	movs	r2, #5
 8016422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	681a      	ldr	r2, [r3, #0]
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	f022 0201 	bic.w	r2, r2, #1
 8016434:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016436:	2300      	movs	r3, #0
}
 8016438:	4618      	mov	r0, r3
 801643a:	370c      	adds	r7, #12
 801643c:	46bd      	mov	sp, r7
 801643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016442:	4770      	bx	lr

08016444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b086      	sub	sp, #24
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801644c:	2300      	movs	r3, #0
 801644e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016450:	4b8e      	ldr	r3, [pc, #568]	; (801668c <HAL_DMA_IRQHandler+0x248>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	4a8e      	ldr	r2, [pc, #568]	; (8016690 <HAL_DMA_IRQHandler+0x24c>)
 8016456:	fba2 2303 	umull	r2, r3, r2, r3
 801645a:	0a9b      	lsrs	r3, r3, #10
 801645c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016462:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8016464:	693b      	ldr	r3, [r7, #16]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801646e:	2208      	movs	r2, #8
 8016470:	409a      	lsls	r2, r3
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	4013      	ands	r3, r2
 8016476:	2b00      	cmp	r3, #0
 8016478:	d01a      	beq.n	80164b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	f003 0304 	and.w	r3, r3, #4
 8016484:	2b00      	cmp	r3, #0
 8016486:	d013      	beq.n	80164b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	681a      	ldr	r2, [r3, #0]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	f022 0204 	bic.w	r2, r2, #4
 8016496:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801649c:	2208      	movs	r2, #8
 801649e:	409a      	lsls	r2, r3
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80164a8:	f043 0201 	orr.w	r2, r3, #1
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80164b4:	2201      	movs	r2, #1
 80164b6:	409a      	lsls	r2, r3
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	4013      	ands	r3, r2
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d012      	beq.n	80164e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	695b      	ldr	r3, [r3, #20]
 80164c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00b      	beq.n	80164e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80164d2:	2201      	movs	r2, #1
 80164d4:	409a      	lsls	r2, r3
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80164de:	f043 0202 	orr.w	r2, r3, #2
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80164ea:	2204      	movs	r2, #4
 80164ec:	409a      	lsls	r2, r3
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	4013      	ands	r3, r2
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d012      	beq.n	801651c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	f003 0302 	and.w	r3, r3, #2
 8016500:	2b00      	cmp	r3, #0
 8016502:	d00b      	beq.n	801651c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016508:	2204      	movs	r2, #4
 801650a:	409a      	lsls	r2, r3
 801650c:	693b      	ldr	r3, [r7, #16]
 801650e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016514:	f043 0204 	orr.w	r2, r3, #4
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016520:	2210      	movs	r2, #16
 8016522:	409a      	lsls	r2, r3
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	4013      	ands	r3, r2
 8016528:	2b00      	cmp	r3, #0
 801652a:	d043      	beq.n	80165b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f003 0308 	and.w	r3, r3, #8
 8016536:	2b00      	cmp	r3, #0
 8016538:	d03c      	beq.n	80165b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801653e:	2210      	movs	r2, #16
 8016540:	409a      	lsls	r2, r3
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016550:	2b00      	cmp	r3, #0
 8016552:	d018      	beq.n	8016586 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801655e:	2b00      	cmp	r3, #0
 8016560:	d108      	bne.n	8016574 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016566:	2b00      	cmp	r3, #0
 8016568:	d024      	beq.n	80165b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	4798      	blx	r3
 8016572:	e01f      	b.n	80165b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016578:	2b00      	cmp	r3, #0
 801657a:	d01b      	beq.n	80165b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	4798      	blx	r3
 8016584:	e016      	b.n	80165b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016590:	2b00      	cmp	r3, #0
 8016592:	d107      	bne.n	80165a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	681a      	ldr	r2, [r3, #0]
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	f022 0208 	bic.w	r2, r2, #8
 80165a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d003      	beq.n	80165b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165b0:	6878      	ldr	r0, [r7, #4]
 80165b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80165b8:	2220      	movs	r2, #32
 80165ba:	409a      	lsls	r2, r3
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	4013      	ands	r3, r2
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	f000 808f 	beq.w	80166e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	f003 0310 	and.w	r3, r3, #16
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	f000 8087 	beq.w	80166e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80165da:	2220      	movs	r2, #32
 80165dc:	409a      	lsls	r2, r3
 80165de:	693b      	ldr	r3, [r7, #16]
 80165e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	2b05      	cmp	r3, #5
 80165ec:	d136      	bne.n	801665c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	681a      	ldr	r2, [r3, #0]
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	f022 0216 	bic.w	r2, r2, #22
 80165fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	695a      	ldr	r2, [r3, #20]
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801660c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016612:	2b00      	cmp	r3, #0
 8016614:	d103      	bne.n	801661e <HAL_DMA_IRQHandler+0x1da>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801661a:	2b00      	cmp	r3, #0
 801661c:	d007      	beq.n	801662e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	f022 0208 	bic.w	r2, r2, #8
 801662c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016632:	223f      	movs	r2, #63	; 0x3f
 8016634:	409a      	lsls	r2, r3
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2201      	movs	r2, #1
 801663e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2200      	movs	r2, #0
 8016646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801664e:	2b00      	cmp	r3, #0
 8016650:	d07e      	beq.n	8016750 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	4798      	blx	r3
        }
        return;
 801665a:	e079      	b.n	8016750 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016666:	2b00      	cmp	r3, #0
 8016668:	d01d      	beq.n	80166a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016674:	2b00      	cmp	r3, #0
 8016676:	d10d      	bne.n	8016694 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801667c:	2b00      	cmp	r3, #0
 801667e:	d031      	beq.n	80166e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	4798      	blx	r3
 8016688:	e02c      	b.n	80166e4 <HAL_DMA_IRQHandler+0x2a0>
 801668a:	bf00      	nop
 801668c:	20000068 	.word	0x20000068
 8016690:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016698:	2b00      	cmp	r3, #0
 801669a:	d023      	beq.n	80166e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166a0:	6878      	ldr	r0, [r7, #4]
 80166a2:	4798      	blx	r3
 80166a4:	e01e      	b.n	80166e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d10f      	bne.n	80166d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	681a      	ldr	r2, [r3, #0]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	f022 0210 	bic.w	r2, r2, #16
 80166c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2201      	movs	r2, #1
 80166c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2200      	movs	r2, #0
 80166d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d003      	beq.n	80166e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d032      	beq.n	8016752 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166f0:	f003 0301 	and.w	r3, r3, #1
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d022      	beq.n	801673e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	2205      	movs	r2, #5
 80166fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	681a      	ldr	r2, [r3, #0]
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f022 0201 	bic.w	r2, r2, #1
 801670e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	3301      	adds	r3, #1
 8016714:	60bb      	str	r3, [r7, #8]
 8016716:	697a      	ldr	r2, [r7, #20]
 8016718:	429a      	cmp	r2, r3
 801671a:	d307      	bcc.n	801672c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	f003 0301 	and.w	r3, r3, #1
 8016726:	2b00      	cmp	r3, #0
 8016728:	d1f2      	bne.n	8016710 <HAL_DMA_IRQHandler+0x2cc>
 801672a:	e000      	b.n	801672e <HAL_DMA_IRQHandler+0x2ea>
          break;
 801672c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2201      	movs	r2, #1
 8016732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2200      	movs	r2, #0
 801673a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016742:	2b00      	cmp	r3, #0
 8016744:	d005      	beq.n	8016752 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	4798      	blx	r3
 801674e:	e000      	b.n	8016752 <HAL_DMA_IRQHandler+0x30e>
        return;
 8016750:	bf00      	nop
    }
  }
}
 8016752:	3718      	adds	r7, #24
 8016754:	46bd      	mov	sp, r7
 8016756:	bd80      	pop	{r7, pc}

08016758 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8016758:	b480      	push	{r7}
 801675a:	b083      	sub	sp, #12
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016766:	b2db      	uxtb	r3, r3
}
 8016768:	4618      	mov	r0, r3
 801676a:	370c      	adds	r7, #12
 801676c:	46bd      	mov	sp, r7
 801676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016772:	4770      	bx	lr

08016774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016774:	b480      	push	{r7}
 8016776:	b085      	sub	sp, #20
 8016778:	af00      	add	r7, sp, #0
 801677a:	60f8      	str	r0, [r7, #12]
 801677c:	60b9      	str	r1, [r7, #8]
 801677e:	607a      	str	r2, [r7, #4]
 8016780:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8016790:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	683a      	ldr	r2, [r7, #0]
 8016798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	689b      	ldr	r3, [r3, #8]
 801679e:	2b40      	cmp	r3, #64	; 0x40
 80167a0:	d108      	bne.n	80167b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	687a      	ldr	r2, [r7, #4]
 80167a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	68ba      	ldr	r2, [r7, #8]
 80167b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80167b2:	e007      	b.n	80167c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	68ba      	ldr	r2, [r7, #8]
 80167ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	687a      	ldr	r2, [r7, #4]
 80167c2:	60da      	str	r2, [r3, #12]
}
 80167c4:	bf00      	nop
 80167c6:	3714      	adds	r7, #20
 80167c8:	46bd      	mov	sp, r7
 80167ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ce:	4770      	bx	lr

080167d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80167d0:	b480      	push	{r7}
 80167d2:	b085      	sub	sp, #20
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	3b10      	subs	r3, #16
 80167e0:	4a14      	ldr	r2, [pc, #80]	; (8016834 <DMA_CalcBaseAndBitshift+0x64>)
 80167e2:	fba2 2303 	umull	r2, r3, r2, r3
 80167e6:	091b      	lsrs	r3, r3, #4
 80167e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80167ea:	4a13      	ldr	r2, [pc, #76]	; (8016838 <DMA_CalcBaseAndBitshift+0x68>)
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	4413      	add	r3, r2
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	461a      	mov	r2, r3
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2b03      	cmp	r3, #3
 80167fc:	d909      	bls.n	8016812 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8016806:	f023 0303 	bic.w	r3, r3, #3
 801680a:	1d1a      	adds	r2, r3, #4
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	659a      	str	r2, [r3, #88]	; 0x58
 8016810:	e007      	b.n	8016822 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801681a:	f023 0303 	bic.w	r3, r3, #3
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8016826:	4618      	mov	r0, r3
 8016828:	3714      	adds	r7, #20
 801682a:	46bd      	mov	sp, r7
 801682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016830:	4770      	bx	lr
 8016832:	bf00      	nop
 8016834:	aaaaaaab 	.word	0xaaaaaaab
 8016838:	08029a74 	.word	0x08029a74

0801683c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016844:	2300      	movs	r3, #0
 8016846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801684c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	699b      	ldr	r3, [r3, #24]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d11f      	bne.n	8016896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8016856:	68bb      	ldr	r3, [r7, #8]
 8016858:	2b03      	cmp	r3, #3
 801685a:	d856      	bhi.n	801690a <DMA_CheckFifoParam+0xce>
 801685c:	a201      	add	r2, pc, #4	; (adr r2, 8016864 <DMA_CheckFifoParam+0x28>)
 801685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016862:	bf00      	nop
 8016864:	08016875 	.word	0x08016875
 8016868:	08016887 	.word	0x08016887
 801686c:	08016875 	.word	0x08016875
 8016870:	0801690b 	.word	0x0801690b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801687c:	2b00      	cmp	r3, #0
 801687e:	d046      	beq.n	801690e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8016880:	2301      	movs	r3, #1
 8016882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016884:	e043      	b.n	801690e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801688a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801688e:	d140      	bne.n	8016912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8016890:	2301      	movs	r3, #1
 8016892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016894:	e03d      	b.n	8016912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	699b      	ldr	r3, [r3, #24]
 801689a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801689e:	d121      	bne.n	80168e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	2b03      	cmp	r3, #3
 80168a4:	d837      	bhi.n	8016916 <DMA_CheckFifoParam+0xda>
 80168a6:	a201      	add	r2, pc, #4	; (adr r2, 80168ac <DMA_CheckFifoParam+0x70>)
 80168a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168ac:	080168bd 	.word	0x080168bd
 80168b0:	080168c3 	.word	0x080168c3
 80168b4:	080168bd 	.word	0x080168bd
 80168b8:	080168d5 	.word	0x080168d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80168bc:	2301      	movs	r3, #1
 80168be:	73fb      	strb	r3, [r7, #15]
      break;
 80168c0:	e030      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d025      	beq.n	801691a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80168ce:	2301      	movs	r3, #1
 80168d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80168d2:	e022      	b.n	801691a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80168dc:	d11f      	bne.n	801691e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80168de:	2301      	movs	r3, #1
 80168e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80168e2:	e01c      	b.n	801691e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80168e4:	68bb      	ldr	r3, [r7, #8]
 80168e6:	2b02      	cmp	r3, #2
 80168e8:	d903      	bls.n	80168f2 <DMA_CheckFifoParam+0xb6>
 80168ea:	68bb      	ldr	r3, [r7, #8]
 80168ec:	2b03      	cmp	r3, #3
 80168ee:	d003      	beq.n	80168f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80168f0:	e018      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80168f2:	2301      	movs	r3, #1
 80168f4:	73fb      	strb	r3, [r7, #15]
      break;
 80168f6:	e015      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016900:	2b00      	cmp	r3, #0
 8016902:	d00e      	beq.n	8016922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8016904:	2301      	movs	r3, #1
 8016906:	73fb      	strb	r3, [r7, #15]
      break;
 8016908:	e00b      	b.n	8016922 <DMA_CheckFifoParam+0xe6>
      break;
 801690a:	bf00      	nop
 801690c:	e00a      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
      break;
 801690e:	bf00      	nop
 8016910:	e008      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
      break;
 8016912:	bf00      	nop
 8016914:	e006      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
      break;
 8016916:	bf00      	nop
 8016918:	e004      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
      break;
 801691a:	bf00      	nop
 801691c:	e002      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
      break;   
 801691e:	bf00      	nop
 8016920:	e000      	b.n	8016924 <DMA_CheckFifoParam+0xe8>
      break;
 8016922:	bf00      	nop
    }
  } 
  
  return status; 
 8016924:	7bfb      	ldrb	r3, [r7, #15]
}
 8016926:	4618      	mov	r0, r3
 8016928:	3714      	adds	r7, #20
 801692a:	46bd      	mov	sp, r7
 801692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016930:	4770      	bx	lr
 8016932:	bf00      	nop

08016934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016934:	b480      	push	{r7}
 8016936:	b089      	sub	sp, #36	; 0x24
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
 801693c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801693e:	2300      	movs	r3, #0
 8016940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016942:	2300      	movs	r3, #0
 8016944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016946:	2300      	movs	r3, #0
 8016948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801694a:	2300      	movs	r3, #0
 801694c:	61fb      	str	r3, [r7, #28]
 801694e:	e159      	b.n	8016c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016950:	2201      	movs	r2, #1
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	fa02 f303 	lsl.w	r3, r2, r3
 8016958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	697a      	ldr	r2, [r7, #20]
 8016960:	4013      	ands	r3, r2
 8016962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016964:	693a      	ldr	r2, [r7, #16]
 8016966:	697b      	ldr	r3, [r7, #20]
 8016968:	429a      	cmp	r2, r3
 801696a:	f040 8148 	bne.w	8016bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801696e:	683b      	ldr	r3, [r7, #0]
 8016970:	685b      	ldr	r3, [r3, #4]
 8016972:	f003 0303 	and.w	r3, r3, #3
 8016976:	2b01      	cmp	r3, #1
 8016978:	d005      	beq.n	8016986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	685b      	ldr	r3, [r3, #4]
 801697e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8016982:	2b02      	cmp	r3, #2
 8016984:	d130      	bne.n	80169e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	689b      	ldr	r3, [r3, #8]
 801698a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801698c:	69fb      	ldr	r3, [r7, #28]
 801698e:	005b      	lsls	r3, r3, #1
 8016990:	2203      	movs	r2, #3
 8016992:	fa02 f303 	lsl.w	r3, r2, r3
 8016996:	43db      	mvns	r3, r3
 8016998:	69ba      	ldr	r2, [r7, #24]
 801699a:	4013      	ands	r3, r2
 801699c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	68da      	ldr	r2, [r3, #12]
 80169a2:	69fb      	ldr	r3, [r7, #28]
 80169a4:	005b      	lsls	r3, r3, #1
 80169a6:	fa02 f303 	lsl.w	r3, r2, r3
 80169aa:	69ba      	ldr	r2, [r7, #24]
 80169ac:	4313      	orrs	r3, r2
 80169ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	69ba      	ldr	r2, [r7, #24]
 80169b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	685b      	ldr	r3, [r3, #4]
 80169ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80169bc:	2201      	movs	r2, #1
 80169be:	69fb      	ldr	r3, [r7, #28]
 80169c0:	fa02 f303 	lsl.w	r3, r2, r3
 80169c4:	43db      	mvns	r3, r3
 80169c6:	69ba      	ldr	r2, [r7, #24]
 80169c8:	4013      	ands	r3, r2
 80169ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80169cc:	683b      	ldr	r3, [r7, #0]
 80169ce:	685b      	ldr	r3, [r3, #4]
 80169d0:	091b      	lsrs	r3, r3, #4
 80169d2:	f003 0201 	and.w	r2, r3, #1
 80169d6:	69fb      	ldr	r3, [r7, #28]
 80169d8:	fa02 f303 	lsl.w	r3, r2, r3
 80169dc:	69ba      	ldr	r2, [r7, #24]
 80169de:	4313      	orrs	r3, r2
 80169e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	69ba      	ldr	r2, [r7, #24]
 80169e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80169e8:	683b      	ldr	r3, [r7, #0]
 80169ea:	685b      	ldr	r3, [r3, #4]
 80169ec:	f003 0303 	and.w	r3, r3, #3
 80169f0:	2b03      	cmp	r3, #3
 80169f2:	d017      	beq.n	8016a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	68db      	ldr	r3, [r3, #12]
 80169f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80169fa:	69fb      	ldr	r3, [r7, #28]
 80169fc:	005b      	lsls	r3, r3, #1
 80169fe:	2203      	movs	r2, #3
 8016a00:	fa02 f303 	lsl.w	r3, r2, r3
 8016a04:	43db      	mvns	r3, r3
 8016a06:	69ba      	ldr	r2, [r7, #24]
 8016a08:	4013      	ands	r3, r2
 8016a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	689a      	ldr	r2, [r3, #8]
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	005b      	lsls	r3, r3, #1
 8016a14:	fa02 f303 	lsl.w	r3, r2, r3
 8016a18:	69ba      	ldr	r2, [r7, #24]
 8016a1a:	4313      	orrs	r3, r2
 8016a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	69ba      	ldr	r2, [r7, #24]
 8016a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	685b      	ldr	r3, [r3, #4]
 8016a28:	f003 0303 	and.w	r3, r3, #3
 8016a2c:	2b02      	cmp	r3, #2
 8016a2e:	d123      	bne.n	8016a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016a30:	69fb      	ldr	r3, [r7, #28]
 8016a32:	08da      	lsrs	r2, r3, #3
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	3208      	adds	r2, #8
 8016a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016a3e:	69fb      	ldr	r3, [r7, #28]
 8016a40:	f003 0307 	and.w	r3, r3, #7
 8016a44:	009b      	lsls	r3, r3, #2
 8016a46:	220f      	movs	r2, #15
 8016a48:	fa02 f303 	lsl.w	r3, r2, r3
 8016a4c:	43db      	mvns	r3, r3
 8016a4e:	69ba      	ldr	r2, [r7, #24]
 8016a50:	4013      	ands	r3, r2
 8016a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	691a      	ldr	r2, [r3, #16]
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	f003 0307 	and.w	r3, r3, #7
 8016a5e:	009b      	lsls	r3, r3, #2
 8016a60:	fa02 f303 	lsl.w	r3, r2, r3
 8016a64:	69ba      	ldr	r2, [r7, #24]
 8016a66:	4313      	orrs	r3, r2
 8016a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8016a6a:	69fb      	ldr	r3, [r7, #28]
 8016a6c:	08da      	lsrs	r2, r3, #3
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	3208      	adds	r2, #8
 8016a72:	69b9      	ldr	r1, [r7, #24]
 8016a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	005b      	lsls	r3, r3, #1
 8016a82:	2203      	movs	r2, #3
 8016a84:	fa02 f303 	lsl.w	r3, r2, r3
 8016a88:	43db      	mvns	r3, r3
 8016a8a:	69ba      	ldr	r2, [r7, #24]
 8016a8c:	4013      	ands	r3, r2
 8016a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	685b      	ldr	r3, [r3, #4]
 8016a94:	f003 0203 	and.w	r2, r3, #3
 8016a98:	69fb      	ldr	r3, [r7, #28]
 8016a9a:	005b      	lsls	r3, r3, #1
 8016a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8016aa0:	69ba      	ldr	r2, [r7, #24]
 8016aa2:	4313      	orrs	r3, r2
 8016aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	69ba      	ldr	r2, [r7, #24]
 8016aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	f000 80a2 	beq.w	8016bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016aba:	2300      	movs	r3, #0
 8016abc:	60fb      	str	r3, [r7, #12]
 8016abe:	4b57      	ldr	r3, [pc, #348]	; (8016c1c <HAL_GPIO_Init+0x2e8>)
 8016ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ac2:	4a56      	ldr	r2, [pc, #344]	; (8016c1c <HAL_GPIO_Init+0x2e8>)
 8016ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8016aca:	4b54      	ldr	r3, [pc, #336]	; (8016c1c <HAL_GPIO_Init+0x2e8>)
 8016acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016ad2:	60fb      	str	r3, [r7, #12]
 8016ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8016ad6:	4a52      	ldr	r2, [pc, #328]	; (8016c20 <HAL_GPIO_Init+0x2ec>)
 8016ad8:	69fb      	ldr	r3, [r7, #28]
 8016ada:	089b      	lsrs	r3, r3, #2
 8016adc:	3302      	adds	r3, #2
 8016ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8016ae4:	69fb      	ldr	r3, [r7, #28]
 8016ae6:	f003 0303 	and.w	r3, r3, #3
 8016aea:	009b      	lsls	r3, r3, #2
 8016aec:	220f      	movs	r2, #15
 8016aee:	fa02 f303 	lsl.w	r3, r2, r3
 8016af2:	43db      	mvns	r3, r3
 8016af4:	69ba      	ldr	r2, [r7, #24]
 8016af6:	4013      	ands	r3, r2
 8016af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	4a49      	ldr	r2, [pc, #292]	; (8016c24 <HAL_GPIO_Init+0x2f0>)
 8016afe:	4293      	cmp	r3, r2
 8016b00:	d019      	beq.n	8016b36 <HAL_GPIO_Init+0x202>
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	4a48      	ldr	r2, [pc, #288]	; (8016c28 <HAL_GPIO_Init+0x2f4>)
 8016b06:	4293      	cmp	r3, r2
 8016b08:	d013      	beq.n	8016b32 <HAL_GPIO_Init+0x1fe>
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	4a47      	ldr	r2, [pc, #284]	; (8016c2c <HAL_GPIO_Init+0x2f8>)
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	d00d      	beq.n	8016b2e <HAL_GPIO_Init+0x1fa>
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	4a46      	ldr	r2, [pc, #280]	; (8016c30 <HAL_GPIO_Init+0x2fc>)
 8016b16:	4293      	cmp	r3, r2
 8016b18:	d007      	beq.n	8016b2a <HAL_GPIO_Init+0x1f6>
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	4a45      	ldr	r2, [pc, #276]	; (8016c34 <HAL_GPIO_Init+0x300>)
 8016b1e:	4293      	cmp	r3, r2
 8016b20:	d101      	bne.n	8016b26 <HAL_GPIO_Init+0x1f2>
 8016b22:	2304      	movs	r3, #4
 8016b24:	e008      	b.n	8016b38 <HAL_GPIO_Init+0x204>
 8016b26:	2307      	movs	r3, #7
 8016b28:	e006      	b.n	8016b38 <HAL_GPIO_Init+0x204>
 8016b2a:	2303      	movs	r3, #3
 8016b2c:	e004      	b.n	8016b38 <HAL_GPIO_Init+0x204>
 8016b2e:	2302      	movs	r3, #2
 8016b30:	e002      	b.n	8016b38 <HAL_GPIO_Init+0x204>
 8016b32:	2301      	movs	r3, #1
 8016b34:	e000      	b.n	8016b38 <HAL_GPIO_Init+0x204>
 8016b36:	2300      	movs	r3, #0
 8016b38:	69fa      	ldr	r2, [r7, #28]
 8016b3a:	f002 0203 	and.w	r2, r2, #3
 8016b3e:	0092      	lsls	r2, r2, #2
 8016b40:	4093      	lsls	r3, r2
 8016b42:	69ba      	ldr	r2, [r7, #24]
 8016b44:	4313      	orrs	r3, r2
 8016b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016b48:	4935      	ldr	r1, [pc, #212]	; (8016c20 <HAL_GPIO_Init+0x2ec>)
 8016b4a:	69fb      	ldr	r3, [r7, #28]
 8016b4c:	089b      	lsrs	r3, r3, #2
 8016b4e:	3302      	adds	r3, #2
 8016b50:	69ba      	ldr	r2, [r7, #24]
 8016b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8016b56:	4b38      	ldr	r3, [pc, #224]	; (8016c38 <HAL_GPIO_Init+0x304>)
 8016b58:	689b      	ldr	r3, [r3, #8]
 8016b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	43db      	mvns	r3, r3
 8016b60:	69ba      	ldr	r2, [r7, #24]
 8016b62:	4013      	ands	r3, r2
 8016b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8016b66:	683b      	ldr	r3, [r7, #0]
 8016b68:	685b      	ldr	r3, [r3, #4]
 8016b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d003      	beq.n	8016b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8016b72:	69ba      	ldr	r2, [r7, #24]
 8016b74:	693b      	ldr	r3, [r7, #16]
 8016b76:	4313      	orrs	r3, r2
 8016b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8016b7a:	4a2f      	ldr	r2, [pc, #188]	; (8016c38 <HAL_GPIO_Init+0x304>)
 8016b7c:	69bb      	ldr	r3, [r7, #24]
 8016b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8016b80:	4b2d      	ldr	r3, [pc, #180]	; (8016c38 <HAL_GPIO_Init+0x304>)
 8016b82:	68db      	ldr	r3, [r3, #12]
 8016b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	43db      	mvns	r3, r3
 8016b8a:	69ba      	ldr	r2, [r7, #24]
 8016b8c:	4013      	ands	r3, r2
 8016b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d003      	beq.n	8016ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8016b9c:	69ba      	ldr	r2, [r7, #24]
 8016b9e:	693b      	ldr	r3, [r7, #16]
 8016ba0:	4313      	orrs	r3, r2
 8016ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8016ba4:	4a24      	ldr	r2, [pc, #144]	; (8016c38 <HAL_GPIO_Init+0x304>)
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8016baa:	4b23      	ldr	r3, [pc, #140]	; (8016c38 <HAL_GPIO_Init+0x304>)
 8016bac:	685b      	ldr	r3, [r3, #4]
 8016bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	43db      	mvns	r3, r3
 8016bb4:	69ba      	ldr	r2, [r7, #24]
 8016bb6:	4013      	ands	r3, r2
 8016bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d003      	beq.n	8016bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8016bc6:	69ba      	ldr	r2, [r7, #24]
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	4313      	orrs	r3, r2
 8016bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8016bce:	4a1a      	ldr	r2, [pc, #104]	; (8016c38 <HAL_GPIO_Init+0x304>)
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016bd4:	4b18      	ldr	r3, [pc, #96]	; (8016c38 <HAL_GPIO_Init+0x304>)
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	43db      	mvns	r3, r3
 8016bde:	69ba      	ldr	r2, [r7, #24]
 8016be0:	4013      	ands	r3, r2
 8016be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	685b      	ldr	r3, [r3, #4]
 8016be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d003      	beq.n	8016bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8016bf0:	69ba      	ldr	r2, [r7, #24]
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	4313      	orrs	r3, r2
 8016bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8016bf8:	4a0f      	ldr	r2, [pc, #60]	; (8016c38 <HAL_GPIO_Init+0x304>)
 8016bfa:	69bb      	ldr	r3, [r7, #24]
 8016bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	3301      	adds	r3, #1
 8016c02:	61fb      	str	r3, [r7, #28]
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	2b0f      	cmp	r3, #15
 8016c08:	f67f aea2 	bls.w	8016950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8016c0c:	bf00      	nop
 8016c0e:	bf00      	nop
 8016c10:	3724      	adds	r7, #36	; 0x24
 8016c12:	46bd      	mov	sp, r7
 8016c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop
 8016c1c:	40023800 	.word	0x40023800
 8016c20:	40013800 	.word	0x40013800
 8016c24:	40020000 	.word	0x40020000
 8016c28:	40020400 	.word	0x40020400
 8016c2c:	40020800 	.word	0x40020800
 8016c30:	40020c00 	.word	0x40020c00
 8016c34:	40021000 	.word	0x40021000
 8016c38:	40013c00 	.word	0x40013c00

08016c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8016c3c:	b480      	push	{r7}
 8016c3e:	b085      	sub	sp, #20
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	460b      	mov	r3, r1
 8016c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	691a      	ldr	r2, [r3, #16]
 8016c4c:	887b      	ldrh	r3, [r7, #2]
 8016c4e:	4013      	ands	r3, r2
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d002      	beq.n	8016c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016c54:	2301      	movs	r3, #1
 8016c56:	73fb      	strb	r3, [r7, #15]
 8016c58:	e001      	b.n	8016c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8016c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	3714      	adds	r7, #20
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b083      	sub	sp, #12
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	460b      	mov	r3, r1
 8016c76:	807b      	strh	r3, [r7, #2]
 8016c78:	4613      	mov	r3, r2
 8016c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016c7c:	787b      	ldrb	r3, [r7, #1]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d003      	beq.n	8016c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016c82:	887a      	ldrh	r2, [r7, #2]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016c88:	e003      	b.n	8016c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016c8a:	887b      	ldrh	r3, [r7, #2]
 8016c8c:	041a      	lsls	r2, r3, #16
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	619a      	str	r2, [r3, #24]
}
 8016c92:	bf00      	nop
 8016c94:	370c      	adds	r7, #12
 8016c96:	46bd      	mov	sp, r7
 8016c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9c:	4770      	bx	lr
	...

08016ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b082      	sub	sp, #8
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8016caa:	4b08      	ldr	r3, [pc, #32]	; (8016ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016cac:	695a      	ldr	r2, [r3, #20]
 8016cae:	88fb      	ldrh	r3, [r7, #6]
 8016cb0:	4013      	ands	r3, r2
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d006      	beq.n	8016cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8016cb6:	4a05      	ldr	r2, [pc, #20]	; (8016ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016cb8:	88fb      	ldrh	r3, [r7, #6]
 8016cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8016cbc:	88fb      	ldrh	r3, [r7, #6]
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f7ec fd84 	bl	80037cc <HAL_GPIO_EXTI_Callback>
  }
}
 8016cc4:	bf00      	nop
 8016cc6:	3708      	adds	r7, #8
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}
 8016ccc:	40013c00 	.word	0x40013c00

08016cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b084      	sub	sp, #16
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d101      	bne.n	8016ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016cde:	2301      	movs	r3, #1
 8016ce0:	e12b      	b.n	8016f3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016ce8:	b2db      	uxtb	r3, r3
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d106      	bne.n	8016cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8016cf6:	6878      	ldr	r0, [r7, #4]
 8016cf8:	f7fe fc6a 	bl	80155d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	2224      	movs	r2, #36	; 0x24
 8016d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	681a      	ldr	r2, [r3, #0]
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	f022 0201 	bic.w	r2, r2, #1
 8016d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	681a      	ldr	r2, [r3, #0]
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	681a      	ldr	r2, [r3, #0]
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016d34:	f003 fa9a 	bl	801a26c <HAL_RCC_GetPCLK1Freq>
 8016d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	685b      	ldr	r3, [r3, #4]
 8016d3e:	4a81      	ldr	r2, [pc, #516]	; (8016f44 <HAL_I2C_Init+0x274>)
 8016d40:	4293      	cmp	r3, r2
 8016d42:	d807      	bhi.n	8016d54 <HAL_I2C_Init+0x84>
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	4a80      	ldr	r2, [pc, #512]	; (8016f48 <HAL_I2C_Init+0x278>)
 8016d48:	4293      	cmp	r3, r2
 8016d4a:	bf94      	ite	ls
 8016d4c:	2301      	movls	r3, #1
 8016d4e:	2300      	movhi	r3, #0
 8016d50:	b2db      	uxtb	r3, r3
 8016d52:	e006      	b.n	8016d62 <HAL_I2C_Init+0x92>
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	4a7d      	ldr	r2, [pc, #500]	; (8016f4c <HAL_I2C_Init+0x27c>)
 8016d58:	4293      	cmp	r3, r2
 8016d5a:	bf94      	ite	ls
 8016d5c:	2301      	movls	r3, #1
 8016d5e:	2300      	movhi	r3, #0
 8016d60:	b2db      	uxtb	r3, r3
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d001      	beq.n	8016d6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8016d66:	2301      	movs	r3, #1
 8016d68:	e0e7      	b.n	8016f3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	4a78      	ldr	r2, [pc, #480]	; (8016f50 <HAL_I2C_Init+0x280>)
 8016d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8016d72:	0c9b      	lsrs	r3, r3, #18
 8016d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	685b      	ldr	r3, [r3, #4]
 8016d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	68ba      	ldr	r2, [r7, #8]
 8016d86:	430a      	orrs	r2, r1
 8016d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	6a1b      	ldr	r3, [r3, #32]
 8016d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	4a6a      	ldr	r2, [pc, #424]	; (8016f44 <HAL_I2C_Init+0x274>)
 8016d9a:	4293      	cmp	r3, r2
 8016d9c:	d802      	bhi.n	8016da4 <HAL_I2C_Init+0xd4>
 8016d9e:	68bb      	ldr	r3, [r7, #8]
 8016da0:	3301      	adds	r3, #1
 8016da2:	e009      	b.n	8016db8 <HAL_I2C_Init+0xe8>
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016daa:	fb02 f303 	mul.w	r3, r2, r3
 8016dae:	4a69      	ldr	r2, [pc, #420]	; (8016f54 <HAL_I2C_Init+0x284>)
 8016db0:	fba2 2303 	umull	r2, r3, r2, r3
 8016db4:	099b      	lsrs	r3, r3, #6
 8016db6:	3301      	adds	r3, #1
 8016db8:	687a      	ldr	r2, [r7, #4]
 8016dba:	6812      	ldr	r2, [r2, #0]
 8016dbc:	430b      	orrs	r3, r1
 8016dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	69db      	ldr	r3, [r3, #28]
 8016dc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8016dca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	685b      	ldr	r3, [r3, #4]
 8016dd2:	495c      	ldr	r1, [pc, #368]	; (8016f44 <HAL_I2C_Init+0x274>)
 8016dd4:	428b      	cmp	r3, r1
 8016dd6:	d819      	bhi.n	8016e0c <HAL_I2C_Init+0x13c>
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	1e59      	subs	r1, r3, #1
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	005b      	lsls	r3, r3, #1
 8016de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8016de6:	1c59      	adds	r1, r3, #1
 8016de8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8016dec:	400b      	ands	r3, r1
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d00a      	beq.n	8016e08 <HAL_I2C_Init+0x138>
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	1e59      	subs	r1, r3, #1
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	685b      	ldr	r3, [r3, #4]
 8016dfa:	005b      	lsls	r3, r3, #1
 8016dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8016e00:	3301      	adds	r3, #1
 8016e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e06:	e051      	b.n	8016eac <HAL_I2C_Init+0x1dc>
 8016e08:	2304      	movs	r3, #4
 8016e0a:	e04f      	b.n	8016eac <HAL_I2C_Init+0x1dc>
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	689b      	ldr	r3, [r3, #8]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d111      	bne.n	8016e38 <HAL_I2C_Init+0x168>
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	1e58      	subs	r0, r3, #1
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	6859      	ldr	r1, [r3, #4]
 8016e1c:	460b      	mov	r3, r1
 8016e1e:	005b      	lsls	r3, r3, #1
 8016e20:	440b      	add	r3, r1
 8016e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8016e26:	3301      	adds	r3, #1
 8016e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	bf0c      	ite	eq
 8016e30:	2301      	moveq	r3, #1
 8016e32:	2300      	movne	r3, #0
 8016e34:	b2db      	uxtb	r3, r3
 8016e36:	e012      	b.n	8016e5e <HAL_I2C_Init+0x18e>
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	1e58      	subs	r0, r3, #1
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	6859      	ldr	r1, [r3, #4]
 8016e40:	460b      	mov	r3, r1
 8016e42:	009b      	lsls	r3, r3, #2
 8016e44:	440b      	add	r3, r1
 8016e46:	0099      	lsls	r1, r3, #2
 8016e48:	440b      	add	r3, r1
 8016e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8016e4e:	3301      	adds	r3, #1
 8016e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	bf0c      	ite	eq
 8016e58:	2301      	moveq	r3, #1
 8016e5a:	2300      	movne	r3, #0
 8016e5c:	b2db      	uxtb	r3, r3
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d001      	beq.n	8016e66 <HAL_I2C_Init+0x196>
 8016e62:	2301      	movs	r3, #1
 8016e64:	e022      	b.n	8016eac <HAL_I2C_Init+0x1dc>
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	689b      	ldr	r3, [r3, #8]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d10e      	bne.n	8016e8c <HAL_I2C_Init+0x1bc>
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	1e58      	subs	r0, r3, #1
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6859      	ldr	r1, [r3, #4]
 8016e76:	460b      	mov	r3, r1
 8016e78:	005b      	lsls	r3, r3, #1
 8016e7a:	440b      	add	r3, r1
 8016e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8016e80:	3301      	adds	r3, #1
 8016e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016e8a:	e00f      	b.n	8016eac <HAL_I2C_Init+0x1dc>
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	1e58      	subs	r0, r3, #1
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	6859      	ldr	r1, [r3, #4]
 8016e94:	460b      	mov	r3, r1
 8016e96:	009b      	lsls	r3, r3, #2
 8016e98:	440b      	add	r3, r1
 8016e9a:	0099      	lsls	r1, r3, #2
 8016e9c:	440b      	add	r3, r1
 8016e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016eac:	6879      	ldr	r1, [r7, #4]
 8016eae:	6809      	ldr	r1, [r1, #0]
 8016eb0:	4313      	orrs	r3, r2
 8016eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	69da      	ldr	r2, [r3, #28]
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6a1b      	ldr	r3, [r3, #32]
 8016ec6:	431a      	orrs	r2, r3
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	430a      	orrs	r2, r1
 8016ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	689b      	ldr	r3, [r3, #8]
 8016ed6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8016eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8016ede:	687a      	ldr	r2, [r7, #4]
 8016ee0:	6911      	ldr	r1, [r2, #16]
 8016ee2:	687a      	ldr	r2, [r7, #4]
 8016ee4:	68d2      	ldr	r2, [r2, #12]
 8016ee6:	4311      	orrs	r1, r2
 8016ee8:	687a      	ldr	r2, [r7, #4]
 8016eea:	6812      	ldr	r2, [r2, #0]
 8016eec:	430b      	orrs	r3, r1
 8016eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	68db      	ldr	r3, [r3, #12]
 8016ef6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	695a      	ldr	r2, [r3, #20]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	699b      	ldr	r3, [r3, #24]
 8016f02:	431a      	orrs	r2, r3
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	430a      	orrs	r2, r1
 8016f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	681a      	ldr	r2, [r3, #0]
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	f042 0201 	orr.w	r2, r2, #1
 8016f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2200      	movs	r2, #0
 8016f20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	2220      	movs	r2, #32
 8016f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2200      	movs	r2, #0
 8016f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8016f38:	2300      	movs	r3, #0
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	3710      	adds	r7, #16
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}
 8016f42:	bf00      	nop
 8016f44:	000186a0 	.word	0x000186a0
 8016f48:	001e847f 	.word	0x001e847f
 8016f4c:	003d08ff 	.word	0x003d08ff
 8016f50:	431bde83 	.word	0x431bde83
 8016f54:	10624dd3 	.word	0x10624dd3

08016f58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b088      	sub	sp, #32
 8016f5c:	af02      	add	r7, sp, #8
 8016f5e:	60f8      	str	r0, [r7, #12]
 8016f60:	4608      	mov	r0, r1
 8016f62:	4611      	mov	r1, r2
 8016f64:	461a      	mov	r2, r3
 8016f66:	4603      	mov	r3, r0
 8016f68:	817b      	strh	r3, [r7, #10]
 8016f6a:	460b      	mov	r3, r1
 8016f6c:	813b      	strh	r3, [r7, #8]
 8016f6e:	4613      	mov	r3, r2
 8016f70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016f72:	f7fe ff8d 	bl	8015e90 <HAL_GetTick>
 8016f76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016f7e:	b2db      	uxtb	r3, r3
 8016f80:	2b20      	cmp	r3, #32
 8016f82:	f040 80d9 	bne.w	8017138 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016f86:	697b      	ldr	r3, [r7, #20]
 8016f88:	9300      	str	r3, [sp, #0]
 8016f8a:	2319      	movs	r3, #25
 8016f8c:	2201      	movs	r2, #1
 8016f8e:	496d      	ldr	r1, [pc, #436]	; (8017144 <HAL_I2C_Mem_Write+0x1ec>)
 8016f90:	68f8      	ldr	r0, [r7, #12]
 8016f92:	f002 fad1 	bl	8019538 <I2C_WaitOnFlagUntilTimeout>
 8016f96:	4603      	mov	r3, r0
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d001      	beq.n	8016fa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8016f9c:	2302      	movs	r3, #2
 8016f9e:	e0cc      	b.n	801713a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016fa6:	2b01      	cmp	r3, #1
 8016fa8:	d101      	bne.n	8016fae <HAL_I2C_Mem_Write+0x56>
 8016faa:	2302      	movs	r3, #2
 8016fac:	e0c5      	b.n	801713a <HAL_I2C_Mem_Write+0x1e2>
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	2201      	movs	r2, #1
 8016fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016fb6:	68fb      	ldr	r3, [r7, #12]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	f003 0301 	and.w	r3, r3, #1
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	d007      	beq.n	8016fd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	681a      	ldr	r2, [r3, #0]
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	f042 0201 	orr.w	r2, r2, #1
 8016fd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016fe2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	2221      	movs	r2, #33	; 0x21
 8016fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	2240      	movs	r2, #64	; 0x40
 8016ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	6a3a      	ldr	r2, [r7, #32]
 8016ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017004:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801700a:	b29a      	uxth	r2, r3
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	4a4d      	ldr	r2, [pc, #308]	; (8017148 <HAL_I2C_Mem_Write+0x1f0>)
 8017014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017016:	88f8      	ldrh	r0, [r7, #6]
 8017018:	893a      	ldrh	r2, [r7, #8]
 801701a:	8979      	ldrh	r1, [r7, #10]
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	9301      	str	r3, [sp, #4]
 8017020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017022:	9300      	str	r3, [sp, #0]
 8017024:	4603      	mov	r3, r0
 8017026:	68f8      	ldr	r0, [r7, #12]
 8017028:	f002 f860 	bl	80190ec <I2C_RequestMemoryWrite>
 801702c:	4603      	mov	r3, r0
 801702e:	2b00      	cmp	r3, #0
 8017030:	d052      	beq.n	80170d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8017032:	2301      	movs	r3, #1
 8017034:	e081      	b.n	801713a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017036:	697a      	ldr	r2, [r7, #20]
 8017038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801703a:	68f8      	ldr	r0, [r7, #12]
 801703c:	f002 fb52 	bl	80196e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8017040:	4603      	mov	r3, r0
 8017042:	2b00      	cmp	r3, #0
 8017044:	d00d      	beq.n	8017062 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801704a:	2b04      	cmp	r3, #4
 801704c:	d107      	bne.n	801705e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	681a      	ldr	r2, [r3, #0]
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801705c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801705e:	2301      	movs	r3, #1
 8017060:	e06b      	b.n	801713a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017066:	781a      	ldrb	r2, [r3, #0]
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017072:	1c5a      	adds	r2, r3, #1
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801707c:	3b01      	subs	r3, #1
 801707e:	b29a      	uxth	r2, r3
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017088:	b29b      	uxth	r3, r3
 801708a:	3b01      	subs	r3, #1
 801708c:	b29a      	uxth	r2, r3
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	695b      	ldr	r3, [r3, #20]
 8017098:	f003 0304 	and.w	r3, r3, #4
 801709c:	2b04      	cmp	r3, #4
 801709e:	d11b      	bne.n	80170d8 <HAL_I2C_Mem_Write+0x180>
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d017      	beq.n	80170d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170ac:	781a      	ldrb	r2, [r3, #0]
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170b8:	1c5a      	adds	r2, r3, #1
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170c2:	3b01      	subs	r3, #1
 80170c4:	b29a      	uxth	r2, r3
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80170ce:	b29b      	uxth	r3, r3
 80170d0:	3b01      	subs	r3, #1
 80170d2:	b29a      	uxth	r2, r3
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d1aa      	bne.n	8017036 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80170e0:	697a      	ldr	r2, [r7, #20]
 80170e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80170e4:	68f8      	ldr	r0, [r7, #12]
 80170e6:	f002 fb3e 	bl	8019766 <I2C_WaitOnBTFFlagUntilTimeout>
 80170ea:	4603      	mov	r3, r0
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00d      	beq.n	801710c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170f4:	2b04      	cmp	r3, #4
 80170f6:	d107      	bne.n	8017108 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	681a      	ldr	r2, [r3, #0]
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017106:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8017108:	2301      	movs	r3, #1
 801710a:	e016      	b.n	801713a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	681a      	ldr	r2, [r3, #0]
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801711a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	2220      	movs	r2, #32
 8017120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	2200      	movs	r2, #0
 8017128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	2200      	movs	r2, #0
 8017130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017134:	2300      	movs	r3, #0
 8017136:	e000      	b.n	801713a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8017138:	2302      	movs	r3, #2
  }
}
 801713a:	4618      	mov	r0, r3
 801713c:	3718      	adds	r7, #24
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
 8017142:	bf00      	nop
 8017144:	00100002 	.word	0x00100002
 8017148:	ffff0000 	.word	0xffff0000

0801714c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b08c      	sub	sp, #48	; 0x30
 8017150:	af02      	add	r7, sp, #8
 8017152:	60f8      	str	r0, [r7, #12]
 8017154:	4608      	mov	r0, r1
 8017156:	4611      	mov	r1, r2
 8017158:	461a      	mov	r2, r3
 801715a:	4603      	mov	r3, r0
 801715c:	817b      	strh	r3, [r7, #10]
 801715e:	460b      	mov	r3, r1
 8017160:	813b      	strh	r3, [r7, #8]
 8017162:	4613      	mov	r3, r2
 8017164:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8017166:	f7fe fe93 	bl	8015e90 <HAL_GetTick>
 801716a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017172:	b2db      	uxtb	r3, r3
 8017174:	2b20      	cmp	r3, #32
 8017176:	f040 8208 	bne.w	801758a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717c:	9300      	str	r3, [sp, #0]
 801717e:	2319      	movs	r3, #25
 8017180:	2201      	movs	r2, #1
 8017182:	497b      	ldr	r1, [pc, #492]	; (8017370 <HAL_I2C_Mem_Read+0x224>)
 8017184:	68f8      	ldr	r0, [r7, #12]
 8017186:	f002 f9d7 	bl	8019538 <I2C_WaitOnFlagUntilTimeout>
 801718a:	4603      	mov	r3, r0
 801718c:	2b00      	cmp	r3, #0
 801718e:	d001      	beq.n	8017194 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8017190:	2302      	movs	r3, #2
 8017192:	e1fb      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801719a:	2b01      	cmp	r3, #1
 801719c:	d101      	bne.n	80171a2 <HAL_I2C_Mem_Read+0x56>
 801719e:	2302      	movs	r3, #2
 80171a0:	e1f4      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	2201      	movs	r2, #1
 80171a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	f003 0301 	and.w	r3, r3, #1
 80171b4:	2b01      	cmp	r3, #1
 80171b6:	d007      	beq.n	80171c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	f042 0201 	orr.w	r2, r2, #1
 80171c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	681a      	ldr	r2, [r3, #0]
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80171d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	2222      	movs	r2, #34	; 0x22
 80171dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2240      	movs	r2, #64	; 0x40
 80171e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2200      	movs	r2, #0
 80171ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80171f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171fe:	b29a      	uxth	r2, r3
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	4a5b      	ldr	r2, [pc, #364]	; (8017374 <HAL_I2C_Mem_Read+0x228>)
 8017208:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801720a:	88f8      	ldrh	r0, [r7, #6]
 801720c:	893a      	ldrh	r2, [r7, #8]
 801720e:	8979      	ldrh	r1, [r7, #10]
 8017210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017212:	9301      	str	r3, [sp, #4]
 8017214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017216:	9300      	str	r3, [sp, #0]
 8017218:	4603      	mov	r3, r0
 801721a:	68f8      	ldr	r0, [r7, #12]
 801721c:	f001 fffc 	bl	8019218 <I2C_RequestMemoryRead>
 8017220:	4603      	mov	r3, r0
 8017222:	2b00      	cmp	r3, #0
 8017224:	d001      	beq.n	801722a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8017226:	2301      	movs	r3, #1
 8017228:	e1b0      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801722e:	2b00      	cmp	r3, #0
 8017230:	d113      	bne.n	801725a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017232:	2300      	movs	r3, #0
 8017234:	623b      	str	r3, [r7, #32]
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	695b      	ldr	r3, [r3, #20]
 801723c:	623b      	str	r3, [r7, #32]
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	699b      	ldr	r3, [r3, #24]
 8017244:	623b      	str	r3, [r7, #32]
 8017246:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	681a      	ldr	r2, [r3, #0]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017256:	601a      	str	r2, [r3, #0]
 8017258:	e184      	b.n	8017564 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801725e:	2b01      	cmp	r3, #1
 8017260:	d11b      	bne.n	801729a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	681a      	ldr	r2, [r3, #0]
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017272:	2300      	movs	r3, #0
 8017274:	61fb      	str	r3, [r7, #28]
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	695b      	ldr	r3, [r3, #20]
 801727c:	61fb      	str	r3, [r7, #28]
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	699b      	ldr	r3, [r3, #24]
 8017284:	61fb      	str	r3, [r7, #28]
 8017286:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	681a      	ldr	r2, [r3, #0]
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017296:	601a      	str	r2, [r3, #0]
 8017298:	e164      	b.n	8017564 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801729e:	2b02      	cmp	r3, #2
 80172a0:	d11b      	bne.n	80172da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	681a      	ldr	r2, [r3, #0]
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80172b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	681a      	ldr	r2, [r3, #0]
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80172c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80172c2:	2300      	movs	r3, #0
 80172c4:	61bb      	str	r3, [r7, #24]
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	695b      	ldr	r3, [r3, #20]
 80172cc:	61bb      	str	r3, [r7, #24]
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	699b      	ldr	r3, [r3, #24]
 80172d4:	61bb      	str	r3, [r7, #24]
 80172d6:	69bb      	ldr	r3, [r7, #24]
 80172d8:	e144      	b.n	8017564 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80172da:	2300      	movs	r3, #0
 80172dc:	617b      	str	r3, [r7, #20]
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	695b      	ldr	r3, [r3, #20]
 80172e4:	617b      	str	r3, [r7, #20]
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	699b      	ldr	r3, [r3, #24]
 80172ec:	617b      	str	r3, [r7, #20]
 80172ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80172f0:	e138      	b.n	8017564 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80172f6:	2b03      	cmp	r3, #3
 80172f8:	f200 80f1 	bhi.w	80174de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017300:	2b01      	cmp	r3, #1
 8017302:	d123      	bne.n	801734c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017306:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017308:	68f8      	ldr	r0, [r7, #12]
 801730a:	f002 fa9f 	bl	801984c <I2C_WaitOnRXNEFlagUntilTimeout>
 801730e:	4603      	mov	r3, r0
 8017310:	2b00      	cmp	r3, #0
 8017312:	d001      	beq.n	8017318 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8017314:	2301      	movs	r3, #1
 8017316:	e139      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	691a      	ldr	r2, [r3, #16]
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017322:	b2d2      	uxtb	r2, r2
 8017324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801732a:	1c5a      	adds	r2, r3, #1
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017334:	3b01      	subs	r3, #1
 8017336:	b29a      	uxth	r2, r3
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017340:	b29b      	uxth	r3, r3
 8017342:	3b01      	subs	r3, #1
 8017344:	b29a      	uxth	r2, r3
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	855a      	strh	r2, [r3, #42]	; 0x2a
 801734a:	e10b      	b.n	8017564 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017350:	2b02      	cmp	r3, #2
 8017352:	d14e      	bne.n	80173f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017356:	9300      	str	r3, [sp, #0]
 8017358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801735a:	2200      	movs	r2, #0
 801735c:	4906      	ldr	r1, [pc, #24]	; (8017378 <HAL_I2C_Mem_Read+0x22c>)
 801735e:	68f8      	ldr	r0, [r7, #12]
 8017360:	f002 f8ea 	bl	8019538 <I2C_WaitOnFlagUntilTimeout>
 8017364:	4603      	mov	r3, r0
 8017366:	2b00      	cmp	r3, #0
 8017368:	d008      	beq.n	801737c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 801736a:	2301      	movs	r3, #1
 801736c:	e10e      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
 801736e:	bf00      	nop
 8017370:	00100002 	.word	0x00100002
 8017374:	ffff0000 	.word	0xffff0000
 8017378:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	681a      	ldr	r2, [r3, #0]
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801738a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	691a      	ldr	r2, [r3, #16]
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017396:	b2d2      	uxtb	r2, r2
 8017398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801739e:	1c5a      	adds	r2, r3, #1
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173a8:	3b01      	subs	r3, #1
 80173aa:	b29a      	uxth	r2, r3
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173b4:	b29b      	uxth	r3, r3
 80173b6:	3b01      	subs	r3, #1
 80173b8:	b29a      	uxth	r2, r3
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	691a      	ldr	r2, [r3, #16]
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173c8:	b2d2      	uxtb	r2, r2
 80173ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d0:	1c5a      	adds	r2, r3, #1
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173da:	3b01      	subs	r3, #1
 80173dc:	b29a      	uxth	r2, r3
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	3b01      	subs	r3, #1
 80173ea:	b29a      	uxth	r2, r3
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80173f0:	e0b8      	b.n	8017564 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80173f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f4:	9300      	str	r3, [sp, #0]
 80173f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173f8:	2200      	movs	r2, #0
 80173fa:	4966      	ldr	r1, [pc, #408]	; (8017594 <HAL_I2C_Mem_Read+0x448>)
 80173fc:	68f8      	ldr	r0, [r7, #12]
 80173fe:	f002 f89b 	bl	8019538 <I2C_WaitOnFlagUntilTimeout>
 8017402:	4603      	mov	r3, r0
 8017404:	2b00      	cmp	r3, #0
 8017406:	d001      	beq.n	801740c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8017408:	2301      	movs	r3, #1
 801740a:	e0bf      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801741a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	691a      	ldr	r2, [r3, #16]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017426:	b2d2      	uxtb	r2, r2
 8017428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801742e:	1c5a      	adds	r2, r3, #1
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017438:	3b01      	subs	r3, #1
 801743a:	b29a      	uxth	r2, r3
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017444:	b29b      	uxth	r3, r3
 8017446:	3b01      	subs	r3, #1
 8017448:	b29a      	uxth	r2, r3
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017454:	2200      	movs	r2, #0
 8017456:	494f      	ldr	r1, [pc, #316]	; (8017594 <HAL_I2C_Mem_Read+0x448>)
 8017458:	68f8      	ldr	r0, [r7, #12]
 801745a:	f002 f86d 	bl	8019538 <I2C_WaitOnFlagUntilTimeout>
 801745e:	4603      	mov	r3, r0
 8017460:	2b00      	cmp	r3, #0
 8017462:	d001      	beq.n	8017468 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8017464:	2301      	movs	r3, #1
 8017466:	e091      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	681a      	ldr	r2, [r3, #0]
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	691a      	ldr	r2, [r3, #16]
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017482:	b2d2      	uxtb	r2, r2
 8017484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801748a:	1c5a      	adds	r2, r3, #1
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017494:	3b01      	subs	r3, #1
 8017496:	b29a      	uxth	r2, r3
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80174a0:	b29b      	uxth	r3, r3
 80174a2:	3b01      	subs	r3, #1
 80174a4:	b29a      	uxth	r2, r3
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	691a      	ldr	r2, [r3, #16]
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174b4:	b2d2      	uxtb	r2, r2
 80174b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174bc:	1c5a      	adds	r2, r3, #1
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174c6:	3b01      	subs	r3, #1
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80174d2:	b29b      	uxth	r3, r3
 80174d4:	3b01      	subs	r3, #1
 80174d6:	b29a      	uxth	r2, r3
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80174dc:	e042      	b.n	8017564 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80174de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80174e2:	68f8      	ldr	r0, [r7, #12]
 80174e4:	f002 f9b2 	bl	801984c <I2C_WaitOnRXNEFlagUntilTimeout>
 80174e8:	4603      	mov	r3, r0
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d001      	beq.n	80174f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80174ee:	2301      	movs	r3, #1
 80174f0:	e04c      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80174f2:	68fb      	ldr	r3, [r7, #12]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	691a      	ldr	r2, [r3, #16]
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174fc:	b2d2      	uxtb	r2, r2
 80174fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017504:	1c5a      	adds	r2, r3, #1
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801750e:	3b01      	subs	r3, #1
 8017510:	b29a      	uxth	r2, r3
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801751a:	b29b      	uxth	r3, r3
 801751c:	3b01      	subs	r3, #1
 801751e:	b29a      	uxth	r2, r3
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	695b      	ldr	r3, [r3, #20]
 801752a:	f003 0304 	and.w	r3, r3, #4
 801752e:	2b04      	cmp	r3, #4
 8017530:	d118      	bne.n	8017564 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	691a      	ldr	r2, [r3, #16]
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801753c:	b2d2      	uxtb	r2, r2
 801753e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017544:	1c5a      	adds	r2, r3, #1
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801754e:	3b01      	subs	r3, #1
 8017550:	b29a      	uxth	r2, r3
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801755a:	b29b      	uxth	r3, r3
 801755c:	3b01      	subs	r3, #1
 801755e:	b29a      	uxth	r2, r3
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017568:	2b00      	cmp	r3, #0
 801756a:	f47f aec2 	bne.w	80172f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	2220      	movs	r2, #32
 8017572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	2200      	movs	r2, #0
 801757a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	2200      	movs	r2, #0
 8017582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017586:	2300      	movs	r3, #0
 8017588:	e000      	b.n	801758c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 801758a:	2302      	movs	r3, #2
  }
}
 801758c:	4618      	mov	r0, r3
 801758e:	3728      	adds	r7, #40	; 0x28
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	00010004 	.word	0x00010004

08017598 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017598:	b480      	push	{r7}
 801759a:	b087      	sub	sp, #28
 801759c:	af00      	add	r7, sp, #0
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	607a      	str	r2, [r7, #4]
 80175a2:	461a      	mov	r2, r3
 80175a4:	460b      	mov	r3, r1
 80175a6:	817b      	strh	r3, [r7, #10]
 80175a8:	4613      	mov	r3, r2
 80175aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80175ac:	2300      	movs	r3, #0
 80175ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80175b0:	2300      	movs	r3, #0
 80175b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	2b20      	cmp	r3, #32
 80175be:	f040 80a6 	bne.w	801770e <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80175cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175d0:	d005      	beq.n	80175de <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80175d2:	6a3b      	ldr	r3, [r7, #32]
 80175d4:	2b08      	cmp	r3, #8
 80175d6:	d002      	beq.n	80175de <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80175d8:	6a3b      	ldr	r3, [r7, #32]
 80175da:	2b01      	cmp	r3, #1
 80175dc:	d130      	bne.n	8017640 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80175de:	4b4f      	ldr	r3, [pc, #316]	; (801771c <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	08db      	lsrs	r3, r3, #3
 80175e4:	4a4e      	ldr	r2, [pc, #312]	; (8017720 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 80175e6:	fba2 2303 	umull	r2, r3, r2, r3
 80175ea:	0a1a      	lsrs	r2, r3, #8
 80175ec:	4613      	mov	r3, r2
 80175ee:	009b      	lsls	r3, r3, #2
 80175f0:	4413      	add	r3, r2
 80175f2:	009a      	lsls	r2, r3, #2
 80175f4:	4413      	add	r3, r2
 80175f6:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80175f8:	693b      	ldr	r3, [r7, #16]
 80175fa:	3b01      	subs	r3, #1
 80175fc:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 80175fe:	693b      	ldr	r3, [r7, #16]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d116      	bne.n	8017632 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	2200      	movs	r2, #0
 8017608:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	2220      	movs	r2, #32
 801760e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	2200      	movs	r2, #0
 8017616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801761e:	f043 0220 	orr.w	r2, r3, #32
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	2200      	movs	r2, #0
 801762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 801762e:	2301      	movs	r3, #1
 8017630:	e06e      	b.n	8017710 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	699b      	ldr	r3, [r3, #24]
 8017638:	f003 0302 	and.w	r3, r3, #2
 801763c:	2b02      	cmp	r3, #2
 801763e:	d0db      	beq.n	80175f8 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017646:	2b01      	cmp	r3, #1
 8017648:	d101      	bne.n	801764e <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 801764a:	2302      	movs	r3, #2
 801764c:	e060      	b.n	8017710 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	2201      	movs	r2, #1
 8017652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	f003 0301 	and.w	r3, r3, #1
 8017660:	2b01      	cmp	r3, #1
 8017662:	d007      	beq.n	8017674 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	f042 0201 	orr.w	r2, r2, #1
 8017672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	681a      	ldr	r2, [r3, #0]
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	2221      	movs	r2, #33	; 0x21
 8017688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	2210      	movs	r2, #16
 8017690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	2200      	movs	r2, #0
 8017698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	893a      	ldrh	r2, [r7, #8]
 80176a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176aa:	b29a      	uxth	r2, r3
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	6a3a      	ldr	r2, [r7, #32]
 80176b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80176b6:	897a      	ldrh	r2, [r7, #10]
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176c0:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	2b11      	cmp	r3, #17
 80176c6:	d10c      	bne.n	80176e2 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 80176c8:	6a3b      	ldr	r3, [r7, #32]
 80176ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80176ce:	d003      	beq.n	80176d8 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 80176d0:	6a3b      	ldr	r3, [r7, #32]
 80176d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80176d6:	d101      	bne.n	80176dc <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 80176d8:	2301      	movs	r3, #1
 80176da:	e000      	b.n	80176de <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 80176dc:	2300      	movs	r3, #0
 80176de:	2b01      	cmp	r3, #1
 80176e0:	d107      	bne.n	80176f2 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	681a      	ldr	r2, [r3, #0]
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80176f0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	2200      	movs	r2, #0
 80176f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	685a      	ldr	r2, [r3, #4]
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8017708:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 801770a:	2300      	movs	r3, #0
 801770c:	e000      	b.n	8017710 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 801770e:	2302      	movs	r3, #2
  }
}
 8017710:	4618      	mov	r0, r3
 8017712:	371c      	adds	r7, #28
 8017714:	46bd      	mov	sp, r7
 8017716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771a:	4770      	bx	lr
 801771c:	20000068 	.word	0x20000068
 8017720:	14f8b589 	.word	0x14f8b589

08017724 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8017724:	b480      	push	{r7}
 8017726:	b089      	sub	sp, #36	; 0x24
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	607a      	str	r2, [r7, #4]
 801772e:	461a      	mov	r2, r3
 8017730:	460b      	mov	r3, r1
 8017732:	817b      	strh	r3, [r7, #10]
 8017734:	4613      	mov	r3, r2
 8017736:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8017738:	2300      	movs	r3, #0
 801773a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801773c:	2300      	movs	r3, #0
 801773e:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017740:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8017744:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801774c:	b2db      	uxtb	r3, r3
 801774e:	2b20      	cmp	r3, #32
 8017750:	f040 80da 	bne.w	8017908 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801775e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017762:	d005      	beq.n	8017770 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8017764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017766:	2b08      	cmp	r3, #8
 8017768:	d002      	beq.n	8017770 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 801776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776c:	2b01      	cmp	r3, #1
 801776e:	d130      	bne.n	80177d2 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8017770:	4b69      	ldr	r3, [pc, #420]	; (8017918 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	08db      	lsrs	r3, r3, #3
 8017776:	4a69      	ldr	r2, [pc, #420]	; (801791c <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8017778:	fba2 2303 	umull	r2, r3, r2, r3
 801777c:	0a1a      	lsrs	r2, r3, #8
 801777e:	4613      	mov	r3, r2
 8017780:	009b      	lsls	r3, r3, #2
 8017782:	4413      	add	r3, r2
 8017784:	009a      	lsls	r2, r3, #2
 8017786:	4413      	add	r3, r2
 8017788:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 801778a:	697b      	ldr	r3, [r7, #20]
 801778c:	3b01      	subs	r3, #1
 801778e:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8017790:	697b      	ldr	r3, [r7, #20]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d116      	bne.n	80177c4 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	2200      	movs	r2, #0
 801779a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	2220      	movs	r2, #32
 80177a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	2200      	movs	r2, #0
 80177a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177b0:	f043 0220 	orr.w	r2, r3, #32
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2200      	movs	r2, #0
 80177bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80177c0:	2301      	movs	r3, #1
 80177c2:	e0a2      	b.n	801790a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	699b      	ldr	r3, [r3, #24]
 80177ca:	f003 0302 	and.w	r3, r3, #2
 80177ce:	2b02      	cmp	r3, #2
 80177d0:	d0db      	beq.n	801778a <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80177d8:	2b01      	cmp	r3, #1
 80177da:	d101      	bne.n	80177e0 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 80177dc:	2302      	movs	r3, #2
 80177de:	e094      	b.n	801790a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	2201      	movs	r2, #1
 80177e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	f003 0301 	and.w	r3, r3, #1
 80177f2:	2b01      	cmp	r3, #1
 80177f4:	d007      	beq.n	8017806 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	681a      	ldr	r2, [r3, #0]
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	f042 0201 	orr.w	r2, r2, #1
 8017804:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	681a      	ldr	r2, [r3, #0]
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017814:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	2222      	movs	r2, #34	; 0x22
 801781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	2210      	movs	r2, #16
 8017822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	2200      	movs	r2, #0
 801782a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	893a      	ldrh	r2, [r7, #8]
 8017836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801783c:	b29a      	uxth	r2, r3
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017846:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8017848:	897a      	ldrh	r2, [r7, #10]
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017852:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017858:	b29b      	uxth	r3, r3
 801785a:	2b02      	cmp	r3, #2
 801785c:	d126      	bne.n	80178ac <HAL_I2C_Master_Seq_Receive_IT+0x188>
 801785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017860:	2b20      	cmp	r3, #32
 8017862:	d002      	beq.n	801786a <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8017864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017866:	2b10      	cmp	r3, #16
 8017868:	d120      	bne.n	80178ac <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 801786a:	69bb      	ldr	r3, [r7, #24]
 801786c:	2b12      	cmp	r3, #18
 801786e:	d114      	bne.n	801789a <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	681a      	ldr	r2, [r3, #0]
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801787e:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	681a      	ldr	r2, [r3, #0]
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801788e:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8017890:	69fb      	ldr	r3, [r7, #28]
 8017892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017896:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8017898:	e010      	b.n	80178bc <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	681a      	ldr	r2, [r3, #0]
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80178a8:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80178aa:	e007      	b.n	80178bc <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	681a      	ldr	r2, [r3, #0]
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80178ba:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80178bc:	69bb      	ldr	r3, [r7, #24]
 80178be:	2b12      	cmp	r3, #18
 80178c0:	d10c      	bne.n	80178dc <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 80178c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80178c8:	d003      	beq.n	80178d2 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 80178ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80178d0:	d101      	bne.n	80178d6 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 80178d2:	2301      	movs	r3, #1
 80178d4:	e000      	b.n	80178d8 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 80178d6:	2300      	movs	r3, #0
 80178d8:	2b01      	cmp	r3, #1
 80178da:	d107      	bne.n	80178ec <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	681a      	ldr	r2, [r3, #0]
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80178ea:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	2200      	movs	r2, #0
 80178f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	6859      	ldr	r1, [r3, #4]
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	69fa      	ldr	r2, [r7, #28]
 8017900:	430a      	orrs	r2, r1
 8017902:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8017904:	2300      	movs	r3, #0
 8017906:	e000      	b.n	801790a <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8017908:	2302      	movs	r3, #2
  }
}
 801790a:	4618      	mov	r0, r3
 801790c:	3724      	adds	r7, #36	; 0x24
 801790e:	46bd      	mov	sp, r7
 8017910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017914:	4770      	bx	lr
 8017916:	bf00      	nop
 8017918:	20000068 	.word	0x20000068
 801791c:	14f8b589 	.word	0x14f8b589

08017920 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b088      	sub	sp, #32
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8017928:	2300      	movs	r3, #0
 801792a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	681b      	ldr	r3, [r3, #0]
 8017930:	685b      	ldr	r3, [r3, #4]
 8017932:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017938:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017940:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017948:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801794a:	7bfb      	ldrb	r3, [r7, #15]
 801794c:	2b10      	cmp	r3, #16
 801794e:	d003      	beq.n	8017958 <HAL_I2C_EV_IRQHandler+0x38>
 8017950:	7bfb      	ldrb	r3, [r7, #15]
 8017952:	2b40      	cmp	r3, #64	; 0x40
 8017954:	f040 80c1 	bne.w	8017ada <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	699b      	ldr	r3, [r3, #24]
 801795e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	695b      	ldr	r3, [r3, #20]
 8017966:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8017968:	69fb      	ldr	r3, [r7, #28]
 801796a:	f003 0301 	and.w	r3, r3, #1
 801796e:	2b00      	cmp	r3, #0
 8017970:	d10d      	bne.n	801798e <HAL_I2C_EV_IRQHandler+0x6e>
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8017978:	d003      	beq.n	8017982 <HAL_I2C_EV_IRQHandler+0x62>
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8017980:	d101      	bne.n	8017986 <HAL_I2C_EV_IRQHandler+0x66>
 8017982:	2301      	movs	r3, #1
 8017984:	e000      	b.n	8017988 <HAL_I2C_EV_IRQHandler+0x68>
 8017986:	2300      	movs	r3, #0
 8017988:	2b01      	cmp	r3, #1
 801798a:	f000 8132 	beq.w	8017bf2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801798e:	69fb      	ldr	r3, [r7, #28]
 8017990:	f003 0301 	and.w	r3, r3, #1
 8017994:	2b00      	cmp	r3, #0
 8017996:	d00c      	beq.n	80179b2 <HAL_I2C_EV_IRQHandler+0x92>
 8017998:	697b      	ldr	r3, [r7, #20]
 801799a:	0a5b      	lsrs	r3, r3, #9
 801799c:	f003 0301 	and.w	r3, r3, #1
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d006      	beq.n	80179b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80179a4:	6878      	ldr	r0, [r7, #4]
 80179a6:	f001 ffd6 	bl	8019956 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f000 fd83 	bl	80184b6 <I2C_Master_SB>
 80179b0:	e092      	b.n	8017ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	08db      	lsrs	r3, r3, #3
 80179b6:	f003 0301 	and.w	r3, r3, #1
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d009      	beq.n	80179d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	0a5b      	lsrs	r3, r3, #9
 80179c2:	f003 0301 	and.w	r3, r3, #1
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d003      	beq.n	80179d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80179ca:	6878      	ldr	r0, [r7, #4]
 80179cc:	f000 fdf9 	bl	80185c2 <I2C_Master_ADD10>
 80179d0:	e082      	b.n	8017ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80179d2:	69fb      	ldr	r3, [r7, #28]
 80179d4:	085b      	lsrs	r3, r3, #1
 80179d6:	f003 0301 	and.w	r3, r3, #1
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d009      	beq.n	80179f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	0a5b      	lsrs	r3, r3, #9
 80179e2:	f003 0301 	and.w	r3, r3, #1
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d003      	beq.n	80179f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f000 fe13 	bl	8018616 <I2C_Master_ADDR>
 80179f0:	e072      	b.n	8017ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80179f2:	69bb      	ldr	r3, [r7, #24]
 80179f4:	089b      	lsrs	r3, r3, #2
 80179f6:	f003 0301 	and.w	r3, r3, #1
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d03b      	beq.n	8017a76 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017a0c:	f000 80f3 	beq.w	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017a10:	69fb      	ldr	r3, [r7, #28]
 8017a12:	09db      	lsrs	r3, r3, #7
 8017a14:	f003 0301 	and.w	r3, r3, #1
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d00f      	beq.n	8017a3c <HAL_I2C_EV_IRQHandler+0x11c>
 8017a1c:	697b      	ldr	r3, [r7, #20]
 8017a1e:	0a9b      	lsrs	r3, r3, #10
 8017a20:	f003 0301 	and.w	r3, r3, #1
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d009      	beq.n	8017a3c <HAL_I2C_EV_IRQHandler+0x11c>
 8017a28:	69fb      	ldr	r3, [r7, #28]
 8017a2a:	089b      	lsrs	r3, r3, #2
 8017a2c:	f003 0301 	and.w	r3, r3, #1
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d103      	bne.n	8017a3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f000 f9f3 	bl	8017e20 <I2C_MasterTransmit_TXE>
 8017a3a:	e04d      	b.n	8017ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	089b      	lsrs	r3, r3, #2
 8017a40:	f003 0301 	and.w	r3, r3, #1
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	f000 80d6 	beq.w	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8017a4a:	697b      	ldr	r3, [r7, #20]
 8017a4c:	0a5b      	lsrs	r3, r3, #9
 8017a4e:	f003 0301 	and.w	r3, r3, #1
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	f000 80cf 	beq.w	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8017a58:	7bbb      	ldrb	r3, [r7, #14]
 8017a5a:	2b21      	cmp	r3, #33	; 0x21
 8017a5c:	d103      	bne.n	8017a66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f000 fa7a 	bl	8017f58 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017a64:	e0c7      	b.n	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8017a66:	7bfb      	ldrb	r3, [r7, #15]
 8017a68:	2b40      	cmp	r3, #64	; 0x40
 8017a6a:	f040 80c4 	bne.w	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f000 fae8 	bl	8018044 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017a74:	e0bf      	b.n	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017a84:	f000 80b7 	beq.w	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017a88:	69fb      	ldr	r3, [r7, #28]
 8017a8a:	099b      	lsrs	r3, r3, #6
 8017a8c:	f003 0301 	and.w	r3, r3, #1
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d00f      	beq.n	8017ab4 <HAL_I2C_EV_IRQHandler+0x194>
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	0a9b      	lsrs	r3, r3, #10
 8017a98:	f003 0301 	and.w	r3, r3, #1
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d009      	beq.n	8017ab4 <HAL_I2C_EV_IRQHandler+0x194>
 8017aa0:	69fb      	ldr	r3, [r7, #28]
 8017aa2:	089b      	lsrs	r3, r3, #2
 8017aa4:	f003 0301 	and.w	r3, r3, #1
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d103      	bne.n	8017ab4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8017aac:	6878      	ldr	r0, [r7, #4]
 8017aae:	f000 fb5d 	bl	801816c <I2C_MasterReceive_RXNE>
 8017ab2:	e011      	b.n	8017ad8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ab4:	69fb      	ldr	r3, [r7, #28]
 8017ab6:	089b      	lsrs	r3, r3, #2
 8017ab8:	f003 0301 	and.w	r3, r3, #1
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	f000 809a 	beq.w	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8017ac2:	697b      	ldr	r3, [r7, #20]
 8017ac4:	0a5b      	lsrs	r3, r3, #9
 8017ac6:	f003 0301 	and.w	r3, r3, #1
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	f000 8093 	beq.w	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8017ad0:	6878      	ldr	r0, [r7, #4]
 8017ad2:	f000 fc06 	bl	80182e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017ad6:	e08e      	b.n	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8017ad8:	e08d      	b.n	8017bf6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d004      	beq.n	8017aec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	695b      	ldr	r3, [r3, #20]
 8017ae8:	61fb      	str	r3, [r7, #28]
 8017aea:	e007      	b.n	8017afc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	699b      	ldr	r3, [r3, #24]
 8017af2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	695b      	ldr	r3, [r3, #20]
 8017afa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017afc:	69fb      	ldr	r3, [r7, #28]
 8017afe:	085b      	lsrs	r3, r3, #1
 8017b00:	f003 0301 	and.w	r3, r3, #1
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d012      	beq.n	8017b2e <HAL_I2C_EV_IRQHandler+0x20e>
 8017b08:	697b      	ldr	r3, [r7, #20]
 8017b0a:	0a5b      	lsrs	r3, r3, #9
 8017b0c:	f003 0301 	and.w	r3, r3, #1
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d00c      	beq.n	8017b2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d003      	beq.n	8017b24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	699b      	ldr	r3, [r3, #24]
 8017b22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8017b24:	69b9      	ldr	r1, [r7, #24]
 8017b26:	6878      	ldr	r0, [r7, #4]
 8017b28:	f000 ffc4 	bl	8018ab4 <I2C_Slave_ADDR>
 8017b2c:	e066      	b.n	8017bfc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017b2e:	69fb      	ldr	r3, [r7, #28]
 8017b30:	091b      	lsrs	r3, r3, #4
 8017b32:	f003 0301 	and.w	r3, r3, #1
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d009      	beq.n	8017b4e <HAL_I2C_EV_IRQHandler+0x22e>
 8017b3a:	697b      	ldr	r3, [r7, #20]
 8017b3c:	0a5b      	lsrs	r3, r3, #9
 8017b3e:	f003 0301 	and.w	r3, r3, #1
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d003      	beq.n	8017b4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8017b46:	6878      	ldr	r0, [r7, #4]
 8017b48:	f000 fffe 	bl	8018b48 <I2C_Slave_STOPF>
 8017b4c:	e056      	b.n	8017bfc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017b4e:	7bbb      	ldrb	r3, [r7, #14]
 8017b50:	2b21      	cmp	r3, #33	; 0x21
 8017b52:	d002      	beq.n	8017b5a <HAL_I2C_EV_IRQHandler+0x23a>
 8017b54:	7bbb      	ldrb	r3, [r7, #14]
 8017b56:	2b29      	cmp	r3, #41	; 0x29
 8017b58:	d125      	bne.n	8017ba6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017b5a:	69fb      	ldr	r3, [r7, #28]
 8017b5c:	09db      	lsrs	r3, r3, #7
 8017b5e:	f003 0301 	and.w	r3, r3, #1
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d00f      	beq.n	8017b86 <HAL_I2C_EV_IRQHandler+0x266>
 8017b66:	697b      	ldr	r3, [r7, #20]
 8017b68:	0a9b      	lsrs	r3, r3, #10
 8017b6a:	f003 0301 	and.w	r3, r3, #1
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d009      	beq.n	8017b86 <HAL_I2C_EV_IRQHandler+0x266>
 8017b72:	69fb      	ldr	r3, [r7, #28]
 8017b74:	089b      	lsrs	r3, r3, #2
 8017b76:	f003 0301 	and.w	r3, r3, #1
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d103      	bne.n	8017b86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8017b7e:	6878      	ldr	r0, [r7, #4]
 8017b80:	f000 feda 	bl	8018938 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017b84:	e039      	b.n	8017bfa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017b86:	69fb      	ldr	r3, [r7, #28]
 8017b88:	089b      	lsrs	r3, r3, #2
 8017b8a:	f003 0301 	and.w	r3, r3, #1
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d033      	beq.n	8017bfa <HAL_I2C_EV_IRQHandler+0x2da>
 8017b92:	697b      	ldr	r3, [r7, #20]
 8017b94:	0a5b      	lsrs	r3, r3, #9
 8017b96:	f003 0301 	and.w	r3, r3, #1
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d02d      	beq.n	8017bfa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f000 ff07 	bl	80189b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017ba4:	e029      	b.n	8017bfa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017ba6:	69fb      	ldr	r3, [r7, #28]
 8017ba8:	099b      	lsrs	r3, r3, #6
 8017baa:	f003 0301 	and.w	r3, r3, #1
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d00f      	beq.n	8017bd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8017bb2:	697b      	ldr	r3, [r7, #20]
 8017bb4:	0a9b      	lsrs	r3, r3, #10
 8017bb6:	f003 0301 	and.w	r3, r3, #1
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d009      	beq.n	8017bd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8017bbe:	69fb      	ldr	r3, [r7, #28]
 8017bc0:	089b      	lsrs	r3, r3, #2
 8017bc2:	f003 0301 	and.w	r3, r3, #1
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d103      	bne.n	8017bd2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	f000 ff12 	bl	80189f4 <I2C_SlaveReceive_RXNE>
 8017bd0:	e014      	b.n	8017bfc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017bd2:	69fb      	ldr	r3, [r7, #28]
 8017bd4:	089b      	lsrs	r3, r3, #2
 8017bd6:	f003 0301 	and.w	r3, r3, #1
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d00e      	beq.n	8017bfc <HAL_I2C_EV_IRQHandler+0x2dc>
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	0a5b      	lsrs	r3, r3, #9
 8017be2:	f003 0301 	and.w	r3, r3, #1
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d008      	beq.n	8017bfc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8017bea:	6878      	ldr	r0, [r7, #4]
 8017bec:	f000 ff40 	bl	8018a70 <I2C_SlaveReceive_BTF>
 8017bf0:	e004      	b.n	8017bfc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8017bf2:	bf00      	nop
 8017bf4:	e002      	b.n	8017bfc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8017bf6:	bf00      	nop
 8017bf8:	e000      	b.n	8017bfc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8017bfa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8017bfc:	3720      	adds	r7, #32
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd80      	pop	{r7, pc}

08017c02 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8017c02:	b580      	push	{r7, lr}
 8017c04:	b08a      	sub	sp, #40	; 0x28
 8017c06:	af00      	add	r7, sp, #0
 8017c08:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	695b      	ldr	r3, [r3, #20]
 8017c10:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	685b      	ldr	r3, [r3, #4]
 8017c18:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017c24:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017c26:	6a3b      	ldr	r3, [r7, #32]
 8017c28:	0a1b      	lsrs	r3, r3, #8
 8017c2a:	f003 0301 	and.w	r3, r3, #1
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d00e      	beq.n	8017c50 <HAL_I2C_ER_IRQHandler+0x4e>
 8017c32:	69fb      	ldr	r3, [r7, #28]
 8017c34:	0a1b      	lsrs	r3, r3, #8
 8017c36:	f003 0301 	and.w	r3, r3, #1
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d008      	beq.n	8017c50 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8017c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c40:	f043 0301 	orr.w	r3, r3, #1
 8017c44:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8017c4e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017c50:	6a3b      	ldr	r3, [r7, #32]
 8017c52:	0a5b      	lsrs	r3, r3, #9
 8017c54:	f003 0301 	and.w	r3, r3, #1
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d00e      	beq.n	8017c7a <HAL_I2C_ER_IRQHandler+0x78>
 8017c5c:	69fb      	ldr	r3, [r7, #28]
 8017c5e:	0a1b      	lsrs	r3, r3, #8
 8017c60:	f003 0301 	and.w	r3, r3, #1
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d008      	beq.n	8017c7a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8017c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c6a:	f043 0302 	orr.w	r3, r3, #2
 8017c6e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8017c78:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017c7a:	6a3b      	ldr	r3, [r7, #32]
 8017c7c:	0a9b      	lsrs	r3, r3, #10
 8017c7e:	f003 0301 	and.w	r3, r3, #1
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d03f      	beq.n	8017d06 <HAL_I2C_ER_IRQHandler+0x104>
 8017c86:	69fb      	ldr	r3, [r7, #28]
 8017c88:	0a1b      	lsrs	r3, r3, #8
 8017c8a:	f003 0301 	and.w	r3, r3, #1
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d039      	beq.n	8017d06 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8017c92:	7efb      	ldrb	r3, [r7, #27]
 8017c94:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017ca4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017caa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8017cac:	7ebb      	ldrb	r3, [r7, #26]
 8017cae:	2b20      	cmp	r3, #32
 8017cb0:	d112      	bne.n	8017cd8 <HAL_I2C_ER_IRQHandler+0xd6>
 8017cb2:	697b      	ldr	r3, [r7, #20]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d10f      	bne.n	8017cd8 <HAL_I2C_ER_IRQHandler+0xd6>
 8017cb8:	7cfb      	ldrb	r3, [r7, #19]
 8017cba:	2b21      	cmp	r3, #33	; 0x21
 8017cbc:	d008      	beq.n	8017cd0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8017cbe:	7cfb      	ldrb	r3, [r7, #19]
 8017cc0:	2b29      	cmp	r3, #41	; 0x29
 8017cc2:	d005      	beq.n	8017cd0 <HAL_I2C_ER_IRQHandler+0xce>
 8017cc4:	7cfb      	ldrb	r3, [r7, #19]
 8017cc6:	2b28      	cmp	r3, #40	; 0x28
 8017cc8:	d106      	bne.n	8017cd8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	2b21      	cmp	r3, #33	; 0x21
 8017cce:	d103      	bne.n	8017cd8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	f001 f869 	bl	8018da8 <I2C_Slave_AF>
 8017cd6:	e016      	b.n	8017d06 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017ce0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8017ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce4:	f043 0304 	orr.w	r3, r3, #4
 8017ce8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8017cea:	7efb      	ldrb	r3, [r7, #27]
 8017cec:	2b10      	cmp	r3, #16
 8017cee:	d002      	beq.n	8017cf6 <HAL_I2C_ER_IRQHandler+0xf4>
 8017cf0:	7efb      	ldrb	r3, [r7, #27]
 8017cf2:	2b40      	cmp	r3, #64	; 0x40
 8017cf4:	d107      	bne.n	8017d06 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	681a      	ldr	r2, [r3, #0]
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017d04:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017d06:	6a3b      	ldr	r3, [r7, #32]
 8017d08:	0adb      	lsrs	r3, r3, #11
 8017d0a:	f003 0301 	and.w	r3, r3, #1
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d00e      	beq.n	8017d30 <HAL_I2C_ER_IRQHandler+0x12e>
 8017d12:	69fb      	ldr	r3, [r7, #28]
 8017d14:	0a1b      	lsrs	r3, r3, #8
 8017d16:	f003 0301 	and.w	r3, r3, #1
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d008      	beq.n	8017d30 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8017d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d20:	f043 0308 	orr.w	r3, r3, #8
 8017d24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8017d2e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8017d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d008      	beq.n	8017d48 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d3c:	431a      	orrs	r2, r3
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8017d42:	6878      	ldr	r0, [r7, #4]
 8017d44:	f001 f8a0 	bl	8018e88 <I2C_ITError>
  }
}
 8017d48:	bf00      	nop
 8017d4a:	3728      	adds	r7, #40	; 0x28
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	bd80      	pop	{r7, pc}

08017d50 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017d50:	b480      	push	{r7}
 8017d52:	b083      	sub	sp, #12
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8017d58:	bf00      	nop
 8017d5a:	370c      	adds	r7, #12
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d62:	4770      	bx	lr

08017d64 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017d64:	b480      	push	{r7}
 8017d66:	b083      	sub	sp, #12
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8017d6c:	bf00      	nop
 8017d6e:	370c      	adds	r7, #12
 8017d70:	46bd      	mov	sp, r7
 8017d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d76:	4770      	bx	lr

08017d78 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017d78:	b480      	push	{r7}
 8017d7a:	b083      	sub	sp, #12
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8017d80:	bf00      	nop
 8017d82:	370c      	adds	r7, #12
 8017d84:	46bd      	mov	sp, r7
 8017d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d8a:	4770      	bx	lr

08017d8c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017d8c:	b480      	push	{r7}
 8017d8e:	b083      	sub	sp, #12
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8017d94:	bf00      	nop
 8017d96:	370c      	adds	r7, #12
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9e:	4770      	bx	lr

08017da0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8017da0:	b480      	push	{r7}
 8017da2:	b083      	sub	sp, #12
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
 8017da8:	460b      	mov	r3, r1
 8017daa:	70fb      	strb	r3, [r7, #3]
 8017dac:	4613      	mov	r3, r2
 8017dae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8017db0:	bf00      	nop
 8017db2:	370c      	adds	r7, #12
 8017db4:	46bd      	mov	sp, r7
 8017db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dba:	4770      	bx	lr

08017dbc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017dbc:	b480      	push	{r7}
 8017dbe:	b083      	sub	sp, #12
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8017dc4:	bf00      	nop
 8017dc6:	370c      	adds	r7, #12
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dce:	4770      	bx	lr

08017dd0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017dd0:	b480      	push	{r7}
 8017dd2:	b083      	sub	sp, #12
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8017dd8:	bf00      	nop
 8017dda:	370c      	adds	r7, #12
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de2:	4770      	bx	lr

08017de4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017de4:	b480      	push	{r7}
 8017de6:	b083      	sub	sp, #12
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8017dec:	bf00      	nop
 8017dee:	370c      	adds	r7, #12
 8017df0:	46bd      	mov	sp, r7
 8017df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df6:	4770      	bx	lr

08017df8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017df8:	b480      	push	{r7}
 8017dfa:	b083      	sub	sp, #12
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8017e00:	bf00      	nop
 8017e02:	370c      	adds	r7, #12
 8017e04:	46bd      	mov	sp, r7
 8017e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0a:	4770      	bx	lr

08017e0c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017e0c:	b480      	push	{r7}
 8017e0e:	b083      	sub	sp, #12
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8017e14:	bf00      	nop
 8017e16:	370c      	adds	r7, #12
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1e:	4770      	bx	lr

08017e20 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b084      	sub	sp, #16
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e2e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017e36:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e3c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d150      	bne.n	8017ee8 <I2C_MasterTransmit_TXE+0xc8>
 8017e46:	7bfb      	ldrb	r3, [r7, #15]
 8017e48:	2b21      	cmp	r3, #33	; 0x21
 8017e4a:	d14d      	bne.n	8017ee8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017e4c:	68bb      	ldr	r3, [r7, #8]
 8017e4e:	2b08      	cmp	r3, #8
 8017e50:	d01d      	beq.n	8017e8e <I2C_MasterTransmit_TXE+0x6e>
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	2b20      	cmp	r3, #32
 8017e56:	d01a      	beq.n	8017e8e <I2C_MasterTransmit_TXE+0x6e>
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017e5e:	d016      	beq.n	8017e8e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	685a      	ldr	r2, [r3, #4]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017e6e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2211      	movs	r2, #17
 8017e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	2200      	movs	r2, #0
 8017e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2220      	movs	r2, #32
 8017e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f7ff ff62 	bl	8017d50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017e8c:	e060      	b.n	8017f50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	685a      	ldr	r2, [r3, #4]
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017e9c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	681a      	ldr	r2, [r3, #0]
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017eac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	2220      	movs	r2, #32
 8017eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017ec2:	b2db      	uxtb	r3, r3
 8017ec4:	2b40      	cmp	r3, #64	; 0x40
 8017ec6:	d107      	bne.n	8017ed8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	2200      	movs	r2, #0
 8017ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8017ed0:	6878      	ldr	r0, [r7, #4]
 8017ed2:	f7ff ff7d 	bl	8017dd0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017ed6:	e03b      	b.n	8017f50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	2200      	movs	r2, #0
 8017edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8017ee0:	6878      	ldr	r0, [r7, #4]
 8017ee2:	f7ff ff35 	bl	8017d50 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017ee6:	e033      	b.n	8017f50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8017ee8:	7bfb      	ldrb	r3, [r7, #15]
 8017eea:	2b21      	cmp	r3, #33	; 0x21
 8017eec:	d005      	beq.n	8017efa <I2C_MasterTransmit_TXE+0xda>
 8017eee:	7bbb      	ldrb	r3, [r7, #14]
 8017ef0:	2b40      	cmp	r3, #64	; 0x40
 8017ef2:	d12d      	bne.n	8017f50 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8017ef4:	7bfb      	ldrb	r3, [r7, #15]
 8017ef6:	2b22      	cmp	r3, #34	; 0x22
 8017ef8:	d12a      	bne.n	8017f50 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d108      	bne.n	8017f16 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	685a      	ldr	r2, [r3, #4]
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017f12:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8017f14:	e01c      	b.n	8017f50 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017f1c:	b2db      	uxtb	r3, r3
 8017f1e:	2b40      	cmp	r3, #64	; 0x40
 8017f20:	d103      	bne.n	8017f2a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8017f22:	6878      	ldr	r0, [r7, #4]
 8017f24:	f000 f88e 	bl	8018044 <I2C_MemoryTransmit_TXE_BTF>
}
 8017f28:	e012      	b.n	8017f50 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f2e:	781a      	ldrb	r2, [r3, #0]
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f3a:	1c5a      	adds	r2, r3, #1
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	3b01      	subs	r3, #1
 8017f48:	b29a      	uxth	r2, r3
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017f4e:	e7ff      	b.n	8017f50 <I2C_MasterTransmit_TXE+0x130>
 8017f50:	bf00      	nop
 8017f52:	3710      	adds	r7, #16
 8017f54:	46bd      	mov	sp, r7
 8017f56:	bd80      	pop	{r7, pc}

08017f58 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b084      	sub	sp, #16
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f64:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017f6c:	b2db      	uxtb	r3, r3
 8017f6e:	2b21      	cmp	r3, #33	; 0x21
 8017f70:	d164      	bne.n	801803c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f76:	b29b      	uxth	r3, r3
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d012      	beq.n	8017fa2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f80:	781a      	ldrb	r2, [r3, #0]
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f8c:	1c5a      	adds	r2, r3, #1
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f96:	b29b      	uxth	r3, r3
 8017f98:	3b01      	subs	r3, #1
 8017f9a:	b29a      	uxth	r2, r3
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8017fa0:	e04c      	b.n	801803c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	2b08      	cmp	r3, #8
 8017fa6:	d01d      	beq.n	8017fe4 <I2C_MasterTransmit_BTF+0x8c>
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	2b20      	cmp	r3, #32
 8017fac:	d01a      	beq.n	8017fe4 <I2C_MasterTransmit_BTF+0x8c>
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017fb4:	d016      	beq.n	8017fe4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	685a      	ldr	r2, [r3, #4]
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017fc4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	2211      	movs	r2, #17
 8017fca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2200      	movs	r2, #0
 8017fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	2220      	movs	r2, #32
 8017fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8017fdc:	6878      	ldr	r0, [r7, #4]
 8017fde:	f7ff feb7 	bl	8017d50 <HAL_I2C_MasterTxCpltCallback>
}
 8017fe2:	e02b      	b.n	801803c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	685a      	ldr	r2, [r3, #4]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017ff2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018002:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2200      	movs	r2, #0
 8018008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	2220      	movs	r2, #32
 801800e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018018:	b2db      	uxtb	r3, r3
 801801a:	2b40      	cmp	r3, #64	; 0x40
 801801c:	d107      	bne.n	801802e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	2200      	movs	r2, #0
 8018022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	f7ff fed2 	bl	8017dd0 <HAL_I2C_MemTxCpltCallback>
}
 801802c:	e006      	b.n	801803c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2200      	movs	r2, #0
 8018032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	f7ff fe8a 	bl	8017d50 <HAL_I2C_MasterTxCpltCallback>
}
 801803c:	bf00      	nop
 801803e:	3710      	adds	r7, #16
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}

08018044 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b084      	sub	sp, #16
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018052:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018058:	2b00      	cmp	r3, #0
 801805a:	d11d      	bne.n	8018098 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018060:	2b01      	cmp	r3, #1
 8018062:	d10b      	bne.n	801807c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018068:	b2da      	uxtb	r2, r3
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018074:	1c9a      	adds	r2, r3, #2
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801807a:	e073      	b.n	8018164 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018080:	b29b      	uxth	r3, r3
 8018082:	121b      	asrs	r3, r3, #8
 8018084:	b2da      	uxtb	r2, r3
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018090:	1c5a      	adds	r2, r3, #1
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	651a      	str	r2, [r3, #80]	; 0x50
}
 8018096:	e065      	b.n	8018164 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801809c:	2b01      	cmp	r3, #1
 801809e:	d10b      	bne.n	80180b8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180a4:	b2da      	uxtb	r2, r3
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180b0:	1c5a      	adds	r2, r3, #1
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80180b6:	e055      	b.n	8018164 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180bc:	2b02      	cmp	r3, #2
 80180be:	d151      	bne.n	8018164 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80180c0:	7bfb      	ldrb	r3, [r7, #15]
 80180c2:	2b22      	cmp	r3, #34	; 0x22
 80180c4:	d10d      	bne.n	80180e2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	681a      	ldr	r2, [r3, #0]
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80180d4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180da:	1c5a      	adds	r2, r3, #1
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80180e0:	e040      	b.n	8018164 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80180e6:	b29b      	uxth	r3, r3
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d015      	beq.n	8018118 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80180ec:	7bfb      	ldrb	r3, [r7, #15]
 80180ee:	2b21      	cmp	r3, #33	; 0x21
 80180f0:	d112      	bne.n	8018118 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180f6:	781a      	ldrb	r2, [r3, #0]
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018102:	1c5a      	adds	r2, r3, #1
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801810c:	b29b      	uxth	r3, r3
 801810e:	3b01      	subs	r3, #1
 8018110:	b29a      	uxth	r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8018116:	e025      	b.n	8018164 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801811c:	b29b      	uxth	r3, r3
 801811e:	2b00      	cmp	r3, #0
 8018120:	d120      	bne.n	8018164 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8018122:	7bfb      	ldrb	r3, [r7, #15]
 8018124:	2b21      	cmp	r3, #33	; 0x21
 8018126:	d11d      	bne.n	8018164 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	685a      	ldr	r2, [r3, #4]
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018136:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	681a      	ldr	r2, [r3, #0]
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018146:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	2200      	movs	r2, #0
 801814c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	2220      	movs	r2, #32
 8018152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	2200      	movs	r2, #0
 801815a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 801815e:	6878      	ldr	r0, [r7, #4]
 8018160:	f7ff fe36 	bl	8017dd0 <HAL_I2C_MemTxCpltCallback>
}
 8018164:	bf00      	nop
 8018166:	3710      	adds	r7, #16
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}

0801816c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b084      	sub	sp, #16
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801817a:	b2db      	uxtb	r3, r3
 801817c:	2b22      	cmp	r3, #34	; 0x22
 801817e:	f040 80ac 	bne.w	80182da <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018186:	b29b      	uxth	r3, r3
 8018188:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	2b03      	cmp	r3, #3
 801818e:	d921      	bls.n	80181d4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	691a      	ldr	r2, [r3, #16]
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801819a:	b2d2      	uxtb	r2, r2
 801819c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181a2:	1c5a      	adds	r2, r3, #1
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	3b01      	subs	r3, #1
 80181b0:	b29a      	uxth	r2, r3
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181ba:	b29b      	uxth	r3, r3
 80181bc:	2b03      	cmp	r3, #3
 80181be:	f040 808c 	bne.w	80182da <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	685a      	ldr	r2, [r3, #4]
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80181d0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80181d2:	e082      	b.n	80182da <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181d8:	2b02      	cmp	r3, #2
 80181da:	d075      	beq.n	80182c8 <I2C_MasterReceive_RXNE+0x15c>
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	2b01      	cmp	r3, #1
 80181e0:	d002      	beq.n	80181e8 <I2C_MasterReceive_RXNE+0x7c>
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d16f      	bne.n	80182c8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80181e8:	6878      	ldr	r0, [r7, #4]
 80181ea:	f001 fafd 	bl	80197e8 <I2C_WaitOnSTOPRequestThroughIT>
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d142      	bne.n	801827a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	681a      	ldr	r2, [r3, #0]
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018202:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	685a      	ldr	r2, [r3, #4]
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018212:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	691a      	ldr	r2, [r3, #16]
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801821e:	b2d2      	uxtb	r2, r2
 8018220:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018226:	1c5a      	adds	r2, r3, #1
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018230:	b29b      	uxth	r3, r3
 8018232:	3b01      	subs	r3, #1
 8018234:	b29a      	uxth	r2, r3
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	2220      	movs	r2, #32
 801823e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018248:	b2db      	uxtb	r3, r3
 801824a:	2b40      	cmp	r3, #64	; 0x40
 801824c:	d10a      	bne.n	8018264 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	2200      	movs	r2, #0
 8018252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	2200      	movs	r2, #0
 801825a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 801825c:	6878      	ldr	r0, [r7, #4]
 801825e:	f7ff fdc1 	bl	8017de4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018262:	e03a      	b.n	80182da <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	2200      	movs	r2, #0
 8018268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	2212      	movs	r2, #18
 8018270:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	f7ff fd76 	bl	8017d64 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8018278:	e02f      	b.n	80182da <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	685a      	ldr	r2, [r3, #4]
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018288:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	691a      	ldr	r2, [r3, #16]
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018294:	b2d2      	uxtb	r2, r2
 8018296:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801829c:	1c5a      	adds	r2, r3, #1
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182a6:	b29b      	uxth	r3, r3
 80182a8:	3b01      	subs	r3, #1
 80182aa:	b29a      	uxth	r2, r3
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2220      	movs	r2, #32
 80182b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2200      	movs	r2, #0
 80182bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80182c0:	6878      	ldr	r0, [r7, #4]
 80182c2:	f7ff fd99 	bl	8017df8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80182c6:	e008      	b.n	80182da <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	685a      	ldr	r2, [r3, #4]
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80182d6:	605a      	str	r2, [r3, #4]
}
 80182d8:	e7ff      	b.n	80182da <I2C_MasterReceive_RXNE+0x16e>
 80182da:	bf00      	nop
 80182dc:	3710      	adds	r7, #16
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}

080182e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80182e2:	b580      	push	{r7, lr}
 80182e4:	b084      	sub	sp, #16
 80182e6:	af00      	add	r7, sp, #0
 80182e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182f4:	b29b      	uxth	r3, r3
 80182f6:	2b04      	cmp	r3, #4
 80182f8:	d11b      	bne.n	8018332 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
 80182fe:	685a      	ldr	r2, [r3, #4]
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018308:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	691a      	ldr	r2, [r3, #16]
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018314:	b2d2      	uxtb	r2, r2
 8018316:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801831c:	1c5a      	adds	r2, r3, #1
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018326:	b29b      	uxth	r3, r3
 8018328:	3b01      	subs	r3, #1
 801832a:	b29a      	uxth	r2, r3
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8018330:	e0bd      	b.n	80184ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018336:	b29b      	uxth	r3, r3
 8018338:	2b03      	cmp	r3, #3
 801833a:	d129      	bne.n	8018390 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	685a      	ldr	r2, [r3, #4]
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801834a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	2b04      	cmp	r3, #4
 8018350:	d00a      	beq.n	8018368 <I2C_MasterReceive_BTF+0x86>
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	2b02      	cmp	r3, #2
 8018356:	d007      	beq.n	8018368 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	681a      	ldr	r2, [r3, #0]
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018366:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	691a      	ldr	r2, [r3, #16]
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018372:	b2d2      	uxtb	r2, r2
 8018374:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801837a:	1c5a      	adds	r2, r3, #1
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018384:	b29b      	uxth	r3, r3
 8018386:	3b01      	subs	r3, #1
 8018388:	b29a      	uxth	r2, r3
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 801838e:	e08e      	b.n	80184ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018394:	b29b      	uxth	r3, r3
 8018396:	2b02      	cmp	r3, #2
 8018398:	d176      	bne.n	8018488 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	2b01      	cmp	r3, #1
 801839e:	d002      	beq.n	80183a6 <I2C_MasterReceive_BTF+0xc4>
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	2b10      	cmp	r3, #16
 80183a4:	d108      	bne.n	80183b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	681a      	ldr	r2, [r3, #0]
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80183b4:	601a      	str	r2, [r3, #0]
 80183b6:	e019      	b.n	80183ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	2b04      	cmp	r3, #4
 80183bc:	d002      	beq.n	80183c4 <I2C_MasterReceive_BTF+0xe2>
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	2b02      	cmp	r3, #2
 80183c2:	d108      	bne.n	80183d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	681a      	ldr	r2, [r3, #0]
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80183d2:	601a      	str	r2, [r3, #0]
 80183d4:	e00a      	b.n	80183ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	2b10      	cmp	r3, #16
 80183da:	d007      	beq.n	80183ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	681a      	ldr	r2, [r3, #0]
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80183ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	691a      	ldr	r2, [r3, #16]
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183f6:	b2d2      	uxtb	r2, r2
 80183f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183fe:	1c5a      	adds	r2, r3, #1
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018408:	b29b      	uxth	r3, r3
 801840a:	3b01      	subs	r3, #1
 801840c:	b29a      	uxth	r2, r3
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	681b      	ldr	r3, [r3, #0]
 8018416:	691a      	ldr	r2, [r3, #16]
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801841c:	b2d2      	uxtb	r2, r2
 801841e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018424:	1c5a      	adds	r2, r3, #1
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801842e:	b29b      	uxth	r3, r3
 8018430:	3b01      	subs	r3, #1
 8018432:	b29a      	uxth	r2, r3
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	685a      	ldr	r2, [r3, #4]
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8018446:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2220      	movs	r2, #32
 801844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018456:	b2db      	uxtb	r3, r3
 8018458:	2b40      	cmp	r3, #64	; 0x40
 801845a:	d10a      	bne.n	8018472 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	2200      	movs	r2, #0
 8018460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	2200      	movs	r2, #0
 8018468:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 801846a:	6878      	ldr	r0, [r7, #4]
 801846c:	f7ff fcba 	bl	8017de4 <HAL_I2C_MemRxCpltCallback>
}
 8018470:	e01d      	b.n	80184ae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	2200      	movs	r2, #0
 8018476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	2212      	movs	r2, #18
 801847e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018480:	6878      	ldr	r0, [r7, #4]
 8018482:	f7ff fc6f 	bl	8017d64 <HAL_I2C_MasterRxCpltCallback>
}
 8018486:	e012      	b.n	80184ae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	691a      	ldr	r2, [r3, #16]
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018492:	b2d2      	uxtb	r2, r2
 8018494:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801849a:	1c5a      	adds	r2, r3, #1
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184a4:	b29b      	uxth	r3, r3
 80184a6:	3b01      	subs	r3, #1
 80184a8:	b29a      	uxth	r2, r3
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80184ae:	bf00      	nop
 80184b0:	3710      	adds	r7, #16
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bd80      	pop	{r7, pc}

080184b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80184b6:	b480      	push	{r7}
 80184b8:	b083      	sub	sp, #12
 80184ba:	af00      	add	r7, sp, #0
 80184bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	2b40      	cmp	r3, #64	; 0x40
 80184c8:	d117      	bne.n	80184fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d109      	bne.n	80184e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184d6:	b2db      	uxtb	r3, r3
 80184d8:	461a      	mov	r2, r3
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80184e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80184e4:	e067      	b.n	80185b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184ea:	b2db      	uxtb	r3, r3
 80184ec:	f043 0301 	orr.w	r3, r3, #1
 80184f0:	b2da      	uxtb	r2, r3
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	611a      	str	r2, [r3, #16]
}
 80184f8:	e05d      	b.n	80185b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	691b      	ldr	r3, [r3, #16]
 80184fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018502:	d133      	bne.n	801856c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801850a:	b2db      	uxtb	r3, r3
 801850c:	2b21      	cmp	r3, #33	; 0x21
 801850e:	d109      	bne.n	8018524 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018514:	b2db      	uxtb	r3, r3
 8018516:	461a      	mov	r2, r3
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8018520:	611a      	str	r2, [r3, #16]
 8018522:	e008      	b.n	8018536 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018528:	b2db      	uxtb	r3, r3
 801852a:	f043 0301 	orr.w	r3, r3, #1
 801852e:	b2da      	uxtb	r2, r3
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801853a:	2b00      	cmp	r3, #0
 801853c:	d004      	beq.n	8018548 <I2C_Master_SB+0x92>
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018544:	2b00      	cmp	r3, #0
 8018546:	d108      	bne.n	801855a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801854c:	2b00      	cmp	r3, #0
 801854e:	d032      	beq.n	80185b6 <I2C_Master_SB+0x100>
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018556:	2b00      	cmp	r3, #0
 8018558:	d02d      	beq.n	80185b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	685a      	ldr	r2, [r3, #4]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018568:	605a      	str	r2, [r3, #4]
}
 801856a:	e024      	b.n	80185b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018570:	2b00      	cmp	r3, #0
 8018572:	d10e      	bne.n	8018592 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018578:	b29b      	uxth	r3, r3
 801857a:	11db      	asrs	r3, r3, #7
 801857c:	b2db      	uxtb	r3, r3
 801857e:	f003 0306 	and.w	r3, r3, #6
 8018582:	b2db      	uxtb	r3, r3
 8018584:	f063 030f 	orn	r3, r3, #15
 8018588:	b2da      	uxtb	r2, r3
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	611a      	str	r2, [r3, #16]
}
 8018590:	e011      	b.n	80185b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018596:	2b01      	cmp	r3, #1
 8018598:	d10d      	bne.n	80185b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801859e:	b29b      	uxth	r3, r3
 80185a0:	11db      	asrs	r3, r3, #7
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	f003 0306 	and.w	r3, r3, #6
 80185a8:	b2db      	uxtb	r3, r3
 80185aa:	f063 030e 	orn	r3, r3, #14
 80185ae:	b2da      	uxtb	r2, r3
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	611a      	str	r2, [r3, #16]
}
 80185b6:	bf00      	nop
 80185b8:	370c      	adds	r7, #12
 80185ba:	46bd      	mov	sp, r7
 80185bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c0:	4770      	bx	lr

080185c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80185c2:	b480      	push	{r7}
 80185c4:	b083      	sub	sp, #12
 80185c6:	af00      	add	r7, sp, #0
 80185c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80185ce:	b2da      	uxtb	r2, r3
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d004      	beq.n	80185e8 <I2C_Master_ADD10+0x26>
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80185e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d108      	bne.n	80185fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d00c      	beq.n	801860a <I2C_Master_ADD10+0x48>
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d007      	beq.n	801860a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	685a      	ldr	r2, [r3, #4]
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8018608:	605a      	str	r2, [r3, #4]
  }
}
 801860a:	bf00      	nop
 801860c:	370c      	adds	r7, #12
 801860e:	46bd      	mov	sp, r7
 8018610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018614:	4770      	bx	lr

08018616 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8018616:	b480      	push	{r7}
 8018618:	b091      	sub	sp, #68	; 0x44
 801861a:	af00      	add	r7, sp, #0
 801861c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018624:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801862c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018632:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801863a:	b2db      	uxtb	r3, r3
 801863c:	2b22      	cmp	r3, #34	; 0x22
 801863e:	f040 8169 	bne.w	8018914 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018646:	2b00      	cmp	r3, #0
 8018648:	d10f      	bne.n	801866a <I2C_Master_ADDR+0x54>
 801864a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801864e:	2b40      	cmp	r3, #64	; 0x40
 8018650:	d10b      	bne.n	801866a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018652:	2300      	movs	r3, #0
 8018654:	633b      	str	r3, [r7, #48]	; 0x30
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	695b      	ldr	r3, [r3, #20]
 801865c:	633b      	str	r3, [r7, #48]	; 0x30
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	699b      	ldr	r3, [r3, #24]
 8018664:	633b      	str	r3, [r7, #48]	; 0x30
 8018666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018668:	e160      	b.n	801892c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801866e:	2b00      	cmp	r3, #0
 8018670:	d11d      	bne.n	80186ae <I2C_Master_ADDR+0x98>
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	691b      	ldr	r3, [r3, #16]
 8018676:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801867a:	d118      	bne.n	80186ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801867c:	2300      	movs	r3, #0
 801867e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	695b      	ldr	r3, [r3, #20]
 8018686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	699b      	ldr	r3, [r3, #24]
 801868e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018690:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	681a      	ldr	r2, [r3, #0]
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80186a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80186a6:	1c5a      	adds	r2, r3, #1
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	651a      	str	r2, [r3, #80]	; 0x50
 80186ac:	e13e      	b.n	801892c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186b2:	b29b      	uxth	r3, r3
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d113      	bne.n	80186e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80186b8:	2300      	movs	r3, #0
 80186ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	695b      	ldr	r3, [r3, #20]
 80186c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	699b      	ldr	r3, [r3, #24]
 80186ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80186cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	681a      	ldr	r2, [r3, #0]
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80186dc:	601a      	str	r2, [r3, #0]
 80186de:	e115      	b.n	801890c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186e4:	b29b      	uxth	r3, r3
 80186e6:	2b01      	cmp	r3, #1
 80186e8:	f040 808a 	bne.w	8018800 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80186ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80186f2:	d137      	bne.n	8018764 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	681a      	ldr	r2, [r3, #0]
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018702:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	685b      	ldr	r3, [r3, #4]
 801870a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801870e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018712:	d113      	bne.n	801873c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018722:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018724:	2300      	movs	r3, #0
 8018726:	627b      	str	r3, [r7, #36]	; 0x24
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	681b      	ldr	r3, [r3, #0]
 801872c:	695b      	ldr	r3, [r3, #20]
 801872e:	627b      	str	r3, [r7, #36]	; 0x24
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	699b      	ldr	r3, [r3, #24]
 8018736:	627b      	str	r3, [r7, #36]	; 0x24
 8018738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801873a:	e0e7      	b.n	801890c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801873c:	2300      	movs	r3, #0
 801873e:	623b      	str	r3, [r7, #32]
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	695b      	ldr	r3, [r3, #20]
 8018746:	623b      	str	r3, [r7, #32]
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	699b      	ldr	r3, [r3, #24]
 801874e:	623b      	str	r3, [r7, #32]
 8018750:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	681a      	ldr	r2, [r3, #0]
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018760:	601a      	str	r2, [r3, #0]
 8018762:	e0d3      	b.n	801890c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8018764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018766:	2b08      	cmp	r3, #8
 8018768:	d02e      	beq.n	80187c8 <I2C_Master_ADDR+0x1b2>
 801876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801876c:	2b20      	cmp	r3, #32
 801876e:	d02b      	beq.n	80187c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8018770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018772:	2b12      	cmp	r3, #18
 8018774:	d102      	bne.n	801877c <I2C_Master_ADDR+0x166>
 8018776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018778:	2b01      	cmp	r3, #1
 801877a:	d125      	bne.n	80187c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801877e:	2b04      	cmp	r3, #4
 8018780:	d00e      	beq.n	80187a0 <I2C_Master_ADDR+0x18a>
 8018782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018784:	2b02      	cmp	r3, #2
 8018786:	d00b      	beq.n	80187a0 <I2C_Master_ADDR+0x18a>
 8018788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801878a:	2b10      	cmp	r3, #16
 801878c:	d008      	beq.n	80187a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	681a      	ldr	r2, [r3, #0]
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801879c:	601a      	str	r2, [r3, #0]
 801879e:	e007      	b.n	80187b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	681a      	ldr	r2, [r3, #0]
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80187ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80187b0:	2300      	movs	r3, #0
 80187b2:	61fb      	str	r3, [r7, #28]
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	695b      	ldr	r3, [r3, #20]
 80187ba:	61fb      	str	r3, [r7, #28]
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	699b      	ldr	r3, [r3, #24]
 80187c2:	61fb      	str	r3, [r7, #28]
 80187c4:	69fb      	ldr	r3, [r7, #28]
 80187c6:	e0a1      	b.n	801890c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	681a      	ldr	r2, [r3, #0]
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80187d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80187d8:	2300      	movs	r3, #0
 80187da:	61bb      	str	r3, [r7, #24]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	695b      	ldr	r3, [r3, #20]
 80187e2:	61bb      	str	r3, [r7, #24]
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	699b      	ldr	r3, [r3, #24]
 80187ea:	61bb      	str	r3, [r7, #24]
 80187ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	681a      	ldr	r2, [r3, #0]
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80187fc:	601a      	str	r2, [r3, #0]
 80187fe:	e085      	b.n	801890c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018804:	b29b      	uxth	r3, r3
 8018806:	2b02      	cmp	r3, #2
 8018808:	d14d      	bne.n	80188a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801880c:	2b04      	cmp	r3, #4
 801880e:	d016      	beq.n	801883e <I2C_Master_ADDR+0x228>
 8018810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018812:	2b02      	cmp	r3, #2
 8018814:	d013      	beq.n	801883e <I2C_Master_ADDR+0x228>
 8018816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018818:	2b10      	cmp	r3, #16
 801881a:	d010      	beq.n	801883e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	681a      	ldr	r2, [r3, #0]
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801882a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	681a      	ldr	r2, [r3, #0]
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801883a:	601a      	str	r2, [r3, #0]
 801883c:	e007      	b.n	801884e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	681a      	ldr	r2, [r3, #0]
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801884c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	685b      	ldr	r3, [r3, #4]
 8018854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801885c:	d117      	bne.n	801888e <I2C_Master_ADDR+0x278>
 801885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018860:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018864:	d00b      	beq.n	801887e <I2C_Master_ADDR+0x268>
 8018866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018868:	2b01      	cmp	r3, #1
 801886a:	d008      	beq.n	801887e <I2C_Master_ADDR+0x268>
 801886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801886e:	2b08      	cmp	r3, #8
 8018870:	d005      	beq.n	801887e <I2C_Master_ADDR+0x268>
 8018872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018874:	2b10      	cmp	r3, #16
 8018876:	d002      	beq.n	801887e <I2C_Master_ADDR+0x268>
 8018878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801887a:	2b20      	cmp	r3, #32
 801887c:	d107      	bne.n	801888e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	685a      	ldr	r2, [r3, #4]
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801888c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801888e:	2300      	movs	r3, #0
 8018890:	617b      	str	r3, [r7, #20]
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	695b      	ldr	r3, [r3, #20]
 8018898:	617b      	str	r3, [r7, #20]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	699b      	ldr	r3, [r3, #24]
 80188a0:	617b      	str	r3, [r7, #20]
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	e032      	b.n	801890c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	681a      	ldr	r2, [r3, #0]
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80188b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80188c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80188c4:	d117      	bne.n	80188f6 <I2C_Master_ADDR+0x2e0>
 80188c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80188cc:	d00b      	beq.n	80188e6 <I2C_Master_ADDR+0x2d0>
 80188ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188d0:	2b01      	cmp	r3, #1
 80188d2:	d008      	beq.n	80188e6 <I2C_Master_ADDR+0x2d0>
 80188d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188d6:	2b08      	cmp	r3, #8
 80188d8:	d005      	beq.n	80188e6 <I2C_Master_ADDR+0x2d0>
 80188da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188dc:	2b10      	cmp	r3, #16
 80188de:	d002      	beq.n	80188e6 <I2C_Master_ADDR+0x2d0>
 80188e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188e2:	2b20      	cmp	r3, #32
 80188e4:	d107      	bne.n	80188f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	685a      	ldr	r2, [r3, #4]
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80188f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80188f6:	2300      	movs	r3, #0
 80188f8:	613b      	str	r3, [r7, #16]
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	695b      	ldr	r3, [r3, #20]
 8018900:	613b      	str	r3, [r7, #16]
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	699b      	ldr	r3, [r3, #24]
 8018908:	613b      	str	r3, [r7, #16]
 801890a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2200      	movs	r2, #0
 8018910:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8018912:	e00b      	b.n	801892c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018914:	2300      	movs	r3, #0
 8018916:	60fb      	str	r3, [r7, #12]
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	695b      	ldr	r3, [r3, #20]
 801891e:	60fb      	str	r3, [r7, #12]
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	699b      	ldr	r3, [r3, #24]
 8018926:	60fb      	str	r3, [r7, #12]
 8018928:	68fb      	ldr	r3, [r7, #12]
}
 801892a:	e7ff      	b.n	801892c <I2C_Master_ADDR+0x316>
 801892c:	bf00      	nop
 801892e:	3744      	adds	r7, #68	; 0x44
 8018930:	46bd      	mov	sp, r7
 8018932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018936:	4770      	bx	lr

08018938 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018946:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801894c:	b29b      	uxth	r3, r3
 801894e:	2b00      	cmp	r3, #0
 8018950:	d02b      	beq.n	80189aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018956:	781a      	ldrb	r2, [r3, #0]
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018962:	1c5a      	adds	r2, r3, #1
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801896c:	b29b      	uxth	r3, r3
 801896e:	3b01      	subs	r3, #1
 8018970:	b29a      	uxth	r2, r3
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801897a:	b29b      	uxth	r3, r3
 801897c:	2b00      	cmp	r3, #0
 801897e:	d114      	bne.n	80189aa <I2C_SlaveTransmit_TXE+0x72>
 8018980:	7bfb      	ldrb	r3, [r7, #15]
 8018982:	2b29      	cmp	r3, #41	; 0x29
 8018984:	d111      	bne.n	80189aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	685a      	ldr	r2, [r3, #4]
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018994:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	2221      	movs	r2, #33	; 0x21
 801899a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	2228      	movs	r2, #40	; 0x28
 80189a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80189a4:	6878      	ldr	r0, [r7, #4]
 80189a6:	f7ff f9e7 	bl	8017d78 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80189aa:	bf00      	nop
 80189ac:	3710      	adds	r7, #16
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}

080189b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80189b2:	b480      	push	{r7}
 80189b4:	b083      	sub	sp, #12
 80189b6:	af00      	add	r7, sp, #0
 80189b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189be:	b29b      	uxth	r3, r3
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d011      	beq.n	80189e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c8:	781a      	ldrb	r2, [r3, #0]
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189d4:	1c5a      	adds	r2, r3, #1
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189de:	b29b      	uxth	r3, r3
 80189e0:	3b01      	subs	r3, #1
 80189e2:	b29a      	uxth	r2, r3
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80189e8:	bf00      	nop
 80189ea:	370c      	adds	r7, #12
 80189ec:	46bd      	mov	sp, r7
 80189ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f2:	4770      	bx	lr

080189f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b084      	sub	sp, #16
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018a02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a08:	b29b      	uxth	r3, r3
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d02c      	beq.n	8018a68 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	691a      	ldr	r2, [r3, #16]
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a18:	b2d2      	uxtb	r2, r2
 8018a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a20:	1c5a      	adds	r2, r3, #1
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a2a:	b29b      	uxth	r3, r3
 8018a2c:	3b01      	subs	r3, #1
 8018a2e:	b29a      	uxth	r2, r3
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a38:	b29b      	uxth	r3, r3
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d114      	bne.n	8018a68 <I2C_SlaveReceive_RXNE+0x74>
 8018a3e:	7bfb      	ldrb	r3, [r7, #15]
 8018a40:	2b2a      	cmp	r3, #42	; 0x2a
 8018a42:	d111      	bne.n	8018a68 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	685a      	ldr	r2, [r3, #4]
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018a52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2222      	movs	r2, #34	; 0x22
 8018a58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	2228      	movs	r2, #40	; 0x28
 8018a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f7ff f992 	bl	8017d8c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8018a68:	bf00      	nop
 8018a6a:	3710      	adds	r7, #16
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bd80      	pop	{r7, pc}

08018a70 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8018a70:	b480      	push	{r7}
 8018a72:	b083      	sub	sp, #12
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a7c:	b29b      	uxth	r3, r3
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	d012      	beq.n	8018aa8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	691a      	ldr	r2, [r3, #16]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a8c:	b2d2      	uxtb	r2, r2
 8018a8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a94:	1c5a      	adds	r2, r3, #1
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a9e:	b29b      	uxth	r3, r3
 8018aa0:	3b01      	subs	r3, #1
 8018aa2:	b29a      	uxth	r2, r3
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8018aa8:	bf00      	nop
 8018aaa:	370c      	adds	r7, #12
 8018aac:	46bd      	mov	sp, r7
 8018aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab2:	4770      	bx	lr

08018ab4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b084      	sub	sp, #16
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
 8018abc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8018abe:	2300      	movs	r3, #0
 8018ac0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018ac8:	b2db      	uxtb	r3, r3
 8018aca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018ace:	2b28      	cmp	r3, #40	; 0x28
 8018ad0:	d127      	bne.n	8018b22 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	685a      	ldr	r2, [r3, #4]
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018ae0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8018ae2:	683b      	ldr	r3, [r7, #0]
 8018ae4:	089b      	lsrs	r3, r3, #2
 8018ae6:	f003 0301 	and.w	r3, r3, #1
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d101      	bne.n	8018af2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8018aee:	2301      	movs	r3, #1
 8018af0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	09db      	lsrs	r3, r3, #7
 8018af6:	f003 0301 	and.w	r3, r3, #1
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d103      	bne.n	8018b06 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	68db      	ldr	r3, [r3, #12]
 8018b02:	81bb      	strh	r3, [r7, #12]
 8018b04:	e002      	b.n	8018b0c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	699b      	ldr	r3, [r3, #24]
 8018b0a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	2200      	movs	r2, #0
 8018b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8018b14:	89ba      	ldrh	r2, [r7, #12]
 8018b16:	7bfb      	ldrb	r3, [r7, #15]
 8018b18:	4619      	mov	r1, r3
 8018b1a:	6878      	ldr	r0, [r7, #4]
 8018b1c:	f7ff f940 	bl	8017da0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8018b20:	e00e      	b.n	8018b40 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8018b22:	2300      	movs	r3, #0
 8018b24:	60bb      	str	r3, [r7, #8]
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	695b      	ldr	r3, [r3, #20]
 8018b2c:	60bb      	str	r3, [r7, #8]
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	699b      	ldr	r3, [r3, #24]
 8018b34:	60bb      	str	r3, [r7, #8]
 8018b36:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8018b40:	bf00      	nop
 8018b42:	3710      	adds	r7, #16
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}

08018b48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b084      	sub	sp, #16
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018b56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	685a      	ldr	r2, [r3, #4]
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018b66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8018b68:	2300      	movs	r3, #0
 8018b6a:	60bb      	str	r3, [r7, #8]
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	695b      	ldr	r3, [r3, #20]
 8018b72:	60bb      	str	r3, [r7, #8]
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	681a      	ldr	r2, [r3, #0]
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	f042 0201 	orr.w	r2, r2, #1
 8018b82:	601a      	str	r2, [r3, #0]
 8018b84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	681a      	ldr	r2, [r3, #0]
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018b94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	685b      	ldr	r3, [r3, #4]
 8018b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018ba4:	d172      	bne.n	8018c8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8018ba6:	7bfb      	ldrb	r3, [r7, #15]
 8018ba8:	2b22      	cmp	r3, #34	; 0x22
 8018baa:	d002      	beq.n	8018bb2 <I2C_Slave_STOPF+0x6a>
 8018bac:	7bfb      	ldrb	r3, [r7, #15]
 8018bae:	2b2a      	cmp	r3, #42	; 0x2a
 8018bb0:	d135      	bne.n	8018c1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	685b      	ldr	r3, [r3, #4]
 8018bba:	b29a      	uxth	r2, r3
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018bc4:	b29b      	uxth	r3, r3
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d005      	beq.n	8018bd6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bce:	f043 0204 	orr.w	r2, r3, #4
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	685a      	ldr	r2, [r3, #4]
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018be4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018bea:	4618      	mov	r0, r3
 8018bec:	f7fd fdb4 	bl	8016758 <HAL_DMA_GetState>
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	2b01      	cmp	r3, #1
 8018bf4:	d049      	beq.n	8018c8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018bfa:	4a69      	ldr	r2, [pc, #420]	; (8018da0 <I2C_Slave_STOPF+0x258>)
 8018bfc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7fd fbfc 	bl	8016400 <HAL_DMA_Abort_IT>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d03d      	beq.n	8018c8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c14:	687a      	ldr	r2, [r7, #4]
 8018c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018c18:	4610      	mov	r0, r2
 8018c1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018c1c:	e035      	b.n	8018c8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	685b      	ldr	r3, [r3, #4]
 8018c26:	b29a      	uxth	r2, r3
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c30:	b29b      	uxth	r3, r3
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d005      	beq.n	8018c42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c3a:	f043 0204 	orr.w	r2, r3, #4
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	685a      	ldr	r2, [r3, #4]
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018c50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c56:	4618      	mov	r0, r3
 8018c58:	f7fd fd7e 	bl	8016758 <HAL_DMA_GetState>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	2b01      	cmp	r3, #1
 8018c60:	d014      	beq.n	8018c8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c66:	4a4e      	ldr	r2, [pc, #312]	; (8018da0 <I2C_Slave_STOPF+0x258>)
 8018c68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c6e:	4618      	mov	r0, r3
 8018c70:	f7fd fbc6 	bl	8016400 <HAL_DMA_Abort_IT>
 8018c74:	4603      	mov	r3, r0
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d008      	beq.n	8018c8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c80:	687a      	ldr	r2, [r7, #4]
 8018c82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018c84:	4610      	mov	r0, r2
 8018c86:	4798      	blx	r3
 8018c88:	e000      	b.n	8018c8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018c8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c90:	b29b      	uxth	r3, r3
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d03e      	beq.n	8018d14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	695b      	ldr	r3, [r3, #20]
 8018c9c:	f003 0304 	and.w	r3, r3, #4
 8018ca0:	2b04      	cmp	r3, #4
 8018ca2:	d112      	bne.n	8018cca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	691a      	ldr	r2, [r3, #16]
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cae:	b2d2      	uxtb	r2, r2
 8018cb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb6:	1c5a      	adds	r2, r3, #1
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cc0:	b29b      	uxth	r3, r3
 8018cc2:	3b01      	subs	r3, #1
 8018cc4:	b29a      	uxth	r2, r3
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	695b      	ldr	r3, [r3, #20]
 8018cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018cd4:	2b40      	cmp	r3, #64	; 0x40
 8018cd6:	d112      	bne.n	8018cfe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	691a      	ldr	r2, [r3, #16]
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce2:	b2d2      	uxtb	r2, r2
 8018ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cea:	1c5a      	adds	r2, r3, #1
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018cf4:	b29b      	uxth	r3, r3
 8018cf6:	3b01      	subs	r3, #1
 8018cf8:	b29a      	uxth	r2, r3
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018d02:	b29b      	uxth	r3, r3
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d005      	beq.n	8018d14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d0c:	f043 0204 	orr.w	r2, r3, #4
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d003      	beq.n	8018d24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8018d1c:	6878      	ldr	r0, [r7, #4]
 8018d1e:	f000 f8b3 	bl	8018e88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8018d22:	e039      	b.n	8018d98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8018d24:	7bfb      	ldrb	r3, [r7, #15]
 8018d26:	2b2a      	cmp	r3, #42	; 0x2a
 8018d28:	d109      	bne.n	8018d3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2228      	movs	r2, #40	; 0x28
 8018d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f7ff f827 	bl	8017d8c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	2b28      	cmp	r3, #40	; 0x28
 8018d48:	d111      	bne.n	8018d6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	4a15      	ldr	r2, [pc, #84]	; (8018da4 <I2C_Slave_STOPF+0x25c>)
 8018d4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	2200      	movs	r2, #0
 8018d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	2220      	movs	r2, #32
 8018d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	2200      	movs	r2, #0
 8018d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8018d66:	6878      	ldr	r0, [r7, #4]
 8018d68:	f7ff f828 	bl	8017dbc <HAL_I2C_ListenCpltCallback>
}
 8018d6c:	e014      	b.n	8018d98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d72:	2b22      	cmp	r3, #34	; 0x22
 8018d74:	d002      	beq.n	8018d7c <I2C_Slave_STOPF+0x234>
 8018d76:	7bfb      	ldrb	r3, [r7, #15]
 8018d78:	2b22      	cmp	r3, #34	; 0x22
 8018d7a:	d10d      	bne.n	8018d98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	2200      	movs	r2, #0
 8018d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	2220      	movs	r2, #32
 8018d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f7fe fffa 	bl	8017d8c <HAL_I2C_SlaveRxCpltCallback>
}
 8018d98:	bf00      	nop
 8018d9a:	3710      	adds	r7, #16
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	080193e9 	.word	0x080193e9
 8018da4:	ffff0000 	.word	0xffff0000

08018da8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b084      	sub	sp, #16
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018db6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dbc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8018dbe:	68bb      	ldr	r3, [r7, #8]
 8018dc0:	2b08      	cmp	r3, #8
 8018dc2:	d002      	beq.n	8018dca <I2C_Slave_AF+0x22>
 8018dc4:	68bb      	ldr	r3, [r7, #8]
 8018dc6:	2b20      	cmp	r3, #32
 8018dc8:	d129      	bne.n	8018e1e <I2C_Slave_AF+0x76>
 8018dca:	7bfb      	ldrb	r3, [r7, #15]
 8018dcc:	2b28      	cmp	r3, #40	; 0x28
 8018dce:	d126      	bne.n	8018e1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	4a2c      	ldr	r2, [pc, #176]	; (8018e84 <I2C_Slave_AF+0xdc>)
 8018dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	685a      	ldr	r2, [r3, #4]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018de4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018dee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	681a      	ldr	r2, [r3, #0]
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018dfe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	2200      	movs	r2, #0
 8018e04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	2220      	movs	r2, #32
 8018e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	2200      	movs	r2, #0
 8018e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8018e16:	6878      	ldr	r0, [r7, #4]
 8018e18:	f7fe ffd0 	bl	8017dbc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8018e1c:	e02e      	b.n	8018e7c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8018e1e:	7bfb      	ldrb	r3, [r7, #15]
 8018e20:	2b21      	cmp	r3, #33	; 0x21
 8018e22:	d126      	bne.n	8018e72 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	4a17      	ldr	r2, [pc, #92]	; (8018e84 <I2C_Slave_AF+0xdc>)
 8018e28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2221      	movs	r2, #33	; 0x21
 8018e2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	2220      	movs	r2, #32
 8018e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	685a      	ldr	r2, [r3, #4]
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018e4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018e58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	681a      	ldr	r2, [r3, #0]
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8018e68:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8018e6a:	6878      	ldr	r0, [r7, #4]
 8018e6c:	f7fe ff84 	bl	8017d78 <HAL_I2C_SlaveTxCpltCallback>
}
 8018e70:	e004      	b.n	8018e7c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8018e7a:	615a      	str	r2, [r3, #20]
}
 8018e7c:	bf00      	nop
 8018e7e:	3710      	adds	r7, #16
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	ffff0000 	.word	0xffff0000

08018e88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b084      	sub	sp, #16
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018e96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018e9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8018ea0:	7bbb      	ldrb	r3, [r7, #14]
 8018ea2:	2b10      	cmp	r3, #16
 8018ea4:	d002      	beq.n	8018eac <I2C_ITError+0x24>
 8018ea6:	7bbb      	ldrb	r3, [r7, #14]
 8018ea8:	2b40      	cmp	r3, #64	; 0x40
 8018eaa:	d10a      	bne.n	8018ec2 <I2C_ITError+0x3a>
 8018eac:	7bfb      	ldrb	r3, [r7, #15]
 8018eae:	2b22      	cmp	r3, #34	; 0x22
 8018eb0:	d107      	bne.n	8018ec2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	681a      	ldr	r2, [r3, #0]
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018ec0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018ec2:	7bfb      	ldrb	r3, [r7, #15]
 8018ec4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018ec8:	2b28      	cmp	r3, #40	; 0x28
 8018eca:	d107      	bne.n	8018edc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	2200      	movs	r2, #0
 8018ed0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	2228      	movs	r2, #40	; 0x28
 8018ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8018eda:	e015      	b.n	8018f08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	685b      	ldr	r3, [r3, #4]
 8018ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018eea:	d00a      	beq.n	8018f02 <I2C_ITError+0x7a>
 8018eec:	7bfb      	ldrb	r3, [r7, #15]
 8018eee:	2b60      	cmp	r3, #96	; 0x60
 8018ef0:	d007      	beq.n	8018f02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	2220      	movs	r2, #32
 8018ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	2200      	movs	r2, #0
 8018efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	2200      	movs	r2, #0
 8018f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	685b      	ldr	r3, [r3, #4]
 8018f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018f16:	d162      	bne.n	8018fde <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	685a      	ldr	r2, [r3, #4]
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018f26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018f30:	b2db      	uxtb	r3, r3
 8018f32:	2b01      	cmp	r3, #1
 8018f34:	d020      	beq.n	8018f78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f3a:	4a6a      	ldr	r2, [pc, #424]	; (80190e4 <I2C_ITError+0x25c>)
 8018f3c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7fd fa5c 	bl	8016400 <HAL_DMA_Abort_IT>
 8018f48:	4603      	mov	r3, r0
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	f000 8089 	beq.w	8019062 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	681a      	ldr	r2, [r3, #0]
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	f022 0201 	bic.w	r2, r2, #1
 8018f5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	2220      	movs	r2, #32
 8018f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f6e:	687a      	ldr	r2, [r7, #4]
 8018f70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018f72:	4610      	mov	r0, r2
 8018f74:	4798      	blx	r3
 8018f76:	e074      	b.n	8019062 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f7c:	4a59      	ldr	r2, [pc, #356]	; (80190e4 <I2C_ITError+0x25c>)
 8018f7e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7fd fa3b 	bl	8016400 <HAL_DMA_Abort_IT>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d068      	beq.n	8019062 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	695b      	ldr	r3, [r3, #20]
 8018f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f9a:	2b40      	cmp	r3, #64	; 0x40
 8018f9c:	d10b      	bne.n	8018fb6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	691a      	ldr	r2, [r3, #16]
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa8:	b2d2      	uxtb	r2, r2
 8018faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fb0:	1c5a      	adds	r2, r3, #1
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	681a      	ldr	r2, [r3, #0]
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	f022 0201 	bic.w	r2, r2, #1
 8018fc4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	2220      	movs	r2, #32
 8018fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018fd4:	687a      	ldr	r2, [r7, #4]
 8018fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018fd8:	4610      	mov	r0, r2
 8018fda:	4798      	blx	r3
 8018fdc:	e041      	b.n	8019062 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	2b60      	cmp	r3, #96	; 0x60
 8018fe8:	d125      	bne.n	8019036 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	2220      	movs	r2, #32
 8018fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	695b      	ldr	r3, [r3, #20]
 8018ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019002:	2b40      	cmp	r3, #64	; 0x40
 8019004:	d10b      	bne.n	801901e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	691a      	ldr	r2, [r3, #16]
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019010:	b2d2      	uxtb	r2, r2
 8019012:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019018:	1c5a      	adds	r2, r3, #1
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	681a      	ldr	r2, [r3, #0]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	f022 0201 	bic.w	r2, r2, #1
 801902c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801902e:	6878      	ldr	r0, [r7, #4]
 8019030:	f7fe feec 	bl	8017e0c <HAL_I2C_AbortCpltCallback>
 8019034:	e015      	b.n	8019062 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	695b      	ldr	r3, [r3, #20]
 801903c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019040:	2b40      	cmp	r3, #64	; 0x40
 8019042:	d10b      	bne.n	801905c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	691a      	ldr	r2, [r3, #16]
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801904e:	b2d2      	uxtb	r2, r2
 8019050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019056:	1c5a      	adds	r2, r3, #1
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801905c:	6878      	ldr	r0, [r7, #4]
 801905e:	f7fe fecb 	bl	8017df8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019066:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019068:	68bb      	ldr	r3, [r7, #8]
 801906a:	f003 0301 	and.w	r3, r3, #1
 801906e:	2b00      	cmp	r3, #0
 8019070:	d10e      	bne.n	8019090 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019072:	68bb      	ldr	r3, [r7, #8]
 8019074:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8019078:	2b00      	cmp	r3, #0
 801907a:	d109      	bne.n	8019090 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8019082:	2b00      	cmp	r3, #0
 8019084:	d104      	bne.n	8019090 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8019086:	68bb      	ldr	r3, [r7, #8]
 8019088:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 801908c:	2b00      	cmp	r3, #0
 801908e:	d007      	beq.n	80190a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	685a      	ldr	r2, [r3, #4]
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801909e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80190a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190ac:	f003 0304 	and.w	r3, r3, #4
 80190b0:	2b04      	cmp	r3, #4
 80190b2:	d113      	bne.n	80190dc <I2C_ITError+0x254>
 80190b4:	7bfb      	ldrb	r3, [r7, #15]
 80190b6:	2b28      	cmp	r3, #40	; 0x28
 80190b8:	d110      	bne.n	80190dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	4a0a      	ldr	r2, [pc, #40]	; (80190e8 <I2C_ITError+0x260>)
 80190be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	2200      	movs	r2, #0
 80190c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2220      	movs	r2, #32
 80190ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2200      	movs	r2, #0
 80190d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	f7fe fe70 	bl	8017dbc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80190dc:	bf00      	nop
 80190de:	3710      	adds	r7, #16
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd80      	pop	{r7, pc}
 80190e4:	080193e9 	.word	0x080193e9
 80190e8:	ffff0000 	.word	0xffff0000

080190ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b088      	sub	sp, #32
 80190f0:	af02      	add	r7, sp, #8
 80190f2:	60f8      	str	r0, [r7, #12]
 80190f4:	4608      	mov	r0, r1
 80190f6:	4611      	mov	r1, r2
 80190f8:	461a      	mov	r2, r3
 80190fa:	4603      	mov	r3, r0
 80190fc:	817b      	strh	r3, [r7, #10]
 80190fe:	460b      	mov	r3, r1
 8019100:	813b      	strh	r3, [r7, #8]
 8019102:	4613      	mov	r3, r2
 8019104:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	681a      	ldr	r2, [r3, #0]
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019114:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019118:	9300      	str	r3, [sp, #0]
 801911a:	6a3b      	ldr	r3, [r7, #32]
 801911c:	2200      	movs	r2, #0
 801911e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8019122:	68f8      	ldr	r0, [r7, #12]
 8019124:	f000 fa08 	bl	8019538 <I2C_WaitOnFlagUntilTimeout>
 8019128:	4603      	mov	r3, r0
 801912a:	2b00      	cmp	r3, #0
 801912c:	d00d      	beq.n	801914a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801913c:	d103      	bne.n	8019146 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019144:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019146:	2303      	movs	r3, #3
 8019148:	e05f      	b.n	801920a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801914a:	897b      	ldrh	r3, [r7, #10]
 801914c:	b2db      	uxtb	r3, r3
 801914e:	461a      	mov	r2, r3
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019158:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801915c:	6a3a      	ldr	r2, [r7, #32]
 801915e:	492d      	ldr	r1, [pc, #180]	; (8019214 <I2C_RequestMemoryWrite+0x128>)
 8019160:	68f8      	ldr	r0, [r7, #12]
 8019162:	f000 fa40 	bl	80195e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8019166:	4603      	mov	r3, r0
 8019168:	2b00      	cmp	r3, #0
 801916a:	d001      	beq.n	8019170 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 801916c:	2301      	movs	r3, #1
 801916e:	e04c      	b.n	801920a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8019170:	2300      	movs	r3, #0
 8019172:	617b      	str	r3, [r7, #20]
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	695b      	ldr	r3, [r3, #20]
 801917a:	617b      	str	r3, [r7, #20]
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	699b      	ldr	r3, [r3, #24]
 8019182:	617b      	str	r3, [r7, #20]
 8019184:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019188:	6a39      	ldr	r1, [r7, #32]
 801918a:	68f8      	ldr	r0, [r7, #12]
 801918c:	f000 faaa 	bl	80196e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8019190:	4603      	mov	r3, r0
 8019192:	2b00      	cmp	r3, #0
 8019194:	d00d      	beq.n	80191b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801919a:	2b04      	cmp	r3, #4
 801919c:	d107      	bne.n	80191ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	681a      	ldr	r2, [r3, #0]
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80191ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80191ae:	2301      	movs	r3, #1
 80191b0:	e02b      	b.n	801920a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80191b2:	88fb      	ldrh	r3, [r7, #6]
 80191b4:	2b01      	cmp	r3, #1
 80191b6:	d105      	bne.n	80191c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80191b8:	893b      	ldrh	r3, [r7, #8]
 80191ba:	b2da      	uxtb	r2, r3
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	611a      	str	r2, [r3, #16]
 80191c2:	e021      	b.n	8019208 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80191c4:	893b      	ldrh	r3, [r7, #8]
 80191c6:	0a1b      	lsrs	r3, r3, #8
 80191c8:	b29b      	uxth	r3, r3
 80191ca:	b2da      	uxtb	r2, r3
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80191d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191d4:	6a39      	ldr	r1, [r7, #32]
 80191d6:	68f8      	ldr	r0, [r7, #12]
 80191d8:	f000 fa84 	bl	80196e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80191dc:	4603      	mov	r3, r0
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d00d      	beq.n	80191fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191e6:	2b04      	cmp	r3, #4
 80191e8:	d107      	bne.n	80191fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	681a      	ldr	r2, [r3, #0]
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80191f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80191fa:	2301      	movs	r3, #1
 80191fc:	e005      	b.n	801920a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80191fe:	893b      	ldrh	r3, [r7, #8]
 8019200:	b2da      	uxtb	r2, r3
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8019208:	2300      	movs	r3, #0
}
 801920a:	4618      	mov	r0, r3
 801920c:	3718      	adds	r7, #24
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	00010002 	.word	0x00010002

08019218 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b088      	sub	sp, #32
 801921c:	af02      	add	r7, sp, #8
 801921e:	60f8      	str	r0, [r7, #12]
 8019220:	4608      	mov	r0, r1
 8019222:	4611      	mov	r1, r2
 8019224:	461a      	mov	r2, r3
 8019226:	4603      	mov	r3, r0
 8019228:	817b      	strh	r3, [r7, #10]
 801922a:	460b      	mov	r3, r1
 801922c:	813b      	strh	r3, [r7, #8]
 801922e:	4613      	mov	r3, r2
 8019230:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	681a      	ldr	r2, [r3, #0]
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019240:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	681a      	ldr	r2, [r3, #0]
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019250:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019254:	9300      	str	r3, [sp, #0]
 8019256:	6a3b      	ldr	r3, [r7, #32]
 8019258:	2200      	movs	r2, #0
 801925a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801925e:	68f8      	ldr	r0, [r7, #12]
 8019260:	f000 f96a 	bl	8019538 <I2C_WaitOnFlagUntilTimeout>
 8019264:	4603      	mov	r3, r0
 8019266:	2b00      	cmp	r3, #0
 8019268:	d00d      	beq.n	8019286 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019278:	d103      	bne.n	8019282 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019280:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8019282:	2303      	movs	r3, #3
 8019284:	e0aa      	b.n	80193dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8019286:	897b      	ldrh	r3, [r7, #10]
 8019288:	b2db      	uxtb	r3, r3
 801928a:	461a      	mov	r2, r3
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8019294:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8019296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019298:	6a3a      	ldr	r2, [r7, #32]
 801929a:	4952      	ldr	r1, [pc, #328]	; (80193e4 <I2C_RequestMemoryRead+0x1cc>)
 801929c:	68f8      	ldr	r0, [r7, #12]
 801929e:	f000 f9a2 	bl	80195e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80192a2:	4603      	mov	r3, r0
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d001      	beq.n	80192ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80192a8:	2301      	movs	r3, #1
 80192aa:	e097      	b.n	80193dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80192ac:	2300      	movs	r3, #0
 80192ae:	617b      	str	r3, [r7, #20]
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	695b      	ldr	r3, [r3, #20]
 80192b6:	617b      	str	r3, [r7, #20]
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	699b      	ldr	r3, [r3, #24]
 80192be:	617b      	str	r3, [r7, #20]
 80192c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80192c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192c4:	6a39      	ldr	r1, [r7, #32]
 80192c6:	68f8      	ldr	r0, [r7, #12]
 80192c8:	f000 fa0c 	bl	80196e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80192cc:	4603      	mov	r3, r0
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d00d      	beq.n	80192ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192d6:	2b04      	cmp	r3, #4
 80192d8:	d107      	bne.n	80192ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	681a      	ldr	r2, [r3, #0]
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80192e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80192ea:	2301      	movs	r3, #1
 80192ec:	e076      	b.n	80193dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80192ee:	88fb      	ldrh	r3, [r7, #6]
 80192f0:	2b01      	cmp	r3, #1
 80192f2:	d105      	bne.n	8019300 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80192f4:	893b      	ldrh	r3, [r7, #8]
 80192f6:	b2da      	uxtb	r2, r3
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	611a      	str	r2, [r3, #16]
 80192fe:	e021      	b.n	8019344 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8019300:	893b      	ldrh	r3, [r7, #8]
 8019302:	0a1b      	lsrs	r3, r3, #8
 8019304:	b29b      	uxth	r3, r3
 8019306:	b2da      	uxtb	r2, r3
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801930e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019310:	6a39      	ldr	r1, [r7, #32]
 8019312:	68f8      	ldr	r0, [r7, #12]
 8019314:	f000 f9e6 	bl	80196e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8019318:	4603      	mov	r3, r0
 801931a:	2b00      	cmp	r3, #0
 801931c:	d00d      	beq.n	801933a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019322:	2b04      	cmp	r3, #4
 8019324:	d107      	bne.n	8019336 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	681a      	ldr	r2, [r3, #0]
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019334:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8019336:	2301      	movs	r3, #1
 8019338:	e050      	b.n	80193dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801933a:	893b      	ldrh	r3, [r7, #8]
 801933c:	b2da      	uxtb	r2, r3
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8019344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019346:	6a39      	ldr	r1, [r7, #32]
 8019348:	68f8      	ldr	r0, [r7, #12]
 801934a:	f000 f9cb 	bl	80196e4 <I2C_WaitOnTXEFlagUntilTimeout>
 801934e:	4603      	mov	r3, r0
 8019350:	2b00      	cmp	r3, #0
 8019352:	d00d      	beq.n	8019370 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019358:	2b04      	cmp	r3, #4
 801935a:	d107      	bne.n	801936c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	681a      	ldr	r2, [r3, #0]
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801936a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 801936c:	2301      	movs	r3, #1
 801936e:	e035      	b.n	80193dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	681a      	ldr	r2, [r3, #0]
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801937e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8019380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019382:	9300      	str	r3, [sp, #0]
 8019384:	6a3b      	ldr	r3, [r7, #32]
 8019386:	2200      	movs	r2, #0
 8019388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801938c:	68f8      	ldr	r0, [r7, #12]
 801938e:	f000 f8d3 	bl	8019538 <I2C_WaitOnFlagUntilTimeout>
 8019392:	4603      	mov	r3, r0
 8019394:	2b00      	cmp	r3, #0
 8019396:	d00d      	beq.n	80193b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80193a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80193a6:	d103      	bne.n	80193b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80193ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80193b0:	2303      	movs	r3, #3
 80193b2:	e013      	b.n	80193dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80193b4:	897b      	ldrh	r3, [r7, #10]
 80193b6:	b2db      	uxtb	r3, r3
 80193b8:	f043 0301 	orr.w	r3, r3, #1
 80193bc:	b2da      	uxtb	r2, r3
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80193c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193c6:	6a3a      	ldr	r2, [r7, #32]
 80193c8:	4906      	ldr	r1, [pc, #24]	; (80193e4 <I2C_RequestMemoryRead+0x1cc>)
 80193ca:	68f8      	ldr	r0, [r7, #12]
 80193cc:	f000 f90b 	bl	80195e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80193d0:	4603      	mov	r3, r0
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d001      	beq.n	80193da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80193d6:	2301      	movs	r3, #1
 80193d8:	e000      	b.n	80193dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80193da:	2300      	movs	r3, #0
}
 80193dc:	4618      	mov	r0, r3
 80193de:	3718      	adds	r7, #24
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}
 80193e4:	00010002 	.word	0x00010002

080193e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b086      	sub	sp, #24
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80193f0:	2300      	movs	r3, #0
 80193f2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80193fa:	697b      	ldr	r3, [r7, #20]
 80193fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019400:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8019402:	4b4b      	ldr	r3, [pc, #300]	; (8019530 <I2C_DMAAbort+0x148>)
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	08db      	lsrs	r3, r3, #3
 8019408:	4a4a      	ldr	r2, [pc, #296]	; (8019534 <I2C_DMAAbort+0x14c>)
 801940a:	fba2 2303 	umull	r2, r3, r2, r3
 801940e:	0a1a      	lsrs	r2, r3, #8
 8019410:	4613      	mov	r3, r2
 8019412:	009b      	lsls	r3, r3, #2
 8019414:	4413      	add	r3, r2
 8019416:	00da      	lsls	r2, r3, #3
 8019418:	1ad3      	subs	r3, r2, r3
 801941a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d106      	bne.n	8019430 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8019422:	697b      	ldr	r3, [r7, #20]
 8019424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019426:	f043 0220 	orr.w	r2, r3, #32
 801942a:	697b      	ldr	r3, [r7, #20]
 801942c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801942e:	e00a      	b.n	8019446 <I2C_DMAAbort+0x5e>
    }
    count--;
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	3b01      	subs	r3, #1
 8019434:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019436:	697b      	ldr	r3, [r7, #20]
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019444:	d0ea      	beq.n	801941c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8019446:	697b      	ldr	r3, [r7, #20]
 8019448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801944a:	2b00      	cmp	r3, #0
 801944c:	d003      	beq.n	8019456 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801944e:	697b      	ldr	r3, [r7, #20]
 8019450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019452:	2200      	movs	r2, #0
 8019454:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8019456:	697b      	ldr	r3, [r7, #20]
 8019458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801945a:	2b00      	cmp	r3, #0
 801945c:	d003      	beq.n	8019466 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801945e:	697b      	ldr	r3, [r7, #20]
 8019460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019462:	2200      	movs	r2, #0
 8019464:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8019466:	697b      	ldr	r3, [r7, #20]
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	681a      	ldr	r2, [r3, #0]
 801946c:	697b      	ldr	r3, [r7, #20]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019474:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	2200      	movs	r2, #0
 801947a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019480:	2b00      	cmp	r3, #0
 8019482:	d003      	beq.n	801948c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8019484:	697b      	ldr	r3, [r7, #20]
 8019486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019488:	2200      	movs	r2, #0
 801948a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019490:	2b00      	cmp	r3, #0
 8019492:	d003      	beq.n	801949c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8019494:	697b      	ldr	r3, [r7, #20]
 8019496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019498:	2200      	movs	r2, #0
 801949a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 801949c:	697b      	ldr	r3, [r7, #20]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	681a      	ldr	r2, [r3, #0]
 80194a2:	697b      	ldr	r3, [r7, #20]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	f022 0201 	bic.w	r2, r2, #1
 80194aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80194ac:	697b      	ldr	r3, [r7, #20]
 80194ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80194b2:	b2db      	uxtb	r3, r3
 80194b4:	2b60      	cmp	r3, #96	; 0x60
 80194b6:	d10e      	bne.n	80194d6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80194b8:	697b      	ldr	r3, [r7, #20]
 80194ba:	2220      	movs	r2, #32
 80194bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80194c0:	697b      	ldr	r3, [r7, #20]
 80194c2:	2200      	movs	r2, #0
 80194c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80194c8:	697b      	ldr	r3, [r7, #20]
 80194ca:	2200      	movs	r2, #0
 80194cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80194ce:	6978      	ldr	r0, [r7, #20]
 80194d0:	f7fe fc9c 	bl	8017e0c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80194d4:	e027      	b.n	8019526 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80194d6:	7cfb      	ldrb	r3, [r7, #19]
 80194d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80194dc:	2b28      	cmp	r3, #40	; 0x28
 80194de:	d117      	bne.n	8019510 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80194e0:	697b      	ldr	r3, [r7, #20]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	681a      	ldr	r2, [r3, #0]
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	f042 0201 	orr.w	r2, r2, #1
 80194ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80194f0:	697b      	ldr	r3, [r7, #20]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	681a      	ldr	r2, [r3, #0]
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80194fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	2200      	movs	r2, #0
 8019504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	2228      	movs	r2, #40	; 0x28
 801950a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801950e:	e007      	b.n	8019520 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8019510:	697b      	ldr	r3, [r7, #20]
 8019512:	2220      	movs	r2, #32
 8019514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8019518:	697b      	ldr	r3, [r7, #20]
 801951a:	2200      	movs	r2, #0
 801951c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8019520:	6978      	ldr	r0, [r7, #20]
 8019522:	f7fe fc69 	bl	8017df8 <HAL_I2C_ErrorCallback>
}
 8019526:	bf00      	nop
 8019528:	3718      	adds	r7, #24
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}
 801952e:	bf00      	nop
 8019530:	20000068 	.word	0x20000068
 8019534:	14f8b589 	.word	0x14f8b589

08019538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b084      	sub	sp, #16
 801953c:	af00      	add	r7, sp, #0
 801953e:	60f8      	str	r0, [r7, #12]
 8019540:	60b9      	str	r1, [r7, #8]
 8019542:	603b      	str	r3, [r7, #0]
 8019544:	4613      	mov	r3, r2
 8019546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019548:	e025      	b.n	8019596 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801954a:	683b      	ldr	r3, [r7, #0]
 801954c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019550:	d021      	beq.n	8019596 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019552:	f7fc fc9d 	bl	8015e90 <HAL_GetTick>
 8019556:	4602      	mov	r2, r0
 8019558:	69bb      	ldr	r3, [r7, #24]
 801955a:	1ad3      	subs	r3, r2, r3
 801955c:	683a      	ldr	r2, [r7, #0]
 801955e:	429a      	cmp	r2, r3
 8019560:	d302      	bcc.n	8019568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d116      	bne.n	8019596 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	2200      	movs	r2, #0
 801956c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	2220      	movs	r2, #32
 8019572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	2200      	movs	r2, #0
 801957a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019582:	f043 0220 	orr.w	r2, r3, #32
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	2200      	movs	r2, #0
 801958e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019592:	2301      	movs	r3, #1
 8019594:	e023      	b.n	80195de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8019596:	68bb      	ldr	r3, [r7, #8]
 8019598:	0c1b      	lsrs	r3, r3, #16
 801959a:	b2db      	uxtb	r3, r3
 801959c:	2b01      	cmp	r3, #1
 801959e:	d10d      	bne.n	80195bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80195a0:	68fb      	ldr	r3, [r7, #12]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	695b      	ldr	r3, [r3, #20]
 80195a6:	43da      	mvns	r2, r3
 80195a8:	68bb      	ldr	r3, [r7, #8]
 80195aa:	4013      	ands	r3, r2
 80195ac:	b29b      	uxth	r3, r3
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	bf0c      	ite	eq
 80195b2:	2301      	moveq	r3, #1
 80195b4:	2300      	movne	r3, #0
 80195b6:	b2db      	uxtb	r3, r3
 80195b8:	461a      	mov	r2, r3
 80195ba:	e00c      	b.n	80195d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	699b      	ldr	r3, [r3, #24]
 80195c2:	43da      	mvns	r2, r3
 80195c4:	68bb      	ldr	r3, [r7, #8]
 80195c6:	4013      	ands	r3, r2
 80195c8:	b29b      	uxth	r3, r3
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	bf0c      	ite	eq
 80195ce:	2301      	moveq	r3, #1
 80195d0:	2300      	movne	r3, #0
 80195d2:	b2db      	uxtb	r3, r3
 80195d4:	461a      	mov	r2, r3
 80195d6:	79fb      	ldrb	r3, [r7, #7]
 80195d8:	429a      	cmp	r2, r3
 80195da:	d0b6      	beq.n	801954a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80195dc:	2300      	movs	r3, #0
}
 80195de:	4618      	mov	r0, r3
 80195e0:	3710      	adds	r7, #16
 80195e2:	46bd      	mov	sp, r7
 80195e4:	bd80      	pop	{r7, pc}

080195e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80195e6:	b580      	push	{r7, lr}
 80195e8:	b084      	sub	sp, #16
 80195ea:	af00      	add	r7, sp, #0
 80195ec:	60f8      	str	r0, [r7, #12]
 80195ee:	60b9      	str	r1, [r7, #8]
 80195f0:	607a      	str	r2, [r7, #4]
 80195f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80195f4:	e051      	b.n	801969a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	695b      	ldr	r3, [r3, #20]
 80195fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019604:	d123      	bne.n	801964e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	681a      	ldr	r2, [r3, #0]
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019614:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801961e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	2200      	movs	r2, #0
 8019624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	2220      	movs	r2, #32
 801962a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	2200      	movs	r2, #0
 8019632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801963a:	f043 0204 	orr.w	r2, r3, #4
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	2200      	movs	r2, #0
 8019646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801964a:	2301      	movs	r3, #1
 801964c:	e046      	b.n	80196dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019654:	d021      	beq.n	801969a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019656:	f7fc fc1b 	bl	8015e90 <HAL_GetTick>
 801965a:	4602      	mov	r2, r0
 801965c:	683b      	ldr	r3, [r7, #0]
 801965e:	1ad3      	subs	r3, r2, r3
 8019660:	687a      	ldr	r2, [r7, #4]
 8019662:	429a      	cmp	r2, r3
 8019664:	d302      	bcc.n	801966c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d116      	bne.n	801969a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	2200      	movs	r2, #0
 8019670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	2220      	movs	r2, #32
 8019676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	2200      	movs	r2, #0
 801967e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019686:	f043 0220 	orr.w	r2, r3, #32
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	2200      	movs	r2, #0
 8019692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8019696:	2301      	movs	r3, #1
 8019698:	e020      	b.n	80196dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801969a:	68bb      	ldr	r3, [r7, #8]
 801969c:	0c1b      	lsrs	r3, r3, #16
 801969e:	b2db      	uxtb	r3, r3
 80196a0:	2b01      	cmp	r3, #1
 80196a2:	d10c      	bne.n	80196be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	695b      	ldr	r3, [r3, #20]
 80196aa:	43da      	mvns	r2, r3
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	4013      	ands	r3, r2
 80196b0:	b29b      	uxth	r3, r3
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	bf14      	ite	ne
 80196b6:	2301      	movne	r3, #1
 80196b8:	2300      	moveq	r3, #0
 80196ba:	b2db      	uxtb	r3, r3
 80196bc:	e00b      	b.n	80196d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	699b      	ldr	r3, [r3, #24]
 80196c4:	43da      	mvns	r2, r3
 80196c6:	68bb      	ldr	r3, [r7, #8]
 80196c8:	4013      	ands	r3, r2
 80196ca:	b29b      	uxth	r3, r3
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	bf14      	ite	ne
 80196d0:	2301      	movne	r3, #1
 80196d2:	2300      	moveq	r3, #0
 80196d4:	b2db      	uxtb	r3, r3
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d18d      	bne.n	80195f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80196da:	2300      	movs	r3, #0
}
 80196dc:	4618      	mov	r0, r3
 80196de:	3710      	adds	r7, #16
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bd80      	pop	{r7, pc}

080196e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b084      	sub	sp, #16
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	60f8      	str	r0, [r7, #12]
 80196ec:	60b9      	str	r1, [r7, #8]
 80196ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80196f0:	e02d      	b.n	801974e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80196f2:	68f8      	ldr	r0, [r7, #12]
 80196f4:	f000 f900 	bl	80198f8 <I2C_IsAcknowledgeFailed>
 80196f8:	4603      	mov	r3, r0
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d001      	beq.n	8019702 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80196fe:	2301      	movs	r3, #1
 8019700:	e02d      	b.n	801975e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019702:	68bb      	ldr	r3, [r7, #8]
 8019704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019708:	d021      	beq.n	801974e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801970a:	f7fc fbc1 	bl	8015e90 <HAL_GetTick>
 801970e:	4602      	mov	r2, r0
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	1ad3      	subs	r3, r2, r3
 8019714:	68ba      	ldr	r2, [r7, #8]
 8019716:	429a      	cmp	r2, r3
 8019718:	d302      	bcc.n	8019720 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801971a:	68bb      	ldr	r3, [r7, #8]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d116      	bne.n	801974e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	2200      	movs	r2, #0
 8019724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	2220      	movs	r2, #32
 801972a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	2200      	movs	r2, #0
 8019732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801973a:	f043 0220 	orr.w	r2, r3, #32
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	2200      	movs	r2, #0
 8019746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801974a:	2301      	movs	r3, #1
 801974c:	e007      	b.n	801975e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	695b      	ldr	r3, [r3, #20]
 8019754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019758:	2b80      	cmp	r3, #128	; 0x80
 801975a:	d1ca      	bne.n	80196f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801975c:	2300      	movs	r3, #0
}
 801975e:	4618      	mov	r0, r3
 8019760:	3710      	adds	r7, #16
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}

08019766 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8019766:	b580      	push	{r7, lr}
 8019768:	b084      	sub	sp, #16
 801976a:	af00      	add	r7, sp, #0
 801976c:	60f8      	str	r0, [r7, #12]
 801976e:	60b9      	str	r1, [r7, #8]
 8019770:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8019772:	e02d      	b.n	80197d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8019774:	68f8      	ldr	r0, [r7, #12]
 8019776:	f000 f8bf 	bl	80198f8 <I2C_IsAcknowledgeFailed>
 801977a:	4603      	mov	r3, r0
 801977c:	2b00      	cmp	r3, #0
 801977e:	d001      	beq.n	8019784 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8019780:	2301      	movs	r3, #1
 8019782:	e02d      	b.n	80197e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801978a:	d021      	beq.n	80197d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801978c:	f7fc fb80 	bl	8015e90 <HAL_GetTick>
 8019790:	4602      	mov	r2, r0
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	1ad3      	subs	r3, r2, r3
 8019796:	68ba      	ldr	r2, [r7, #8]
 8019798:	429a      	cmp	r2, r3
 801979a:	d302      	bcc.n	80197a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801979c:	68bb      	ldr	r3, [r7, #8]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d116      	bne.n	80197d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	2200      	movs	r2, #0
 80197a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	2220      	movs	r2, #32
 80197ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	2200      	movs	r2, #0
 80197b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197bc:	f043 0220 	orr.w	r2, r3, #32
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	2200      	movs	r2, #0
 80197c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80197cc:	2301      	movs	r3, #1
 80197ce:	e007      	b.n	80197e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	695b      	ldr	r3, [r3, #20]
 80197d6:	f003 0304 	and.w	r3, r3, #4
 80197da:	2b04      	cmp	r3, #4
 80197dc:	d1ca      	bne.n	8019774 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80197de:	2300      	movs	r3, #0
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	3710      	adds	r7, #16
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}

080197e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80197e8:	b480      	push	{r7}
 80197ea:	b085      	sub	sp, #20
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80197f0:	2300      	movs	r3, #0
 80197f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80197f4:	4b13      	ldr	r3, [pc, #76]	; (8019844 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	08db      	lsrs	r3, r3, #3
 80197fa:	4a13      	ldr	r2, [pc, #76]	; (8019848 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80197fc:	fba2 2303 	umull	r2, r3, r2, r3
 8019800:	0a1a      	lsrs	r2, r3, #8
 8019802:	4613      	mov	r3, r2
 8019804:	009b      	lsls	r3, r3, #2
 8019806:	4413      	add	r3, r2
 8019808:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	3b01      	subs	r3, #1
 801980e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d107      	bne.n	8019826 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801981a:	f043 0220 	orr.w	r2, r3, #32
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8019822:	2301      	movs	r3, #1
 8019824:	e008      	b.n	8019838 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019834:	d0e9      	beq.n	801980a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8019836:	2300      	movs	r3, #0
}
 8019838:	4618      	mov	r0, r3
 801983a:	3714      	adds	r7, #20
 801983c:	46bd      	mov	sp, r7
 801983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019842:	4770      	bx	lr
 8019844:	20000068 	.word	0x20000068
 8019848:	14f8b589 	.word	0x14f8b589

0801984c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801984c:	b580      	push	{r7, lr}
 801984e:	b084      	sub	sp, #16
 8019850:	af00      	add	r7, sp, #0
 8019852:	60f8      	str	r0, [r7, #12]
 8019854:	60b9      	str	r1, [r7, #8]
 8019856:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8019858:	e042      	b.n	80198e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	681b      	ldr	r3, [r3, #0]
 801985e:	695b      	ldr	r3, [r3, #20]
 8019860:	f003 0310 	and.w	r3, r3, #16
 8019864:	2b10      	cmp	r3, #16
 8019866:	d119      	bne.n	801989c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	f06f 0210 	mvn.w	r2, #16
 8019870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	2200      	movs	r2, #0
 8019876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2220      	movs	r2, #32
 801987c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	2200      	movs	r2, #0
 8019884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	2200      	movs	r2, #0
 8019894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8019898:	2301      	movs	r3, #1
 801989a:	e029      	b.n	80198f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801989c:	f7fc faf8 	bl	8015e90 <HAL_GetTick>
 80198a0:	4602      	mov	r2, r0
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	1ad3      	subs	r3, r2, r3
 80198a6:	68ba      	ldr	r2, [r7, #8]
 80198a8:	429a      	cmp	r2, r3
 80198aa:	d302      	bcc.n	80198b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80198ac:	68bb      	ldr	r3, [r7, #8]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d116      	bne.n	80198e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	2200      	movs	r2, #0
 80198b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	2220      	movs	r2, #32
 80198bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80198c0:	68fb      	ldr	r3, [r7, #12]
 80198c2:	2200      	movs	r2, #0
 80198c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198cc:	f043 0220 	orr.w	r2, r3, #32
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80198d4:	68fb      	ldr	r3, [r7, #12]
 80198d6:	2200      	movs	r2, #0
 80198d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80198dc:	2301      	movs	r3, #1
 80198de:	e007      	b.n	80198f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	695b      	ldr	r3, [r3, #20]
 80198e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198ea:	2b40      	cmp	r3, #64	; 0x40
 80198ec:	d1b5      	bne.n	801985a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80198ee:	2300      	movs	r3, #0
}
 80198f0:	4618      	mov	r0, r3
 80198f2:	3710      	adds	r7, #16
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}

080198f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80198f8:	b480      	push	{r7}
 80198fa:	b083      	sub	sp, #12
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	695b      	ldr	r3, [r3, #20]
 8019906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801990a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801990e:	d11b      	bne.n	8019948 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8019918:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	2200      	movs	r2, #0
 801991e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	2220      	movs	r2, #32
 8019924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	2200      	movs	r2, #0
 801992c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019934:	f043 0204 	orr.w	r2, r3, #4
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	2200      	movs	r2, #0
 8019940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8019944:	2301      	movs	r3, #1
 8019946:	e000      	b.n	801994a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8019948:	2300      	movs	r3, #0
}
 801994a:	4618      	mov	r0, r3
 801994c:	370c      	adds	r7, #12
 801994e:	46bd      	mov	sp, r7
 8019950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019954:	4770      	bx	lr

08019956 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8019956:	b480      	push	{r7}
 8019958:	b083      	sub	sp, #12
 801995a:	af00      	add	r7, sp, #0
 801995c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019962:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8019966:	d103      	bne.n	8019970 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	2201      	movs	r2, #1
 801996c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801996e:	e007      	b.n	8019980 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019974:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8019978:	d102      	bne.n	8019980 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	2208      	movs	r2, #8
 801997e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8019980:	bf00      	nop
 8019982:	370c      	adds	r7, #12
 8019984:	46bd      	mov	sp, r7
 8019986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998a:	4770      	bx	lr

0801998c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b086      	sub	sp, #24
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d101      	bne.n	801999e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801999a:	2301      	movs	r3, #1
 801999c:	e267      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	f003 0301 	and.w	r3, r3, #1
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d075      	beq.n	8019a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80199aa:	4b88      	ldr	r3, [pc, #544]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 80199ac:	689b      	ldr	r3, [r3, #8]
 80199ae:	f003 030c 	and.w	r3, r3, #12
 80199b2:	2b04      	cmp	r3, #4
 80199b4:	d00c      	beq.n	80199d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80199b6:	4b85      	ldr	r3, [pc, #532]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 80199b8:	689b      	ldr	r3, [r3, #8]
 80199ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80199be:	2b08      	cmp	r3, #8
 80199c0:	d112      	bne.n	80199e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80199c2:	4b82      	ldr	r3, [pc, #520]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 80199c4:	685b      	ldr	r3, [r3, #4]
 80199c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80199ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80199ce:	d10b      	bne.n	80199e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80199d0:	4b7e      	ldr	r3, [pc, #504]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d05b      	beq.n	8019a94 <HAL_RCC_OscConfig+0x108>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	685b      	ldr	r3, [r3, #4]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d157      	bne.n	8019a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80199e4:	2301      	movs	r3, #1
 80199e6:	e242      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	685b      	ldr	r3, [r3, #4]
 80199ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80199f0:	d106      	bne.n	8019a00 <HAL_RCC_OscConfig+0x74>
 80199f2:	4b76      	ldr	r3, [pc, #472]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	4a75      	ldr	r2, [pc, #468]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 80199f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80199fc:	6013      	str	r3, [r2, #0]
 80199fe:	e01d      	b.n	8019a3c <HAL_RCC_OscConfig+0xb0>
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	685b      	ldr	r3, [r3, #4]
 8019a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019a08:	d10c      	bne.n	8019a24 <HAL_RCC_OscConfig+0x98>
 8019a0a:	4b70      	ldr	r3, [pc, #448]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	4a6f      	ldr	r2, [pc, #444]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019a14:	6013      	str	r3, [r2, #0]
 8019a16:	4b6d      	ldr	r3, [pc, #436]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	4a6c      	ldr	r2, [pc, #432]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019a20:	6013      	str	r3, [r2, #0]
 8019a22:	e00b      	b.n	8019a3c <HAL_RCC_OscConfig+0xb0>
 8019a24:	4b69      	ldr	r3, [pc, #420]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	4a68      	ldr	r2, [pc, #416]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019a2e:	6013      	str	r3, [r2, #0]
 8019a30:	4b66      	ldr	r3, [pc, #408]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	4a65      	ldr	r2, [pc, #404]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8019a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d013      	beq.n	8019a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019a44:	f7fc fa24 	bl	8015e90 <HAL_GetTick>
 8019a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019a4a:	e008      	b.n	8019a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019a4c:	f7fc fa20 	bl	8015e90 <HAL_GetTick>
 8019a50:	4602      	mov	r2, r0
 8019a52:	693b      	ldr	r3, [r7, #16]
 8019a54:	1ad3      	subs	r3, r2, r3
 8019a56:	2b64      	cmp	r3, #100	; 0x64
 8019a58:	d901      	bls.n	8019a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8019a5a:	2303      	movs	r3, #3
 8019a5c:	e207      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019a5e:	4b5b      	ldr	r3, [pc, #364]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d0f0      	beq.n	8019a4c <HAL_RCC_OscConfig+0xc0>
 8019a6a:	e014      	b.n	8019a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019a6c:	f7fc fa10 	bl	8015e90 <HAL_GetTick>
 8019a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019a72:	e008      	b.n	8019a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019a74:	f7fc fa0c 	bl	8015e90 <HAL_GetTick>
 8019a78:	4602      	mov	r2, r0
 8019a7a:	693b      	ldr	r3, [r7, #16]
 8019a7c:	1ad3      	subs	r3, r2, r3
 8019a7e:	2b64      	cmp	r3, #100	; 0x64
 8019a80:	d901      	bls.n	8019a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019a82:	2303      	movs	r3, #3
 8019a84:	e1f3      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019a86:	4b51      	ldr	r3, [pc, #324]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d1f0      	bne.n	8019a74 <HAL_RCC_OscConfig+0xe8>
 8019a92:	e000      	b.n	8019a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	f003 0302 	and.w	r3, r3, #2
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d063      	beq.n	8019b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019aa2:	4b4a      	ldr	r3, [pc, #296]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019aa4:	689b      	ldr	r3, [r3, #8]
 8019aa6:	f003 030c 	and.w	r3, r3, #12
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d00b      	beq.n	8019ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019aae:	4b47      	ldr	r3, [pc, #284]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019ab0:	689b      	ldr	r3, [r3, #8]
 8019ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8019ab6:	2b08      	cmp	r3, #8
 8019ab8:	d11c      	bne.n	8019af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8019aba:	4b44      	ldr	r3, [pc, #272]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019abc:	685b      	ldr	r3, [r3, #4]
 8019abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d116      	bne.n	8019af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019ac6:	4b41      	ldr	r3, [pc, #260]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	f003 0302 	and.w	r3, r3, #2
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d005      	beq.n	8019ade <HAL_RCC_OscConfig+0x152>
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	68db      	ldr	r3, [r3, #12]
 8019ad6:	2b01      	cmp	r3, #1
 8019ad8:	d001      	beq.n	8019ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8019ada:	2301      	movs	r3, #1
 8019adc:	e1c7      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019ade:	4b3b      	ldr	r3, [pc, #236]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	691b      	ldr	r3, [r3, #16]
 8019aea:	00db      	lsls	r3, r3, #3
 8019aec:	4937      	ldr	r1, [pc, #220]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019aee:	4313      	orrs	r3, r2
 8019af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019af2:	e03a      	b.n	8019b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	68db      	ldr	r3, [r3, #12]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d020      	beq.n	8019b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019afc:	4b34      	ldr	r3, [pc, #208]	; (8019bd0 <HAL_RCC_OscConfig+0x244>)
 8019afe:	2201      	movs	r2, #1
 8019b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019b02:	f7fc f9c5 	bl	8015e90 <HAL_GetTick>
 8019b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019b08:	e008      	b.n	8019b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019b0a:	f7fc f9c1 	bl	8015e90 <HAL_GetTick>
 8019b0e:	4602      	mov	r2, r0
 8019b10:	693b      	ldr	r3, [r7, #16]
 8019b12:	1ad3      	subs	r3, r2, r3
 8019b14:	2b02      	cmp	r3, #2
 8019b16:	d901      	bls.n	8019b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8019b18:	2303      	movs	r3, #3
 8019b1a:	e1a8      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019b1c:	4b2b      	ldr	r3, [pc, #172]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	f003 0302 	and.w	r3, r3, #2
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d0f0      	beq.n	8019b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019b28:	4b28      	ldr	r3, [pc, #160]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	691b      	ldr	r3, [r3, #16]
 8019b34:	00db      	lsls	r3, r3, #3
 8019b36:	4925      	ldr	r1, [pc, #148]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019b38:	4313      	orrs	r3, r2
 8019b3a:	600b      	str	r3, [r1, #0]
 8019b3c:	e015      	b.n	8019b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019b3e:	4b24      	ldr	r3, [pc, #144]	; (8019bd0 <HAL_RCC_OscConfig+0x244>)
 8019b40:	2200      	movs	r2, #0
 8019b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019b44:	f7fc f9a4 	bl	8015e90 <HAL_GetTick>
 8019b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019b4a:	e008      	b.n	8019b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019b4c:	f7fc f9a0 	bl	8015e90 <HAL_GetTick>
 8019b50:	4602      	mov	r2, r0
 8019b52:	693b      	ldr	r3, [r7, #16]
 8019b54:	1ad3      	subs	r3, r2, r3
 8019b56:	2b02      	cmp	r3, #2
 8019b58:	d901      	bls.n	8019b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8019b5a:	2303      	movs	r3, #3
 8019b5c:	e187      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019b5e:	4b1b      	ldr	r3, [pc, #108]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	f003 0302 	and.w	r3, r3, #2
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d1f0      	bne.n	8019b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	f003 0308 	and.w	r3, r3, #8
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d036      	beq.n	8019be4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	695b      	ldr	r3, [r3, #20]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d016      	beq.n	8019bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019b7e:	4b15      	ldr	r3, [pc, #84]	; (8019bd4 <HAL_RCC_OscConfig+0x248>)
 8019b80:	2201      	movs	r2, #1
 8019b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019b84:	f7fc f984 	bl	8015e90 <HAL_GetTick>
 8019b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019b8a:	e008      	b.n	8019b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019b8c:	f7fc f980 	bl	8015e90 <HAL_GetTick>
 8019b90:	4602      	mov	r2, r0
 8019b92:	693b      	ldr	r3, [r7, #16]
 8019b94:	1ad3      	subs	r3, r2, r3
 8019b96:	2b02      	cmp	r3, #2
 8019b98:	d901      	bls.n	8019b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8019b9a:	2303      	movs	r3, #3
 8019b9c:	e167      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019b9e:	4b0b      	ldr	r3, [pc, #44]	; (8019bcc <HAL_RCC_OscConfig+0x240>)
 8019ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019ba2:	f003 0302 	and.w	r3, r3, #2
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d0f0      	beq.n	8019b8c <HAL_RCC_OscConfig+0x200>
 8019baa:	e01b      	b.n	8019be4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8019bac:	4b09      	ldr	r3, [pc, #36]	; (8019bd4 <HAL_RCC_OscConfig+0x248>)
 8019bae:	2200      	movs	r2, #0
 8019bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019bb2:	f7fc f96d 	bl	8015e90 <HAL_GetTick>
 8019bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019bb8:	e00e      	b.n	8019bd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019bba:	f7fc f969 	bl	8015e90 <HAL_GetTick>
 8019bbe:	4602      	mov	r2, r0
 8019bc0:	693b      	ldr	r3, [r7, #16]
 8019bc2:	1ad3      	subs	r3, r2, r3
 8019bc4:	2b02      	cmp	r3, #2
 8019bc6:	d907      	bls.n	8019bd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8019bc8:	2303      	movs	r3, #3
 8019bca:	e150      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
 8019bcc:	40023800 	.word	0x40023800
 8019bd0:	42470000 	.word	0x42470000
 8019bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019bd8:	4b88      	ldr	r3, [pc, #544]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019bdc:	f003 0302 	and.w	r3, r3, #2
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d1ea      	bne.n	8019bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	f003 0304 	and.w	r3, r3, #4
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	f000 8097 	beq.w	8019d20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019bf6:	4b81      	ldr	r3, [pc, #516]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d10f      	bne.n	8019c22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019c02:	2300      	movs	r3, #0
 8019c04:	60bb      	str	r3, [r7, #8]
 8019c06:	4b7d      	ldr	r3, [pc, #500]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c0a:	4a7c      	ldr	r2, [pc, #496]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019c10:	6413      	str	r3, [r2, #64]	; 0x40
 8019c12:	4b7a      	ldr	r3, [pc, #488]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019c1a:	60bb      	str	r3, [r7, #8]
 8019c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8019c1e:	2301      	movs	r3, #1
 8019c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019c22:	4b77      	ldr	r3, [pc, #476]	; (8019e00 <HAL_RCC_OscConfig+0x474>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d118      	bne.n	8019c60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8019c2e:	4b74      	ldr	r3, [pc, #464]	; (8019e00 <HAL_RCC_OscConfig+0x474>)
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	4a73      	ldr	r2, [pc, #460]	; (8019e00 <HAL_RCC_OscConfig+0x474>)
 8019c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019c3a:	f7fc f929 	bl	8015e90 <HAL_GetTick>
 8019c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019c40:	e008      	b.n	8019c54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019c42:	f7fc f925 	bl	8015e90 <HAL_GetTick>
 8019c46:	4602      	mov	r2, r0
 8019c48:	693b      	ldr	r3, [r7, #16]
 8019c4a:	1ad3      	subs	r3, r2, r3
 8019c4c:	2b02      	cmp	r3, #2
 8019c4e:	d901      	bls.n	8019c54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8019c50:	2303      	movs	r3, #3
 8019c52:	e10c      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019c54:	4b6a      	ldr	r3, [pc, #424]	; (8019e00 <HAL_RCC_OscConfig+0x474>)
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d0f0      	beq.n	8019c42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	689b      	ldr	r3, [r3, #8]
 8019c64:	2b01      	cmp	r3, #1
 8019c66:	d106      	bne.n	8019c76 <HAL_RCC_OscConfig+0x2ea>
 8019c68:	4b64      	ldr	r3, [pc, #400]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c6c:	4a63      	ldr	r2, [pc, #396]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c6e:	f043 0301 	orr.w	r3, r3, #1
 8019c72:	6713      	str	r3, [r2, #112]	; 0x70
 8019c74:	e01c      	b.n	8019cb0 <HAL_RCC_OscConfig+0x324>
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	689b      	ldr	r3, [r3, #8]
 8019c7a:	2b05      	cmp	r3, #5
 8019c7c:	d10c      	bne.n	8019c98 <HAL_RCC_OscConfig+0x30c>
 8019c7e:	4b5f      	ldr	r3, [pc, #380]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c82:	4a5e      	ldr	r2, [pc, #376]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c84:	f043 0304 	orr.w	r3, r3, #4
 8019c88:	6713      	str	r3, [r2, #112]	; 0x70
 8019c8a:	4b5c      	ldr	r3, [pc, #368]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c8e:	4a5b      	ldr	r2, [pc, #364]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c90:	f043 0301 	orr.w	r3, r3, #1
 8019c94:	6713      	str	r3, [r2, #112]	; 0x70
 8019c96:	e00b      	b.n	8019cb0 <HAL_RCC_OscConfig+0x324>
 8019c98:	4b58      	ldr	r3, [pc, #352]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c9c:	4a57      	ldr	r2, [pc, #348]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019c9e:	f023 0301 	bic.w	r3, r3, #1
 8019ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8019ca4:	4b55      	ldr	r3, [pc, #340]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ca8:	4a54      	ldr	r2, [pc, #336]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019caa:	f023 0304 	bic.w	r3, r3, #4
 8019cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	689b      	ldr	r3, [r3, #8]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d015      	beq.n	8019ce4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019cb8:	f7fc f8ea 	bl	8015e90 <HAL_GetTick>
 8019cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019cbe:	e00a      	b.n	8019cd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019cc0:	f7fc f8e6 	bl	8015e90 <HAL_GetTick>
 8019cc4:	4602      	mov	r2, r0
 8019cc6:	693b      	ldr	r3, [r7, #16]
 8019cc8:	1ad3      	subs	r3, r2, r3
 8019cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8019cce:	4293      	cmp	r3, r2
 8019cd0:	d901      	bls.n	8019cd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8019cd2:	2303      	movs	r3, #3
 8019cd4:	e0cb      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019cd6:	4b49      	ldr	r3, [pc, #292]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cda:	f003 0302 	and.w	r3, r3, #2
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d0ee      	beq.n	8019cc0 <HAL_RCC_OscConfig+0x334>
 8019ce2:	e014      	b.n	8019d0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8019ce4:	f7fc f8d4 	bl	8015e90 <HAL_GetTick>
 8019ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019cea:	e00a      	b.n	8019d02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019cec:	f7fc f8d0 	bl	8015e90 <HAL_GetTick>
 8019cf0:	4602      	mov	r2, r0
 8019cf2:	693b      	ldr	r3, [r7, #16]
 8019cf4:	1ad3      	subs	r3, r2, r3
 8019cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8019cfa:	4293      	cmp	r3, r2
 8019cfc:	d901      	bls.n	8019d02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8019cfe:	2303      	movs	r3, #3
 8019d00:	e0b5      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019d02:	4b3e      	ldr	r3, [pc, #248]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d06:	f003 0302 	and.w	r3, r3, #2
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d1ee      	bne.n	8019cec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8019d0e:	7dfb      	ldrb	r3, [r7, #23]
 8019d10:	2b01      	cmp	r3, #1
 8019d12:	d105      	bne.n	8019d20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019d14:	4b39      	ldr	r3, [pc, #228]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d18:	4a38      	ldr	r2, [pc, #224]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	699b      	ldr	r3, [r3, #24]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	f000 80a1 	beq.w	8019e6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8019d2a:	4b34      	ldr	r3, [pc, #208]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019d2c:	689b      	ldr	r3, [r3, #8]
 8019d2e:	f003 030c 	and.w	r3, r3, #12
 8019d32:	2b08      	cmp	r3, #8
 8019d34:	d05c      	beq.n	8019df0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	699b      	ldr	r3, [r3, #24]
 8019d3a:	2b02      	cmp	r3, #2
 8019d3c:	d141      	bne.n	8019dc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019d3e:	4b31      	ldr	r3, [pc, #196]	; (8019e04 <HAL_RCC_OscConfig+0x478>)
 8019d40:	2200      	movs	r2, #0
 8019d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019d44:	f7fc f8a4 	bl	8015e90 <HAL_GetTick>
 8019d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019d4a:	e008      	b.n	8019d5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019d4c:	f7fc f8a0 	bl	8015e90 <HAL_GetTick>
 8019d50:	4602      	mov	r2, r0
 8019d52:	693b      	ldr	r3, [r7, #16]
 8019d54:	1ad3      	subs	r3, r2, r3
 8019d56:	2b02      	cmp	r3, #2
 8019d58:	d901      	bls.n	8019d5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8019d5a:	2303      	movs	r3, #3
 8019d5c:	e087      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019d5e:	4b27      	ldr	r3, [pc, #156]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d1f0      	bne.n	8019d4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	69da      	ldr	r2, [r3, #28]
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	6a1b      	ldr	r3, [r3, #32]
 8019d72:	431a      	orrs	r2, r3
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d78:	019b      	lsls	r3, r3, #6
 8019d7a:	431a      	orrs	r2, r3
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d80:	085b      	lsrs	r3, r3, #1
 8019d82:	3b01      	subs	r3, #1
 8019d84:	041b      	lsls	r3, r3, #16
 8019d86:	431a      	orrs	r2, r3
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d8c:	061b      	lsls	r3, r3, #24
 8019d8e:	491b      	ldr	r1, [pc, #108]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019d90:	4313      	orrs	r3, r2
 8019d92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019d94:	4b1b      	ldr	r3, [pc, #108]	; (8019e04 <HAL_RCC_OscConfig+0x478>)
 8019d96:	2201      	movs	r2, #1
 8019d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019d9a:	f7fc f879 	bl	8015e90 <HAL_GetTick>
 8019d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019da0:	e008      	b.n	8019db4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019da2:	f7fc f875 	bl	8015e90 <HAL_GetTick>
 8019da6:	4602      	mov	r2, r0
 8019da8:	693b      	ldr	r3, [r7, #16]
 8019daa:	1ad3      	subs	r3, r2, r3
 8019dac:	2b02      	cmp	r3, #2
 8019dae:	d901      	bls.n	8019db4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8019db0:	2303      	movs	r3, #3
 8019db2:	e05c      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019db4:	4b11      	ldr	r3, [pc, #68]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d0f0      	beq.n	8019da2 <HAL_RCC_OscConfig+0x416>
 8019dc0:	e054      	b.n	8019e6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019dc2:	4b10      	ldr	r3, [pc, #64]	; (8019e04 <HAL_RCC_OscConfig+0x478>)
 8019dc4:	2200      	movs	r2, #0
 8019dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019dc8:	f7fc f862 	bl	8015e90 <HAL_GetTick>
 8019dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019dce:	e008      	b.n	8019de2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019dd0:	f7fc f85e 	bl	8015e90 <HAL_GetTick>
 8019dd4:	4602      	mov	r2, r0
 8019dd6:	693b      	ldr	r3, [r7, #16]
 8019dd8:	1ad3      	subs	r3, r2, r3
 8019dda:	2b02      	cmp	r3, #2
 8019ddc:	d901      	bls.n	8019de2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8019dde:	2303      	movs	r3, #3
 8019de0:	e045      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019de2:	4b06      	ldr	r3, [pc, #24]	; (8019dfc <HAL_RCC_OscConfig+0x470>)
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d1f0      	bne.n	8019dd0 <HAL_RCC_OscConfig+0x444>
 8019dee:	e03d      	b.n	8019e6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	699b      	ldr	r3, [r3, #24]
 8019df4:	2b01      	cmp	r3, #1
 8019df6:	d107      	bne.n	8019e08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8019df8:	2301      	movs	r3, #1
 8019dfa:	e038      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
 8019dfc:	40023800 	.word	0x40023800
 8019e00:	40007000 	.word	0x40007000
 8019e04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8019e08:	4b1b      	ldr	r3, [pc, #108]	; (8019e78 <HAL_RCC_OscConfig+0x4ec>)
 8019e0a:	685b      	ldr	r3, [r3, #4]
 8019e0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	699b      	ldr	r3, [r3, #24]
 8019e12:	2b01      	cmp	r3, #1
 8019e14:	d028      	beq.n	8019e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019e20:	429a      	cmp	r2, r3
 8019e22:	d121      	bne.n	8019e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019e2e:	429a      	cmp	r2, r3
 8019e30:	d11a      	bne.n	8019e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8019e32:	68fa      	ldr	r2, [r7, #12]
 8019e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019e38:	4013      	ands	r3, r2
 8019e3a:	687a      	ldr	r2, [r7, #4]
 8019e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019e3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8019e40:	4293      	cmp	r3, r2
 8019e42:	d111      	bne.n	8019e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e4e:	085b      	lsrs	r3, r3, #1
 8019e50:	3b01      	subs	r3, #1
 8019e52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8019e54:	429a      	cmp	r2, r3
 8019e56:	d107      	bne.n	8019e68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8019e64:	429a      	cmp	r2, r3
 8019e66:	d001      	beq.n	8019e6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8019e68:	2301      	movs	r3, #1
 8019e6a:	e000      	b.n	8019e6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8019e6c:	2300      	movs	r3, #0
}
 8019e6e:	4618      	mov	r0, r3
 8019e70:	3718      	adds	r7, #24
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}
 8019e76:	bf00      	nop
 8019e78:	40023800 	.word	0x40023800

08019e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019e7c:	b580      	push	{r7, lr}
 8019e7e:	b084      	sub	sp, #16
 8019e80:	af00      	add	r7, sp, #0
 8019e82:	6078      	str	r0, [r7, #4]
 8019e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d101      	bne.n	8019e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	e0cc      	b.n	801a02a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8019e90:	4b68      	ldr	r3, [pc, #416]	; (801a034 <HAL_RCC_ClockConfig+0x1b8>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	f003 0307 	and.w	r3, r3, #7
 8019e98:	683a      	ldr	r2, [r7, #0]
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	d90c      	bls.n	8019eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019e9e:	4b65      	ldr	r3, [pc, #404]	; (801a034 <HAL_RCC_ClockConfig+0x1b8>)
 8019ea0:	683a      	ldr	r2, [r7, #0]
 8019ea2:	b2d2      	uxtb	r2, r2
 8019ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8019ea6:	4b63      	ldr	r3, [pc, #396]	; (801a034 <HAL_RCC_ClockConfig+0x1b8>)
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	f003 0307 	and.w	r3, r3, #7
 8019eae:	683a      	ldr	r2, [r7, #0]
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	d001      	beq.n	8019eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8019eb4:	2301      	movs	r3, #1
 8019eb6:	e0b8      	b.n	801a02a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	f003 0302 	and.w	r3, r3, #2
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d020      	beq.n	8019f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	f003 0304 	and.w	r3, r3, #4
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d005      	beq.n	8019edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8019ed0:	4b59      	ldr	r3, [pc, #356]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019ed2:	689b      	ldr	r3, [r3, #8]
 8019ed4:	4a58      	ldr	r2, [pc, #352]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8019eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	f003 0308 	and.w	r3, r3, #8
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d005      	beq.n	8019ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8019ee8:	4b53      	ldr	r3, [pc, #332]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019eea:	689b      	ldr	r3, [r3, #8]
 8019eec:	4a52      	ldr	r2, [pc, #328]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8019ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8019ef4:	4b50      	ldr	r3, [pc, #320]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019ef6:	689b      	ldr	r3, [r3, #8]
 8019ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	689b      	ldr	r3, [r3, #8]
 8019f00:	494d      	ldr	r1, [pc, #308]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019f02:	4313      	orrs	r3, r2
 8019f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	f003 0301 	and.w	r3, r3, #1
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d044      	beq.n	8019f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	685b      	ldr	r3, [r3, #4]
 8019f16:	2b01      	cmp	r3, #1
 8019f18:	d107      	bne.n	8019f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019f1a:	4b47      	ldr	r3, [pc, #284]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d119      	bne.n	8019f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8019f26:	2301      	movs	r3, #1
 8019f28:	e07f      	b.n	801a02a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	685b      	ldr	r3, [r3, #4]
 8019f2e:	2b02      	cmp	r3, #2
 8019f30:	d003      	beq.n	8019f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8019f36:	2b03      	cmp	r3, #3
 8019f38:	d107      	bne.n	8019f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019f3a:	4b3f      	ldr	r3, [pc, #252]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d109      	bne.n	8019f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8019f46:	2301      	movs	r3, #1
 8019f48:	e06f      	b.n	801a02a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019f4a:	4b3b      	ldr	r3, [pc, #236]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	f003 0302 	and.w	r3, r3, #2
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d101      	bne.n	8019f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8019f56:	2301      	movs	r3, #1
 8019f58:	e067      	b.n	801a02a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8019f5a:	4b37      	ldr	r3, [pc, #220]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019f5c:	689b      	ldr	r3, [r3, #8]
 8019f5e:	f023 0203 	bic.w	r2, r3, #3
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	685b      	ldr	r3, [r3, #4]
 8019f66:	4934      	ldr	r1, [pc, #208]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019f68:	4313      	orrs	r3, r2
 8019f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8019f6c:	f7fb ff90 	bl	8015e90 <HAL_GetTick>
 8019f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019f72:	e00a      	b.n	8019f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019f74:	f7fb ff8c 	bl	8015e90 <HAL_GetTick>
 8019f78:	4602      	mov	r2, r0
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	1ad3      	subs	r3, r2, r3
 8019f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8019f82:	4293      	cmp	r3, r2
 8019f84:	d901      	bls.n	8019f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8019f86:	2303      	movs	r3, #3
 8019f88:	e04f      	b.n	801a02a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019f8a:	4b2b      	ldr	r3, [pc, #172]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019f8c:	689b      	ldr	r3, [r3, #8]
 8019f8e:	f003 020c 	and.w	r2, r3, #12
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	685b      	ldr	r3, [r3, #4]
 8019f96:	009b      	lsls	r3, r3, #2
 8019f98:	429a      	cmp	r2, r3
 8019f9a:	d1eb      	bne.n	8019f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8019f9c:	4b25      	ldr	r3, [pc, #148]	; (801a034 <HAL_RCC_ClockConfig+0x1b8>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	f003 0307 	and.w	r3, r3, #7
 8019fa4:	683a      	ldr	r2, [r7, #0]
 8019fa6:	429a      	cmp	r2, r3
 8019fa8:	d20c      	bcs.n	8019fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019faa:	4b22      	ldr	r3, [pc, #136]	; (801a034 <HAL_RCC_ClockConfig+0x1b8>)
 8019fac:	683a      	ldr	r2, [r7, #0]
 8019fae:	b2d2      	uxtb	r2, r2
 8019fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8019fb2:	4b20      	ldr	r3, [pc, #128]	; (801a034 <HAL_RCC_ClockConfig+0x1b8>)
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	f003 0307 	and.w	r3, r3, #7
 8019fba:	683a      	ldr	r2, [r7, #0]
 8019fbc:	429a      	cmp	r2, r3
 8019fbe:	d001      	beq.n	8019fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8019fc0:	2301      	movs	r3, #1
 8019fc2:	e032      	b.n	801a02a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	f003 0304 	and.w	r3, r3, #4
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d008      	beq.n	8019fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019fd0:	4b19      	ldr	r3, [pc, #100]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019fd2:	689b      	ldr	r3, [r3, #8]
 8019fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	68db      	ldr	r3, [r3, #12]
 8019fdc:	4916      	ldr	r1, [pc, #88]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019fde:	4313      	orrs	r3, r2
 8019fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	f003 0308 	and.w	r3, r3, #8
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d009      	beq.n	801a002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8019fee:	4b12      	ldr	r3, [pc, #72]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019ff0:	689b      	ldr	r3, [r3, #8]
 8019ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	691b      	ldr	r3, [r3, #16]
 8019ffa:	00db      	lsls	r3, r3, #3
 8019ffc:	490e      	ldr	r1, [pc, #56]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 8019ffe:	4313      	orrs	r3, r2
 801a000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a002:	f000 f821 	bl	801a048 <HAL_RCC_GetSysClockFreq>
 801a006:	4602      	mov	r2, r0
 801a008:	4b0b      	ldr	r3, [pc, #44]	; (801a038 <HAL_RCC_ClockConfig+0x1bc>)
 801a00a:	689b      	ldr	r3, [r3, #8]
 801a00c:	091b      	lsrs	r3, r3, #4
 801a00e:	f003 030f 	and.w	r3, r3, #15
 801a012:	490a      	ldr	r1, [pc, #40]	; (801a03c <HAL_RCC_ClockConfig+0x1c0>)
 801a014:	5ccb      	ldrb	r3, [r1, r3]
 801a016:	fa22 f303 	lsr.w	r3, r2, r3
 801a01a:	4a09      	ldr	r2, [pc, #36]	; (801a040 <HAL_RCC_ClockConfig+0x1c4>)
 801a01c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801a01e:	4b09      	ldr	r3, [pc, #36]	; (801a044 <HAL_RCC_ClockConfig+0x1c8>)
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	4618      	mov	r0, r3
 801a024:	f7fb fef0 	bl	8015e08 <HAL_InitTick>

  return HAL_OK;
 801a028:	2300      	movs	r3, #0
}
 801a02a:	4618      	mov	r0, r3
 801a02c:	3710      	adds	r7, #16
 801a02e:	46bd      	mov	sp, r7
 801a030:	bd80      	pop	{r7, pc}
 801a032:	bf00      	nop
 801a034:	40023c00 	.word	0x40023c00
 801a038:	40023800 	.word	0x40023800
 801a03c:	08029a5c 	.word	0x08029a5c
 801a040:	20000068 	.word	0x20000068
 801a044:	2000006c 	.word	0x2000006c

0801a048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801a048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a04c:	b094      	sub	sp, #80	; 0x50
 801a04e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801a050:	2300      	movs	r3, #0
 801a052:	647b      	str	r3, [r7, #68]	; 0x44
 801a054:	2300      	movs	r3, #0
 801a056:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a058:	2300      	movs	r3, #0
 801a05a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 801a05c:	2300      	movs	r3, #0
 801a05e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801a060:	4b79      	ldr	r3, [pc, #484]	; (801a248 <HAL_RCC_GetSysClockFreq+0x200>)
 801a062:	689b      	ldr	r3, [r3, #8]
 801a064:	f003 030c 	and.w	r3, r3, #12
 801a068:	2b08      	cmp	r3, #8
 801a06a:	d00d      	beq.n	801a088 <HAL_RCC_GetSysClockFreq+0x40>
 801a06c:	2b08      	cmp	r3, #8
 801a06e:	f200 80e1 	bhi.w	801a234 <HAL_RCC_GetSysClockFreq+0x1ec>
 801a072:	2b00      	cmp	r3, #0
 801a074:	d002      	beq.n	801a07c <HAL_RCC_GetSysClockFreq+0x34>
 801a076:	2b04      	cmp	r3, #4
 801a078:	d003      	beq.n	801a082 <HAL_RCC_GetSysClockFreq+0x3a>
 801a07a:	e0db      	b.n	801a234 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801a07c:	4b73      	ldr	r3, [pc, #460]	; (801a24c <HAL_RCC_GetSysClockFreq+0x204>)
 801a07e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 801a080:	e0db      	b.n	801a23a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801a082:	4b73      	ldr	r3, [pc, #460]	; (801a250 <HAL_RCC_GetSysClockFreq+0x208>)
 801a084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a086:	e0d8      	b.n	801a23a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801a088:	4b6f      	ldr	r3, [pc, #444]	; (801a248 <HAL_RCC_GetSysClockFreq+0x200>)
 801a08a:	685b      	ldr	r3, [r3, #4]
 801a08c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a090:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801a092:	4b6d      	ldr	r3, [pc, #436]	; (801a248 <HAL_RCC_GetSysClockFreq+0x200>)
 801a094:	685b      	ldr	r3, [r3, #4]
 801a096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d063      	beq.n	801a166 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a09e:	4b6a      	ldr	r3, [pc, #424]	; (801a248 <HAL_RCC_GetSysClockFreq+0x200>)
 801a0a0:	685b      	ldr	r3, [r3, #4]
 801a0a2:	099b      	lsrs	r3, r3, #6
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	63bb      	str	r3, [r7, #56]	; 0x38
 801a0a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 801a0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a0b0:	633b      	str	r3, [r7, #48]	; 0x30
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	637b      	str	r3, [r7, #52]	; 0x34
 801a0b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801a0ba:	4622      	mov	r2, r4
 801a0bc:	462b      	mov	r3, r5
 801a0be:	f04f 0000 	mov.w	r0, #0
 801a0c2:	f04f 0100 	mov.w	r1, #0
 801a0c6:	0159      	lsls	r1, r3, #5
 801a0c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a0cc:	0150      	lsls	r0, r2, #5
 801a0ce:	4602      	mov	r2, r0
 801a0d0:	460b      	mov	r3, r1
 801a0d2:	4621      	mov	r1, r4
 801a0d4:	1a51      	subs	r1, r2, r1
 801a0d6:	6139      	str	r1, [r7, #16]
 801a0d8:	4629      	mov	r1, r5
 801a0da:	eb63 0301 	sbc.w	r3, r3, r1
 801a0de:	617b      	str	r3, [r7, #20]
 801a0e0:	f04f 0200 	mov.w	r2, #0
 801a0e4:	f04f 0300 	mov.w	r3, #0
 801a0e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801a0ec:	4659      	mov	r1, fp
 801a0ee:	018b      	lsls	r3, r1, #6
 801a0f0:	4651      	mov	r1, sl
 801a0f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801a0f6:	4651      	mov	r1, sl
 801a0f8:	018a      	lsls	r2, r1, #6
 801a0fa:	4651      	mov	r1, sl
 801a0fc:	ebb2 0801 	subs.w	r8, r2, r1
 801a100:	4659      	mov	r1, fp
 801a102:	eb63 0901 	sbc.w	r9, r3, r1
 801a106:	f04f 0200 	mov.w	r2, #0
 801a10a:	f04f 0300 	mov.w	r3, #0
 801a10e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801a112:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801a116:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801a11a:	4690      	mov	r8, r2
 801a11c:	4699      	mov	r9, r3
 801a11e:	4623      	mov	r3, r4
 801a120:	eb18 0303 	adds.w	r3, r8, r3
 801a124:	60bb      	str	r3, [r7, #8]
 801a126:	462b      	mov	r3, r5
 801a128:	eb49 0303 	adc.w	r3, r9, r3
 801a12c:	60fb      	str	r3, [r7, #12]
 801a12e:	f04f 0200 	mov.w	r2, #0
 801a132:	f04f 0300 	mov.w	r3, #0
 801a136:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801a13a:	4629      	mov	r1, r5
 801a13c:	024b      	lsls	r3, r1, #9
 801a13e:	4621      	mov	r1, r4
 801a140:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801a144:	4621      	mov	r1, r4
 801a146:	024a      	lsls	r2, r1, #9
 801a148:	4610      	mov	r0, r2
 801a14a:	4619      	mov	r1, r3
 801a14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a14e:	2200      	movs	r2, #0
 801a150:	62bb      	str	r3, [r7, #40]	; 0x28
 801a152:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a154:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801a158:	f7e6 fd4e 	bl	8000bf8 <__aeabi_uldivmod>
 801a15c:	4602      	mov	r2, r0
 801a15e:	460b      	mov	r3, r1
 801a160:	4613      	mov	r3, r2
 801a162:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a164:	e058      	b.n	801a218 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801a166:	4b38      	ldr	r3, [pc, #224]	; (801a248 <HAL_RCC_GetSysClockFreq+0x200>)
 801a168:	685b      	ldr	r3, [r3, #4]
 801a16a:	099b      	lsrs	r3, r3, #6
 801a16c:	2200      	movs	r2, #0
 801a16e:	4618      	mov	r0, r3
 801a170:	4611      	mov	r1, r2
 801a172:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801a176:	623b      	str	r3, [r7, #32]
 801a178:	2300      	movs	r3, #0
 801a17a:	627b      	str	r3, [r7, #36]	; 0x24
 801a17c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801a180:	4642      	mov	r2, r8
 801a182:	464b      	mov	r3, r9
 801a184:	f04f 0000 	mov.w	r0, #0
 801a188:	f04f 0100 	mov.w	r1, #0
 801a18c:	0159      	lsls	r1, r3, #5
 801a18e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801a192:	0150      	lsls	r0, r2, #5
 801a194:	4602      	mov	r2, r0
 801a196:	460b      	mov	r3, r1
 801a198:	4641      	mov	r1, r8
 801a19a:	ebb2 0a01 	subs.w	sl, r2, r1
 801a19e:	4649      	mov	r1, r9
 801a1a0:	eb63 0b01 	sbc.w	fp, r3, r1
 801a1a4:	f04f 0200 	mov.w	r2, #0
 801a1a8:	f04f 0300 	mov.w	r3, #0
 801a1ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801a1b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801a1b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801a1b8:	ebb2 040a 	subs.w	r4, r2, sl
 801a1bc:	eb63 050b 	sbc.w	r5, r3, fp
 801a1c0:	f04f 0200 	mov.w	r2, #0
 801a1c4:	f04f 0300 	mov.w	r3, #0
 801a1c8:	00eb      	lsls	r3, r5, #3
 801a1ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801a1ce:	00e2      	lsls	r2, r4, #3
 801a1d0:	4614      	mov	r4, r2
 801a1d2:	461d      	mov	r5, r3
 801a1d4:	4643      	mov	r3, r8
 801a1d6:	18e3      	adds	r3, r4, r3
 801a1d8:	603b      	str	r3, [r7, #0]
 801a1da:	464b      	mov	r3, r9
 801a1dc:	eb45 0303 	adc.w	r3, r5, r3
 801a1e0:	607b      	str	r3, [r7, #4]
 801a1e2:	f04f 0200 	mov.w	r2, #0
 801a1e6:	f04f 0300 	mov.w	r3, #0
 801a1ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 801a1ee:	4629      	mov	r1, r5
 801a1f0:	028b      	lsls	r3, r1, #10
 801a1f2:	4621      	mov	r1, r4
 801a1f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801a1f8:	4621      	mov	r1, r4
 801a1fa:	028a      	lsls	r2, r1, #10
 801a1fc:	4610      	mov	r0, r2
 801a1fe:	4619      	mov	r1, r3
 801a200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a202:	2200      	movs	r2, #0
 801a204:	61bb      	str	r3, [r7, #24]
 801a206:	61fa      	str	r2, [r7, #28]
 801a208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a20c:	f7e6 fcf4 	bl	8000bf8 <__aeabi_uldivmod>
 801a210:	4602      	mov	r2, r0
 801a212:	460b      	mov	r3, r1
 801a214:	4613      	mov	r3, r2
 801a216:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801a218:	4b0b      	ldr	r3, [pc, #44]	; (801a248 <HAL_RCC_GetSysClockFreq+0x200>)
 801a21a:	685b      	ldr	r3, [r3, #4]
 801a21c:	0c1b      	lsrs	r3, r3, #16
 801a21e:	f003 0303 	and.w	r3, r3, #3
 801a222:	3301      	adds	r3, #1
 801a224:	005b      	lsls	r3, r3, #1
 801a226:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 801a228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a22a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a22c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a232:	e002      	b.n	801a23a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801a234:	4b05      	ldr	r3, [pc, #20]	; (801a24c <HAL_RCC_GetSysClockFreq+0x204>)
 801a236:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801a238:	bf00      	nop
    }
  }
  return sysclockfreq;
 801a23a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801a23c:	4618      	mov	r0, r3
 801a23e:	3750      	adds	r7, #80	; 0x50
 801a240:	46bd      	mov	sp, r7
 801a242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a246:	bf00      	nop
 801a248:	40023800 	.word	0x40023800
 801a24c:	00f42400 	.word	0x00f42400
 801a250:	007a1200 	.word	0x007a1200

0801a254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801a254:	b480      	push	{r7}
 801a256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801a258:	4b03      	ldr	r3, [pc, #12]	; (801a268 <HAL_RCC_GetHCLKFreq+0x14>)
 801a25a:	681b      	ldr	r3, [r3, #0]
}
 801a25c:	4618      	mov	r0, r3
 801a25e:	46bd      	mov	sp, r7
 801a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a264:	4770      	bx	lr
 801a266:	bf00      	nop
 801a268:	20000068 	.word	0x20000068

0801a26c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801a270:	f7ff fff0 	bl	801a254 <HAL_RCC_GetHCLKFreq>
 801a274:	4602      	mov	r2, r0
 801a276:	4b05      	ldr	r3, [pc, #20]	; (801a28c <HAL_RCC_GetPCLK1Freq+0x20>)
 801a278:	689b      	ldr	r3, [r3, #8]
 801a27a:	0a9b      	lsrs	r3, r3, #10
 801a27c:	f003 0307 	and.w	r3, r3, #7
 801a280:	4903      	ldr	r1, [pc, #12]	; (801a290 <HAL_RCC_GetPCLK1Freq+0x24>)
 801a282:	5ccb      	ldrb	r3, [r1, r3]
 801a284:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a288:	4618      	mov	r0, r3
 801a28a:	bd80      	pop	{r7, pc}
 801a28c:	40023800 	.word	0x40023800
 801a290:	08029a6c 	.word	0x08029a6c

0801a294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801a298:	f7ff ffdc 	bl	801a254 <HAL_RCC_GetHCLKFreq>
 801a29c:	4602      	mov	r2, r0
 801a29e:	4b05      	ldr	r3, [pc, #20]	; (801a2b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 801a2a0:	689b      	ldr	r3, [r3, #8]
 801a2a2:	0b5b      	lsrs	r3, r3, #13
 801a2a4:	f003 0307 	and.w	r3, r3, #7
 801a2a8:	4903      	ldr	r1, [pc, #12]	; (801a2b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 801a2aa:	5ccb      	ldrb	r3, [r1, r3]
 801a2ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	bd80      	pop	{r7, pc}
 801a2b4:	40023800 	.word	0x40023800
 801a2b8:	08029a6c 	.word	0x08029a6c

0801a2bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b082      	sub	sp, #8
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d101      	bne.n	801a2ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a2ca:	2301      	movs	r3, #1
 801a2cc:	e041      	b.n	801a352 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a2d4:	b2db      	uxtb	r3, r3
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d106      	bne.n	801a2e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	2200      	movs	r2, #0
 801a2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a2e2:	6878      	ldr	r0, [r7, #4]
 801a2e4:	f7fb fa34 	bl	8015750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	2202      	movs	r2, #2
 801a2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	681a      	ldr	r2, [r3, #0]
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	3304      	adds	r3, #4
 801a2f8:	4619      	mov	r1, r3
 801a2fa:	4610      	mov	r0, r2
 801a2fc:	f000 fda4 	bl	801ae48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	2201      	movs	r2, #1
 801a304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	2201      	movs	r2, #1
 801a30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	2201      	movs	r2, #1
 801a314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	2201      	movs	r2, #1
 801a31c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2201      	movs	r2, #1
 801a324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	2201      	movs	r2, #1
 801a32c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	2201      	movs	r2, #1
 801a334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	2201      	movs	r2, #1
 801a33c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	2201      	movs	r2, #1
 801a344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	2201      	movs	r2, #1
 801a34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a350:	2300      	movs	r3, #0
}
 801a352:	4618      	mov	r0, r3
 801a354:	3708      	adds	r7, #8
 801a356:	46bd      	mov	sp, r7
 801a358:	bd80      	pop	{r7, pc}
	...

0801a35c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a35c:	b480      	push	{r7}
 801a35e:	b085      	sub	sp, #20
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a36a:	b2db      	uxtb	r3, r3
 801a36c:	2b01      	cmp	r3, #1
 801a36e:	d001      	beq.n	801a374 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a370:	2301      	movs	r3, #1
 801a372:	e03c      	b.n	801a3ee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2202      	movs	r2, #2
 801a378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	4a1e      	ldr	r2, [pc, #120]	; (801a3fc <HAL_TIM_Base_Start+0xa0>)
 801a382:	4293      	cmp	r3, r2
 801a384:	d018      	beq.n	801a3b8 <HAL_TIM_Base_Start+0x5c>
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a38e:	d013      	beq.n	801a3b8 <HAL_TIM_Base_Start+0x5c>
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	4a1a      	ldr	r2, [pc, #104]	; (801a400 <HAL_TIM_Base_Start+0xa4>)
 801a396:	4293      	cmp	r3, r2
 801a398:	d00e      	beq.n	801a3b8 <HAL_TIM_Base_Start+0x5c>
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	4a19      	ldr	r2, [pc, #100]	; (801a404 <HAL_TIM_Base_Start+0xa8>)
 801a3a0:	4293      	cmp	r3, r2
 801a3a2:	d009      	beq.n	801a3b8 <HAL_TIM_Base_Start+0x5c>
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	4a17      	ldr	r2, [pc, #92]	; (801a408 <HAL_TIM_Base_Start+0xac>)
 801a3aa:	4293      	cmp	r3, r2
 801a3ac:	d004      	beq.n	801a3b8 <HAL_TIM_Base_Start+0x5c>
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	4a16      	ldr	r2, [pc, #88]	; (801a40c <HAL_TIM_Base_Start+0xb0>)
 801a3b4:	4293      	cmp	r3, r2
 801a3b6:	d111      	bne.n	801a3dc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	689b      	ldr	r3, [r3, #8]
 801a3be:	f003 0307 	and.w	r3, r3, #7
 801a3c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	2b06      	cmp	r3, #6
 801a3c8:	d010      	beq.n	801a3ec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	681a      	ldr	r2, [r3, #0]
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	f042 0201 	orr.w	r2, r2, #1
 801a3d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a3da:	e007      	b.n	801a3ec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	681a      	ldr	r2, [r3, #0]
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	f042 0201 	orr.w	r2, r2, #1
 801a3ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a3ec:	2300      	movs	r3, #0
}
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	3714      	adds	r7, #20
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3f8:	4770      	bx	lr
 801a3fa:	bf00      	nop
 801a3fc:	40010000 	.word	0x40010000
 801a400:	40000400 	.word	0x40000400
 801a404:	40000800 	.word	0x40000800
 801a408:	40000c00 	.word	0x40000c00
 801a40c:	40014000 	.word	0x40014000

0801a410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a410:	b480      	push	{r7}
 801a412:	b085      	sub	sp, #20
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a41e:	b2db      	uxtb	r3, r3
 801a420:	2b01      	cmp	r3, #1
 801a422:	d001      	beq.n	801a428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801a424:	2301      	movs	r3, #1
 801a426:	e044      	b.n	801a4b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	2202      	movs	r2, #2
 801a42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	68da      	ldr	r2, [r3, #12]
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f042 0201 	orr.w	r2, r2, #1
 801a43e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	4a1e      	ldr	r2, [pc, #120]	; (801a4c0 <HAL_TIM_Base_Start_IT+0xb0>)
 801a446:	4293      	cmp	r3, r2
 801a448:	d018      	beq.n	801a47c <HAL_TIM_Base_Start_IT+0x6c>
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a452:	d013      	beq.n	801a47c <HAL_TIM_Base_Start_IT+0x6c>
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	4a1a      	ldr	r2, [pc, #104]	; (801a4c4 <HAL_TIM_Base_Start_IT+0xb4>)
 801a45a:	4293      	cmp	r3, r2
 801a45c:	d00e      	beq.n	801a47c <HAL_TIM_Base_Start_IT+0x6c>
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	4a19      	ldr	r2, [pc, #100]	; (801a4c8 <HAL_TIM_Base_Start_IT+0xb8>)
 801a464:	4293      	cmp	r3, r2
 801a466:	d009      	beq.n	801a47c <HAL_TIM_Base_Start_IT+0x6c>
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	4a17      	ldr	r2, [pc, #92]	; (801a4cc <HAL_TIM_Base_Start_IT+0xbc>)
 801a46e:	4293      	cmp	r3, r2
 801a470:	d004      	beq.n	801a47c <HAL_TIM_Base_Start_IT+0x6c>
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	4a16      	ldr	r2, [pc, #88]	; (801a4d0 <HAL_TIM_Base_Start_IT+0xc0>)
 801a478:	4293      	cmp	r3, r2
 801a47a:	d111      	bne.n	801a4a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	689b      	ldr	r3, [r3, #8]
 801a482:	f003 0307 	and.w	r3, r3, #7
 801a486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	2b06      	cmp	r3, #6
 801a48c:	d010      	beq.n	801a4b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	681a      	ldr	r2, [r3, #0]
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	f042 0201 	orr.w	r2, r2, #1
 801a49c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a49e:	e007      	b.n	801a4b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	681a      	ldr	r2, [r3, #0]
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	f042 0201 	orr.w	r2, r2, #1
 801a4ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a4b0:	2300      	movs	r3, #0
}
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	3714      	adds	r7, #20
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4bc:	4770      	bx	lr
 801a4be:	bf00      	nop
 801a4c0:	40010000 	.word	0x40010000
 801a4c4:	40000400 	.word	0x40000400
 801a4c8:	40000800 	.word	0x40000800
 801a4cc:	40000c00 	.word	0x40000c00
 801a4d0:	40014000 	.word	0x40014000

0801a4d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b082      	sub	sp, #8
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d101      	bne.n	801a4e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a4e2:	2301      	movs	r3, #1
 801a4e4:	e041      	b.n	801a56a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a4ec:	b2db      	uxtb	r3, r3
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d106      	bne.n	801a500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a4fa:	6878      	ldr	r0, [r7, #4]
 801a4fc:	f000 f839 	bl	801a572 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	2202      	movs	r2, #2
 801a504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	681a      	ldr	r2, [r3, #0]
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	3304      	adds	r3, #4
 801a510:	4619      	mov	r1, r3
 801a512:	4610      	mov	r0, r2
 801a514:	f000 fc98 	bl	801ae48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	2201      	movs	r2, #1
 801a51c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	2201      	movs	r2, #1
 801a524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	2201      	movs	r2, #1
 801a52c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2201      	movs	r2, #1
 801a534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	2201      	movs	r2, #1
 801a53c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	2201      	movs	r2, #1
 801a544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	2201      	movs	r2, #1
 801a54c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	2201      	movs	r2, #1
 801a554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	2201      	movs	r2, #1
 801a55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2201      	movs	r2, #1
 801a564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a568:	2300      	movs	r3, #0
}
 801a56a:	4618      	mov	r0, r3
 801a56c:	3708      	adds	r7, #8
 801a56e:	46bd      	mov	sp, r7
 801a570:	bd80      	pop	{r7, pc}

0801a572 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801a572:	b480      	push	{r7}
 801a574:	b083      	sub	sp, #12
 801a576:	af00      	add	r7, sp, #0
 801a578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801a57a:	bf00      	nop
 801a57c:	370c      	adds	r7, #12
 801a57e:	46bd      	mov	sp, r7
 801a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a584:	4770      	bx	lr
	...

0801a588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b084      	sub	sp, #16
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
 801a590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a592:	683b      	ldr	r3, [r7, #0]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d109      	bne.n	801a5ac <HAL_TIM_PWM_Start+0x24>
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801a59e:	b2db      	uxtb	r3, r3
 801a5a0:	2b01      	cmp	r3, #1
 801a5a2:	bf14      	ite	ne
 801a5a4:	2301      	movne	r3, #1
 801a5a6:	2300      	moveq	r3, #0
 801a5a8:	b2db      	uxtb	r3, r3
 801a5aa:	e022      	b.n	801a5f2 <HAL_TIM_PWM_Start+0x6a>
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	2b04      	cmp	r3, #4
 801a5b0:	d109      	bne.n	801a5c6 <HAL_TIM_PWM_Start+0x3e>
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801a5b8:	b2db      	uxtb	r3, r3
 801a5ba:	2b01      	cmp	r3, #1
 801a5bc:	bf14      	ite	ne
 801a5be:	2301      	movne	r3, #1
 801a5c0:	2300      	moveq	r3, #0
 801a5c2:	b2db      	uxtb	r3, r3
 801a5c4:	e015      	b.n	801a5f2 <HAL_TIM_PWM_Start+0x6a>
 801a5c6:	683b      	ldr	r3, [r7, #0]
 801a5c8:	2b08      	cmp	r3, #8
 801a5ca:	d109      	bne.n	801a5e0 <HAL_TIM_PWM_Start+0x58>
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801a5d2:	b2db      	uxtb	r3, r3
 801a5d4:	2b01      	cmp	r3, #1
 801a5d6:	bf14      	ite	ne
 801a5d8:	2301      	movne	r3, #1
 801a5da:	2300      	moveq	r3, #0
 801a5dc:	b2db      	uxtb	r3, r3
 801a5de:	e008      	b.n	801a5f2 <HAL_TIM_PWM_Start+0x6a>
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801a5e6:	b2db      	uxtb	r3, r3
 801a5e8:	2b01      	cmp	r3, #1
 801a5ea:	bf14      	ite	ne
 801a5ec:	2301      	movne	r3, #1
 801a5ee:	2300      	moveq	r3, #0
 801a5f0:	b2db      	uxtb	r3, r3
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d001      	beq.n	801a5fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 801a5f6:	2301      	movs	r3, #1
 801a5f8:	e068      	b.n	801a6cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d104      	bne.n	801a60a <HAL_TIM_PWM_Start+0x82>
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	2202      	movs	r2, #2
 801a604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a608:	e013      	b.n	801a632 <HAL_TIM_PWM_Start+0xaa>
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	2b04      	cmp	r3, #4
 801a60e:	d104      	bne.n	801a61a <HAL_TIM_PWM_Start+0x92>
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	2202      	movs	r2, #2
 801a614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a618:	e00b      	b.n	801a632 <HAL_TIM_PWM_Start+0xaa>
 801a61a:	683b      	ldr	r3, [r7, #0]
 801a61c:	2b08      	cmp	r3, #8
 801a61e:	d104      	bne.n	801a62a <HAL_TIM_PWM_Start+0xa2>
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	2202      	movs	r2, #2
 801a624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a628:	e003      	b.n	801a632 <HAL_TIM_PWM_Start+0xaa>
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	2202      	movs	r2, #2
 801a62e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	2201      	movs	r2, #1
 801a638:	6839      	ldr	r1, [r7, #0]
 801a63a:	4618      	mov	r0, r3
 801a63c:	f000 ffc8 	bl	801b5d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	4a23      	ldr	r2, [pc, #140]	; (801a6d4 <HAL_TIM_PWM_Start+0x14c>)
 801a646:	4293      	cmp	r3, r2
 801a648:	d107      	bne.n	801a65a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a658:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	4a1d      	ldr	r2, [pc, #116]	; (801a6d4 <HAL_TIM_PWM_Start+0x14c>)
 801a660:	4293      	cmp	r3, r2
 801a662:	d018      	beq.n	801a696 <HAL_TIM_PWM_Start+0x10e>
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a66c:	d013      	beq.n	801a696 <HAL_TIM_PWM_Start+0x10e>
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	4a19      	ldr	r2, [pc, #100]	; (801a6d8 <HAL_TIM_PWM_Start+0x150>)
 801a674:	4293      	cmp	r3, r2
 801a676:	d00e      	beq.n	801a696 <HAL_TIM_PWM_Start+0x10e>
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	4a17      	ldr	r2, [pc, #92]	; (801a6dc <HAL_TIM_PWM_Start+0x154>)
 801a67e:	4293      	cmp	r3, r2
 801a680:	d009      	beq.n	801a696 <HAL_TIM_PWM_Start+0x10e>
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	4a16      	ldr	r2, [pc, #88]	; (801a6e0 <HAL_TIM_PWM_Start+0x158>)
 801a688:	4293      	cmp	r3, r2
 801a68a:	d004      	beq.n	801a696 <HAL_TIM_PWM_Start+0x10e>
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	4a14      	ldr	r2, [pc, #80]	; (801a6e4 <HAL_TIM_PWM_Start+0x15c>)
 801a692:	4293      	cmp	r3, r2
 801a694:	d111      	bne.n	801a6ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	689b      	ldr	r3, [r3, #8]
 801a69c:	f003 0307 	and.w	r3, r3, #7
 801a6a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a6a2:	68fb      	ldr	r3, [r7, #12]
 801a6a4:	2b06      	cmp	r3, #6
 801a6a6:	d010      	beq.n	801a6ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	681a      	ldr	r2, [r3, #0]
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	f042 0201 	orr.w	r2, r2, #1
 801a6b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a6b8:	e007      	b.n	801a6ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	681a      	ldr	r2, [r3, #0]
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	f042 0201 	orr.w	r2, r2, #1
 801a6c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a6ca:	2300      	movs	r3, #0
}
 801a6cc:	4618      	mov	r0, r3
 801a6ce:	3710      	adds	r7, #16
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	bd80      	pop	{r7, pc}
 801a6d4:	40010000 	.word	0x40010000
 801a6d8:	40000400 	.word	0x40000400
 801a6dc:	40000800 	.word	0x40000800
 801a6e0:	40000c00 	.word	0x40000c00
 801a6e4:	40014000 	.word	0x40014000

0801a6e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b082      	sub	sp, #8
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d101      	bne.n	801a6fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801a6f6:	2301      	movs	r3, #1
 801a6f8:	e041      	b.n	801a77e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a700:	b2db      	uxtb	r3, r3
 801a702:	2b00      	cmp	r3, #0
 801a704:	d106      	bne.n	801a714 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	2200      	movs	r2, #0
 801a70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801a70e:	6878      	ldr	r0, [r7, #4]
 801a710:	f000 f839 	bl	801a786 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	2202      	movs	r2, #2
 801a718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681a      	ldr	r2, [r3, #0]
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	3304      	adds	r3, #4
 801a724:	4619      	mov	r1, r3
 801a726:	4610      	mov	r0, r2
 801a728:	f000 fb8e 	bl	801ae48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	2201      	movs	r2, #1
 801a730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	2201      	movs	r2, #1
 801a738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	2201      	movs	r2, #1
 801a740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	2201      	movs	r2, #1
 801a748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	2201      	movs	r2, #1
 801a750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	2201      	movs	r2, #1
 801a758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	2201      	movs	r2, #1
 801a760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	2201      	movs	r2, #1
 801a768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	2201      	movs	r2, #1
 801a770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	2201      	movs	r2, #1
 801a778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a77c:	2300      	movs	r3, #0
}
 801a77e:	4618      	mov	r0, r3
 801a780:	3708      	adds	r7, #8
 801a782:	46bd      	mov	sp, r7
 801a784:	bd80      	pop	{r7, pc}

0801a786 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801a786:	b480      	push	{r7}
 801a788:	b083      	sub	sp, #12
 801a78a:	af00      	add	r7, sp, #0
 801a78c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801a78e:	bf00      	nop
 801a790:	370c      	adds	r7, #12
 801a792:	46bd      	mov	sp, r7
 801a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a798:	4770      	bx	lr

0801a79a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a79a:	b580      	push	{r7, lr}
 801a79c:	b082      	sub	sp, #8
 801a79e:	af00      	add	r7, sp, #0
 801a7a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	691b      	ldr	r3, [r3, #16]
 801a7a8:	f003 0302 	and.w	r3, r3, #2
 801a7ac:	2b02      	cmp	r3, #2
 801a7ae:	d122      	bne.n	801a7f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	68db      	ldr	r3, [r3, #12]
 801a7b6:	f003 0302 	and.w	r3, r3, #2
 801a7ba:	2b02      	cmp	r3, #2
 801a7bc:	d11b      	bne.n	801a7f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	f06f 0202 	mvn.w	r2, #2
 801a7c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	2201      	movs	r2, #1
 801a7cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	699b      	ldr	r3, [r3, #24]
 801a7d4:	f003 0303 	and.w	r3, r3, #3
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d003      	beq.n	801a7e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a7dc:	6878      	ldr	r0, [r7, #4]
 801a7de:	f000 fb14 	bl	801ae0a <HAL_TIM_IC_CaptureCallback>
 801a7e2:	e005      	b.n	801a7f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a7e4:	6878      	ldr	r0, [r7, #4]
 801a7e6:	f000 fb06 	bl	801adf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a7ea:	6878      	ldr	r0, [r7, #4]
 801a7ec:	f000 fb17 	bl	801ae1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	681b      	ldr	r3, [r3, #0]
 801a7fa:	691b      	ldr	r3, [r3, #16]
 801a7fc:	f003 0304 	and.w	r3, r3, #4
 801a800:	2b04      	cmp	r3, #4
 801a802:	d122      	bne.n	801a84a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	68db      	ldr	r3, [r3, #12]
 801a80a:	f003 0304 	and.w	r3, r3, #4
 801a80e:	2b04      	cmp	r3, #4
 801a810:	d11b      	bne.n	801a84a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f06f 0204 	mvn.w	r2, #4
 801a81a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	2202      	movs	r2, #2
 801a820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	699b      	ldr	r3, [r3, #24]
 801a828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d003      	beq.n	801a838 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a830:	6878      	ldr	r0, [r7, #4]
 801a832:	f000 faea 	bl	801ae0a <HAL_TIM_IC_CaptureCallback>
 801a836:	e005      	b.n	801a844 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a838:	6878      	ldr	r0, [r7, #4]
 801a83a:	f000 fadc 	bl	801adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a83e:	6878      	ldr	r0, [r7, #4]
 801a840:	f000 faed 	bl	801ae1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	2200      	movs	r2, #0
 801a848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	691b      	ldr	r3, [r3, #16]
 801a850:	f003 0308 	and.w	r3, r3, #8
 801a854:	2b08      	cmp	r3, #8
 801a856:	d122      	bne.n	801a89e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	68db      	ldr	r3, [r3, #12]
 801a85e:	f003 0308 	and.w	r3, r3, #8
 801a862:	2b08      	cmp	r3, #8
 801a864:	d11b      	bne.n	801a89e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	f06f 0208 	mvn.w	r2, #8
 801a86e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	2204      	movs	r2, #4
 801a874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	69db      	ldr	r3, [r3, #28]
 801a87c:	f003 0303 	and.w	r3, r3, #3
 801a880:	2b00      	cmp	r3, #0
 801a882:	d003      	beq.n	801a88c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a884:	6878      	ldr	r0, [r7, #4]
 801a886:	f000 fac0 	bl	801ae0a <HAL_TIM_IC_CaptureCallback>
 801a88a:	e005      	b.n	801a898 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a88c:	6878      	ldr	r0, [r7, #4]
 801a88e:	f000 fab2 	bl	801adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a892:	6878      	ldr	r0, [r7, #4]
 801a894:	f000 fac3 	bl	801ae1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	2200      	movs	r2, #0
 801a89c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	691b      	ldr	r3, [r3, #16]
 801a8a4:	f003 0310 	and.w	r3, r3, #16
 801a8a8:	2b10      	cmp	r3, #16
 801a8aa:	d122      	bne.n	801a8f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	68db      	ldr	r3, [r3, #12]
 801a8b2:	f003 0310 	and.w	r3, r3, #16
 801a8b6:	2b10      	cmp	r3, #16
 801a8b8:	d11b      	bne.n	801a8f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	f06f 0210 	mvn.w	r2, #16
 801a8c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2208      	movs	r2, #8
 801a8c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	69db      	ldr	r3, [r3, #28]
 801a8d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d003      	beq.n	801a8e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a8d8:	6878      	ldr	r0, [r7, #4]
 801a8da:	f000 fa96 	bl	801ae0a <HAL_TIM_IC_CaptureCallback>
 801a8de:	e005      	b.n	801a8ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a8e0:	6878      	ldr	r0, [r7, #4]
 801a8e2:	f000 fa88 	bl	801adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a8e6:	6878      	ldr	r0, [r7, #4]
 801a8e8:	f000 fa99 	bl	801ae1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	2200      	movs	r2, #0
 801a8f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	691b      	ldr	r3, [r3, #16]
 801a8f8:	f003 0301 	and.w	r3, r3, #1
 801a8fc:	2b01      	cmp	r3, #1
 801a8fe:	d10e      	bne.n	801a91e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	68db      	ldr	r3, [r3, #12]
 801a906:	f003 0301 	and.w	r3, r3, #1
 801a90a:	2b01      	cmp	r3, #1
 801a90c:	d107      	bne.n	801a91e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	f06f 0201 	mvn.w	r2, #1
 801a916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a918:	6878      	ldr	r0, [r7, #4]
 801a91a:	f7e8 ffc1 	bl	80038a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	691b      	ldr	r3, [r3, #16]
 801a924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a928:	2b80      	cmp	r3, #128	; 0x80
 801a92a:	d10e      	bne.n	801a94a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	68db      	ldr	r3, [r3, #12]
 801a932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a936:	2b80      	cmp	r3, #128	; 0x80
 801a938:	d107      	bne.n	801a94a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801a942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801a944:	6878      	ldr	r0, [r7, #4]
 801a946:	f000 fee1 	bl	801b70c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	691b      	ldr	r3, [r3, #16]
 801a950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a954:	2b40      	cmp	r3, #64	; 0x40
 801a956:	d10e      	bne.n	801a976 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	68db      	ldr	r3, [r3, #12]
 801a95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a962:	2b40      	cmp	r3, #64	; 0x40
 801a964:	d107      	bne.n	801a976 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801a96e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a970:	6878      	ldr	r0, [r7, #4]
 801a972:	f000 fa5e 	bl	801ae32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	691b      	ldr	r3, [r3, #16]
 801a97c:	f003 0320 	and.w	r3, r3, #32
 801a980:	2b20      	cmp	r3, #32
 801a982:	d10e      	bne.n	801a9a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	f003 0320 	and.w	r3, r3, #32
 801a98e:	2b20      	cmp	r3, #32
 801a990:	d107      	bne.n	801a9a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	f06f 0220 	mvn.w	r2, #32
 801a99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801a99c:	6878      	ldr	r0, [r7, #4]
 801a99e:	f000 feab 	bl	801b6f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a9a2:	bf00      	nop
 801a9a4:	3708      	adds	r7, #8
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}

0801a9aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801a9aa:	b580      	push	{r7, lr}
 801a9ac:	b086      	sub	sp, #24
 801a9ae:	af00      	add	r7, sp, #0
 801a9b0:	60f8      	str	r0, [r7, #12]
 801a9b2:	60b9      	str	r1, [r7, #8]
 801a9b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a9c0:	2b01      	cmp	r3, #1
 801a9c2:	d101      	bne.n	801a9c8 <HAL_TIM_IC_ConfigChannel+0x1e>
 801a9c4:	2302      	movs	r3, #2
 801a9c6:	e088      	b.n	801aada <HAL_TIM_IC_ConfigChannel+0x130>
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	2201      	movs	r2, #1
 801a9cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d11b      	bne.n	801aa0e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801a9d6:	68fb      	ldr	r3, [r7, #12]
 801a9d8:	6818      	ldr	r0, [r3, #0]
 801a9da:	68bb      	ldr	r3, [r7, #8]
 801a9dc:	6819      	ldr	r1, [r3, #0]
 801a9de:	68bb      	ldr	r3, [r7, #8]
 801a9e0:	685a      	ldr	r2, [r3, #4]
 801a9e2:	68bb      	ldr	r3, [r7, #8]
 801a9e4:	68db      	ldr	r3, [r3, #12]
 801a9e6:	f000 fc3b 	bl	801b260 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	699a      	ldr	r2, [r3, #24]
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	f022 020c 	bic.w	r2, r2, #12
 801a9f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	6999      	ldr	r1, [r3, #24]
 801aa00:	68bb      	ldr	r3, [r7, #8]
 801aa02:	689a      	ldr	r2, [r3, #8]
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	430a      	orrs	r2, r1
 801aa0a:	619a      	str	r2, [r3, #24]
 801aa0c:	e060      	b.n	801aad0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	2b04      	cmp	r3, #4
 801aa12:	d11c      	bne.n	801aa4e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	6818      	ldr	r0, [r3, #0]
 801aa18:	68bb      	ldr	r3, [r7, #8]
 801aa1a:	6819      	ldr	r1, [r3, #0]
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	685a      	ldr	r2, [r3, #4]
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	68db      	ldr	r3, [r3, #12]
 801aa24:	f000 fcb3 	bl	801b38e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	699a      	ldr	r2, [r3, #24]
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801aa36:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	6999      	ldr	r1, [r3, #24]
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	689b      	ldr	r3, [r3, #8]
 801aa42:	021a      	lsls	r2, r3, #8
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	430a      	orrs	r2, r1
 801aa4a:	619a      	str	r2, [r3, #24]
 801aa4c:	e040      	b.n	801aad0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	2b08      	cmp	r3, #8
 801aa52:	d11b      	bne.n	801aa8c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801aa54:	68fb      	ldr	r3, [r7, #12]
 801aa56:	6818      	ldr	r0, [r3, #0]
 801aa58:	68bb      	ldr	r3, [r7, #8]
 801aa5a:	6819      	ldr	r1, [r3, #0]
 801aa5c:	68bb      	ldr	r3, [r7, #8]
 801aa5e:	685a      	ldr	r2, [r3, #4]
 801aa60:	68bb      	ldr	r3, [r7, #8]
 801aa62:	68db      	ldr	r3, [r3, #12]
 801aa64:	f000 fd00 	bl	801b468 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	69da      	ldr	r2, [r3, #28]
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	f022 020c 	bic.w	r2, r2, #12
 801aa76:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	69d9      	ldr	r1, [r3, #28]
 801aa7e:	68bb      	ldr	r3, [r7, #8]
 801aa80:	689a      	ldr	r2, [r3, #8]
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	430a      	orrs	r2, r1
 801aa88:	61da      	str	r2, [r3, #28]
 801aa8a:	e021      	b.n	801aad0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	2b0c      	cmp	r3, #12
 801aa90:	d11c      	bne.n	801aacc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	6818      	ldr	r0, [r3, #0]
 801aa96:	68bb      	ldr	r3, [r7, #8]
 801aa98:	6819      	ldr	r1, [r3, #0]
 801aa9a:	68bb      	ldr	r3, [r7, #8]
 801aa9c:	685a      	ldr	r2, [r3, #4]
 801aa9e:	68bb      	ldr	r3, [r7, #8]
 801aaa0:	68db      	ldr	r3, [r3, #12]
 801aaa2:	f000 fd1d 	bl	801b4e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	69da      	ldr	r2, [r3, #28]
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801aab4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	69d9      	ldr	r1, [r3, #28]
 801aabc:	68bb      	ldr	r3, [r7, #8]
 801aabe:	689b      	ldr	r3, [r3, #8]
 801aac0:	021a      	lsls	r2, r3, #8
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	430a      	orrs	r2, r1
 801aac8:	61da      	str	r2, [r3, #28]
 801aaca:	e001      	b.n	801aad0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801aacc:	2301      	movs	r3, #1
 801aace:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	2200      	movs	r2, #0
 801aad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801aad8:	7dfb      	ldrb	r3, [r7, #23]
}
 801aada:	4618      	mov	r0, r3
 801aadc:	3718      	adds	r7, #24
 801aade:	46bd      	mov	sp, r7
 801aae0:	bd80      	pop	{r7, pc}
	...

0801aae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b086      	sub	sp, #24
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	60f8      	str	r0, [r7, #12]
 801aaec:	60b9      	str	r1, [r7, #8]
 801aaee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801aafa:	2b01      	cmp	r3, #1
 801aafc:	d101      	bne.n	801ab02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801aafe:	2302      	movs	r3, #2
 801ab00:	e0ae      	b.n	801ac60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	2201      	movs	r2, #1
 801ab06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	2b0c      	cmp	r3, #12
 801ab0e:	f200 809f 	bhi.w	801ac50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801ab12:	a201      	add	r2, pc, #4	; (adr r2, 801ab18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab18:	0801ab4d 	.word	0x0801ab4d
 801ab1c:	0801ac51 	.word	0x0801ac51
 801ab20:	0801ac51 	.word	0x0801ac51
 801ab24:	0801ac51 	.word	0x0801ac51
 801ab28:	0801ab8d 	.word	0x0801ab8d
 801ab2c:	0801ac51 	.word	0x0801ac51
 801ab30:	0801ac51 	.word	0x0801ac51
 801ab34:	0801ac51 	.word	0x0801ac51
 801ab38:	0801abcf 	.word	0x0801abcf
 801ab3c:	0801ac51 	.word	0x0801ac51
 801ab40:	0801ac51 	.word	0x0801ac51
 801ab44:	0801ac51 	.word	0x0801ac51
 801ab48:	0801ac0f 	.word	0x0801ac0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	68b9      	ldr	r1, [r7, #8]
 801ab52:	4618      	mov	r0, r3
 801ab54:	f000 f9f8 	bl	801af48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	699a      	ldr	r2, [r3, #24]
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	f042 0208 	orr.w	r2, r2, #8
 801ab66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	699a      	ldr	r2, [r3, #24]
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	f022 0204 	bic.w	r2, r2, #4
 801ab76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	681b      	ldr	r3, [r3, #0]
 801ab7c:	6999      	ldr	r1, [r3, #24]
 801ab7e:	68bb      	ldr	r3, [r7, #8]
 801ab80:	691a      	ldr	r2, [r3, #16]
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	430a      	orrs	r2, r1
 801ab88:	619a      	str	r2, [r3, #24]
      break;
 801ab8a:	e064      	b.n	801ac56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	68b9      	ldr	r1, [r7, #8]
 801ab92:	4618      	mov	r0, r3
 801ab94:	f000 fa3e 	bl	801b014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	699a      	ldr	r2, [r3, #24]
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801aba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	699a      	ldr	r2, [r3, #24]
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801abb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	6999      	ldr	r1, [r3, #24]
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	691b      	ldr	r3, [r3, #16]
 801abc2:	021a      	lsls	r2, r3, #8
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	430a      	orrs	r2, r1
 801abca:	619a      	str	r2, [r3, #24]
      break;
 801abcc:	e043      	b.n	801ac56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	68b9      	ldr	r1, [r7, #8]
 801abd4:	4618      	mov	r0, r3
 801abd6:	f000 fa89 	bl	801b0ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	69da      	ldr	r2, [r3, #28]
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	f042 0208 	orr.w	r2, r2, #8
 801abe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801abea:	68fb      	ldr	r3, [r7, #12]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	69da      	ldr	r2, [r3, #28]
 801abf0:	68fb      	ldr	r3, [r7, #12]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	f022 0204 	bic.w	r2, r2, #4
 801abf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	69d9      	ldr	r1, [r3, #28]
 801ac00:	68bb      	ldr	r3, [r7, #8]
 801ac02:	691a      	ldr	r2, [r3, #16]
 801ac04:	68fb      	ldr	r3, [r7, #12]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	430a      	orrs	r2, r1
 801ac0a:	61da      	str	r2, [r3, #28]
      break;
 801ac0c:	e023      	b.n	801ac56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801ac0e:	68fb      	ldr	r3, [r7, #12]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	68b9      	ldr	r1, [r7, #8]
 801ac14:	4618      	mov	r0, r3
 801ac16:	f000 fad3 	bl	801b1c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	69da      	ldr	r2, [r3, #28]
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ac28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	69da      	ldr	r2, [r3, #28]
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ac38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801ac3a:	68fb      	ldr	r3, [r7, #12]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	69d9      	ldr	r1, [r3, #28]
 801ac40:	68bb      	ldr	r3, [r7, #8]
 801ac42:	691b      	ldr	r3, [r3, #16]
 801ac44:	021a      	lsls	r2, r3, #8
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	430a      	orrs	r2, r1
 801ac4c:	61da      	str	r2, [r3, #28]
      break;
 801ac4e:	e002      	b.n	801ac56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801ac50:	2301      	movs	r3, #1
 801ac52:	75fb      	strb	r3, [r7, #23]
      break;
 801ac54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	2200      	movs	r2, #0
 801ac5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801ac5e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac60:	4618      	mov	r0, r3
 801ac62:	3718      	adds	r7, #24
 801ac64:	46bd      	mov	sp, r7
 801ac66:	bd80      	pop	{r7, pc}

0801ac68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b084      	sub	sp, #16
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
 801ac70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ac72:	2300      	movs	r3, #0
 801ac74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ac7c:	2b01      	cmp	r3, #1
 801ac7e:	d101      	bne.n	801ac84 <HAL_TIM_ConfigClockSource+0x1c>
 801ac80:	2302      	movs	r3, #2
 801ac82:	e0b4      	b.n	801adee <HAL_TIM_ConfigClockSource+0x186>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	2201      	movs	r2, #1
 801ac88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	2202      	movs	r2, #2
 801ac90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	689b      	ldr	r3, [r3, #8]
 801ac9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801aca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801aca4:	68bb      	ldr	r3, [r7, #8]
 801aca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801acaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	68ba      	ldr	r2, [r7, #8]
 801acb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801acb4:	683b      	ldr	r3, [r7, #0]
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801acbc:	d03e      	beq.n	801ad3c <HAL_TIM_ConfigClockSource+0xd4>
 801acbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801acc2:	f200 8087 	bhi.w	801add4 <HAL_TIM_ConfigClockSource+0x16c>
 801acc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801acca:	f000 8086 	beq.w	801adda <HAL_TIM_ConfigClockSource+0x172>
 801acce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801acd2:	d87f      	bhi.n	801add4 <HAL_TIM_ConfigClockSource+0x16c>
 801acd4:	2b70      	cmp	r3, #112	; 0x70
 801acd6:	d01a      	beq.n	801ad0e <HAL_TIM_ConfigClockSource+0xa6>
 801acd8:	2b70      	cmp	r3, #112	; 0x70
 801acda:	d87b      	bhi.n	801add4 <HAL_TIM_ConfigClockSource+0x16c>
 801acdc:	2b60      	cmp	r3, #96	; 0x60
 801acde:	d050      	beq.n	801ad82 <HAL_TIM_ConfigClockSource+0x11a>
 801ace0:	2b60      	cmp	r3, #96	; 0x60
 801ace2:	d877      	bhi.n	801add4 <HAL_TIM_ConfigClockSource+0x16c>
 801ace4:	2b50      	cmp	r3, #80	; 0x50
 801ace6:	d03c      	beq.n	801ad62 <HAL_TIM_ConfigClockSource+0xfa>
 801ace8:	2b50      	cmp	r3, #80	; 0x50
 801acea:	d873      	bhi.n	801add4 <HAL_TIM_ConfigClockSource+0x16c>
 801acec:	2b40      	cmp	r3, #64	; 0x40
 801acee:	d058      	beq.n	801ada2 <HAL_TIM_ConfigClockSource+0x13a>
 801acf0:	2b40      	cmp	r3, #64	; 0x40
 801acf2:	d86f      	bhi.n	801add4 <HAL_TIM_ConfigClockSource+0x16c>
 801acf4:	2b30      	cmp	r3, #48	; 0x30
 801acf6:	d064      	beq.n	801adc2 <HAL_TIM_ConfigClockSource+0x15a>
 801acf8:	2b30      	cmp	r3, #48	; 0x30
 801acfa:	d86b      	bhi.n	801add4 <HAL_TIM_ConfigClockSource+0x16c>
 801acfc:	2b20      	cmp	r3, #32
 801acfe:	d060      	beq.n	801adc2 <HAL_TIM_ConfigClockSource+0x15a>
 801ad00:	2b20      	cmp	r3, #32
 801ad02:	d867      	bhi.n	801add4 <HAL_TIM_ConfigClockSource+0x16c>
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d05c      	beq.n	801adc2 <HAL_TIM_ConfigClockSource+0x15a>
 801ad08:	2b10      	cmp	r3, #16
 801ad0a:	d05a      	beq.n	801adc2 <HAL_TIM_ConfigClockSource+0x15a>
 801ad0c:	e062      	b.n	801add4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	6818      	ldr	r0, [r3, #0]
 801ad12:	683b      	ldr	r3, [r7, #0]
 801ad14:	6899      	ldr	r1, [r3, #8]
 801ad16:	683b      	ldr	r3, [r7, #0]
 801ad18:	685a      	ldr	r2, [r3, #4]
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	68db      	ldr	r3, [r3, #12]
 801ad1e:	f000 fc37 	bl	801b590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	689b      	ldr	r3, [r3, #8]
 801ad28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801ad2a:	68bb      	ldr	r3, [r7, #8]
 801ad2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801ad30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	68ba      	ldr	r2, [r7, #8]
 801ad38:	609a      	str	r2, [r3, #8]
      break;
 801ad3a:	e04f      	b.n	801addc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	6818      	ldr	r0, [r3, #0]
 801ad40:	683b      	ldr	r3, [r7, #0]
 801ad42:	6899      	ldr	r1, [r3, #8]
 801ad44:	683b      	ldr	r3, [r7, #0]
 801ad46:	685a      	ldr	r2, [r3, #4]
 801ad48:	683b      	ldr	r3, [r7, #0]
 801ad4a:	68db      	ldr	r3, [r3, #12]
 801ad4c:	f000 fc20 	bl	801b590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	689a      	ldr	r2, [r3, #8]
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801ad5e:	609a      	str	r2, [r3, #8]
      break;
 801ad60:	e03c      	b.n	801addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	6818      	ldr	r0, [r3, #0]
 801ad66:	683b      	ldr	r3, [r7, #0]
 801ad68:	6859      	ldr	r1, [r3, #4]
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	68db      	ldr	r3, [r3, #12]
 801ad6e:	461a      	mov	r2, r3
 801ad70:	f000 fade 	bl	801b330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	2150      	movs	r1, #80	; 0x50
 801ad7a:	4618      	mov	r0, r3
 801ad7c:	f000 fbed 	bl	801b55a <TIM_ITRx_SetConfig>
      break;
 801ad80:	e02c      	b.n	801addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	6818      	ldr	r0, [r3, #0]
 801ad86:	683b      	ldr	r3, [r7, #0]
 801ad88:	6859      	ldr	r1, [r3, #4]
 801ad8a:	683b      	ldr	r3, [r7, #0]
 801ad8c:	68db      	ldr	r3, [r3, #12]
 801ad8e:	461a      	mov	r2, r3
 801ad90:	f000 fb3a 	bl	801b408 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	2160      	movs	r1, #96	; 0x60
 801ad9a:	4618      	mov	r0, r3
 801ad9c:	f000 fbdd 	bl	801b55a <TIM_ITRx_SetConfig>
      break;
 801ada0:	e01c      	b.n	801addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	6818      	ldr	r0, [r3, #0]
 801ada6:	683b      	ldr	r3, [r7, #0]
 801ada8:	6859      	ldr	r1, [r3, #4]
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	68db      	ldr	r3, [r3, #12]
 801adae:	461a      	mov	r2, r3
 801adb0:	f000 fabe 	bl	801b330 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	2140      	movs	r1, #64	; 0x40
 801adba:	4618      	mov	r0, r3
 801adbc:	f000 fbcd 	bl	801b55a <TIM_ITRx_SetConfig>
      break;
 801adc0:	e00c      	b.n	801addc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	681a      	ldr	r2, [r3, #0]
 801adc6:	683b      	ldr	r3, [r7, #0]
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	4619      	mov	r1, r3
 801adcc:	4610      	mov	r0, r2
 801adce:	f000 fbc4 	bl	801b55a <TIM_ITRx_SetConfig>
      break;
 801add2:	e003      	b.n	801addc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 801add4:	2301      	movs	r3, #1
 801add6:	73fb      	strb	r3, [r7, #15]
      break;
 801add8:	e000      	b.n	801addc <HAL_TIM_ConfigClockSource+0x174>
      break;
 801adda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	2201      	movs	r2, #1
 801ade0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	2200      	movs	r2, #0
 801ade8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801adec:	7bfb      	ldrb	r3, [r7, #15]
}
 801adee:	4618      	mov	r0, r3
 801adf0:	3710      	adds	r7, #16
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}

0801adf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801adf6:	b480      	push	{r7}
 801adf8:	b083      	sub	sp, #12
 801adfa:	af00      	add	r7, sp, #0
 801adfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801adfe:	bf00      	nop
 801ae00:	370c      	adds	r7, #12
 801ae02:	46bd      	mov	sp, r7
 801ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae08:	4770      	bx	lr

0801ae0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801ae0a:	b480      	push	{r7}
 801ae0c:	b083      	sub	sp, #12
 801ae0e:	af00      	add	r7, sp, #0
 801ae10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801ae12:	bf00      	nop
 801ae14:	370c      	adds	r7, #12
 801ae16:	46bd      	mov	sp, r7
 801ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae1c:	4770      	bx	lr

0801ae1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801ae1e:	b480      	push	{r7}
 801ae20:	b083      	sub	sp, #12
 801ae22:	af00      	add	r7, sp, #0
 801ae24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801ae26:	bf00      	nop
 801ae28:	370c      	adds	r7, #12
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae30:	4770      	bx	lr

0801ae32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801ae32:	b480      	push	{r7}
 801ae34:	b083      	sub	sp, #12
 801ae36:	af00      	add	r7, sp, #0
 801ae38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801ae3a:	bf00      	nop
 801ae3c:	370c      	adds	r7, #12
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae44:	4770      	bx	lr
	...

0801ae48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801ae48:	b480      	push	{r7}
 801ae4a:	b085      	sub	sp, #20
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
 801ae50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	4a34      	ldr	r2, [pc, #208]	; (801af2c <TIM_Base_SetConfig+0xe4>)
 801ae5c:	4293      	cmp	r3, r2
 801ae5e:	d00f      	beq.n	801ae80 <TIM_Base_SetConfig+0x38>
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ae66:	d00b      	beq.n	801ae80 <TIM_Base_SetConfig+0x38>
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	4a31      	ldr	r2, [pc, #196]	; (801af30 <TIM_Base_SetConfig+0xe8>)
 801ae6c:	4293      	cmp	r3, r2
 801ae6e:	d007      	beq.n	801ae80 <TIM_Base_SetConfig+0x38>
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	4a30      	ldr	r2, [pc, #192]	; (801af34 <TIM_Base_SetConfig+0xec>)
 801ae74:	4293      	cmp	r3, r2
 801ae76:	d003      	beq.n	801ae80 <TIM_Base_SetConfig+0x38>
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	4a2f      	ldr	r2, [pc, #188]	; (801af38 <TIM_Base_SetConfig+0xf0>)
 801ae7c:	4293      	cmp	r3, r2
 801ae7e:	d108      	bne.n	801ae92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ae86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	685b      	ldr	r3, [r3, #4]
 801ae8c:	68fa      	ldr	r2, [r7, #12]
 801ae8e:	4313      	orrs	r3, r2
 801ae90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	4a25      	ldr	r2, [pc, #148]	; (801af2c <TIM_Base_SetConfig+0xe4>)
 801ae96:	4293      	cmp	r3, r2
 801ae98:	d01b      	beq.n	801aed2 <TIM_Base_SetConfig+0x8a>
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801aea0:	d017      	beq.n	801aed2 <TIM_Base_SetConfig+0x8a>
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	4a22      	ldr	r2, [pc, #136]	; (801af30 <TIM_Base_SetConfig+0xe8>)
 801aea6:	4293      	cmp	r3, r2
 801aea8:	d013      	beq.n	801aed2 <TIM_Base_SetConfig+0x8a>
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	4a21      	ldr	r2, [pc, #132]	; (801af34 <TIM_Base_SetConfig+0xec>)
 801aeae:	4293      	cmp	r3, r2
 801aeb0:	d00f      	beq.n	801aed2 <TIM_Base_SetConfig+0x8a>
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	4a20      	ldr	r2, [pc, #128]	; (801af38 <TIM_Base_SetConfig+0xf0>)
 801aeb6:	4293      	cmp	r3, r2
 801aeb8:	d00b      	beq.n	801aed2 <TIM_Base_SetConfig+0x8a>
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	4a1f      	ldr	r2, [pc, #124]	; (801af3c <TIM_Base_SetConfig+0xf4>)
 801aebe:	4293      	cmp	r3, r2
 801aec0:	d007      	beq.n	801aed2 <TIM_Base_SetConfig+0x8a>
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	4a1e      	ldr	r2, [pc, #120]	; (801af40 <TIM_Base_SetConfig+0xf8>)
 801aec6:	4293      	cmp	r3, r2
 801aec8:	d003      	beq.n	801aed2 <TIM_Base_SetConfig+0x8a>
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	4a1d      	ldr	r2, [pc, #116]	; (801af44 <TIM_Base_SetConfig+0xfc>)
 801aece:	4293      	cmp	r3, r2
 801aed0:	d108      	bne.n	801aee4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801aed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	68db      	ldr	r3, [r3, #12]
 801aede:	68fa      	ldr	r2, [r7, #12]
 801aee0:	4313      	orrs	r3, r2
 801aee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801aeea:	683b      	ldr	r3, [r7, #0]
 801aeec:	695b      	ldr	r3, [r3, #20]
 801aeee:	4313      	orrs	r3, r2
 801aef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	68fa      	ldr	r2, [r7, #12]
 801aef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801aef8:	683b      	ldr	r3, [r7, #0]
 801aefa:	689a      	ldr	r2, [r3, #8]
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	681a      	ldr	r2, [r3, #0]
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	4a08      	ldr	r2, [pc, #32]	; (801af2c <TIM_Base_SetConfig+0xe4>)
 801af0c:	4293      	cmp	r3, r2
 801af0e:	d103      	bne.n	801af18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801af10:	683b      	ldr	r3, [r7, #0]
 801af12:	691a      	ldr	r2, [r3, #16]
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	2201      	movs	r2, #1
 801af1c:	615a      	str	r2, [r3, #20]
}
 801af1e:	bf00      	nop
 801af20:	3714      	adds	r7, #20
 801af22:	46bd      	mov	sp, r7
 801af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af28:	4770      	bx	lr
 801af2a:	bf00      	nop
 801af2c:	40010000 	.word	0x40010000
 801af30:	40000400 	.word	0x40000400
 801af34:	40000800 	.word	0x40000800
 801af38:	40000c00 	.word	0x40000c00
 801af3c:	40014000 	.word	0x40014000
 801af40:	40014400 	.word	0x40014400
 801af44:	40014800 	.word	0x40014800

0801af48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801af48:	b480      	push	{r7}
 801af4a:	b087      	sub	sp, #28
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]
 801af50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	6a1b      	ldr	r3, [r3, #32]
 801af56:	f023 0201 	bic.w	r2, r3, #1
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	6a1b      	ldr	r3, [r3, #32]
 801af62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	685b      	ldr	r3, [r3, #4]
 801af68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	699b      	ldr	r3, [r3, #24]
 801af6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801af76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	f023 0303 	bic.w	r3, r3, #3
 801af7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801af80:	683b      	ldr	r3, [r7, #0]
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	68fa      	ldr	r2, [r7, #12]
 801af86:	4313      	orrs	r3, r2
 801af88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801af8a:	697b      	ldr	r3, [r7, #20]
 801af8c:	f023 0302 	bic.w	r3, r3, #2
 801af90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801af92:	683b      	ldr	r3, [r7, #0]
 801af94:	689b      	ldr	r3, [r3, #8]
 801af96:	697a      	ldr	r2, [r7, #20]
 801af98:	4313      	orrs	r3, r2
 801af9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	4a1c      	ldr	r2, [pc, #112]	; (801b010 <TIM_OC1_SetConfig+0xc8>)
 801afa0:	4293      	cmp	r3, r2
 801afa2:	d10c      	bne.n	801afbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801afa4:	697b      	ldr	r3, [r7, #20]
 801afa6:	f023 0308 	bic.w	r3, r3, #8
 801afaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801afac:	683b      	ldr	r3, [r7, #0]
 801afae:	68db      	ldr	r3, [r3, #12]
 801afb0:	697a      	ldr	r2, [r7, #20]
 801afb2:	4313      	orrs	r3, r2
 801afb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801afb6:	697b      	ldr	r3, [r7, #20]
 801afb8:	f023 0304 	bic.w	r3, r3, #4
 801afbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	4a13      	ldr	r2, [pc, #76]	; (801b010 <TIM_OC1_SetConfig+0xc8>)
 801afc2:	4293      	cmp	r3, r2
 801afc4:	d111      	bne.n	801afea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801afc6:	693b      	ldr	r3, [r7, #16]
 801afc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801afcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801afce:	693b      	ldr	r3, [r7, #16]
 801afd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801afd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801afd6:	683b      	ldr	r3, [r7, #0]
 801afd8:	695b      	ldr	r3, [r3, #20]
 801afda:	693a      	ldr	r2, [r7, #16]
 801afdc:	4313      	orrs	r3, r2
 801afde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801afe0:	683b      	ldr	r3, [r7, #0]
 801afe2:	699b      	ldr	r3, [r3, #24]
 801afe4:	693a      	ldr	r2, [r7, #16]
 801afe6:	4313      	orrs	r3, r2
 801afe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	693a      	ldr	r2, [r7, #16]
 801afee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	68fa      	ldr	r2, [r7, #12]
 801aff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801aff6:	683b      	ldr	r3, [r7, #0]
 801aff8:	685a      	ldr	r2, [r3, #4]
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	697a      	ldr	r2, [r7, #20]
 801b002:	621a      	str	r2, [r3, #32]
}
 801b004:	bf00      	nop
 801b006:	371c      	adds	r7, #28
 801b008:	46bd      	mov	sp, r7
 801b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b00e:	4770      	bx	lr
 801b010:	40010000 	.word	0x40010000

0801b014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b014:	b480      	push	{r7}
 801b016:	b087      	sub	sp, #28
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
 801b01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	6a1b      	ldr	r3, [r3, #32]
 801b022:	f023 0210 	bic.w	r2, r3, #16
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	6a1b      	ldr	r3, [r3, #32]
 801b02e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	685b      	ldr	r3, [r3, #4]
 801b034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	699b      	ldr	r3, [r3, #24]
 801b03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801b03c:	68fb      	ldr	r3, [r7, #12]
 801b03e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801b044:	68fb      	ldr	r3, [r7, #12]
 801b046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b04a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b04c:	683b      	ldr	r3, [r7, #0]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	021b      	lsls	r3, r3, #8
 801b052:	68fa      	ldr	r2, [r7, #12]
 801b054:	4313      	orrs	r3, r2
 801b056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801b058:	697b      	ldr	r3, [r7, #20]
 801b05a:	f023 0320 	bic.w	r3, r3, #32
 801b05e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801b060:	683b      	ldr	r3, [r7, #0]
 801b062:	689b      	ldr	r3, [r3, #8]
 801b064:	011b      	lsls	r3, r3, #4
 801b066:	697a      	ldr	r2, [r7, #20]
 801b068:	4313      	orrs	r3, r2
 801b06a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	4a1e      	ldr	r2, [pc, #120]	; (801b0e8 <TIM_OC2_SetConfig+0xd4>)
 801b070:	4293      	cmp	r3, r2
 801b072:	d10d      	bne.n	801b090 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801b074:	697b      	ldr	r3, [r7, #20]
 801b076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b07a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801b07c:	683b      	ldr	r3, [r7, #0]
 801b07e:	68db      	ldr	r3, [r3, #12]
 801b080:	011b      	lsls	r3, r3, #4
 801b082:	697a      	ldr	r2, [r7, #20]
 801b084:	4313      	orrs	r3, r2
 801b086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801b088:	697b      	ldr	r3, [r7, #20]
 801b08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b08e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	4a15      	ldr	r2, [pc, #84]	; (801b0e8 <TIM_OC2_SetConfig+0xd4>)
 801b094:	4293      	cmp	r3, r2
 801b096:	d113      	bne.n	801b0c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801b098:	693b      	ldr	r3, [r7, #16]
 801b09a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b09e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801b0a0:	693b      	ldr	r3, [r7, #16]
 801b0a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801b0a8:	683b      	ldr	r3, [r7, #0]
 801b0aa:	695b      	ldr	r3, [r3, #20]
 801b0ac:	009b      	lsls	r3, r3, #2
 801b0ae:	693a      	ldr	r2, [r7, #16]
 801b0b0:	4313      	orrs	r3, r2
 801b0b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	699b      	ldr	r3, [r3, #24]
 801b0b8:	009b      	lsls	r3, r3, #2
 801b0ba:	693a      	ldr	r2, [r7, #16]
 801b0bc:	4313      	orrs	r3, r2
 801b0be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	693a      	ldr	r2, [r7, #16]
 801b0c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	68fa      	ldr	r2, [r7, #12]
 801b0ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801b0cc:	683b      	ldr	r3, [r7, #0]
 801b0ce:	685a      	ldr	r2, [r3, #4]
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	697a      	ldr	r2, [r7, #20]
 801b0d8:	621a      	str	r2, [r3, #32]
}
 801b0da:	bf00      	nop
 801b0dc:	371c      	adds	r7, #28
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0e4:	4770      	bx	lr
 801b0e6:	bf00      	nop
 801b0e8:	40010000 	.word	0x40010000

0801b0ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b0ec:	b480      	push	{r7}
 801b0ee:	b087      	sub	sp, #28
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	6078      	str	r0, [r7, #4]
 801b0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	6a1b      	ldr	r3, [r3, #32]
 801b0fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	6a1b      	ldr	r3, [r3, #32]
 801b106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	685b      	ldr	r3, [r3, #4]
 801b10c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	69db      	ldr	r3, [r3, #28]
 801b112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b11a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	f023 0303 	bic.w	r3, r3, #3
 801b122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801b124:	683b      	ldr	r3, [r7, #0]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	68fa      	ldr	r2, [r7, #12]
 801b12a:	4313      	orrs	r3, r2
 801b12c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801b12e:	697b      	ldr	r3, [r7, #20]
 801b130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801b136:	683b      	ldr	r3, [r7, #0]
 801b138:	689b      	ldr	r3, [r3, #8]
 801b13a:	021b      	lsls	r3, r3, #8
 801b13c:	697a      	ldr	r2, [r7, #20]
 801b13e:	4313      	orrs	r3, r2
 801b140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	4a1d      	ldr	r2, [pc, #116]	; (801b1bc <TIM_OC3_SetConfig+0xd0>)
 801b146:	4293      	cmp	r3, r2
 801b148:	d10d      	bne.n	801b166 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801b152:	683b      	ldr	r3, [r7, #0]
 801b154:	68db      	ldr	r3, [r3, #12]
 801b156:	021b      	lsls	r3, r3, #8
 801b158:	697a      	ldr	r2, [r7, #20]
 801b15a:	4313      	orrs	r3, r2
 801b15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801b15e:	697b      	ldr	r3, [r7, #20]
 801b160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	4a14      	ldr	r2, [pc, #80]	; (801b1bc <TIM_OC3_SetConfig+0xd0>)
 801b16a:	4293      	cmp	r3, r2
 801b16c:	d113      	bne.n	801b196 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801b16e:	693b      	ldr	r3, [r7, #16]
 801b170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801b176:	693b      	ldr	r3, [r7, #16]
 801b178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801b17e:	683b      	ldr	r3, [r7, #0]
 801b180:	695b      	ldr	r3, [r3, #20]
 801b182:	011b      	lsls	r3, r3, #4
 801b184:	693a      	ldr	r2, [r7, #16]
 801b186:	4313      	orrs	r3, r2
 801b188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801b18a:	683b      	ldr	r3, [r7, #0]
 801b18c:	699b      	ldr	r3, [r3, #24]
 801b18e:	011b      	lsls	r3, r3, #4
 801b190:	693a      	ldr	r2, [r7, #16]
 801b192:	4313      	orrs	r3, r2
 801b194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	693a      	ldr	r2, [r7, #16]
 801b19a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	68fa      	ldr	r2, [r7, #12]
 801b1a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801b1a2:	683b      	ldr	r3, [r7, #0]
 801b1a4:	685a      	ldr	r2, [r3, #4]
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	697a      	ldr	r2, [r7, #20]
 801b1ae:	621a      	str	r2, [r3, #32]
}
 801b1b0:	bf00      	nop
 801b1b2:	371c      	adds	r7, #28
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1ba:	4770      	bx	lr
 801b1bc:	40010000 	.word	0x40010000

0801b1c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801b1c0:	b480      	push	{r7}
 801b1c2:	b087      	sub	sp, #28
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
 801b1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6a1b      	ldr	r3, [r3, #32]
 801b1ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	6a1b      	ldr	r3, [r3, #32]
 801b1da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	685b      	ldr	r3, [r3, #4]
 801b1e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	69db      	ldr	r3, [r3, #28]
 801b1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801b1ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801b1f0:	68fb      	ldr	r3, [r7, #12]
 801b1f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b1f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801b1f8:	683b      	ldr	r3, [r7, #0]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	021b      	lsls	r3, r3, #8
 801b1fe:	68fa      	ldr	r2, [r7, #12]
 801b200:	4313      	orrs	r3, r2
 801b202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801b204:	693b      	ldr	r3, [r7, #16]
 801b206:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801b20a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801b20c:	683b      	ldr	r3, [r7, #0]
 801b20e:	689b      	ldr	r3, [r3, #8]
 801b210:	031b      	lsls	r3, r3, #12
 801b212:	693a      	ldr	r2, [r7, #16]
 801b214:	4313      	orrs	r3, r2
 801b216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	4a10      	ldr	r2, [pc, #64]	; (801b25c <TIM_OC4_SetConfig+0x9c>)
 801b21c:	4293      	cmp	r3, r2
 801b21e:	d109      	bne.n	801b234 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801b220:	697b      	ldr	r3, [r7, #20]
 801b222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801b226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801b228:	683b      	ldr	r3, [r7, #0]
 801b22a:	695b      	ldr	r3, [r3, #20]
 801b22c:	019b      	lsls	r3, r3, #6
 801b22e:	697a      	ldr	r2, [r7, #20]
 801b230:	4313      	orrs	r3, r2
 801b232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	697a      	ldr	r2, [r7, #20]
 801b238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	68fa      	ldr	r2, [r7, #12]
 801b23e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801b240:	683b      	ldr	r3, [r7, #0]
 801b242:	685a      	ldr	r2, [r3, #4]
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	693a      	ldr	r2, [r7, #16]
 801b24c:	621a      	str	r2, [r3, #32]
}
 801b24e:	bf00      	nop
 801b250:	371c      	adds	r7, #28
 801b252:	46bd      	mov	sp, r7
 801b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b258:	4770      	bx	lr
 801b25a:	bf00      	nop
 801b25c:	40010000 	.word	0x40010000

0801b260 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801b260:	b480      	push	{r7}
 801b262:	b087      	sub	sp, #28
 801b264:	af00      	add	r7, sp, #0
 801b266:	60f8      	str	r0, [r7, #12]
 801b268:	60b9      	str	r1, [r7, #8]
 801b26a:	607a      	str	r2, [r7, #4]
 801b26c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	6a1b      	ldr	r3, [r3, #32]
 801b272:	f023 0201 	bic.w	r2, r3, #1
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b27a:	68fb      	ldr	r3, [r7, #12]
 801b27c:	699b      	ldr	r3, [r3, #24]
 801b27e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b280:	68fb      	ldr	r3, [r7, #12]
 801b282:	6a1b      	ldr	r3, [r3, #32]
 801b284:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	4a24      	ldr	r2, [pc, #144]	; (801b31c <TIM_TI1_SetConfig+0xbc>)
 801b28a:	4293      	cmp	r3, r2
 801b28c:	d013      	beq.n	801b2b6 <TIM_TI1_SetConfig+0x56>
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b294:	d00f      	beq.n	801b2b6 <TIM_TI1_SetConfig+0x56>
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	4a21      	ldr	r2, [pc, #132]	; (801b320 <TIM_TI1_SetConfig+0xc0>)
 801b29a:	4293      	cmp	r3, r2
 801b29c:	d00b      	beq.n	801b2b6 <TIM_TI1_SetConfig+0x56>
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	4a20      	ldr	r2, [pc, #128]	; (801b324 <TIM_TI1_SetConfig+0xc4>)
 801b2a2:	4293      	cmp	r3, r2
 801b2a4:	d007      	beq.n	801b2b6 <TIM_TI1_SetConfig+0x56>
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	4a1f      	ldr	r2, [pc, #124]	; (801b328 <TIM_TI1_SetConfig+0xc8>)
 801b2aa:	4293      	cmp	r3, r2
 801b2ac:	d003      	beq.n	801b2b6 <TIM_TI1_SetConfig+0x56>
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	4a1e      	ldr	r2, [pc, #120]	; (801b32c <TIM_TI1_SetConfig+0xcc>)
 801b2b2:	4293      	cmp	r3, r2
 801b2b4:	d101      	bne.n	801b2ba <TIM_TI1_SetConfig+0x5a>
 801b2b6:	2301      	movs	r3, #1
 801b2b8:	e000      	b.n	801b2bc <TIM_TI1_SetConfig+0x5c>
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d008      	beq.n	801b2d2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801b2c0:	697b      	ldr	r3, [r7, #20]
 801b2c2:	f023 0303 	bic.w	r3, r3, #3
 801b2c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801b2c8:	697a      	ldr	r2, [r7, #20]
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	4313      	orrs	r3, r2
 801b2ce:	617b      	str	r3, [r7, #20]
 801b2d0:	e003      	b.n	801b2da <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801b2d2:	697b      	ldr	r3, [r7, #20]
 801b2d4:	f043 0301 	orr.w	r3, r3, #1
 801b2d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b2da:	697b      	ldr	r3, [r7, #20]
 801b2dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b2e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801b2e2:	683b      	ldr	r3, [r7, #0]
 801b2e4:	011b      	lsls	r3, r3, #4
 801b2e6:	b2db      	uxtb	r3, r3
 801b2e8:	697a      	ldr	r2, [r7, #20]
 801b2ea:	4313      	orrs	r3, r2
 801b2ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	f023 030a 	bic.w	r3, r3, #10
 801b2f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801b2f6:	68bb      	ldr	r3, [r7, #8]
 801b2f8:	f003 030a 	and.w	r3, r3, #10
 801b2fc:	693a      	ldr	r2, [r7, #16]
 801b2fe:	4313      	orrs	r3, r2
 801b300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	697a      	ldr	r2, [r7, #20]
 801b306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	693a      	ldr	r2, [r7, #16]
 801b30c:	621a      	str	r2, [r3, #32]
}
 801b30e:	bf00      	nop
 801b310:	371c      	adds	r7, #28
 801b312:	46bd      	mov	sp, r7
 801b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b318:	4770      	bx	lr
 801b31a:	bf00      	nop
 801b31c:	40010000 	.word	0x40010000
 801b320:	40000400 	.word	0x40000400
 801b324:	40000800 	.word	0x40000800
 801b328:	40000c00 	.word	0x40000c00
 801b32c:	40014000 	.word	0x40014000

0801b330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b330:	b480      	push	{r7}
 801b332:	b087      	sub	sp, #28
 801b334:	af00      	add	r7, sp, #0
 801b336:	60f8      	str	r0, [r7, #12]
 801b338:	60b9      	str	r1, [r7, #8]
 801b33a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	6a1b      	ldr	r3, [r3, #32]
 801b340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	6a1b      	ldr	r3, [r3, #32]
 801b346:	f023 0201 	bic.w	r2, r3, #1
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	699b      	ldr	r3, [r3, #24]
 801b352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801b354:	693b      	ldr	r3, [r7, #16]
 801b356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b35a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	011b      	lsls	r3, r3, #4
 801b360:	693a      	ldr	r2, [r7, #16]
 801b362:	4313      	orrs	r3, r2
 801b364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801b366:	697b      	ldr	r3, [r7, #20]
 801b368:	f023 030a 	bic.w	r3, r3, #10
 801b36c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801b36e:	697a      	ldr	r2, [r7, #20]
 801b370:	68bb      	ldr	r3, [r7, #8]
 801b372:	4313      	orrs	r3, r2
 801b374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801b376:	68fb      	ldr	r3, [r7, #12]
 801b378:	693a      	ldr	r2, [r7, #16]
 801b37a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	697a      	ldr	r2, [r7, #20]
 801b380:	621a      	str	r2, [r3, #32]
}
 801b382:	bf00      	nop
 801b384:	371c      	adds	r7, #28
 801b386:	46bd      	mov	sp, r7
 801b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b38c:	4770      	bx	lr

0801b38e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b38e:	b480      	push	{r7}
 801b390:	b087      	sub	sp, #28
 801b392:	af00      	add	r7, sp, #0
 801b394:	60f8      	str	r0, [r7, #12]
 801b396:	60b9      	str	r1, [r7, #8]
 801b398:	607a      	str	r2, [r7, #4]
 801b39a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	6a1b      	ldr	r3, [r3, #32]
 801b3a0:	f023 0210 	bic.w	r2, r3, #16
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	699b      	ldr	r3, [r3, #24]
 801b3ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b3ae:	68fb      	ldr	r3, [r7, #12]
 801b3b0:	6a1b      	ldr	r3, [r3, #32]
 801b3b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801b3b4:	697b      	ldr	r3, [r7, #20]
 801b3b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b3ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	021b      	lsls	r3, r3, #8
 801b3c0:	697a      	ldr	r2, [r7, #20]
 801b3c2:	4313      	orrs	r3, r2
 801b3c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b3c6:	697b      	ldr	r3, [r7, #20]
 801b3c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b3cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801b3ce:	683b      	ldr	r3, [r7, #0]
 801b3d0:	031b      	lsls	r3, r3, #12
 801b3d2:	b29b      	uxth	r3, r3
 801b3d4:	697a      	ldr	r2, [r7, #20]
 801b3d6:	4313      	orrs	r3, r2
 801b3d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b3da:	693b      	ldr	r3, [r7, #16]
 801b3dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b3e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801b3e2:	68bb      	ldr	r3, [r7, #8]
 801b3e4:	011b      	lsls	r3, r3, #4
 801b3e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801b3ea:	693a      	ldr	r2, [r7, #16]
 801b3ec:	4313      	orrs	r3, r2
 801b3ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	697a      	ldr	r2, [r7, #20]
 801b3f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	693a      	ldr	r2, [r7, #16]
 801b3fa:	621a      	str	r2, [r3, #32]
}
 801b3fc:	bf00      	nop
 801b3fe:	371c      	adds	r7, #28
 801b400:	46bd      	mov	sp, r7
 801b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b406:	4770      	bx	lr

0801b408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801b408:	b480      	push	{r7}
 801b40a:	b087      	sub	sp, #28
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	60f8      	str	r0, [r7, #12]
 801b410:	60b9      	str	r1, [r7, #8]
 801b412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	6a1b      	ldr	r3, [r3, #32]
 801b418:	f023 0210 	bic.w	r2, r3, #16
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	699b      	ldr	r3, [r3, #24]
 801b424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	6a1b      	ldr	r3, [r3, #32]
 801b42a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801b42c:	697b      	ldr	r3, [r7, #20]
 801b42e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	031b      	lsls	r3, r3, #12
 801b438:	697a      	ldr	r2, [r7, #20]
 801b43a:	4313      	orrs	r3, r2
 801b43c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801b43e:	693b      	ldr	r3, [r7, #16]
 801b440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801b444:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801b446:	68bb      	ldr	r3, [r7, #8]
 801b448:	011b      	lsls	r3, r3, #4
 801b44a:	693a      	ldr	r2, [r7, #16]
 801b44c:	4313      	orrs	r3, r2
 801b44e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801b450:	68fb      	ldr	r3, [r7, #12]
 801b452:	697a      	ldr	r2, [r7, #20]
 801b454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	693a      	ldr	r2, [r7, #16]
 801b45a:	621a      	str	r2, [r3, #32]
}
 801b45c:	bf00      	nop
 801b45e:	371c      	adds	r7, #28
 801b460:	46bd      	mov	sp, r7
 801b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b466:	4770      	bx	lr

0801b468 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b468:	b480      	push	{r7}
 801b46a:	b087      	sub	sp, #28
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	60f8      	str	r0, [r7, #12]
 801b470:	60b9      	str	r1, [r7, #8]
 801b472:	607a      	str	r2, [r7, #4]
 801b474:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	6a1b      	ldr	r3, [r3, #32]
 801b47a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	69db      	ldr	r3, [r3, #28]
 801b486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	6a1b      	ldr	r3, [r3, #32]
 801b48c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 801b48e:	697b      	ldr	r3, [r7, #20]
 801b490:	f023 0303 	bic.w	r3, r3, #3
 801b494:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801b496:	697a      	ldr	r2, [r7, #20]
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	4313      	orrs	r3, r2
 801b49c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 801b49e:	697b      	ldr	r3, [r7, #20]
 801b4a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b4a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	011b      	lsls	r3, r3, #4
 801b4aa:	b2db      	uxtb	r3, r3
 801b4ac:	697a      	ldr	r2, [r7, #20]
 801b4ae:	4313      	orrs	r3, r2
 801b4b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801b4b2:	693b      	ldr	r3, [r7, #16]
 801b4b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801b4b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801b4ba:	68bb      	ldr	r3, [r7, #8]
 801b4bc:	021b      	lsls	r3, r3, #8
 801b4be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801b4c2:	693a      	ldr	r2, [r7, #16]
 801b4c4:	4313      	orrs	r3, r2
 801b4c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	697a      	ldr	r2, [r7, #20]
 801b4cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801b4ce:	68fb      	ldr	r3, [r7, #12]
 801b4d0:	693a      	ldr	r2, [r7, #16]
 801b4d2:	621a      	str	r2, [r3, #32]
}
 801b4d4:	bf00      	nop
 801b4d6:	371c      	adds	r7, #28
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4de:	4770      	bx	lr

0801b4e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801b4e0:	b480      	push	{r7}
 801b4e2:	b087      	sub	sp, #28
 801b4e4:	af00      	add	r7, sp, #0
 801b4e6:	60f8      	str	r0, [r7, #12]
 801b4e8:	60b9      	str	r1, [r7, #8]
 801b4ea:	607a      	str	r2, [r7, #4]
 801b4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	6a1b      	ldr	r3, [r3, #32]
 801b4f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801b4fa:	68fb      	ldr	r3, [r7, #12]
 801b4fc:	69db      	ldr	r3, [r3, #28]
 801b4fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	6a1b      	ldr	r3, [r3, #32]
 801b504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801b506:	697b      	ldr	r3, [r7, #20]
 801b508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b50c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	021b      	lsls	r3, r3, #8
 801b512:	697a      	ldr	r2, [r7, #20]
 801b514:	4313      	orrs	r3, r2
 801b516:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801b518:	697b      	ldr	r3, [r7, #20]
 801b51a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801b51e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801b520:	683b      	ldr	r3, [r7, #0]
 801b522:	031b      	lsls	r3, r3, #12
 801b524:	b29b      	uxth	r3, r3
 801b526:	697a      	ldr	r2, [r7, #20]
 801b528:	4313      	orrs	r3, r2
 801b52a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801b52c:	693b      	ldr	r3, [r7, #16]
 801b52e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 801b532:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	031b      	lsls	r3, r3, #12
 801b538:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801b53c:	693a      	ldr	r2, [r7, #16]
 801b53e:	4313      	orrs	r3, r2
 801b540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801b542:	68fb      	ldr	r3, [r7, #12]
 801b544:	697a      	ldr	r2, [r7, #20]
 801b546:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	693a      	ldr	r2, [r7, #16]
 801b54c:	621a      	str	r2, [r3, #32]
}
 801b54e:	bf00      	nop
 801b550:	371c      	adds	r7, #28
 801b552:	46bd      	mov	sp, r7
 801b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b558:	4770      	bx	lr

0801b55a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801b55a:	b480      	push	{r7}
 801b55c:	b085      	sub	sp, #20
 801b55e:	af00      	add	r7, sp, #0
 801b560:	6078      	str	r0, [r7, #4]
 801b562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	689b      	ldr	r3, [r3, #8]
 801b568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801b572:	683a      	ldr	r2, [r7, #0]
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	4313      	orrs	r3, r2
 801b578:	f043 0307 	orr.w	r3, r3, #7
 801b57c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	68fa      	ldr	r2, [r7, #12]
 801b582:	609a      	str	r2, [r3, #8]
}
 801b584:	bf00      	nop
 801b586:	3714      	adds	r7, #20
 801b588:	46bd      	mov	sp, r7
 801b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b58e:	4770      	bx	lr

0801b590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801b590:	b480      	push	{r7}
 801b592:	b087      	sub	sp, #28
 801b594:	af00      	add	r7, sp, #0
 801b596:	60f8      	str	r0, [r7, #12]
 801b598:	60b9      	str	r1, [r7, #8]
 801b59a:	607a      	str	r2, [r7, #4]
 801b59c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801b59e:	68fb      	ldr	r3, [r7, #12]
 801b5a0:	689b      	ldr	r3, [r3, #8]
 801b5a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801b5aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801b5ac:	683b      	ldr	r3, [r7, #0]
 801b5ae:	021a      	lsls	r2, r3, #8
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	431a      	orrs	r2, r3
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	4313      	orrs	r3, r2
 801b5b8:	697a      	ldr	r2, [r7, #20]
 801b5ba:	4313      	orrs	r3, r2
 801b5bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	697a      	ldr	r2, [r7, #20]
 801b5c2:	609a      	str	r2, [r3, #8]
}
 801b5c4:	bf00      	nop
 801b5c6:	371c      	adds	r7, #28
 801b5c8:	46bd      	mov	sp, r7
 801b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ce:	4770      	bx	lr

0801b5d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801b5d0:	b480      	push	{r7}
 801b5d2:	b087      	sub	sp, #28
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	60f8      	str	r0, [r7, #12]
 801b5d8:	60b9      	str	r1, [r7, #8]
 801b5da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801b5dc:	68bb      	ldr	r3, [r7, #8]
 801b5de:	f003 031f 	and.w	r3, r3, #31
 801b5e2:	2201      	movs	r2, #1
 801b5e4:	fa02 f303 	lsl.w	r3, r2, r3
 801b5e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801b5ea:	68fb      	ldr	r3, [r7, #12]
 801b5ec:	6a1a      	ldr	r2, [r3, #32]
 801b5ee:	697b      	ldr	r3, [r7, #20]
 801b5f0:	43db      	mvns	r3, r3
 801b5f2:	401a      	ands	r2, r3
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	6a1a      	ldr	r2, [r3, #32]
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	f003 031f 	and.w	r3, r3, #31
 801b602:	6879      	ldr	r1, [r7, #4]
 801b604:	fa01 f303 	lsl.w	r3, r1, r3
 801b608:	431a      	orrs	r2, r3
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	621a      	str	r2, [r3, #32]
}
 801b60e:	bf00      	nop
 801b610:	371c      	adds	r7, #28
 801b612:	46bd      	mov	sp, r7
 801b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b618:	4770      	bx	lr
	...

0801b61c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801b61c:	b480      	push	{r7}
 801b61e:	b085      	sub	sp, #20
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
 801b624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b62c:	2b01      	cmp	r3, #1
 801b62e:	d101      	bne.n	801b634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801b630:	2302      	movs	r3, #2
 801b632:	e050      	b.n	801b6d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	2201      	movs	r2, #1
 801b638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	2202      	movs	r2, #2
 801b640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	685b      	ldr	r3, [r3, #4]
 801b64a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	689b      	ldr	r3, [r3, #8]
 801b652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b65a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801b65c:	683b      	ldr	r3, [r7, #0]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	68fa      	ldr	r2, [r7, #12]
 801b662:	4313      	orrs	r3, r2
 801b664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	68fa      	ldr	r2, [r7, #12]
 801b66c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	4a1c      	ldr	r2, [pc, #112]	; (801b6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801b674:	4293      	cmp	r3, r2
 801b676:	d018      	beq.n	801b6aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b680:	d013      	beq.n	801b6aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	4a18      	ldr	r2, [pc, #96]	; (801b6e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801b688:	4293      	cmp	r3, r2
 801b68a:	d00e      	beq.n	801b6aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	4a16      	ldr	r2, [pc, #88]	; (801b6ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 801b692:	4293      	cmp	r3, r2
 801b694:	d009      	beq.n	801b6aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	4a15      	ldr	r2, [pc, #84]	; (801b6f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 801b69c:	4293      	cmp	r3, r2
 801b69e:	d004      	beq.n	801b6aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	4a13      	ldr	r2, [pc, #76]	; (801b6f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801b6a6:	4293      	cmp	r3, r2
 801b6a8:	d10c      	bne.n	801b6c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b6aa:	68bb      	ldr	r3, [r7, #8]
 801b6ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b6b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b6b2:	683b      	ldr	r3, [r7, #0]
 801b6b4:	685b      	ldr	r3, [r3, #4]
 801b6b6:	68ba      	ldr	r2, [r7, #8]
 801b6b8:	4313      	orrs	r3, r2
 801b6ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	68ba      	ldr	r2, [r7, #8]
 801b6c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	2201      	movs	r2, #1
 801b6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b6d4:	2300      	movs	r3, #0
}
 801b6d6:	4618      	mov	r0, r3
 801b6d8:	3714      	adds	r7, #20
 801b6da:	46bd      	mov	sp, r7
 801b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6e0:	4770      	bx	lr
 801b6e2:	bf00      	nop
 801b6e4:	40010000 	.word	0x40010000
 801b6e8:	40000400 	.word	0x40000400
 801b6ec:	40000800 	.word	0x40000800
 801b6f0:	40000c00 	.word	0x40000c00
 801b6f4:	40014000 	.word	0x40014000

0801b6f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b6f8:	b480      	push	{r7}
 801b6fa:	b083      	sub	sp, #12
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b700:	bf00      	nop
 801b702:	370c      	adds	r7, #12
 801b704:	46bd      	mov	sp, r7
 801b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b70a:	4770      	bx	lr

0801b70c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b70c:	b480      	push	{r7}
 801b70e:	b083      	sub	sp, #12
 801b710:	af00      	add	r7, sp, #0
 801b712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b714:	bf00      	nop
 801b716:	370c      	adds	r7, #12
 801b718:	46bd      	mov	sp, r7
 801b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b71e:	4770      	bx	lr

0801b720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b720:	b580      	push	{r7, lr}
 801b722:	b082      	sub	sp, #8
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d101      	bne.n	801b732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b72e:	2301      	movs	r3, #1
 801b730:	e03f      	b.n	801b7b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b738:	b2db      	uxtb	r3, r3
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d106      	bne.n	801b74c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	2200      	movs	r2, #0
 801b742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b746:	6878      	ldr	r0, [r7, #4]
 801b748:	f7fa f8ea 	bl	8015920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	2224      	movs	r2, #36	; 0x24
 801b750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	68da      	ldr	r2, [r3, #12]
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b764:	6878      	ldr	r0, [r7, #4]
 801b766:	f000 ff9b 	bl	801c6a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	691a      	ldr	r2, [r3, #16]
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	695a      	ldr	r2, [r3, #20]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	68da      	ldr	r2, [r3, #12]
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801b798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	2200      	movs	r2, #0
 801b79e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	2220      	movs	r2, #32
 801b7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2220      	movs	r2, #32
 801b7ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801b7b0:	2300      	movs	r3, #0
}
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	3708      	adds	r7, #8
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	bd80      	pop	{r7, pc}

0801b7ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b7ba:	b580      	push	{r7, lr}
 801b7bc:	b08a      	sub	sp, #40	; 0x28
 801b7be:	af02      	add	r7, sp, #8
 801b7c0:	60f8      	str	r0, [r7, #12]
 801b7c2:	60b9      	str	r1, [r7, #8]
 801b7c4:	603b      	str	r3, [r7, #0]
 801b7c6:	4613      	mov	r3, r2
 801b7c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801b7ca:	2300      	movs	r3, #0
 801b7cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801b7d4:	b2db      	uxtb	r3, r3
 801b7d6:	2b20      	cmp	r3, #32
 801b7d8:	d17c      	bne.n	801b8d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801b7da:	68bb      	ldr	r3, [r7, #8]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d002      	beq.n	801b7e6 <HAL_UART_Transmit+0x2c>
 801b7e0:	88fb      	ldrh	r3, [r7, #6]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d101      	bne.n	801b7ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801b7e6:	2301      	movs	r3, #1
 801b7e8:	e075      	b.n	801b8d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b7f0:	2b01      	cmp	r3, #1
 801b7f2:	d101      	bne.n	801b7f8 <HAL_UART_Transmit+0x3e>
 801b7f4:	2302      	movs	r3, #2
 801b7f6:	e06e      	b.n	801b8d6 <HAL_UART_Transmit+0x11c>
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	2201      	movs	r2, #1
 801b7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	2200      	movs	r2, #0
 801b804:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	2221      	movs	r2, #33	; 0x21
 801b80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b80e:	f7fa fb3f 	bl	8015e90 <HAL_GetTick>
 801b812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	88fa      	ldrh	r2, [r7, #6]
 801b818:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	88fa      	ldrh	r2, [r7, #6]
 801b81e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	689b      	ldr	r3, [r3, #8]
 801b824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b828:	d108      	bne.n	801b83c <HAL_UART_Transmit+0x82>
 801b82a:	68fb      	ldr	r3, [r7, #12]
 801b82c:	691b      	ldr	r3, [r3, #16]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d104      	bne.n	801b83c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 801b832:	2300      	movs	r3, #0
 801b834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b836:	68bb      	ldr	r3, [r7, #8]
 801b838:	61bb      	str	r3, [r7, #24]
 801b83a:	e003      	b.n	801b844 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801b83c:	68bb      	ldr	r3, [r7, #8]
 801b83e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b840:	2300      	movs	r3, #0
 801b842:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	2200      	movs	r2, #0
 801b848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 801b84c:	e02a      	b.n	801b8a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b84e:	683b      	ldr	r3, [r7, #0]
 801b850:	9300      	str	r3, [sp, #0]
 801b852:	697b      	ldr	r3, [r7, #20]
 801b854:	2200      	movs	r2, #0
 801b856:	2180      	movs	r1, #128	; 0x80
 801b858:	68f8      	ldr	r0, [r7, #12]
 801b85a:	f000 fc53 	bl	801c104 <UART_WaitOnFlagUntilTimeout>
 801b85e:	4603      	mov	r3, r0
 801b860:	2b00      	cmp	r3, #0
 801b862:	d001      	beq.n	801b868 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 801b864:	2303      	movs	r3, #3
 801b866:	e036      	b.n	801b8d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801b868:	69fb      	ldr	r3, [r7, #28]
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d10b      	bne.n	801b886 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b86e:	69bb      	ldr	r3, [r7, #24]
 801b870:	881b      	ldrh	r3, [r3, #0]
 801b872:	461a      	mov	r2, r3
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b87c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 801b87e:	69bb      	ldr	r3, [r7, #24]
 801b880:	3302      	adds	r3, #2
 801b882:	61bb      	str	r3, [r7, #24]
 801b884:	e007      	b.n	801b896 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801b886:	69fb      	ldr	r3, [r7, #28]
 801b888:	781a      	ldrb	r2, [r3, #0]
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 801b890:	69fb      	ldr	r3, [r7, #28]
 801b892:	3301      	adds	r3, #1
 801b894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b89a:	b29b      	uxth	r3, r3
 801b89c:	3b01      	subs	r3, #1
 801b89e:	b29a      	uxth	r2, r3
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 801b8a4:	68fb      	ldr	r3, [r7, #12]
 801b8a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b8a8:	b29b      	uxth	r3, r3
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d1cf      	bne.n	801b84e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b8ae:	683b      	ldr	r3, [r7, #0]
 801b8b0:	9300      	str	r3, [sp, #0]
 801b8b2:	697b      	ldr	r3, [r7, #20]
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	2140      	movs	r1, #64	; 0x40
 801b8b8:	68f8      	ldr	r0, [r7, #12]
 801b8ba:	f000 fc23 	bl	801c104 <UART_WaitOnFlagUntilTimeout>
 801b8be:	4603      	mov	r3, r0
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d001      	beq.n	801b8c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 801b8c4:	2303      	movs	r3, #3
 801b8c6:	e006      	b.n	801b8d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	2220      	movs	r2, #32
 801b8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 801b8d0:	2300      	movs	r3, #0
 801b8d2:	e000      	b.n	801b8d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 801b8d4:	2302      	movs	r3, #2
  }
}
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	3720      	adds	r7, #32
 801b8da:	46bd      	mov	sp, r7
 801b8dc:	bd80      	pop	{r7, pc}

0801b8de <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801b8de:	b580      	push	{r7, lr}
 801b8e0:	b08c      	sub	sp, #48	; 0x30
 801b8e2:	af00      	add	r7, sp, #0
 801b8e4:	60f8      	str	r0, [r7, #12]
 801b8e6:	60b9      	str	r1, [r7, #8]
 801b8e8:	4613      	mov	r3, r2
 801b8ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801b8f2:	b2db      	uxtb	r3, r3
 801b8f4:	2b20      	cmp	r3, #32
 801b8f6:	d152      	bne.n	801b99e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 801b8f8:	68bb      	ldr	r3, [r7, #8]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d002      	beq.n	801b904 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 801b8fe:	88fb      	ldrh	r3, [r7, #6]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d101      	bne.n	801b908 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801b904:	2301      	movs	r3, #1
 801b906:	e04b      	b.n	801b9a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b90e:	2b01      	cmp	r3, #1
 801b910:	d101      	bne.n	801b916 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801b912:	2302      	movs	r3, #2
 801b914:	e044      	b.n	801b9a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	2201      	movs	r2, #1
 801b91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	2201      	movs	r2, #1
 801b922:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801b924:	88fb      	ldrh	r3, [r7, #6]
 801b926:	461a      	mov	r2, r3
 801b928:	68b9      	ldr	r1, [r7, #8]
 801b92a:	68f8      	ldr	r0, [r7, #12]
 801b92c:	f000 fc58 	bl	801c1e0 <UART_Start_Receive_DMA>
 801b930:	4603      	mov	r3, r0
 801b932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801b936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d12c      	bne.n	801b998 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b942:	2b01      	cmp	r3, #1
 801b944:	d125      	bne.n	801b992 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801b946:	2300      	movs	r3, #0
 801b948:	613b      	str	r3, [r7, #16]
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	613b      	str	r3, [r7, #16]
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	685b      	ldr	r3, [r3, #4]
 801b958:	613b      	str	r3, [r7, #16]
 801b95a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	330c      	adds	r3, #12
 801b962:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b964:	69bb      	ldr	r3, [r7, #24]
 801b966:	e853 3f00 	ldrex	r3, [r3]
 801b96a:	617b      	str	r3, [r7, #20]
   return(result);
 801b96c:	697b      	ldr	r3, [r7, #20]
 801b96e:	f043 0310 	orr.w	r3, r3, #16
 801b972:	62bb      	str	r3, [r7, #40]	; 0x28
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	330c      	adds	r3, #12
 801b97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b97c:	627a      	str	r2, [r7, #36]	; 0x24
 801b97e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b980:	6a39      	ldr	r1, [r7, #32]
 801b982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b984:	e841 2300 	strex	r3, r2, [r1]
 801b988:	61fb      	str	r3, [r7, #28]
   return(result);
 801b98a:	69fb      	ldr	r3, [r7, #28]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d1e5      	bne.n	801b95c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 801b990:	e002      	b.n	801b998 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801b992:	2301      	movs	r3, #1
 801b994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801b998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b99c:	e000      	b.n	801b9a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 801b99e:	2302      	movs	r3, #2
  }
}
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	3730      	adds	r7, #48	; 0x30
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}

0801b9a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b0ba      	sub	sp, #232	; 0xe8
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	68db      	ldr	r3, [r3, #12]
 801b9c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	695b      	ldr	r3, [r3, #20]
 801b9ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801b9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b9de:	f003 030f 	and.w	r3, r3, #15
 801b9e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801b9e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d10f      	bne.n	801ba0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801b9ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b9f2:	f003 0320 	and.w	r3, r3, #32
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d009      	beq.n	801ba0e <HAL_UART_IRQHandler+0x66>
 801b9fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b9fe:	f003 0320 	and.w	r3, r3, #32
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d003      	beq.n	801ba0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801ba06:	6878      	ldr	r0, [r7, #4]
 801ba08:	f000 fd8f 	bl	801c52a <UART_Receive_IT>
      return;
 801ba0c:	e256      	b.n	801bebc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801ba0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	f000 80de 	beq.w	801bbd4 <HAL_UART_IRQHandler+0x22c>
 801ba18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ba1c:	f003 0301 	and.w	r3, r3, #1
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d106      	bne.n	801ba32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801ba24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ba28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	f000 80d1 	beq.w	801bbd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801ba32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba36:	f003 0301 	and.w	r3, r3, #1
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d00b      	beq.n	801ba56 <HAL_UART_IRQHandler+0xae>
 801ba3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ba42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d005      	beq.n	801ba56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba4e:	f043 0201 	orr.w	r2, r3, #1
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801ba56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba5a:	f003 0304 	and.w	r3, r3, #4
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d00b      	beq.n	801ba7a <HAL_UART_IRQHandler+0xd2>
 801ba62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ba66:	f003 0301 	and.w	r3, r3, #1
 801ba6a:	2b00      	cmp	r3, #0
 801ba6c:	d005      	beq.n	801ba7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801ba6e:	687b      	ldr	r3, [r7, #4]
 801ba70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba72:	f043 0202 	orr.w	r2, r3, #2
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801ba7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba7e:	f003 0302 	and.w	r3, r3, #2
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d00b      	beq.n	801ba9e <HAL_UART_IRQHandler+0xf6>
 801ba86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ba8a:	f003 0301 	and.w	r3, r3, #1
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d005      	beq.n	801ba9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ba96:	f043 0204 	orr.w	r2, r3, #4
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801ba9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801baa2:	f003 0308 	and.w	r3, r3, #8
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d011      	beq.n	801bace <HAL_UART_IRQHandler+0x126>
 801baaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801baae:	f003 0320 	and.w	r3, r3, #32
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d105      	bne.n	801bac2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801bab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801baba:	f003 0301 	and.w	r3, r3, #1
 801babe:	2b00      	cmp	r3, #0
 801bac0:	d005      	beq.n	801bace <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bac6:	f043 0208 	orr.w	r2, r3, #8
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	f000 81ed 	beq.w	801beb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801bad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801badc:	f003 0320 	and.w	r3, r3, #32
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d008      	beq.n	801baf6 <HAL_UART_IRQHandler+0x14e>
 801bae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bae8:	f003 0320 	and.w	r3, r3, #32
 801baec:	2b00      	cmp	r3, #0
 801baee:	d002      	beq.n	801baf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801baf0:	6878      	ldr	r0, [r7, #4]
 801baf2:	f000 fd1a 	bl	801c52a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	695b      	ldr	r3, [r3, #20]
 801bafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bb00:	2b40      	cmp	r3, #64	; 0x40
 801bb02:	bf0c      	ite	eq
 801bb04:	2301      	moveq	r3, #1
 801bb06:	2300      	movne	r3, #0
 801bb08:	b2db      	uxtb	r3, r3
 801bb0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb12:	f003 0308 	and.w	r3, r3, #8
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d103      	bne.n	801bb22 <HAL_UART_IRQHandler+0x17a>
 801bb1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d04f      	beq.n	801bbc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801bb22:	6878      	ldr	r0, [r7, #4]
 801bb24:	f000 fc22 	bl	801c36c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	695b      	ldr	r3, [r3, #20]
 801bb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bb32:	2b40      	cmp	r3, #64	; 0x40
 801bb34:	d141      	bne.n	801bbba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	681b      	ldr	r3, [r3, #0]
 801bb3a:	3314      	adds	r3, #20
 801bb3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801bb44:	e853 3f00 	ldrex	r3, [r3]
 801bb48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801bb4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801bb50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bb54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	3314      	adds	r3, #20
 801bb5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801bb62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801bb66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801bb6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801bb72:	e841 2300 	strex	r3, r2, [r1]
 801bb76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801bb7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d1d9      	bne.n	801bb36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d013      	beq.n	801bbb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb8e:	4a7d      	ldr	r2, [pc, #500]	; (801bd84 <HAL_UART_IRQHandler+0x3dc>)
 801bb90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb96:	4618      	mov	r0, r3
 801bb98:	f7fa fc32 	bl	8016400 <HAL_DMA_Abort_IT>
 801bb9c:	4603      	mov	r3, r0
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d016      	beq.n	801bbd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bba8:	687a      	ldr	r2, [r7, #4]
 801bbaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801bbac:	4610      	mov	r0, r2
 801bbae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bbb0:	e00e      	b.n	801bbd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801bbb2:	6878      	ldr	r0, [r7, #4]
 801bbb4:	f000 f9a4 	bl	801bf00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bbb8:	e00a      	b.n	801bbd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801bbba:	6878      	ldr	r0, [r7, #4]
 801bbbc:	f000 f9a0 	bl	801bf00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bbc0:	e006      	b.n	801bbd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801bbc2:	6878      	ldr	r0, [r7, #4]
 801bbc4:	f000 f99c 	bl	801bf00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	2200      	movs	r2, #0
 801bbcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 801bbce:	e170      	b.n	801beb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bbd0:	bf00      	nop
    return;
 801bbd2:	e16e      	b.n	801beb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbd8:	2b01      	cmp	r3, #1
 801bbda:	f040 814a 	bne.w	801be72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801bbde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbe2:	f003 0310 	and.w	r3, r3, #16
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	f000 8143 	beq.w	801be72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801bbec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bbf0:	f003 0310 	and.w	r3, r3, #16
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	f000 813c 	beq.w	801be72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	60bb      	str	r3, [r7, #8]
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	60bb      	str	r3, [r7, #8]
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	685b      	ldr	r3, [r3, #4]
 801bc0c:	60bb      	str	r3, [r7, #8]
 801bc0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	681b      	ldr	r3, [r3, #0]
 801bc14:	695b      	ldr	r3, [r3, #20]
 801bc16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bc1a:	2b40      	cmp	r3, #64	; 0x40
 801bc1c:	f040 80b4 	bne.w	801bd88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	685b      	ldr	r3, [r3, #4]
 801bc28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801bc2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	f000 8140 	beq.w	801beb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801bc3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bc3e:	429a      	cmp	r2, r3
 801bc40:	f080 8139 	bcs.w	801beb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801bc4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc50:	69db      	ldr	r3, [r3, #28]
 801bc52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bc56:	f000 8088 	beq.w	801bd6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	330c      	adds	r3, #12
 801bc60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bc64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bc68:	e853 3f00 	ldrex	r3, [r3]
 801bc6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801bc70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bc74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bc78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	330c      	adds	r3, #12
 801bc82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801bc86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801bc8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bc8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801bc92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bc96:	e841 2300 	strex	r3, r2, [r1]
 801bc9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801bc9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d1d9      	bne.n	801bc5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	3314      	adds	r3, #20
 801bcac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bcae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bcb0:	e853 3f00 	ldrex	r3, [r3]
 801bcb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801bcb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bcb8:	f023 0301 	bic.w	r3, r3, #1
 801bcbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	3314      	adds	r3, #20
 801bcc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801bcca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801bcce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bcd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801bcd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801bcd6:	e841 2300 	strex	r3, r2, [r1]
 801bcda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801bcdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d1e1      	bne.n	801bca6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	3314      	adds	r3, #20
 801bce8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bcea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bcec:	e853 3f00 	ldrex	r3, [r3]
 801bcf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801bcf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bcf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bcf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	681b      	ldr	r3, [r3, #0]
 801bd00:	3314      	adds	r3, #20
 801bd02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801bd06:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bd08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801bd0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801bd0e:	e841 2300 	strex	r3, r2, [r1]
 801bd12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801bd14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d1e3      	bne.n	801bce2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	2220      	movs	r2, #32
 801bd1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	2200      	movs	r2, #0
 801bd26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	330c      	adds	r3, #12
 801bd2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd32:	e853 3f00 	ldrex	r3, [r3]
 801bd36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801bd38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bd3a:	f023 0310 	bic.w	r3, r3, #16
 801bd3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	330c      	adds	r3, #12
 801bd48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801bd4c:	65ba      	str	r2, [r7, #88]	; 0x58
 801bd4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bd52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bd54:	e841 2300 	strex	r3, r2, [r1]
 801bd58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801bd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d1e3      	bne.n	801bd28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd64:	4618      	mov	r0, r3
 801bd66:	f7fa fadb 	bl	8016320 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bd72:	b29b      	uxth	r3, r3
 801bd74:	1ad3      	subs	r3, r2, r3
 801bd76:	b29b      	uxth	r3, r3
 801bd78:	4619      	mov	r1, r3
 801bd7a:	6878      	ldr	r0, [r7, #4]
 801bd7c:	f7e5 f8f6 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801bd80:	e099      	b.n	801beb6 <HAL_UART_IRQHandler+0x50e>
 801bd82:	bf00      	nop
 801bd84:	0801c433 	.word	0x0801c433
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bd90:	b29b      	uxth	r3, r3
 801bd92:	1ad3      	subs	r3, r2, r3
 801bd94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801bd9c:	b29b      	uxth	r3, r3
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	f000 808b 	beq.w	801beba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801bda4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	f000 8086 	beq.w	801beba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	330c      	adds	r3, #12
 801bdb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bdb8:	e853 3f00 	ldrex	r3, [r3]
 801bdbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801bdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801bdc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	330c      	adds	r3, #12
 801bdce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801bdd2:	647a      	str	r2, [r7, #68]	; 0x44
 801bdd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bdd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bdda:	e841 2300 	strex	r3, r2, [r1]
 801bdde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bde0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d1e3      	bne.n	801bdae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	3314      	adds	r3, #20
 801bdec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdf0:	e853 3f00 	ldrex	r3, [r3]
 801bdf4:	623b      	str	r3, [r7, #32]
   return(result);
 801bdf6:	6a3b      	ldr	r3, [r7, #32]
 801bdf8:	f023 0301 	bic.w	r3, r3, #1
 801bdfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	3314      	adds	r3, #20
 801be06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801be0a:	633a      	str	r2, [r7, #48]	; 0x30
 801be0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801be10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801be12:	e841 2300 	strex	r3, r2, [r1]
 801be16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d1e3      	bne.n	801bde6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	2220      	movs	r2, #32
 801be22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	2200      	movs	r2, #0
 801be2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	330c      	adds	r3, #12
 801be32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be34:	693b      	ldr	r3, [r7, #16]
 801be36:	e853 3f00 	ldrex	r3, [r3]
 801be3a:	60fb      	str	r3, [r7, #12]
   return(result);
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	f023 0310 	bic.w	r3, r3, #16
 801be42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	330c      	adds	r3, #12
 801be4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801be50:	61fa      	str	r2, [r7, #28]
 801be52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be54:	69b9      	ldr	r1, [r7, #24]
 801be56:	69fa      	ldr	r2, [r7, #28]
 801be58:	e841 2300 	strex	r3, r2, [r1]
 801be5c:	617b      	str	r3, [r7, #20]
   return(result);
 801be5e:	697b      	ldr	r3, [r7, #20]
 801be60:	2b00      	cmp	r3, #0
 801be62:	d1e3      	bne.n	801be2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801be64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801be68:	4619      	mov	r1, r3
 801be6a:	6878      	ldr	r0, [r7, #4]
 801be6c:	f7e5 f87e 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801be70:	e023      	b.n	801beba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801be72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801be76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d009      	beq.n	801be92 <HAL_UART_IRQHandler+0x4ea>
 801be7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801be82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801be86:	2b00      	cmp	r3, #0
 801be88:	d003      	beq.n	801be92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 801be8a:	6878      	ldr	r0, [r7, #4]
 801be8c:	f000 fae5 	bl	801c45a <UART_Transmit_IT>
    return;
 801be90:	e014      	b.n	801bebc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801be92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801be96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d00e      	beq.n	801bebc <HAL_UART_IRQHandler+0x514>
 801be9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d008      	beq.n	801bebc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 801beaa:	6878      	ldr	r0, [r7, #4]
 801beac:	f000 fb25 	bl	801c4fa <UART_EndTransmit_IT>
    return;
 801beb0:	e004      	b.n	801bebc <HAL_UART_IRQHandler+0x514>
    return;
 801beb2:	bf00      	nop
 801beb4:	e002      	b.n	801bebc <HAL_UART_IRQHandler+0x514>
      return;
 801beb6:	bf00      	nop
 801beb8:	e000      	b.n	801bebc <HAL_UART_IRQHandler+0x514>
      return;
 801beba:	bf00      	nop
  }
}
 801bebc:	37e8      	adds	r7, #232	; 0xe8
 801bebe:	46bd      	mov	sp, r7
 801bec0:	bd80      	pop	{r7, pc}
 801bec2:	bf00      	nop

0801bec4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bec4:	b480      	push	{r7}
 801bec6:	b083      	sub	sp, #12
 801bec8:	af00      	add	r7, sp, #0
 801beca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801becc:	bf00      	nop
 801bece:	370c      	adds	r7, #12
 801bed0:	46bd      	mov	sp, r7
 801bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed6:	4770      	bx	lr

0801bed8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801bed8:	b480      	push	{r7}
 801beda:	b083      	sub	sp, #12
 801bedc:	af00      	add	r7, sp, #0
 801bede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 801bee0:	bf00      	nop
 801bee2:	370c      	adds	r7, #12
 801bee4:	46bd      	mov	sp, r7
 801bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beea:	4770      	bx	lr

0801beec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801beec:	b480      	push	{r7}
 801beee:	b083      	sub	sp, #12
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801bef4:	bf00      	nop
 801bef6:	370c      	adds	r7, #12
 801bef8:	46bd      	mov	sp, r7
 801befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801befe:	4770      	bx	lr

0801bf00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801bf00:	b480      	push	{r7}
 801bf02:	b083      	sub	sp, #12
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801bf08:	bf00      	nop
 801bf0a:	370c      	adds	r7, #12
 801bf0c:	46bd      	mov	sp, r7
 801bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf12:	4770      	bx	lr

0801bf14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801bf14:	b580      	push	{r7, lr}
 801bf16:	b09c      	sub	sp, #112	; 0x70
 801bf18:	af00      	add	r7, sp, #0
 801bf1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf20:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d172      	bne.n	801c016 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 801bf30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf32:	2200      	movs	r2, #0
 801bf34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801bf36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	330c      	adds	r3, #12
 801bf3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf40:	e853 3f00 	ldrex	r3, [r3]
 801bf44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801bf46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bf48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bf4c:	66bb      	str	r3, [r7, #104]	; 0x68
 801bf4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	330c      	adds	r3, #12
 801bf54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bf56:	65ba      	str	r2, [r7, #88]	; 0x58
 801bf58:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bf5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bf5e:	e841 2300 	strex	r3, r2, [r1]
 801bf62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801bf64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d1e5      	bne.n	801bf36 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bf6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	3314      	adds	r3, #20
 801bf70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf74:	e853 3f00 	ldrex	r3, [r3]
 801bf78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801bf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf7c:	f023 0301 	bic.w	r3, r3, #1
 801bf80:	667b      	str	r3, [r7, #100]	; 0x64
 801bf82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	3314      	adds	r3, #20
 801bf88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801bf8a:	647a      	str	r2, [r7, #68]	; 0x44
 801bf8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bf90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bf92:	e841 2300 	strex	r3, r2, [r1]
 801bf96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d1e5      	bne.n	801bf6a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bf9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	3314      	adds	r3, #20
 801bfa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfa8:	e853 3f00 	ldrex	r3, [r3]
 801bfac:	623b      	str	r3, [r7, #32]
   return(result);
 801bfae:	6a3b      	ldr	r3, [r7, #32]
 801bfb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bfb4:	663b      	str	r3, [r7, #96]	; 0x60
 801bfb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	3314      	adds	r3, #20
 801bfbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bfbe:	633a      	str	r2, [r7, #48]	; 0x30
 801bfc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bfc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bfc6:	e841 2300 	strex	r3, r2, [r1]
 801bfca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d1e5      	bne.n	801bf9e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801bfd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfd4:	2220      	movs	r2, #32
 801bfd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801bfda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfde:	2b01      	cmp	r3, #1
 801bfe0:	d119      	bne.n	801c016 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bfe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	330c      	adds	r3, #12
 801bfe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfea:	693b      	ldr	r3, [r7, #16]
 801bfec:	e853 3f00 	ldrex	r3, [r3]
 801bff0:	60fb      	str	r3, [r7, #12]
   return(result);
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	f023 0310 	bic.w	r3, r3, #16
 801bff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	330c      	adds	r3, #12
 801c000:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c002:	61fa      	str	r2, [r7, #28]
 801c004:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c006:	69b9      	ldr	r1, [r7, #24]
 801c008:	69fa      	ldr	r2, [r7, #28]
 801c00a:	e841 2300 	strex	r3, r2, [r1]
 801c00e:	617b      	str	r3, [r7, #20]
   return(result);
 801c010:	697b      	ldr	r3, [r7, #20]
 801c012:	2b00      	cmp	r3, #0
 801c014:	d1e5      	bne.n	801bfe2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c01a:	2b01      	cmp	r3, #1
 801c01c:	d106      	bne.n	801c02c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c022:	4619      	mov	r1, r3
 801c024:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c026:	f7e4 ffa1 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c02a:	e002      	b.n	801c032 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801c02c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801c02e:	f7ff ff53 	bl	801bed8 <HAL_UART_RxCpltCallback>
}
 801c032:	bf00      	nop
 801c034:	3770      	adds	r7, #112	; 0x70
 801c036:	46bd      	mov	sp, r7
 801c038:	bd80      	pop	{r7, pc}

0801c03a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c03a:	b580      	push	{r7, lr}
 801c03c:	b084      	sub	sp, #16
 801c03e:	af00      	add	r7, sp, #0
 801c040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c046:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c04c:	2b01      	cmp	r3, #1
 801c04e:	d108      	bne.n	801c062 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c054:	085b      	lsrs	r3, r3, #1
 801c056:	b29b      	uxth	r3, r3
 801c058:	4619      	mov	r1, r3
 801c05a:	68f8      	ldr	r0, [r7, #12]
 801c05c:	f7e4 ff86 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c060:	e002      	b.n	801c068 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 801c062:	68f8      	ldr	r0, [r7, #12]
 801c064:	f7ff ff42 	bl	801beec <HAL_UART_RxHalfCpltCallback>
}
 801c068:	bf00      	nop
 801c06a:	3710      	adds	r7, #16
 801c06c:	46bd      	mov	sp, r7
 801c06e:	bd80      	pop	{r7, pc}

0801c070 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c070:	b580      	push	{r7, lr}
 801c072:	b084      	sub	sp, #16
 801c074:	af00      	add	r7, sp, #0
 801c076:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801c078:	2300      	movs	r3, #0
 801c07a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c080:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801c082:	68bb      	ldr	r3, [r7, #8]
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	695b      	ldr	r3, [r3, #20]
 801c088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c08c:	2b80      	cmp	r3, #128	; 0x80
 801c08e:	bf0c      	ite	eq
 801c090:	2301      	moveq	r3, #1
 801c092:	2300      	movne	r3, #0
 801c094:	b2db      	uxtb	r3, r3
 801c096:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801c098:	68bb      	ldr	r3, [r7, #8]
 801c09a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c09e:	b2db      	uxtb	r3, r3
 801c0a0:	2b21      	cmp	r3, #33	; 0x21
 801c0a2:	d108      	bne.n	801c0b6 <UART_DMAError+0x46>
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d005      	beq.n	801c0b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801c0aa:	68bb      	ldr	r3, [r7, #8]
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801c0b0:	68b8      	ldr	r0, [r7, #8]
 801c0b2:	f000 f933 	bl	801c31c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801c0b6:	68bb      	ldr	r3, [r7, #8]
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	695b      	ldr	r3, [r3, #20]
 801c0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c0c0:	2b40      	cmp	r3, #64	; 0x40
 801c0c2:	bf0c      	ite	eq
 801c0c4:	2301      	moveq	r3, #1
 801c0c6:	2300      	movne	r3, #0
 801c0c8:	b2db      	uxtb	r3, r3
 801c0ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801c0cc:	68bb      	ldr	r3, [r7, #8]
 801c0ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c0d2:	b2db      	uxtb	r3, r3
 801c0d4:	2b22      	cmp	r3, #34	; 0x22
 801c0d6:	d108      	bne.n	801c0ea <UART_DMAError+0x7a>
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	d005      	beq.n	801c0ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801c0de:	68bb      	ldr	r3, [r7, #8]
 801c0e0:	2200      	movs	r2, #0
 801c0e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801c0e4:	68b8      	ldr	r0, [r7, #8]
 801c0e6:	f000 f941 	bl	801c36c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c0ea:	68bb      	ldr	r3, [r7, #8]
 801c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0ee:	f043 0210 	orr.w	r2, r3, #16
 801c0f2:	68bb      	ldr	r3, [r7, #8]
 801c0f4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c0f6:	68b8      	ldr	r0, [r7, #8]
 801c0f8:	f7ff ff02 	bl	801bf00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c0fc:	bf00      	nop
 801c0fe:	3710      	adds	r7, #16
 801c100:	46bd      	mov	sp, r7
 801c102:	bd80      	pop	{r7, pc}

0801c104 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801c104:	b580      	push	{r7, lr}
 801c106:	b090      	sub	sp, #64	; 0x40
 801c108:	af00      	add	r7, sp, #0
 801c10a:	60f8      	str	r0, [r7, #12]
 801c10c:	60b9      	str	r1, [r7, #8]
 801c10e:	603b      	str	r3, [r7, #0]
 801c110:	4613      	mov	r3, r2
 801c112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c114:	e050      	b.n	801c1b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c11c:	d04c      	beq.n	801c1b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801c11e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c120:	2b00      	cmp	r3, #0
 801c122:	d007      	beq.n	801c134 <UART_WaitOnFlagUntilTimeout+0x30>
 801c124:	f7f9 feb4 	bl	8015e90 <HAL_GetTick>
 801c128:	4602      	mov	r2, r0
 801c12a:	683b      	ldr	r3, [r7, #0]
 801c12c:	1ad3      	subs	r3, r2, r3
 801c12e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c130:	429a      	cmp	r2, r3
 801c132:	d241      	bcs.n	801c1b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	330c      	adds	r3, #12
 801c13a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c13e:	e853 3f00 	ldrex	r3, [r3]
 801c142:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c146:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	330c      	adds	r3, #12
 801c152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c154:	637a      	str	r2, [r7, #52]	; 0x34
 801c156:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c15a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c15c:	e841 2300 	strex	r3, r2, [r1]
 801c160:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c164:	2b00      	cmp	r3, #0
 801c166:	d1e5      	bne.n	801c134 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	3314      	adds	r3, #20
 801c16e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c170:	697b      	ldr	r3, [r7, #20]
 801c172:	e853 3f00 	ldrex	r3, [r3]
 801c176:	613b      	str	r3, [r7, #16]
   return(result);
 801c178:	693b      	ldr	r3, [r7, #16]
 801c17a:	f023 0301 	bic.w	r3, r3, #1
 801c17e:	63bb      	str	r3, [r7, #56]	; 0x38
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	3314      	adds	r3, #20
 801c186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c188:	623a      	str	r2, [r7, #32]
 801c18a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c18c:	69f9      	ldr	r1, [r7, #28]
 801c18e:	6a3a      	ldr	r2, [r7, #32]
 801c190:	e841 2300 	strex	r3, r2, [r1]
 801c194:	61bb      	str	r3, [r7, #24]
   return(result);
 801c196:	69bb      	ldr	r3, [r7, #24]
 801c198:	2b00      	cmp	r3, #0
 801c19a:	d1e5      	bne.n	801c168 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	2220      	movs	r2, #32
 801c1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801c1a4:	68fb      	ldr	r3, [r7, #12]
 801c1a6:	2220      	movs	r2, #32
 801c1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 801c1b4:	2303      	movs	r3, #3
 801c1b6:	e00f      	b.n	801c1d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	681a      	ldr	r2, [r3, #0]
 801c1be:	68bb      	ldr	r3, [r7, #8]
 801c1c0:	4013      	ands	r3, r2
 801c1c2:	68ba      	ldr	r2, [r7, #8]
 801c1c4:	429a      	cmp	r2, r3
 801c1c6:	bf0c      	ite	eq
 801c1c8:	2301      	moveq	r3, #1
 801c1ca:	2300      	movne	r3, #0
 801c1cc:	b2db      	uxtb	r3, r3
 801c1ce:	461a      	mov	r2, r3
 801c1d0:	79fb      	ldrb	r3, [r7, #7]
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	d09f      	beq.n	801c116 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c1d6:	2300      	movs	r3, #0
}
 801c1d8:	4618      	mov	r0, r3
 801c1da:	3740      	adds	r7, #64	; 0x40
 801c1dc:	46bd      	mov	sp, r7
 801c1de:	bd80      	pop	{r7, pc}

0801c1e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	b098      	sub	sp, #96	; 0x60
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	60f8      	str	r0, [r7, #12]
 801c1e8:	60b9      	str	r1, [r7, #8]
 801c1ea:	4613      	mov	r3, r2
 801c1ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801c1ee:	68ba      	ldr	r2, [r7, #8]
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	88fa      	ldrh	r2, [r7, #6]
 801c1f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c200:	68fb      	ldr	r3, [r7, #12]
 801c202:	2222      	movs	r2, #34	; 0x22
 801c204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c20c:	4a40      	ldr	r2, [pc, #256]	; (801c310 <UART_Start_Receive_DMA+0x130>)
 801c20e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801c210:	68fb      	ldr	r3, [r7, #12]
 801c212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c214:	4a3f      	ldr	r2, [pc, #252]	; (801c314 <UART_Start_Receive_DMA+0x134>)
 801c216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c21c:	4a3e      	ldr	r2, [pc, #248]	; (801c318 <UART_Start_Receive_DMA+0x138>)
 801c21e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c224:	2200      	movs	r2, #0
 801c226:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801c228:	f107 0308 	add.w	r3, r7, #8
 801c22c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	3304      	adds	r3, #4
 801c238:	4619      	mov	r1, r3
 801c23a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801c23c:	681a      	ldr	r2, [r3, #0]
 801c23e:	88fb      	ldrh	r3, [r7, #6]
 801c240:	f7fa f816 	bl	8016270 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801c244:	2300      	movs	r3, #0
 801c246:	613b      	str	r3, [r7, #16]
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	613b      	str	r3, [r7, #16]
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	685b      	ldr	r3, [r3, #4]
 801c256:	613b      	str	r3, [r7, #16]
 801c258:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	2200      	movs	r2, #0
 801c25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 801c262:	68fb      	ldr	r3, [r7, #12]
 801c264:	691b      	ldr	r3, [r3, #16]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d019      	beq.n	801c29e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	681b      	ldr	r3, [r3, #0]
 801c26e:	330c      	adds	r3, #12
 801c270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c274:	e853 3f00 	ldrex	r3, [r3]
 801c278:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c27c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c280:	65bb      	str	r3, [r7, #88]	; 0x58
 801c282:	68fb      	ldr	r3, [r7, #12]
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	330c      	adds	r3, #12
 801c288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c28a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801c28c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c28e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801c290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c292:	e841 2300 	strex	r3, r2, [r1]
 801c296:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801c298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d1e5      	bne.n	801c26a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	3314      	adds	r3, #20
 801c2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2a8:	e853 3f00 	ldrex	r3, [r3]
 801c2ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2b0:	f043 0301 	orr.w	r3, r3, #1
 801c2b4:	657b      	str	r3, [r7, #84]	; 0x54
 801c2b6:	68fb      	ldr	r3, [r7, #12]
 801c2b8:	681b      	ldr	r3, [r3, #0]
 801c2ba:	3314      	adds	r3, #20
 801c2bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c2be:	63ba      	str	r2, [r7, #56]	; 0x38
 801c2c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c2c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c2c6:	e841 2300 	strex	r3, r2, [r1]
 801c2ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d1e5      	bne.n	801c29e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	3314      	adds	r3, #20
 801c2d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2da:	69bb      	ldr	r3, [r7, #24]
 801c2dc:	e853 3f00 	ldrex	r3, [r3]
 801c2e0:	617b      	str	r3, [r7, #20]
   return(result);
 801c2e2:	697b      	ldr	r3, [r7, #20]
 801c2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c2e8:	653b      	str	r3, [r7, #80]	; 0x50
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	3314      	adds	r3, #20
 801c2f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c2f2:	627a      	str	r2, [r7, #36]	; 0x24
 801c2f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2f6:	6a39      	ldr	r1, [r7, #32]
 801c2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c2fa:	e841 2300 	strex	r3, r2, [r1]
 801c2fe:	61fb      	str	r3, [r7, #28]
   return(result);
 801c300:	69fb      	ldr	r3, [r7, #28]
 801c302:	2b00      	cmp	r3, #0
 801c304:	d1e5      	bne.n	801c2d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 801c306:	2300      	movs	r3, #0
}
 801c308:	4618      	mov	r0, r3
 801c30a:	3760      	adds	r7, #96	; 0x60
 801c30c:	46bd      	mov	sp, r7
 801c30e:	bd80      	pop	{r7, pc}
 801c310:	0801bf15 	.word	0x0801bf15
 801c314:	0801c03b 	.word	0x0801c03b
 801c318:	0801c071 	.word	0x0801c071

0801c31c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c31c:	b480      	push	{r7}
 801c31e:	b089      	sub	sp, #36	; 0x24
 801c320:	af00      	add	r7, sp, #0
 801c322:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	330c      	adds	r3, #12
 801c32a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	e853 3f00 	ldrex	r3, [r3]
 801c332:	60bb      	str	r3, [r7, #8]
   return(result);
 801c334:	68bb      	ldr	r3, [r7, #8]
 801c336:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801c33a:	61fb      	str	r3, [r7, #28]
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	330c      	adds	r3, #12
 801c342:	69fa      	ldr	r2, [r7, #28]
 801c344:	61ba      	str	r2, [r7, #24]
 801c346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c348:	6979      	ldr	r1, [r7, #20]
 801c34a:	69ba      	ldr	r2, [r7, #24]
 801c34c:	e841 2300 	strex	r3, r2, [r1]
 801c350:	613b      	str	r3, [r7, #16]
   return(result);
 801c352:	693b      	ldr	r3, [r7, #16]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d1e5      	bne.n	801c324 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	2220      	movs	r2, #32
 801c35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801c360:	bf00      	nop
 801c362:	3724      	adds	r7, #36	; 0x24
 801c364:	46bd      	mov	sp, r7
 801c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c36a:	4770      	bx	lr

0801c36c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c36c:	b480      	push	{r7}
 801c36e:	b095      	sub	sp, #84	; 0x54
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c374:	687b      	ldr	r3, [r7, #4]
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	330c      	adds	r3, #12
 801c37a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c37e:	e853 3f00 	ldrex	r3, [r3]
 801c382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c38a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	330c      	adds	r3, #12
 801c392:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c394:	643a      	str	r2, [r7, #64]	; 0x40
 801c396:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c39a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c39c:	e841 2300 	strex	r3, r2, [r1]
 801c3a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d1e5      	bne.n	801c374 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	3314      	adds	r3, #20
 801c3ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3b0:	6a3b      	ldr	r3, [r7, #32]
 801c3b2:	e853 3f00 	ldrex	r3, [r3]
 801c3b6:	61fb      	str	r3, [r7, #28]
   return(result);
 801c3b8:	69fb      	ldr	r3, [r7, #28]
 801c3ba:	f023 0301 	bic.w	r3, r3, #1
 801c3be:	64bb      	str	r3, [r7, #72]	; 0x48
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	3314      	adds	r3, #20
 801c3c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c3c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c3ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c3ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c3d0:	e841 2300 	strex	r3, r2, [r1]
 801c3d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d1e5      	bne.n	801c3a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c3e0:	2b01      	cmp	r3, #1
 801c3e2:	d119      	bne.n	801c418 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	330c      	adds	r3, #12
 801c3ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	e853 3f00 	ldrex	r3, [r3]
 801c3f2:	60bb      	str	r3, [r7, #8]
   return(result);
 801c3f4:	68bb      	ldr	r3, [r7, #8]
 801c3f6:	f023 0310 	bic.w	r3, r3, #16
 801c3fa:	647b      	str	r3, [r7, #68]	; 0x44
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	330c      	adds	r3, #12
 801c402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c404:	61ba      	str	r2, [r7, #24]
 801c406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c408:	6979      	ldr	r1, [r7, #20]
 801c40a:	69ba      	ldr	r2, [r7, #24]
 801c40c:	e841 2300 	strex	r3, r2, [r1]
 801c410:	613b      	str	r3, [r7, #16]
   return(result);
 801c412:	693b      	ldr	r3, [r7, #16]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d1e5      	bne.n	801c3e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	2220      	movs	r2, #32
 801c41c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	2200      	movs	r2, #0
 801c424:	631a      	str	r2, [r3, #48]	; 0x30
}
 801c426:	bf00      	nop
 801c428:	3754      	adds	r7, #84	; 0x54
 801c42a:	46bd      	mov	sp, r7
 801c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c430:	4770      	bx	lr

0801c432 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c432:	b580      	push	{r7, lr}
 801c434:	b084      	sub	sp, #16
 801c436:	af00      	add	r7, sp, #0
 801c438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c43e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	2200      	movs	r2, #0
 801c444:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	2200      	movs	r2, #0
 801c44a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801c44c:	68f8      	ldr	r0, [r7, #12]
 801c44e:	f7ff fd57 	bl	801bf00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c452:	bf00      	nop
 801c454:	3710      	adds	r7, #16
 801c456:	46bd      	mov	sp, r7
 801c458:	bd80      	pop	{r7, pc}

0801c45a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801c45a:	b480      	push	{r7}
 801c45c:	b085      	sub	sp, #20
 801c45e:	af00      	add	r7, sp, #0
 801c460:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801c468:	b2db      	uxtb	r3, r3
 801c46a:	2b21      	cmp	r3, #33	; 0x21
 801c46c:	d13e      	bne.n	801c4ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	689b      	ldr	r3, [r3, #8]
 801c472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c476:	d114      	bne.n	801c4a2 <UART_Transmit_IT+0x48>
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	691b      	ldr	r3, [r3, #16]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d110      	bne.n	801c4a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	6a1b      	ldr	r3, [r3, #32]
 801c484:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	881b      	ldrh	r3, [r3, #0]
 801c48a:	461a      	mov	r2, r3
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801c494:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	6a1b      	ldr	r3, [r3, #32]
 801c49a:	1c9a      	adds	r2, r3, #2
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	621a      	str	r2, [r3, #32]
 801c4a0:	e008      	b.n	801c4b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	6a1b      	ldr	r3, [r3, #32]
 801c4a6:	1c59      	adds	r1, r3, #1
 801c4a8:	687a      	ldr	r2, [r7, #4]
 801c4aa:	6211      	str	r1, [r2, #32]
 801c4ac:	781a      	ldrb	r2, [r3, #0]
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801c4b8:	b29b      	uxth	r3, r3
 801c4ba:	3b01      	subs	r3, #1
 801c4bc:	b29b      	uxth	r3, r3
 801c4be:	687a      	ldr	r2, [r7, #4]
 801c4c0:	4619      	mov	r1, r3
 801c4c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	d10f      	bne.n	801c4e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	68da      	ldr	r2, [r3, #12]
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c4d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	68da      	ldr	r2, [r3, #12]
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c4e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	e000      	b.n	801c4ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801c4ec:	2302      	movs	r3, #2
  }
}
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	3714      	adds	r7, #20
 801c4f2:	46bd      	mov	sp, r7
 801c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4f8:	4770      	bx	lr

0801c4fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c4fa:	b580      	push	{r7, lr}
 801c4fc:	b082      	sub	sp, #8
 801c4fe:	af00      	add	r7, sp, #0
 801c500:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	68da      	ldr	r2, [r3, #12]
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	681b      	ldr	r3, [r3, #0]
 801c50c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c510:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	2220      	movs	r2, #32
 801c516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f7ff fcd2 	bl	801bec4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801c520:	2300      	movs	r3, #0
}
 801c522:	4618      	mov	r0, r3
 801c524:	3708      	adds	r7, #8
 801c526:	46bd      	mov	sp, r7
 801c528:	bd80      	pop	{r7, pc}

0801c52a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801c52a:	b580      	push	{r7, lr}
 801c52c:	b08c      	sub	sp, #48	; 0x30
 801c52e:	af00      	add	r7, sp, #0
 801c530:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801c538:	b2db      	uxtb	r3, r3
 801c53a:	2b22      	cmp	r3, #34	; 0x22
 801c53c:	f040 80ab 	bne.w	801c696 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	689b      	ldr	r3, [r3, #8]
 801c544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c548:	d117      	bne.n	801c57a <UART_Receive_IT+0x50>
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	691b      	ldr	r3, [r3, #16]
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d113      	bne.n	801c57a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801c552:	2300      	movs	r3, #0
 801c554:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c55a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	685b      	ldr	r3, [r3, #4]
 801c562:	b29b      	uxth	r3, r3
 801c564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c568:	b29a      	uxth	r2, r3
 801c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c56c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c572:	1c9a      	adds	r2, r3, #2
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	629a      	str	r2, [r3, #40]	; 0x28
 801c578:	e026      	b.n	801c5c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c57e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801c580:	2300      	movs	r3, #0
 801c582:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	689b      	ldr	r3, [r3, #8]
 801c588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c58c:	d007      	beq.n	801c59e <UART_Receive_IT+0x74>
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	689b      	ldr	r3, [r3, #8]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d10a      	bne.n	801c5ac <UART_Receive_IT+0x82>
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	691b      	ldr	r3, [r3, #16]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d106      	bne.n	801c5ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	685b      	ldr	r3, [r3, #4]
 801c5a4:	b2da      	uxtb	r2, r3
 801c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5a8:	701a      	strb	r2, [r3, #0]
 801c5aa:	e008      	b.n	801c5be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	685b      	ldr	r3, [r3, #4]
 801c5b2:	b2db      	uxtb	r3, r3
 801c5b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c5b8:	b2da      	uxtb	r2, r3
 801c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5c2:	1c5a      	adds	r2, r3, #1
 801c5c4:	687b      	ldr	r3, [r7, #4]
 801c5c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801c5cc:	b29b      	uxth	r3, r3
 801c5ce:	3b01      	subs	r3, #1
 801c5d0:	b29b      	uxth	r3, r3
 801c5d2:	687a      	ldr	r2, [r7, #4]
 801c5d4:	4619      	mov	r1, r3
 801c5d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d15a      	bne.n	801c692 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	68da      	ldr	r2, [r3, #12]
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	f022 0220 	bic.w	r2, r2, #32
 801c5ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	68da      	ldr	r2, [r3, #12]
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	681b      	ldr	r3, [r3, #0]
 801c5f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801c5fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	695a      	ldr	r2, [r3, #20]
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	f022 0201 	bic.w	r2, r2, #1
 801c60a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	2220      	movs	r2, #32
 801c610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c618:	2b01      	cmp	r3, #1
 801c61a:	d135      	bne.n	801c688 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	2200      	movs	r2, #0
 801c620:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	330c      	adds	r3, #12
 801c628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c62a:	697b      	ldr	r3, [r7, #20]
 801c62c:	e853 3f00 	ldrex	r3, [r3]
 801c630:	613b      	str	r3, [r7, #16]
   return(result);
 801c632:	693b      	ldr	r3, [r7, #16]
 801c634:	f023 0310 	bic.w	r3, r3, #16
 801c638:	627b      	str	r3, [r7, #36]	; 0x24
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	681b      	ldr	r3, [r3, #0]
 801c63e:	330c      	adds	r3, #12
 801c640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c642:	623a      	str	r2, [r7, #32]
 801c644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c646:	69f9      	ldr	r1, [r7, #28]
 801c648:	6a3a      	ldr	r2, [r7, #32]
 801c64a:	e841 2300 	strex	r3, r2, [r1]
 801c64e:	61bb      	str	r3, [r7, #24]
   return(result);
 801c650:	69bb      	ldr	r3, [r7, #24]
 801c652:	2b00      	cmp	r3, #0
 801c654:	d1e5      	bne.n	801c622 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	f003 0310 	and.w	r3, r3, #16
 801c660:	2b10      	cmp	r3, #16
 801c662:	d10a      	bne.n	801c67a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801c664:	2300      	movs	r3, #0
 801c666:	60fb      	str	r3, [r7, #12]
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	60fb      	str	r3, [r7, #12]
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	685b      	ldr	r3, [r3, #4]
 801c676:	60fb      	str	r3, [r7, #12]
 801c678:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801c67e:	4619      	mov	r1, r3
 801c680:	6878      	ldr	r0, [r7, #4]
 801c682:	f7e4 fc73 	bl	8000f6c <HAL_UARTEx_RxEventCallback>
 801c686:	e002      	b.n	801c68e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801c688:	6878      	ldr	r0, [r7, #4]
 801c68a:	f7ff fc25 	bl	801bed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801c68e:	2300      	movs	r3, #0
 801c690:	e002      	b.n	801c698 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801c692:	2300      	movs	r3, #0
 801c694:	e000      	b.n	801c698 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 801c696:	2302      	movs	r3, #2
  }
}
 801c698:	4618      	mov	r0, r3
 801c69a:	3730      	adds	r7, #48	; 0x30
 801c69c:	46bd      	mov	sp, r7
 801c69e:	bd80      	pop	{r7, pc}

0801c6a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801c6a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c6a4:	b0c0      	sub	sp, #256	; 0x100
 801c6a6:	af00      	add	r7, sp, #0
 801c6a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801c6ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	691b      	ldr	r3, [r3, #16]
 801c6b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801c6b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c6bc:	68d9      	ldr	r1, [r3, #12]
 801c6be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c6c2:	681a      	ldr	r2, [r3, #0]
 801c6c4:	ea40 0301 	orr.w	r3, r0, r1
 801c6c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801c6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c6ce:	689a      	ldr	r2, [r3, #8]
 801c6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c6d4:	691b      	ldr	r3, [r3, #16]
 801c6d6:	431a      	orrs	r2, r3
 801c6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c6dc:	695b      	ldr	r3, [r3, #20]
 801c6de:	431a      	orrs	r2, r3
 801c6e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c6e4:	69db      	ldr	r3, [r3, #28]
 801c6e6:	4313      	orrs	r3, r2
 801c6e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801c6ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	68db      	ldr	r3, [r3, #12]
 801c6f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801c6f8:	f021 010c 	bic.w	r1, r1, #12
 801c6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c700:	681a      	ldr	r2, [r3, #0]
 801c702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801c706:	430b      	orrs	r3, r1
 801c708:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801c70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	695b      	ldr	r3, [r3, #20]
 801c712:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801c716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c71a:	6999      	ldr	r1, [r3, #24]
 801c71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c720:	681a      	ldr	r2, [r3, #0]
 801c722:	ea40 0301 	orr.w	r3, r0, r1
 801c726:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801c728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c72c:	681a      	ldr	r2, [r3, #0]
 801c72e:	4b8f      	ldr	r3, [pc, #572]	; (801c96c <UART_SetConfig+0x2cc>)
 801c730:	429a      	cmp	r2, r3
 801c732:	d005      	beq.n	801c740 <UART_SetConfig+0xa0>
 801c734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c738:	681a      	ldr	r2, [r3, #0]
 801c73a:	4b8d      	ldr	r3, [pc, #564]	; (801c970 <UART_SetConfig+0x2d0>)
 801c73c:	429a      	cmp	r2, r3
 801c73e:	d104      	bne.n	801c74a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801c740:	f7fd fda8 	bl	801a294 <HAL_RCC_GetPCLK2Freq>
 801c744:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801c748:	e003      	b.n	801c752 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801c74a:	f7fd fd8f 	bl	801a26c <HAL_RCC_GetPCLK1Freq>
 801c74e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c756:	69db      	ldr	r3, [r3, #28]
 801c758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c75c:	f040 810c 	bne.w	801c978 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801c760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c764:	2200      	movs	r2, #0
 801c766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c76a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801c76e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801c772:	4622      	mov	r2, r4
 801c774:	462b      	mov	r3, r5
 801c776:	1891      	adds	r1, r2, r2
 801c778:	65b9      	str	r1, [r7, #88]	; 0x58
 801c77a:	415b      	adcs	r3, r3
 801c77c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c77e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801c782:	4621      	mov	r1, r4
 801c784:	eb12 0801 	adds.w	r8, r2, r1
 801c788:	4629      	mov	r1, r5
 801c78a:	eb43 0901 	adc.w	r9, r3, r1
 801c78e:	f04f 0200 	mov.w	r2, #0
 801c792:	f04f 0300 	mov.w	r3, #0
 801c796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801c79a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801c79e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801c7a2:	4690      	mov	r8, r2
 801c7a4:	4699      	mov	r9, r3
 801c7a6:	4623      	mov	r3, r4
 801c7a8:	eb18 0303 	adds.w	r3, r8, r3
 801c7ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c7b0:	462b      	mov	r3, r5
 801c7b2:	eb49 0303 	adc.w	r3, r9, r3
 801c7b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c7ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c7be:	685b      	ldr	r3, [r3, #4]
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c7c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c7ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c7ce:	460b      	mov	r3, r1
 801c7d0:	18db      	adds	r3, r3, r3
 801c7d2:	653b      	str	r3, [r7, #80]	; 0x50
 801c7d4:	4613      	mov	r3, r2
 801c7d6:	eb42 0303 	adc.w	r3, r2, r3
 801c7da:	657b      	str	r3, [r7, #84]	; 0x54
 801c7dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801c7e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801c7e4:	f7e4 fa08 	bl	8000bf8 <__aeabi_uldivmod>
 801c7e8:	4602      	mov	r2, r0
 801c7ea:	460b      	mov	r3, r1
 801c7ec:	4b61      	ldr	r3, [pc, #388]	; (801c974 <UART_SetConfig+0x2d4>)
 801c7ee:	fba3 2302 	umull	r2, r3, r3, r2
 801c7f2:	095b      	lsrs	r3, r3, #5
 801c7f4:	011c      	lsls	r4, r3, #4
 801c7f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c7fa:	2200      	movs	r2, #0
 801c7fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c800:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801c804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801c808:	4642      	mov	r2, r8
 801c80a:	464b      	mov	r3, r9
 801c80c:	1891      	adds	r1, r2, r2
 801c80e:	64b9      	str	r1, [r7, #72]	; 0x48
 801c810:	415b      	adcs	r3, r3
 801c812:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801c818:	4641      	mov	r1, r8
 801c81a:	eb12 0a01 	adds.w	sl, r2, r1
 801c81e:	4649      	mov	r1, r9
 801c820:	eb43 0b01 	adc.w	fp, r3, r1
 801c824:	f04f 0200 	mov.w	r2, #0
 801c828:	f04f 0300 	mov.w	r3, #0
 801c82c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801c830:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801c834:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801c838:	4692      	mov	sl, r2
 801c83a:	469b      	mov	fp, r3
 801c83c:	4643      	mov	r3, r8
 801c83e:	eb1a 0303 	adds.w	r3, sl, r3
 801c842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c846:	464b      	mov	r3, r9
 801c848:	eb4b 0303 	adc.w	r3, fp, r3
 801c84c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c854:	685b      	ldr	r3, [r3, #4]
 801c856:	2200      	movs	r2, #0
 801c858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c85c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801c860:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c864:	460b      	mov	r3, r1
 801c866:	18db      	adds	r3, r3, r3
 801c868:	643b      	str	r3, [r7, #64]	; 0x40
 801c86a:	4613      	mov	r3, r2
 801c86c:	eb42 0303 	adc.w	r3, r2, r3
 801c870:	647b      	str	r3, [r7, #68]	; 0x44
 801c872:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801c876:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801c87a:	f7e4 f9bd 	bl	8000bf8 <__aeabi_uldivmod>
 801c87e:	4602      	mov	r2, r0
 801c880:	460b      	mov	r3, r1
 801c882:	4611      	mov	r1, r2
 801c884:	4b3b      	ldr	r3, [pc, #236]	; (801c974 <UART_SetConfig+0x2d4>)
 801c886:	fba3 2301 	umull	r2, r3, r3, r1
 801c88a:	095b      	lsrs	r3, r3, #5
 801c88c:	2264      	movs	r2, #100	; 0x64
 801c88e:	fb02 f303 	mul.w	r3, r2, r3
 801c892:	1acb      	subs	r3, r1, r3
 801c894:	00db      	lsls	r3, r3, #3
 801c896:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801c89a:	4b36      	ldr	r3, [pc, #216]	; (801c974 <UART_SetConfig+0x2d4>)
 801c89c:	fba3 2302 	umull	r2, r3, r3, r2
 801c8a0:	095b      	lsrs	r3, r3, #5
 801c8a2:	005b      	lsls	r3, r3, #1
 801c8a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801c8a8:	441c      	add	r4, r3
 801c8aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c8ae:	2200      	movs	r2, #0
 801c8b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c8b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801c8b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801c8bc:	4642      	mov	r2, r8
 801c8be:	464b      	mov	r3, r9
 801c8c0:	1891      	adds	r1, r2, r2
 801c8c2:	63b9      	str	r1, [r7, #56]	; 0x38
 801c8c4:	415b      	adcs	r3, r3
 801c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c8c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801c8cc:	4641      	mov	r1, r8
 801c8ce:	1851      	adds	r1, r2, r1
 801c8d0:	6339      	str	r1, [r7, #48]	; 0x30
 801c8d2:	4649      	mov	r1, r9
 801c8d4:	414b      	adcs	r3, r1
 801c8d6:	637b      	str	r3, [r7, #52]	; 0x34
 801c8d8:	f04f 0200 	mov.w	r2, #0
 801c8dc:	f04f 0300 	mov.w	r3, #0
 801c8e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801c8e4:	4659      	mov	r1, fp
 801c8e6:	00cb      	lsls	r3, r1, #3
 801c8e8:	4651      	mov	r1, sl
 801c8ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801c8ee:	4651      	mov	r1, sl
 801c8f0:	00ca      	lsls	r2, r1, #3
 801c8f2:	4610      	mov	r0, r2
 801c8f4:	4619      	mov	r1, r3
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	4642      	mov	r2, r8
 801c8fa:	189b      	adds	r3, r3, r2
 801c8fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c900:	464b      	mov	r3, r9
 801c902:	460a      	mov	r2, r1
 801c904:	eb42 0303 	adc.w	r3, r2, r3
 801c908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c90c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c910:	685b      	ldr	r3, [r3, #4]
 801c912:	2200      	movs	r2, #0
 801c914:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c918:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801c91c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c920:	460b      	mov	r3, r1
 801c922:	18db      	adds	r3, r3, r3
 801c924:	62bb      	str	r3, [r7, #40]	; 0x28
 801c926:	4613      	mov	r3, r2
 801c928:	eb42 0303 	adc.w	r3, r2, r3
 801c92c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c92e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801c932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801c936:	f7e4 f95f 	bl	8000bf8 <__aeabi_uldivmod>
 801c93a:	4602      	mov	r2, r0
 801c93c:	460b      	mov	r3, r1
 801c93e:	4b0d      	ldr	r3, [pc, #52]	; (801c974 <UART_SetConfig+0x2d4>)
 801c940:	fba3 1302 	umull	r1, r3, r3, r2
 801c944:	095b      	lsrs	r3, r3, #5
 801c946:	2164      	movs	r1, #100	; 0x64
 801c948:	fb01 f303 	mul.w	r3, r1, r3
 801c94c:	1ad3      	subs	r3, r2, r3
 801c94e:	00db      	lsls	r3, r3, #3
 801c950:	3332      	adds	r3, #50	; 0x32
 801c952:	4a08      	ldr	r2, [pc, #32]	; (801c974 <UART_SetConfig+0x2d4>)
 801c954:	fba2 2303 	umull	r2, r3, r2, r3
 801c958:	095b      	lsrs	r3, r3, #5
 801c95a:	f003 0207 	and.w	r2, r3, #7
 801c95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	4422      	add	r2, r4
 801c966:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801c968:	e105      	b.n	801cb76 <UART_SetConfig+0x4d6>
 801c96a:	bf00      	nop
 801c96c:	40011000 	.word	0x40011000
 801c970:	40011400 	.word	0x40011400
 801c974:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801c978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801c97c:	2200      	movs	r2, #0
 801c97e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c982:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801c986:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801c98a:	4642      	mov	r2, r8
 801c98c:	464b      	mov	r3, r9
 801c98e:	1891      	adds	r1, r2, r2
 801c990:	6239      	str	r1, [r7, #32]
 801c992:	415b      	adcs	r3, r3
 801c994:	627b      	str	r3, [r7, #36]	; 0x24
 801c996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801c99a:	4641      	mov	r1, r8
 801c99c:	1854      	adds	r4, r2, r1
 801c99e:	4649      	mov	r1, r9
 801c9a0:	eb43 0501 	adc.w	r5, r3, r1
 801c9a4:	f04f 0200 	mov.w	r2, #0
 801c9a8:	f04f 0300 	mov.w	r3, #0
 801c9ac:	00eb      	lsls	r3, r5, #3
 801c9ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801c9b2:	00e2      	lsls	r2, r4, #3
 801c9b4:	4614      	mov	r4, r2
 801c9b6:	461d      	mov	r5, r3
 801c9b8:	4643      	mov	r3, r8
 801c9ba:	18e3      	adds	r3, r4, r3
 801c9bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c9c0:	464b      	mov	r3, r9
 801c9c2:	eb45 0303 	adc.w	r3, r5, r3
 801c9c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c9ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801c9ce:	685b      	ldr	r3, [r3, #4]
 801c9d0:	2200      	movs	r2, #0
 801c9d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c9d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801c9da:	f04f 0200 	mov.w	r2, #0
 801c9de:	f04f 0300 	mov.w	r3, #0
 801c9e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801c9e6:	4629      	mov	r1, r5
 801c9e8:	008b      	lsls	r3, r1, #2
 801c9ea:	4621      	mov	r1, r4
 801c9ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801c9f0:	4621      	mov	r1, r4
 801c9f2:	008a      	lsls	r2, r1, #2
 801c9f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801c9f8:	f7e4 f8fe 	bl	8000bf8 <__aeabi_uldivmod>
 801c9fc:	4602      	mov	r2, r0
 801c9fe:	460b      	mov	r3, r1
 801ca00:	4b60      	ldr	r3, [pc, #384]	; (801cb84 <UART_SetConfig+0x4e4>)
 801ca02:	fba3 2302 	umull	r2, r3, r3, r2
 801ca06:	095b      	lsrs	r3, r3, #5
 801ca08:	011c      	lsls	r4, r3, #4
 801ca0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ca0e:	2200      	movs	r2, #0
 801ca10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ca14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801ca18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801ca1c:	4642      	mov	r2, r8
 801ca1e:	464b      	mov	r3, r9
 801ca20:	1891      	adds	r1, r2, r2
 801ca22:	61b9      	str	r1, [r7, #24]
 801ca24:	415b      	adcs	r3, r3
 801ca26:	61fb      	str	r3, [r7, #28]
 801ca28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ca2c:	4641      	mov	r1, r8
 801ca2e:	1851      	adds	r1, r2, r1
 801ca30:	6139      	str	r1, [r7, #16]
 801ca32:	4649      	mov	r1, r9
 801ca34:	414b      	adcs	r3, r1
 801ca36:	617b      	str	r3, [r7, #20]
 801ca38:	f04f 0200 	mov.w	r2, #0
 801ca3c:	f04f 0300 	mov.w	r3, #0
 801ca40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801ca44:	4659      	mov	r1, fp
 801ca46:	00cb      	lsls	r3, r1, #3
 801ca48:	4651      	mov	r1, sl
 801ca4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801ca4e:	4651      	mov	r1, sl
 801ca50:	00ca      	lsls	r2, r1, #3
 801ca52:	4610      	mov	r0, r2
 801ca54:	4619      	mov	r1, r3
 801ca56:	4603      	mov	r3, r0
 801ca58:	4642      	mov	r2, r8
 801ca5a:	189b      	adds	r3, r3, r2
 801ca5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801ca60:	464b      	mov	r3, r9
 801ca62:	460a      	mov	r2, r1
 801ca64:	eb42 0303 	adc.w	r3, r2, r3
 801ca68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801ca6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ca70:	685b      	ldr	r3, [r3, #4]
 801ca72:	2200      	movs	r2, #0
 801ca74:	67bb      	str	r3, [r7, #120]	; 0x78
 801ca76:	67fa      	str	r2, [r7, #124]	; 0x7c
 801ca78:	f04f 0200 	mov.w	r2, #0
 801ca7c:	f04f 0300 	mov.w	r3, #0
 801ca80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801ca84:	4649      	mov	r1, r9
 801ca86:	008b      	lsls	r3, r1, #2
 801ca88:	4641      	mov	r1, r8
 801ca8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801ca8e:	4641      	mov	r1, r8
 801ca90:	008a      	lsls	r2, r1, #2
 801ca92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801ca96:	f7e4 f8af 	bl	8000bf8 <__aeabi_uldivmod>
 801ca9a:	4602      	mov	r2, r0
 801ca9c:	460b      	mov	r3, r1
 801ca9e:	4b39      	ldr	r3, [pc, #228]	; (801cb84 <UART_SetConfig+0x4e4>)
 801caa0:	fba3 1302 	umull	r1, r3, r3, r2
 801caa4:	095b      	lsrs	r3, r3, #5
 801caa6:	2164      	movs	r1, #100	; 0x64
 801caa8:	fb01 f303 	mul.w	r3, r1, r3
 801caac:	1ad3      	subs	r3, r2, r3
 801caae:	011b      	lsls	r3, r3, #4
 801cab0:	3332      	adds	r3, #50	; 0x32
 801cab2:	4a34      	ldr	r2, [pc, #208]	; (801cb84 <UART_SetConfig+0x4e4>)
 801cab4:	fba2 2303 	umull	r2, r3, r2, r3
 801cab8:	095b      	lsrs	r3, r3, #5
 801caba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cabe:	441c      	add	r4, r3
 801cac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cac4:	2200      	movs	r2, #0
 801cac6:	673b      	str	r3, [r7, #112]	; 0x70
 801cac8:	677a      	str	r2, [r7, #116]	; 0x74
 801caca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801cace:	4642      	mov	r2, r8
 801cad0:	464b      	mov	r3, r9
 801cad2:	1891      	adds	r1, r2, r2
 801cad4:	60b9      	str	r1, [r7, #8]
 801cad6:	415b      	adcs	r3, r3
 801cad8:	60fb      	str	r3, [r7, #12]
 801cada:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cade:	4641      	mov	r1, r8
 801cae0:	1851      	adds	r1, r2, r1
 801cae2:	6039      	str	r1, [r7, #0]
 801cae4:	4649      	mov	r1, r9
 801cae6:	414b      	adcs	r3, r1
 801cae8:	607b      	str	r3, [r7, #4]
 801caea:	f04f 0200 	mov.w	r2, #0
 801caee:	f04f 0300 	mov.w	r3, #0
 801caf2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801caf6:	4659      	mov	r1, fp
 801caf8:	00cb      	lsls	r3, r1, #3
 801cafa:	4651      	mov	r1, sl
 801cafc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801cb00:	4651      	mov	r1, sl
 801cb02:	00ca      	lsls	r2, r1, #3
 801cb04:	4610      	mov	r0, r2
 801cb06:	4619      	mov	r1, r3
 801cb08:	4603      	mov	r3, r0
 801cb0a:	4642      	mov	r2, r8
 801cb0c:	189b      	adds	r3, r3, r2
 801cb0e:	66bb      	str	r3, [r7, #104]	; 0x68
 801cb10:	464b      	mov	r3, r9
 801cb12:	460a      	mov	r2, r1
 801cb14:	eb42 0303 	adc.w	r3, r2, r3
 801cb18:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cb1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb1e:	685b      	ldr	r3, [r3, #4]
 801cb20:	2200      	movs	r2, #0
 801cb22:	663b      	str	r3, [r7, #96]	; 0x60
 801cb24:	667a      	str	r2, [r7, #100]	; 0x64
 801cb26:	f04f 0200 	mov.w	r2, #0
 801cb2a:	f04f 0300 	mov.w	r3, #0
 801cb2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801cb32:	4649      	mov	r1, r9
 801cb34:	008b      	lsls	r3, r1, #2
 801cb36:	4641      	mov	r1, r8
 801cb38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801cb3c:	4641      	mov	r1, r8
 801cb3e:	008a      	lsls	r2, r1, #2
 801cb40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801cb44:	f7e4 f858 	bl	8000bf8 <__aeabi_uldivmod>
 801cb48:	4602      	mov	r2, r0
 801cb4a:	460b      	mov	r3, r1
 801cb4c:	4b0d      	ldr	r3, [pc, #52]	; (801cb84 <UART_SetConfig+0x4e4>)
 801cb4e:	fba3 1302 	umull	r1, r3, r3, r2
 801cb52:	095b      	lsrs	r3, r3, #5
 801cb54:	2164      	movs	r1, #100	; 0x64
 801cb56:	fb01 f303 	mul.w	r3, r1, r3
 801cb5a:	1ad3      	subs	r3, r2, r3
 801cb5c:	011b      	lsls	r3, r3, #4
 801cb5e:	3332      	adds	r3, #50	; 0x32
 801cb60:	4a08      	ldr	r2, [pc, #32]	; (801cb84 <UART_SetConfig+0x4e4>)
 801cb62:	fba2 2303 	umull	r2, r3, r2, r3
 801cb66:	095b      	lsrs	r3, r3, #5
 801cb68:	f003 020f 	and.w	r2, r3, #15
 801cb6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	4422      	add	r2, r4
 801cb74:	609a      	str	r2, [r3, #8]
}
 801cb76:	bf00      	nop
 801cb78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801cb7c:	46bd      	mov	sp, r7
 801cb7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cb82:	bf00      	nop
 801cb84:	51eb851f 	.word	0x51eb851f

0801cb88 <pow>:
 801cb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb8a:	ed2d 8b02 	vpush	{d8}
 801cb8e:	eeb0 8a40 	vmov.f32	s16, s0
 801cb92:	eef0 8a60 	vmov.f32	s17, s1
 801cb96:	ec55 4b11 	vmov	r4, r5, d1
 801cb9a:	f000 f885 	bl	801cca8 <__ieee754_pow>
 801cb9e:	4622      	mov	r2, r4
 801cba0:	462b      	mov	r3, r5
 801cba2:	4620      	mov	r0, r4
 801cba4:	4629      	mov	r1, r5
 801cba6:	ec57 6b10 	vmov	r6, r7, d0
 801cbaa:	f7e3 ffbf 	bl	8000b2c <__aeabi_dcmpun>
 801cbae:	2800      	cmp	r0, #0
 801cbb0:	d13b      	bne.n	801cc2a <pow+0xa2>
 801cbb2:	ec51 0b18 	vmov	r0, r1, d8
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	2300      	movs	r3, #0
 801cbba:	f7e3 ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 801cbbe:	b1b8      	cbz	r0, 801cbf0 <pow+0x68>
 801cbc0:	2200      	movs	r2, #0
 801cbc2:	2300      	movs	r3, #0
 801cbc4:	4620      	mov	r0, r4
 801cbc6:	4629      	mov	r1, r5
 801cbc8:	f7e3 ff7e 	bl	8000ac8 <__aeabi_dcmpeq>
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	d146      	bne.n	801cc5e <pow+0xd6>
 801cbd0:	ec45 4b10 	vmov	d0, r4, r5
 801cbd4:	f000 fe84 	bl	801d8e0 <finite>
 801cbd8:	b338      	cbz	r0, 801cc2a <pow+0xa2>
 801cbda:	2200      	movs	r2, #0
 801cbdc:	2300      	movs	r3, #0
 801cbde:	4620      	mov	r0, r4
 801cbe0:	4629      	mov	r1, r5
 801cbe2:	f7e3 ff7b 	bl	8000adc <__aeabi_dcmplt>
 801cbe6:	b300      	cbz	r0, 801cc2a <pow+0xa2>
 801cbe8:	f000 ff2a 	bl	801da40 <__errno>
 801cbec:	2322      	movs	r3, #34	; 0x22
 801cbee:	e01b      	b.n	801cc28 <pow+0xa0>
 801cbf0:	ec47 6b10 	vmov	d0, r6, r7
 801cbf4:	f000 fe74 	bl	801d8e0 <finite>
 801cbf8:	b9e0      	cbnz	r0, 801cc34 <pow+0xac>
 801cbfa:	eeb0 0a48 	vmov.f32	s0, s16
 801cbfe:	eef0 0a68 	vmov.f32	s1, s17
 801cc02:	f000 fe6d 	bl	801d8e0 <finite>
 801cc06:	b1a8      	cbz	r0, 801cc34 <pow+0xac>
 801cc08:	ec45 4b10 	vmov	d0, r4, r5
 801cc0c:	f000 fe68 	bl	801d8e0 <finite>
 801cc10:	b180      	cbz	r0, 801cc34 <pow+0xac>
 801cc12:	4632      	mov	r2, r6
 801cc14:	463b      	mov	r3, r7
 801cc16:	4630      	mov	r0, r6
 801cc18:	4639      	mov	r1, r7
 801cc1a:	f7e3 ff87 	bl	8000b2c <__aeabi_dcmpun>
 801cc1e:	2800      	cmp	r0, #0
 801cc20:	d0e2      	beq.n	801cbe8 <pow+0x60>
 801cc22:	f000 ff0d 	bl	801da40 <__errno>
 801cc26:	2321      	movs	r3, #33	; 0x21
 801cc28:	6003      	str	r3, [r0, #0]
 801cc2a:	ecbd 8b02 	vpop	{d8}
 801cc2e:	ec47 6b10 	vmov	d0, r6, r7
 801cc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc34:	2200      	movs	r2, #0
 801cc36:	2300      	movs	r3, #0
 801cc38:	4630      	mov	r0, r6
 801cc3a:	4639      	mov	r1, r7
 801cc3c:	f7e3 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 801cc40:	2800      	cmp	r0, #0
 801cc42:	d0f2      	beq.n	801cc2a <pow+0xa2>
 801cc44:	eeb0 0a48 	vmov.f32	s0, s16
 801cc48:	eef0 0a68 	vmov.f32	s1, s17
 801cc4c:	f000 fe48 	bl	801d8e0 <finite>
 801cc50:	2800      	cmp	r0, #0
 801cc52:	d0ea      	beq.n	801cc2a <pow+0xa2>
 801cc54:	ec45 4b10 	vmov	d0, r4, r5
 801cc58:	f000 fe42 	bl	801d8e0 <finite>
 801cc5c:	e7c3      	b.n	801cbe6 <pow+0x5e>
 801cc5e:	4f01      	ldr	r7, [pc, #4]	; (801cc64 <pow+0xdc>)
 801cc60:	2600      	movs	r6, #0
 801cc62:	e7e2      	b.n	801cc2a <pow+0xa2>
 801cc64:	3ff00000 	.word	0x3ff00000

0801cc68 <sqrtf>:
 801cc68:	b508      	push	{r3, lr}
 801cc6a:	ed2d 8b02 	vpush	{d8}
 801cc6e:	eeb0 8a40 	vmov.f32	s16, s0
 801cc72:	f000 fdf9 	bl	801d868 <__ieee754_sqrtf>
 801cc76:	eeb4 8a48 	vcmp.f32	s16, s16
 801cc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc7e:	d60c      	bvs.n	801cc9a <sqrtf+0x32>
 801cc80:	eddf 8a07 	vldr	s17, [pc, #28]	; 801cca0 <sqrtf+0x38>
 801cc84:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc8c:	d505      	bpl.n	801cc9a <sqrtf+0x32>
 801cc8e:	f000 fed7 	bl	801da40 <__errno>
 801cc92:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801cc96:	2321      	movs	r3, #33	; 0x21
 801cc98:	6003      	str	r3, [r0, #0]
 801cc9a:	ecbd 8b02 	vpop	{d8}
 801cc9e:	bd08      	pop	{r3, pc}
	...

0801cca8 <__ieee754_pow>:
 801cca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccac:	ed2d 8b06 	vpush	{d8-d10}
 801ccb0:	b089      	sub	sp, #36	; 0x24
 801ccb2:	ed8d 1b00 	vstr	d1, [sp]
 801ccb6:	e9dd 2900 	ldrd	r2, r9, [sp]
 801ccba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801ccbe:	ea58 0102 	orrs.w	r1, r8, r2
 801ccc2:	ec57 6b10 	vmov	r6, r7, d0
 801ccc6:	d115      	bne.n	801ccf4 <__ieee754_pow+0x4c>
 801ccc8:	19b3      	adds	r3, r6, r6
 801ccca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801ccce:	4152      	adcs	r2, r2
 801ccd0:	4299      	cmp	r1, r3
 801ccd2:	4b89      	ldr	r3, [pc, #548]	; (801cef8 <__ieee754_pow+0x250>)
 801ccd4:	4193      	sbcs	r3, r2
 801ccd6:	f080 84d2 	bcs.w	801d67e <__ieee754_pow+0x9d6>
 801ccda:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ccde:	4630      	mov	r0, r6
 801cce0:	4639      	mov	r1, r7
 801cce2:	f7e3 fad3 	bl	800028c <__adddf3>
 801cce6:	ec41 0b10 	vmov	d0, r0, r1
 801ccea:	b009      	add	sp, #36	; 0x24
 801ccec:	ecbd 8b06 	vpop	{d8-d10}
 801ccf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccf4:	4b81      	ldr	r3, [pc, #516]	; (801cefc <__ieee754_pow+0x254>)
 801ccf6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801ccfa:	429c      	cmp	r4, r3
 801ccfc:	ee10 aa10 	vmov	sl, s0
 801cd00:	463d      	mov	r5, r7
 801cd02:	dc06      	bgt.n	801cd12 <__ieee754_pow+0x6a>
 801cd04:	d101      	bne.n	801cd0a <__ieee754_pow+0x62>
 801cd06:	2e00      	cmp	r6, #0
 801cd08:	d1e7      	bne.n	801ccda <__ieee754_pow+0x32>
 801cd0a:	4598      	cmp	r8, r3
 801cd0c:	dc01      	bgt.n	801cd12 <__ieee754_pow+0x6a>
 801cd0e:	d10f      	bne.n	801cd30 <__ieee754_pow+0x88>
 801cd10:	b172      	cbz	r2, 801cd30 <__ieee754_pow+0x88>
 801cd12:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801cd16:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801cd1a:	ea55 050a 	orrs.w	r5, r5, sl
 801cd1e:	d1dc      	bne.n	801ccda <__ieee754_pow+0x32>
 801cd20:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cd24:	18db      	adds	r3, r3, r3
 801cd26:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801cd2a:	4152      	adcs	r2, r2
 801cd2c:	429d      	cmp	r5, r3
 801cd2e:	e7d0      	b.n	801ccd2 <__ieee754_pow+0x2a>
 801cd30:	2d00      	cmp	r5, #0
 801cd32:	da3b      	bge.n	801cdac <__ieee754_pow+0x104>
 801cd34:	4b72      	ldr	r3, [pc, #456]	; (801cf00 <__ieee754_pow+0x258>)
 801cd36:	4598      	cmp	r8, r3
 801cd38:	dc51      	bgt.n	801cdde <__ieee754_pow+0x136>
 801cd3a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801cd3e:	4598      	cmp	r8, r3
 801cd40:	f340 84ac 	ble.w	801d69c <__ieee754_pow+0x9f4>
 801cd44:	ea4f 5328 	mov.w	r3, r8, asr #20
 801cd48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801cd4c:	2b14      	cmp	r3, #20
 801cd4e:	dd0f      	ble.n	801cd70 <__ieee754_pow+0xc8>
 801cd50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801cd54:	fa22 f103 	lsr.w	r1, r2, r3
 801cd58:	fa01 f303 	lsl.w	r3, r1, r3
 801cd5c:	4293      	cmp	r3, r2
 801cd5e:	f040 849d 	bne.w	801d69c <__ieee754_pow+0x9f4>
 801cd62:	f001 0101 	and.w	r1, r1, #1
 801cd66:	f1c1 0302 	rsb	r3, r1, #2
 801cd6a:	9304      	str	r3, [sp, #16]
 801cd6c:	b182      	cbz	r2, 801cd90 <__ieee754_pow+0xe8>
 801cd6e:	e05f      	b.n	801ce30 <__ieee754_pow+0x188>
 801cd70:	2a00      	cmp	r2, #0
 801cd72:	d15b      	bne.n	801ce2c <__ieee754_pow+0x184>
 801cd74:	f1c3 0314 	rsb	r3, r3, #20
 801cd78:	fa48 f103 	asr.w	r1, r8, r3
 801cd7c:	fa01 f303 	lsl.w	r3, r1, r3
 801cd80:	4543      	cmp	r3, r8
 801cd82:	f040 8488 	bne.w	801d696 <__ieee754_pow+0x9ee>
 801cd86:	f001 0101 	and.w	r1, r1, #1
 801cd8a:	f1c1 0302 	rsb	r3, r1, #2
 801cd8e:	9304      	str	r3, [sp, #16]
 801cd90:	4b5c      	ldr	r3, [pc, #368]	; (801cf04 <__ieee754_pow+0x25c>)
 801cd92:	4598      	cmp	r8, r3
 801cd94:	d132      	bne.n	801cdfc <__ieee754_pow+0x154>
 801cd96:	f1b9 0f00 	cmp.w	r9, #0
 801cd9a:	f280 8478 	bge.w	801d68e <__ieee754_pow+0x9e6>
 801cd9e:	4959      	ldr	r1, [pc, #356]	; (801cf04 <__ieee754_pow+0x25c>)
 801cda0:	4632      	mov	r2, r6
 801cda2:	463b      	mov	r3, r7
 801cda4:	2000      	movs	r0, #0
 801cda6:	f7e3 fd51 	bl	800084c <__aeabi_ddiv>
 801cdaa:	e79c      	b.n	801cce6 <__ieee754_pow+0x3e>
 801cdac:	2300      	movs	r3, #0
 801cdae:	9304      	str	r3, [sp, #16]
 801cdb0:	2a00      	cmp	r2, #0
 801cdb2:	d13d      	bne.n	801ce30 <__ieee754_pow+0x188>
 801cdb4:	4b51      	ldr	r3, [pc, #324]	; (801cefc <__ieee754_pow+0x254>)
 801cdb6:	4598      	cmp	r8, r3
 801cdb8:	d1ea      	bne.n	801cd90 <__ieee754_pow+0xe8>
 801cdba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801cdbe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801cdc2:	ea53 030a 	orrs.w	r3, r3, sl
 801cdc6:	f000 845a 	beq.w	801d67e <__ieee754_pow+0x9d6>
 801cdca:	4b4f      	ldr	r3, [pc, #316]	; (801cf08 <__ieee754_pow+0x260>)
 801cdcc:	429c      	cmp	r4, r3
 801cdce:	dd08      	ble.n	801cde2 <__ieee754_pow+0x13a>
 801cdd0:	f1b9 0f00 	cmp.w	r9, #0
 801cdd4:	f2c0 8457 	blt.w	801d686 <__ieee754_pow+0x9de>
 801cdd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cddc:	e783      	b.n	801cce6 <__ieee754_pow+0x3e>
 801cdde:	2302      	movs	r3, #2
 801cde0:	e7e5      	b.n	801cdae <__ieee754_pow+0x106>
 801cde2:	f1b9 0f00 	cmp.w	r9, #0
 801cde6:	f04f 0000 	mov.w	r0, #0
 801cdea:	f04f 0100 	mov.w	r1, #0
 801cdee:	f6bf af7a 	bge.w	801cce6 <__ieee754_pow+0x3e>
 801cdf2:	e9dd 0300 	ldrd	r0, r3, [sp]
 801cdf6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801cdfa:	e774      	b.n	801cce6 <__ieee754_pow+0x3e>
 801cdfc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ce00:	d106      	bne.n	801ce10 <__ieee754_pow+0x168>
 801ce02:	4632      	mov	r2, r6
 801ce04:	463b      	mov	r3, r7
 801ce06:	4630      	mov	r0, r6
 801ce08:	4639      	mov	r1, r7
 801ce0a:	f7e3 fbf5 	bl	80005f8 <__aeabi_dmul>
 801ce0e:	e76a      	b.n	801cce6 <__ieee754_pow+0x3e>
 801ce10:	4b3e      	ldr	r3, [pc, #248]	; (801cf0c <__ieee754_pow+0x264>)
 801ce12:	4599      	cmp	r9, r3
 801ce14:	d10c      	bne.n	801ce30 <__ieee754_pow+0x188>
 801ce16:	2d00      	cmp	r5, #0
 801ce18:	db0a      	blt.n	801ce30 <__ieee754_pow+0x188>
 801ce1a:	ec47 6b10 	vmov	d0, r6, r7
 801ce1e:	b009      	add	sp, #36	; 0x24
 801ce20:	ecbd 8b06 	vpop	{d8-d10}
 801ce24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce28:	f000 bc6c 	b.w	801d704 <__ieee754_sqrt>
 801ce2c:	2300      	movs	r3, #0
 801ce2e:	9304      	str	r3, [sp, #16]
 801ce30:	ec47 6b10 	vmov	d0, r6, r7
 801ce34:	f000 fd4b 	bl	801d8ce <fabs>
 801ce38:	ec51 0b10 	vmov	r0, r1, d0
 801ce3c:	f1ba 0f00 	cmp.w	sl, #0
 801ce40:	d129      	bne.n	801ce96 <__ieee754_pow+0x1ee>
 801ce42:	b124      	cbz	r4, 801ce4e <__ieee754_pow+0x1a6>
 801ce44:	4b2f      	ldr	r3, [pc, #188]	; (801cf04 <__ieee754_pow+0x25c>)
 801ce46:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ce4a:	429a      	cmp	r2, r3
 801ce4c:	d123      	bne.n	801ce96 <__ieee754_pow+0x1ee>
 801ce4e:	f1b9 0f00 	cmp.w	r9, #0
 801ce52:	da05      	bge.n	801ce60 <__ieee754_pow+0x1b8>
 801ce54:	4602      	mov	r2, r0
 801ce56:	460b      	mov	r3, r1
 801ce58:	2000      	movs	r0, #0
 801ce5a:	492a      	ldr	r1, [pc, #168]	; (801cf04 <__ieee754_pow+0x25c>)
 801ce5c:	f7e3 fcf6 	bl	800084c <__aeabi_ddiv>
 801ce60:	2d00      	cmp	r5, #0
 801ce62:	f6bf af40 	bge.w	801cce6 <__ieee754_pow+0x3e>
 801ce66:	9b04      	ldr	r3, [sp, #16]
 801ce68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ce6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ce70:	4323      	orrs	r3, r4
 801ce72:	d108      	bne.n	801ce86 <__ieee754_pow+0x1de>
 801ce74:	4602      	mov	r2, r0
 801ce76:	460b      	mov	r3, r1
 801ce78:	4610      	mov	r0, r2
 801ce7a:	4619      	mov	r1, r3
 801ce7c:	f7e3 fa04 	bl	8000288 <__aeabi_dsub>
 801ce80:	4602      	mov	r2, r0
 801ce82:	460b      	mov	r3, r1
 801ce84:	e78f      	b.n	801cda6 <__ieee754_pow+0xfe>
 801ce86:	9b04      	ldr	r3, [sp, #16]
 801ce88:	2b01      	cmp	r3, #1
 801ce8a:	f47f af2c 	bne.w	801cce6 <__ieee754_pow+0x3e>
 801ce8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ce92:	4619      	mov	r1, r3
 801ce94:	e727      	b.n	801cce6 <__ieee754_pow+0x3e>
 801ce96:	0feb      	lsrs	r3, r5, #31
 801ce98:	3b01      	subs	r3, #1
 801ce9a:	9306      	str	r3, [sp, #24]
 801ce9c:	9a06      	ldr	r2, [sp, #24]
 801ce9e:	9b04      	ldr	r3, [sp, #16]
 801cea0:	4313      	orrs	r3, r2
 801cea2:	d102      	bne.n	801ceaa <__ieee754_pow+0x202>
 801cea4:	4632      	mov	r2, r6
 801cea6:	463b      	mov	r3, r7
 801cea8:	e7e6      	b.n	801ce78 <__ieee754_pow+0x1d0>
 801ceaa:	4b19      	ldr	r3, [pc, #100]	; (801cf10 <__ieee754_pow+0x268>)
 801ceac:	4598      	cmp	r8, r3
 801ceae:	f340 80fb 	ble.w	801d0a8 <__ieee754_pow+0x400>
 801ceb2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ceb6:	4598      	cmp	r8, r3
 801ceb8:	4b13      	ldr	r3, [pc, #76]	; (801cf08 <__ieee754_pow+0x260>)
 801ceba:	dd0c      	ble.n	801ced6 <__ieee754_pow+0x22e>
 801cebc:	429c      	cmp	r4, r3
 801cebe:	dc0f      	bgt.n	801cee0 <__ieee754_pow+0x238>
 801cec0:	f1b9 0f00 	cmp.w	r9, #0
 801cec4:	da0f      	bge.n	801cee6 <__ieee754_pow+0x23e>
 801cec6:	2000      	movs	r0, #0
 801cec8:	b009      	add	sp, #36	; 0x24
 801ceca:	ecbd 8b06 	vpop	{d8-d10}
 801cece:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ced2:	f000 bcf3 	b.w	801d8bc <__math_oflow>
 801ced6:	429c      	cmp	r4, r3
 801ced8:	dbf2      	blt.n	801cec0 <__ieee754_pow+0x218>
 801ceda:	4b0a      	ldr	r3, [pc, #40]	; (801cf04 <__ieee754_pow+0x25c>)
 801cedc:	429c      	cmp	r4, r3
 801cede:	dd19      	ble.n	801cf14 <__ieee754_pow+0x26c>
 801cee0:	f1b9 0f00 	cmp.w	r9, #0
 801cee4:	dcef      	bgt.n	801cec6 <__ieee754_pow+0x21e>
 801cee6:	2000      	movs	r0, #0
 801cee8:	b009      	add	sp, #36	; 0x24
 801ceea:	ecbd 8b06 	vpop	{d8-d10}
 801ceee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef2:	f000 bcda 	b.w	801d8aa <__math_uflow>
 801cef6:	bf00      	nop
 801cef8:	fff00000 	.word	0xfff00000
 801cefc:	7ff00000 	.word	0x7ff00000
 801cf00:	433fffff 	.word	0x433fffff
 801cf04:	3ff00000 	.word	0x3ff00000
 801cf08:	3fefffff 	.word	0x3fefffff
 801cf0c:	3fe00000 	.word	0x3fe00000
 801cf10:	41e00000 	.word	0x41e00000
 801cf14:	4b60      	ldr	r3, [pc, #384]	; (801d098 <__ieee754_pow+0x3f0>)
 801cf16:	2200      	movs	r2, #0
 801cf18:	f7e3 f9b6 	bl	8000288 <__aeabi_dsub>
 801cf1c:	a354      	add	r3, pc, #336	; (adr r3, 801d070 <__ieee754_pow+0x3c8>)
 801cf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf22:	4604      	mov	r4, r0
 801cf24:	460d      	mov	r5, r1
 801cf26:	f7e3 fb67 	bl	80005f8 <__aeabi_dmul>
 801cf2a:	a353      	add	r3, pc, #332	; (adr r3, 801d078 <__ieee754_pow+0x3d0>)
 801cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf30:	4606      	mov	r6, r0
 801cf32:	460f      	mov	r7, r1
 801cf34:	4620      	mov	r0, r4
 801cf36:	4629      	mov	r1, r5
 801cf38:	f7e3 fb5e 	bl	80005f8 <__aeabi_dmul>
 801cf3c:	4b57      	ldr	r3, [pc, #348]	; (801d09c <__ieee754_pow+0x3f4>)
 801cf3e:	4682      	mov	sl, r0
 801cf40:	468b      	mov	fp, r1
 801cf42:	2200      	movs	r2, #0
 801cf44:	4620      	mov	r0, r4
 801cf46:	4629      	mov	r1, r5
 801cf48:	f7e3 fb56 	bl	80005f8 <__aeabi_dmul>
 801cf4c:	4602      	mov	r2, r0
 801cf4e:	460b      	mov	r3, r1
 801cf50:	a14b      	add	r1, pc, #300	; (adr r1, 801d080 <__ieee754_pow+0x3d8>)
 801cf52:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cf56:	f7e3 f997 	bl	8000288 <__aeabi_dsub>
 801cf5a:	4622      	mov	r2, r4
 801cf5c:	462b      	mov	r3, r5
 801cf5e:	f7e3 fb4b 	bl	80005f8 <__aeabi_dmul>
 801cf62:	4602      	mov	r2, r0
 801cf64:	460b      	mov	r3, r1
 801cf66:	2000      	movs	r0, #0
 801cf68:	494d      	ldr	r1, [pc, #308]	; (801d0a0 <__ieee754_pow+0x3f8>)
 801cf6a:	f7e3 f98d 	bl	8000288 <__aeabi_dsub>
 801cf6e:	4622      	mov	r2, r4
 801cf70:	4680      	mov	r8, r0
 801cf72:	4689      	mov	r9, r1
 801cf74:	462b      	mov	r3, r5
 801cf76:	4620      	mov	r0, r4
 801cf78:	4629      	mov	r1, r5
 801cf7a:	f7e3 fb3d 	bl	80005f8 <__aeabi_dmul>
 801cf7e:	4602      	mov	r2, r0
 801cf80:	460b      	mov	r3, r1
 801cf82:	4640      	mov	r0, r8
 801cf84:	4649      	mov	r1, r9
 801cf86:	f7e3 fb37 	bl	80005f8 <__aeabi_dmul>
 801cf8a:	a33f      	add	r3, pc, #252	; (adr r3, 801d088 <__ieee754_pow+0x3e0>)
 801cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf90:	f7e3 fb32 	bl	80005f8 <__aeabi_dmul>
 801cf94:	4602      	mov	r2, r0
 801cf96:	460b      	mov	r3, r1
 801cf98:	4650      	mov	r0, sl
 801cf9a:	4659      	mov	r1, fp
 801cf9c:	f7e3 f974 	bl	8000288 <__aeabi_dsub>
 801cfa0:	4602      	mov	r2, r0
 801cfa2:	460b      	mov	r3, r1
 801cfa4:	4680      	mov	r8, r0
 801cfa6:	4689      	mov	r9, r1
 801cfa8:	4630      	mov	r0, r6
 801cfaa:	4639      	mov	r1, r7
 801cfac:	f7e3 f96e 	bl	800028c <__adddf3>
 801cfb0:	2000      	movs	r0, #0
 801cfb2:	4632      	mov	r2, r6
 801cfb4:	463b      	mov	r3, r7
 801cfb6:	4604      	mov	r4, r0
 801cfb8:	460d      	mov	r5, r1
 801cfba:	f7e3 f965 	bl	8000288 <__aeabi_dsub>
 801cfbe:	4602      	mov	r2, r0
 801cfc0:	460b      	mov	r3, r1
 801cfc2:	4640      	mov	r0, r8
 801cfc4:	4649      	mov	r1, r9
 801cfc6:	f7e3 f95f 	bl	8000288 <__aeabi_dsub>
 801cfca:	9b04      	ldr	r3, [sp, #16]
 801cfcc:	9a06      	ldr	r2, [sp, #24]
 801cfce:	3b01      	subs	r3, #1
 801cfd0:	4313      	orrs	r3, r2
 801cfd2:	4682      	mov	sl, r0
 801cfd4:	468b      	mov	fp, r1
 801cfd6:	f040 81e7 	bne.w	801d3a8 <__ieee754_pow+0x700>
 801cfda:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801d090 <__ieee754_pow+0x3e8>
 801cfde:	eeb0 8a47 	vmov.f32	s16, s14
 801cfe2:	eef0 8a67 	vmov.f32	s17, s15
 801cfe6:	e9dd 6700 	ldrd	r6, r7, [sp]
 801cfea:	2600      	movs	r6, #0
 801cfec:	4632      	mov	r2, r6
 801cfee:	463b      	mov	r3, r7
 801cff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cff4:	f7e3 f948 	bl	8000288 <__aeabi_dsub>
 801cff8:	4622      	mov	r2, r4
 801cffa:	462b      	mov	r3, r5
 801cffc:	f7e3 fafc 	bl	80005f8 <__aeabi_dmul>
 801d000:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d004:	4680      	mov	r8, r0
 801d006:	4689      	mov	r9, r1
 801d008:	4650      	mov	r0, sl
 801d00a:	4659      	mov	r1, fp
 801d00c:	f7e3 faf4 	bl	80005f8 <__aeabi_dmul>
 801d010:	4602      	mov	r2, r0
 801d012:	460b      	mov	r3, r1
 801d014:	4640      	mov	r0, r8
 801d016:	4649      	mov	r1, r9
 801d018:	f7e3 f938 	bl	800028c <__adddf3>
 801d01c:	4632      	mov	r2, r6
 801d01e:	463b      	mov	r3, r7
 801d020:	4680      	mov	r8, r0
 801d022:	4689      	mov	r9, r1
 801d024:	4620      	mov	r0, r4
 801d026:	4629      	mov	r1, r5
 801d028:	f7e3 fae6 	bl	80005f8 <__aeabi_dmul>
 801d02c:	460b      	mov	r3, r1
 801d02e:	4604      	mov	r4, r0
 801d030:	460d      	mov	r5, r1
 801d032:	4602      	mov	r2, r0
 801d034:	4649      	mov	r1, r9
 801d036:	4640      	mov	r0, r8
 801d038:	f7e3 f928 	bl	800028c <__adddf3>
 801d03c:	4b19      	ldr	r3, [pc, #100]	; (801d0a4 <__ieee754_pow+0x3fc>)
 801d03e:	4299      	cmp	r1, r3
 801d040:	ec45 4b19 	vmov	d9, r4, r5
 801d044:	4606      	mov	r6, r0
 801d046:	460f      	mov	r7, r1
 801d048:	468b      	mov	fp, r1
 801d04a:	f340 82f1 	ble.w	801d630 <__ieee754_pow+0x988>
 801d04e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801d052:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801d056:	4303      	orrs	r3, r0
 801d058:	f000 81e4 	beq.w	801d424 <__ieee754_pow+0x77c>
 801d05c:	ec51 0b18 	vmov	r0, r1, d8
 801d060:	2200      	movs	r2, #0
 801d062:	2300      	movs	r3, #0
 801d064:	f7e3 fd3a 	bl	8000adc <__aeabi_dcmplt>
 801d068:	3800      	subs	r0, #0
 801d06a:	bf18      	it	ne
 801d06c:	2001      	movne	r0, #1
 801d06e:	e72b      	b.n	801cec8 <__ieee754_pow+0x220>
 801d070:	60000000 	.word	0x60000000
 801d074:	3ff71547 	.word	0x3ff71547
 801d078:	f85ddf44 	.word	0xf85ddf44
 801d07c:	3e54ae0b 	.word	0x3e54ae0b
 801d080:	55555555 	.word	0x55555555
 801d084:	3fd55555 	.word	0x3fd55555
 801d088:	652b82fe 	.word	0x652b82fe
 801d08c:	3ff71547 	.word	0x3ff71547
 801d090:	00000000 	.word	0x00000000
 801d094:	bff00000 	.word	0xbff00000
 801d098:	3ff00000 	.word	0x3ff00000
 801d09c:	3fd00000 	.word	0x3fd00000
 801d0a0:	3fe00000 	.word	0x3fe00000
 801d0a4:	408fffff 	.word	0x408fffff
 801d0a8:	4bd5      	ldr	r3, [pc, #852]	; (801d400 <__ieee754_pow+0x758>)
 801d0aa:	402b      	ands	r3, r5
 801d0ac:	2200      	movs	r2, #0
 801d0ae:	b92b      	cbnz	r3, 801d0bc <__ieee754_pow+0x414>
 801d0b0:	4bd4      	ldr	r3, [pc, #848]	; (801d404 <__ieee754_pow+0x75c>)
 801d0b2:	f7e3 faa1 	bl	80005f8 <__aeabi_dmul>
 801d0b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801d0ba:	460c      	mov	r4, r1
 801d0bc:	1523      	asrs	r3, r4, #20
 801d0be:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801d0c2:	4413      	add	r3, r2
 801d0c4:	9305      	str	r3, [sp, #20]
 801d0c6:	4bd0      	ldr	r3, [pc, #832]	; (801d408 <__ieee754_pow+0x760>)
 801d0c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d0cc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801d0d0:	429c      	cmp	r4, r3
 801d0d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801d0d6:	dd08      	ble.n	801d0ea <__ieee754_pow+0x442>
 801d0d8:	4bcc      	ldr	r3, [pc, #816]	; (801d40c <__ieee754_pow+0x764>)
 801d0da:	429c      	cmp	r4, r3
 801d0dc:	f340 8162 	ble.w	801d3a4 <__ieee754_pow+0x6fc>
 801d0e0:	9b05      	ldr	r3, [sp, #20]
 801d0e2:	3301      	adds	r3, #1
 801d0e4:	9305      	str	r3, [sp, #20]
 801d0e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801d0ea:	2400      	movs	r4, #0
 801d0ec:	00e3      	lsls	r3, r4, #3
 801d0ee:	9307      	str	r3, [sp, #28]
 801d0f0:	4bc7      	ldr	r3, [pc, #796]	; (801d410 <__ieee754_pow+0x768>)
 801d0f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d0f6:	ed93 7b00 	vldr	d7, [r3]
 801d0fa:	4629      	mov	r1, r5
 801d0fc:	ec53 2b17 	vmov	r2, r3, d7
 801d100:	eeb0 9a47 	vmov.f32	s18, s14
 801d104:	eef0 9a67 	vmov.f32	s19, s15
 801d108:	4682      	mov	sl, r0
 801d10a:	f7e3 f8bd 	bl	8000288 <__aeabi_dsub>
 801d10e:	4652      	mov	r2, sl
 801d110:	4606      	mov	r6, r0
 801d112:	460f      	mov	r7, r1
 801d114:	462b      	mov	r3, r5
 801d116:	ec51 0b19 	vmov	r0, r1, d9
 801d11a:	f7e3 f8b7 	bl	800028c <__adddf3>
 801d11e:	4602      	mov	r2, r0
 801d120:	460b      	mov	r3, r1
 801d122:	2000      	movs	r0, #0
 801d124:	49bb      	ldr	r1, [pc, #748]	; (801d414 <__ieee754_pow+0x76c>)
 801d126:	f7e3 fb91 	bl	800084c <__aeabi_ddiv>
 801d12a:	ec41 0b1a 	vmov	d10, r0, r1
 801d12e:	4602      	mov	r2, r0
 801d130:	460b      	mov	r3, r1
 801d132:	4630      	mov	r0, r6
 801d134:	4639      	mov	r1, r7
 801d136:	f7e3 fa5f 	bl	80005f8 <__aeabi_dmul>
 801d13a:	2300      	movs	r3, #0
 801d13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d140:	9302      	str	r3, [sp, #8]
 801d142:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d146:	46ab      	mov	fp, r5
 801d148:	106d      	asrs	r5, r5, #1
 801d14a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801d14e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801d152:	ec41 0b18 	vmov	d8, r0, r1
 801d156:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801d15a:	2200      	movs	r2, #0
 801d15c:	4640      	mov	r0, r8
 801d15e:	4649      	mov	r1, r9
 801d160:	4614      	mov	r4, r2
 801d162:	461d      	mov	r5, r3
 801d164:	f7e3 fa48 	bl	80005f8 <__aeabi_dmul>
 801d168:	4602      	mov	r2, r0
 801d16a:	460b      	mov	r3, r1
 801d16c:	4630      	mov	r0, r6
 801d16e:	4639      	mov	r1, r7
 801d170:	f7e3 f88a 	bl	8000288 <__aeabi_dsub>
 801d174:	ec53 2b19 	vmov	r2, r3, d9
 801d178:	4606      	mov	r6, r0
 801d17a:	460f      	mov	r7, r1
 801d17c:	4620      	mov	r0, r4
 801d17e:	4629      	mov	r1, r5
 801d180:	f7e3 f882 	bl	8000288 <__aeabi_dsub>
 801d184:	4602      	mov	r2, r0
 801d186:	460b      	mov	r3, r1
 801d188:	4650      	mov	r0, sl
 801d18a:	4659      	mov	r1, fp
 801d18c:	f7e3 f87c 	bl	8000288 <__aeabi_dsub>
 801d190:	4642      	mov	r2, r8
 801d192:	464b      	mov	r3, r9
 801d194:	f7e3 fa30 	bl	80005f8 <__aeabi_dmul>
 801d198:	4602      	mov	r2, r0
 801d19a:	460b      	mov	r3, r1
 801d19c:	4630      	mov	r0, r6
 801d19e:	4639      	mov	r1, r7
 801d1a0:	f7e3 f872 	bl	8000288 <__aeabi_dsub>
 801d1a4:	ec53 2b1a 	vmov	r2, r3, d10
 801d1a8:	f7e3 fa26 	bl	80005f8 <__aeabi_dmul>
 801d1ac:	ec53 2b18 	vmov	r2, r3, d8
 801d1b0:	ec41 0b19 	vmov	d9, r0, r1
 801d1b4:	ec51 0b18 	vmov	r0, r1, d8
 801d1b8:	f7e3 fa1e 	bl	80005f8 <__aeabi_dmul>
 801d1bc:	a37c      	add	r3, pc, #496	; (adr r3, 801d3b0 <__ieee754_pow+0x708>)
 801d1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1c2:	4604      	mov	r4, r0
 801d1c4:	460d      	mov	r5, r1
 801d1c6:	f7e3 fa17 	bl	80005f8 <__aeabi_dmul>
 801d1ca:	a37b      	add	r3, pc, #492	; (adr r3, 801d3b8 <__ieee754_pow+0x710>)
 801d1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1d0:	f7e3 f85c 	bl	800028c <__adddf3>
 801d1d4:	4622      	mov	r2, r4
 801d1d6:	462b      	mov	r3, r5
 801d1d8:	f7e3 fa0e 	bl	80005f8 <__aeabi_dmul>
 801d1dc:	a378      	add	r3, pc, #480	; (adr r3, 801d3c0 <__ieee754_pow+0x718>)
 801d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1e2:	f7e3 f853 	bl	800028c <__adddf3>
 801d1e6:	4622      	mov	r2, r4
 801d1e8:	462b      	mov	r3, r5
 801d1ea:	f7e3 fa05 	bl	80005f8 <__aeabi_dmul>
 801d1ee:	a376      	add	r3, pc, #472	; (adr r3, 801d3c8 <__ieee754_pow+0x720>)
 801d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1f4:	f7e3 f84a 	bl	800028c <__adddf3>
 801d1f8:	4622      	mov	r2, r4
 801d1fa:	462b      	mov	r3, r5
 801d1fc:	f7e3 f9fc 	bl	80005f8 <__aeabi_dmul>
 801d200:	a373      	add	r3, pc, #460	; (adr r3, 801d3d0 <__ieee754_pow+0x728>)
 801d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d206:	f7e3 f841 	bl	800028c <__adddf3>
 801d20a:	4622      	mov	r2, r4
 801d20c:	462b      	mov	r3, r5
 801d20e:	f7e3 f9f3 	bl	80005f8 <__aeabi_dmul>
 801d212:	a371      	add	r3, pc, #452	; (adr r3, 801d3d8 <__ieee754_pow+0x730>)
 801d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d218:	f7e3 f838 	bl	800028c <__adddf3>
 801d21c:	4622      	mov	r2, r4
 801d21e:	4606      	mov	r6, r0
 801d220:	460f      	mov	r7, r1
 801d222:	462b      	mov	r3, r5
 801d224:	4620      	mov	r0, r4
 801d226:	4629      	mov	r1, r5
 801d228:	f7e3 f9e6 	bl	80005f8 <__aeabi_dmul>
 801d22c:	4602      	mov	r2, r0
 801d22e:	460b      	mov	r3, r1
 801d230:	4630      	mov	r0, r6
 801d232:	4639      	mov	r1, r7
 801d234:	f7e3 f9e0 	bl	80005f8 <__aeabi_dmul>
 801d238:	4642      	mov	r2, r8
 801d23a:	4604      	mov	r4, r0
 801d23c:	460d      	mov	r5, r1
 801d23e:	464b      	mov	r3, r9
 801d240:	ec51 0b18 	vmov	r0, r1, d8
 801d244:	f7e3 f822 	bl	800028c <__adddf3>
 801d248:	ec53 2b19 	vmov	r2, r3, d9
 801d24c:	f7e3 f9d4 	bl	80005f8 <__aeabi_dmul>
 801d250:	4622      	mov	r2, r4
 801d252:	462b      	mov	r3, r5
 801d254:	f7e3 f81a 	bl	800028c <__adddf3>
 801d258:	4642      	mov	r2, r8
 801d25a:	4682      	mov	sl, r0
 801d25c:	468b      	mov	fp, r1
 801d25e:	464b      	mov	r3, r9
 801d260:	4640      	mov	r0, r8
 801d262:	4649      	mov	r1, r9
 801d264:	f7e3 f9c8 	bl	80005f8 <__aeabi_dmul>
 801d268:	4b6b      	ldr	r3, [pc, #428]	; (801d418 <__ieee754_pow+0x770>)
 801d26a:	2200      	movs	r2, #0
 801d26c:	4606      	mov	r6, r0
 801d26e:	460f      	mov	r7, r1
 801d270:	f7e3 f80c 	bl	800028c <__adddf3>
 801d274:	4652      	mov	r2, sl
 801d276:	465b      	mov	r3, fp
 801d278:	f7e3 f808 	bl	800028c <__adddf3>
 801d27c:	2000      	movs	r0, #0
 801d27e:	4604      	mov	r4, r0
 801d280:	460d      	mov	r5, r1
 801d282:	4602      	mov	r2, r0
 801d284:	460b      	mov	r3, r1
 801d286:	4640      	mov	r0, r8
 801d288:	4649      	mov	r1, r9
 801d28a:	f7e3 f9b5 	bl	80005f8 <__aeabi_dmul>
 801d28e:	4b62      	ldr	r3, [pc, #392]	; (801d418 <__ieee754_pow+0x770>)
 801d290:	4680      	mov	r8, r0
 801d292:	4689      	mov	r9, r1
 801d294:	2200      	movs	r2, #0
 801d296:	4620      	mov	r0, r4
 801d298:	4629      	mov	r1, r5
 801d29a:	f7e2 fff5 	bl	8000288 <__aeabi_dsub>
 801d29e:	4632      	mov	r2, r6
 801d2a0:	463b      	mov	r3, r7
 801d2a2:	f7e2 fff1 	bl	8000288 <__aeabi_dsub>
 801d2a6:	4602      	mov	r2, r0
 801d2a8:	460b      	mov	r3, r1
 801d2aa:	4650      	mov	r0, sl
 801d2ac:	4659      	mov	r1, fp
 801d2ae:	f7e2 ffeb 	bl	8000288 <__aeabi_dsub>
 801d2b2:	ec53 2b18 	vmov	r2, r3, d8
 801d2b6:	f7e3 f99f 	bl	80005f8 <__aeabi_dmul>
 801d2ba:	4622      	mov	r2, r4
 801d2bc:	4606      	mov	r6, r0
 801d2be:	460f      	mov	r7, r1
 801d2c0:	462b      	mov	r3, r5
 801d2c2:	ec51 0b19 	vmov	r0, r1, d9
 801d2c6:	f7e3 f997 	bl	80005f8 <__aeabi_dmul>
 801d2ca:	4602      	mov	r2, r0
 801d2cc:	460b      	mov	r3, r1
 801d2ce:	4630      	mov	r0, r6
 801d2d0:	4639      	mov	r1, r7
 801d2d2:	f7e2 ffdb 	bl	800028c <__adddf3>
 801d2d6:	4606      	mov	r6, r0
 801d2d8:	460f      	mov	r7, r1
 801d2da:	4602      	mov	r2, r0
 801d2dc:	460b      	mov	r3, r1
 801d2de:	4640      	mov	r0, r8
 801d2e0:	4649      	mov	r1, r9
 801d2e2:	f7e2 ffd3 	bl	800028c <__adddf3>
 801d2e6:	a33e      	add	r3, pc, #248	; (adr r3, 801d3e0 <__ieee754_pow+0x738>)
 801d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ec:	2000      	movs	r0, #0
 801d2ee:	4604      	mov	r4, r0
 801d2f0:	460d      	mov	r5, r1
 801d2f2:	f7e3 f981 	bl	80005f8 <__aeabi_dmul>
 801d2f6:	4642      	mov	r2, r8
 801d2f8:	ec41 0b18 	vmov	d8, r0, r1
 801d2fc:	464b      	mov	r3, r9
 801d2fe:	4620      	mov	r0, r4
 801d300:	4629      	mov	r1, r5
 801d302:	f7e2 ffc1 	bl	8000288 <__aeabi_dsub>
 801d306:	4602      	mov	r2, r0
 801d308:	460b      	mov	r3, r1
 801d30a:	4630      	mov	r0, r6
 801d30c:	4639      	mov	r1, r7
 801d30e:	f7e2 ffbb 	bl	8000288 <__aeabi_dsub>
 801d312:	a335      	add	r3, pc, #212	; (adr r3, 801d3e8 <__ieee754_pow+0x740>)
 801d314:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d318:	f7e3 f96e 	bl	80005f8 <__aeabi_dmul>
 801d31c:	a334      	add	r3, pc, #208	; (adr r3, 801d3f0 <__ieee754_pow+0x748>)
 801d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d322:	4606      	mov	r6, r0
 801d324:	460f      	mov	r7, r1
 801d326:	4620      	mov	r0, r4
 801d328:	4629      	mov	r1, r5
 801d32a:	f7e3 f965 	bl	80005f8 <__aeabi_dmul>
 801d32e:	4602      	mov	r2, r0
 801d330:	460b      	mov	r3, r1
 801d332:	4630      	mov	r0, r6
 801d334:	4639      	mov	r1, r7
 801d336:	f7e2 ffa9 	bl	800028c <__adddf3>
 801d33a:	9a07      	ldr	r2, [sp, #28]
 801d33c:	4b37      	ldr	r3, [pc, #220]	; (801d41c <__ieee754_pow+0x774>)
 801d33e:	4413      	add	r3, r2
 801d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d344:	f7e2 ffa2 	bl	800028c <__adddf3>
 801d348:	4682      	mov	sl, r0
 801d34a:	9805      	ldr	r0, [sp, #20]
 801d34c:	468b      	mov	fp, r1
 801d34e:	f7e3 f8e9 	bl	8000524 <__aeabi_i2d>
 801d352:	9a07      	ldr	r2, [sp, #28]
 801d354:	4b32      	ldr	r3, [pc, #200]	; (801d420 <__ieee754_pow+0x778>)
 801d356:	4413      	add	r3, r2
 801d358:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d35c:	4606      	mov	r6, r0
 801d35e:	460f      	mov	r7, r1
 801d360:	4652      	mov	r2, sl
 801d362:	465b      	mov	r3, fp
 801d364:	ec51 0b18 	vmov	r0, r1, d8
 801d368:	f7e2 ff90 	bl	800028c <__adddf3>
 801d36c:	4642      	mov	r2, r8
 801d36e:	464b      	mov	r3, r9
 801d370:	f7e2 ff8c 	bl	800028c <__adddf3>
 801d374:	4632      	mov	r2, r6
 801d376:	463b      	mov	r3, r7
 801d378:	f7e2 ff88 	bl	800028c <__adddf3>
 801d37c:	2000      	movs	r0, #0
 801d37e:	4632      	mov	r2, r6
 801d380:	463b      	mov	r3, r7
 801d382:	4604      	mov	r4, r0
 801d384:	460d      	mov	r5, r1
 801d386:	f7e2 ff7f 	bl	8000288 <__aeabi_dsub>
 801d38a:	4642      	mov	r2, r8
 801d38c:	464b      	mov	r3, r9
 801d38e:	f7e2 ff7b 	bl	8000288 <__aeabi_dsub>
 801d392:	ec53 2b18 	vmov	r2, r3, d8
 801d396:	f7e2 ff77 	bl	8000288 <__aeabi_dsub>
 801d39a:	4602      	mov	r2, r0
 801d39c:	460b      	mov	r3, r1
 801d39e:	4650      	mov	r0, sl
 801d3a0:	4659      	mov	r1, fp
 801d3a2:	e610      	b.n	801cfc6 <__ieee754_pow+0x31e>
 801d3a4:	2401      	movs	r4, #1
 801d3a6:	e6a1      	b.n	801d0ec <__ieee754_pow+0x444>
 801d3a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801d3f8 <__ieee754_pow+0x750>
 801d3ac:	e617      	b.n	801cfde <__ieee754_pow+0x336>
 801d3ae:	bf00      	nop
 801d3b0:	4a454eef 	.word	0x4a454eef
 801d3b4:	3fca7e28 	.word	0x3fca7e28
 801d3b8:	93c9db65 	.word	0x93c9db65
 801d3bc:	3fcd864a 	.word	0x3fcd864a
 801d3c0:	a91d4101 	.word	0xa91d4101
 801d3c4:	3fd17460 	.word	0x3fd17460
 801d3c8:	518f264d 	.word	0x518f264d
 801d3cc:	3fd55555 	.word	0x3fd55555
 801d3d0:	db6fabff 	.word	0xdb6fabff
 801d3d4:	3fdb6db6 	.word	0x3fdb6db6
 801d3d8:	33333303 	.word	0x33333303
 801d3dc:	3fe33333 	.word	0x3fe33333
 801d3e0:	e0000000 	.word	0xe0000000
 801d3e4:	3feec709 	.word	0x3feec709
 801d3e8:	dc3a03fd 	.word	0xdc3a03fd
 801d3ec:	3feec709 	.word	0x3feec709
 801d3f0:	145b01f5 	.word	0x145b01f5
 801d3f4:	be3e2fe0 	.word	0xbe3e2fe0
 801d3f8:	00000000 	.word	0x00000000
 801d3fc:	3ff00000 	.word	0x3ff00000
 801d400:	7ff00000 	.word	0x7ff00000
 801d404:	43400000 	.word	0x43400000
 801d408:	0003988e 	.word	0x0003988e
 801d40c:	000bb679 	.word	0x000bb679
 801d410:	08029a80 	.word	0x08029a80
 801d414:	3ff00000 	.word	0x3ff00000
 801d418:	40080000 	.word	0x40080000
 801d41c:	08029aa0 	.word	0x08029aa0
 801d420:	08029a90 	.word	0x08029a90
 801d424:	a3b5      	add	r3, pc, #724	; (adr r3, 801d6fc <__ieee754_pow+0xa54>)
 801d426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d42a:	4640      	mov	r0, r8
 801d42c:	4649      	mov	r1, r9
 801d42e:	f7e2 ff2d 	bl	800028c <__adddf3>
 801d432:	4622      	mov	r2, r4
 801d434:	ec41 0b1a 	vmov	d10, r0, r1
 801d438:	462b      	mov	r3, r5
 801d43a:	4630      	mov	r0, r6
 801d43c:	4639      	mov	r1, r7
 801d43e:	f7e2 ff23 	bl	8000288 <__aeabi_dsub>
 801d442:	4602      	mov	r2, r0
 801d444:	460b      	mov	r3, r1
 801d446:	ec51 0b1a 	vmov	r0, r1, d10
 801d44a:	f7e3 fb65 	bl	8000b18 <__aeabi_dcmpgt>
 801d44e:	2800      	cmp	r0, #0
 801d450:	f47f ae04 	bne.w	801d05c <__ieee754_pow+0x3b4>
 801d454:	4aa4      	ldr	r2, [pc, #656]	; (801d6e8 <__ieee754_pow+0xa40>)
 801d456:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d45a:	4293      	cmp	r3, r2
 801d45c:	f340 8108 	ble.w	801d670 <__ieee754_pow+0x9c8>
 801d460:	151b      	asrs	r3, r3, #20
 801d462:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801d466:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801d46a:	fa4a f303 	asr.w	r3, sl, r3
 801d46e:	445b      	add	r3, fp
 801d470:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801d474:	4e9d      	ldr	r6, [pc, #628]	; (801d6ec <__ieee754_pow+0xa44>)
 801d476:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801d47a:	4116      	asrs	r6, r2
 801d47c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801d480:	2000      	movs	r0, #0
 801d482:	ea23 0106 	bic.w	r1, r3, r6
 801d486:	f1c2 0214 	rsb	r2, r2, #20
 801d48a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801d48e:	fa4a fa02 	asr.w	sl, sl, r2
 801d492:	f1bb 0f00 	cmp.w	fp, #0
 801d496:	4602      	mov	r2, r0
 801d498:	460b      	mov	r3, r1
 801d49a:	4620      	mov	r0, r4
 801d49c:	4629      	mov	r1, r5
 801d49e:	bfb8      	it	lt
 801d4a0:	f1ca 0a00 	rsblt	sl, sl, #0
 801d4a4:	f7e2 fef0 	bl	8000288 <__aeabi_dsub>
 801d4a8:	ec41 0b19 	vmov	d9, r0, r1
 801d4ac:	4642      	mov	r2, r8
 801d4ae:	464b      	mov	r3, r9
 801d4b0:	ec51 0b19 	vmov	r0, r1, d9
 801d4b4:	f7e2 feea 	bl	800028c <__adddf3>
 801d4b8:	a37b      	add	r3, pc, #492	; (adr r3, 801d6a8 <__ieee754_pow+0xa00>)
 801d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4be:	2000      	movs	r0, #0
 801d4c0:	4604      	mov	r4, r0
 801d4c2:	460d      	mov	r5, r1
 801d4c4:	f7e3 f898 	bl	80005f8 <__aeabi_dmul>
 801d4c8:	ec53 2b19 	vmov	r2, r3, d9
 801d4cc:	4606      	mov	r6, r0
 801d4ce:	460f      	mov	r7, r1
 801d4d0:	4620      	mov	r0, r4
 801d4d2:	4629      	mov	r1, r5
 801d4d4:	f7e2 fed8 	bl	8000288 <__aeabi_dsub>
 801d4d8:	4602      	mov	r2, r0
 801d4da:	460b      	mov	r3, r1
 801d4dc:	4640      	mov	r0, r8
 801d4de:	4649      	mov	r1, r9
 801d4e0:	f7e2 fed2 	bl	8000288 <__aeabi_dsub>
 801d4e4:	a372      	add	r3, pc, #456	; (adr r3, 801d6b0 <__ieee754_pow+0xa08>)
 801d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4ea:	f7e3 f885 	bl	80005f8 <__aeabi_dmul>
 801d4ee:	a372      	add	r3, pc, #456	; (adr r3, 801d6b8 <__ieee754_pow+0xa10>)
 801d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4f4:	4680      	mov	r8, r0
 801d4f6:	4689      	mov	r9, r1
 801d4f8:	4620      	mov	r0, r4
 801d4fa:	4629      	mov	r1, r5
 801d4fc:	f7e3 f87c 	bl	80005f8 <__aeabi_dmul>
 801d500:	4602      	mov	r2, r0
 801d502:	460b      	mov	r3, r1
 801d504:	4640      	mov	r0, r8
 801d506:	4649      	mov	r1, r9
 801d508:	f7e2 fec0 	bl	800028c <__adddf3>
 801d50c:	4604      	mov	r4, r0
 801d50e:	460d      	mov	r5, r1
 801d510:	4602      	mov	r2, r0
 801d512:	460b      	mov	r3, r1
 801d514:	4630      	mov	r0, r6
 801d516:	4639      	mov	r1, r7
 801d518:	f7e2 feb8 	bl	800028c <__adddf3>
 801d51c:	4632      	mov	r2, r6
 801d51e:	463b      	mov	r3, r7
 801d520:	4680      	mov	r8, r0
 801d522:	4689      	mov	r9, r1
 801d524:	f7e2 feb0 	bl	8000288 <__aeabi_dsub>
 801d528:	4602      	mov	r2, r0
 801d52a:	460b      	mov	r3, r1
 801d52c:	4620      	mov	r0, r4
 801d52e:	4629      	mov	r1, r5
 801d530:	f7e2 feaa 	bl	8000288 <__aeabi_dsub>
 801d534:	4642      	mov	r2, r8
 801d536:	4606      	mov	r6, r0
 801d538:	460f      	mov	r7, r1
 801d53a:	464b      	mov	r3, r9
 801d53c:	4640      	mov	r0, r8
 801d53e:	4649      	mov	r1, r9
 801d540:	f7e3 f85a 	bl	80005f8 <__aeabi_dmul>
 801d544:	a35e      	add	r3, pc, #376	; (adr r3, 801d6c0 <__ieee754_pow+0xa18>)
 801d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d54a:	4604      	mov	r4, r0
 801d54c:	460d      	mov	r5, r1
 801d54e:	f7e3 f853 	bl	80005f8 <__aeabi_dmul>
 801d552:	a35d      	add	r3, pc, #372	; (adr r3, 801d6c8 <__ieee754_pow+0xa20>)
 801d554:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d558:	f7e2 fe96 	bl	8000288 <__aeabi_dsub>
 801d55c:	4622      	mov	r2, r4
 801d55e:	462b      	mov	r3, r5
 801d560:	f7e3 f84a 	bl	80005f8 <__aeabi_dmul>
 801d564:	a35a      	add	r3, pc, #360	; (adr r3, 801d6d0 <__ieee754_pow+0xa28>)
 801d566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d56a:	f7e2 fe8f 	bl	800028c <__adddf3>
 801d56e:	4622      	mov	r2, r4
 801d570:	462b      	mov	r3, r5
 801d572:	f7e3 f841 	bl	80005f8 <__aeabi_dmul>
 801d576:	a358      	add	r3, pc, #352	; (adr r3, 801d6d8 <__ieee754_pow+0xa30>)
 801d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d57c:	f7e2 fe84 	bl	8000288 <__aeabi_dsub>
 801d580:	4622      	mov	r2, r4
 801d582:	462b      	mov	r3, r5
 801d584:	f7e3 f838 	bl	80005f8 <__aeabi_dmul>
 801d588:	a355      	add	r3, pc, #340	; (adr r3, 801d6e0 <__ieee754_pow+0xa38>)
 801d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d58e:	f7e2 fe7d 	bl	800028c <__adddf3>
 801d592:	4622      	mov	r2, r4
 801d594:	462b      	mov	r3, r5
 801d596:	f7e3 f82f 	bl	80005f8 <__aeabi_dmul>
 801d59a:	4602      	mov	r2, r0
 801d59c:	460b      	mov	r3, r1
 801d59e:	4640      	mov	r0, r8
 801d5a0:	4649      	mov	r1, r9
 801d5a2:	f7e2 fe71 	bl	8000288 <__aeabi_dsub>
 801d5a6:	4604      	mov	r4, r0
 801d5a8:	460d      	mov	r5, r1
 801d5aa:	4602      	mov	r2, r0
 801d5ac:	460b      	mov	r3, r1
 801d5ae:	4640      	mov	r0, r8
 801d5b0:	4649      	mov	r1, r9
 801d5b2:	f7e3 f821 	bl	80005f8 <__aeabi_dmul>
 801d5b6:	2200      	movs	r2, #0
 801d5b8:	ec41 0b19 	vmov	d9, r0, r1
 801d5bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d5c0:	4620      	mov	r0, r4
 801d5c2:	4629      	mov	r1, r5
 801d5c4:	f7e2 fe60 	bl	8000288 <__aeabi_dsub>
 801d5c8:	4602      	mov	r2, r0
 801d5ca:	460b      	mov	r3, r1
 801d5cc:	ec51 0b19 	vmov	r0, r1, d9
 801d5d0:	f7e3 f93c 	bl	800084c <__aeabi_ddiv>
 801d5d4:	4632      	mov	r2, r6
 801d5d6:	4604      	mov	r4, r0
 801d5d8:	460d      	mov	r5, r1
 801d5da:	463b      	mov	r3, r7
 801d5dc:	4640      	mov	r0, r8
 801d5de:	4649      	mov	r1, r9
 801d5e0:	f7e3 f80a 	bl	80005f8 <__aeabi_dmul>
 801d5e4:	4632      	mov	r2, r6
 801d5e6:	463b      	mov	r3, r7
 801d5e8:	f7e2 fe50 	bl	800028c <__adddf3>
 801d5ec:	4602      	mov	r2, r0
 801d5ee:	460b      	mov	r3, r1
 801d5f0:	4620      	mov	r0, r4
 801d5f2:	4629      	mov	r1, r5
 801d5f4:	f7e2 fe48 	bl	8000288 <__aeabi_dsub>
 801d5f8:	4642      	mov	r2, r8
 801d5fa:	464b      	mov	r3, r9
 801d5fc:	f7e2 fe44 	bl	8000288 <__aeabi_dsub>
 801d600:	460b      	mov	r3, r1
 801d602:	4602      	mov	r2, r0
 801d604:	493a      	ldr	r1, [pc, #232]	; (801d6f0 <__ieee754_pow+0xa48>)
 801d606:	2000      	movs	r0, #0
 801d608:	f7e2 fe3e 	bl	8000288 <__aeabi_dsub>
 801d60c:	ec41 0b10 	vmov	d0, r0, r1
 801d610:	ee10 3a90 	vmov	r3, s1
 801d614:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801d618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d61c:	da2b      	bge.n	801d676 <__ieee754_pow+0x9ce>
 801d61e:	4650      	mov	r0, sl
 801d620:	f000 f96a 	bl	801d8f8 <scalbn>
 801d624:	ec51 0b10 	vmov	r0, r1, d0
 801d628:	ec53 2b18 	vmov	r2, r3, d8
 801d62c:	f7ff bbed 	b.w	801ce0a <__ieee754_pow+0x162>
 801d630:	4b30      	ldr	r3, [pc, #192]	; (801d6f4 <__ieee754_pow+0xa4c>)
 801d632:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801d636:	429e      	cmp	r6, r3
 801d638:	f77f af0c 	ble.w	801d454 <__ieee754_pow+0x7ac>
 801d63c:	4b2e      	ldr	r3, [pc, #184]	; (801d6f8 <__ieee754_pow+0xa50>)
 801d63e:	440b      	add	r3, r1
 801d640:	4303      	orrs	r3, r0
 801d642:	d009      	beq.n	801d658 <__ieee754_pow+0x9b0>
 801d644:	ec51 0b18 	vmov	r0, r1, d8
 801d648:	2200      	movs	r2, #0
 801d64a:	2300      	movs	r3, #0
 801d64c:	f7e3 fa46 	bl	8000adc <__aeabi_dcmplt>
 801d650:	3800      	subs	r0, #0
 801d652:	bf18      	it	ne
 801d654:	2001      	movne	r0, #1
 801d656:	e447      	b.n	801cee8 <__ieee754_pow+0x240>
 801d658:	4622      	mov	r2, r4
 801d65a:	462b      	mov	r3, r5
 801d65c:	f7e2 fe14 	bl	8000288 <__aeabi_dsub>
 801d660:	4642      	mov	r2, r8
 801d662:	464b      	mov	r3, r9
 801d664:	f7e3 fa4e 	bl	8000b04 <__aeabi_dcmpge>
 801d668:	2800      	cmp	r0, #0
 801d66a:	f43f aef3 	beq.w	801d454 <__ieee754_pow+0x7ac>
 801d66e:	e7e9      	b.n	801d644 <__ieee754_pow+0x99c>
 801d670:	f04f 0a00 	mov.w	sl, #0
 801d674:	e71a      	b.n	801d4ac <__ieee754_pow+0x804>
 801d676:	ec51 0b10 	vmov	r0, r1, d0
 801d67a:	4619      	mov	r1, r3
 801d67c:	e7d4      	b.n	801d628 <__ieee754_pow+0x980>
 801d67e:	491c      	ldr	r1, [pc, #112]	; (801d6f0 <__ieee754_pow+0xa48>)
 801d680:	2000      	movs	r0, #0
 801d682:	f7ff bb30 	b.w	801cce6 <__ieee754_pow+0x3e>
 801d686:	2000      	movs	r0, #0
 801d688:	2100      	movs	r1, #0
 801d68a:	f7ff bb2c 	b.w	801cce6 <__ieee754_pow+0x3e>
 801d68e:	4630      	mov	r0, r6
 801d690:	4639      	mov	r1, r7
 801d692:	f7ff bb28 	b.w	801cce6 <__ieee754_pow+0x3e>
 801d696:	9204      	str	r2, [sp, #16]
 801d698:	f7ff bb7a 	b.w	801cd90 <__ieee754_pow+0xe8>
 801d69c:	2300      	movs	r3, #0
 801d69e:	f7ff bb64 	b.w	801cd6a <__ieee754_pow+0xc2>
 801d6a2:	bf00      	nop
 801d6a4:	f3af 8000 	nop.w
 801d6a8:	00000000 	.word	0x00000000
 801d6ac:	3fe62e43 	.word	0x3fe62e43
 801d6b0:	fefa39ef 	.word	0xfefa39ef
 801d6b4:	3fe62e42 	.word	0x3fe62e42
 801d6b8:	0ca86c39 	.word	0x0ca86c39
 801d6bc:	be205c61 	.word	0xbe205c61
 801d6c0:	72bea4d0 	.word	0x72bea4d0
 801d6c4:	3e663769 	.word	0x3e663769
 801d6c8:	c5d26bf1 	.word	0xc5d26bf1
 801d6cc:	3ebbbd41 	.word	0x3ebbbd41
 801d6d0:	af25de2c 	.word	0xaf25de2c
 801d6d4:	3f11566a 	.word	0x3f11566a
 801d6d8:	16bebd93 	.word	0x16bebd93
 801d6dc:	3f66c16c 	.word	0x3f66c16c
 801d6e0:	5555553e 	.word	0x5555553e
 801d6e4:	3fc55555 	.word	0x3fc55555
 801d6e8:	3fe00000 	.word	0x3fe00000
 801d6ec:	000fffff 	.word	0x000fffff
 801d6f0:	3ff00000 	.word	0x3ff00000
 801d6f4:	4090cbff 	.word	0x4090cbff
 801d6f8:	3f6f3400 	.word	0x3f6f3400
 801d6fc:	652b82fe 	.word	0x652b82fe
 801d700:	3c971547 	.word	0x3c971547

0801d704 <__ieee754_sqrt>:
 801d704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d708:	ec55 4b10 	vmov	r4, r5, d0
 801d70c:	4e55      	ldr	r6, [pc, #340]	; (801d864 <__ieee754_sqrt+0x160>)
 801d70e:	43ae      	bics	r6, r5
 801d710:	ee10 0a10 	vmov	r0, s0
 801d714:	ee10 3a10 	vmov	r3, s0
 801d718:	462a      	mov	r2, r5
 801d71a:	4629      	mov	r1, r5
 801d71c:	d110      	bne.n	801d740 <__ieee754_sqrt+0x3c>
 801d71e:	ee10 2a10 	vmov	r2, s0
 801d722:	462b      	mov	r3, r5
 801d724:	f7e2 ff68 	bl	80005f8 <__aeabi_dmul>
 801d728:	4602      	mov	r2, r0
 801d72a:	460b      	mov	r3, r1
 801d72c:	4620      	mov	r0, r4
 801d72e:	4629      	mov	r1, r5
 801d730:	f7e2 fdac 	bl	800028c <__adddf3>
 801d734:	4604      	mov	r4, r0
 801d736:	460d      	mov	r5, r1
 801d738:	ec45 4b10 	vmov	d0, r4, r5
 801d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d740:	2d00      	cmp	r5, #0
 801d742:	dc10      	bgt.n	801d766 <__ieee754_sqrt+0x62>
 801d744:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d748:	4330      	orrs	r0, r6
 801d74a:	d0f5      	beq.n	801d738 <__ieee754_sqrt+0x34>
 801d74c:	b15d      	cbz	r5, 801d766 <__ieee754_sqrt+0x62>
 801d74e:	ee10 2a10 	vmov	r2, s0
 801d752:	462b      	mov	r3, r5
 801d754:	ee10 0a10 	vmov	r0, s0
 801d758:	f7e2 fd96 	bl	8000288 <__aeabi_dsub>
 801d75c:	4602      	mov	r2, r0
 801d75e:	460b      	mov	r3, r1
 801d760:	f7e3 f874 	bl	800084c <__aeabi_ddiv>
 801d764:	e7e6      	b.n	801d734 <__ieee754_sqrt+0x30>
 801d766:	1512      	asrs	r2, r2, #20
 801d768:	d074      	beq.n	801d854 <__ieee754_sqrt+0x150>
 801d76a:	07d4      	lsls	r4, r2, #31
 801d76c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801d770:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801d774:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801d778:	bf5e      	ittt	pl
 801d77a:	0fda      	lsrpl	r2, r3, #31
 801d77c:	005b      	lslpl	r3, r3, #1
 801d77e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801d782:	2400      	movs	r4, #0
 801d784:	0fda      	lsrs	r2, r3, #31
 801d786:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801d78a:	107f      	asrs	r7, r7, #1
 801d78c:	005b      	lsls	r3, r3, #1
 801d78e:	2516      	movs	r5, #22
 801d790:	4620      	mov	r0, r4
 801d792:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801d796:	1886      	adds	r6, r0, r2
 801d798:	428e      	cmp	r6, r1
 801d79a:	bfde      	ittt	le
 801d79c:	1b89      	suble	r1, r1, r6
 801d79e:	18b0      	addle	r0, r6, r2
 801d7a0:	18a4      	addle	r4, r4, r2
 801d7a2:	0049      	lsls	r1, r1, #1
 801d7a4:	3d01      	subs	r5, #1
 801d7a6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801d7aa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801d7ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d7b2:	d1f0      	bne.n	801d796 <__ieee754_sqrt+0x92>
 801d7b4:	462a      	mov	r2, r5
 801d7b6:	f04f 0e20 	mov.w	lr, #32
 801d7ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801d7be:	4281      	cmp	r1, r0
 801d7c0:	eb06 0c05 	add.w	ip, r6, r5
 801d7c4:	dc02      	bgt.n	801d7cc <__ieee754_sqrt+0xc8>
 801d7c6:	d113      	bne.n	801d7f0 <__ieee754_sqrt+0xec>
 801d7c8:	459c      	cmp	ip, r3
 801d7ca:	d811      	bhi.n	801d7f0 <__ieee754_sqrt+0xec>
 801d7cc:	f1bc 0f00 	cmp.w	ip, #0
 801d7d0:	eb0c 0506 	add.w	r5, ip, r6
 801d7d4:	da43      	bge.n	801d85e <__ieee754_sqrt+0x15a>
 801d7d6:	2d00      	cmp	r5, #0
 801d7d8:	db41      	blt.n	801d85e <__ieee754_sqrt+0x15a>
 801d7da:	f100 0801 	add.w	r8, r0, #1
 801d7de:	1a09      	subs	r1, r1, r0
 801d7e0:	459c      	cmp	ip, r3
 801d7e2:	bf88      	it	hi
 801d7e4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801d7e8:	eba3 030c 	sub.w	r3, r3, ip
 801d7ec:	4432      	add	r2, r6
 801d7ee:	4640      	mov	r0, r8
 801d7f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801d7f4:	f1be 0e01 	subs.w	lr, lr, #1
 801d7f8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801d7fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d800:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801d804:	d1db      	bne.n	801d7be <__ieee754_sqrt+0xba>
 801d806:	430b      	orrs	r3, r1
 801d808:	d006      	beq.n	801d818 <__ieee754_sqrt+0x114>
 801d80a:	1c50      	adds	r0, r2, #1
 801d80c:	bf13      	iteet	ne
 801d80e:	3201      	addne	r2, #1
 801d810:	3401      	addeq	r4, #1
 801d812:	4672      	moveq	r2, lr
 801d814:	f022 0201 	bicne.w	r2, r2, #1
 801d818:	1063      	asrs	r3, r4, #1
 801d81a:	0852      	lsrs	r2, r2, #1
 801d81c:	07e1      	lsls	r1, r4, #31
 801d81e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d822:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d826:	bf48      	it	mi
 801d828:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801d82c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801d830:	4614      	mov	r4, r2
 801d832:	e781      	b.n	801d738 <__ieee754_sqrt+0x34>
 801d834:	0ad9      	lsrs	r1, r3, #11
 801d836:	3815      	subs	r0, #21
 801d838:	055b      	lsls	r3, r3, #21
 801d83a:	2900      	cmp	r1, #0
 801d83c:	d0fa      	beq.n	801d834 <__ieee754_sqrt+0x130>
 801d83e:	02cd      	lsls	r5, r1, #11
 801d840:	d50a      	bpl.n	801d858 <__ieee754_sqrt+0x154>
 801d842:	f1c2 0420 	rsb	r4, r2, #32
 801d846:	fa23 f404 	lsr.w	r4, r3, r4
 801d84a:	1e55      	subs	r5, r2, #1
 801d84c:	4093      	lsls	r3, r2
 801d84e:	4321      	orrs	r1, r4
 801d850:	1b42      	subs	r2, r0, r5
 801d852:	e78a      	b.n	801d76a <__ieee754_sqrt+0x66>
 801d854:	4610      	mov	r0, r2
 801d856:	e7f0      	b.n	801d83a <__ieee754_sqrt+0x136>
 801d858:	0049      	lsls	r1, r1, #1
 801d85a:	3201      	adds	r2, #1
 801d85c:	e7ef      	b.n	801d83e <__ieee754_sqrt+0x13a>
 801d85e:	4680      	mov	r8, r0
 801d860:	e7bd      	b.n	801d7de <__ieee754_sqrt+0xda>
 801d862:	bf00      	nop
 801d864:	7ff00000 	.word	0x7ff00000

0801d868 <__ieee754_sqrtf>:
 801d868:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d86c:	4770      	bx	lr

0801d86e <with_errno>:
 801d86e:	b570      	push	{r4, r5, r6, lr}
 801d870:	4604      	mov	r4, r0
 801d872:	460d      	mov	r5, r1
 801d874:	4616      	mov	r6, r2
 801d876:	f000 f8e3 	bl	801da40 <__errno>
 801d87a:	4629      	mov	r1, r5
 801d87c:	6006      	str	r6, [r0, #0]
 801d87e:	4620      	mov	r0, r4
 801d880:	bd70      	pop	{r4, r5, r6, pc}

0801d882 <xflow>:
 801d882:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d884:	4614      	mov	r4, r2
 801d886:	461d      	mov	r5, r3
 801d888:	b108      	cbz	r0, 801d88e <xflow+0xc>
 801d88a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d88e:	e9cd 2300 	strd	r2, r3, [sp]
 801d892:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d896:	4620      	mov	r0, r4
 801d898:	4629      	mov	r1, r5
 801d89a:	f7e2 fead 	bl	80005f8 <__aeabi_dmul>
 801d89e:	2222      	movs	r2, #34	; 0x22
 801d8a0:	b003      	add	sp, #12
 801d8a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d8a6:	f7ff bfe2 	b.w	801d86e <with_errno>

0801d8aa <__math_uflow>:
 801d8aa:	b508      	push	{r3, lr}
 801d8ac:	2200      	movs	r2, #0
 801d8ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801d8b2:	f7ff ffe6 	bl	801d882 <xflow>
 801d8b6:	ec41 0b10 	vmov	d0, r0, r1
 801d8ba:	bd08      	pop	{r3, pc}

0801d8bc <__math_oflow>:
 801d8bc:	b508      	push	{r3, lr}
 801d8be:	2200      	movs	r2, #0
 801d8c0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801d8c4:	f7ff ffdd 	bl	801d882 <xflow>
 801d8c8:	ec41 0b10 	vmov	d0, r0, r1
 801d8cc:	bd08      	pop	{r3, pc}

0801d8ce <fabs>:
 801d8ce:	ec51 0b10 	vmov	r0, r1, d0
 801d8d2:	ee10 2a10 	vmov	r2, s0
 801d8d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d8da:	ec43 2b10 	vmov	d0, r2, r3
 801d8de:	4770      	bx	lr

0801d8e0 <finite>:
 801d8e0:	b082      	sub	sp, #8
 801d8e2:	ed8d 0b00 	vstr	d0, [sp]
 801d8e6:	9801      	ldr	r0, [sp, #4]
 801d8e8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801d8ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801d8f0:	0fc0      	lsrs	r0, r0, #31
 801d8f2:	b002      	add	sp, #8
 801d8f4:	4770      	bx	lr
	...

0801d8f8 <scalbn>:
 801d8f8:	b570      	push	{r4, r5, r6, lr}
 801d8fa:	ec55 4b10 	vmov	r4, r5, d0
 801d8fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801d902:	4606      	mov	r6, r0
 801d904:	462b      	mov	r3, r5
 801d906:	b99a      	cbnz	r2, 801d930 <scalbn+0x38>
 801d908:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801d90c:	4323      	orrs	r3, r4
 801d90e:	d036      	beq.n	801d97e <scalbn+0x86>
 801d910:	4b39      	ldr	r3, [pc, #228]	; (801d9f8 <scalbn+0x100>)
 801d912:	4629      	mov	r1, r5
 801d914:	ee10 0a10 	vmov	r0, s0
 801d918:	2200      	movs	r2, #0
 801d91a:	f7e2 fe6d 	bl	80005f8 <__aeabi_dmul>
 801d91e:	4b37      	ldr	r3, [pc, #220]	; (801d9fc <scalbn+0x104>)
 801d920:	429e      	cmp	r6, r3
 801d922:	4604      	mov	r4, r0
 801d924:	460d      	mov	r5, r1
 801d926:	da10      	bge.n	801d94a <scalbn+0x52>
 801d928:	a32b      	add	r3, pc, #172	; (adr r3, 801d9d8 <scalbn+0xe0>)
 801d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d92e:	e03a      	b.n	801d9a6 <scalbn+0xae>
 801d930:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801d934:	428a      	cmp	r2, r1
 801d936:	d10c      	bne.n	801d952 <scalbn+0x5a>
 801d938:	ee10 2a10 	vmov	r2, s0
 801d93c:	4620      	mov	r0, r4
 801d93e:	4629      	mov	r1, r5
 801d940:	f7e2 fca4 	bl	800028c <__adddf3>
 801d944:	4604      	mov	r4, r0
 801d946:	460d      	mov	r5, r1
 801d948:	e019      	b.n	801d97e <scalbn+0x86>
 801d94a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801d94e:	460b      	mov	r3, r1
 801d950:	3a36      	subs	r2, #54	; 0x36
 801d952:	4432      	add	r2, r6
 801d954:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801d958:	428a      	cmp	r2, r1
 801d95a:	dd08      	ble.n	801d96e <scalbn+0x76>
 801d95c:	2d00      	cmp	r5, #0
 801d95e:	a120      	add	r1, pc, #128	; (adr r1, 801d9e0 <scalbn+0xe8>)
 801d960:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d964:	da1c      	bge.n	801d9a0 <scalbn+0xa8>
 801d966:	a120      	add	r1, pc, #128	; (adr r1, 801d9e8 <scalbn+0xf0>)
 801d968:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d96c:	e018      	b.n	801d9a0 <scalbn+0xa8>
 801d96e:	2a00      	cmp	r2, #0
 801d970:	dd08      	ble.n	801d984 <scalbn+0x8c>
 801d972:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d976:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d97a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801d97e:	ec45 4b10 	vmov	d0, r4, r5
 801d982:	bd70      	pop	{r4, r5, r6, pc}
 801d984:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801d988:	da19      	bge.n	801d9be <scalbn+0xc6>
 801d98a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d98e:	429e      	cmp	r6, r3
 801d990:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801d994:	dd0a      	ble.n	801d9ac <scalbn+0xb4>
 801d996:	a112      	add	r1, pc, #72	; (adr r1, 801d9e0 <scalbn+0xe8>)
 801d998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	d1e2      	bne.n	801d966 <scalbn+0x6e>
 801d9a0:	a30f      	add	r3, pc, #60	; (adr r3, 801d9e0 <scalbn+0xe8>)
 801d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9a6:	f7e2 fe27 	bl	80005f8 <__aeabi_dmul>
 801d9aa:	e7cb      	b.n	801d944 <scalbn+0x4c>
 801d9ac:	a10a      	add	r1, pc, #40	; (adr r1, 801d9d8 <scalbn+0xe0>)
 801d9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d0b8      	beq.n	801d928 <scalbn+0x30>
 801d9b6:	a10e      	add	r1, pc, #56	; (adr r1, 801d9f0 <scalbn+0xf8>)
 801d9b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d9bc:	e7b4      	b.n	801d928 <scalbn+0x30>
 801d9be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d9c2:	3236      	adds	r2, #54	; 0x36
 801d9c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801d9c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801d9cc:	4620      	mov	r0, r4
 801d9ce:	4b0c      	ldr	r3, [pc, #48]	; (801da00 <scalbn+0x108>)
 801d9d0:	2200      	movs	r2, #0
 801d9d2:	e7e8      	b.n	801d9a6 <scalbn+0xae>
 801d9d4:	f3af 8000 	nop.w
 801d9d8:	c2f8f359 	.word	0xc2f8f359
 801d9dc:	01a56e1f 	.word	0x01a56e1f
 801d9e0:	8800759c 	.word	0x8800759c
 801d9e4:	7e37e43c 	.word	0x7e37e43c
 801d9e8:	8800759c 	.word	0x8800759c
 801d9ec:	fe37e43c 	.word	0xfe37e43c
 801d9f0:	c2f8f359 	.word	0xc2f8f359
 801d9f4:	81a56e1f 	.word	0x81a56e1f
 801d9f8:	43500000 	.word	0x43500000
 801d9fc:	ffff3cb0 	.word	0xffff3cb0
 801da00:	3c900000 	.word	0x3c900000

0801da04 <__assert_func>:
 801da04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801da06:	4614      	mov	r4, r2
 801da08:	461a      	mov	r2, r3
 801da0a:	4b09      	ldr	r3, [pc, #36]	; (801da30 <__assert_func+0x2c>)
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	4605      	mov	r5, r0
 801da10:	68d8      	ldr	r0, [r3, #12]
 801da12:	b14c      	cbz	r4, 801da28 <__assert_func+0x24>
 801da14:	4b07      	ldr	r3, [pc, #28]	; (801da34 <__assert_func+0x30>)
 801da16:	9100      	str	r1, [sp, #0]
 801da18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801da1c:	4906      	ldr	r1, [pc, #24]	; (801da38 <__assert_func+0x34>)
 801da1e:	462b      	mov	r3, r5
 801da20:	f000 f814 	bl	801da4c <fiprintf>
 801da24:	f000 fc0c 	bl	801e240 <abort>
 801da28:	4b04      	ldr	r3, [pc, #16]	; (801da3c <__assert_func+0x38>)
 801da2a:	461c      	mov	r4, r3
 801da2c:	e7f3      	b.n	801da16 <__assert_func+0x12>
 801da2e:	bf00      	nop
 801da30:	20000074 	.word	0x20000074
 801da34:	08029ab0 	.word	0x08029ab0
 801da38:	08029abd 	.word	0x08029abd
 801da3c:	08029aeb 	.word	0x08029aeb

0801da40 <__errno>:
 801da40:	4b01      	ldr	r3, [pc, #4]	; (801da48 <__errno+0x8>)
 801da42:	6818      	ldr	r0, [r3, #0]
 801da44:	4770      	bx	lr
 801da46:	bf00      	nop
 801da48:	20000074 	.word	0x20000074

0801da4c <fiprintf>:
 801da4c:	b40e      	push	{r1, r2, r3}
 801da4e:	b503      	push	{r0, r1, lr}
 801da50:	4601      	mov	r1, r0
 801da52:	ab03      	add	r3, sp, #12
 801da54:	4805      	ldr	r0, [pc, #20]	; (801da6c <fiprintf+0x20>)
 801da56:	f853 2b04 	ldr.w	r2, [r3], #4
 801da5a:	6800      	ldr	r0, [r0, #0]
 801da5c:	9301      	str	r3, [sp, #4]
 801da5e:	f000 f86b 	bl	801db38 <_vfiprintf_r>
 801da62:	b002      	add	sp, #8
 801da64:	f85d eb04 	ldr.w	lr, [sp], #4
 801da68:	b003      	add	sp, #12
 801da6a:	4770      	bx	lr
 801da6c:	20000074 	.word	0x20000074

0801da70 <__libc_init_array>:
 801da70:	b570      	push	{r4, r5, r6, lr}
 801da72:	4d0d      	ldr	r5, [pc, #52]	; (801daa8 <__libc_init_array+0x38>)
 801da74:	4c0d      	ldr	r4, [pc, #52]	; (801daac <__libc_init_array+0x3c>)
 801da76:	1b64      	subs	r4, r4, r5
 801da78:	10a4      	asrs	r4, r4, #2
 801da7a:	2600      	movs	r6, #0
 801da7c:	42a6      	cmp	r6, r4
 801da7e:	d109      	bne.n	801da94 <__libc_init_array+0x24>
 801da80:	4d0b      	ldr	r5, [pc, #44]	; (801dab0 <__libc_init_array+0x40>)
 801da82:	4c0c      	ldr	r4, [pc, #48]	; (801dab4 <__libc_init_array+0x44>)
 801da84:	f000 fff0 	bl	801ea68 <_init>
 801da88:	1b64      	subs	r4, r4, r5
 801da8a:	10a4      	asrs	r4, r4, #2
 801da8c:	2600      	movs	r6, #0
 801da8e:	42a6      	cmp	r6, r4
 801da90:	d105      	bne.n	801da9e <__libc_init_array+0x2e>
 801da92:	bd70      	pop	{r4, r5, r6, pc}
 801da94:	f855 3b04 	ldr.w	r3, [r5], #4
 801da98:	4798      	blx	r3
 801da9a:	3601      	adds	r6, #1
 801da9c:	e7ee      	b.n	801da7c <__libc_init_array+0xc>
 801da9e:	f855 3b04 	ldr.w	r3, [r5], #4
 801daa2:	4798      	blx	r3
 801daa4:	3601      	adds	r6, #1
 801daa6:	e7f2      	b.n	801da8e <__libc_init_array+0x1e>
 801daa8:	08029b8c 	.word	0x08029b8c
 801daac:	08029b8c 	.word	0x08029b8c
 801dab0:	08029b8c 	.word	0x08029b8c
 801dab4:	08029b94 	.word	0x08029b94

0801dab8 <memcpy>:
 801dab8:	440a      	add	r2, r1
 801daba:	4291      	cmp	r1, r2
 801dabc:	f100 33ff 	add.w	r3, r0, #4294967295
 801dac0:	d100      	bne.n	801dac4 <memcpy+0xc>
 801dac2:	4770      	bx	lr
 801dac4:	b510      	push	{r4, lr}
 801dac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801daca:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dace:	4291      	cmp	r1, r2
 801dad0:	d1f9      	bne.n	801dac6 <memcpy+0xe>
 801dad2:	bd10      	pop	{r4, pc}

0801dad4 <memset>:
 801dad4:	4402      	add	r2, r0
 801dad6:	4603      	mov	r3, r0
 801dad8:	4293      	cmp	r3, r2
 801dada:	d100      	bne.n	801dade <memset+0xa>
 801dadc:	4770      	bx	lr
 801dade:	f803 1b01 	strb.w	r1, [r3], #1
 801dae2:	e7f9      	b.n	801dad8 <memset+0x4>

0801dae4 <__sfputc_r>:
 801dae4:	6893      	ldr	r3, [r2, #8]
 801dae6:	3b01      	subs	r3, #1
 801dae8:	2b00      	cmp	r3, #0
 801daea:	b410      	push	{r4}
 801daec:	6093      	str	r3, [r2, #8]
 801daee:	da08      	bge.n	801db02 <__sfputc_r+0x1e>
 801daf0:	6994      	ldr	r4, [r2, #24]
 801daf2:	42a3      	cmp	r3, r4
 801daf4:	db01      	blt.n	801dafa <__sfputc_r+0x16>
 801daf6:	290a      	cmp	r1, #10
 801daf8:	d103      	bne.n	801db02 <__sfputc_r+0x1e>
 801dafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dafe:	f000 badf 	b.w	801e0c0 <__swbuf_r>
 801db02:	6813      	ldr	r3, [r2, #0]
 801db04:	1c58      	adds	r0, r3, #1
 801db06:	6010      	str	r0, [r2, #0]
 801db08:	7019      	strb	r1, [r3, #0]
 801db0a:	4608      	mov	r0, r1
 801db0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db10:	4770      	bx	lr

0801db12 <__sfputs_r>:
 801db12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db14:	4606      	mov	r6, r0
 801db16:	460f      	mov	r7, r1
 801db18:	4614      	mov	r4, r2
 801db1a:	18d5      	adds	r5, r2, r3
 801db1c:	42ac      	cmp	r4, r5
 801db1e:	d101      	bne.n	801db24 <__sfputs_r+0x12>
 801db20:	2000      	movs	r0, #0
 801db22:	e007      	b.n	801db34 <__sfputs_r+0x22>
 801db24:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db28:	463a      	mov	r2, r7
 801db2a:	4630      	mov	r0, r6
 801db2c:	f7ff ffda 	bl	801dae4 <__sfputc_r>
 801db30:	1c43      	adds	r3, r0, #1
 801db32:	d1f3      	bne.n	801db1c <__sfputs_r+0xa>
 801db34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801db38 <_vfiprintf_r>:
 801db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db3c:	460d      	mov	r5, r1
 801db3e:	b09d      	sub	sp, #116	; 0x74
 801db40:	4614      	mov	r4, r2
 801db42:	4698      	mov	r8, r3
 801db44:	4606      	mov	r6, r0
 801db46:	b118      	cbz	r0, 801db50 <_vfiprintf_r+0x18>
 801db48:	6983      	ldr	r3, [r0, #24]
 801db4a:	b90b      	cbnz	r3, 801db50 <_vfiprintf_r+0x18>
 801db4c:	f000 fc9a 	bl	801e484 <__sinit>
 801db50:	4b89      	ldr	r3, [pc, #548]	; (801dd78 <_vfiprintf_r+0x240>)
 801db52:	429d      	cmp	r5, r3
 801db54:	d11b      	bne.n	801db8e <_vfiprintf_r+0x56>
 801db56:	6875      	ldr	r5, [r6, #4]
 801db58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db5a:	07d9      	lsls	r1, r3, #31
 801db5c:	d405      	bmi.n	801db6a <_vfiprintf_r+0x32>
 801db5e:	89ab      	ldrh	r3, [r5, #12]
 801db60:	059a      	lsls	r2, r3, #22
 801db62:	d402      	bmi.n	801db6a <_vfiprintf_r+0x32>
 801db64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db66:	f000 fd2b 	bl	801e5c0 <__retarget_lock_acquire_recursive>
 801db6a:	89ab      	ldrh	r3, [r5, #12]
 801db6c:	071b      	lsls	r3, r3, #28
 801db6e:	d501      	bpl.n	801db74 <_vfiprintf_r+0x3c>
 801db70:	692b      	ldr	r3, [r5, #16]
 801db72:	b9eb      	cbnz	r3, 801dbb0 <_vfiprintf_r+0x78>
 801db74:	4629      	mov	r1, r5
 801db76:	4630      	mov	r0, r6
 801db78:	f000 faf4 	bl	801e164 <__swsetup_r>
 801db7c:	b1c0      	cbz	r0, 801dbb0 <_vfiprintf_r+0x78>
 801db7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db80:	07dc      	lsls	r4, r3, #31
 801db82:	d50e      	bpl.n	801dba2 <_vfiprintf_r+0x6a>
 801db84:	f04f 30ff 	mov.w	r0, #4294967295
 801db88:	b01d      	add	sp, #116	; 0x74
 801db8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db8e:	4b7b      	ldr	r3, [pc, #492]	; (801dd7c <_vfiprintf_r+0x244>)
 801db90:	429d      	cmp	r5, r3
 801db92:	d101      	bne.n	801db98 <_vfiprintf_r+0x60>
 801db94:	68b5      	ldr	r5, [r6, #8]
 801db96:	e7df      	b.n	801db58 <_vfiprintf_r+0x20>
 801db98:	4b79      	ldr	r3, [pc, #484]	; (801dd80 <_vfiprintf_r+0x248>)
 801db9a:	429d      	cmp	r5, r3
 801db9c:	bf08      	it	eq
 801db9e:	68f5      	ldreq	r5, [r6, #12]
 801dba0:	e7da      	b.n	801db58 <_vfiprintf_r+0x20>
 801dba2:	89ab      	ldrh	r3, [r5, #12]
 801dba4:	0598      	lsls	r0, r3, #22
 801dba6:	d4ed      	bmi.n	801db84 <_vfiprintf_r+0x4c>
 801dba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dbaa:	f000 fd0a 	bl	801e5c2 <__retarget_lock_release_recursive>
 801dbae:	e7e9      	b.n	801db84 <_vfiprintf_r+0x4c>
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	9309      	str	r3, [sp, #36]	; 0x24
 801dbb4:	2320      	movs	r3, #32
 801dbb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dbba:	f8cd 800c 	str.w	r8, [sp, #12]
 801dbbe:	2330      	movs	r3, #48	; 0x30
 801dbc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801dd84 <_vfiprintf_r+0x24c>
 801dbc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dbc8:	f04f 0901 	mov.w	r9, #1
 801dbcc:	4623      	mov	r3, r4
 801dbce:	469a      	mov	sl, r3
 801dbd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dbd4:	b10a      	cbz	r2, 801dbda <_vfiprintf_r+0xa2>
 801dbd6:	2a25      	cmp	r2, #37	; 0x25
 801dbd8:	d1f9      	bne.n	801dbce <_vfiprintf_r+0x96>
 801dbda:	ebba 0b04 	subs.w	fp, sl, r4
 801dbde:	d00b      	beq.n	801dbf8 <_vfiprintf_r+0xc0>
 801dbe0:	465b      	mov	r3, fp
 801dbe2:	4622      	mov	r2, r4
 801dbe4:	4629      	mov	r1, r5
 801dbe6:	4630      	mov	r0, r6
 801dbe8:	f7ff ff93 	bl	801db12 <__sfputs_r>
 801dbec:	3001      	adds	r0, #1
 801dbee:	f000 80aa 	beq.w	801dd46 <_vfiprintf_r+0x20e>
 801dbf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dbf4:	445a      	add	r2, fp
 801dbf6:	9209      	str	r2, [sp, #36]	; 0x24
 801dbf8:	f89a 3000 	ldrb.w	r3, [sl]
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	f000 80a2 	beq.w	801dd46 <_vfiprintf_r+0x20e>
 801dc02:	2300      	movs	r3, #0
 801dc04:	f04f 32ff 	mov.w	r2, #4294967295
 801dc08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dc0c:	f10a 0a01 	add.w	sl, sl, #1
 801dc10:	9304      	str	r3, [sp, #16]
 801dc12:	9307      	str	r3, [sp, #28]
 801dc14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dc18:	931a      	str	r3, [sp, #104]	; 0x68
 801dc1a:	4654      	mov	r4, sl
 801dc1c:	2205      	movs	r2, #5
 801dc1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc22:	4858      	ldr	r0, [pc, #352]	; (801dd84 <_vfiprintf_r+0x24c>)
 801dc24:	f7e2 fadc 	bl	80001e0 <memchr>
 801dc28:	9a04      	ldr	r2, [sp, #16]
 801dc2a:	b9d8      	cbnz	r0, 801dc64 <_vfiprintf_r+0x12c>
 801dc2c:	06d1      	lsls	r1, r2, #27
 801dc2e:	bf44      	itt	mi
 801dc30:	2320      	movmi	r3, #32
 801dc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc36:	0713      	lsls	r3, r2, #28
 801dc38:	bf44      	itt	mi
 801dc3a:	232b      	movmi	r3, #43	; 0x2b
 801dc3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc40:	f89a 3000 	ldrb.w	r3, [sl]
 801dc44:	2b2a      	cmp	r3, #42	; 0x2a
 801dc46:	d015      	beq.n	801dc74 <_vfiprintf_r+0x13c>
 801dc48:	9a07      	ldr	r2, [sp, #28]
 801dc4a:	4654      	mov	r4, sl
 801dc4c:	2000      	movs	r0, #0
 801dc4e:	f04f 0c0a 	mov.w	ip, #10
 801dc52:	4621      	mov	r1, r4
 801dc54:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc58:	3b30      	subs	r3, #48	; 0x30
 801dc5a:	2b09      	cmp	r3, #9
 801dc5c:	d94e      	bls.n	801dcfc <_vfiprintf_r+0x1c4>
 801dc5e:	b1b0      	cbz	r0, 801dc8e <_vfiprintf_r+0x156>
 801dc60:	9207      	str	r2, [sp, #28]
 801dc62:	e014      	b.n	801dc8e <_vfiprintf_r+0x156>
 801dc64:	eba0 0308 	sub.w	r3, r0, r8
 801dc68:	fa09 f303 	lsl.w	r3, r9, r3
 801dc6c:	4313      	orrs	r3, r2
 801dc6e:	9304      	str	r3, [sp, #16]
 801dc70:	46a2      	mov	sl, r4
 801dc72:	e7d2      	b.n	801dc1a <_vfiprintf_r+0xe2>
 801dc74:	9b03      	ldr	r3, [sp, #12]
 801dc76:	1d19      	adds	r1, r3, #4
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	9103      	str	r1, [sp, #12]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	bfbb      	ittet	lt
 801dc80:	425b      	neglt	r3, r3
 801dc82:	f042 0202 	orrlt.w	r2, r2, #2
 801dc86:	9307      	strge	r3, [sp, #28]
 801dc88:	9307      	strlt	r3, [sp, #28]
 801dc8a:	bfb8      	it	lt
 801dc8c:	9204      	strlt	r2, [sp, #16]
 801dc8e:	7823      	ldrb	r3, [r4, #0]
 801dc90:	2b2e      	cmp	r3, #46	; 0x2e
 801dc92:	d10c      	bne.n	801dcae <_vfiprintf_r+0x176>
 801dc94:	7863      	ldrb	r3, [r4, #1]
 801dc96:	2b2a      	cmp	r3, #42	; 0x2a
 801dc98:	d135      	bne.n	801dd06 <_vfiprintf_r+0x1ce>
 801dc9a:	9b03      	ldr	r3, [sp, #12]
 801dc9c:	1d1a      	adds	r2, r3, #4
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	9203      	str	r2, [sp, #12]
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	bfb8      	it	lt
 801dca6:	f04f 33ff 	movlt.w	r3, #4294967295
 801dcaa:	3402      	adds	r4, #2
 801dcac:	9305      	str	r3, [sp, #20]
 801dcae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801dd94 <_vfiprintf_r+0x25c>
 801dcb2:	7821      	ldrb	r1, [r4, #0]
 801dcb4:	2203      	movs	r2, #3
 801dcb6:	4650      	mov	r0, sl
 801dcb8:	f7e2 fa92 	bl	80001e0 <memchr>
 801dcbc:	b140      	cbz	r0, 801dcd0 <_vfiprintf_r+0x198>
 801dcbe:	2340      	movs	r3, #64	; 0x40
 801dcc0:	eba0 000a 	sub.w	r0, r0, sl
 801dcc4:	fa03 f000 	lsl.w	r0, r3, r0
 801dcc8:	9b04      	ldr	r3, [sp, #16]
 801dcca:	4303      	orrs	r3, r0
 801dccc:	3401      	adds	r4, #1
 801dcce:	9304      	str	r3, [sp, #16]
 801dcd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcd4:	482c      	ldr	r0, [pc, #176]	; (801dd88 <_vfiprintf_r+0x250>)
 801dcd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dcda:	2206      	movs	r2, #6
 801dcdc:	f7e2 fa80 	bl	80001e0 <memchr>
 801dce0:	2800      	cmp	r0, #0
 801dce2:	d03f      	beq.n	801dd64 <_vfiprintf_r+0x22c>
 801dce4:	4b29      	ldr	r3, [pc, #164]	; (801dd8c <_vfiprintf_r+0x254>)
 801dce6:	bb1b      	cbnz	r3, 801dd30 <_vfiprintf_r+0x1f8>
 801dce8:	9b03      	ldr	r3, [sp, #12]
 801dcea:	3307      	adds	r3, #7
 801dcec:	f023 0307 	bic.w	r3, r3, #7
 801dcf0:	3308      	adds	r3, #8
 801dcf2:	9303      	str	r3, [sp, #12]
 801dcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcf6:	443b      	add	r3, r7
 801dcf8:	9309      	str	r3, [sp, #36]	; 0x24
 801dcfa:	e767      	b.n	801dbcc <_vfiprintf_r+0x94>
 801dcfc:	fb0c 3202 	mla	r2, ip, r2, r3
 801dd00:	460c      	mov	r4, r1
 801dd02:	2001      	movs	r0, #1
 801dd04:	e7a5      	b.n	801dc52 <_vfiprintf_r+0x11a>
 801dd06:	2300      	movs	r3, #0
 801dd08:	3401      	adds	r4, #1
 801dd0a:	9305      	str	r3, [sp, #20]
 801dd0c:	4619      	mov	r1, r3
 801dd0e:	f04f 0c0a 	mov.w	ip, #10
 801dd12:	4620      	mov	r0, r4
 801dd14:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd18:	3a30      	subs	r2, #48	; 0x30
 801dd1a:	2a09      	cmp	r2, #9
 801dd1c:	d903      	bls.n	801dd26 <_vfiprintf_r+0x1ee>
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d0c5      	beq.n	801dcae <_vfiprintf_r+0x176>
 801dd22:	9105      	str	r1, [sp, #20]
 801dd24:	e7c3      	b.n	801dcae <_vfiprintf_r+0x176>
 801dd26:	fb0c 2101 	mla	r1, ip, r1, r2
 801dd2a:	4604      	mov	r4, r0
 801dd2c:	2301      	movs	r3, #1
 801dd2e:	e7f0      	b.n	801dd12 <_vfiprintf_r+0x1da>
 801dd30:	ab03      	add	r3, sp, #12
 801dd32:	9300      	str	r3, [sp, #0]
 801dd34:	462a      	mov	r2, r5
 801dd36:	4b16      	ldr	r3, [pc, #88]	; (801dd90 <_vfiprintf_r+0x258>)
 801dd38:	a904      	add	r1, sp, #16
 801dd3a:	4630      	mov	r0, r6
 801dd3c:	f3af 8000 	nop.w
 801dd40:	4607      	mov	r7, r0
 801dd42:	1c78      	adds	r0, r7, #1
 801dd44:	d1d6      	bne.n	801dcf4 <_vfiprintf_r+0x1bc>
 801dd46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dd48:	07d9      	lsls	r1, r3, #31
 801dd4a:	d405      	bmi.n	801dd58 <_vfiprintf_r+0x220>
 801dd4c:	89ab      	ldrh	r3, [r5, #12]
 801dd4e:	059a      	lsls	r2, r3, #22
 801dd50:	d402      	bmi.n	801dd58 <_vfiprintf_r+0x220>
 801dd52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dd54:	f000 fc35 	bl	801e5c2 <__retarget_lock_release_recursive>
 801dd58:	89ab      	ldrh	r3, [r5, #12]
 801dd5a:	065b      	lsls	r3, r3, #25
 801dd5c:	f53f af12 	bmi.w	801db84 <_vfiprintf_r+0x4c>
 801dd60:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd62:	e711      	b.n	801db88 <_vfiprintf_r+0x50>
 801dd64:	ab03      	add	r3, sp, #12
 801dd66:	9300      	str	r3, [sp, #0]
 801dd68:	462a      	mov	r2, r5
 801dd6a:	4b09      	ldr	r3, [pc, #36]	; (801dd90 <_vfiprintf_r+0x258>)
 801dd6c:	a904      	add	r1, sp, #16
 801dd6e:	4630      	mov	r0, r6
 801dd70:	f000 f880 	bl	801de74 <_printf_i>
 801dd74:	e7e4      	b.n	801dd40 <_vfiprintf_r+0x208>
 801dd76:	bf00      	nop
 801dd78:	08029b44 	.word	0x08029b44
 801dd7c:	08029b64 	.word	0x08029b64
 801dd80:	08029b24 	.word	0x08029b24
 801dd84:	08029af0 	.word	0x08029af0
 801dd88:	08029afa 	.word	0x08029afa
 801dd8c:	00000000 	.word	0x00000000
 801dd90:	0801db13 	.word	0x0801db13
 801dd94:	08029af6 	.word	0x08029af6

0801dd98 <_printf_common>:
 801dd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd9c:	4616      	mov	r6, r2
 801dd9e:	4699      	mov	r9, r3
 801dda0:	688a      	ldr	r2, [r1, #8]
 801dda2:	690b      	ldr	r3, [r1, #16]
 801dda4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801dda8:	4293      	cmp	r3, r2
 801ddaa:	bfb8      	it	lt
 801ddac:	4613      	movlt	r3, r2
 801ddae:	6033      	str	r3, [r6, #0]
 801ddb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ddb4:	4607      	mov	r7, r0
 801ddb6:	460c      	mov	r4, r1
 801ddb8:	b10a      	cbz	r2, 801ddbe <_printf_common+0x26>
 801ddba:	3301      	adds	r3, #1
 801ddbc:	6033      	str	r3, [r6, #0]
 801ddbe:	6823      	ldr	r3, [r4, #0]
 801ddc0:	0699      	lsls	r1, r3, #26
 801ddc2:	bf42      	ittt	mi
 801ddc4:	6833      	ldrmi	r3, [r6, #0]
 801ddc6:	3302      	addmi	r3, #2
 801ddc8:	6033      	strmi	r3, [r6, #0]
 801ddca:	6825      	ldr	r5, [r4, #0]
 801ddcc:	f015 0506 	ands.w	r5, r5, #6
 801ddd0:	d106      	bne.n	801dde0 <_printf_common+0x48>
 801ddd2:	f104 0a19 	add.w	sl, r4, #25
 801ddd6:	68e3      	ldr	r3, [r4, #12]
 801ddd8:	6832      	ldr	r2, [r6, #0]
 801ddda:	1a9b      	subs	r3, r3, r2
 801dddc:	42ab      	cmp	r3, r5
 801ddde:	dc26      	bgt.n	801de2e <_printf_common+0x96>
 801dde0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dde4:	1e13      	subs	r3, r2, #0
 801dde6:	6822      	ldr	r2, [r4, #0]
 801dde8:	bf18      	it	ne
 801ddea:	2301      	movne	r3, #1
 801ddec:	0692      	lsls	r2, r2, #26
 801ddee:	d42b      	bmi.n	801de48 <_printf_common+0xb0>
 801ddf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ddf4:	4649      	mov	r1, r9
 801ddf6:	4638      	mov	r0, r7
 801ddf8:	47c0      	blx	r8
 801ddfa:	3001      	adds	r0, #1
 801ddfc:	d01e      	beq.n	801de3c <_printf_common+0xa4>
 801ddfe:	6823      	ldr	r3, [r4, #0]
 801de00:	68e5      	ldr	r5, [r4, #12]
 801de02:	6832      	ldr	r2, [r6, #0]
 801de04:	f003 0306 	and.w	r3, r3, #6
 801de08:	2b04      	cmp	r3, #4
 801de0a:	bf08      	it	eq
 801de0c:	1aad      	subeq	r5, r5, r2
 801de0e:	68a3      	ldr	r3, [r4, #8]
 801de10:	6922      	ldr	r2, [r4, #16]
 801de12:	bf0c      	ite	eq
 801de14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801de18:	2500      	movne	r5, #0
 801de1a:	4293      	cmp	r3, r2
 801de1c:	bfc4      	itt	gt
 801de1e:	1a9b      	subgt	r3, r3, r2
 801de20:	18ed      	addgt	r5, r5, r3
 801de22:	2600      	movs	r6, #0
 801de24:	341a      	adds	r4, #26
 801de26:	42b5      	cmp	r5, r6
 801de28:	d11a      	bne.n	801de60 <_printf_common+0xc8>
 801de2a:	2000      	movs	r0, #0
 801de2c:	e008      	b.n	801de40 <_printf_common+0xa8>
 801de2e:	2301      	movs	r3, #1
 801de30:	4652      	mov	r2, sl
 801de32:	4649      	mov	r1, r9
 801de34:	4638      	mov	r0, r7
 801de36:	47c0      	blx	r8
 801de38:	3001      	adds	r0, #1
 801de3a:	d103      	bne.n	801de44 <_printf_common+0xac>
 801de3c:	f04f 30ff 	mov.w	r0, #4294967295
 801de40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de44:	3501      	adds	r5, #1
 801de46:	e7c6      	b.n	801ddd6 <_printf_common+0x3e>
 801de48:	18e1      	adds	r1, r4, r3
 801de4a:	1c5a      	adds	r2, r3, #1
 801de4c:	2030      	movs	r0, #48	; 0x30
 801de4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801de52:	4422      	add	r2, r4
 801de54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801de58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801de5c:	3302      	adds	r3, #2
 801de5e:	e7c7      	b.n	801ddf0 <_printf_common+0x58>
 801de60:	2301      	movs	r3, #1
 801de62:	4622      	mov	r2, r4
 801de64:	4649      	mov	r1, r9
 801de66:	4638      	mov	r0, r7
 801de68:	47c0      	blx	r8
 801de6a:	3001      	adds	r0, #1
 801de6c:	d0e6      	beq.n	801de3c <_printf_common+0xa4>
 801de6e:	3601      	adds	r6, #1
 801de70:	e7d9      	b.n	801de26 <_printf_common+0x8e>
	...

0801de74 <_printf_i>:
 801de74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801de78:	7e0f      	ldrb	r7, [r1, #24]
 801de7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801de7c:	2f78      	cmp	r7, #120	; 0x78
 801de7e:	4691      	mov	r9, r2
 801de80:	4680      	mov	r8, r0
 801de82:	460c      	mov	r4, r1
 801de84:	469a      	mov	sl, r3
 801de86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801de8a:	d807      	bhi.n	801de9c <_printf_i+0x28>
 801de8c:	2f62      	cmp	r7, #98	; 0x62
 801de8e:	d80a      	bhi.n	801dea6 <_printf_i+0x32>
 801de90:	2f00      	cmp	r7, #0
 801de92:	f000 80d8 	beq.w	801e046 <_printf_i+0x1d2>
 801de96:	2f58      	cmp	r7, #88	; 0x58
 801de98:	f000 80a3 	beq.w	801dfe2 <_printf_i+0x16e>
 801de9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dea4:	e03a      	b.n	801df1c <_printf_i+0xa8>
 801dea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801deaa:	2b15      	cmp	r3, #21
 801deac:	d8f6      	bhi.n	801de9c <_printf_i+0x28>
 801deae:	a101      	add	r1, pc, #4	; (adr r1, 801deb4 <_printf_i+0x40>)
 801deb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801deb4:	0801df0d 	.word	0x0801df0d
 801deb8:	0801df21 	.word	0x0801df21
 801debc:	0801de9d 	.word	0x0801de9d
 801dec0:	0801de9d 	.word	0x0801de9d
 801dec4:	0801de9d 	.word	0x0801de9d
 801dec8:	0801de9d 	.word	0x0801de9d
 801decc:	0801df21 	.word	0x0801df21
 801ded0:	0801de9d 	.word	0x0801de9d
 801ded4:	0801de9d 	.word	0x0801de9d
 801ded8:	0801de9d 	.word	0x0801de9d
 801dedc:	0801de9d 	.word	0x0801de9d
 801dee0:	0801e02d 	.word	0x0801e02d
 801dee4:	0801df51 	.word	0x0801df51
 801dee8:	0801e00f 	.word	0x0801e00f
 801deec:	0801de9d 	.word	0x0801de9d
 801def0:	0801de9d 	.word	0x0801de9d
 801def4:	0801e04f 	.word	0x0801e04f
 801def8:	0801de9d 	.word	0x0801de9d
 801defc:	0801df51 	.word	0x0801df51
 801df00:	0801de9d 	.word	0x0801de9d
 801df04:	0801de9d 	.word	0x0801de9d
 801df08:	0801e017 	.word	0x0801e017
 801df0c:	682b      	ldr	r3, [r5, #0]
 801df0e:	1d1a      	adds	r2, r3, #4
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	602a      	str	r2, [r5, #0]
 801df14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801df18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801df1c:	2301      	movs	r3, #1
 801df1e:	e0a3      	b.n	801e068 <_printf_i+0x1f4>
 801df20:	6820      	ldr	r0, [r4, #0]
 801df22:	6829      	ldr	r1, [r5, #0]
 801df24:	0606      	lsls	r6, r0, #24
 801df26:	f101 0304 	add.w	r3, r1, #4
 801df2a:	d50a      	bpl.n	801df42 <_printf_i+0xce>
 801df2c:	680e      	ldr	r6, [r1, #0]
 801df2e:	602b      	str	r3, [r5, #0]
 801df30:	2e00      	cmp	r6, #0
 801df32:	da03      	bge.n	801df3c <_printf_i+0xc8>
 801df34:	232d      	movs	r3, #45	; 0x2d
 801df36:	4276      	negs	r6, r6
 801df38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801df3c:	485e      	ldr	r0, [pc, #376]	; (801e0b8 <_printf_i+0x244>)
 801df3e:	230a      	movs	r3, #10
 801df40:	e019      	b.n	801df76 <_printf_i+0x102>
 801df42:	680e      	ldr	r6, [r1, #0]
 801df44:	602b      	str	r3, [r5, #0]
 801df46:	f010 0f40 	tst.w	r0, #64	; 0x40
 801df4a:	bf18      	it	ne
 801df4c:	b236      	sxthne	r6, r6
 801df4e:	e7ef      	b.n	801df30 <_printf_i+0xbc>
 801df50:	682b      	ldr	r3, [r5, #0]
 801df52:	6820      	ldr	r0, [r4, #0]
 801df54:	1d19      	adds	r1, r3, #4
 801df56:	6029      	str	r1, [r5, #0]
 801df58:	0601      	lsls	r1, r0, #24
 801df5a:	d501      	bpl.n	801df60 <_printf_i+0xec>
 801df5c:	681e      	ldr	r6, [r3, #0]
 801df5e:	e002      	b.n	801df66 <_printf_i+0xf2>
 801df60:	0646      	lsls	r6, r0, #25
 801df62:	d5fb      	bpl.n	801df5c <_printf_i+0xe8>
 801df64:	881e      	ldrh	r6, [r3, #0]
 801df66:	4854      	ldr	r0, [pc, #336]	; (801e0b8 <_printf_i+0x244>)
 801df68:	2f6f      	cmp	r7, #111	; 0x6f
 801df6a:	bf0c      	ite	eq
 801df6c:	2308      	moveq	r3, #8
 801df6e:	230a      	movne	r3, #10
 801df70:	2100      	movs	r1, #0
 801df72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801df76:	6865      	ldr	r5, [r4, #4]
 801df78:	60a5      	str	r5, [r4, #8]
 801df7a:	2d00      	cmp	r5, #0
 801df7c:	bfa2      	ittt	ge
 801df7e:	6821      	ldrge	r1, [r4, #0]
 801df80:	f021 0104 	bicge.w	r1, r1, #4
 801df84:	6021      	strge	r1, [r4, #0]
 801df86:	b90e      	cbnz	r6, 801df8c <_printf_i+0x118>
 801df88:	2d00      	cmp	r5, #0
 801df8a:	d04d      	beq.n	801e028 <_printf_i+0x1b4>
 801df8c:	4615      	mov	r5, r2
 801df8e:	fbb6 f1f3 	udiv	r1, r6, r3
 801df92:	fb03 6711 	mls	r7, r3, r1, r6
 801df96:	5dc7      	ldrb	r7, [r0, r7]
 801df98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801df9c:	4637      	mov	r7, r6
 801df9e:	42bb      	cmp	r3, r7
 801dfa0:	460e      	mov	r6, r1
 801dfa2:	d9f4      	bls.n	801df8e <_printf_i+0x11a>
 801dfa4:	2b08      	cmp	r3, #8
 801dfa6:	d10b      	bne.n	801dfc0 <_printf_i+0x14c>
 801dfa8:	6823      	ldr	r3, [r4, #0]
 801dfaa:	07de      	lsls	r6, r3, #31
 801dfac:	d508      	bpl.n	801dfc0 <_printf_i+0x14c>
 801dfae:	6923      	ldr	r3, [r4, #16]
 801dfb0:	6861      	ldr	r1, [r4, #4]
 801dfb2:	4299      	cmp	r1, r3
 801dfb4:	bfde      	ittt	le
 801dfb6:	2330      	movle	r3, #48	; 0x30
 801dfb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801dfbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 801dfc0:	1b52      	subs	r2, r2, r5
 801dfc2:	6122      	str	r2, [r4, #16]
 801dfc4:	f8cd a000 	str.w	sl, [sp]
 801dfc8:	464b      	mov	r3, r9
 801dfca:	aa03      	add	r2, sp, #12
 801dfcc:	4621      	mov	r1, r4
 801dfce:	4640      	mov	r0, r8
 801dfd0:	f7ff fee2 	bl	801dd98 <_printf_common>
 801dfd4:	3001      	adds	r0, #1
 801dfd6:	d14c      	bne.n	801e072 <_printf_i+0x1fe>
 801dfd8:	f04f 30ff 	mov.w	r0, #4294967295
 801dfdc:	b004      	add	sp, #16
 801dfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dfe2:	4835      	ldr	r0, [pc, #212]	; (801e0b8 <_printf_i+0x244>)
 801dfe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801dfe8:	6829      	ldr	r1, [r5, #0]
 801dfea:	6823      	ldr	r3, [r4, #0]
 801dfec:	f851 6b04 	ldr.w	r6, [r1], #4
 801dff0:	6029      	str	r1, [r5, #0]
 801dff2:	061d      	lsls	r5, r3, #24
 801dff4:	d514      	bpl.n	801e020 <_printf_i+0x1ac>
 801dff6:	07df      	lsls	r7, r3, #31
 801dff8:	bf44      	itt	mi
 801dffa:	f043 0320 	orrmi.w	r3, r3, #32
 801dffe:	6023      	strmi	r3, [r4, #0]
 801e000:	b91e      	cbnz	r6, 801e00a <_printf_i+0x196>
 801e002:	6823      	ldr	r3, [r4, #0]
 801e004:	f023 0320 	bic.w	r3, r3, #32
 801e008:	6023      	str	r3, [r4, #0]
 801e00a:	2310      	movs	r3, #16
 801e00c:	e7b0      	b.n	801df70 <_printf_i+0xfc>
 801e00e:	6823      	ldr	r3, [r4, #0]
 801e010:	f043 0320 	orr.w	r3, r3, #32
 801e014:	6023      	str	r3, [r4, #0]
 801e016:	2378      	movs	r3, #120	; 0x78
 801e018:	4828      	ldr	r0, [pc, #160]	; (801e0bc <_printf_i+0x248>)
 801e01a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e01e:	e7e3      	b.n	801dfe8 <_printf_i+0x174>
 801e020:	0659      	lsls	r1, r3, #25
 801e022:	bf48      	it	mi
 801e024:	b2b6      	uxthmi	r6, r6
 801e026:	e7e6      	b.n	801dff6 <_printf_i+0x182>
 801e028:	4615      	mov	r5, r2
 801e02a:	e7bb      	b.n	801dfa4 <_printf_i+0x130>
 801e02c:	682b      	ldr	r3, [r5, #0]
 801e02e:	6826      	ldr	r6, [r4, #0]
 801e030:	6961      	ldr	r1, [r4, #20]
 801e032:	1d18      	adds	r0, r3, #4
 801e034:	6028      	str	r0, [r5, #0]
 801e036:	0635      	lsls	r5, r6, #24
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	d501      	bpl.n	801e040 <_printf_i+0x1cc>
 801e03c:	6019      	str	r1, [r3, #0]
 801e03e:	e002      	b.n	801e046 <_printf_i+0x1d2>
 801e040:	0670      	lsls	r0, r6, #25
 801e042:	d5fb      	bpl.n	801e03c <_printf_i+0x1c8>
 801e044:	8019      	strh	r1, [r3, #0]
 801e046:	2300      	movs	r3, #0
 801e048:	6123      	str	r3, [r4, #16]
 801e04a:	4615      	mov	r5, r2
 801e04c:	e7ba      	b.n	801dfc4 <_printf_i+0x150>
 801e04e:	682b      	ldr	r3, [r5, #0]
 801e050:	1d1a      	adds	r2, r3, #4
 801e052:	602a      	str	r2, [r5, #0]
 801e054:	681d      	ldr	r5, [r3, #0]
 801e056:	6862      	ldr	r2, [r4, #4]
 801e058:	2100      	movs	r1, #0
 801e05a:	4628      	mov	r0, r5
 801e05c:	f7e2 f8c0 	bl	80001e0 <memchr>
 801e060:	b108      	cbz	r0, 801e066 <_printf_i+0x1f2>
 801e062:	1b40      	subs	r0, r0, r5
 801e064:	6060      	str	r0, [r4, #4]
 801e066:	6863      	ldr	r3, [r4, #4]
 801e068:	6123      	str	r3, [r4, #16]
 801e06a:	2300      	movs	r3, #0
 801e06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e070:	e7a8      	b.n	801dfc4 <_printf_i+0x150>
 801e072:	6923      	ldr	r3, [r4, #16]
 801e074:	462a      	mov	r2, r5
 801e076:	4649      	mov	r1, r9
 801e078:	4640      	mov	r0, r8
 801e07a:	47d0      	blx	sl
 801e07c:	3001      	adds	r0, #1
 801e07e:	d0ab      	beq.n	801dfd8 <_printf_i+0x164>
 801e080:	6823      	ldr	r3, [r4, #0]
 801e082:	079b      	lsls	r3, r3, #30
 801e084:	d413      	bmi.n	801e0ae <_printf_i+0x23a>
 801e086:	68e0      	ldr	r0, [r4, #12]
 801e088:	9b03      	ldr	r3, [sp, #12]
 801e08a:	4298      	cmp	r0, r3
 801e08c:	bfb8      	it	lt
 801e08e:	4618      	movlt	r0, r3
 801e090:	e7a4      	b.n	801dfdc <_printf_i+0x168>
 801e092:	2301      	movs	r3, #1
 801e094:	4632      	mov	r2, r6
 801e096:	4649      	mov	r1, r9
 801e098:	4640      	mov	r0, r8
 801e09a:	47d0      	blx	sl
 801e09c:	3001      	adds	r0, #1
 801e09e:	d09b      	beq.n	801dfd8 <_printf_i+0x164>
 801e0a0:	3501      	adds	r5, #1
 801e0a2:	68e3      	ldr	r3, [r4, #12]
 801e0a4:	9903      	ldr	r1, [sp, #12]
 801e0a6:	1a5b      	subs	r3, r3, r1
 801e0a8:	42ab      	cmp	r3, r5
 801e0aa:	dcf2      	bgt.n	801e092 <_printf_i+0x21e>
 801e0ac:	e7eb      	b.n	801e086 <_printf_i+0x212>
 801e0ae:	2500      	movs	r5, #0
 801e0b0:	f104 0619 	add.w	r6, r4, #25
 801e0b4:	e7f5      	b.n	801e0a2 <_printf_i+0x22e>
 801e0b6:	bf00      	nop
 801e0b8:	08029b01 	.word	0x08029b01
 801e0bc:	08029b12 	.word	0x08029b12

0801e0c0 <__swbuf_r>:
 801e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0c2:	460e      	mov	r6, r1
 801e0c4:	4614      	mov	r4, r2
 801e0c6:	4605      	mov	r5, r0
 801e0c8:	b118      	cbz	r0, 801e0d2 <__swbuf_r+0x12>
 801e0ca:	6983      	ldr	r3, [r0, #24]
 801e0cc:	b90b      	cbnz	r3, 801e0d2 <__swbuf_r+0x12>
 801e0ce:	f000 f9d9 	bl	801e484 <__sinit>
 801e0d2:	4b21      	ldr	r3, [pc, #132]	; (801e158 <__swbuf_r+0x98>)
 801e0d4:	429c      	cmp	r4, r3
 801e0d6:	d12b      	bne.n	801e130 <__swbuf_r+0x70>
 801e0d8:	686c      	ldr	r4, [r5, #4]
 801e0da:	69a3      	ldr	r3, [r4, #24]
 801e0dc:	60a3      	str	r3, [r4, #8]
 801e0de:	89a3      	ldrh	r3, [r4, #12]
 801e0e0:	071a      	lsls	r2, r3, #28
 801e0e2:	d52f      	bpl.n	801e144 <__swbuf_r+0x84>
 801e0e4:	6923      	ldr	r3, [r4, #16]
 801e0e6:	b36b      	cbz	r3, 801e144 <__swbuf_r+0x84>
 801e0e8:	6923      	ldr	r3, [r4, #16]
 801e0ea:	6820      	ldr	r0, [r4, #0]
 801e0ec:	1ac0      	subs	r0, r0, r3
 801e0ee:	6963      	ldr	r3, [r4, #20]
 801e0f0:	b2f6      	uxtb	r6, r6
 801e0f2:	4283      	cmp	r3, r0
 801e0f4:	4637      	mov	r7, r6
 801e0f6:	dc04      	bgt.n	801e102 <__swbuf_r+0x42>
 801e0f8:	4621      	mov	r1, r4
 801e0fa:	4628      	mov	r0, r5
 801e0fc:	f000 f92e 	bl	801e35c <_fflush_r>
 801e100:	bb30      	cbnz	r0, 801e150 <__swbuf_r+0x90>
 801e102:	68a3      	ldr	r3, [r4, #8]
 801e104:	3b01      	subs	r3, #1
 801e106:	60a3      	str	r3, [r4, #8]
 801e108:	6823      	ldr	r3, [r4, #0]
 801e10a:	1c5a      	adds	r2, r3, #1
 801e10c:	6022      	str	r2, [r4, #0]
 801e10e:	701e      	strb	r6, [r3, #0]
 801e110:	6963      	ldr	r3, [r4, #20]
 801e112:	3001      	adds	r0, #1
 801e114:	4283      	cmp	r3, r0
 801e116:	d004      	beq.n	801e122 <__swbuf_r+0x62>
 801e118:	89a3      	ldrh	r3, [r4, #12]
 801e11a:	07db      	lsls	r3, r3, #31
 801e11c:	d506      	bpl.n	801e12c <__swbuf_r+0x6c>
 801e11e:	2e0a      	cmp	r6, #10
 801e120:	d104      	bne.n	801e12c <__swbuf_r+0x6c>
 801e122:	4621      	mov	r1, r4
 801e124:	4628      	mov	r0, r5
 801e126:	f000 f919 	bl	801e35c <_fflush_r>
 801e12a:	b988      	cbnz	r0, 801e150 <__swbuf_r+0x90>
 801e12c:	4638      	mov	r0, r7
 801e12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e130:	4b0a      	ldr	r3, [pc, #40]	; (801e15c <__swbuf_r+0x9c>)
 801e132:	429c      	cmp	r4, r3
 801e134:	d101      	bne.n	801e13a <__swbuf_r+0x7a>
 801e136:	68ac      	ldr	r4, [r5, #8]
 801e138:	e7cf      	b.n	801e0da <__swbuf_r+0x1a>
 801e13a:	4b09      	ldr	r3, [pc, #36]	; (801e160 <__swbuf_r+0xa0>)
 801e13c:	429c      	cmp	r4, r3
 801e13e:	bf08      	it	eq
 801e140:	68ec      	ldreq	r4, [r5, #12]
 801e142:	e7ca      	b.n	801e0da <__swbuf_r+0x1a>
 801e144:	4621      	mov	r1, r4
 801e146:	4628      	mov	r0, r5
 801e148:	f000 f80c 	bl	801e164 <__swsetup_r>
 801e14c:	2800      	cmp	r0, #0
 801e14e:	d0cb      	beq.n	801e0e8 <__swbuf_r+0x28>
 801e150:	f04f 37ff 	mov.w	r7, #4294967295
 801e154:	e7ea      	b.n	801e12c <__swbuf_r+0x6c>
 801e156:	bf00      	nop
 801e158:	08029b44 	.word	0x08029b44
 801e15c:	08029b64 	.word	0x08029b64
 801e160:	08029b24 	.word	0x08029b24

0801e164 <__swsetup_r>:
 801e164:	4b32      	ldr	r3, [pc, #200]	; (801e230 <__swsetup_r+0xcc>)
 801e166:	b570      	push	{r4, r5, r6, lr}
 801e168:	681d      	ldr	r5, [r3, #0]
 801e16a:	4606      	mov	r6, r0
 801e16c:	460c      	mov	r4, r1
 801e16e:	b125      	cbz	r5, 801e17a <__swsetup_r+0x16>
 801e170:	69ab      	ldr	r3, [r5, #24]
 801e172:	b913      	cbnz	r3, 801e17a <__swsetup_r+0x16>
 801e174:	4628      	mov	r0, r5
 801e176:	f000 f985 	bl	801e484 <__sinit>
 801e17a:	4b2e      	ldr	r3, [pc, #184]	; (801e234 <__swsetup_r+0xd0>)
 801e17c:	429c      	cmp	r4, r3
 801e17e:	d10f      	bne.n	801e1a0 <__swsetup_r+0x3c>
 801e180:	686c      	ldr	r4, [r5, #4]
 801e182:	89a3      	ldrh	r3, [r4, #12]
 801e184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e188:	0719      	lsls	r1, r3, #28
 801e18a:	d42c      	bmi.n	801e1e6 <__swsetup_r+0x82>
 801e18c:	06dd      	lsls	r5, r3, #27
 801e18e:	d411      	bmi.n	801e1b4 <__swsetup_r+0x50>
 801e190:	2309      	movs	r3, #9
 801e192:	6033      	str	r3, [r6, #0]
 801e194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e198:	81a3      	strh	r3, [r4, #12]
 801e19a:	f04f 30ff 	mov.w	r0, #4294967295
 801e19e:	e03e      	b.n	801e21e <__swsetup_r+0xba>
 801e1a0:	4b25      	ldr	r3, [pc, #148]	; (801e238 <__swsetup_r+0xd4>)
 801e1a2:	429c      	cmp	r4, r3
 801e1a4:	d101      	bne.n	801e1aa <__swsetup_r+0x46>
 801e1a6:	68ac      	ldr	r4, [r5, #8]
 801e1a8:	e7eb      	b.n	801e182 <__swsetup_r+0x1e>
 801e1aa:	4b24      	ldr	r3, [pc, #144]	; (801e23c <__swsetup_r+0xd8>)
 801e1ac:	429c      	cmp	r4, r3
 801e1ae:	bf08      	it	eq
 801e1b0:	68ec      	ldreq	r4, [r5, #12]
 801e1b2:	e7e6      	b.n	801e182 <__swsetup_r+0x1e>
 801e1b4:	0758      	lsls	r0, r3, #29
 801e1b6:	d512      	bpl.n	801e1de <__swsetup_r+0x7a>
 801e1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e1ba:	b141      	cbz	r1, 801e1ce <__swsetup_r+0x6a>
 801e1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e1c0:	4299      	cmp	r1, r3
 801e1c2:	d002      	beq.n	801e1ca <__swsetup_r+0x66>
 801e1c4:	4630      	mov	r0, r6
 801e1c6:	f000 fa63 	bl	801e690 <_free_r>
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	6363      	str	r3, [r4, #52]	; 0x34
 801e1ce:	89a3      	ldrh	r3, [r4, #12]
 801e1d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e1d4:	81a3      	strh	r3, [r4, #12]
 801e1d6:	2300      	movs	r3, #0
 801e1d8:	6063      	str	r3, [r4, #4]
 801e1da:	6923      	ldr	r3, [r4, #16]
 801e1dc:	6023      	str	r3, [r4, #0]
 801e1de:	89a3      	ldrh	r3, [r4, #12]
 801e1e0:	f043 0308 	orr.w	r3, r3, #8
 801e1e4:	81a3      	strh	r3, [r4, #12]
 801e1e6:	6923      	ldr	r3, [r4, #16]
 801e1e8:	b94b      	cbnz	r3, 801e1fe <__swsetup_r+0x9a>
 801e1ea:	89a3      	ldrh	r3, [r4, #12]
 801e1ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e1f4:	d003      	beq.n	801e1fe <__swsetup_r+0x9a>
 801e1f6:	4621      	mov	r1, r4
 801e1f8:	4630      	mov	r0, r6
 801e1fa:	f000 fa09 	bl	801e610 <__smakebuf_r>
 801e1fe:	89a0      	ldrh	r0, [r4, #12]
 801e200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e204:	f010 0301 	ands.w	r3, r0, #1
 801e208:	d00a      	beq.n	801e220 <__swsetup_r+0xbc>
 801e20a:	2300      	movs	r3, #0
 801e20c:	60a3      	str	r3, [r4, #8]
 801e20e:	6963      	ldr	r3, [r4, #20]
 801e210:	425b      	negs	r3, r3
 801e212:	61a3      	str	r3, [r4, #24]
 801e214:	6923      	ldr	r3, [r4, #16]
 801e216:	b943      	cbnz	r3, 801e22a <__swsetup_r+0xc6>
 801e218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e21c:	d1ba      	bne.n	801e194 <__swsetup_r+0x30>
 801e21e:	bd70      	pop	{r4, r5, r6, pc}
 801e220:	0781      	lsls	r1, r0, #30
 801e222:	bf58      	it	pl
 801e224:	6963      	ldrpl	r3, [r4, #20]
 801e226:	60a3      	str	r3, [r4, #8]
 801e228:	e7f4      	b.n	801e214 <__swsetup_r+0xb0>
 801e22a:	2000      	movs	r0, #0
 801e22c:	e7f7      	b.n	801e21e <__swsetup_r+0xba>
 801e22e:	bf00      	nop
 801e230:	20000074 	.word	0x20000074
 801e234:	08029b44 	.word	0x08029b44
 801e238:	08029b64 	.word	0x08029b64
 801e23c:	08029b24 	.word	0x08029b24

0801e240 <abort>:
 801e240:	b508      	push	{r3, lr}
 801e242:	2006      	movs	r0, #6
 801e244:	f000 fb3c 	bl	801e8c0 <raise>
 801e248:	2001      	movs	r0, #1
 801e24a:	f7f7 fcd1 	bl	8015bf0 <_exit>
	...

0801e250 <__sflush_r>:
 801e250:	898a      	ldrh	r2, [r1, #12]
 801e252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e256:	4605      	mov	r5, r0
 801e258:	0710      	lsls	r0, r2, #28
 801e25a:	460c      	mov	r4, r1
 801e25c:	d458      	bmi.n	801e310 <__sflush_r+0xc0>
 801e25e:	684b      	ldr	r3, [r1, #4]
 801e260:	2b00      	cmp	r3, #0
 801e262:	dc05      	bgt.n	801e270 <__sflush_r+0x20>
 801e264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e266:	2b00      	cmp	r3, #0
 801e268:	dc02      	bgt.n	801e270 <__sflush_r+0x20>
 801e26a:	2000      	movs	r0, #0
 801e26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e272:	2e00      	cmp	r6, #0
 801e274:	d0f9      	beq.n	801e26a <__sflush_r+0x1a>
 801e276:	2300      	movs	r3, #0
 801e278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e27c:	682f      	ldr	r7, [r5, #0]
 801e27e:	602b      	str	r3, [r5, #0]
 801e280:	d032      	beq.n	801e2e8 <__sflush_r+0x98>
 801e282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e284:	89a3      	ldrh	r3, [r4, #12]
 801e286:	075a      	lsls	r2, r3, #29
 801e288:	d505      	bpl.n	801e296 <__sflush_r+0x46>
 801e28a:	6863      	ldr	r3, [r4, #4]
 801e28c:	1ac0      	subs	r0, r0, r3
 801e28e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e290:	b10b      	cbz	r3, 801e296 <__sflush_r+0x46>
 801e292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e294:	1ac0      	subs	r0, r0, r3
 801e296:	2300      	movs	r3, #0
 801e298:	4602      	mov	r2, r0
 801e29a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e29c:	6a21      	ldr	r1, [r4, #32]
 801e29e:	4628      	mov	r0, r5
 801e2a0:	47b0      	blx	r6
 801e2a2:	1c43      	adds	r3, r0, #1
 801e2a4:	89a3      	ldrh	r3, [r4, #12]
 801e2a6:	d106      	bne.n	801e2b6 <__sflush_r+0x66>
 801e2a8:	6829      	ldr	r1, [r5, #0]
 801e2aa:	291d      	cmp	r1, #29
 801e2ac:	d82c      	bhi.n	801e308 <__sflush_r+0xb8>
 801e2ae:	4a2a      	ldr	r2, [pc, #168]	; (801e358 <__sflush_r+0x108>)
 801e2b0:	40ca      	lsrs	r2, r1
 801e2b2:	07d6      	lsls	r6, r2, #31
 801e2b4:	d528      	bpl.n	801e308 <__sflush_r+0xb8>
 801e2b6:	2200      	movs	r2, #0
 801e2b8:	6062      	str	r2, [r4, #4]
 801e2ba:	04d9      	lsls	r1, r3, #19
 801e2bc:	6922      	ldr	r2, [r4, #16]
 801e2be:	6022      	str	r2, [r4, #0]
 801e2c0:	d504      	bpl.n	801e2cc <__sflush_r+0x7c>
 801e2c2:	1c42      	adds	r2, r0, #1
 801e2c4:	d101      	bne.n	801e2ca <__sflush_r+0x7a>
 801e2c6:	682b      	ldr	r3, [r5, #0]
 801e2c8:	b903      	cbnz	r3, 801e2cc <__sflush_r+0x7c>
 801e2ca:	6560      	str	r0, [r4, #84]	; 0x54
 801e2cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e2ce:	602f      	str	r7, [r5, #0]
 801e2d0:	2900      	cmp	r1, #0
 801e2d2:	d0ca      	beq.n	801e26a <__sflush_r+0x1a>
 801e2d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e2d8:	4299      	cmp	r1, r3
 801e2da:	d002      	beq.n	801e2e2 <__sflush_r+0x92>
 801e2dc:	4628      	mov	r0, r5
 801e2de:	f000 f9d7 	bl	801e690 <_free_r>
 801e2e2:	2000      	movs	r0, #0
 801e2e4:	6360      	str	r0, [r4, #52]	; 0x34
 801e2e6:	e7c1      	b.n	801e26c <__sflush_r+0x1c>
 801e2e8:	6a21      	ldr	r1, [r4, #32]
 801e2ea:	2301      	movs	r3, #1
 801e2ec:	4628      	mov	r0, r5
 801e2ee:	47b0      	blx	r6
 801e2f0:	1c41      	adds	r1, r0, #1
 801e2f2:	d1c7      	bne.n	801e284 <__sflush_r+0x34>
 801e2f4:	682b      	ldr	r3, [r5, #0]
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	d0c4      	beq.n	801e284 <__sflush_r+0x34>
 801e2fa:	2b1d      	cmp	r3, #29
 801e2fc:	d001      	beq.n	801e302 <__sflush_r+0xb2>
 801e2fe:	2b16      	cmp	r3, #22
 801e300:	d101      	bne.n	801e306 <__sflush_r+0xb6>
 801e302:	602f      	str	r7, [r5, #0]
 801e304:	e7b1      	b.n	801e26a <__sflush_r+0x1a>
 801e306:	89a3      	ldrh	r3, [r4, #12]
 801e308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e30c:	81a3      	strh	r3, [r4, #12]
 801e30e:	e7ad      	b.n	801e26c <__sflush_r+0x1c>
 801e310:	690f      	ldr	r7, [r1, #16]
 801e312:	2f00      	cmp	r7, #0
 801e314:	d0a9      	beq.n	801e26a <__sflush_r+0x1a>
 801e316:	0793      	lsls	r3, r2, #30
 801e318:	680e      	ldr	r6, [r1, #0]
 801e31a:	bf08      	it	eq
 801e31c:	694b      	ldreq	r3, [r1, #20]
 801e31e:	600f      	str	r7, [r1, #0]
 801e320:	bf18      	it	ne
 801e322:	2300      	movne	r3, #0
 801e324:	eba6 0807 	sub.w	r8, r6, r7
 801e328:	608b      	str	r3, [r1, #8]
 801e32a:	f1b8 0f00 	cmp.w	r8, #0
 801e32e:	dd9c      	ble.n	801e26a <__sflush_r+0x1a>
 801e330:	6a21      	ldr	r1, [r4, #32]
 801e332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e334:	4643      	mov	r3, r8
 801e336:	463a      	mov	r2, r7
 801e338:	4628      	mov	r0, r5
 801e33a:	47b0      	blx	r6
 801e33c:	2800      	cmp	r0, #0
 801e33e:	dc06      	bgt.n	801e34e <__sflush_r+0xfe>
 801e340:	89a3      	ldrh	r3, [r4, #12]
 801e342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e346:	81a3      	strh	r3, [r4, #12]
 801e348:	f04f 30ff 	mov.w	r0, #4294967295
 801e34c:	e78e      	b.n	801e26c <__sflush_r+0x1c>
 801e34e:	4407      	add	r7, r0
 801e350:	eba8 0800 	sub.w	r8, r8, r0
 801e354:	e7e9      	b.n	801e32a <__sflush_r+0xda>
 801e356:	bf00      	nop
 801e358:	20400001 	.word	0x20400001

0801e35c <_fflush_r>:
 801e35c:	b538      	push	{r3, r4, r5, lr}
 801e35e:	690b      	ldr	r3, [r1, #16]
 801e360:	4605      	mov	r5, r0
 801e362:	460c      	mov	r4, r1
 801e364:	b913      	cbnz	r3, 801e36c <_fflush_r+0x10>
 801e366:	2500      	movs	r5, #0
 801e368:	4628      	mov	r0, r5
 801e36a:	bd38      	pop	{r3, r4, r5, pc}
 801e36c:	b118      	cbz	r0, 801e376 <_fflush_r+0x1a>
 801e36e:	6983      	ldr	r3, [r0, #24]
 801e370:	b90b      	cbnz	r3, 801e376 <_fflush_r+0x1a>
 801e372:	f000 f887 	bl	801e484 <__sinit>
 801e376:	4b14      	ldr	r3, [pc, #80]	; (801e3c8 <_fflush_r+0x6c>)
 801e378:	429c      	cmp	r4, r3
 801e37a:	d11b      	bne.n	801e3b4 <_fflush_r+0x58>
 801e37c:	686c      	ldr	r4, [r5, #4]
 801e37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e382:	2b00      	cmp	r3, #0
 801e384:	d0ef      	beq.n	801e366 <_fflush_r+0xa>
 801e386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e388:	07d0      	lsls	r0, r2, #31
 801e38a:	d404      	bmi.n	801e396 <_fflush_r+0x3a>
 801e38c:	0599      	lsls	r1, r3, #22
 801e38e:	d402      	bmi.n	801e396 <_fflush_r+0x3a>
 801e390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e392:	f000 f915 	bl	801e5c0 <__retarget_lock_acquire_recursive>
 801e396:	4628      	mov	r0, r5
 801e398:	4621      	mov	r1, r4
 801e39a:	f7ff ff59 	bl	801e250 <__sflush_r>
 801e39e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3a0:	07da      	lsls	r2, r3, #31
 801e3a2:	4605      	mov	r5, r0
 801e3a4:	d4e0      	bmi.n	801e368 <_fflush_r+0xc>
 801e3a6:	89a3      	ldrh	r3, [r4, #12]
 801e3a8:	059b      	lsls	r3, r3, #22
 801e3aa:	d4dd      	bmi.n	801e368 <_fflush_r+0xc>
 801e3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3ae:	f000 f908 	bl	801e5c2 <__retarget_lock_release_recursive>
 801e3b2:	e7d9      	b.n	801e368 <_fflush_r+0xc>
 801e3b4:	4b05      	ldr	r3, [pc, #20]	; (801e3cc <_fflush_r+0x70>)
 801e3b6:	429c      	cmp	r4, r3
 801e3b8:	d101      	bne.n	801e3be <_fflush_r+0x62>
 801e3ba:	68ac      	ldr	r4, [r5, #8]
 801e3bc:	e7df      	b.n	801e37e <_fflush_r+0x22>
 801e3be:	4b04      	ldr	r3, [pc, #16]	; (801e3d0 <_fflush_r+0x74>)
 801e3c0:	429c      	cmp	r4, r3
 801e3c2:	bf08      	it	eq
 801e3c4:	68ec      	ldreq	r4, [r5, #12]
 801e3c6:	e7da      	b.n	801e37e <_fflush_r+0x22>
 801e3c8:	08029b44 	.word	0x08029b44
 801e3cc:	08029b64 	.word	0x08029b64
 801e3d0:	08029b24 	.word	0x08029b24

0801e3d4 <std>:
 801e3d4:	2300      	movs	r3, #0
 801e3d6:	b510      	push	{r4, lr}
 801e3d8:	4604      	mov	r4, r0
 801e3da:	e9c0 3300 	strd	r3, r3, [r0]
 801e3de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e3e2:	6083      	str	r3, [r0, #8]
 801e3e4:	8181      	strh	r1, [r0, #12]
 801e3e6:	6643      	str	r3, [r0, #100]	; 0x64
 801e3e8:	81c2      	strh	r2, [r0, #14]
 801e3ea:	6183      	str	r3, [r0, #24]
 801e3ec:	4619      	mov	r1, r3
 801e3ee:	2208      	movs	r2, #8
 801e3f0:	305c      	adds	r0, #92	; 0x5c
 801e3f2:	f7ff fb6f 	bl	801dad4 <memset>
 801e3f6:	4b05      	ldr	r3, [pc, #20]	; (801e40c <std+0x38>)
 801e3f8:	6263      	str	r3, [r4, #36]	; 0x24
 801e3fa:	4b05      	ldr	r3, [pc, #20]	; (801e410 <std+0x3c>)
 801e3fc:	62a3      	str	r3, [r4, #40]	; 0x28
 801e3fe:	4b05      	ldr	r3, [pc, #20]	; (801e414 <std+0x40>)
 801e400:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e402:	4b05      	ldr	r3, [pc, #20]	; (801e418 <std+0x44>)
 801e404:	6224      	str	r4, [r4, #32]
 801e406:	6323      	str	r3, [r4, #48]	; 0x30
 801e408:	bd10      	pop	{r4, pc}
 801e40a:	bf00      	nop
 801e40c:	0801e8f9 	.word	0x0801e8f9
 801e410:	0801e91b 	.word	0x0801e91b
 801e414:	0801e953 	.word	0x0801e953
 801e418:	0801e977 	.word	0x0801e977

0801e41c <_cleanup_r>:
 801e41c:	4901      	ldr	r1, [pc, #4]	; (801e424 <_cleanup_r+0x8>)
 801e41e:	f000 b8af 	b.w	801e580 <_fwalk_reent>
 801e422:	bf00      	nop
 801e424:	0801e35d 	.word	0x0801e35d

0801e428 <__sfmoreglue>:
 801e428:	b570      	push	{r4, r5, r6, lr}
 801e42a:	2268      	movs	r2, #104	; 0x68
 801e42c:	1e4d      	subs	r5, r1, #1
 801e42e:	4355      	muls	r5, r2
 801e430:	460e      	mov	r6, r1
 801e432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e436:	f000 f997 	bl	801e768 <_malloc_r>
 801e43a:	4604      	mov	r4, r0
 801e43c:	b140      	cbz	r0, 801e450 <__sfmoreglue+0x28>
 801e43e:	2100      	movs	r1, #0
 801e440:	e9c0 1600 	strd	r1, r6, [r0]
 801e444:	300c      	adds	r0, #12
 801e446:	60a0      	str	r0, [r4, #8]
 801e448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e44c:	f7ff fb42 	bl	801dad4 <memset>
 801e450:	4620      	mov	r0, r4
 801e452:	bd70      	pop	{r4, r5, r6, pc}

0801e454 <__sfp_lock_acquire>:
 801e454:	4801      	ldr	r0, [pc, #4]	; (801e45c <__sfp_lock_acquire+0x8>)
 801e456:	f000 b8b3 	b.w	801e5c0 <__retarget_lock_acquire_recursive>
 801e45a:	bf00      	nop
 801e45c:	20000631 	.word	0x20000631

0801e460 <__sfp_lock_release>:
 801e460:	4801      	ldr	r0, [pc, #4]	; (801e468 <__sfp_lock_release+0x8>)
 801e462:	f000 b8ae 	b.w	801e5c2 <__retarget_lock_release_recursive>
 801e466:	bf00      	nop
 801e468:	20000631 	.word	0x20000631

0801e46c <__sinit_lock_acquire>:
 801e46c:	4801      	ldr	r0, [pc, #4]	; (801e474 <__sinit_lock_acquire+0x8>)
 801e46e:	f000 b8a7 	b.w	801e5c0 <__retarget_lock_acquire_recursive>
 801e472:	bf00      	nop
 801e474:	20000632 	.word	0x20000632

0801e478 <__sinit_lock_release>:
 801e478:	4801      	ldr	r0, [pc, #4]	; (801e480 <__sinit_lock_release+0x8>)
 801e47a:	f000 b8a2 	b.w	801e5c2 <__retarget_lock_release_recursive>
 801e47e:	bf00      	nop
 801e480:	20000632 	.word	0x20000632

0801e484 <__sinit>:
 801e484:	b510      	push	{r4, lr}
 801e486:	4604      	mov	r4, r0
 801e488:	f7ff fff0 	bl	801e46c <__sinit_lock_acquire>
 801e48c:	69a3      	ldr	r3, [r4, #24]
 801e48e:	b11b      	cbz	r3, 801e498 <__sinit+0x14>
 801e490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e494:	f7ff bff0 	b.w	801e478 <__sinit_lock_release>
 801e498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e49c:	6523      	str	r3, [r4, #80]	; 0x50
 801e49e:	4b13      	ldr	r3, [pc, #76]	; (801e4ec <__sinit+0x68>)
 801e4a0:	4a13      	ldr	r2, [pc, #76]	; (801e4f0 <__sinit+0x6c>)
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	62a2      	str	r2, [r4, #40]	; 0x28
 801e4a6:	42a3      	cmp	r3, r4
 801e4a8:	bf04      	itt	eq
 801e4aa:	2301      	moveq	r3, #1
 801e4ac:	61a3      	streq	r3, [r4, #24]
 801e4ae:	4620      	mov	r0, r4
 801e4b0:	f000 f820 	bl	801e4f4 <__sfp>
 801e4b4:	6060      	str	r0, [r4, #4]
 801e4b6:	4620      	mov	r0, r4
 801e4b8:	f000 f81c 	bl	801e4f4 <__sfp>
 801e4bc:	60a0      	str	r0, [r4, #8]
 801e4be:	4620      	mov	r0, r4
 801e4c0:	f000 f818 	bl	801e4f4 <__sfp>
 801e4c4:	2200      	movs	r2, #0
 801e4c6:	60e0      	str	r0, [r4, #12]
 801e4c8:	2104      	movs	r1, #4
 801e4ca:	6860      	ldr	r0, [r4, #4]
 801e4cc:	f7ff ff82 	bl	801e3d4 <std>
 801e4d0:	68a0      	ldr	r0, [r4, #8]
 801e4d2:	2201      	movs	r2, #1
 801e4d4:	2109      	movs	r1, #9
 801e4d6:	f7ff ff7d 	bl	801e3d4 <std>
 801e4da:	68e0      	ldr	r0, [r4, #12]
 801e4dc:	2202      	movs	r2, #2
 801e4de:	2112      	movs	r1, #18
 801e4e0:	f7ff ff78 	bl	801e3d4 <std>
 801e4e4:	2301      	movs	r3, #1
 801e4e6:	61a3      	str	r3, [r4, #24]
 801e4e8:	e7d2      	b.n	801e490 <__sinit+0xc>
 801e4ea:	bf00      	nop
 801e4ec:	08029aec 	.word	0x08029aec
 801e4f0:	0801e41d 	.word	0x0801e41d

0801e4f4 <__sfp>:
 801e4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4f6:	4607      	mov	r7, r0
 801e4f8:	f7ff ffac 	bl	801e454 <__sfp_lock_acquire>
 801e4fc:	4b1e      	ldr	r3, [pc, #120]	; (801e578 <__sfp+0x84>)
 801e4fe:	681e      	ldr	r6, [r3, #0]
 801e500:	69b3      	ldr	r3, [r6, #24]
 801e502:	b913      	cbnz	r3, 801e50a <__sfp+0x16>
 801e504:	4630      	mov	r0, r6
 801e506:	f7ff ffbd 	bl	801e484 <__sinit>
 801e50a:	3648      	adds	r6, #72	; 0x48
 801e50c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e510:	3b01      	subs	r3, #1
 801e512:	d503      	bpl.n	801e51c <__sfp+0x28>
 801e514:	6833      	ldr	r3, [r6, #0]
 801e516:	b30b      	cbz	r3, 801e55c <__sfp+0x68>
 801e518:	6836      	ldr	r6, [r6, #0]
 801e51a:	e7f7      	b.n	801e50c <__sfp+0x18>
 801e51c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e520:	b9d5      	cbnz	r5, 801e558 <__sfp+0x64>
 801e522:	4b16      	ldr	r3, [pc, #88]	; (801e57c <__sfp+0x88>)
 801e524:	60e3      	str	r3, [r4, #12]
 801e526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e52a:	6665      	str	r5, [r4, #100]	; 0x64
 801e52c:	f000 f847 	bl	801e5be <__retarget_lock_init_recursive>
 801e530:	f7ff ff96 	bl	801e460 <__sfp_lock_release>
 801e534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e53c:	6025      	str	r5, [r4, #0]
 801e53e:	61a5      	str	r5, [r4, #24]
 801e540:	2208      	movs	r2, #8
 801e542:	4629      	mov	r1, r5
 801e544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e548:	f7ff fac4 	bl	801dad4 <memset>
 801e54c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e554:	4620      	mov	r0, r4
 801e556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e558:	3468      	adds	r4, #104	; 0x68
 801e55a:	e7d9      	b.n	801e510 <__sfp+0x1c>
 801e55c:	2104      	movs	r1, #4
 801e55e:	4638      	mov	r0, r7
 801e560:	f7ff ff62 	bl	801e428 <__sfmoreglue>
 801e564:	4604      	mov	r4, r0
 801e566:	6030      	str	r0, [r6, #0]
 801e568:	2800      	cmp	r0, #0
 801e56a:	d1d5      	bne.n	801e518 <__sfp+0x24>
 801e56c:	f7ff ff78 	bl	801e460 <__sfp_lock_release>
 801e570:	230c      	movs	r3, #12
 801e572:	603b      	str	r3, [r7, #0]
 801e574:	e7ee      	b.n	801e554 <__sfp+0x60>
 801e576:	bf00      	nop
 801e578:	08029aec 	.word	0x08029aec
 801e57c:	ffff0001 	.word	0xffff0001

0801e580 <_fwalk_reent>:
 801e580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e584:	4606      	mov	r6, r0
 801e586:	4688      	mov	r8, r1
 801e588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e58c:	2700      	movs	r7, #0
 801e58e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e592:	f1b9 0901 	subs.w	r9, r9, #1
 801e596:	d505      	bpl.n	801e5a4 <_fwalk_reent+0x24>
 801e598:	6824      	ldr	r4, [r4, #0]
 801e59a:	2c00      	cmp	r4, #0
 801e59c:	d1f7      	bne.n	801e58e <_fwalk_reent+0xe>
 801e59e:	4638      	mov	r0, r7
 801e5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5a4:	89ab      	ldrh	r3, [r5, #12]
 801e5a6:	2b01      	cmp	r3, #1
 801e5a8:	d907      	bls.n	801e5ba <_fwalk_reent+0x3a>
 801e5aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e5ae:	3301      	adds	r3, #1
 801e5b0:	d003      	beq.n	801e5ba <_fwalk_reent+0x3a>
 801e5b2:	4629      	mov	r1, r5
 801e5b4:	4630      	mov	r0, r6
 801e5b6:	47c0      	blx	r8
 801e5b8:	4307      	orrs	r7, r0
 801e5ba:	3568      	adds	r5, #104	; 0x68
 801e5bc:	e7e9      	b.n	801e592 <_fwalk_reent+0x12>

0801e5be <__retarget_lock_init_recursive>:
 801e5be:	4770      	bx	lr

0801e5c0 <__retarget_lock_acquire_recursive>:
 801e5c0:	4770      	bx	lr

0801e5c2 <__retarget_lock_release_recursive>:
 801e5c2:	4770      	bx	lr

0801e5c4 <__swhatbuf_r>:
 801e5c4:	b570      	push	{r4, r5, r6, lr}
 801e5c6:	460e      	mov	r6, r1
 801e5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e5cc:	2900      	cmp	r1, #0
 801e5ce:	b096      	sub	sp, #88	; 0x58
 801e5d0:	4614      	mov	r4, r2
 801e5d2:	461d      	mov	r5, r3
 801e5d4:	da08      	bge.n	801e5e8 <__swhatbuf_r+0x24>
 801e5d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e5da:	2200      	movs	r2, #0
 801e5dc:	602a      	str	r2, [r5, #0]
 801e5de:	061a      	lsls	r2, r3, #24
 801e5e0:	d410      	bmi.n	801e604 <__swhatbuf_r+0x40>
 801e5e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e5e6:	e00e      	b.n	801e606 <__swhatbuf_r+0x42>
 801e5e8:	466a      	mov	r2, sp
 801e5ea:	f000 f9eb 	bl	801e9c4 <_fstat_r>
 801e5ee:	2800      	cmp	r0, #0
 801e5f0:	dbf1      	blt.n	801e5d6 <__swhatbuf_r+0x12>
 801e5f2:	9a01      	ldr	r2, [sp, #4]
 801e5f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e5f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e5fc:	425a      	negs	r2, r3
 801e5fe:	415a      	adcs	r2, r3
 801e600:	602a      	str	r2, [r5, #0]
 801e602:	e7ee      	b.n	801e5e2 <__swhatbuf_r+0x1e>
 801e604:	2340      	movs	r3, #64	; 0x40
 801e606:	2000      	movs	r0, #0
 801e608:	6023      	str	r3, [r4, #0]
 801e60a:	b016      	add	sp, #88	; 0x58
 801e60c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e610 <__smakebuf_r>:
 801e610:	898b      	ldrh	r3, [r1, #12]
 801e612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e614:	079d      	lsls	r5, r3, #30
 801e616:	4606      	mov	r6, r0
 801e618:	460c      	mov	r4, r1
 801e61a:	d507      	bpl.n	801e62c <__smakebuf_r+0x1c>
 801e61c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e620:	6023      	str	r3, [r4, #0]
 801e622:	6123      	str	r3, [r4, #16]
 801e624:	2301      	movs	r3, #1
 801e626:	6163      	str	r3, [r4, #20]
 801e628:	b002      	add	sp, #8
 801e62a:	bd70      	pop	{r4, r5, r6, pc}
 801e62c:	ab01      	add	r3, sp, #4
 801e62e:	466a      	mov	r2, sp
 801e630:	f7ff ffc8 	bl	801e5c4 <__swhatbuf_r>
 801e634:	9900      	ldr	r1, [sp, #0]
 801e636:	4605      	mov	r5, r0
 801e638:	4630      	mov	r0, r6
 801e63a:	f000 f895 	bl	801e768 <_malloc_r>
 801e63e:	b948      	cbnz	r0, 801e654 <__smakebuf_r+0x44>
 801e640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e644:	059a      	lsls	r2, r3, #22
 801e646:	d4ef      	bmi.n	801e628 <__smakebuf_r+0x18>
 801e648:	f023 0303 	bic.w	r3, r3, #3
 801e64c:	f043 0302 	orr.w	r3, r3, #2
 801e650:	81a3      	strh	r3, [r4, #12]
 801e652:	e7e3      	b.n	801e61c <__smakebuf_r+0xc>
 801e654:	4b0d      	ldr	r3, [pc, #52]	; (801e68c <__smakebuf_r+0x7c>)
 801e656:	62b3      	str	r3, [r6, #40]	; 0x28
 801e658:	89a3      	ldrh	r3, [r4, #12]
 801e65a:	6020      	str	r0, [r4, #0]
 801e65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e660:	81a3      	strh	r3, [r4, #12]
 801e662:	9b00      	ldr	r3, [sp, #0]
 801e664:	6163      	str	r3, [r4, #20]
 801e666:	9b01      	ldr	r3, [sp, #4]
 801e668:	6120      	str	r0, [r4, #16]
 801e66a:	b15b      	cbz	r3, 801e684 <__smakebuf_r+0x74>
 801e66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e670:	4630      	mov	r0, r6
 801e672:	f000 f9b9 	bl	801e9e8 <_isatty_r>
 801e676:	b128      	cbz	r0, 801e684 <__smakebuf_r+0x74>
 801e678:	89a3      	ldrh	r3, [r4, #12]
 801e67a:	f023 0303 	bic.w	r3, r3, #3
 801e67e:	f043 0301 	orr.w	r3, r3, #1
 801e682:	81a3      	strh	r3, [r4, #12]
 801e684:	89a0      	ldrh	r0, [r4, #12]
 801e686:	4305      	orrs	r5, r0
 801e688:	81a5      	strh	r5, [r4, #12]
 801e68a:	e7cd      	b.n	801e628 <__smakebuf_r+0x18>
 801e68c:	0801e41d 	.word	0x0801e41d

0801e690 <_free_r>:
 801e690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e692:	2900      	cmp	r1, #0
 801e694:	d044      	beq.n	801e720 <_free_r+0x90>
 801e696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e69a:	9001      	str	r0, [sp, #4]
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	f1a1 0404 	sub.w	r4, r1, #4
 801e6a2:	bfb8      	it	lt
 801e6a4:	18e4      	addlt	r4, r4, r3
 801e6a6:	f000 f9c1 	bl	801ea2c <__malloc_lock>
 801e6aa:	4a1e      	ldr	r2, [pc, #120]	; (801e724 <_free_r+0x94>)
 801e6ac:	9801      	ldr	r0, [sp, #4]
 801e6ae:	6813      	ldr	r3, [r2, #0]
 801e6b0:	b933      	cbnz	r3, 801e6c0 <_free_r+0x30>
 801e6b2:	6063      	str	r3, [r4, #4]
 801e6b4:	6014      	str	r4, [r2, #0]
 801e6b6:	b003      	add	sp, #12
 801e6b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e6bc:	f000 b9bc 	b.w	801ea38 <__malloc_unlock>
 801e6c0:	42a3      	cmp	r3, r4
 801e6c2:	d908      	bls.n	801e6d6 <_free_r+0x46>
 801e6c4:	6825      	ldr	r5, [r4, #0]
 801e6c6:	1961      	adds	r1, r4, r5
 801e6c8:	428b      	cmp	r3, r1
 801e6ca:	bf01      	itttt	eq
 801e6cc:	6819      	ldreq	r1, [r3, #0]
 801e6ce:	685b      	ldreq	r3, [r3, #4]
 801e6d0:	1949      	addeq	r1, r1, r5
 801e6d2:	6021      	streq	r1, [r4, #0]
 801e6d4:	e7ed      	b.n	801e6b2 <_free_r+0x22>
 801e6d6:	461a      	mov	r2, r3
 801e6d8:	685b      	ldr	r3, [r3, #4]
 801e6da:	b10b      	cbz	r3, 801e6e0 <_free_r+0x50>
 801e6dc:	42a3      	cmp	r3, r4
 801e6de:	d9fa      	bls.n	801e6d6 <_free_r+0x46>
 801e6e0:	6811      	ldr	r1, [r2, #0]
 801e6e2:	1855      	adds	r5, r2, r1
 801e6e4:	42a5      	cmp	r5, r4
 801e6e6:	d10b      	bne.n	801e700 <_free_r+0x70>
 801e6e8:	6824      	ldr	r4, [r4, #0]
 801e6ea:	4421      	add	r1, r4
 801e6ec:	1854      	adds	r4, r2, r1
 801e6ee:	42a3      	cmp	r3, r4
 801e6f0:	6011      	str	r1, [r2, #0]
 801e6f2:	d1e0      	bne.n	801e6b6 <_free_r+0x26>
 801e6f4:	681c      	ldr	r4, [r3, #0]
 801e6f6:	685b      	ldr	r3, [r3, #4]
 801e6f8:	6053      	str	r3, [r2, #4]
 801e6fa:	4421      	add	r1, r4
 801e6fc:	6011      	str	r1, [r2, #0]
 801e6fe:	e7da      	b.n	801e6b6 <_free_r+0x26>
 801e700:	d902      	bls.n	801e708 <_free_r+0x78>
 801e702:	230c      	movs	r3, #12
 801e704:	6003      	str	r3, [r0, #0]
 801e706:	e7d6      	b.n	801e6b6 <_free_r+0x26>
 801e708:	6825      	ldr	r5, [r4, #0]
 801e70a:	1961      	adds	r1, r4, r5
 801e70c:	428b      	cmp	r3, r1
 801e70e:	bf04      	itt	eq
 801e710:	6819      	ldreq	r1, [r3, #0]
 801e712:	685b      	ldreq	r3, [r3, #4]
 801e714:	6063      	str	r3, [r4, #4]
 801e716:	bf04      	itt	eq
 801e718:	1949      	addeq	r1, r1, r5
 801e71a:	6021      	streq	r1, [r4, #0]
 801e71c:	6054      	str	r4, [r2, #4]
 801e71e:	e7ca      	b.n	801e6b6 <_free_r+0x26>
 801e720:	b003      	add	sp, #12
 801e722:	bd30      	pop	{r4, r5, pc}
 801e724:	20000634 	.word	0x20000634

0801e728 <sbrk_aligned>:
 801e728:	b570      	push	{r4, r5, r6, lr}
 801e72a:	4e0e      	ldr	r6, [pc, #56]	; (801e764 <sbrk_aligned+0x3c>)
 801e72c:	460c      	mov	r4, r1
 801e72e:	6831      	ldr	r1, [r6, #0]
 801e730:	4605      	mov	r5, r0
 801e732:	b911      	cbnz	r1, 801e73a <sbrk_aligned+0x12>
 801e734:	f000 f88c 	bl	801e850 <_sbrk_r>
 801e738:	6030      	str	r0, [r6, #0]
 801e73a:	4621      	mov	r1, r4
 801e73c:	4628      	mov	r0, r5
 801e73e:	f000 f887 	bl	801e850 <_sbrk_r>
 801e742:	1c43      	adds	r3, r0, #1
 801e744:	d00a      	beq.n	801e75c <sbrk_aligned+0x34>
 801e746:	1cc4      	adds	r4, r0, #3
 801e748:	f024 0403 	bic.w	r4, r4, #3
 801e74c:	42a0      	cmp	r0, r4
 801e74e:	d007      	beq.n	801e760 <sbrk_aligned+0x38>
 801e750:	1a21      	subs	r1, r4, r0
 801e752:	4628      	mov	r0, r5
 801e754:	f000 f87c 	bl	801e850 <_sbrk_r>
 801e758:	3001      	adds	r0, #1
 801e75a:	d101      	bne.n	801e760 <sbrk_aligned+0x38>
 801e75c:	f04f 34ff 	mov.w	r4, #4294967295
 801e760:	4620      	mov	r0, r4
 801e762:	bd70      	pop	{r4, r5, r6, pc}
 801e764:	20000638 	.word	0x20000638

0801e768 <_malloc_r>:
 801e768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e76c:	1ccd      	adds	r5, r1, #3
 801e76e:	f025 0503 	bic.w	r5, r5, #3
 801e772:	3508      	adds	r5, #8
 801e774:	2d0c      	cmp	r5, #12
 801e776:	bf38      	it	cc
 801e778:	250c      	movcc	r5, #12
 801e77a:	2d00      	cmp	r5, #0
 801e77c:	4607      	mov	r7, r0
 801e77e:	db01      	blt.n	801e784 <_malloc_r+0x1c>
 801e780:	42a9      	cmp	r1, r5
 801e782:	d905      	bls.n	801e790 <_malloc_r+0x28>
 801e784:	230c      	movs	r3, #12
 801e786:	603b      	str	r3, [r7, #0]
 801e788:	2600      	movs	r6, #0
 801e78a:	4630      	mov	r0, r6
 801e78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e790:	4e2e      	ldr	r6, [pc, #184]	; (801e84c <_malloc_r+0xe4>)
 801e792:	f000 f94b 	bl	801ea2c <__malloc_lock>
 801e796:	6833      	ldr	r3, [r6, #0]
 801e798:	461c      	mov	r4, r3
 801e79a:	bb34      	cbnz	r4, 801e7ea <_malloc_r+0x82>
 801e79c:	4629      	mov	r1, r5
 801e79e:	4638      	mov	r0, r7
 801e7a0:	f7ff ffc2 	bl	801e728 <sbrk_aligned>
 801e7a4:	1c43      	adds	r3, r0, #1
 801e7a6:	4604      	mov	r4, r0
 801e7a8:	d14d      	bne.n	801e846 <_malloc_r+0xde>
 801e7aa:	6834      	ldr	r4, [r6, #0]
 801e7ac:	4626      	mov	r6, r4
 801e7ae:	2e00      	cmp	r6, #0
 801e7b0:	d140      	bne.n	801e834 <_malloc_r+0xcc>
 801e7b2:	6823      	ldr	r3, [r4, #0]
 801e7b4:	4631      	mov	r1, r6
 801e7b6:	4638      	mov	r0, r7
 801e7b8:	eb04 0803 	add.w	r8, r4, r3
 801e7bc:	f000 f848 	bl	801e850 <_sbrk_r>
 801e7c0:	4580      	cmp	r8, r0
 801e7c2:	d13a      	bne.n	801e83a <_malloc_r+0xd2>
 801e7c4:	6821      	ldr	r1, [r4, #0]
 801e7c6:	3503      	adds	r5, #3
 801e7c8:	1a6d      	subs	r5, r5, r1
 801e7ca:	f025 0503 	bic.w	r5, r5, #3
 801e7ce:	3508      	adds	r5, #8
 801e7d0:	2d0c      	cmp	r5, #12
 801e7d2:	bf38      	it	cc
 801e7d4:	250c      	movcc	r5, #12
 801e7d6:	4629      	mov	r1, r5
 801e7d8:	4638      	mov	r0, r7
 801e7da:	f7ff ffa5 	bl	801e728 <sbrk_aligned>
 801e7de:	3001      	adds	r0, #1
 801e7e0:	d02b      	beq.n	801e83a <_malloc_r+0xd2>
 801e7e2:	6823      	ldr	r3, [r4, #0]
 801e7e4:	442b      	add	r3, r5
 801e7e6:	6023      	str	r3, [r4, #0]
 801e7e8:	e00e      	b.n	801e808 <_malloc_r+0xa0>
 801e7ea:	6822      	ldr	r2, [r4, #0]
 801e7ec:	1b52      	subs	r2, r2, r5
 801e7ee:	d41e      	bmi.n	801e82e <_malloc_r+0xc6>
 801e7f0:	2a0b      	cmp	r2, #11
 801e7f2:	d916      	bls.n	801e822 <_malloc_r+0xba>
 801e7f4:	1961      	adds	r1, r4, r5
 801e7f6:	42a3      	cmp	r3, r4
 801e7f8:	6025      	str	r5, [r4, #0]
 801e7fa:	bf18      	it	ne
 801e7fc:	6059      	strne	r1, [r3, #4]
 801e7fe:	6863      	ldr	r3, [r4, #4]
 801e800:	bf08      	it	eq
 801e802:	6031      	streq	r1, [r6, #0]
 801e804:	5162      	str	r2, [r4, r5]
 801e806:	604b      	str	r3, [r1, #4]
 801e808:	4638      	mov	r0, r7
 801e80a:	f104 060b 	add.w	r6, r4, #11
 801e80e:	f000 f913 	bl	801ea38 <__malloc_unlock>
 801e812:	f026 0607 	bic.w	r6, r6, #7
 801e816:	1d23      	adds	r3, r4, #4
 801e818:	1af2      	subs	r2, r6, r3
 801e81a:	d0b6      	beq.n	801e78a <_malloc_r+0x22>
 801e81c:	1b9b      	subs	r3, r3, r6
 801e81e:	50a3      	str	r3, [r4, r2]
 801e820:	e7b3      	b.n	801e78a <_malloc_r+0x22>
 801e822:	6862      	ldr	r2, [r4, #4]
 801e824:	42a3      	cmp	r3, r4
 801e826:	bf0c      	ite	eq
 801e828:	6032      	streq	r2, [r6, #0]
 801e82a:	605a      	strne	r2, [r3, #4]
 801e82c:	e7ec      	b.n	801e808 <_malloc_r+0xa0>
 801e82e:	4623      	mov	r3, r4
 801e830:	6864      	ldr	r4, [r4, #4]
 801e832:	e7b2      	b.n	801e79a <_malloc_r+0x32>
 801e834:	4634      	mov	r4, r6
 801e836:	6876      	ldr	r6, [r6, #4]
 801e838:	e7b9      	b.n	801e7ae <_malloc_r+0x46>
 801e83a:	230c      	movs	r3, #12
 801e83c:	603b      	str	r3, [r7, #0]
 801e83e:	4638      	mov	r0, r7
 801e840:	f000 f8fa 	bl	801ea38 <__malloc_unlock>
 801e844:	e7a1      	b.n	801e78a <_malloc_r+0x22>
 801e846:	6025      	str	r5, [r4, #0]
 801e848:	e7de      	b.n	801e808 <_malloc_r+0xa0>
 801e84a:	bf00      	nop
 801e84c:	20000634 	.word	0x20000634

0801e850 <_sbrk_r>:
 801e850:	b538      	push	{r3, r4, r5, lr}
 801e852:	4d06      	ldr	r5, [pc, #24]	; (801e86c <_sbrk_r+0x1c>)
 801e854:	2300      	movs	r3, #0
 801e856:	4604      	mov	r4, r0
 801e858:	4608      	mov	r0, r1
 801e85a:	602b      	str	r3, [r5, #0]
 801e85c:	f7f7 fa40 	bl	8015ce0 <_sbrk>
 801e860:	1c43      	adds	r3, r0, #1
 801e862:	d102      	bne.n	801e86a <_sbrk_r+0x1a>
 801e864:	682b      	ldr	r3, [r5, #0]
 801e866:	b103      	cbz	r3, 801e86a <_sbrk_r+0x1a>
 801e868:	6023      	str	r3, [r4, #0]
 801e86a:	bd38      	pop	{r3, r4, r5, pc}
 801e86c:	2000063c 	.word	0x2000063c

0801e870 <_raise_r>:
 801e870:	291f      	cmp	r1, #31
 801e872:	b538      	push	{r3, r4, r5, lr}
 801e874:	4604      	mov	r4, r0
 801e876:	460d      	mov	r5, r1
 801e878:	d904      	bls.n	801e884 <_raise_r+0x14>
 801e87a:	2316      	movs	r3, #22
 801e87c:	6003      	str	r3, [r0, #0]
 801e87e:	f04f 30ff 	mov.w	r0, #4294967295
 801e882:	bd38      	pop	{r3, r4, r5, pc}
 801e884:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e886:	b112      	cbz	r2, 801e88e <_raise_r+0x1e>
 801e888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e88c:	b94b      	cbnz	r3, 801e8a2 <_raise_r+0x32>
 801e88e:	4620      	mov	r0, r4
 801e890:	f000 f830 	bl	801e8f4 <_getpid_r>
 801e894:	462a      	mov	r2, r5
 801e896:	4601      	mov	r1, r0
 801e898:	4620      	mov	r0, r4
 801e89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e89e:	f000 b817 	b.w	801e8d0 <_kill_r>
 801e8a2:	2b01      	cmp	r3, #1
 801e8a4:	d00a      	beq.n	801e8bc <_raise_r+0x4c>
 801e8a6:	1c59      	adds	r1, r3, #1
 801e8a8:	d103      	bne.n	801e8b2 <_raise_r+0x42>
 801e8aa:	2316      	movs	r3, #22
 801e8ac:	6003      	str	r3, [r0, #0]
 801e8ae:	2001      	movs	r0, #1
 801e8b0:	e7e7      	b.n	801e882 <_raise_r+0x12>
 801e8b2:	2400      	movs	r4, #0
 801e8b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e8b8:	4628      	mov	r0, r5
 801e8ba:	4798      	blx	r3
 801e8bc:	2000      	movs	r0, #0
 801e8be:	e7e0      	b.n	801e882 <_raise_r+0x12>

0801e8c0 <raise>:
 801e8c0:	4b02      	ldr	r3, [pc, #8]	; (801e8cc <raise+0xc>)
 801e8c2:	4601      	mov	r1, r0
 801e8c4:	6818      	ldr	r0, [r3, #0]
 801e8c6:	f7ff bfd3 	b.w	801e870 <_raise_r>
 801e8ca:	bf00      	nop
 801e8cc:	20000074 	.word	0x20000074

0801e8d0 <_kill_r>:
 801e8d0:	b538      	push	{r3, r4, r5, lr}
 801e8d2:	4d07      	ldr	r5, [pc, #28]	; (801e8f0 <_kill_r+0x20>)
 801e8d4:	2300      	movs	r3, #0
 801e8d6:	4604      	mov	r4, r0
 801e8d8:	4608      	mov	r0, r1
 801e8da:	4611      	mov	r1, r2
 801e8dc:	602b      	str	r3, [r5, #0]
 801e8de:	f7f7 f977 	bl	8015bd0 <_kill>
 801e8e2:	1c43      	adds	r3, r0, #1
 801e8e4:	d102      	bne.n	801e8ec <_kill_r+0x1c>
 801e8e6:	682b      	ldr	r3, [r5, #0]
 801e8e8:	b103      	cbz	r3, 801e8ec <_kill_r+0x1c>
 801e8ea:	6023      	str	r3, [r4, #0]
 801e8ec:	bd38      	pop	{r3, r4, r5, pc}
 801e8ee:	bf00      	nop
 801e8f0:	2000063c 	.word	0x2000063c

0801e8f4 <_getpid_r>:
 801e8f4:	f7f7 b964 	b.w	8015bc0 <_getpid>

0801e8f8 <__sread>:
 801e8f8:	b510      	push	{r4, lr}
 801e8fa:	460c      	mov	r4, r1
 801e8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e900:	f000 f8a0 	bl	801ea44 <_read_r>
 801e904:	2800      	cmp	r0, #0
 801e906:	bfab      	itete	ge
 801e908:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e90a:	89a3      	ldrhlt	r3, [r4, #12]
 801e90c:	181b      	addge	r3, r3, r0
 801e90e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e912:	bfac      	ite	ge
 801e914:	6563      	strge	r3, [r4, #84]	; 0x54
 801e916:	81a3      	strhlt	r3, [r4, #12]
 801e918:	bd10      	pop	{r4, pc}

0801e91a <__swrite>:
 801e91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e91e:	461f      	mov	r7, r3
 801e920:	898b      	ldrh	r3, [r1, #12]
 801e922:	05db      	lsls	r3, r3, #23
 801e924:	4605      	mov	r5, r0
 801e926:	460c      	mov	r4, r1
 801e928:	4616      	mov	r6, r2
 801e92a:	d505      	bpl.n	801e938 <__swrite+0x1e>
 801e92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e930:	2302      	movs	r3, #2
 801e932:	2200      	movs	r2, #0
 801e934:	f000 f868 	bl	801ea08 <_lseek_r>
 801e938:	89a3      	ldrh	r3, [r4, #12]
 801e93a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e93e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e942:	81a3      	strh	r3, [r4, #12]
 801e944:	4632      	mov	r2, r6
 801e946:	463b      	mov	r3, r7
 801e948:	4628      	mov	r0, r5
 801e94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e94e:	f000 b817 	b.w	801e980 <_write_r>

0801e952 <__sseek>:
 801e952:	b510      	push	{r4, lr}
 801e954:	460c      	mov	r4, r1
 801e956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e95a:	f000 f855 	bl	801ea08 <_lseek_r>
 801e95e:	1c43      	adds	r3, r0, #1
 801e960:	89a3      	ldrh	r3, [r4, #12]
 801e962:	bf15      	itete	ne
 801e964:	6560      	strne	r0, [r4, #84]	; 0x54
 801e966:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e96a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e96e:	81a3      	strheq	r3, [r4, #12]
 801e970:	bf18      	it	ne
 801e972:	81a3      	strhne	r3, [r4, #12]
 801e974:	bd10      	pop	{r4, pc}

0801e976 <__sclose>:
 801e976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e97a:	f000 b813 	b.w	801e9a4 <_close_r>
	...

0801e980 <_write_r>:
 801e980:	b538      	push	{r3, r4, r5, lr}
 801e982:	4d07      	ldr	r5, [pc, #28]	; (801e9a0 <_write_r+0x20>)
 801e984:	4604      	mov	r4, r0
 801e986:	4608      	mov	r0, r1
 801e988:	4611      	mov	r1, r2
 801e98a:	2200      	movs	r2, #0
 801e98c:	602a      	str	r2, [r5, #0]
 801e98e:	461a      	mov	r2, r3
 801e990:	f7f7 f955 	bl	8015c3e <_write>
 801e994:	1c43      	adds	r3, r0, #1
 801e996:	d102      	bne.n	801e99e <_write_r+0x1e>
 801e998:	682b      	ldr	r3, [r5, #0]
 801e99a:	b103      	cbz	r3, 801e99e <_write_r+0x1e>
 801e99c:	6023      	str	r3, [r4, #0]
 801e99e:	bd38      	pop	{r3, r4, r5, pc}
 801e9a0:	2000063c 	.word	0x2000063c

0801e9a4 <_close_r>:
 801e9a4:	b538      	push	{r3, r4, r5, lr}
 801e9a6:	4d06      	ldr	r5, [pc, #24]	; (801e9c0 <_close_r+0x1c>)
 801e9a8:	2300      	movs	r3, #0
 801e9aa:	4604      	mov	r4, r0
 801e9ac:	4608      	mov	r0, r1
 801e9ae:	602b      	str	r3, [r5, #0]
 801e9b0:	f7f7 f961 	bl	8015c76 <_close>
 801e9b4:	1c43      	adds	r3, r0, #1
 801e9b6:	d102      	bne.n	801e9be <_close_r+0x1a>
 801e9b8:	682b      	ldr	r3, [r5, #0]
 801e9ba:	b103      	cbz	r3, 801e9be <_close_r+0x1a>
 801e9bc:	6023      	str	r3, [r4, #0]
 801e9be:	bd38      	pop	{r3, r4, r5, pc}
 801e9c0:	2000063c 	.word	0x2000063c

0801e9c4 <_fstat_r>:
 801e9c4:	b538      	push	{r3, r4, r5, lr}
 801e9c6:	4d07      	ldr	r5, [pc, #28]	; (801e9e4 <_fstat_r+0x20>)
 801e9c8:	2300      	movs	r3, #0
 801e9ca:	4604      	mov	r4, r0
 801e9cc:	4608      	mov	r0, r1
 801e9ce:	4611      	mov	r1, r2
 801e9d0:	602b      	str	r3, [r5, #0]
 801e9d2:	f7f7 f95c 	bl	8015c8e <_fstat>
 801e9d6:	1c43      	adds	r3, r0, #1
 801e9d8:	d102      	bne.n	801e9e0 <_fstat_r+0x1c>
 801e9da:	682b      	ldr	r3, [r5, #0]
 801e9dc:	b103      	cbz	r3, 801e9e0 <_fstat_r+0x1c>
 801e9de:	6023      	str	r3, [r4, #0]
 801e9e0:	bd38      	pop	{r3, r4, r5, pc}
 801e9e2:	bf00      	nop
 801e9e4:	2000063c 	.word	0x2000063c

0801e9e8 <_isatty_r>:
 801e9e8:	b538      	push	{r3, r4, r5, lr}
 801e9ea:	4d06      	ldr	r5, [pc, #24]	; (801ea04 <_isatty_r+0x1c>)
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	4604      	mov	r4, r0
 801e9f0:	4608      	mov	r0, r1
 801e9f2:	602b      	str	r3, [r5, #0]
 801e9f4:	f7f7 f95b 	bl	8015cae <_isatty>
 801e9f8:	1c43      	adds	r3, r0, #1
 801e9fa:	d102      	bne.n	801ea02 <_isatty_r+0x1a>
 801e9fc:	682b      	ldr	r3, [r5, #0]
 801e9fe:	b103      	cbz	r3, 801ea02 <_isatty_r+0x1a>
 801ea00:	6023      	str	r3, [r4, #0]
 801ea02:	bd38      	pop	{r3, r4, r5, pc}
 801ea04:	2000063c 	.word	0x2000063c

0801ea08 <_lseek_r>:
 801ea08:	b538      	push	{r3, r4, r5, lr}
 801ea0a:	4d07      	ldr	r5, [pc, #28]	; (801ea28 <_lseek_r+0x20>)
 801ea0c:	4604      	mov	r4, r0
 801ea0e:	4608      	mov	r0, r1
 801ea10:	4611      	mov	r1, r2
 801ea12:	2200      	movs	r2, #0
 801ea14:	602a      	str	r2, [r5, #0]
 801ea16:	461a      	mov	r2, r3
 801ea18:	f7f7 f954 	bl	8015cc4 <_lseek>
 801ea1c:	1c43      	adds	r3, r0, #1
 801ea1e:	d102      	bne.n	801ea26 <_lseek_r+0x1e>
 801ea20:	682b      	ldr	r3, [r5, #0]
 801ea22:	b103      	cbz	r3, 801ea26 <_lseek_r+0x1e>
 801ea24:	6023      	str	r3, [r4, #0]
 801ea26:	bd38      	pop	{r3, r4, r5, pc}
 801ea28:	2000063c 	.word	0x2000063c

0801ea2c <__malloc_lock>:
 801ea2c:	4801      	ldr	r0, [pc, #4]	; (801ea34 <__malloc_lock+0x8>)
 801ea2e:	f7ff bdc7 	b.w	801e5c0 <__retarget_lock_acquire_recursive>
 801ea32:	bf00      	nop
 801ea34:	20000630 	.word	0x20000630

0801ea38 <__malloc_unlock>:
 801ea38:	4801      	ldr	r0, [pc, #4]	; (801ea40 <__malloc_unlock+0x8>)
 801ea3a:	f7ff bdc2 	b.w	801e5c2 <__retarget_lock_release_recursive>
 801ea3e:	bf00      	nop
 801ea40:	20000630 	.word	0x20000630

0801ea44 <_read_r>:
 801ea44:	b538      	push	{r3, r4, r5, lr}
 801ea46:	4d07      	ldr	r5, [pc, #28]	; (801ea64 <_read_r+0x20>)
 801ea48:	4604      	mov	r4, r0
 801ea4a:	4608      	mov	r0, r1
 801ea4c:	4611      	mov	r1, r2
 801ea4e:	2200      	movs	r2, #0
 801ea50:	602a      	str	r2, [r5, #0]
 801ea52:	461a      	mov	r2, r3
 801ea54:	f7f7 f8d6 	bl	8015c04 <_read>
 801ea58:	1c43      	adds	r3, r0, #1
 801ea5a:	d102      	bne.n	801ea62 <_read_r+0x1e>
 801ea5c:	682b      	ldr	r3, [r5, #0]
 801ea5e:	b103      	cbz	r3, 801ea62 <_read_r+0x1e>
 801ea60:	6023      	str	r3, [r4, #0]
 801ea62:	bd38      	pop	{r3, r4, r5, pc}
 801ea64:	2000063c 	.word	0x2000063c

0801ea68 <_init>:
 801ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea6a:	bf00      	nop
 801ea6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea6e:	bc08      	pop	{r3}
 801ea70:	469e      	mov	lr, r3
 801ea72:	4770      	bx	lr

0801ea74 <_fini>:
 801ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea76:	bf00      	nop
 801ea78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea7a:	bc08      	pop	{r3}
 801ea7c:	469e      	mov	lr, r3
 801ea7e:	4770      	bx	lr
