
FRA262STUIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009be4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009d7c  08009d7c  00019d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d9c  08009d9c  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009da4  08009da4  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009da4  08009da4  00019da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009da8  08009da8  00019da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08009dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000038  08009de4  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08009de4  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001140a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef3  00000000  00000000  00031472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00033368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  000342f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c46  00000000  00000000  000351e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d1a  00000000  00000000  0004be2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915d1  00000000  00000000  0005db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000445c  00000000  00000000  000ef16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009d64 	.word	0x08009d64

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	08009d64 	.word	0x08009d64

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	3a01      	subs	r2, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ad4:	d2ed      	bcs.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_uldivmod>:
 8000c30:	b953      	cbnz	r3, 8000c48 <__aeabi_uldivmod+0x18>
 8000c32:	b94a      	cbnz	r2, 8000c48 <__aeabi_uldivmod+0x18>
 8000c34:	2900      	cmp	r1, #0
 8000c36:	bf08      	it	eq
 8000c38:	2800      	cmpeq	r0, #0
 8000c3a:	bf1c      	itt	ne
 8000c3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c40:	f04f 30ff 	movne.w	r0, #4294967295
 8000c44:	f000 b974 	b.w	8000f30 <__aeabi_idiv0>
 8000c48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c50:	f000 f806 	bl	8000c60 <__udivmoddi4>
 8000c54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5c:	b004      	add	sp, #16
 8000c5e:	4770      	bx	lr

08000c60 <__udivmoddi4>:
 8000c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c64:	9d08      	ldr	r5, [sp, #32]
 8000c66:	4604      	mov	r4, r0
 8000c68:	468e      	mov	lr, r1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d14d      	bne.n	8000d0a <__udivmoddi4+0xaa>
 8000c6e:	428a      	cmp	r2, r1
 8000c70:	4694      	mov	ip, r2
 8000c72:	d969      	bls.n	8000d48 <__udivmoddi4+0xe8>
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b152      	cbz	r2, 8000c90 <__udivmoddi4+0x30>
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	f1c2 0120 	rsb	r1, r2, #32
 8000c82:	fa20 f101 	lsr.w	r1, r0, r1
 8000c86:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c8a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	0c21      	lsrs	r1, r4, #16
 8000c96:	fbbe f6f8 	udiv	r6, lr, r8
 8000c9a:	fa1f f78c 	uxth.w	r7, ip
 8000c9e:	fb08 e316 	mls	r3, r8, r6, lr
 8000ca2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ca6:	fb06 f107 	mul.w	r1, r6, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d90a      	bls.n	8000cc4 <__udivmoddi4+0x64>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cb6:	f080 811f 	bcs.w	8000ef8 <__udivmoddi4+0x298>
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	f240 811c 	bls.w	8000ef8 <__udivmoddi4+0x298>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	1a5b      	subs	r3, r3, r1
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ccc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd4:	fb00 f707 	mul.w	r7, r0, r7
 8000cd8:	42a7      	cmp	r7, r4
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x92>
 8000cdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce4:	f080 810a 	bcs.w	8000efc <__udivmoddi4+0x29c>
 8000ce8:	42a7      	cmp	r7, r4
 8000cea:	f240 8107 	bls.w	8000efc <__udivmoddi4+0x29c>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	1be4      	subs	r4, r4, r7
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	b11d      	cbz	r5, 8000d04 <__udivmoddi4+0xa4>
 8000cfc:	40d4      	lsrs	r4, r2
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e9c5 4300 	strd	r4, r3, [r5]
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0xc2>
 8000d0e:	2d00      	cmp	r5, #0
 8000d10:	f000 80ef 	beq.w	8000ef2 <__udivmoddi4+0x292>
 8000d14:	2600      	movs	r6, #0
 8000d16:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	fab3 f683 	clz	r6, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d14a      	bne.n	8000dc0 <__udivmoddi4+0x160>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xd4>
 8000d2e:	4282      	cmp	r2, r0
 8000d30:	f200 80f9 	bhi.w	8000f26 <__udivmoddi4+0x2c6>
 8000d34:	1a84      	subs	r4, r0, r2
 8000d36:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d0e0      	beq.n	8000d04 <__udivmoddi4+0xa4>
 8000d42:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d46:	e7dd      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000d48:	b902      	cbnz	r2, 8000d4c <__udivmoddi4+0xec>
 8000d4a:	deff      	udf	#255	; 0xff
 8000d4c:	fab2 f282 	clz	r2, r2
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	f040 8092 	bne.w	8000e7a <__udivmoddi4+0x21a>
 8000d56:	eba1 010c 	sub.w	r1, r1, ip
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2601      	movs	r6, #1
 8000d64:	0c20      	lsrs	r0, r4, #16
 8000d66:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d6a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d6e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d72:	fb0e f003 	mul.w	r0, lr, r3
 8000d76:	4288      	cmp	r0, r1
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x12c>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x12a>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2c0>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	1a09      	subs	r1, r1, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d94:	fb07 1110 	mls	r1, r7, r0, r1
 8000d98:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x156>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x154>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2ca>
 8000db4:	4608      	mov	r0, r1
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dbe:	e79c      	b.n	8000cfa <__udivmoddi4+0x9a>
 8000dc0:	f1c6 0720 	rsb	r7, r6, #32
 8000dc4:	40b3      	lsls	r3, r6
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa20 f407 	lsr.w	r4, r0, r7
 8000dd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000dd6:	431c      	orrs	r4, r3
 8000dd8:	40f9      	lsrs	r1, r7
 8000dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dde:	fa00 f306 	lsl.w	r3, r0, r6
 8000de2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000de6:	0c20      	lsrs	r0, r4, #16
 8000de8:	fa1f fe8c 	uxth.w	lr, ip
 8000dec:	fb09 1118 	mls	r1, r9, r8, r1
 8000df0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000df4:	fb08 f00e 	mul.w	r0, r8, lr
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b8>
 8000e00:	eb1c 0101 	adds.w	r1, ip, r1
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2bc>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2bc>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4461      	add	r1, ip
 8000e18:	1a09      	subs	r1, r1, r0
 8000e1a:	b2a4      	uxth	r4, r4
 8000e1c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e20:	fb09 1110 	mls	r1, r9, r0, r1
 8000e24:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e2c:	458e      	cmp	lr, r1
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1e2>
 8000e30:	eb1c 0101 	adds.w	r1, ip, r1
 8000e34:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3a:	458e      	cmp	lr, r1
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2b4>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4461      	add	r1, ip
 8000e42:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e46:	fba0 9402 	umull	r9, r4, r0, r2
 8000e4a:	eba1 010e 	sub.w	r1, r1, lr
 8000e4e:	42a1      	cmp	r1, r4
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46a6      	mov	lr, r4
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x2a4>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x2a0>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x212>
 8000e5a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e5e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e62:	fa01 f707 	lsl.w	r7, r1, r7
 8000e66:	fa22 f306 	lsr.w	r3, r2, r6
 8000e6a:	40f1      	lsrs	r1, r6
 8000e6c:	431f      	orrs	r7, r3
 8000e6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	f1c2 0320 	rsb	r3, r2, #32
 8000e7e:	40d8      	lsrs	r0, r3
 8000e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e84:	fa21 f303 	lsr.w	r3, r1, r3
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	4301      	orrs	r1, r0
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e98:	fb07 3610 	mls	r6, r7, r0, r3
 8000e9c:	0c0b      	lsrs	r3, r1, #16
 8000e9e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ea2:	fb00 f60e 	mul.w	r6, r0, lr
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x260>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b8>
 8000eb8:	429e      	cmp	r6, r3
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b8>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	b289      	uxth	r1, r1
 8000ec4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb06 f30e 	mul.w	r3, r6, lr
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x28a>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2b0>
 8000ee6:	3e02      	subs	r6, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	1ac9      	subs	r1, r1, r3
 8000eec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0x104>
 8000ef2:	462e      	mov	r6, r5
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	e705      	b.n	8000d04 <__udivmoddi4+0xa4>
 8000ef8:	4606      	mov	r6, r0
 8000efa:	e6e3      	b.n	8000cc4 <__udivmoddi4+0x64>
 8000efc:	4618      	mov	r0, r3
 8000efe:	e6f8      	b.n	8000cf2 <__udivmoddi4+0x92>
 8000f00:	454b      	cmp	r3, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f8>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f8>
 8000f10:	4646      	mov	r6, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x28a>
 8000f14:	4620      	mov	r0, r4
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1e2>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x260>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b8>
 8000f20:	3b02      	subs	r3, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x12c>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e709      	b.n	8000d3e <__udivmoddi4+0xde>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x156>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f38:	b087      	sub	sp, #28
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f001 ff0c 	bl	8002d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f94c 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 fb64 	bl	8001610 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f48:	f000 fb16 	bl	8001578 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000f4c:	f000 fb40 	bl	80015d0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f50:	f000 f9ac 	bl	80012ac <MX_I2C1_Init>
  MX_TIM11_Init();
 8000f54:	f000 faec 	bl	8001530 <MX_TIM11_Init>
  MX_TIM2_Init();
 8000f58:	f000 fa04 	bl	8001364 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f5c:	f000 fa72 	bl	8001444 <MX_TIM4_Init>
  MX_I2C3_Init();
 8000f60:	f000 f9d2 	bl	8001308 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_Base_Start_IT(&htim11); // micro timer
 8000f64:	4882      	ldr	r0, [pc, #520]	; (8001170 <main+0x23c>)
 8000f66:	f006 fa37 	bl	80073d8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim2); // Speed
 8000f6a:	4882      	ldr	r0, [pc, #520]	; (8001174 <main+0x240>)
 8000f6c:	f006 f9da 	bl	8007324 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*) &capturedata,
 8000f70:	2310      	movs	r3, #16
 8000f72:	4a81      	ldr	r2, [pc, #516]	; (8001178 <main+0x244>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	487f      	ldr	r0, [pc, #508]	; (8001174 <main+0x240>)
 8000f78:	f006 fbf4 	bl	8007764 <HAL_TIM_IC_Start_DMA>
    			CAPTURENUM);

    //PWM Test
    HAL_TIM_Base_Start(&htim4);
 8000f7c:	487f      	ldr	r0, [pc, #508]	; (800117c <main+0x248>)
 8000f7e:	f006 f9d1 	bl	8007324 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f82:	2100      	movs	r1, #0
 8000f84:	487d      	ldr	r0, [pc, #500]	; (800117c <main+0x248>)
 8000f86:	f006 fae3 	bl	8007550 <HAL_TIM_PWM_Start>

    //MCP23017 setting init
    HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f001 ff56 	bl	8002e3c <HAL_Delay>
    IOExpenderInit();
 8000f90:	f000 fef0 	bl	8001d74 <IOExpenderInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      ///// IT test
	 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f94:	2120      	movs	r1, #32
 8000f96:	487a      	ldr	r0, [pc, #488]	; (8001180 <main+0x24c>)
 8000f98:	f002 fe4b 	bl	8003c32 <HAL_GPIO_TogglePin>
	  	  //if(micros() - TimeStampGrand >= 1000){
	  		//TimeStampGrand = micros();

	  	  //}
	  	  // Encoder I2CRead
	  	  if (micros()-timeStampSR >= 1000)      // don't use 1
 8000f9c:	f001 fbbc 	bl	8002718 <micros>
 8000fa0:	4b78      	ldr	r3, [pc, #480]	; (8001184 <main+0x250>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	617a      	str	r2, [r7, #20]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ac4      	subs	r4, r0, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	eb61 0503 	sbc.w	r5, r1, r3
 8000fb4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8000fb8:	f175 0300 	sbcs.w	r3, r5, #0
 8000fbc:	d30a      	bcc.n	8000fd4 <main+0xa0>
	  	          {
	  	              timeStampSR = micros();           //set new time stamp
 8000fbe:	f001 fbab 	bl	8002718 <micros>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <main+0x250>)
 8000fc8:	601a      	str	r2, [r3, #0]
	  	              flag_absenc = 1;
 8000fca:	4a6f      	ldr	r2, [pc, #444]	; (8001188 <main+0x254>)
 8000fcc:	2301      	movs	r3, #1
 8000fce:	7013      	strb	r3, [r2, #0]
	  	              GrandStatumix();
 8000fd0:	f000 fbf8 	bl	80017c4 <GrandStatumix>
	  	          }
	  	  AbsEncI2CReadx(RawEnBitAB);
 8000fd4:	486d      	ldr	r0, [pc, #436]	; (800118c <main+0x258>)
 8000fd6:	f000 fee3 	bl	8001da0 <AbsEncI2CReadx>
	  	  encoderSpeedReaderCycle();
 8000fda:	f000 fd15 	bl	8001a08 <encoderSpeedReaderCycle>
	  	  pwr_sense = HAL_GPIO_ReadPin(Pwr_Sense_GPIO_Port, Pwr_Sense_Pin);
 8000fde:	2102      	movs	r1, #2
 8000fe0:	486b      	ldr	r0, [pc, #428]	; (8001190 <main+0x25c>)
 8000fe2:	f002 fdf5 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a6a      	ldr	r2, [pc, #424]	; (8001194 <main+0x260>)
 8000fea:	7013      	strb	r3, [r2, #0]

	  	  ///////////////////////// speed measyre////////
	  	if(micros() - timestampve >= 10000){
 8000fec:	f001 fb94 	bl	8002718 <micros>
 8000ff0:	4b69      	ldr	r3, [pc, #420]	; (8001198 <main+0x264>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	ebb0 0802 	subs.w	r8, r0, r2
 8000ffa:	eb61 0903 	sbc.w	r9, r1, r3
 8000ffe:	f242 7310 	movw	r3, #10000	; 0x2710
 8001002:	4598      	cmp	r8, r3
 8001004:	f179 0300 	sbcs.w	r3, r9, #0
 8001008:	d344      	bcc.n	8001094 <main+0x160>
	  			  timestampve = micros();
 800100a:	f001 fb85 	bl	8002718 <micros>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4961      	ldr	r1, [pc, #388]	; (8001198 <main+0x264>)
 8001014:	e9c1 2300 	strd	r2, r3, [r1]
	  			  posSpeedlog[1] = posSpeedlog[0];
 8001018:	4b60      	ldr	r3, [pc, #384]	; (800119c <main+0x268>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4a5f      	ldr	r2, [pc, #380]	; (800119c <main+0x268>)
 800101e:	8053      	strh	r3, [r2, #2]
	  			  posSpeedlog[0] = BinPosXI;
 8001020:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <main+0x26c>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	4a5d      	ldr	r2, [pc, #372]	; (800119c <main+0x268>)
 8001026:	8013      	strh	r3, [r2, #0]
	  			  deltaar = (fabsf(posSpeedlog[1]-posSpeedlog[0])) / 1024.0;
 8001028:	4b5c      	ldr	r3, [pc, #368]	; (800119c <main+0x268>)
 800102a:	885b      	ldrh	r3, [r3, #2]
 800102c:	461a      	mov	r2, r3
 800102e:	4b5b      	ldr	r3, [pc, #364]	; (800119c <main+0x268>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001040:	eddf 6a58 	vldr	s13, [pc, #352]	; 80011a4 <main+0x270>
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	4b57      	ldr	r3, [pc, #348]	; (80011a8 <main+0x274>)
 800104a:	edc3 7a00 	vstr	s15, [r3]
	  			  RoundNumnd = deltaar*100.0*60.0;
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <main+0x274>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa24 	bl	80004a0 <__aeabi_f2d>
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <main+0x278>)
 800105e:	f7ff fa77 	bl	8000550 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b50      	ldr	r3, [pc, #320]	; (80011b0 <main+0x27c>)
 8001070:	f7ff fa6e 	bl	8000550 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fc7a 	bl	8000974 <__aeabi_d2f>
 8001080:	4603      	mov	r3, r0
 8001082:	4a4c      	ldr	r2, [pc, #304]	; (80011b4 <main+0x280>)
 8001084:	6013      	str	r3, [r2, #0]
	  			  Speedsmoothfunc(RoundNumnd);
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <main+0x280>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	eeb0 0a67 	vmov.f32	s0, s15
 8001090:	f000 fd2e 	bl	8001af0 <Speedsmoothfunc>
	  		 }

	  	  ///////////////////// 2KHz change PWM PB6////////////////////
	  	  if(micros() - timestampPWM >= 500){
 8001094:	f001 fb40 	bl	8002718 <micros>
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <main+0x284>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2200      	movs	r2, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	60fa      	str	r2, [r7, #12]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	ebb0 0a03 	subs.w	sl, r0, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	eb61 0b03 	sbc.w	fp, r1, r3
 80010ae:	f5ba 7ffa 	cmp.w	sl, #500	; 0x1f4
 80010b2:	f17b 0300 	sbcs.w	r3, fp, #0
 80010b6:	d31a      	bcc.n	80010ee <main+0x1ba>
	  		  	  timestampPWM = micros(); // stamp
 80010b8:	f001 fb2e 	bl	8002718 <micros>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <main+0x284>)
 80010c2:	601a      	str	r2, [r3, #0]
	  	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWMOut);
 80010c4:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <main+0x288>)
 80010c6:	8819      	ldrh	r1, [r3, #0]
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <main+0x248>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	460b      	mov	r3, r1
 80010ce:	6353      	str	r3, [r2, #52]	; 0x34
	  	  		  //ADC_Target = ADCFeedx[1].datt;
	  	  		if (mot_dirctn == 0){
 80010d0:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <main+0x28c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <main+0x1b0>
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2104      	movs	r1, #4
 80010dc:	482c      	ldr	r0, [pc, #176]	; (8001190 <main+0x25c>)
 80010de:	f002 fd8f 	bl	8003c00 <HAL_GPIO_WritePin>
 80010e2:	e004      	b.n	80010ee <main+0x1ba>
	  	  		}else{
	  	  		HAL_GPIO_WritePin(Mot_dir_GPIO_Port, Mot_dir_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2104      	movs	r1, #4
 80010e8:	4829      	ldr	r0, [pc, #164]	; (8001190 <main+0x25c>)
 80010ea:	f002 fd89 	bl	8003c00 <HAL_GPIO_WritePin>
	  	  		}
	  	  	  }

	  	 if (grandState ==  work){
 80010ee:	4b35      	ldr	r3, [pc, #212]	; (80011c4 <main+0x290>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d103      	bne.n	80010fe <main+0x1ca>
	  		 PIDzero();
 80010f6:	f000 fd5d 	bl	8001bb4 <PIDzero>
	  		 MotDrvCytron();
 80010fa:	f000 fde5 	bl	8001cc8 <MotDrvCytron>
	  	 }

	  	 //////////// End Effector /////////////////////
	  	 Efft_activate(); // Activate by flag_efftActi = 1;
 80010fe:	f000 feab 	bl	8001e58 <Efft_activate>
	  	 Efft_read(&efft_status);
 8001102:	4831      	ldr	r0, [pc, #196]	; (80011c8 <main+0x294>)
 8001104:	f000 feee 	bl	8001ee4 <Efft_read>
	  	 //// trig_efftRead up for 10 times afrer shoot / trig at shoot state
	  	 if(trig_efftRead != 0 && micros() - timestamp_efft >= 500000){
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <main+0x298>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d022      	beq.n	8001156 <main+0x222>
 8001110:	f001 fb02 	bl	8002718 <micros>
 8001114:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <main+0x29c>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	1a86      	subs	r6, r0, r2
 800111c:	603e      	str	r6, [r7, #0]
 800111e:	eb61 0303 	sbc.w	r3, r1, r3
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <main+0x2a0>)
 8001126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800112a:	4602      	mov	r2, r0
 800112c:	429a      	cmp	r2, r3
 800112e:	460b      	mov	r3, r1
 8001130:	f173 0300 	sbcs.w	r3, r3, #0
 8001134:	d30f      	bcc.n	8001156 <main+0x222>
	  		 timestamp_efft = micros();
 8001136:	f001 faef 	bl	8002718 <micros>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4924      	ldr	r1, [pc, #144]	; (80011d0 <main+0x29c>)
 8001140:	e9c1 2300 	strd	r2, r3, [r1]
	  		 flag_efftRead = 1;
 8001144:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <main+0x2a4>)
 8001146:	2301      	movs	r3, #1
 8001148:	7013      	strb	r3, [r2, #0]
	  		 trig_efftRead++;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <main+0x298>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <main+0x298>)
 8001154:	7013      	strb	r3, [r2, #0]
	  	 }if(trig_efftRead >= 12){
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <main+0x298>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b0b      	cmp	r3, #11
 800115c:	d905      	bls.n	800116a <main+0x236>
	  		 trig_efftRead = 0;
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <main+0x298>)
 8001160:	2300      	movs	r3, #0
 8001162:	7013      	strb	r3, [r2, #0]
	  	 	 flag_efftRead = 0;
 8001164:	4a1c      	ldr	r2, [pc, #112]	; (80011d8 <main+0x2a4>)
 8001166:	2300      	movs	r3, #0
 8001168:	7013      	strb	r3, [r2, #0]
	  		 } // read xx times

	  	 ////////// UART UI Base System //////////////
	  	UARTRecieveIT();
 800116a:	f001 fa3d 	bl	80025e8 <UARTRecieveIT>
	 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800116e:	e711      	b.n	8000f94 <main+0x60>
 8001170:	2000018c 	.word	0x2000018c
 8001174:	200000fc 	.word	0x200000fc
 8001178:	20000298 	.word	0x20000298
 800117c:	20000144 	.word	0x20000144
 8001180:	40020000 	.word	0x40020000
 8001184:	2000028c 	.word	0x2000028c
 8001188:	20000296 	.word	0x20000296
 800118c:	20000290 	.word	0x20000290
 8001190:	40020400 	.word	0x40020400
 8001194:	20000279 	.word	0x20000279
 8001198:	200003b0 	.word	0x200003b0
 800119c:	20000358 	.word	0x20000358
 80011a0:	20000294 	.word	0x20000294
 80011a4:	44800000 	.word	0x44800000
 80011a8:	200003a0 	.word	0x200003a0
 80011ac:	40590000 	.word	0x40590000
 80011b0:	404e0000 	.word	0x404e0000
 80011b4:	200003a4 	.word	0x200003a4
 80011b8:	200003b8 	.word	0x200003b8
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200003bc 	.word	0x200003bc
 80011c4:	20000278 	.word	0x20000278
 80011c8:	200003e8 	.word	0x200003e8
 80011cc:	200003eb 	.word	0x200003eb
 80011d0:	200003f0 	.word	0x200003f0
 80011d4:	0007a120 	.word	0x0007a120
 80011d8:	200003ea 	.word	0x200003ea

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2230      	movs	r2, #48	; 0x30
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f008 fdb2 	bl	8009d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <SystemClock_Config+0xc8>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	4a26      	ldr	r2, [pc, #152]	; (80012a4 <SystemClock_Config+0xc8>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <SystemClock_Config+0xc8>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <SystemClock_Config+0xcc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <SystemClock_Config+0xcc>)
 8001226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <SystemClock_Config+0xcc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001240:	2310      	movs	r3, #16
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800124c:	2308      	movs	r3, #8
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001258:	2304      	movs	r3, #4
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4618      	mov	r0, r3
 8001262:	f005 fb77 	bl	8006954 <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800126c:	f001 fa8a 	bl	8002784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2103      	movs	r1, #3
 800128c:	4618      	mov	r0, r3
 800128e:	f005 fdd9 	bl	8006e44 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001298:	f001 fa74 	bl	8002784 <Error_Handler>
  }
}
 800129c:	bf00      	nop
 800129e:	3750      	adds	r7, #80	; 0x50
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_I2C1_Init+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_I2C1_Init+0x50>)
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_I2C1_Init+0x58>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_I2C1_Init+0x50>)
 80012ea:	f002 fcd5 	bl	8003c98 <HAL_I2C_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f4:	f001 fa46 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000054 	.word	0x20000054
 8001300:	40005400 	.word	0x40005400
 8001304:	00061a80 	.word	0x00061a80

08001308 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C3_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C3_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C3_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C3_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C3_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C3_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C3_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C3_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C3_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C3_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C3_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C3_Init+0x50>)
 8001346:	f002 fca7 	bl	8003c98 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001350:	f001 fa18 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200000a8 	.word	0x200000a8
 800135c:	40005c00 	.word	0x40005c00
 8001360:	00061a80 	.word	0x00061a80

08001364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138e:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <MX_TIM2_Init+0xdc>)
 8001390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <MX_TIM2_Init+0xdc>)
 8001398:	2263      	movs	r2, #99	; 0x63
 800139a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <MX_TIM2_Init+0xdc>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b6:	4822      	ldr	r0, [pc, #136]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013b8:	f005 ff64 	bl	8007284 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80013c2:	f001 f9df 	bl	8002784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	4619      	mov	r1, r3
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013d4:	f006 fdc8 	bl	8007f68 <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013de:	f001 f9d1 	bl	8002784 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_TIM2_Init+0xdc>)
 80013e4:	f006 f964 	bl	80076b0 <HAL_TIM_IC_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013ee:	f001 f9c9 	bl	8002784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_TIM2_Init+0xdc>)
 8001402:	f007 fb7f 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800140c:	f001 f9ba 	bl	8002784 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_TIM2_Init+0xdc>)
 8001428:	f006 fc40 	bl	8007cac <HAL_TIM_IC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001432:	f001 f9a7 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000fc 	.word	0x200000fc

08001444 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001476:	4a2d      	ldr	r2, [pc, #180]	; (800152c <MX_TIM4_Init+0xe8>)
 8001478:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_TIM4_Init+0xe4>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001488:	f242 720f 	movw	r2, #9999	; 0x270f
 800148c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_TIM4_Init+0xe4>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_TIM4_Init+0xe4>)
 800149c:	f005 fef2 	bl	8007284 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014a6:	f001 f96d 	bl	8002784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014b8:	f006 fd56 	bl	8007f68 <HAL_TIM_ConfigClockSource>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014c2:	f001 f95f 	bl	8002784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014c8:	f005 ffe8 	bl	800749c <HAL_TIM_PWM_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014d2:	f001 f957 	bl	8002784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_TIM4_Init+0xe4>)
 80014e6:	f007 fb0d 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014f0:	f001 f948 	bl	8002784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f4:	2360      	movs	r3, #96	; 0x60
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM4_Init+0xe4>)
 800150c:	f006 fc6a 	bl	8007de4 <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001516:	f001 f935 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM4_Init+0xe4>)
 800151c:	f001 face 	bl	8002abc <HAL_TIM_MspPostInit>

}
 8001520:	bf00      	nop
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000144 	.word	0x20000144
 800152c:	40000800 	.word	0x40000800

08001530 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_TIM11_Init+0x40>)
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <MX_TIM11_Init+0x44>)
 8001538:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_TIM11_Init+0x40>)
 800153c:	2263      	movs	r2, #99	; 0x63
 800153e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_TIM11_Init+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_TIM11_Init+0x40>)
 8001548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_TIM11_Init+0x40>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_TIM11_Init+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_TIM11_Init+0x40>)
 800155c:	f005 fe92 	bl	8007284 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001566:	f001 f90d 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000018c 	.word	0x2000018c
 8001574:	40014800 	.word	0x40014800

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800157e:	4a13      	ldr	r2, [pc, #76]	; (80015cc <MX_USART2_UART_Init+0x54>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001584:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800158c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001590:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800159a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015b4:	f007 fb28 	bl	8008c08 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80015be:	f001 f8e1 	bl	8002784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000234 	.word	0x20000234
 80015cc:	40004400 	.word	0x40004400

080015d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_DMA_Init+0x3c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <MX_DMA_Init+0x3c>)
 80015e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_DMA_Init+0x3c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2010      	movs	r0, #16
 80015f8:	f001 fd1f 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015fc:	2010      	movs	r0, #16
 80015fe:	f001 fd38 	bl	8003072 <HAL_NVIC_EnableIRQ>

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b61      	ldr	r3, [pc, #388]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a60      	ldr	r2, [pc, #384]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b5e      	ldr	r3, [pc, #376]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b5a      	ldr	r3, [pc, #360]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a59      	ldr	r2, [pc, #356]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a4b      	ldr	r2, [pc, #300]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a44      	ldr	r2, [pc, #272]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <MX_GPIO_Init+0x1a0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2120      	movs	r1, #32
 80016b6:	483f      	ldr	r0, [pc, #252]	; (80017b4 <MX_GPIO_Init+0x1a4>)
 80016b8:	f002 faa2 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f24e 0104 	movw	r1, #57348	; 0xe004
 80016c2:	483d      	ldr	r0, [pc, #244]	; (80017b8 <MX_GPIO_Init+0x1a8>)
 80016c4:	f002 fa9c 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin EXTI11_EMER_Pin */
  GPIO_InitStruct.Pin = B1_Pin|EXTI11_EMER_Pin;
 80016c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	4837      	ldr	r0, [pc, #220]	; (80017bc <MX_GPIO_Init+0x1ac>)
 80016e0:	f002 f8f2 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016e4:	2320      	movs	r3, #32
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	482e      	ldr	r0, [pc, #184]	; (80017b4 <MX_GPIO_Init+0x1a4>)
 80016fc:	f002 f8e4 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pwr_Sense_Pin */
  GPIO_InitStruct.Pin = Pwr_Sense_Pin;
 8001700:	2302      	movs	r3, #2
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pwr_Sense_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	4829      	ldr	r0, [pc, #164]	; (80017b8 <MX_GPIO_Init+0x1a8>)
 8001714:	f002 f8d8 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mot_dir_Pin PLamp_Green_Pin PLamp_Blue_Pin PLamp_Yellow_Pin */
  GPIO_InitStruct.Pin = Mot_dir_Pin|PLamp_Green_Pin|PLamp_Blue_Pin|PLamp_Yellow_Pin;
 8001718:	f24e 0304 	movw	r3, #57348	; 0xe004
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4821      	ldr	r0, [pc, #132]	; (80017b8 <MX_GPIO_Init+0x1a8>)
 8001732:	f002 f8c9 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI10_Stop_Pin */
  GPIO_InitStruct.Pin = EXTI10_Stop_Pin;
 8001736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI10_Stop_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	481b      	ldr	r0, [pc, #108]	; (80017bc <MX_GPIO_Init+0x1ac>)
 800174e:	f002 f8bb 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stop_Sense_Pin */
  GPIO_InitStruct.Pin = Stop_Sense_Pin;
 8001752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Stop_Sense_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	4815      	ldr	r0, [pc, #84]	; (80017bc <MX_GPIO_Init+0x1ac>)
 8001768:	f002 f8ae 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTI2_SetZero_Pin */
  GPIO_InitStruct.Pin = EXTI2_SetZero_Pin;
 800176c:	2304      	movs	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001770:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI2_SetZero_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	480f      	ldr	r0, [pc, #60]	; (80017c0 <MX_GPIO_Init+0x1b0>)
 8001782:	f002 f8a1 	bl	80038c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	2008      	movs	r0, #8
 800178c:	f001 fc55 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001790:	2008      	movs	r0, #8
 8001792:	f001 fc6e 	bl	8003072 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2028      	movs	r0, #40	; 0x28
 800179c:	f001 fc4d 	bl	800303a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017a0:	2028      	movs	r0, #40	; 0x28
 80017a2:	f001 fc66 	bl	8003072 <HAL_NVIC_EnableIRQ>

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020c00 	.word	0x40020c00

080017c4 <GrandStatumix>:

/* USER CODE BEGIN 4 */
////////// Grand State //////////////////////////////////////////////////////
void GrandStatumix(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	if (grandState != Ready){
 80017c8:	4b64      	ldr	r3, [pc, #400]	; (800195c <GrandStatumix+0x198>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <GrandStatumix+0x18>
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d6:	4862      	ldr	r0, [pc, #392]	; (8001960 <GrandStatumix+0x19c>)
 80017d8:	f002 fa12 	bl	8003c00 <HAL_GPIO_WritePin>
	}
	if (grandState != work){
 80017dc:	4b5f      	ldr	r3, [pc, #380]	; (800195c <GrandStatumix+0x198>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d005      	beq.n	80017f0 <GrandStatumix+0x2c>
			HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ea:	485d      	ldr	r0, [pc, #372]	; (8001960 <GrandStatumix+0x19c>)
 80017ec:	f002 fa08 	bl	8003c00 <HAL_GPIO_WritePin>
		}
	if (grandState != stop || grandState != stopnd){
 80017f0:	4b5a      	ldr	r3, [pc, #360]	; (800195c <GrandStatumix+0x198>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d103      	bne.n	8001800 <GrandStatumix+0x3c>
 80017f8:	4b58      	ldr	r3, [pc, #352]	; (800195c <GrandStatumix+0x198>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d005      	beq.n	800180c <GrandStatumix+0x48>
				HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001806:	4856      	ldr	r0, [pc, #344]	; (8001960 <GrandStatumix+0x19c>)
 8001808:	f002 f9fa 	bl	8003c00 <HAL_GPIO_WritePin>
			}

	stop_sense = HAL_GPIO_ReadPin(Stop_Sense_GPIO_Port, Stop_Sense_Pin);
 800180c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001810:	4854      	ldr	r0, [pc, #336]	; (8001964 <GrandStatumix+0x1a0>)
 8001812:	f002 f9dd 	bl	8003bd0 <HAL_GPIO_ReadPin>
 8001816:	4603      	mov	r3, r0
 8001818:	461a      	mov	r2, r3
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <GrandStatumix+0x1a4>)
 800181c:	701a      	strb	r2, [r3, #0]


	switch(grandState){
 800181e:	4b4f      	ldr	r3, [pc, #316]	; (800195c <GrandStatumix+0x198>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	2b03      	cmp	r3, #3
 8001826:	d80b      	bhi.n	8001840 <GrandStatumix+0x7c>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <GrandStatumix+0x6c>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001881 	.word	0x08001881
 8001834:	080018c1 	.word	0x080018c1
 8001838:	08001927 	.word	0x08001927
 800183c:	080018fd 	.word	0x080018fd
	default:
	case Ready:
		HAL_GPIO_WritePin(PLamp_Green_GPIO_Port, PLamp_Green_Pin, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001846:	4846      	ldr	r0, [pc, #280]	; (8001960 <GrandStatumix+0x19c>)
 8001848:	f002 f9da 	bl	8003c00 <HAL_GPIO_WritePin>
		PWMOut = 1200;
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <GrandStatumix+0x1a8>)
 800184e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001852:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 1){grandState = emer;}
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <GrandStatumix+0x1ac>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d102      	bne.n	8001862 <GrandStatumix+0x9e>
 800185c:	4b3f      	ldr	r3, [pc, #252]	; (800195c <GrandStatumix+0x198>)
 800185e:	2203      	movs	r2, #3
 8001860:	701a      	strb	r2, [r3, #0]
		if (stop_sense == 0){grandState = stop;}
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <GrandStatumix+0x1a4>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <GrandStatumix+0xac>
 800186a:	4b3c      	ldr	r3, [pc, #240]	; (800195c <GrandStatumix+0x198>)
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
		if (bluecounter != 0){grandState = work;} // can go work from ready only
 8001870:	4b40      	ldr	r3, [pc, #256]	; (8001974 <GrandStatumix+0x1b0>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d066      	beq.n	8001946 <GrandStatumix+0x182>
 8001878:	4b38      	ldr	r3, [pc, #224]	; (800195c <GrandStatumix+0x198>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
	break;
 800187e:	e062      	b.n	8001946 <GrandStatumix+0x182>

	case work:
		HAL_GPIO_WritePin(PLamp_Blue_GPIO_Port, PLamp_Blue_Pin, GPIO_PIN_SET);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001886:	4836      	ldr	r0, [pc, #216]	; (8001960 <GrandStatumix+0x19c>)
 8001888:	f002 f9ba 	bl	8003c00 <HAL_GPIO_WritePin>

	// transfer to while

		if (pwr_sense == 1){
 800188c:	4b38      	ldr	r3, [pc, #224]	; (8001970 <GrandStatumix+0x1ac>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d106      	bne.n	80018a2 <GrandStatumix+0xde>
			grandState = emer;
 8001894:	4b31      	ldr	r3, [pc, #196]	; (800195c <GrandStatumix+0x198>)
 8001896:	2203      	movs	r2, #3
 8001898:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <GrandStatumix+0x1b4>)
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
		if (stop_sense == 0){
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <GrandStatumix+0x1a4>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d14f      	bne.n	800194a <GrandStatumix+0x186>
			PWMOut = 0;
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <GrandStatumix+0x1a8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	801a      	strh	r2, [r3, #0]
			grandState = stopnd;
 80018b0:	4b2a      	ldr	r3, [pc, #168]	; (800195c <GrandStatumix+0x198>)
 80018b2:	2204      	movs	r2, #4
 80018b4:	701a      	strb	r2, [r3, #0]
			u_contr = 0;}
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <GrandStatumix+0x1b4>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
	break;
 80018be:	e044      	b.n	800194a <GrandStatumix+0x186>

	case stop:
		HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	4826      	ldr	r0, [pc, #152]	; (8001960 <GrandStatumix+0x19c>)
 80018c8:	f002 f99a 	bl	8003c00 <HAL_GPIO_WritePin>
		PWMOut = 0;
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <GrandStatumix+0x1a8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	801a      	strh	r2, [r3, #0]

		if (stop_sense == 1){
 80018d2:	4b25      	ldr	r3, [pc, #148]	; (8001968 <GrandStatumix+0x1a4>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d139      	bne.n	800194e <GrandStatumix+0x18a>
			grandState = Ready;
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <GrandStatumix+0x198>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]

			mot_dirctn++;
 80018e0:	4b26      	ldr	r3, [pc, #152]	; (800197c <GrandStatumix+0x1b8>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <GrandStatumix+0x1b8>)
 80018ea:	701a      	strb	r2, [r3, #0]
			mot_dirctn%=2;
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <GrandStatumix+0x1b8>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <GrandStatumix+0x1b8>)
 80018f8:	701a      	strb	r2, [r3, #0]
		}
	break;
 80018fa:	e028      	b.n	800194e <GrandStatumix+0x18a>

	case stopnd:
			HAL_GPIO_WritePin(PLamp_Yellow_GPIO_Port, PLamp_Yellow_Pin, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001902:	4817      	ldr	r0, [pc, #92]	; (8001960 <GrandStatumix+0x19c>)
 8001904:	f002 f97c 	bl	8003c00 <HAL_GPIO_WritePin>
			PWMOut = 0;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <GrandStatumix+0x1a8>)
 800190a:	2200      	movs	r2, #0
 800190c:	801a      	strh	r2, [r3, #0]
			Integral = 0;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <GrandStatumix+0x1bc>)
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	601a      	str	r2, [r3, #0]

			if (stop_sense == 1){
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <GrandStatumix+0x1a4>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d119      	bne.n	8001952 <GrandStatumix+0x18e>
				grandState = work;
 800191e:	4b0f      	ldr	r3, [pc, #60]	; (800195c <GrandStatumix+0x198>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
			}
		break;
 8001924:	e015      	b.n	8001952 <GrandStatumix+0x18e>

	case emer:
		PWMOut = 0;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <GrandStatumix+0x1a8>)
 8001928:	2200      	movs	r2, #0
 800192a:	801a      	strh	r2, [r3, #0]
		if (pwr_sense == 0){
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <GrandStatumix+0x1ac>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d110      	bne.n	8001956 <GrandStatumix+0x192>
			grandState = Ready;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <GrandStatumix+0x198>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800193a:	2064      	movs	r0, #100	; 0x64
 800193c:	f001 fa7e 	bl	8002e3c <HAL_Delay>
			IOExpenderInit();
 8001940:	f000 fa18 	bl	8001d74 <IOExpenderInit>
		}
	break;
 8001944:	e007      	b.n	8001956 <GrandStatumix+0x192>
	break;
 8001946:	bf00      	nop
 8001948:	e006      	b.n	8001958 <GrandStatumix+0x194>
	break;
 800194a:	bf00      	nop
 800194c:	e004      	b.n	8001958 <GrandStatumix+0x194>
	break;
 800194e:	bf00      	nop
 8001950:	e002      	b.n	8001958 <GrandStatumix+0x194>
		break;
 8001952:	bf00      	nop
 8001954:	e000      	b.n	8001958 <GrandStatumix+0x194>
	break;
 8001956:	bf00      	nop
	}
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000278 	.word	0x20000278
 8001960:	40020400 	.word	0x40020400
 8001964:	40020800 	.word	0x40020800
 8001968:	2000027a 	.word	0x2000027a
 800196c:	20000000 	.word	0x20000000
 8001970:	20000279 	.word	0x20000279
 8001974:	200003bd 	.word	0x200003bd
 8001978:	200003cc 	.word	0x200003cc
 800197c:	200003bc 	.word	0x200003bc
 8001980:	200003e0 	.word	0x200003e0

08001984 <GraytoBinario>:
////////// Absolute Encoder ////////////////////////////////////////////
uint16_t GraytoBinario(uint16_t grayx,uint8_t numbit){ // numbit=10
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	460a      	mov	r2, r1
 800198e:	80fb      	strh	r3, [r7, #6]
 8001990:	4613      	mov	r3, r2
 8001992:	717b      	strb	r3, [r7, #5]

	uint16_t binaryout = 0b0;
 8001994:	2300      	movs	r3, #0
 8001996:	82fb      	strh	r3, [r7, #22]

    binaryout = (grayx >> (numbit-1))&0x01;
 8001998:	88fa      	ldrh	r2, [r7, #6]
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	3b01      	subs	r3, #1
 800199e:	fa42 f303 	asr.w	r3, r2, r3
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	82fb      	strh	r3, [r7, #22]
    //std::cout << binaryout << std::endl;

    for (int i = 1; i < numbit ;i++){
 80019aa:	2301      	movs	r3, #1
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	e01d      	b.n	80019ec <GraytoBinario+0x68>
        /* XOR operation */
        int cp1 = binaryout&0x01 ;//>> (numbit-i)
 80019b0:	8afb      	ldrh	r3, [r7, #22]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
        int cp2 = grayx >> (numbit-(i+1))&0x01; //
 80019b8:	88fa      	ldrh	r2, [r7, #6]
 80019ba:	7979      	ldrb	r1, [r7, #5]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	3301      	adds	r3, #1
 80019c0:	1acb      	subs	r3, r1, r3
 80019c2:	fa42 f303 	asr.w	r3, r2, r3
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]

        if (cp1 == cp2)
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d103      	bne.n	80019dc <GraytoBinario+0x58>
            {binaryout = (binaryout << 1) + 0; } //qd = 0;
 80019d4:	8afb      	ldrh	r3, [r7, #22]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	82fb      	strh	r3, [r7, #22]
 80019da:	e004      	b.n	80019e6 <GraytoBinario+0x62>
        else
            {binaryout = (binaryout << 1) + 1; } //qd = 1;
 80019dc:	8afb      	ldrh	r3, [r7, #22]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	82fb      	strh	r3, [r7, #22]
    for (int i = 1; i < numbit ;i++){
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3301      	adds	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	797b      	ldrb	r3, [r7, #5]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbdd      	blt.n	80019b0 <GraytoBinario+0x2c>
        //std::cout << "cp" << i << " " << cp1 << cp2 << " " << qd << "  "<<binaryout << std::endl;
    }
    //BinPos = binaryout;
    return binaryout;
 80019f4:	8afb      	ldrh	r3, [r7, #22]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	0000      	movs	r0, r0
 8001a04:	0000      	movs	r0, r0
	...

08001a08 <encoderSpeedReaderCycle>:

void encoderSpeedReaderCycle() {
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
	// re code using position dif time
	//get DMA Position form number of data
	uint32_t CapPos =CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 8001a0e:	4932      	ldr	r1, [pc, #200]	; (8001ad8 <encoderSpeedReaderCycle+0xd0>)
 8001a10:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001a12:	6809      	ldr	r1, [r1, #0]
 8001a14:	6849      	ldr	r1, [r1, #4]
 8001a16:	f1c1 0110 	rsb	r1, r1, #16
 8001a1a:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0 ;
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	6079      	str	r1, [r7, #4]

	//calculate diff from all buffer except current dma
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8001a20:	2402      	movs	r4, #2
 8001a22:	e022      	b.n	8001a6a <encoderSpeedReaderCycle+0x62>
	{
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 8001a24:	4620      	mov	r0, r4
 8001a26:	6839      	ldr	r1, [r7, #0]
 8001a28:	4401      	add	r1, r0
 8001a2a:	3101      	adds	r1, #1
 8001a2c:	f001 010f 	and.w	r1, r1, #15
 8001a30:	482a      	ldr	r0, [pc, #168]	; (8001adc <encoderSpeedReaderCycle+0xd4>)
 8001a32:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8001a36:	4625      	mov	r5, r4
 8001a38:	6839      	ldr	r1, [r7, #0]
 8001a3a:	4429      	add	r1, r5
 8001a3c:	f001 010f 	and.w	r1, r1, #15
 8001a40:	4d26      	ldr	r5, [pc, #152]	; (8001adc <encoderSpeedReaderCycle+0xd4>)
 8001a42:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8001a46:	1a41      	subs	r1, r0, r1
 8001a48:	2000      	movs	r0, #0
 8001a4a:	460a      	mov	r2, r1
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4824      	ldr	r0, [pc, #144]	; (8001ae0 <encoderSpeedReaderCycle+0xd8>)
 8001a50:	00e1      	lsls	r1, r4, #3
 8001a52:	4401      	add	r1, r0
 8001a54:	e9c1 2300 	strd	r2, r3, [r1]
		//Sum all  Diff
		sum += DiffTime[i];
 8001a58:	4821      	ldr	r0, [pc, #132]	; (8001ae0 <encoderSpeedReaderCycle+0xd8>)
 8001a5a:	00e1      	lsls	r1, r4, #3
 8001a5c:	4401      	add	r1, r0
 8001a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4401      	add	r1, r0
 8001a66:	6079      	str	r1, [r7, #4]
	for(register int i=2 ;i < CAPTURENUM-1;i++)
 8001a68:	3401      	adds	r4, #1
 8001a6a:	2c0e      	cmp	r4, #14
 8001a6c:	ddda      	ble.n	8001a24 <encoderSpeedReaderCycle+0x1c>
	}

	//mean all Diff
	MeanTime =sum / (float)(CAPTURENUM-3);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a78:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <encoderSpeedReaderCycle+0xdc>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
	// Meantime = 1 time period for 1 pulse
	// 60000000 / MeanTime = amount of pulse in 1 minute with that time period
	// 1024 pulse per round

	RoundNum = (60000000.0 / MeanTime)/1024.0; // round per min detect by 1024 clk
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <encoderSpeedReaderCycle+0xdc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd08 	bl	80004a0 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	a10e      	add	r1, pc, #56	; (adr r1, 8001ad0 <encoderSpeedReaderCycle+0xc8>)
 8001a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a9a:	f7fe fe83 	bl	80007a4 <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <encoderSpeedReaderCycle+0xe0>)
 8001aac:	f7fe fe7a 	bl	80007a4 <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7fe ff5c 	bl	8000974 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <encoderSpeedReaderCycle+0xe4>)
 8001ac0:	6013      	str	r3, [r2, #0]

}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
 8001ad0:	00000000 	.word	0x00000000
 8001ad4:	418c9c38 	.word	0x418c9c38
 8001ad8:	200000fc 	.word	0x200000fc
 8001adc:	20000298 	.word	0x20000298
 8001ae0:	200002d8 	.word	0x200002d8
 8001ae4:	20000350 	.word	0x20000350
 8001ae8:	40900000 	.word	0x40900000
 8001aec:	20000354 	.word	0x20000354

08001af0 <Speedsmoothfunc>:

void Speedsmoothfunc(float inpdat){
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	ed87 0a01 	vstr	s0, [r7, #4]
	//static uint8_t scc 0;
	for(int j = CAPTURENUM-1; j >= 0;j--){
 8001afa:	230f      	movs	r3, #15
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e00d      	b.n	8001b1c <Speedsmoothfunc+0x2c>
		speedsmoothlog[j] = speedsmoothlog[j-1];
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <Speedsmoothfunc+0xb8>)
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4926      	ldr	r1, [pc, #152]	; (8001ba8 <Speedsmoothfunc+0xb8>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	601a      	str	r2, [r3, #0]
	for(int j = CAPTURENUM-1; j >= 0;j--){
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	daee      	bge.n	8001b00 <Speedsmoothfunc+0x10>
	}
	speedsmoothlog[0] = inpdat;
 8001b22:	4a21      	ldr	r2, [pc, #132]	; (8001ba8 <Speedsmoothfunc+0xb8>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6013      	str	r3, [r2, #0]

	float summa = 0.0;
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
	int errcut = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
	for (int k = 0; k < CAPTURENUM;k++){
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	e01f      	b.n	8001b78 <Speedsmoothfunc+0x88>
		if (speedsmoothlog[k]>=500){errcut++;}
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <Speedsmoothfunc+0xb8>)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001bac <Speedsmoothfunc+0xbc>
 8001b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	db03      	blt.n	8001b5a <Speedsmoothfunc+0x6a>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e00b      	b.n	8001b72 <Speedsmoothfunc+0x82>
		else{summa+= speedsmoothlog[k];}
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <Speedsmoothfunc+0xb8>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6e:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int k = 0; k < CAPTURENUM;k++){
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3301      	adds	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	dddc      	ble.n	8001b38 <Speedsmoothfunc+0x48>

	}
	RoundNumnd_sm =  summa / (CAPTURENUM-errcut);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1c3 0310 	rsb	r3, r3, #16
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <Speedsmoothfunc+0xc0>)
 8001b96:	edc3 7a00 	vstr	s15, [r3]
}
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000360 	.word	0x20000360
 8001bac:	43fa0000 	.word	0x43fa0000
 8001bb0:	200003a8 	.word	0x200003a8

08001bb4 <PIDzero>:

///////////////////// PID Zero /////////////////////////////
void PIDzero(){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	CrrntTime = micros();
 8001bb8:	f000 fdae 	bl	8002718 <micros>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7fe ffee 	bl	8000ba4 <__aeabi_ul2f>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4a32      	ldr	r2, [pc, #200]	; (8001c94 <PIDzero+0xe0>)
 8001bcc:	6013      	str	r3, [r2, #0]
	DeltaTime = (CrrntTime - PreviTime) / 1000000.0; // seconds
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <PIDzero+0xe0>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <PIDzero+0xe4>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bde:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001c9c <PIDzero+0xe8>
 8001be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <PIDzero+0xec>)
 8001be8:	edc3 7a00 	vstr	s15, [r3]
	PreviTime = CrrntTime; // log previ here for next loop
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <PIDzero+0xe0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <PIDzero+0xe4>)
 8001bf2:	6013      	str	r3, [r2, #0]

	ErrPos[0] = TargetDeg - BinPosXI;
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <PIDzero+0xf0>)
 8001bf6:	ed93 7a00 	vldr	s14, [r3]
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <PIDzero+0xf4>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0a:	4b28      	ldr	r3, [pc, #160]	; (8001cac <PIDzero+0xf8>)
 8001c0c:	edc3 7a00 	vstr	s15, [r3]

	Propo = K_P * ErrPos[0];
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <PIDzero+0xf8>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <PIDzero+0xfc>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <PIDzero+0x100>)
 8001c22:	edc3 7a00 	vstr	s15, [r3]

	Integral = Integral + ( ErrPos[0] * DeltaTime ); // Integral -Newton-Leibniz
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <PIDzero+0xf8>)
 8001c28:	ed93 7a00 	vldr	s14, [r3]
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <PIDzero+0xec>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <PIDzero+0x104>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <PIDzero+0x104>)
 8001c42:	edc3 7a00 	vstr	s15, [r3]

	Derivate = (ErrPos[0]-ErrPos[1]) / DeltaTime; // d/dt position
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <PIDzero+0xf8>)
 8001c48:	ed93 7a00 	vldr	s14, [r3]
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <PIDzero+0xf8>)
 8001c4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c52:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <PIDzero+0xec>)
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <PIDzero+0x108>)
 8001c62:	edc3 7a00 	vstr	s15, [r3]

	u_contr = Propo + (K_I * Integral) ; // PID u[k] + (K_D * Derivate)
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <PIDzero+0x10c>)
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <PIDzero+0x104>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <PIDzero+0x100>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <PIDzero+0x110>)
 8001c82:	edc3 7a00 	vstr	s15, [r3]

	ErrPos[1] = ErrPos[0]; // log previous error
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <PIDzero+0xf8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <PIDzero+0xf8>)
 8001c8c:	6053      	str	r3, [r2, #4]
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200003d8 	.word	0x200003d8
 8001c98:	200003d0 	.word	0x200003d0
 8001c9c:	49742400 	.word	0x49742400
 8001ca0:	200003d4 	.word	0x200003d4
 8001ca4:	200003c0 	.word	0x200003c0
 8001ca8:	20000294 	.word	0x20000294
 8001cac:	200003c4 	.word	0x200003c4
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	200003dc 	.word	0x200003dc
 8001cb8:	200003e0 	.word	0x200003e0
 8001cbc:	200003e4 	.word	0x200003e4
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	200003cc 	.word	0x200003cc

08001cc8 <MotDrvCytron>:

void MotDrvCytron(){
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

	//   direction chk
	if(u_contr < 0){mot_dirctn= 0;}
 8001ccc:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <MotDrvCytron+0x9c>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	d503      	bpl.n	8001ce4 <MotDrvCytron+0x1c>
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <MotDrvCytron+0xa0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	e00e      	b.n	8001d02 <MotDrvCytron+0x3a>
	else if(u_contr > 0) {mot_dirctn = 1;}
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <MotDrvCytron+0x9c>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf2:	dd03      	ble.n	8001cfc <MotDrvCytron+0x34>
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <MotDrvCytron+0xa0>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	e002      	b.n	8001d02 <MotDrvCytron+0x3a>
	else{PWMOut = 0;}
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MotDrvCytron+0xa4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	801a      	strh	r2, [r3, #0]

	// speed
	PWMOut= (int)fabsf(u_contr); // Absolute int
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MotDrvCytron+0x9c>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	eef0 7ae7 	vabs.f32	s15, s15
 8001d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d10:	ee17 3a90 	vmov	r3, s15
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MotDrvCytron+0xa4>)
 8001d18:	801a      	strh	r2, [r3, #0]
	if(PWMOut> 4000){PWMOut = 4000;} // saturate 50% gear 1:6 - 120rpm => 10rpm
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MotDrvCytron+0xa4>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001d22:	d903      	bls.n	8001d2c <MotDrvCytron+0x64>
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MotDrvCytron+0xa4>)
 8001d26:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001d2a:	801a      	strh	r2, [r3, #0]
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MotDrvCytron+0xa4>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001d34:	d210      	bcs.n	8001d58 <MotDrvCytron+0x90>
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MotDrvCytron+0xa8>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	eef0 7ae7 	vabs.f32	s15, s15
 8001d40:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	da00      	bge.n	8001d50 <MotDrvCytron+0x88>
	//if(ErrPos[0] < 2){PWMOut = 0;}
}
 8001d4e:	e003      	b.n	8001d58 <MotDrvCytron+0x90>
	if(PWMOut < 1600 && fabsf(ErrPos[0]) >= 4){PWMOut = 1600;} //pvnt too low pwm that can't drive mot
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MotDrvCytron+0xa4>)
 8001d52:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001d56:	801a      	strh	r2, [r3, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	200003cc 	.word	0x200003cc
 8001d68:	200003bc 	.word	0x200003bc
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	200003c4 	.word	0x200003c4

08001d74 <IOExpenderInit>:

/////////////////////Abs Encoder I2C////////////////////////////////////////////
void IOExpenderInit() {// call when start system
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af04      	add	r7, sp, #16
			0x00, 0x00, 0x00, 0x00,
			0x00, // 0x12 GPIOA
			0x00, // 0x13 GPIOB
			0x00, 0x00 };
	// OLATB -> Out data for pinB
	HAL_I2C_Mem_Write(&hi2c1, ADDR_IOXT, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 8001d7a:	2364      	movs	r3, #100	; 0x64
 8001d7c:	9302      	str	r3, [sp, #8]
 8001d7e:	2316      	movs	r3, #22
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <IOExpenderInit+0x24>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2301      	movs	r3, #1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <IOExpenderInit+0x28>)
 8001d8e:	f002 f8c7 	bl	8003f20 <HAL_I2C_Mem_Write>
			0x16, 100);
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000014 	.word	0x20000014
 8001d9c:	20000054 	.word	0x20000054

08001da0 <AbsEncI2CReadx>:

void AbsEncI2CReadx(uint8_t *RawRAB){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af04      	add	r7, sp, #16
 8001da6:	6078      	str	r0, [r7, #4]

	if(flag_absenc != 0 && hi2c1.State == HAL_I2C_STATE_READY){
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <AbsEncI2CReadx+0xa4>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d044      	beq.n	8001e3a <AbsEncI2CReadx+0x9a>
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <AbsEncI2CReadx+0xa8>)
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d13e      	bne.n	8001e3a <AbsEncI2CReadx+0x9a>
		switch(flag_absenc){
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <AbsEncI2CReadx+0xa4>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d002      	beq.n	8001dca <AbsEncI2CReadx+0x2a>
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d010      	beq.n	8001dea <AbsEncI2CReadx+0x4a>
		default:
			break;
 8001dc8:	e038      	b.n	8001e3c <AbsEncI2CReadx+0x9c>

		case 1:
			//HAL_I2C_Master_Receive(&hi2c1, ADDR_IOXT, GrayCBitx, 1, 100);
			//HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, Size, XferOptions);
			HAL_I2C_Mem_Read(&hi2c1, ADDR_IOXT, 0x12, I2C_MEMADD_SIZE_8BIT,
 8001dca:	2364      	movs	r3, #100	; 0x64
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	2212      	movs	r2, #18
 8001dda:	2140      	movs	r1, #64	; 0x40
 8001ddc:	481a      	ldr	r0, [pc, #104]	; (8001e48 <AbsEncI2CReadx+0xa8>)
 8001dde:	f002 f999 	bl	8004114 <HAL_I2C_Mem_Read>
						RawRAB, 2, 100);
			flag_absenc = 2;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <AbsEncI2CReadx+0xa4>)
 8001de4:	2202      	movs	r2, #2
 8001de6:	701a      	strb	r2, [r3, #0]
		break;
 8001de8:	e028      	b.n	8001e3c <AbsEncI2CReadx+0x9c>

		case 2:
			//invert in IPOL
			GrayCBitXI = (RawEnBitAB[1] << 8) | RawEnBitAB[0]; // GrayCBitx
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <AbsEncI2CReadx+0xac>)
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <AbsEncI2CReadx+0xac>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <AbsEncI2CReadx+0xb0>)
 8001e00:	801a      	strh	r2, [r3, #0]

			//GrayCBitXI = ~GrayCBitx - 0b1111110000000000; // invert and clear 6 high
			//GrayCBitXI = ~GrayCBitx & 0b0000001111111111;
			BinPosXI = GraytoBinario(GrayCBitXI, 10) + POSOFFSET;  //
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <AbsEncI2CReadx+0xb0>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	210a      	movs	r1, #10
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fdbb 	bl	8001984 <GraytoBinario>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f5a3 73dd 	sub.w	r3, r3, #442	; 0x1ba
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <AbsEncI2CReadx+0xb4>)
 8001e18:	801a      	strh	r2, [r3, #0]
			if (BinPosXI >= 1024){BinPosXI = BinPosXI % 1024;}
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <AbsEncI2CReadx+0xb4>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e22:	d306      	bcc.n	8001e32 <AbsEncI2CReadx+0x92>
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <AbsEncI2CReadx+0xb4>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <AbsEncI2CReadx+0xb4>)
 8001e30:	801a      	strh	r2, [r3, #0]
			flag_absenc = 0;
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <AbsEncI2CReadx+0xa4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
		break;
 8001e38:	e000      	b.n	8001e3c <AbsEncI2CReadx+0x9c>
		}
	}
 8001e3a:	bf00      	nop
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000296 	.word	0x20000296
 8001e48:	20000054 	.word	0x20000054
 8001e4c:	20000290 	.word	0x20000290
 8001e50:	20000292 	.word	0x20000292
 8001e54:	20000294 	.word	0x20000294

08001e58 <Efft_activate>:
//////////////// End Effector /////////////////////////////////
void Efft_activate(){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af02      	add	r7, sp, #8
	uint8_t cmmd = 0x45;
 8001e5e:	2345      	movs	r3, #69	; 0x45
 8001e60:	71fb      	strb	r3, [r7, #7]

	static enum{ef_INIT, ef_shoot} efshoot = ef_INIT;
	switch(efshoot){
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <Efft_activate+0x7c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d015      	beq.n	8001e96 <Efft_activate+0x3e>
	default:
	case ef_INIT:
		if(flag_efftActi != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <Efft_activate+0x80>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d029      	beq.n	8001ec6 <Efft_activate+0x6e>
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <Efft_activate+0x84>)
 8001e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d123      	bne.n	8001ec6 <Efft_activate+0x6e>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 0, I2C_FIRST_FRAME);
 8001e7e:	1dfa      	adds	r2, r7, #7
 8001e80:	2301      	movs	r3, #1
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2300      	movs	r3, #0
 8001e86:	2146      	movs	r1, #70	; 0x46
 8001e88:	4814      	ldr	r0, [pc, #80]	; (8001edc <Efft_activate+0x84>)
 8001e8a:	f002 fb69 	bl	8004560 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_FIRST_AND_LAST_FRAME);
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &cmmd, 2, 100);
			efshoot = ef_shoot;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <Efft_activate+0x7c>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001e94:	e017      	b.n	8001ec6 <Efft_activate+0x6e>

	case ef_shoot:
		if (hi2c3.State == HAL_I2C_STATE_READY){
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <Efft_activate+0x84>)
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d113      	bne.n	8001eca <Efft_activate+0x72>
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &cmmd, 1, I2C_LAST_FRAME);
 8001ea2:	1dfa      	adds	r2, r7, #7
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	2146      	movs	r1, #70	; 0x46
 8001eac:	480b      	ldr	r0, [pc, #44]	; (8001edc <Efft_activate+0x84>)
 8001eae:	f002 fb57 	bl	8004560 <HAL_I2C_Master_Seq_Transmit_IT>
			efshoot = ef_INIT;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <Efft_activate+0x7c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
			flag_efftActi = 0;
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <Efft_activate+0x80>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
			trig_efftRead = 1;
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <Efft_activate+0x88>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001ec4:	e001      	b.n	8001eca <Efft_activate+0x72>
	break;
 8001ec6:	bf00      	nop
 8001ec8:	e000      	b.n	8001ecc <Efft_activate+0x74>
	break;
 8001eca:	bf00      	nop
	}

}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	2000042e 	.word	0x2000042e
 8001ed8:	200003e9 	.word	0x200003e9
 8001edc:	200000a8 	.word	0x200000a8
 8001ee0:	200003eb 	.word	0x200003eb

08001ee4 <Efft_read>:
void Efft_read(uint8_t *Rddata){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	6078      	str	r0, [r7, #4]
		HAL_I2C_Mem_Read_IT(&hi2c3, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1);
		//HAL_I2C_Mem_Read(&hi2c1, ADDR_EFFT, &readRQ, I2C_MEMADD_SIZE_8BIT, Rddata, 1, 100);
		flag_efftRead = 0;
	}
	*/
	switch(efrdStatus){
 8001eec:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <Efft_read+0x74>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d015      	beq.n	8001f20 <Efft_read+0x3c>
	default:
	case 0:
		if (flag_efftRead != 0 && hi2c3.State == HAL_I2C_STATE_READY){
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <Efft_read+0x78>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d026      	beq.n	8001f4a <Efft_read+0x66>
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <Efft_read+0x7c>)
 8001efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d120      	bne.n	8001f4a <Efft_read+0x66>
			//HAL_I2C_Master_Transmit_IT(&hi2c3, ADDR_EFFT, 0x23, 1);
			HAL_I2C_Master_Seq_Transmit_IT(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
 8001f08:	2302      	movs	r3, #2
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <Efft_read+0x80>)
 8001f10:	2146      	movs	r1, #70	; 0x46
 8001f12:	4813      	ldr	r0, [pc, #76]	; (8001f60 <Efft_read+0x7c>)
 8001f14:	f002 fb24 	bl	8004560 <HAL_I2C_Master_Seq_Transmit_IT>
			//HAL_I2C_Master_Transmit(&hi2c3, ADDR_EFFT, &readRQ, 2, 100);
			//HAL_I2C_Master_Seq_Transmit_DMA(&hi2c3, ADDR_EFFT, &readRQ, 1, I2C_FIRST_AND_NEXT_FRAME);
			efrdStatus = 1;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <Efft_read+0x74>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
		}
	break;
 8001f1e:	e014      	b.n	8001f4a <Efft_read+0x66>

	case 1:

		if (hi2c3.State == HAL_I2C_STATE_READY){
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <Efft_read+0x7c>)
 8001f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d110      	bne.n	8001f4e <Efft_read+0x6a>
			HAL_I2C_Master_Seq_Receive_IT(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2301      	movs	r3, #1
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	2146      	movs	r1, #70	; 0x46
 8001f36:	480a      	ldr	r0, [pc, #40]	; (8001f60 <Efft_read+0x7c>)
 8001f38:	f002 fbd8 	bl	80046ec <HAL_I2C_Master_Seq_Receive_IT>
			//HAL_I2C_Master_Seq_Receive_DMA(&hi2c3, ADDR_EFFT, Rddata, 1, I2C_LAST_FRAME);
			//HAL_I2C_Master_Receive(&hi2c3, ADDR_EFFT ,Rddata, 1, 100);
		flag_efftRead = 0;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <Efft_read+0x78>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
		efrdStatus = 0;
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <Efft_read+0x74>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
			}
	break;
 8001f48:	e001      	b.n	8001f4e <Efft_read+0x6a>
	break;
 8001f4a:	bf00      	nop
 8001f4c:	e000      	b.n	8001f50 <Efft_read+0x6c>
	break;
 8001f4e:	bf00      	nop
	}

}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000042f 	.word	0x2000042f
 8001f5c:	200003ea 	.word	0x200003ea
 8001f60:	200000a8 	.word	0x200000a8
 8001f64:	2000002a 	.word	0x2000002a

08001f68 <All_mode_UARTUI>:
/////////////////UART UI Base System ////////////////////////////
void All_mode_UARTUI()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	// DataIn = 1 byte Data from UART Recieve
	switch (chkM){				// Check mode State
 8001f6e:	4b84      	ldr	r3, [pc, #528]	; (8002180 <All_mode_UARTUI+0x218>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d016      	beq.n	8001fa4 <All_mode_UARTUI+0x3c>
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	f000 8316 	beq.w	80025a8 <All_mode_UARTUI+0x640>
		default:
		case 0: 				// Check start INIT
			StartM = DataIn;    // 	Use in Checksum Frame 3
 8001f7c:	4b81      	ldr	r3, [pc, #516]	; (8002184 <All_mode_UARTUI+0x21c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4b81      	ldr	r3, [pc, #516]	; (8002188 <All_mode_UARTUI+0x220>)
 8001f84:	701a      	strb	r2, [r3, #0]
			uint8_t chkStart = DataIn >> 4;
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <All_mode_UARTUI+0x21c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	111b      	asrs	r3, r3, #4
 8001f8c:	71fb      	strb	r3, [r7, #7]
			if (chkStart == 0b1001){ // 9
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d103      	bne.n	8001f9c <All_mode_UARTUI+0x34>
				chkM = 1;
 8001f94:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <All_mode_UARTUI+0x218>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			}else{chkM = 0;}
			break;
 8001f9a:	e306      	b.n	80025aa <All_mode_UARTUI+0x642>
			}else{chkM = 0;}
 8001f9c:	4b78      	ldr	r3, [pc, #480]	; (8002180 <All_mode_UARTUI+0x218>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
			break;
 8001fa2:	e302      	b.n	80025aa <All_mode_UARTUI+0x642>

		case 1:					// Check if mode 1 - 14 or not
			NameM = (DataIn & 0b00001111); // 15
 8001fa4:	4b77      	ldr	r3, [pc, #476]	; (8002184 <All_mode_UARTUI+0x21c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b76      	ldr	r3, [pc, #472]	; (800218c <All_mode_UARTUI+0x224>)
 8001fb2:	701a      	strb	r2, [r3, #0]
			if (NameM >= 1 && NameM <= 14){
 8001fb4:	4b75      	ldr	r3, [pc, #468]	; (800218c <All_mode_UARTUI+0x224>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 82f0 	beq.w	800259e <All_mode_UARTUI+0x636>
 8001fbe:	4b73      	ldr	r3, [pc, #460]	; (800218c <All_mode_UARTUI+0x224>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b0e      	cmp	r3, #14
 8001fc4:	f200 82eb 	bhi.w	800259e <All_mode_UARTUI+0x636>
				chkM = 2;
 8001fc8:	4b6d      	ldr	r3, [pc, #436]	; (8002180 <All_mode_UARTUI+0x218>)
 8001fca:	2202      	movs	r2, #2
 8001fcc:	701a      	strb	r2, [r3, #0]
				switch (NameM){			// 14Mode work State
 8001fce:	4b6f      	ldr	r3, [pc, #444]	; (800218c <All_mode_UARTUI+0x224>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	2b0d      	cmp	r3, #13
 8001fd6:	f200 82e6 	bhi.w	80025a6 <All_mode_UARTUI+0x63e>
 8001fda:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <All_mode_UARTUI+0x78>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	08002019 	.word	0x08002019
 8001fe4:	0800208d 	.word	0x0800208d
 8001fe8:	080020cd 	.word	0x080020cd
 8001fec:	0800210d 	.word	0x0800210d
 8001ff0:	080021b1 	.word	0x080021b1
 8001ff4:	08002225 	.word	0x08002225
 8001ff8:	08002299 	.word	0x08002299
 8001ffc:	0800233d 	.word	0x0800233d
 8002000:	08002393 	.word	0x08002393
 8002004:	080023d3 	.word	0x080023d3
 8002008:	08002455 	.word	0x08002455
 800200c:	08002491 	.word	0x08002491
 8002010:	080024d5 	.word	0x080024d5
 8002014:	0800251f 	.word	0x0800251f
				case 1:			// Check
					if (dataFN == 2){
 8002018:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <All_mode_UARTUI+0x228>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d104      	bne.n	800202a <All_mode_UARTUI+0xc2>
						dataF1 = DataIn;
 8002020:	4b58      	ldr	r3, [pc, #352]	; (8002184 <All_mode_UARTUI+0x21c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <All_mode_UARTUI+0x22c>)
 8002028:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 800202a:	4b59      	ldr	r3, [pc, #356]	; (8002190 <All_mode_UARTUI+0x228>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d104      	bne.n	800203c <All_mode_UARTUI+0xd4>
						dataF2 = DataIn;
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <All_mode_UARTUI+0x21c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <All_mode_UARTUI+0x230>)
 800203a:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 800203c:	4b51      	ldr	r3, [pc, #324]	; (8002184 <All_mode_UARTUI+0x21c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b56      	ldr	r3, [pc, #344]	; (800219c <All_mode_UARTUI+0x234>)
 8002044:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8002046:	4b50      	ldr	r3, [pc, #320]	; (8002188 <All_mode_UARTUI+0x220>)
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	4b52      	ldr	r3, [pc, #328]	; (8002194 <All_mode_UARTUI+0x22c>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b51      	ldr	r3, [pc, #324]	; (8002198 <All_mode_UARTUI+0x230>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2db      	uxtb	r3, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <All_mode_UARTUI+0x238>)
 8002060:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8002062:	4b4e      	ldr	r3, [pc, #312]	; (800219c <All_mode_UARTUI+0x234>)
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <All_mode_UARTUI+0x238>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	f040 827d 	bne.w	800256a <All_mode_UARTUI+0x602>
						//M_state = 1;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002074:	2202      	movs	r2, #2
 8002076:	494b      	ldr	r1, [pc, #300]	; (80021a4 <All_mode_UARTUI+0x23c>)
 8002078:	484b      	ldr	r0, [pc, #300]	; (80021a8 <All_mode_UARTUI+0x240>)
 800207a:	f006 fe12 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 800207e:	4b40      	ldr	r3, [pc, #256]	; (8002180 <All_mode_UARTUI+0x218>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002084:	4b42      	ldr	r3, [pc, #264]	; (8002190 <All_mode_UARTUI+0x228>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
					}
					break;
 800208a:	e26e      	b.n	800256a <All_mode_UARTUI+0x602>
				case 0b0010:			// MCU Connect ,2 byte DataFrame 1
					chksum = DataIn;
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <All_mode_UARTUI+0x21c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b42      	ldr	r3, [pc, #264]	; (800219c <All_mode_UARTUI+0x234>)
 8002094:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);	// Check condition from manual
 8002096:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <All_mode_UARTUI+0x220>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	43db      	mvns	r3, r3
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <All_mode_UARTUI+0x244>)
 80020a0:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){	// Transmit back ack1
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <All_mode_UARTUI+0x234>)
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <All_mode_UARTUI+0x244>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	f040 825f 	bne.w	800256e <All_mode_UARTUI+0x606>
						//M_state = 2;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80020b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b4:	2202      	movs	r2, #2
 80020b6:	493b      	ldr	r1, [pc, #236]	; (80021a4 <All_mode_UARTUI+0x23c>)
 80020b8:	483b      	ldr	r0, [pc, #236]	; (80021a8 <All_mode_UARTUI+0x240>)
 80020ba:	f006 fdf2 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <All_mode_UARTUI+0x218>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80020c4:	4b32      	ldr	r3, [pc, #200]	; (8002190 <All_mode_UARTUI+0x228>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
					}

					break;
 80020ca:	e250      	b.n	800256e <All_mode_UARTUI+0x606>
				case 0b0011:			// MCU DisConnect ,2 byte DataFrame 1
					chksum = DataIn;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <All_mode_UARTUI+0x21c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b32      	ldr	r3, [pc, #200]	; (800219c <All_mode_UARTUI+0x234>)
 80020d4:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <All_mode_UARTUI+0x220>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	43db      	mvns	r3, r3
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <All_mode_UARTUI+0x244>)
 80020e0:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <All_mode_UARTUI+0x234>)
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <All_mode_UARTUI+0x244>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	f040 8241 	bne.w	8002572 <All_mode_UARTUI+0x60a>
						//M_state = 3;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80020f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f4:	2202      	movs	r2, #2
 80020f6:	492b      	ldr	r1, [pc, #172]	; (80021a4 <All_mode_UARTUI+0x23c>)
 80020f8:	482b      	ldr	r0, [pc, #172]	; (80021a8 <All_mode_UARTUI+0x240>)
 80020fa:	f006 fdd2 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <All_mode_UARTUI+0x218>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <All_mode_UARTUI+0x228>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
					}
					break;
 800210a:	e232      	b.n	8002572 <All_mode_UARTUI+0x60a>
				case 4:			// Set Angular Velocity
					if (dataFN == 2){
 800210c:	4b20      	ldr	r3, [pc, #128]	; (8002190 <All_mode_UARTUI+0x228>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d104      	bne.n	800211e <All_mode_UARTUI+0x1b6>
						dataF1 = DataIn;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <All_mode_UARTUI+0x21c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <All_mode_UARTUI+0x22c>)
 800211c:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 800211e:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <All_mode_UARTUI+0x228>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d104      	bne.n	8002130 <All_mode_UARTUI+0x1c8>
						dataF2 = DataIn;
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <All_mode_UARTUI+0x21c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <All_mode_UARTUI+0x230>)
 800212e:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <All_mode_UARTUI+0x21c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b19      	ldr	r3, [pc, #100]	; (800219c <All_mode_UARTUI+0x234>)
 8002138:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <All_mode_UARTUI+0x220>)
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <All_mode_UARTUI+0x22c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4413      	add	r3, r2
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <All_mode_UARTUI+0x230>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	b2db      	uxtb	r3, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <All_mode_UARTUI+0x238>)
 8002154:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <All_mode_UARTUI+0x234>)
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <All_mode_UARTUI+0x238>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	f040 8209 	bne.w	8002576 <All_mode_UARTUI+0x60e>
						//M_state = 4;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 8002164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002168:	2202      	movs	r2, #2
 800216a:	490e      	ldr	r1, [pc, #56]	; (80021a4 <All_mode_UARTUI+0x23c>)
 800216c:	480e      	ldr	r0, [pc, #56]	; (80021a8 <All_mode_UARTUI+0x240>)
 800216e:	f006 fd98 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 8002172:	4b03      	ldr	r3, [pc, #12]	; (8002180 <All_mode_UARTUI+0x218>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <All_mode_UARTUI+0x228>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800217e:	e1fa      	b.n	8002576 <All_mode_UARTUI+0x60e>
 8002180:	20000421 	.word	0x20000421
 8002184:	2000041c 	.word	0x2000041c
 8002188:	20000422 	.word	0x20000422
 800218c:	20000423 	.word	0x20000423
 8002190:	20000424 	.word	0x20000424
 8002194:	20000426 	.word	0x20000426
 8002198:	20000427 	.word	0x20000427
 800219c:	20000429 	.word	0x20000429
 80021a0:	2000042b 	.word	0x2000042b
 80021a4:	2000000c 	.word	0x2000000c
 80021a8:	20000234 	.word	0x20000234
 80021ac:	2000042a 	.word	0x2000042a
				case 5:			// Set Angular Position
					if (dataFN == 2){
 80021b0:	4b98      	ldr	r3, [pc, #608]	; (8002414 <All_mode_UARTUI+0x4ac>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d104      	bne.n	80021c2 <All_mode_UARTUI+0x25a>
						dataF1 = DataIn;
 80021b8:	4b97      	ldr	r3, [pc, #604]	; (8002418 <All_mode_UARTUI+0x4b0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4b97      	ldr	r3, [pc, #604]	; (800241c <All_mode_UARTUI+0x4b4>)
 80021c0:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 80021c2:	4b94      	ldr	r3, [pc, #592]	; (8002414 <All_mode_UARTUI+0x4ac>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d104      	bne.n	80021d4 <All_mode_UARTUI+0x26c>
						dataF2 = DataIn;
 80021ca:	4b93      	ldr	r3, [pc, #588]	; (8002418 <All_mode_UARTUI+0x4b0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b93      	ldr	r3, [pc, #588]	; (8002420 <All_mode_UARTUI+0x4b8>)
 80021d2:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 80021d4:	4b90      	ldr	r3, [pc, #576]	; (8002418 <All_mode_UARTUI+0x4b0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b92      	ldr	r3, [pc, #584]	; (8002424 <All_mode_UARTUI+0x4bc>)
 80021dc:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 80021de:	4b92      	ldr	r3, [pc, #584]	; (8002428 <All_mode_UARTUI+0x4c0>)
 80021e0:	781a      	ldrb	r2, [r3, #0]
 80021e2:	4b8e      	ldr	r3, [pc, #568]	; (800241c <All_mode_UARTUI+0x4b4>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b8d      	ldr	r3, [pc, #564]	; (8002420 <All_mode_UARTUI+0x4b8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4b8d      	ldr	r3, [pc, #564]	; (800242c <All_mode_UARTUI+0x4c4>)
 80021f8:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 80021fa:	4b8a      	ldr	r3, [pc, #552]	; (8002424 <All_mode_UARTUI+0x4bc>)
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	4b8b      	ldr	r3, [pc, #556]	; (800242c <All_mode_UARTUI+0x4c4>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	f040 81b9 	bne.w	800257a <All_mode_UARTUI+0x612>
						//M_state = 5;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 8002208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220c:	2202      	movs	r2, #2
 800220e:	4988      	ldr	r1, [pc, #544]	; (8002430 <All_mode_UARTUI+0x4c8>)
 8002210:	4888      	ldr	r0, [pc, #544]	; (8002434 <All_mode_UARTUI+0x4cc>)
 8002212:	f006 fd46 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <All_mode_UARTUI+0x4d0>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800221c:	4b7d      	ldr	r3, [pc, #500]	; (8002414 <All_mode_UARTUI+0x4ac>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002222:	e1aa      	b.n	800257a <All_mode_UARTUI+0x612>
				case 6:			// Set goal single station
					if (dataFN == 2){
 8002224:	4b7b      	ldr	r3, [pc, #492]	; (8002414 <All_mode_UARTUI+0x4ac>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d104      	bne.n	8002236 <All_mode_UARTUI+0x2ce>
						dataF1 = DataIn;
 800222c:	4b7a      	ldr	r3, [pc, #488]	; (8002418 <All_mode_UARTUI+0x4b0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b7a      	ldr	r3, [pc, #488]	; (800241c <All_mode_UARTUI+0x4b4>)
 8002234:	701a      	strb	r2, [r3, #0]
					}
					if(dataFN == 3){
 8002236:	4b77      	ldr	r3, [pc, #476]	; (8002414 <All_mode_UARTUI+0x4ac>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d104      	bne.n	8002248 <All_mode_UARTUI+0x2e0>
						dataF2 = DataIn;
 800223e:	4b76      	ldr	r3, [pc, #472]	; (8002418 <All_mode_UARTUI+0x4b0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b76      	ldr	r3, [pc, #472]	; (8002420 <All_mode_UARTUI+0x4b8>)
 8002246:	701a      	strb	r2, [r3, #0]
					}
					chksum = DataIn;
 8002248:	4b73      	ldr	r3, [pc, #460]	; (8002418 <All_mode_UARTUI+0x4b0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b75      	ldr	r3, [pc, #468]	; (8002424 <All_mode_UARTUI+0x4bc>)
 8002250:	701a      	strb	r2, [r3, #0]
					chksum2 = ~(StartM + dataF1 + dataF2);
 8002252:	4b75      	ldr	r3, [pc, #468]	; (8002428 <All_mode_UARTUI+0x4c0>)
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	4b71      	ldr	r3, [pc, #452]	; (800241c <All_mode_UARTUI+0x4b4>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4b70      	ldr	r3, [pc, #448]	; (8002420 <All_mode_UARTUI+0x4b8>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	b2db      	uxtb	r3, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b70      	ldr	r3, [pc, #448]	; (800242c <All_mode_UARTUI+0x4c4>)
 800226c:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum2){
 800226e:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <All_mode_UARTUI+0x4bc>)
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	4b6e      	ldr	r3, [pc, #440]	; (800242c <All_mode_UARTUI+0x4c4>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	f040 8181 	bne.w	800257e <All_mode_UARTUI+0x616>
						//M_state = 6;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 800227c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002280:	2202      	movs	r2, #2
 8002282:	496b      	ldr	r1, [pc, #428]	; (8002430 <All_mode_UARTUI+0x4c8>)
 8002284:	486b      	ldr	r0, [pc, #428]	; (8002434 <All_mode_UARTUI+0x4cc>)
 8002286:	f006 fd0c 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 800228a:	4b6b      	ldr	r3, [pc, #428]	; (8002438 <All_mode_UARTUI+0x4d0>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002290:	4b60      	ldr	r3, [pc, #384]	; (8002414 <All_mode_UARTUI+0x4ac>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002296:	e172      	b.n	800257e <All_mode_UARTUI+0x616>
				case 7:			//set Goal multiple station
					if (dataFN == 2){
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <All_mode_UARTUI+0x4ac>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b02      	cmp	r3, #2
 800229e:	d104      	bne.n	80022aa <All_mode_UARTUI+0x342>
						Nstation = DataIn;
 80022a0:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <All_mode_UARTUI+0x4b0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b65      	ldr	r3, [pc, #404]	; (800243c <All_mode_UARTUI+0x4d4>)
 80022a8:	701a      	strb	r2, [r3, #0]
					}
					if (dataFN < Nstation + 3){
 80022aa:	4b64      	ldr	r3, [pc, #400]	; (800243c <All_mode_UARTUI+0x4d4>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	3302      	adds	r3, #2
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <All_mode_UARTUI+0x4ac>)
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	db16      	blt.n	80022e6 <All_mode_UARTUI+0x37e>
						if (dataFN == countN + 3){
 80022b8:	4b56      	ldr	r3, [pc, #344]	; (8002414 <All_mode_UARTUI+0x4ac>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b60      	ldr	r3, [pc, #384]	; (8002440 <All_mode_UARTUI+0x4d8>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	3303      	adds	r3, #3
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d10e      	bne.n	80022e6 <All_mode_UARTUI+0x37e>
							dataFSum += DataIn;
 80022c8:	4b53      	ldr	r3, [pc, #332]	; (8002418 <All_mode_UARTUI+0x4b0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <All_mode_UARTUI+0x4dc>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b5b      	ldr	r3, [pc, #364]	; (8002444 <All_mode_UARTUI+0x4dc>)
 80022d8:	701a      	strb	r2, [r3, #0]
							countN += 1;
 80022da:	4b59      	ldr	r3, [pc, #356]	; (8002440 <All_mode_UARTUI+0x4d8>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <All_mode_UARTUI+0x4d8>)
 80022e4:	701a      	strb	r2, [r3, #0]
						}
					}
					chksum = DataIn;
 80022e6:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <All_mode_UARTUI+0x4b0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <All_mode_UARTUI+0x4bc>)
 80022ee:	701a      	strb	r2, [r3, #0]
					chksum3 = ~(StartM + Nstation + dataFSum);
 80022f0:	4b4d      	ldr	r3, [pc, #308]	; (8002428 <All_mode_UARTUI+0x4c0>)
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	4b51      	ldr	r3, [pc, #324]	; (800243c <All_mode_UARTUI+0x4d4>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b51      	ldr	r3, [pc, #324]	; (8002444 <All_mode_UARTUI+0x4dc>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4413      	add	r3, r2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	b2da      	uxtb	r2, r3
 8002308:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <All_mode_UARTUI+0x4e0>)
 800230a:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum3){
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <All_mode_UARTUI+0x4bc>)
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <All_mode_UARTUI+0x4e0>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 8134 	bne.w	8002582 <All_mode_UARTUI+0x61a>
						//M_state = 7;
						/// Add work here///////////
													///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000);
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	2202      	movs	r2, #2
 8002320:	4943      	ldr	r1, [pc, #268]	; (8002430 <All_mode_UARTUI+0x4c8>)
 8002322:	4844      	ldr	r0, [pc, #272]	; (8002434 <All_mode_UARTUI+0x4cc>)
 8002324:	f006 fcbd 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 8002328:	4b43      	ldr	r3, [pc, #268]	; (8002438 <All_mode_UARTUI+0x4d0>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <All_mode_UARTUI+0x4ac>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
						countN = 0;
 8002334:	4b42      	ldr	r3, [pc, #264]	; (8002440 <All_mode_UARTUI+0x4d8>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
					}
					break;
 800233a:	e122      	b.n	8002582 <All_mode_UARTUI+0x61a>
				case 8:			// Order Go to that position
					chksum = DataIn;
 800233c:	4b36      	ldr	r3, [pc, #216]	; (8002418 <All_mode_UARTUI+0x4b0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <All_mode_UARTUI+0x4bc>)
 8002344:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <All_mode_UARTUI+0x4c0>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	43db      	mvns	r3, r3
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <All_mode_UARTUI+0x4e4>)
 8002350:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <All_mode_UARTUI+0x4bc>)
 8002354:	781a      	ldrb	r2, [r3, #0]
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <All_mode_UARTUI+0x4e4>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	f040 8113 	bne.w	8002586 <All_mode_UARTUI+0x61e>
						//M_state = 8;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002364:	2202      	movs	r2, #2
 8002366:	4932      	ldr	r1, [pc, #200]	; (8002430 <All_mode_UARTUI+0x4c8>)
 8002368:	4832      	ldr	r0, [pc, #200]	; (8002434 <All_mode_UARTUI+0x4cc>)
 800236a:	f006 fc9a 	bl	8008ca2 <HAL_UART_Transmit>
						//// simulate workload
						HAL_Delay(1000);
 800236e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002372:	f000 fd63 	bl	8002e3c <HAL_Delay>
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_f, 2 ,1000);//Fn
 8002376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237a:	2202      	movs	r2, #2
 800237c:	4934      	ldr	r1, [pc, #208]	; (8002450 <All_mode_UARTUI+0x4e8>)
 800237e:	482d      	ldr	r0, [pc, #180]	; (8002434 <All_mode_UARTUI+0x4cc>)
 8002380:	f006 fc8f 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <All_mode_UARTUI+0x4d0>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <All_mode_UARTUI+0x4ac>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002390:	e0f9      	b.n	8002586 <All_mode_UARTUI+0x61e>

				////////////// Frame 2 ////////////////////////////////////////
				case 9:			// Request Current Station
					chksum = DataIn;
 8002392:	4b21      	ldr	r3, [pc, #132]	; (8002418 <All_mode_UARTUI+0x4b0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <All_mode_UARTUI+0x4bc>)
 800239a:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <All_mode_UARTUI+0x4c0>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b29      	ldr	r3, [pc, #164]	; (800244c <All_mode_UARTUI+0x4e4>)
 80023a6:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <All_mode_UARTUI+0x4bc>)
 80023aa:	781a      	ldrb	r2, [r3, #0]
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <All_mode_UARTUI+0x4e4>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 80ea 	bne.w	800258a <All_mode_UARTUI+0x622>
						//M_state = 9;
						/// Add work here///////////
						///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80023b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ba:	2202      	movs	r2, #2
 80023bc:	491c      	ldr	r1, [pc, #112]	; (8002430 <All_mode_UARTUI+0x4c8>)
 80023be:	481d      	ldr	r0, [pc, #116]	; (8002434 <All_mode_UARTUI+0x4cc>)
 80023c0:	f006 fc6f 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 80023c4:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <All_mode_UARTUI+0x4d0>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <All_mode_UARTUI+0x4ac>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
					}
					break;
 80023d0:	e0db      	b.n	800258a <All_mode_UARTUI+0x622>
				case 10:	// Request angular position
					chksum = DataIn;
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <All_mode_UARTUI+0x4b0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <All_mode_UARTUI+0x4bc>)
 80023da:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <All_mode_UARTUI+0x4c0>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <All_mode_UARTUI+0x4e4>)
 80023e6:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <All_mode_UARTUI+0x4bc>)
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <All_mode_UARTUI+0x4e4>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 80cc 	bne.w	800258e <All_mode_UARTUI+0x626>
						//M_state = 10;
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	2202      	movs	r2, #2
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <All_mode_UARTUI+0x4c8>)
 80023fe:	480d      	ldr	r0, [pc, #52]	; (8002434 <All_mode_UARTUI+0x4cc>)
 8002400:	f006 fc4f 	bl	8008ca2 <HAL_UART_Transmit>
						/// Add work here///////////
						///////////////////////////

						//uint16_t angu = BinPosXI * 360 / 1024;
						//HAL_UART_Transmit(&huart2, (uint16_t*)angu, 2 ,1000);
						chkM = 0;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <All_mode_UARTUI+0x4d0>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800240a:	4b02      	ldr	r3, [pc, #8]	; (8002414 <All_mode_UARTUI+0x4ac>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002410:	e0bd      	b.n	800258e <All_mode_UARTUI+0x626>
 8002412:	bf00      	nop
 8002414:	20000424 	.word	0x20000424
 8002418:	2000041c 	.word	0x2000041c
 800241c:	20000426 	.word	0x20000426
 8002420:	20000427 	.word	0x20000427
 8002424:	20000429 	.word	0x20000429
 8002428:	20000422 	.word	0x20000422
 800242c:	2000042b 	.word	0x2000042b
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000234 	.word	0x20000234
 8002438:	20000421 	.word	0x20000421
 800243c:	20000425 	.word	0x20000425
 8002440:	2000042d 	.word	0x2000042d
 8002444:	20000428 	.word	0x20000428
 8002448:	2000042c 	.word	0x2000042c
 800244c:	2000042a 	.word	0x2000042a
 8002450:	20000010 	.word	0x20000010
				case 11:		// Request Max Velo
					chksum = DataIn;
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <All_mode_UARTUI+0x64c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <All_mode_UARTUI+0x650>)
 800245c:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800245e:	4b57      	ldr	r3, [pc, #348]	; (80025bc <All_mode_UARTUI+0x654>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	43db      	mvns	r3, r3
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <All_mode_UARTUI+0x658>)
 8002468:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <All_mode_UARTUI+0x650>)
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	4b54      	ldr	r3, [pc, #336]	; (80025c0 <All_mode_UARTUI+0x658>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d10c      	bne.n	8002490 <All_mode_UARTUI+0x528>
						//M_state = 11;
						/// Add work here///////////
												///////////////////////////
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	2202      	movs	r2, #2
 800247c:	4951      	ldr	r1, [pc, #324]	; (80025c4 <All_mode_UARTUI+0x65c>)
 800247e:	4852      	ldr	r0, [pc, #328]	; (80025c8 <All_mode_UARTUI+0x660>)
 8002480:	f006 fc0f 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 8002484:	4b51      	ldr	r3, [pc, #324]	; (80025cc <All_mode_UARTUI+0x664>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 800248a:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <All_mode_UARTUI+0x668>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
					}
				case 0b1100:	// 12 Enable end effector
					chksum = DataIn;
 8002490:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <All_mode_UARTUI+0x64c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <All_mode_UARTUI+0x650>)
 8002498:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 800249a:	4b48      	ldr	r3, [pc, #288]	; (80025bc <All_mode_UARTUI+0x654>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	43db      	mvns	r3, r3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <All_mode_UARTUI+0x658>)
 80024a4:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <All_mode_UARTUI+0x650>)
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	4b45      	ldr	r3, [pc, #276]	; (80025c0 <All_mode_UARTUI+0x658>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d16f      	bne.n	8002592 <All_mode_UARTUI+0x62a>
						//M_state = 12;
						flag_efftActi = 1;
 80024b2:	4b48      	ldr	r3, [pc, #288]	; (80025d4 <All_mode_UARTUI+0x66c>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]

						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 80024b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024bc:	2202      	movs	r2, #2
 80024be:	4941      	ldr	r1, [pc, #260]	; (80025c4 <All_mode_UARTUI+0x65c>)
 80024c0:	4841      	ldr	r0, [pc, #260]	; (80025c8 <All_mode_UARTUI+0x660>)
 80024c2:	f006 fbee 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <All_mode_UARTUI+0x664>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 80024cc:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <All_mode_UARTUI+0x668>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80024d2:	e05e      	b.n	8002592 <All_mode_UARTUI+0x62a>

				case 0b1101:	// 13  Disable end effector
					chksum = DataIn;
 80024d4:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <All_mode_UARTUI+0x64c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <All_mode_UARTUI+0x650>)
 80024dc:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 80024de:	4b37      	ldr	r3, [pc, #220]	; (80025bc <All_mode_UARTUI+0x654>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <All_mode_UARTUI+0x658>)
 80024e8:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <All_mode_UARTUI+0x650>)
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <All_mode_UARTUI+0x658>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d14f      	bne.n	8002596 <All_mode_UARTUI+0x62e>
						//M_state = 13;

						trig_efftRead = 0;
 80024f6:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <All_mode_UARTUI+0x670>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
						flag_efftRead = 0;
 80024fc:	4b37      	ldr	r3, [pc, #220]	; (80025dc <All_mode_UARTUI+0x674>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 8002502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002506:	2202      	movs	r2, #2
 8002508:	492e      	ldr	r1, [pc, #184]	; (80025c4 <All_mode_UARTUI+0x65c>)
 800250a:	482f      	ldr	r0, [pc, #188]	; (80025c8 <All_mode_UARTUI+0x660>)
 800250c:	f006 fbc9 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <All_mode_UARTUI+0x664>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <All_mode_UARTUI+0x668>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
					}
					break;
 800251c:	e03b      	b.n	8002596 <All_mode_UARTUI+0x62e>

				case 0b1110:	// 14 Set Home
					chksum = DataIn;
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <All_mode_UARTUI+0x64c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <All_mode_UARTUI+0x650>)
 8002526:	701a      	strb	r2, [r3, #0]
					chksum1 = ~(StartM);
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <All_mode_UARTUI+0x654>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	43db      	mvns	r3, r3
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <All_mode_UARTUI+0x658>)
 8002532:	701a      	strb	r2, [r3, #0]
					if (chksum == chksum1){
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <All_mode_UARTUI+0x650>)
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <All_mode_UARTUI+0x658>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d12c      	bne.n	800259a <All_mode_UARTUI+0x632>
						M_state = 14;
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <All_mode_UARTUI+0x678>)
 8002542:	220e      	movs	r2, #14
 8002544:	701a      	strb	r2, [r3, #0]
						/// Add work here///////////
						TargetDeg = 0;
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <All_mode_UARTUI+0x67c>)
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
						//// PID and MotDrv to 0
						HAL_UART_Transmit(&huart2, (uint8_t*)temp_s, 2 ,1000); //Xu
 800254e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002552:	2202      	movs	r2, #2
 8002554:	491b      	ldr	r1, [pc, #108]	; (80025c4 <All_mode_UARTUI+0x65c>)
 8002556:	481c      	ldr	r0, [pc, #112]	; (80025c8 <All_mode_UARTUI+0x660>)
 8002558:	f006 fba3 	bl	8008ca2 <HAL_UART_Transmit>
						chkM = 0;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <All_mode_UARTUI+0x664>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
						dataFN = 0;
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <All_mode_UARTUI+0x668>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002568:	e017      	b.n	800259a <All_mode_UARTUI+0x632>
					break;
 800256a:	bf00      	nop
 800256c:	e01b      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 800256e:	bf00      	nop
 8002570:	e019      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 8002572:	bf00      	nop
 8002574:	e017      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 8002576:	bf00      	nop
 8002578:	e015      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 800257a:	bf00      	nop
 800257c:	e013      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 800257e:	bf00      	nop
 8002580:	e011      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 8002582:	bf00      	nop
 8002584:	e00f      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 8002586:	bf00      	nop
 8002588:	e00d      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 800258a:	bf00      	nop
 800258c:	e00b      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 800258e:	bf00      	nop
 8002590:	e009      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 8002592:	bf00      	nop
 8002594:	e007      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 8002596:	bf00      	nop
 8002598:	e005      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					break;
 800259a:	bf00      	nop
				switch (NameM){			// 14Mode work State
 800259c:	e003      	b.n	80025a6 <All_mode_UARTUI+0x63e>
					} /// End switch NameM

			}
			else{chkM = 0;}
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <All_mode_UARTUI+0x664>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
			break;
 80025a4:	e001      	b.n	80025aa <All_mode_UARTUI+0x642>
 80025a6:	e000      	b.n	80025aa <All_mode_UARTUI+0x642>
		///////////////////////// // 14Mode work State //////////////////////////
		case 2:
			break;
 80025a8:	bf00      	nop
					break;
			}
			*/
	}

}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000041c 	.word	0x2000041c
 80025b8:	20000429 	.word	0x20000429
 80025bc:	20000422 	.word	0x20000422
 80025c0:	2000042a 	.word	0x2000042a
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	20000234 	.word	0x20000234
 80025cc:	20000421 	.word	0x20000421
 80025d0:	20000424 	.word	0x20000424
 80025d4:	200003e9 	.word	0x200003e9
 80025d8:	200003eb 	.word	0x200003eb
 80025dc:	200003ea 	.word	0x200003ea
 80025e0:	20000420 	.word	0x20000420
 80025e4:	200003c0 	.word	0x200003c0

080025e8 <UARTRecieveIT>:

void UARTRecieveIT()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80025ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f2:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 80025f4:	2220      	movs	r2, #32
 80025f6:	491a      	ldr	r1, [pc, #104]	; (8002660 <UARTRecieveIT+0x78>)
 80025f8:	481a      	ldr	r0, [pc, #104]	; (8002664 <UARTRecieveIT+0x7c>)
 80025fa:	f006 fbe4 	bl	8008dc6 <HAL_UART_Receive_IT>
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <UARTRecieveIT+0x7c>)
 8002600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002602:	461a      	mov	r2, r3
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <UARTRecieveIT+0x7c>)
 8002606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002608:	b29b      	uxth	r3, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	4a16      	ldr	r2, [pc, #88]	; (8002668 <UARTRecieveIT+0x80>)
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	4293      	cmp	r3, r2
 8002612:	d01f      	beq.n	8002654 <UARTRecieveIT+0x6c>
	{
		data=RxDataBuffer[dataPos];
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <UARTRecieveIT+0x80>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a11      	ldr	r2, [pc, #68]	; (8002660 <UARTRecieveIT+0x78>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	80fb      	strh	r3, [r7, #6]
		DataIn = data;
 800261e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <UARTRecieveIT+0x84>)
 8002624:	6013      	str	r3, [r2, #0]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <UARTRecieveIT+0x80>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <UARTRecieveIT+0x7c>)
 800262e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002630:	fbb3 f1f2 	udiv	r1, r3, r2
 8002634:	fb01 f202 	mul.w	r2, r1, r2
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <UARTRecieveIT+0x80>)
 800263c:	6013      	str	r3, [r2, #0]
		Posdata = dataPos;
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <UARTRecieveIT+0x80>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <UARTRecieveIT+0x88>)
 8002646:	701a      	strb	r2, [r3, #0]
		dataFN += 1;
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <UARTRecieveIT+0x8c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	b2da      	uxtb	r2, r3
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <UARTRecieveIT+0x8c>)
 8002652:	701a      	strb	r2, [r3, #0]
	}
	All_mode_UARTUI();
 8002654:	f7ff fc88 	bl	8001f68 <All_mode_UARTUI>

}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	200003f8 	.word	0x200003f8
 8002664:	20000234 	.word	0x20000234
 8002668:	20000430 	.word	0x20000430
 800266c:	2000041c 	.word	0x2000041c
 8002670:	20000418 	.word	0x20000418
 8002674:	20000424 	.word	0x20000424

08002678 <HAL_GPIO_EXTI_Callback>:

/////////////// Emer Interrupt /////////////////////////////////
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
	//// EMER ////
	if(GPIO_Pin == GPIO_PIN_11){
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002688:	d10e      	bne.n	80026a8 <HAL_GPIO_EXTI_Callback+0x30>
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
		counter_e++;
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <HAL_GPIO_EXTI_Callback+0x88>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_GPIO_EXTI_Callback+0x88>)
 8002694:	701a      	strb	r2, [r3, #0]
		grandState = emer;
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002698:	2203      	movs	r2, #3
 800269a:	701a      	strb	r2, [r3, #0]
		bluecounter = 0;
 800269c:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <HAL_GPIO_EXTI_Callback+0x90>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
		PWMOut = 0;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_GPIO_EXTI_Callback+0x94>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	801a      	strh	r2, [r3, #0]
		// Motor Driver Torque Lock here
	}
	//// Stop ////
	if(GPIO_Pin == GPIO_PIN_10){
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ae:	d10c      	bne.n	80026ca <HAL_GPIO_EXTI_Callback+0x52>
		PWMOut = 0;
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_GPIO_EXTI_Callback+0x94>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	801a      	strh	r2, [r3, #0]
		bluecounter = 0;
 80026b6:	4b14      	ldr	r3, [pc, #80]	; (8002708 <HAL_GPIO_EXTI_Callback+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
		if(grandState == work){grandState = stopnd;}
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_GPIO_EXTI_Callback+0x8c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d102      	bne.n	80026ca <HAL_GPIO_EXTI_Callback+0x52>
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <HAL_GPIO_EXTI_Callback+0x8c>)
 80026c6:	2204      	movs	r2, #4
 80026c8:	701a      	strb	r2, [r3, #0]
		//else{grandState = stop;}

		}
	//// work Blue button////
	if(GPIO_Pin == GPIO_PIN_13){
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d0:	d108      	bne.n	80026e4 <HAL_GPIO_EXTI_Callback+0x6c>
		bluecounter++;
 80026d2:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_GPIO_EXTI_Callback+0x90>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_GPIO_EXTI_Callback+0x90>)
 80026dc:	701a      	strb	r2, [r3, #0]
		flag_efftActi = 1;
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_GPIO_EXTI_Callback+0x98>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
		//trig_efftRead = 1;
	}

	//// setzero ////
		if(GPIO_Pin == GPIO_PIN_2){
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d103      	bne.n	80026f2 <HAL_GPIO_EXTI_Callback+0x7a>
			TargetDeg = 0;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_GPIO_EXTI_Callback+0x9c>)
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
		}
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000288 	.word	0x20000288
 8002704:	20000278 	.word	0x20000278
 8002708:	200003bd 	.word	0x200003bd
 800270c:	20000000 	.word	0x20000000
 8002710:	200003e9 	.word	0x200003e9
 8002714:	200003c0 	.word	0x200003c0

08002718 <micros>:
///////////////////////////////////// micro timer////////////////////////////////////
uint64_t micros()
{return _micros + htim11.Instance->CNT;}
 8002718:	b4b0      	push	{r4, r5, r7}
 800271a:	af00      	add	r7, sp, #0
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <micros+0x2c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	2200      	movs	r2, #0
 8002724:	4618      	mov	r0, r3
 8002726:	4611      	mov	r1, r2
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <micros+0x30>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	1884      	adds	r4, r0, r2
 8002730:	eb41 0503 	adc.w	r5, r1, r3
 8002734:	4622      	mov	r2, r4
 8002736:	462b      	mov	r3, r5
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	bcb0      	pop	{r4, r5, r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000018c 	.word	0x2000018c
 8002748:	20000280 	.word	0x20000280

0800274c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800274c:	b4b0      	push	{r4, r5, r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d10a      	bne.n	8002772 <HAL_TIM_PeriodElapsedCallback+0x26>
 {_micros += 65535;}
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002762:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002766:	1854      	adds	r4, r2, r1
 8002768:	f143 0500 	adc.w	r5, r3, #0
 800276c:	4b04      	ldr	r3, [pc, #16]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800276e:	e9c3 4500 	strd	r4, r5, [r3]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bcb0      	pop	{r4, r5, r7}
 800277a:	4770      	bx	lr
 800277c:	2000018c 	.word	0x2000018c
 8002780:	20000280 	.word	0x20000280

08002784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002788:	b672      	cpsid	i
}
 800278a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800278c:	e7fe      	b.n	800278c <Error_Handler+0x8>
	...

08002790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_MspInit+0x4c>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_MspInit+0x4c>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_MspInit+0x4c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_MspInit+0x4c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_MspInit+0x4c>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_MspInit+0x4c>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027ce:	2007      	movs	r0, #7
 80027d0:	f000 fc28 	bl	8003024 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800

080027e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_I2C_MspInit+0x168>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d13d      	bne.n	800287e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	4b51      	ldr	r3, [pc, #324]	; (800294c <HAL_I2C_MspInit+0x16c>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a50      	ldr	r2, [pc, #320]	; (800294c <HAL_I2C_MspInit+0x16c>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b4e      	ldr	r3, [pc, #312]	; (800294c <HAL_I2C_MspInit+0x16c>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800281e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002824:	2312      	movs	r3, #18
 8002826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002830:	2304      	movs	r3, #4
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	4619      	mov	r1, r3
 800283a:	4845      	ldr	r0, [pc, #276]	; (8002950 <HAL_I2C_MspInit+0x170>)
 800283c:	f001 f844 	bl	80038c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_I2C_MspInit+0x16c>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	4a40      	ldr	r2, [pc, #256]	; (800294c <HAL_I2C_MspInit+0x16c>)
 800284a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800284e:	6413      	str	r3, [r2, #64]	; 0x40
 8002850:	4b3e      	ldr	r3, [pc, #248]	; (800294c <HAL_I2C_MspInit+0x16c>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	201f      	movs	r0, #31
 8002862:	f000 fbea 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002866:	201f      	movs	r0, #31
 8002868:	f000 fc03 	bl	8003072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2100      	movs	r1, #0
 8002870:	2020      	movs	r0, #32
 8002872:	f000 fbe2 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002876:	2020      	movs	r0, #32
 8002878:	f000 fbfb 	bl	8003072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800287c:	e060      	b.n	8002940 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_I2C_MspInit+0x174>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d15b      	bne.n	8002940 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <HAL_I2C_MspInit+0x16c>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	4a2e      	ldr	r2, [pc, #184]	; (800294c <HAL_I2C_MspInit+0x16c>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6313      	str	r3, [r2, #48]	; 0x30
 8002898:	4b2c      	ldr	r3, [pc, #176]	; (800294c <HAL_I2C_MspInit+0x16c>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	4b28      	ldr	r3, [pc, #160]	; (800294c <HAL_I2C_MspInit+0x16c>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	4a27      	ldr	r2, [pc, #156]	; (800294c <HAL_I2C_MspInit+0x16c>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6313      	str	r3, [r2, #48]	; 0x30
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_I2C_MspInit+0x16c>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c6:	2312      	movs	r3, #18
 80028c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ce:	2303      	movs	r3, #3
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028d2:	2304      	movs	r3, #4
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d6:	f107 031c 	add.w	r3, r7, #28
 80028da:	4619      	mov	r1, r3
 80028dc:	481e      	ldr	r0, [pc, #120]	; (8002958 <HAL_I2C_MspInit+0x178>)
 80028de:	f000 fff3 	bl	80038c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e8:	2312      	movs	r3, #18
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028f4:	2304      	movs	r3, #4
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4817      	ldr	r0, [pc, #92]	; (800295c <HAL_I2C_MspInit+0x17c>)
 8002900:	f000 ffe2 	bl	80038c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_I2C_MspInit+0x16c>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	4a0f      	ldr	r2, [pc, #60]	; (800294c <HAL_I2C_MspInit+0x16c>)
 800290e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002912:	6413      	str	r3, [r2, #64]	; 0x40
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_I2C_MspInit+0x16c>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	2100      	movs	r1, #0
 8002924:	2048      	movs	r0, #72	; 0x48
 8002926:	f000 fb88 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800292a:	2048      	movs	r0, #72	; 0x48
 800292c:	f000 fba1 	bl	8003072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2100      	movs	r1, #0
 8002934:	2049      	movs	r0, #73	; 0x49
 8002936:	f000 fb80 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800293a:	2049      	movs	r0, #73	; 0x49
 800293c:	f000 fb99 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 8002940:	bf00      	nop
 8002942:	3730      	adds	r7, #48	; 0x30
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40005400 	.word	0x40005400
 800294c:	40023800 	.word	0x40023800
 8002950:	40020400 	.word	0x40020400
 8002954:	40005c00 	.word	0x40005c00
 8002958:	40020800 	.word	0x40020800
 800295c:	40020000 	.word	0x40020000

08002960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d15d      	bne.n	8002a3e <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a46      	ldr	r2, [pc, #280]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b44      	ldr	r3, [pc, #272]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a3f      	ldr	r2, [pc, #252]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_VINCp_Pin;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029ca:	2301      	movs	r3, #1
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_VINCp_GPIO_Port, &GPIO_InitStruct);
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	4619      	mov	r1, r3
 80029d4:	4834      	ldr	r0, [pc, #208]	; (8002aa8 <HAL_TIM_Base_MspInit+0x148>)
 80029d6:	f000 ff77 	bl	80038c8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 80029dc:	4a34      	ldr	r2, [pc, #208]	; (8002ab0 <HAL_TIM_Base_MspInit+0x150>)
 80029de:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80029e0:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 80029e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80029e6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029e8:	4b30      	ldr	r3, [pc, #192]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 80029f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 80029fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a02:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 8002a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a0a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 8002a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a12:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002a14:	4b25      	ldr	r3, [pc, #148]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002a20:	4822      	ldr	r0, [pc, #136]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 8002a22:	f000 fb41 	bl	80030a8 <HAL_DMA_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 8002a2c:	f7ff feaa 	bl	8002784 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a1e      	ldr	r2, [pc, #120]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 8002a34:	625a      	str	r2, [r3, #36]	; 0x24
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_TIM_Base_MspInit+0x14c>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002a3c:	e02e      	b.n	8002a9c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM4)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_TIM_Base_MspInit+0x154>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d10e      	bne.n	8002a66 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6413      	str	r3, [r2, #64]	; 0x40
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
}
 8002a64:	e01a      	b.n	8002a9c <HAL_TIM_Base_MspInit+0x13c>
  else if(htim_base->Instance==TIM11)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <HAL_TIM_Base_MspInit+0x158>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d115      	bne.n	8002a9c <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 8002a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_TIM_Base_MspInit+0x144>)
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	201a      	movs	r0, #26
 8002a92:	f000 fad2 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002a96:	201a      	movs	r0, #26
 8002a98:	f000 faeb 	bl	8003072 <HAL_NVIC_EnableIRQ>
}
 8002a9c:	bf00      	nop
 8002a9e:	3730      	adds	r7, #48	; 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	200001d4 	.word	0x200001d4
 8002ab0:	40026088 	.word	0x40026088
 8002ab4:	40000800 	.word	0x40000800
 8002ab8:	40014800 	.word	0x40014800

08002abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <HAL_TIM_MspPostInit+0x68>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d11d      	bne.n	8002b1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_TIM_MspPostInit+0x6c>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <HAL_TIM_MspPostInit+0x6c>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_TIM_MspPostInit+0x6c>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = TIM4_CH1_PWMMOT_Pin;
 8002afa:	2340      	movs	r3, #64	; 0x40
 8002afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH1_PWMMOT_GPIO_Port, &GPIO_InitStruct);
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	4619      	mov	r1, r3
 8002b14:	4805      	ldr	r0, [pc, #20]	; (8002b2c <HAL_TIM_MspPostInit+0x70>)
 8002b16:	f000 fed7 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40000800 	.word	0x40000800
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020400 	.word	0x40020400

08002b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_UART_MspInit+0x94>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d133      	bne.n	8002bba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <HAL_UART_MspInit+0x98>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4809      	ldr	r0, [pc, #36]	; (8002bcc <HAL_UART_MspInit+0x9c>)
 8002ba6:	f000 fe8f 	bl	80038c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	2026      	movs	r0, #38	; 0x26
 8002bb0:	f000 fa43 	bl	800303a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bb4:	2026      	movs	r0, #38	; 0x26
 8002bb6:	f000 fa5c 	bl	8003072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bba:	bf00      	nop
 8002bbc:	3728      	adds	r7, #40	; 0x28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40004400 	.word	0x40004400
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <NMI_Handler+0x4>

08002bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bda:	e7fe      	b.n	8002bda <HardFault_Handler+0x4>

08002bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <MemManage_Handler+0x4>

08002be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be6:	e7fe      	b.n	8002be6 <BusFault_Handler+0x4>

08002be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bec:	e7fe      	b.n	8002bec <UsageFault_Handler+0x4>

08002bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1c:	f000 f8ee 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_SetZero_Pin);
 8002c28:	2004      	movs	r0, #4
 8002c2a:	f001 f81d 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <DMA1_Stream5_IRQHandler+0x10>)
 8002c3a:	f000 fbcd 	bl	80033d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200001d4 	.word	0x200001d4

08002c48 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002c4e:	f004 ff25 	bl	8007a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000018c 	.word	0x2000018c

08002c5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <I2C1_EV_IRQHandler+0x10>)
 8002c62:	f001 fe41 	bl	80048e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000054 	.word	0x20000054

08002c70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <I2C1_ER_IRQHandler+0x10>)
 8002c76:	f001 ffa8 	bl	8004bca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000054 	.word	0x20000054

08002c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <USART2_IRQHandler+0x10>)
 8002c8a:	f006 f8cd 	bl	8008e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000234 	.word	0x20000234

08002c98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Stop_Pin);
 8002c9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ca0:	f000 ffe2 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI11_EMER_Pin);
 8002ca4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ca8:	f000 ffde 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cb0:	f000 ffda 	bl	8003c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <I2C3_EV_IRQHandler+0x10>)
 8002cbe:	f001 fe13 	bl	80048e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200000a8 	.word	0x200000a8

08002ccc <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <I2C3_ER_IRQHandler+0x10>)
 8002cd2:	f001 ff7a 	bl	8004bca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200000a8 	.word	0x200000a8

08002ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <SystemInit+0x20>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <SystemInit+0x20>)
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d08:	480d      	ldr	r0, [pc, #52]	; (8002d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d0a:	490e      	ldr	r1, [pc, #56]	; (8002d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d10:	e002      	b.n	8002d18 <LoopCopyDataInit>

08002d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d16:	3304      	adds	r3, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d1c:	d3f9      	bcc.n	8002d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d20:	4c0b      	ldr	r4, [pc, #44]	; (8002d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d24:	e001      	b.n	8002d2a <LoopFillZerobss>

08002d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d28:	3204      	adds	r2, #4

08002d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d2c:	d3fb      	bcc.n	8002d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d2e:	f7ff ffd7 	bl	8002ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d32:	f006 ffeb 	bl	8009d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d36:	f7fe f8fd 	bl	8000f34 <main>
  bx  lr    
 8002d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d44:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8002d48:	08009dac 	.word	0x08009dac
  ldr r2, =_sbss
 8002d4c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002d50:	20000438 	.word	0x20000438

08002d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC_IRQHandler>
	...

08002d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_Init+0x40>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_Init+0x40>)
 8002d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_Init+0x40>)
 8002d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 f94f 	bl	8003024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f808 	bl	8002d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8c:	f7ff fd00 	bl	8002790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023c00 	.word	0x40023c00

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_InitTick+0x54>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_InitTick+0x58>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f967 	bl	800308e <HAL_SYSTICK_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00e      	b.n	8002de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d80a      	bhi.n	8002de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f000 f92f 	bl	800303a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ddc:	4a06      	ldr	r2, [pc, #24]	; (8002df8 <HAL_InitTick+0x5c>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000002c 	.word	0x2000002c
 8002df4:	20000034 	.word	0x20000034
 8002df8:	20000030 	.word	0x20000030

08002dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_IncTick+0x20>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_IncTick+0x24>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <HAL_IncTick+0x24>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	20000034 	.word	0x20000034
 8002e20:	20000434 	.word	0x20000434

08002e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return uwTick;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_GetTick+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000434 	.word	0x20000434

08002e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff ffee 	bl	8002e24 <HAL_GetTick>
 8002e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e54:	d005      	beq.n	8002e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_Delay+0x44>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e62:	bf00      	nop
 8002e64:	f7ff ffde 	bl	8002e24 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d8f7      	bhi.n	8002e64 <HAL_Delay+0x28>
  {
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000034 	.word	0x20000034

08002e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 0307 	and.w	r3, r3, #7
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	db0b      	blt.n	8002f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f003 021f 	and.w	r2, r3, #31
 8002f00:	4907      	ldr	r1, [pc, #28]	; (8002f20 <__NVIC_EnableIRQ+0x38>)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2001      	movs	r0, #1
 8002f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000e100 	.word	0xe000e100

08002f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	6039      	str	r1, [r7, #0]
 8002f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db0a      	blt.n	8002f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	490c      	ldr	r1, [pc, #48]	; (8002f70 <__NVIC_SetPriority+0x4c>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	440b      	add	r3, r1
 8002f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f4c:	e00a      	b.n	8002f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4908      	ldr	r1, [pc, #32]	; (8002f74 <__NVIC_SetPriority+0x50>)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	440b      	add	r3, r1
 8002f62:	761a      	strb	r2, [r3, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000e100 	.word	0xe000e100
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f1c3 0307 	rsb	r3, r3, #7
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	bf28      	it	cs
 8002f96:	2304      	movcs	r3, #4
 8002f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d902      	bls.n	8002fa8 <NVIC_EncodePriority+0x30>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3b03      	subs	r3, #3
 8002fa6:	e000      	b.n	8002faa <NVIC_EncodePriority+0x32>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	4313      	orrs	r3, r2
         );
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	; 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff0:	d301      	bcc.n	8002ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00f      	b.n	8003016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <SysTick_Config+0x40>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ffe:	210f      	movs	r1, #15
 8003000:	f04f 30ff 	mov.w	r0, #4294967295
 8003004:	f7ff ff8e 	bl	8002f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <SysTick_Config+0x40>)
 800300a:	2200      	movs	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <SysTick_Config+0x40>)
 8003010:	2207      	movs	r2, #7
 8003012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	e000e010 	.word	0xe000e010

08003024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff29 	bl	8002e84 <__NVIC_SetPriorityGrouping>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800303a:	b580      	push	{r7, lr}
 800303c:	b086      	sub	sp, #24
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800304c:	f7ff ff3e 	bl	8002ecc <__NVIC_GetPriorityGrouping>
 8003050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	6978      	ldr	r0, [r7, #20]
 8003058:	f7ff ff8e 	bl	8002f78 <NVIC_EncodePriority>
 800305c:	4602      	mov	r2, r0
 800305e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff5d 	bl	8002f24 <__NVIC_SetPriority>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800307c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ff31 	bl	8002ee8 <__NVIC_EnableIRQ>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff ffa2 	bl	8002fe0 <SysTick_Config>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030b4:	f7ff feb6 	bl	8002e24 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e099      	b.n	80031f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0201 	bic.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e4:	e00f      	b.n	8003106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030e6:	f7ff fe9d 	bl	8002e24 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d908      	bls.n	8003106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2203      	movs	r2, #3
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e078      	b.n	80031f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e8      	bne.n	80030e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_DMA_Init+0x158>)
 8003120:	4013      	ands	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2b04      	cmp	r3, #4
 800315e:	d107      	bne.n	8003170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	4313      	orrs	r3, r2
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2b04      	cmp	r3, #4
 8003198:	d117      	bne.n	80031ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00e      	beq.n	80031ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fb0f 	bl	80037d0 <DMA_CheckFifoParam>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2240      	movs	r2, #64	; 0x40
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031c6:	2301      	movs	r3, #1
 80031c8:	e016      	b.n	80031f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fac6 	bl	8003764 <DMA_CalcBaseAndBitshift>
 80031d8:	4603      	mov	r3, r0
 80031da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	223f      	movs	r2, #63	; 0x3f
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	f010803f 	.word	0xf010803f

08003204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_DMA_Start_IT+0x26>
 8003226:	2302      	movs	r3, #2
 8003228:	e040      	b.n	80032ac <HAL_DMA_Start_IT+0xa8>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d12f      	bne.n	800329e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa58 	bl	8003708 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325c:	223f      	movs	r2, #63	; 0x3f
 800325e:	409a      	lsls	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0216 	orr.w	r2, r2, #22
 8003272:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0208 	orr.w	r2, r2, #8
 800328a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e005      	b.n	80032aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032c2:	f7ff fdaf 	bl	8002e24 <HAL_GetTick>
 80032c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d008      	beq.n	80032e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e052      	b.n	800338c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0216 	bic.w	r2, r2, #22
 80032f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003304:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_DMA_Abort+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0208 	bic.w	r2, r2, #8
 8003324:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003336:	e013      	b.n	8003360 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003338:	f7ff fd74 	bl	8002e24 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b05      	cmp	r3, #5
 8003344:	d90c      	bls.n	8003360 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2203      	movs	r2, #3
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e015      	b.n	800338c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e4      	bne.n	8003338 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	223f      	movs	r2, #63	; 0x3f
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d004      	beq.n	80033b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00c      	b.n	80033cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2205      	movs	r2, #5
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033e4:	4b8e      	ldr	r3, [pc, #568]	; (8003620 <HAL_DMA_IRQHandler+0x248>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a8e      	ldr	r2, [pc, #568]	; (8003624 <HAL_DMA_IRQHandler+0x24c>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	2208      	movs	r2, #8
 8003404:	409a      	lsls	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01a      	beq.n	8003444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0204 	bic.w	r2, r2, #4
 800342a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	2208      	movs	r2, #8
 8003432:	409a      	lsls	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2201      	movs	r2, #1
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d012      	beq.n	800347a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0202 	orr.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	2204      	movs	r2, #4
 8003480:	409a      	lsls	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2204      	movs	r2, #4
 800349e:	409a      	lsls	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f043 0204 	orr.w	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2210      	movs	r2, #16
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d043      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03c      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2210      	movs	r2, #16
 80034d4:	409a      	lsls	r2, r3
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d018      	beq.n	800351a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d024      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
 8003506:	e01f      	b.n	8003548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e016      	b.n	8003548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0208 	bic.w	r2, r2, #8
 8003536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354c:	2220      	movs	r2, #32
 800354e:	409a      	lsls	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 808f 	beq.w	8003678 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8087 	beq.w	8003678 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2220      	movs	r2, #32
 8003570:	409a      	lsls	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b05      	cmp	r3, #5
 8003580:	d136      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0216 	bic.w	r2, r2, #22
 8003590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x1da>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0208 	bic.w	r2, r2, #8
 80035c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c6:	223f      	movs	r2, #63	; 0x3f
 80035c8:	409a      	lsls	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d07e      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
        }
        return;
 80035ee:	e079      	b.n	80036e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01d      	beq.n	800363a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	2b00      	cmp	r3, #0
 8003612:	d031      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
 800361c:	e02c      	b.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
 800361e:	bf00      	nop
 8003620:	2000002c 	.word	0x2000002c
 8003624:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d023      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
 8003638:	e01e      	b.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10f      	bne.n	8003668 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0210 	bic.w	r2, r2, #16
 8003656:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	2b00      	cmp	r3, #0
 800367e:	d032      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2205      	movs	r2, #5
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d307      	bcc.n	80036c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f2      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x2cc>
 80036be:	e000      	b.n	80036c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
 80036e2:	e000      	b.n	80036e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036e4:	bf00      	nop
    }
  }
}
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fa:	b2db      	uxtb	r3, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003724:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d108      	bne.n	8003748 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003746:	e007      	b.n	8003758 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
}
 8003758:	bf00      	nop
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3b10      	subs	r3, #16
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <DMA_CalcBaseAndBitshift+0x64>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800377e:	4a13      	ldr	r2, [pc, #76]	; (80037cc <DMA_CalcBaseAndBitshift+0x68>)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d909      	bls.n	80037a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800379a:	f023 0303 	bic.w	r3, r3, #3
 800379e:	1d1a      	adds	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	659a      	str	r2, [r3, #88]	; 0x58
 80037a4:	e007      	b.n	80037b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	aaaaaaab 	.word	0xaaaaaaab
 80037cc:	08009d94 	.word	0x08009d94

080037d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11f      	bne.n	800382a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d856      	bhi.n	800389e <DMA_CheckFifoParam+0xce>
 80037f0:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <DMA_CheckFifoParam+0x28>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	08003809 	.word	0x08003809
 80037fc:	0800381b 	.word	0x0800381b
 8003800:	08003809 	.word	0x08003809
 8003804:	0800389f 	.word	0x0800389f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d046      	beq.n	80038a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003818:	e043      	b.n	80038a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003822:	d140      	bne.n	80038a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003828:	e03d      	b.n	80038a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003832:	d121      	bne.n	8003878 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d837      	bhi.n	80038aa <DMA_CheckFifoParam+0xda>
 800383a:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <DMA_CheckFifoParam+0x70>)
 800383c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003840:	08003851 	.word	0x08003851
 8003844:	08003857 	.word	0x08003857
 8003848:	08003851 	.word	0x08003851
 800384c:	08003869 	.word	0x08003869
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      break;
 8003854:	e030      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d025      	beq.n	80038ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003866:	e022      	b.n	80038ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003870:	d11f      	bne.n	80038b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003876:	e01c      	b.n	80038b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d903      	bls.n	8003886 <DMA_CheckFifoParam+0xb6>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d003      	beq.n	800388c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003884:	e018      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
      break;
 800388a:	e015      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00e      	beq.n	80038b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      break;
 800389c:	e00b      	b.n	80038b6 <DMA_CheckFifoParam+0xe6>
      break;
 800389e:	bf00      	nop
 80038a0:	e00a      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
      break;
 80038a2:	bf00      	nop
 80038a4:	e008      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
      break;
 80038a6:	bf00      	nop
 80038a8:	e006      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
      break;
 80038aa:	bf00      	nop
 80038ac:	e004      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <DMA_CheckFifoParam+0xe8>
      break;
 80038b6:	bf00      	nop
    }
  } 
  
  return status; 
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop

080038c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e159      	b.n	8003b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f040 8148 	bne.w	8003b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d005      	beq.n	800391a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003916:	2b02      	cmp	r3, #2
 8003918:	d130      	bne.n	800397c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	2203      	movs	r2, #3
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003950:	2201      	movs	r2, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 0201 	and.w	r2, r3, #1
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b03      	cmp	r3, #3
 8003986:	d017      	beq.n	80039b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2203      	movs	r2, #3
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d123      	bne.n	8003a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	08da      	lsrs	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3208      	adds	r2, #8
 80039cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0203 	and.w	r2, r3, #3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a2 	beq.w	8003b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <HAL_GPIO_Init+0x2e8>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4a56      	ldr	r2, [pc, #344]	; (8003bb0 <HAL_GPIO_Init+0x2e8>)
 8003a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <HAL_GPIO_Init+0x2e8>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6a:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_GPIO_Init+0x2ec>)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a49      	ldr	r2, [pc, #292]	; (8003bb8 <HAL_GPIO_Init+0x2f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d019      	beq.n	8003aca <HAL_GPIO_Init+0x202>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a48      	ldr	r2, [pc, #288]	; (8003bbc <HAL_GPIO_Init+0x2f4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <HAL_GPIO_Init+0x1fe>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a47      	ldr	r2, [pc, #284]	; (8003bc0 <HAL_GPIO_Init+0x2f8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00d      	beq.n	8003ac2 <HAL_GPIO_Init+0x1fa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a46      	ldr	r2, [pc, #280]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <HAL_GPIO_Init+0x1f6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a45      	ldr	r2, [pc, #276]	; (8003bc8 <HAL_GPIO_Init+0x300>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_GPIO_Init+0x1f2>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e008      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003aba:	2307      	movs	r3, #7
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e004      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003aca:	2300      	movs	r3, #0
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003adc:	4935      	ldr	r1, [pc, #212]	; (8003bb4 <HAL_GPIO_Init+0x2ec>)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aea:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0e:	4a2f      	ldr	r2, [pc, #188]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b38:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b62:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b68:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b8c:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	f67f aea2 	bls.w	80038e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40013c00 	.word	0x40013c00

08003bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e001      	b.n	8003bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c10:	787b      	ldrb	r3, [r7, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c1c:	e003      	b.n	8003c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	041a      	lsls	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	619a      	str	r2, [r3, #24]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c44:	887a      	ldrh	r2, [r7, #2]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	041a      	lsls	r2, r3, #16
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	43d9      	mvns	r1, r3
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	400b      	ands	r3, r1
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	619a      	str	r2, [r3, #24]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c7e:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fcf6 	bl	8002678 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40013c00 	.word	0x40013c00

08003c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e12b      	b.n	8003f02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fe fd8e 	bl	80027e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	; 0x24
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cfc:	f003 fa9a 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 8003d00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4a81      	ldr	r2, [pc, #516]	; (8003f0c <HAL_I2C_Init+0x274>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d807      	bhi.n	8003d1c <HAL_I2C_Init+0x84>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a80      	ldr	r2, [pc, #512]	; (8003f10 <HAL_I2C_Init+0x278>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	bf94      	ite	ls
 8003d14:	2301      	movls	r3, #1
 8003d16:	2300      	movhi	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e006      	b.n	8003d2a <HAL_I2C_Init+0x92>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a7d      	ldr	r2, [pc, #500]	; (8003f14 <HAL_I2C_Init+0x27c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	bf94      	ite	ls
 8003d24:	2301      	movls	r3, #1
 8003d26:	2300      	movhi	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e0e7      	b.n	8003f02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a78      	ldr	r2, [pc, #480]	; (8003f18 <HAL_I2C_Init+0x280>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	0c9b      	lsrs	r3, r3, #18
 8003d3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4a6a      	ldr	r2, [pc, #424]	; (8003f0c <HAL_I2C_Init+0x274>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d802      	bhi.n	8003d6c <HAL_I2C_Init+0xd4>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	e009      	b.n	8003d80 <HAL_I2C_Init+0xe8>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	4a69      	ldr	r2, [pc, #420]	; (8003f1c <HAL_I2C_Init+0x284>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	3301      	adds	r3, #1
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	495c      	ldr	r1, [pc, #368]	; (8003f0c <HAL_I2C_Init+0x274>)
 8003d9c:	428b      	cmp	r3, r1
 8003d9e:	d819      	bhi.n	8003dd4 <HAL_I2C_Init+0x13c>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1e59      	subs	r1, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dae:	1c59      	adds	r1, r3, #1
 8003db0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003db4:	400b      	ands	r3, r1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_I2C_Init+0x138>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e59      	subs	r1, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dce:	e051      	b.n	8003e74 <HAL_I2C_Init+0x1dc>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e04f      	b.n	8003e74 <HAL_I2C_Init+0x1dc>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d111      	bne.n	8003e00 <HAL_I2C_Init+0x168>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1e58      	subs	r0, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e012      	b.n	8003e26 <HAL_I2C_Init+0x18e>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e58      	subs	r0, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	0099      	lsls	r1, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e16:	3301      	adds	r3, #1
 8003e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Init+0x196>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e022      	b.n	8003e74 <HAL_I2C_Init+0x1dc>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10e      	bne.n	8003e54 <HAL_I2C_Init+0x1bc>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1e58      	subs	r0, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	440b      	add	r3, r1
 8003e44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e48:	3301      	adds	r3, #1
 8003e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e52:	e00f      	b.n	8003e74 <HAL_I2C_Init+0x1dc>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1e58      	subs	r0, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	0099      	lsls	r1, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	6809      	ldr	r1, [r1, #0]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ea2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6911      	ldr	r1, [r2, #16]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68d2      	ldr	r2, [r2, #12]
 8003eae:	4311      	orrs	r1, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	000186a0 	.word	0x000186a0
 8003f10:	001e847f 	.word	0x001e847f
 8003f14:	003d08ff 	.word	0x003d08ff
 8003f18:	431bde83 	.word	0x431bde83
 8003f1c:	10624dd3 	.word	0x10624dd3

08003f20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	4608      	mov	r0, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	817b      	strh	r3, [r7, #10]
 8003f32:	460b      	mov	r3, r1
 8003f34:	813b      	strh	r3, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f3a:	f7fe ff73 	bl	8002e24 <HAL_GetTick>
 8003f3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	f040 80d9 	bne.w	8004100 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2319      	movs	r3, #25
 8003f54:	2201      	movs	r2, #1
 8003f56:	496d      	ldr	r1, [pc, #436]	; (800410c <HAL_I2C_Mem_Write+0x1ec>)
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f002 fad1 	bl	8006500 <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0cc      	b.n	8004102 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_I2C_Mem_Write+0x56>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e0c5      	b.n	8004102 <HAL_I2C_Mem_Write+0x1e2>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d007      	beq.n	8003f9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003faa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2221      	movs	r2, #33	; 0x21
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2240      	movs	r2, #64	; 0x40
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <HAL_I2C_Mem_Write+0x1f0>)
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fde:	88f8      	ldrh	r0, [r7, #6]
 8003fe0:	893a      	ldrh	r2, [r7, #8]
 8003fe2:	8979      	ldrh	r1, [r7, #10]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	4603      	mov	r3, r0
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f002 f860 	bl	80060b4 <I2C_RequestMemoryWrite>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d052      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e081      	b.n	8004102 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f002 fb52 	bl	80066ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b04      	cmp	r3, #4
 8004014:	d107      	bne.n	8004026 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004024:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06b      	b.n	8004102 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	781a      	ldrb	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d11b      	bne.n	80040a0 <HAL_I2C_Mem_Write+0x180>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d017      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1aa      	bne.n	8003ffe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f002 fb3e 	bl	800672e <I2C_WaitOnBTFFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d107      	bne.n	80040d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e016      	b.n	8004102 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	00100002 	.word	0x00100002
 8004110:	ffff0000 	.word	0xffff0000

08004114 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	461a      	mov	r2, r3
 8004122:	4603      	mov	r3, r0
 8004124:	817b      	strh	r3, [r7, #10]
 8004126:	460b      	mov	r3, r1
 8004128:	813b      	strh	r3, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800412e:	f7fe fe79 	bl	8002e24 <HAL_GetTick>
 8004132:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b20      	cmp	r3, #32
 800413e:	f040 8208 	bne.w	8004552 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	2319      	movs	r3, #25
 8004148:	2201      	movs	r2, #1
 800414a:	497b      	ldr	r1, [pc, #492]	; (8004338 <HAL_I2C_Mem_Read+0x224>)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f002 f9d7 	bl	8006500 <I2C_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
 800415a:	e1fb      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_I2C_Mem_Read+0x56>
 8004166:	2302      	movs	r3, #2
 8004168:	e1f4      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d007      	beq.n	8004190 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800419e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2222      	movs	r2, #34	; 0x22
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a5b      	ldr	r2, [pc, #364]	; (800433c <HAL_I2C_Mem_Read+0x228>)
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041d2:	88f8      	ldrh	r0, [r7, #6]
 80041d4:	893a      	ldrh	r2, [r7, #8]
 80041d6:	8979      	ldrh	r1, [r7, #10]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4603      	mov	r3, r0
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f001 fffc 	bl	80061e0 <I2C_RequestMemoryRead>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1b0      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d113      	bne.n	8004222 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	623b      	str	r3, [r7, #32]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	623b      	str	r3, [r7, #32]
 800420e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e184      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	2b01      	cmp	r3, #1
 8004228:	d11b      	bne.n	8004262 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004238:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423a:	2300      	movs	r3, #0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e164      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	2b02      	cmp	r3, #2
 8004268:	d11b      	bne.n	80042a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004278:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004288:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428a:	2300      	movs	r3, #0
 800428c:	61bb      	str	r3, [r7, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	e144      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80042b8:	e138      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	2b03      	cmp	r3, #3
 80042c0:	f200 80f1 	bhi.w	80044a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d123      	bne.n	8004314 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f002 fa9f 	bl	8006814 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e139      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004312:	e10b      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b02      	cmp	r3, #2
 800431a:	d14e      	bne.n	80043ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	2200      	movs	r2, #0
 8004324:	4906      	ldr	r1, [pc, #24]	; (8004340 <HAL_I2C_Mem_Read+0x22c>)
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f002 f8ea 	bl	8006500 <I2C_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e10e      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
 8004336:	bf00      	nop
 8004338:	00100002 	.word	0x00100002
 800433c:	ffff0000 	.word	0xffff0000
 8004340:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b8:	e0b8      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	2200      	movs	r2, #0
 80043c2:	4966      	ldr	r1, [pc, #408]	; (800455c <HAL_I2C_Mem_Read+0x448>)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f002 f89b 	bl	8006500 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0bf      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	2200      	movs	r2, #0
 800441e:	494f      	ldr	r1, [pc, #316]	; (800455c <HAL_I2C_Mem_Read+0x448>)
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f002 f86d 	bl	8006500 <I2C_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e091      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044a4:	e042      	b.n	800452c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f002 f9b2 	bl	8006814 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e04c      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d118      	bne.n	800452c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	f47f aec2 	bne.w	80042ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e000      	b.n	8004554 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004552:	2302      	movs	r3, #2
  }
}
 8004554:	4618      	mov	r0, r3
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	00010004 	.word	0x00010004

08004560 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	461a      	mov	r2, r3
 800456c:	460b      	mov	r3, r1
 800456e:	817b      	strh	r3, [r7, #10]
 8004570:	4613      	mov	r3, r2
 8004572:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b20      	cmp	r3, #32
 8004586:	f040 80a6 	bne.w	80046d6 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d005      	beq.n	80045a6 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d002      	beq.n	80045a6 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d130      	bne.n	8004608 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80045a6:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	08db      	lsrs	r3, r3, #3
 80045ac:	4a4e      	ldr	r2, [pc, #312]	; (80046e8 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	0a1a      	lsrs	r2, r3, #8
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009a      	lsls	r2, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d116      	bne.n	80045fa <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06e      	b.n	80046d8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b02      	cmp	r3, #2
 8004606:	d0db      	beq.n	80045c0 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 8004612:	2302      	movs	r3, #2
 8004614:	e060      	b.n	80046d8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b01      	cmp	r3, #1
 800462a:	d007      	beq.n	800463c <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2221      	movs	r2, #33	; 0x21
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2210      	movs	r2, #16
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	893a      	ldrh	r2, [r7, #8]
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800467e:	897a      	ldrh	r2, [r7, #10]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b11      	cmp	r3, #17
 800468e:	d10c      	bne.n	80046aa <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004696:	d003      	beq.n	80046a0 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800469e:	d101      	bne.n	80046a4 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 80046a4:	2300      	movs	r3, #0
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80046d0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	4618      	mov	r0, r3
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	2000002c 	.word	0x2000002c
 80046e8:	14f8b589 	.word	0x14f8b589

080046ec <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	; 0x24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	461a      	mov	r2, r3
 80046f8:	460b      	mov	r3, r1
 80046fa:	817b      	strh	r3, [r7, #10]
 80046fc:	4613      	mov	r3, r2
 80046fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004708:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800470c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b20      	cmp	r3, #32
 8004718:	f040 80da 	bne.w	80048d0 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800472a:	d005      	beq.n	8004738 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	2b08      	cmp	r3, #8
 8004730:	d002      	beq.n	8004738 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	2b01      	cmp	r3, #1
 8004736:	d130      	bne.n	800479a <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004738:	4b69      	ldr	r3, [pc, #420]	; (80048e0 <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	08db      	lsrs	r3, r3, #3
 800473e:	4a69      	ldr	r2, [pc, #420]	; (80048e4 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	0a1a      	lsrs	r2, r3, #8
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009a      	lsls	r2, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	3b01      	subs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d116      	bne.n	800478c <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0a2      	b.n	80048d2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d0db      	beq.n	8004752 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e094      	b.n	80048d2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d007      	beq.n	80047ce <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047dc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2222      	movs	r2, #34	; 0x22
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2210      	movs	r2, #16
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	893a      	ldrh	r2, [r7, #8]
 80047fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004810:	897a      	ldrh	r2, [r7, #10]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d126      	bne.n	8004874 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	2b20      	cmp	r3, #32
 800482a:	d002      	beq.n	8004832 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	2b10      	cmp	r3, #16
 8004830:	d120      	bne.n	8004874 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b12      	cmp	r3, #18
 8004836:	d114      	bne.n	8004862 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004846:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004856:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800485e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004860:	e010      	b.n	8004884 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004870:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004872:	e007      	b.n	8004884 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004882:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b12      	cmp	r3, #18
 8004888:	d10c      	bne.n	80048a4 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004890:	d003      	beq.n	800489a <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004898:	d101      	bne.n	800489e <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d107      	bne.n	80048b4 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	2000002c 	.word	0x2000002c
 80048e4:	14f8b589 	.word	0x14f8b589

080048e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004908:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b10      	cmp	r3, #16
 8004916:	d003      	beq.n	8004920 <HAL_I2C_EV_IRQHandler+0x38>
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	f040 80c1 	bne.w	8004aa2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10d      	bne.n	8004956 <HAL_I2C_EV_IRQHandler+0x6e>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004940:	d003      	beq.n	800494a <HAL_I2C_EV_IRQHandler+0x62>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004948:	d101      	bne.n	800494e <HAL_I2C_EV_IRQHandler+0x66>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_I2C_EV_IRQHandler+0x68>
 800494e:	2300      	movs	r3, #0
 8004950:	2b01      	cmp	r3, #1
 8004952:	f000 8132 	beq.w	8004bba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00c      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x92>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	0a5b      	lsrs	r3, r3, #9
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d006      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 ffd6 	bl	800691e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fd83 	bl	800547e <I2C_Master_SB>
 8004978:	e092      	b.n	8004aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	08db      	lsrs	r3, r3, #3
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_I2C_EV_IRQHandler+0xb2>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	0a5b      	lsrs	r3, r3, #9
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fdf9 	bl	800558a <I2C_Master_ADD10>
 8004998:	e082      	b.n	8004aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d009      	beq.n	80049ba <HAL_I2C_EV_IRQHandler+0xd2>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	0a5b      	lsrs	r3, r3, #9
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fe13 	bl	80055de <I2C_Master_ADDR>
 80049b8:	e072      	b.n	8004aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d03b      	beq.n	8004a3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	f000 80f3 	beq.w	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	09db      	lsrs	r3, r3, #7
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00f      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x11c>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	0a9b      	lsrs	r3, r3, #10
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x11c>
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f9f3 	bl	8004de8 <I2C_MasterTransmit_TXE>
 8004a02:	e04d      	b.n	8004aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	089b      	lsrs	r3, r3, #2
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80d6 	beq.w	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	0a5b      	lsrs	r3, r3, #9
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80cf 	beq.w	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	2b21      	cmp	r3, #33	; 0x21
 8004a24:	d103      	bne.n	8004a2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa7a 	bl	8004f20 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a2c:	e0c7      	b.n	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	f040 80c4 	bne.w	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fae8 	bl	800500c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a3c:	e0bf      	b.n	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4c:	f000 80b7 	beq.w	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00f      	beq.n	8004a7c <HAL_I2C_EV_IRQHandler+0x194>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <HAL_I2C_EV_IRQHandler+0x194>
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	089b      	lsrs	r3, r3, #2
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fb5d 	bl	8005134 <I2C_MasterReceive_RXNE>
 8004a7a:	e011      	b.n	8004aa0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	089b      	lsrs	r3, r3, #2
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 809a 	beq.w	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	0a5b      	lsrs	r3, r3, #9
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8093 	beq.w	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fc06 	bl	80052aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a9e:	e08e      	b.n	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8004aa0:	e08d      	b.n	8004bbe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	e007      	b.n	8004ac4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d012      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x20e>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	0a5b      	lsrs	r3, r3, #9
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004aec:	69b9      	ldr	r1, [r7, #24]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 ffc4 	bl	8005a7c <I2C_Slave_ADDR>
 8004af4:	e066      	b.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	091b      	lsrs	r3, r3, #4
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0x22e>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	0a5b      	lsrs	r3, r3, #9
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fffe 	bl	8005b10 <I2C_Slave_STOPF>
 8004b14:	e056      	b.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	2b21      	cmp	r3, #33	; 0x21
 8004b1a:	d002      	beq.n	8004b22 <HAL_I2C_EV_IRQHandler+0x23a>
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	2b29      	cmp	r3, #41	; 0x29
 8004b20:	d125      	bne.n	8004b6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	09db      	lsrs	r3, r3, #7
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00f      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0x266>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	0a9b      	lsrs	r3, r3, #10
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0x266>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 feda 	bl	8005900 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b4c:	e039      	b.n	8004bc2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d033      	beq.n	8004bc2 <HAL_I2C_EV_IRQHandler+0x2da>
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	0a5b      	lsrs	r3, r3, #9
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d02d      	beq.n	8004bc2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 ff07 	bl	800597a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b6c:	e029      	b.n	8004bc2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00f      	beq.n	8004b9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	0a9b      	lsrs	r3, r3, #10
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	089b      	lsrs	r3, r3, #2
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 ff12 	bl	80059bc <I2C_SlaveReceive_RXNE>
 8004b98:	e014      	b.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	089b      	lsrs	r3, r3, #2
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 ff40 	bl	8005a38 <I2C_SlaveReceive_BTF>
 8004bb8:	e004      	b.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b08a      	sub	sp, #40	; 0x28
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00e      	beq.n	8004c18 <HAL_I2C_ER_IRQHandler+0x4e>
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c16:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	0a5b      	lsrs	r3, r3, #9
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <HAL_I2C_ER_IRQHandler+0x78>
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	f043 0302 	orr.w	r3, r3, #2
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004c40:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	0a9b      	lsrs	r3, r3, #10
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d03f      	beq.n	8004cce <HAL_I2C_ER_IRQHandler+0x104>
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	0a1b      	lsrs	r3, r3, #8
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d039      	beq.n	8004cce <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004c5a:	7efb      	ldrb	r3, [r7, #27]
 8004c5c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004c74:	7ebb      	ldrb	r3, [r7, #26]
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d112      	bne.n	8004ca0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	2b21      	cmp	r3, #33	; 0x21
 8004c84:	d008      	beq.n	8004c98 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	2b29      	cmp	r3, #41	; 0x29
 8004c8a:	d005      	beq.n	8004c98 <HAL_I2C_ER_IRQHandler+0xce>
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	2b28      	cmp	r3, #40	; 0x28
 8004c90:	d106      	bne.n	8004ca0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b21      	cmp	r3, #33	; 0x21
 8004c96:	d103      	bne.n	8004ca0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f001 f869 	bl	8005d70 <I2C_Slave_AF>
 8004c9e:	e016      	b.n	8004cce <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ca8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004cb2:	7efb      	ldrb	r3, [r7, #27]
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d002      	beq.n	8004cbe <HAL_I2C_ER_IRQHandler+0xf4>
 8004cb8:	7efb      	ldrb	r3, [r7, #27]
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d107      	bne.n	8004cce <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ccc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	0adb      	lsrs	r3, r3, #11
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00e      	beq.n	8004cf8 <HAL_I2C_ER_IRQHandler+0x12e>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f043 0308 	orr.w	r3, r3, #8
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004cf6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d008      	beq.n	8004d10 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 f8a0 	bl	8005e50 <I2C_ITError>
  }
}
 8004d10:	bf00      	nop
 8004d12:	3728      	adds	r7, #40	; 0x28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	70fb      	strb	r3, [r7, #3]
 8004d74:	4613      	mov	r3, r2
 8004d76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d150      	bne.n	8004eb0 <I2C_MasterTransmit_TXE+0xc8>
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b21      	cmp	r3, #33	; 0x21
 8004e12:	d14d      	bne.n	8004eb0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d01d      	beq.n	8004e56 <I2C_MasterTransmit_TXE+0x6e>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d01a      	beq.n	8004e56 <I2C_MasterTransmit_TXE+0x6e>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e26:	d016      	beq.n	8004e56 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e36:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2211      	movs	r2, #17
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff ff62 	bl	8004d18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e54:	e060      	b.n	8004f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e64:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e74:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d107      	bne.n	8004ea0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff7d 	bl	8004d98 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e9e:	e03b      	b.n	8004f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff35 	bl	8004d18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004eae:	e033      	b.n	8004f18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b21      	cmp	r3, #33	; 0x21
 8004eb4:	d005      	beq.n	8004ec2 <I2C_MasterTransmit_TXE+0xda>
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d12d      	bne.n	8004f18 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b22      	cmp	r3, #34	; 0x22
 8004ec0:	d12a      	bne.n	8004f18 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d108      	bne.n	8004ede <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eda:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004edc:	e01c      	b.n	8004f18 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d103      	bne.n	8004ef2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f88e 	bl	800500c <I2C_MemoryTransmit_TXE_BTF>
}
 8004ef0:	e012      	b.n	8004f18 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f16:	e7ff      	b.n	8004f18 <I2C_MasterTransmit_TXE+0x130>
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b21      	cmp	r3, #33	; 0x21
 8004f38:	d164      	bne.n	8005004 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d012      	beq.n	8004f6a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f68:	e04c      	b.n	8005004 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d01d      	beq.n	8004fac <I2C_MasterTransmit_BTF+0x8c>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d01a      	beq.n	8004fac <I2C_MasterTransmit_BTF+0x8c>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f7c:	d016      	beq.n	8004fac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f8c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2211      	movs	r2, #17
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff feb7 	bl	8004d18 <HAL_I2C_MasterTxCpltCallback>
}
 8004faa:	e02b      	b.n	8005004 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d107      	bne.n	8004ff6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fed2 	bl	8004d98 <HAL_I2C_MemTxCpltCallback>
}
 8004ff4:	e006      	b.n	8005004 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fe8a 	bl	8004d18 <HAL_I2C_MasterTxCpltCallback>
}
 8005004:	bf00      	nop
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	2b00      	cmp	r3, #0
 8005022:	d11d      	bne.n	8005060 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10b      	bne.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	1c9a      	adds	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005042:	e073      	b.n	800512c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005048:	b29b      	uxth	r3, r3
 800504a:	121b      	asrs	r3, r3, #8
 800504c:	b2da      	uxtb	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800505e:	e065      	b.n	800512c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005064:	2b01      	cmp	r3, #1
 8005066:	d10b      	bne.n	8005080 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506c:	b2da      	uxtb	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800507e:	e055      	b.n	800512c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005084:	2b02      	cmp	r3, #2
 8005086:	d151      	bne.n	800512c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b22      	cmp	r3, #34	; 0x22
 800508c:	d10d      	bne.n	80050aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050a8:	e040      	b.n	800512c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d015      	beq.n	80050e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	2b21      	cmp	r3, #33	; 0x21
 80050b8:	d112      	bne.n	80050e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050de:	e025      	b.n	800512c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d120      	bne.n	800512c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b21      	cmp	r3, #33	; 0x21
 80050ee:	d11d      	bne.n	800512c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fe36 	bl	8004d98 <HAL_I2C_MemTxCpltCallback>
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b22      	cmp	r3, #34	; 0x22
 8005146:	f040 80ac 	bne.w	80052a2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b03      	cmp	r3, #3
 8005156:	d921      	bls.n	800519c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b03      	cmp	r3, #3
 8005186:	f040 808c 	bne.w	80052a2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005198:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800519a:	e082      	b.n	80052a2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d075      	beq.n	8005290 <I2C_MasterReceive_RXNE+0x15c>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d002      	beq.n	80051b0 <I2C_MasterReceive_RXNE+0x7c>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d16f      	bne.n	8005290 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 fafd 	bl	80067b0 <I2C_WaitOnSTOPRequestThroughIT>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d142      	bne.n	8005242 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ca:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b40      	cmp	r3, #64	; 0x40
 8005214:	d10a      	bne.n	800522c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fdc1 	bl	8004dac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800522a:	e03a      	b.n	80052a2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2212      	movs	r2, #18
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff fd76 	bl	8004d2c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005240:	e02f      	b.n	80052a2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005250:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fd99 	bl	8004dc0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800528e:	e008      	b.n	80052a2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529e:	605a      	str	r2, [r3, #4]
}
 80052a0:	e7ff      	b.n	80052a2 <I2C_MasterReceive_RXNE+0x16e>
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d11b      	bne.n	80052fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80052f8:	e0bd      	b.n	8005476 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b03      	cmp	r3, #3
 8005302:	d129      	bne.n	8005358 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005312:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d00a      	beq.n	8005330 <I2C_MasterReceive_BTF+0x86>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d007      	beq.n	8005330 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800532e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005356:	e08e      	b.n	8005476 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d176      	bne.n	8005450 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d002      	beq.n	800536e <I2C_MasterReceive_BTF+0xc4>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b10      	cmp	r3, #16
 800536c:	d108      	bne.n	8005380 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e019      	b.n	80053b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b04      	cmp	r3, #4
 8005384:	d002      	beq.n	800538c <I2C_MasterReceive_BTF+0xe2>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d108      	bne.n	800539e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e00a      	b.n	80053b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d007      	beq.n	80053b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800540e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b40      	cmp	r3, #64	; 0x40
 8005422:	d10a      	bne.n	800543a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff fcba 	bl	8004dac <HAL_I2C_MemRxCpltCallback>
}
 8005438:	e01d      	b.n	8005476 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2212      	movs	r2, #18
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff fc6f 	bl	8004d2c <HAL_I2C_MasterRxCpltCallback>
}
 800544e:	e012      	b.n	8005476 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005476:	bf00      	nop
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b40      	cmp	r3, #64	; 0x40
 8005490:	d117      	bne.n	80054c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80054ac:	e067      	b.n	800557e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	611a      	str	r2, [r3, #16]
}
 80054c0:	e05d      	b.n	800557e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ca:	d133      	bne.n	8005534 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b21      	cmp	r3, #33	; 0x21
 80054d6:	d109      	bne.n	80054ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054e8:	611a      	str	r2, [r3, #16]
 80054ea:	e008      	b.n	80054fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <I2C_Master_SB+0x92>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550c:	2b00      	cmp	r3, #0
 800550e:	d108      	bne.n	8005522 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	2b00      	cmp	r3, #0
 8005516:	d032      	beq.n	800557e <I2C_Master_SB+0x100>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	2b00      	cmp	r3, #0
 8005520:	d02d      	beq.n	800557e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005530:	605a      	str	r2, [r3, #4]
}
 8005532:	e024      	b.n	800557e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10e      	bne.n	800555a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005540:	b29b      	uxth	r3, r3
 8005542:	11db      	asrs	r3, r3, #7
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 0306 	and.w	r3, r3, #6
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f063 030f 	orn	r3, r3, #15
 8005550:	b2da      	uxtb	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	611a      	str	r2, [r3, #16]
}
 8005558:	e011      	b.n	800557e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555e:	2b01      	cmp	r3, #1
 8005560:	d10d      	bne.n	800557e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	b29b      	uxth	r3, r3
 8005568:	11db      	asrs	r3, r3, #7
 800556a:	b2db      	uxtb	r3, r3
 800556c:	f003 0306 	and.w	r3, r3, #6
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f063 030e 	orn	r3, r3, #14
 8005576:	b2da      	uxtb	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	611a      	str	r2, [r3, #16]
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	b2da      	uxtb	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d004      	beq.n	80055b0 <I2C_Master_ADD10+0x26>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d108      	bne.n	80055c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00c      	beq.n	80055d2 <I2C_Master_ADD10+0x48>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d0:	605a      	str	r2, [r3, #4]
  }
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80055de:	b480      	push	{r7}
 80055e0:	b091      	sub	sp, #68	; 0x44
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b22      	cmp	r3, #34	; 0x22
 8005606:	f040 8169 	bne.w	80058dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <I2C_Master_ADDR+0x54>
 8005612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d10b      	bne.n	8005632 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800561a:	2300      	movs	r3, #0
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	633b      	str	r3, [r7, #48]	; 0x30
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	633b      	str	r3, [r7, #48]	; 0x30
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	e160      	b.n	80058f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11d      	bne.n	8005676 <I2C_Master_ADDR+0x98>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005642:	d118      	bne.n	8005676 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005644:	2300      	movs	r3, #0
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005668:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	651a      	str	r2, [r3, #80]	; 0x50
 8005674:	e13e      	b.n	80058f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d113      	bne.n	80056a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005680:	2300      	movs	r3, #0
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	62bb      	str	r3, [r7, #40]	; 0x28
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	e115      	b.n	80058d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	f040 808a 	bne.w	80057c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056ba:	d137      	bne.n	800572c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056da:	d113      	bne.n	8005704 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ec:	2300      	movs	r3, #0
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	e0e7      	b.n	80058d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005704:	2300      	movs	r3, #0
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	623b      	str	r3, [r7, #32]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	623b      	str	r3, [r7, #32]
 8005718:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e0d3      	b.n	80058d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	2b08      	cmp	r3, #8
 8005730:	d02e      	beq.n	8005790 <I2C_Master_ADDR+0x1b2>
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	2b20      	cmp	r3, #32
 8005736:	d02b      	beq.n	8005790 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	2b12      	cmp	r3, #18
 800573c:	d102      	bne.n	8005744 <I2C_Master_ADDR+0x166>
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	2b01      	cmp	r3, #1
 8005742:	d125      	bne.n	8005790 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	2b04      	cmp	r3, #4
 8005748:	d00e      	beq.n	8005768 <I2C_Master_ADDR+0x18a>
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	2b02      	cmp	r3, #2
 800574e:	d00b      	beq.n	8005768 <I2C_Master_ADDR+0x18a>
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	2b10      	cmp	r3, #16
 8005754:	d008      	beq.n	8005768 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e007      	b.n	8005778 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005776:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005778:	2300      	movs	r3, #0
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	e0a1      	b.n	80058d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a0:	2300      	movs	r3, #0
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e085      	b.n	80058d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d14d      	bne.n	800586e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d016      	beq.n	8005806 <I2C_Master_ADDR+0x228>
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d013      	beq.n	8005806 <I2C_Master_ADDR+0x228>
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d010      	beq.n	8005806 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e007      	b.n	8005816 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005814:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005824:	d117      	bne.n	8005856 <I2C_Master_ADDR+0x278>
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800582c:	d00b      	beq.n	8005846 <I2C_Master_ADDR+0x268>
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	2b01      	cmp	r3, #1
 8005832:	d008      	beq.n	8005846 <I2C_Master_ADDR+0x268>
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	2b08      	cmp	r3, #8
 8005838:	d005      	beq.n	8005846 <I2C_Master_ADDR+0x268>
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	2b10      	cmp	r3, #16
 800583e:	d002      	beq.n	8005846 <I2C_Master_ADDR+0x268>
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	2b20      	cmp	r3, #32
 8005844:	d107      	bne.n	8005856 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005854:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	e032      	b.n	80058d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800587c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588c:	d117      	bne.n	80058be <I2C_Master_ADDR+0x2e0>
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005894:	d00b      	beq.n	80058ae <I2C_Master_ADDR+0x2d0>
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b01      	cmp	r3, #1
 800589a:	d008      	beq.n	80058ae <I2C_Master_ADDR+0x2d0>
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d005      	beq.n	80058ae <I2C_Master_ADDR+0x2d0>
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d002      	beq.n	80058ae <I2C_Master_ADDR+0x2d0>
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d107      	bne.n	80058be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80058da:	e00b      	b.n	80058f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
}
 80058f2:	e7ff      	b.n	80058f4 <I2C_Master_ADDR+0x316>
 80058f4:	bf00      	nop
 80058f6:	3744      	adds	r7, #68	; 0x44
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d02b      	beq.n	8005972 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	781a      	ldrb	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d114      	bne.n	8005972 <I2C_SlaveTransmit_TXE+0x72>
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b29      	cmp	r3, #41	; 0x29
 800594c:	d111      	bne.n	8005972 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2221      	movs	r2, #33	; 0x21
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2228      	movs	r2, #40	; 0x28
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff f9e7 	bl	8004d40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d011      	beq.n	80059b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	781a      	ldrb	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02c      	beq.n	8005a30 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d114      	bne.n	8005a30 <I2C_SlaveReceive_RXNE+0x74>
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b2a      	cmp	r3, #42	; 0x2a
 8005a0a:	d111      	bne.n	8005a30 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2222      	movs	r2, #34	; 0x22
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2228      	movs	r2, #40	; 0x28
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff f992 	bl	8004d54 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d012      	beq.n	8005a70 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a96:	2b28      	cmp	r3, #40	; 0x28
 8005a98:	d127      	bne.n	8005aea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	089b      	lsrs	r3, r3, #2
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	09db      	lsrs	r3, r3, #7
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	81bb      	strh	r3, [r7, #12]
 8005acc:	e002      	b.n	8005ad4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005adc:	89ba      	ldrh	r2, [r7, #12]
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff f940 	bl	8004d68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ae8:	e00e      	b.n	8005b08 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b2e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6c:	d172      	bne.n	8005c54 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b22      	cmp	r3, #34	; 0x22
 8005b72:	d002      	beq.n	8005b7a <I2C_Slave_STOPF+0x6a>
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b2a      	cmp	r3, #42	; 0x2a
 8005b78:	d135      	bne.n	8005be6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f043 0204 	orr.w	r2, r3, #4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fd fd9a 	bl	80036ec <HAL_DMA_GetState>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d049      	beq.n	8005c52 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	4a69      	ldr	r2, [pc, #420]	; (8005d68 <I2C_Slave_STOPF+0x258>)
 8005bc4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd fbe2 	bl	8003394 <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d03d      	beq.n	8005c52 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005be4:	e035      	b.n	8005c52 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0204 	orr.w	r2, r3, #4
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fd fd64 	bl	80036ec <HAL_DMA_GetState>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d014      	beq.n	8005c54 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	4a4e      	ldr	r2, [pc, #312]	; (8005d68 <I2C_Slave_STOPF+0x258>)
 8005c30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fd fbac 	bl	8003394 <HAL_DMA_Abort_IT>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d008      	beq.n	8005c54 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
 8005c50:	e000      	b.n	8005c54 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c52:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d03e      	beq.n	8005cdc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d112      	bne.n	8005c92 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9c:	2b40      	cmp	r3, #64	; 0x40
 8005c9e:	d112      	bne.n	8005cc6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f043 0204 	orr.w	r2, r3, #4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f8b3 	bl	8005e50 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005cea:	e039      	b.n	8005d60 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b2a      	cmp	r3, #42	; 0x2a
 8005cf0:	d109      	bne.n	8005d06 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2228      	movs	r2, #40	; 0x28
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff f827 	bl	8004d54 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b28      	cmp	r3, #40	; 0x28
 8005d10:	d111      	bne.n	8005d36 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <I2C_Slave_STOPF+0x25c>)
 8005d16:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff f828 	bl	8004d84 <HAL_I2C_ListenCpltCallback>
}
 8005d34:	e014      	b.n	8005d60 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	2b22      	cmp	r3, #34	; 0x22
 8005d3c:	d002      	beq.n	8005d44 <I2C_Slave_STOPF+0x234>
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b22      	cmp	r3, #34	; 0x22
 8005d42:	d10d      	bne.n	8005d60 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fe fffa 	bl	8004d54 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	080063b1 	.word	0x080063b1
 8005d6c:	ffff0000 	.word	0xffff0000

08005d70 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d002      	beq.n	8005d92 <I2C_Slave_AF+0x22>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d129      	bne.n	8005de6 <I2C_Slave_AF+0x76>
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b28      	cmp	r3, #40	; 0x28
 8005d96:	d126      	bne.n	8005de6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a2c      	ldr	r2, [pc, #176]	; (8005e4c <I2C_Slave_AF+0xdc>)
 8005d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005db6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fe ffd0 	bl	8004d84 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005de4:	e02e      	b.n	8005e44 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b21      	cmp	r3, #33	; 0x21
 8005dea:	d126      	bne.n	8005e3a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <I2C_Slave_AF+0xdc>)
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2221      	movs	r2, #33	; 0x21
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e16:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e20:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e30:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fe ff84 	bl	8004d40 <HAL_I2C_SlaveTxCpltCallback>
}
 8005e38:	e004      	b.n	8005e44 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e42:	615a      	str	r2, [r3, #20]
}
 8005e44:	bf00      	nop
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	ffff0000 	.word	0xffff0000

08005e50 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	2b10      	cmp	r3, #16
 8005e6c:	d002      	beq.n	8005e74 <I2C_ITError+0x24>
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d10a      	bne.n	8005e8a <I2C_ITError+0x3a>
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b22      	cmp	r3, #34	; 0x22
 8005e78:	d107      	bne.n	8005e8a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e88:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e90:	2b28      	cmp	r3, #40	; 0x28
 8005e92:	d107      	bne.n	8005ea4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2228      	movs	r2, #40	; 0x28
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ea2:	e015      	b.n	8005ed0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb2:	d00a      	beq.n	8005eca <I2C_ITError+0x7a>
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b60      	cmp	r3, #96	; 0x60
 8005eb8:	d007      	beq.n	8005eca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ede:	d162      	bne.n	8005fa6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d020      	beq.n	8005f40 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f02:	4a6a      	ldr	r2, [pc, #424]	; (80060ac <I2C_ITError+0x25c>)
 8005f04:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fd fa42 	bl	8003394 <HAL_DMA_Abort_IT>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8089 	beq.w	800602a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4798      	blx	r3
 8005f3e:	e074      	b.n	800602a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	4a59      	ldr	r2, [pc, #356]	; (80060ac <I2C_ITError+0x25c>)
 8005f46:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fd fa21 	bl	8003394 <HAL_DMA_Abort_IT>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d068      	beq.n	800602a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d10b      	bne.n	8005f7e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4798      	blx	r3
 8005fa4:	e041      	b.n	800602a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b60      	cmp	r3, #96	; 0x60
 8005fb0:	d125      	bne.n	8005ffe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d10b      	bne.n	8005fe6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fe feec 	bl	8004dd4 <HAL_I2C_AbortCpltCallback>
 8005ffc:	e015      	b.n	800602a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d10b      	bne.n	8006024 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fe fecb 	bl	8004dc0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10e      	bne.n	8006058 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006066:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b04      	cmp	r3, #4
 800607a:	d113      	bne.n	80060a4 <I2C_ITError+0x254>
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	2b28      	cmp	r3, #40	; 0x28
 8006080:	d110      	bne.n	80060a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <I2C_ITError+0x260>)
 8006086:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fe fe70 	bl	8004d84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	080063b1 	.word	0x080063b1
 80060b0:	ffff0000 	.word	0xffff0000

080060b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 fa08 	bl	8006500 <I2C_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00d      	beq.n	8006112 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006104:	d103      	bne.n	800610e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e05f      	b.n	80061d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006112:	897b      	ldrh	r3, [r7, #10]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006120:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	492d      	ldr	r1, [pc, #180]	; (80061dc <I2C_RequestMemoryWrite+0x128>)
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 fa40 	bl	80065ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e04c      	b.n	80061d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	6a39      	ldr	r1, [r7, #32]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 faaa 	bl	80066ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00d      	beq.n	800617a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	2b04      	cmp	r3, #4
 8006164:	d107      	bne.n	8006176 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006174:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e02b      	b.n	80061d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d105      	bne.n	800618c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006180:	893b      	ldrh	r3, [r7, #8]
 8006182:	b2da      	uxtb	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	611a      	str	r2, [r3, #16]
 800618a:	e021      	b.n	80061d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800618c:	893b      	ldrh	r3, [r7, #8]
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	b29b      	uxth	r3, r3
 8006192:	b2da      	uxtb	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800619a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619c:	6a39      	ldr	r1, [r7, #32]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fa84 	bl	80066ac <I2C_WaitOnTXEFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00d      	beq.n	80061c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d107      	bne.n	80061c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e005      	b.n	80061d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061c6:	893b      	ldrh	r3, [r7, #8]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	00010002 	.word	0x00010002

080061e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	4608      	mov	r0, r1
 80061ea:	4611      	mov	r1, r2
 80061ec:	461a      	mov	r2, r3
 80061ee:	4603      	mov	r3, r0
 80061f0:	817b      	strh	r3, [r7, #10]
 80061f2:	460b      	mov	r3, r1
 80061f4:	813b      	strh	r3, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006208:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006218:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	2200      	movs	r2, #0
 8006222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f96a 	bl	8006500 <I2C_WaitOnFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006240:	d103      	bne.n	800624a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e0aa      	b.n	80063a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800624e:	897b      	ldrh	r3, [r7, #10]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800625c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	4952      	ldr	r1, [pc, #328]	; (80063ac <I2C_RequestMemoryRead+0x1cc>)
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f9a2 	bl	80065ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e097      	b.n	80063a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800628a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628c:	6a39      	ldr	r1, [r7, #32]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fa0c 	bl	80066ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d107      	bne.n	80062b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e076      	b.n	80063a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d105      	bne.n	80062c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062bc:	893b      	ldrh	r3, [r7, #8]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	611a      	str	r2, [r3, #16]
 80062c6:	e021      	b.n	800630c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062c8:	893b      	ldrh	r3, [r7, #8]
 80062ca:	0a1b      	lsrs	r3, r3, #8
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d8:	6a39      	ldr	r1, [r7, #32]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 f9e6 	bl	80066ac <I2C_WaitOnTXEFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00d      	beq.n	8006302 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d107      	bne.n	80062fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e050      	b.n	80063a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006302:	893b      	ldrh	r3, [r7, #8]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630e:	6a39      	ldr	r1, [r7, #32]
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f9cb 	bl	80066ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00d      	beq.n	8006338 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	2b04      	cmp	r3, #4
 8006322:	d107      	bne.n	8006334 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006332:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e035      	b.n	80063a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006346:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	2200      	movs	r2, #0
 8006350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f8d3 	bl	8006500 <I2C_WaitOnFlagUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00d      	beq.n	800637c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636e:	d103      	bne.n	8006378 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e013      	b.n	80063a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800637c:	897b      	ldrh	r3, [r7, #10]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f043 0301 	orr.w	r3, r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	6a3a      	ldr	r2, [r7, #32]
 8006390:	4906      	ldr	r1, [pc, #24]	; (80063ac <I2C_RequestMemoryRead+0x1cc>)
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f90b 	bl	80065ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	00010002 	.word	0x00010002

080063b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80063ca:	4b4b      	ldr	r3, [pc, #300]	; (80064f8 <I2C_DMAAbort+0x148>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	08db      	lsrs	r3, r3, #3
 80063d0:	4a4a      	ldr	r2, [pc, #296]	; (80064fc <I2C_DMAAbort+0x14c>)
 80063d2:	fba2 2303 	umull	r2, r3, r2, r3
 80063d6:	0a1a      	lsrs	r2, r3, #8
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	00da      	lsls	r2, r3, #3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d106      	bne.n	80063f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f043 0220 	orr.w	r2, r3, #32
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80063f6:	e00a      	b.n	800640e <I2C_DMAAbort+0x5e>
    }
    count--;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800640c:	d0ea      	beq.n	80063e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641a:	2200      	movs	r2, #0
 800641c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	2200      	movs	r2, #0
 800642c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2200      	movs	r2, #0
 8006442:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006450:	2200      	movs	r2, #0
 8006452:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	2200      	movs	r2, #0
 8006462:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b60      	cmp	r3, #96	; 0x60
 800647e:	d10e      	bne.n	800649e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2200      	movs	r2, #0
 8006494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006496:	6978      	ldr	r0, [r7, #20]
 8006498:	f7fe fc9c 	bl	8004dd4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800649c:	e027      	b.n	80064ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064a4:	2b28      	cmp	r3, #40	; 0x28
 80064a6:	d117      	bne.n	80064d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2228      	movs	r2, #40	; 0x28
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064d6:	e007      	b.n	80064e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80064e8:	6978      	ldr	r0, [r7, #20]
 80064ea:	f7fe fc69 	bl	8004dc0 <HAL_I2C_ErrorCallback>
}
 80064ee:	bf00      	nop
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2000002c 	.word	0x2000002c
 80064fc:	14f8b589 	.word	0x14f8b589

08006500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006510:	e025      	b.n	800655e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d021      	beq.n	800655e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651a:	f7fc fc83 	bl	8002e24 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d302      	bcc.n	8006530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d116      	bne.n	800655e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e023      	b.n	80065a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d10d      	bne.n	8006584 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	43da      	mvns	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4013      	ands	r3, r2
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	bf0c      	ite	eq
 800657a:	2301      	moveq	r3, #1
 800657c:	2300      	movne	r3, #0
 800657e:	b2db      	uxtb	r3, r3
 8006580:	461a      	mov	r2, r3
 8006582:	e00c      	b.n	800659e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	43da      	mvns	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	bf0c      	ite	eq
 8006596:	2301      	moveq	r3, #1
 8006598:	2300      	movne	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d0b6      	beq.n	8006512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065bc:	e051      	b.n	8006662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065cc:	d123      	bne.n	8006616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f043 0204 	orr.w	r2, r3, #4
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e046      	b.n	80066a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d021      	beq.n	8006662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661e:	f7fc fc01 	bl	8002e24 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	429a      	cmp	r2, r3
 800662c:	d302      	bcc.n	8006634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d116      	bne.n	8006662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	f043 0220 	orr.w	r2, r3, #32
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e020      	b.n	80066a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d10c      	bne.n	8006686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	43da      	mvns	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4013      	ands	r3, r2
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	e00b      	b.n	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	43da      	mvns	r2, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	4013      	ands	r3, r2
 8006692:	b29b      	uxth	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d18d      	bne.n	80065be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b8:	e02d      	b.n	8006716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f900 	bl	80068c0 <I2C_IsAcknowledgeFailed>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e02d      	b.n	8006726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d0:	d021      	beq.n	8006716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d2:	f7fc fba7 	bl	8002e24 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d302      	bcc.n	80066e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d116      	bne.n	8006716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e007      	b.n	8006726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d1ca      	bne.n	80066ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800673a:	e02d      	b.n	8006798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f8bf 	bl	80068c0 <I2C_IsAcknowledgeFailed>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e02d      	b.n	80067a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d021      	beq.n	8006798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006754:	f7fc fb66 	bl	8002e24 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	429a      	cmp	r2, r3
 8006762:	d302      	bcc.n	800676a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d116      	bne.n	8006798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	f043 0220 	orr.w	r2, r3, #32
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e007      	b.n	80067a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d1ca      	bne.n	800673c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80067bc:	4b13      	ldr	r3, [pc, #76]	; (800680c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	08db      	lsrs	r3, r3, #3
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	0a1a      	lsrs	r2, r3, #8
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d107      	bne.n	80067ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0220 	orr.w	r2, r3, #32
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e008      	b.n	8006800 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fc:	d0e9      	beq.n	80067d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	2000002c 	.word	0x2000002c
 8006810:	14f8b589 	.word	0x14f8b589

08006814 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006820:	e042      	b.n	80068a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b10      	cmp	r3, #16
 800682e:	d119      	bne.n	8006864 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0210 	mvn.w	r2, #16
 8006838:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e029      	b.n	80068b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006864:	f7fc fade 	bl	8002e24 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	d302      	bcc.n	800687a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d116      	bne.n	80068a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e007      	b.n	80068b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d1b5      	bne.n	8006822 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d6:	d11b      	bne.n	8006910 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	f043 0204 	orr.w	r2, r3, #4
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	370c      	adds	r7, #12
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800692e:	d103      	bne.n	8006938 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006936:	e007      	b.n	8006948 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006940:	d102      	bne.n	8006948 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2208      	movs	r2, #8
 8006946:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e267      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d075      	beq.n	8006a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006972:	4b88      	ldr	r3, [pc, #544]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 030c 	and.w	r3, r3, #12
 800697a:	2b04      	cmp	r3, #4
 800697c:	d00c      	beq.n	8006998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800697e:	4b85      	ldr	r3, [pc, #532]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006986:	2b08      	cmp	r3, #8
 8006988:	d112      	bne.n	80069b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800698a:	4b82      	ldr	r3, [pc, #520]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006996:	d10b      	bne.n	80069b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006998:	4b7e      	ldr	r3, [pc, #504]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d05b      	beq.n	8006a5c <HAL_RCC_OscConfig+0x108>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d157      	bne.n	8006a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e242      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d106      	bne.n	80069c8 <HAL_RCC_OscConfig+0x74>
 80069ba:	4b76      	ldr	r3, [pc, #472]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a75      	ldr	r2, [pc, #468]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	e01d      	b.n	8006a04 <HAL_RCC_OscConfig+0xb0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069d0:	d10c      	bne.n	80069ec <HAL_RCC_OscConfig+0x98>
 80069d2:	4b70      	ldr	r3, [pc, #448]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a6f      	ldr	r2, [pc, #444]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	4b6d      	ldr	r3, [pc, #436]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a6c      	ldr	r2, [pc, #432]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	e00b      	b.n	8006a04 <HAL_RCC_OscConfig+0xb0>
 80069ec:	4b69      	ldr	r3, [pc, #420]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a68      	ldr	r2, [pc, #416]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	4b66      	ldr	r3, [pc, #408]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a65      	ldr	r2, [pc, #404]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 80069fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d013      	beq.n	8006a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0c:	f7fc fa0a 	bl	8002e24 <HAL_GetTick>
 8006a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a12:	e008      	b.n	8006a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a14:	f7fc fa06 	bl	8002e24 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b64      	cmp	r3, #100	; 0x64
 8006a20:	d901      	bls.n	8006a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e207      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a26:	4b5b      	ldr	r3, [pc, #364]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0f0      	beq.n	8006a14 <HAL_RCC_OscConfig+0xc0>
 8006a32:	e014      	b.n	8006a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a34:	f7fc f9f6 	bl	8002e24 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a3c:	f7fc f9f2 	bl	8002e24 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b64      	cmp	r3, #100	; 0x64
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e1f3      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a4e:	4b51      	ldr	r3, [pc, #324]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f0      	bne.n	8006a3c <HAL_RCC_OscConfig+0xe8>
 8006a5a:	e000      	b.n	8006a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d063      	beq.n	8006b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a6a:	4b4a      	ldr	r3, [pc, #296]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f003 030c 	and.w	r3, r3, #12
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a76:	4b47      	ldr	r3, [pc, #284]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d11c      	bne.n	8006abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a82:	4b44      	ldr	r3, [pc, #272]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d116      	bne.n	8006abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a8e:	4b41      	ldr	r3, [pc, #260]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x152>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d001      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e1c7      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa6:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4937      	ldr	r1, [pc, #220]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aba:	e03a      	b.n	8006b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d020      	beq.n	8006b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ac4:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <HAL_RCC_OscConfig+0x244>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aca:	f7fc f9ab 	bl	8002e24 <HAL_GetTick>
 8006ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ad2:	f7fc f9a7 	bl	8002e24 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e1a8      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae4:	4b2b      	ldr	r3, [pc, #172]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f0      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	4925      	ldr	r1, [pc, #148]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	600b      	str	r3, [r1, #0]
 8006b04:	e015      	b.n	8006b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b06:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <HAL_RCC_OscConfig+0x244>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fc f98a 	bl	8002e24 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b14:	f7fc f986 	bl	8002e24 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e187      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b26:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d036      	beq.n	8006bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <HAL_RCC_OscConfig+0x248>)
 8006b48:	2201      	movs	r2, #1
 8006b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4c:	f7fc f96a 	bl	8002e24 <HAL_GetTick>
 8006b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b54:	f7fc f966 	bl	8002e24 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e167      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_RCC_OscConfig+0x240>)
 8006b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCC_OscConfig+0x200>
 8006b72:	e01b      	b.n	8006bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <HAL_RCC_OscConfig+0x248>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b7a:	f7fc f953 	bl	8002e24 <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b80:	e00e      	b.n	8006ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b82:	f7fc f94f 	bl	8002e24 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d907      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e150      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
 8006b94:	40023800 	.word	0x40023800
 8006b98:	42470000 	.word	0x42470000
 8006b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ba0:	4b88      	ldr	r3, [pc, #544]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1ea      	bne.n	8006b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f000 8097 	beq.w	8006ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bbe:	4b81      	ldr	r3, [pc, #516]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10f      	bne.n	8006bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	4b7d      	ldr	r3, [pc, #500]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	4a7c      	ldr	r2, [pc, #496]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006bda:	4b7a      	ldr	r3, [pc, #488]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006be6:	2301      	movs	r3, #1
 8006be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bea:	4b77      	ldr	r3, [pc, #476]	; (8006dc8 <HAL_RCC_OscConfig+0x474>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d118      	bne.n	8006c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bf6:	4b74      	ldr	r3, [pc, #464]	; (8006dc8 <HAL_RCC_OscConfig+0x474>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a73      	ldr	r2, [pc, #460]	; (8006dc8 <HAL_RCC_OscConfig+0x474>)
 8006bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c02:	f7fc f90f 	bl	8002e24 <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c08:	e008      	b.n	8006c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c0a:	f7fc f90b 	bl	8002e24 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d901      	bls.n	8006c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e10c      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1c:	4b6a      	ldr	r3, [pc, #424]	; (8006dc8 <HAL_RCC_OscConfig+0x474>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f0      	beq.n	8006c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d106      	bne.n	8006c3e <HAL_RCC_OscConfig+0x2ea>
 8006c30:	4b64      	ldr	r3, [pc, #400]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	4a63      	ldr	r2, [pc, #396]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3c:	e01c      	b.n	8006c78 <HAL_RCC_OscConfig+0x324>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b05      	cmp	r3, #5
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x30c>
 8006c46:	4b5f      	ldr	r3, [pc, #380]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4a:	4a5e      	ldr	r2, [pc, #376]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c4c:	f043 0304 	orr.w	r3, r3, #4
 8006c50:	6713      	str	r3, [r2, #112]	; 0x70
 8006c52:	4b5c      	ldr	r3, [pc, #368]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4a5b      	ldr	r2, [pc, #364]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5e:	e00b      	b.n	8006c78 <HAL_RCC_OscConfig+0x324>
 8006c60:	4b58      	ldr	r3, [pc, #352]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	4a57      	ldr	r2, [pc, #348]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6c:	4b55      	ldr	r3, [pc, #340]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	4a54      	ldr	r2, [pc, #336]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006c72:	f023 0304 	bic.w	r3, r3, #4
 8006c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d015      	beq.n	8006cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c80:	f7fc f8d0 	bl	8002e24 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c86:	e00a      	b.n	8006c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c88:	f7fc f8cc 	bl	8002e24 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e0cb      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9e:	4b49      	ldr	r3, [pc, #292]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0ee      	beq.n	8006c88 <HAL_RCC_OscConfig+0x334>
 8006caa:	e014      	b.n	8006cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cac:	f7fc f8ba 	bl	8002e24 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb2:	e00a      	b.n	8006cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb4:	f7fc f8b6 	bl	8002e24 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e0b5      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cca:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1ee      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d105      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cdc:	4b39      	ldr	r3, [pc, #228]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	4a38      	ldr	r2, [pc, #224]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80a1 	beq.w	8006e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cf2:	4b34      	ldr	r3, [pc, #208]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 030c 	and.w	r3, r3, #12
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d05c      	beq.n	8006db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d141      	bne.n	8006d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d06:	4b31      	ldr	r3, [pc, #196]	; (8006dcc <HAL_RCC_OscConfig+0x478>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0c:	f7fc f88a 	bl	8002e24 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d14:	f7fc f886 	bl	8002e24 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e087      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69da      	ldr	r2, [r3, #28]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	019b      	lsls	r3, r3, #6
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	041b      	lsls	r3, r3, #16
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	061b      	lsls	r3, r3, #24
 8006d56:	491b      	ldr	r1, [pc, #108]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <HAL_RCC_OscConfig+0x478>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d62:	f7fc f85f 	bl	8002e24 <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d68:	e008      	b.n	8006d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d6a:	f7fc f85b 	bl	8002e24 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e05c      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d7c:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0f0      	beq.n	8006d6a <HAL_RCC_OscConfig+0x416>
 8006d88:	e054      	b.n	8006e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d8a:	4b10      	ldr	r3, [pc, #64]	; (8006dcc <HAL_RCC_OscConfig+0x478>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d90:	f7fc f848 	bl	8002e24 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d98:	f7fc f844 	bl	8002e24 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e045      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006daa:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <HAL_RCC_OscConfig+0x470>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x444>
 8006db6:	e03d      	b.n	8006e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d107      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e038      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	40007000 	.word	0x40007000
 8006dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006dd0:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <HAL_RCC_OscConfig+0x4ec>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d028      	beq.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d121      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d11a      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e00:	4013      	ands	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d111      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d107      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d001      	beq.n	8006e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	40023800 	.word	0x40023800

08006e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0cc      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e58:	4b68      	ldr	r3, [pc, #416]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d90c      	bls.n	8006e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e66:	4b65      	ldr	r3, [pc, #404]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e6e:	4b63      	ldr	r3, [pc, #396]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d001      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0b8      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d020      	beq.n	8006ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e98:	4b59      	ldr	r3, [pc, #356]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	4a58      	ldr	r2, [pc, #352]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 0308 	and.w	r3, r3, #8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006eb0:	4b53      	ldr	r3, [pc, #332]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	4a52      	ldr	r2, [pc, #328]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ebc:	4b50      	ldr	r3, [pc, #320]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	494d      	ldr	r1, [pc, #308]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d044      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d107      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ee2:	4b47      	ldr	r3, [pc, #284]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d119      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e07f      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d003      	beq.n	8006f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d107      	bne.n	8006f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f02:	4b3f      	ldr	r3, [pc, #252]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e06f      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f12:	4b3b      	ldr	r3, [pc, #236]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e067      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f22:	4b37      	ldr	r3, [pc, #220]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f023 0203 	bic.w	r2, r3, #3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	4934      	ldr	r1, [pc, #208]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f34:	f7fb ff76 	bl	8002e24 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3a:	e00a      	b.n	8006f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f3c:	f7fb ff72 	bl	8002e24 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e04f      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f52:	4b2b      	ldr	r3, [pc, #172]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 020c 	and.w	r2, r3, #12
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d1eb      	bne.n	8006f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f64:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d20c      	bcs.n	8006f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f72:	4b22      	ldr	r3, [pc, #136]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7a:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <HAL_RCC_ClockConfig+0x1b8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d001      	beq.n	8006f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e032      	b.n	8006ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f98:	4b19      	ldr	r3, [pc, #100]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4916      	ldr	r1, [pc, #88]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d009      	beq.n	8006fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fb6:	4b12      	ldr	r3, [pc, #72]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	490e      	ldr	r1, [pc, #56]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006fca:	f000 f821 	bl	8007010 <HAL_RCC_GetSysClockFreq>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	091b      	lsrs	r3, r3, #4
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	490a      	ldr	r1, [pc, #40]	; (8007004 <HAL_RCC_ClockConfig+0x1c0>)
 8006fdc:	5ccb      	ldrb	r3, [r1, r3]
 8006fde:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe2:	4a09      	ldr	r2, [pc, #36]	; (8007008 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fe6:	4b09      	ldr	r3, [pc, #36]	; (800700c <HAL_RCC_ClockConfig+0x1c8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fb fed6 	bl	8002d9c <HAL_InitTick>

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40023c00 	.word	0x40023c00
 8007000:	40023800 	.word	0x40023800
 8007004:	08009d7c 	.word	0x08009d7c
 8007008:	2000002c 	.word	0x2000002c
 800700c:	20000030 	.word	0x20000030

08007010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007014:	b094      	sub	sp, #80	; 0x50
 8007016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	647b      	str	r3, [r7, #68]	; 0x44
 800701c:	2300      	movs	r3, #0
 800701e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007020:	2300      	movs	r3, #0
 8007022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007028:	4b79      	ldr	r3, [pc, #484]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 030c 	and.w	r3, r3, #12
 8007030:	2b08      	cmp	r3, #8
 8007032:	d00d      	beq.n	8007050 <HAL_RCC_GetSysClockFreq+0x40>
 8007034:	2b08      	cmp	r3, #8
 8007036:	f200 80e1 	bhi.w	80071fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_RCC_GetSysClockFreq+0x34>
 800703e:	2b04      	cmp	r3, #4
 8007040:	d003      	beq.n	800704a <HAL_RCC_GetSysClockFreq+0x3a>
 8007042:	e0db      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007044:	4b73      	ldr	r3, [pc, #460]	; (8007214 <HAL_RCC_GetSysClockFreq+0x204>)
 8007046:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007048:	e0db      	b.n	8007202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800704a:	4b73      	ldr	r3, [pc, #460]	; (8007218 <HAL_RCC_GetSysClockFreq+0x208>)
 800704c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800704e:	e0d8      	b.n	8007202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007050:	4b6f      	ldr	r3, [pc, #444]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007058:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800705a:	4b6d      	ldr	r3, [pc, #436]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d063      	beq.n	800712e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007066:	4b6a      	ldr	r3, [pc, #424]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	099b      	lsrs	r3, r3, #6
 800706c:	2200      	movs	r2, #0
 800706e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007070:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007078:	633b      	str	r3, [r7, #48]	; 0x30
 800707a:	2300      	movs	r3, #0
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
 800707e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	f04f 0000 	mov.w	r0, #0
 800708a:	f04f 0100 	mov.w	r1, #0
 800708e:	0159      	lsls	r1, r3, #5
 8007090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007094:	0150      	lsls	r0, r2, #5
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4621      	mov	r1, r4
 800709c:	1a51      	subs	r1, r2, r1
 800709e:	6139      	str	r1, [r7, #16]
 80070a0:	4629      	mov	r1, r5
 80070a2:	eb63 0301 	sbc.w	r3, r3, r1
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070b4:	4659      	mov	r1, fp
 80070b6:	018b      	lsls	r3, r1, #6
 80070b8:	4651      	mov	r1, sl
 80070ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070be:	4651      	mov	r1, sl
 80070c0:	018a      	lsls	r2, r1, #6
 80070c2:	4651      	mov	r1, sl
 80070c4:	ebb2 0801 	subs.w	r8, r2, r1
 80070c8:	4659      	mov	r1, fp
 80070ca:	eb63 0901 	sbc.w	r9, r3, r1
 80070ce:	f04f 0200 	mov.w	r2, #0
 80070d2:	f04f 0300 	mov.w	r3, #0
 80070d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070e2:	4690      	mov	r8, r2
 80070e4:	4699      	mov	r9, r3
 80070e6:	4623      	mov	r3, r4
 80070e8:	eb18 0303 	adds.w	r3, r8, r3
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	462b      	mov	r3, r5
 80070f0:	eb49 0303 	adc.w	r3, r9, r3
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007102:	4629      	mov	r1, r5
 8007104:	024b      	lsls	r3, r1, #9
 8007106:	4621      	mov	r1, r4
 8007108:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800710c:	4621      	mov	r1, r4
 800710e:	024a      	lsls	r2, r1, #9
 8007110:	4610      	mov	r0, r2
 8007112:	4619      	mov	r1, r3
 8007114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007116:	2200      	movs	r2, #0
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
 800711a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800711c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007120:	f7f9 fd86 	bl	8000c30 <__aeabi_uldivmod>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4613      	mov	r3, r2
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	e058      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800712e:	4b38      	ldr	r3, [pc, #224]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	099b      	lsrs	r3, r3, #6
 8007134:	2200      	movs	r2, #0
 8007136:	4618      	mov	r0, r3
 8007138:	4611      	mov	r1, r2
 800713a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800713e:	623b      	str	r3, [r7, #32]
 8007140:	2300      	movs	r3, #0
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
 8007144:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007148:	4642      	mov	r2, r8
 800714a:	464b      	mov	r3, r9
 800714c:	f04f 0000 	mov.w	r0, #0
 8007150:	f04f 0100 	mov.w	r1, #0
 8007154:	0159      	lsls	r1, r3, #5
 8007156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800715a:	0150      	lsls	r0, r2, #5
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4641      	mov	r1, r8
 8007162:	ebb2 0a01 	subs.w	sl, r2, r1
 8007166:	4649      	mov	r1, r9
 8007168:	eb63 0b01 	sbc.w	fp, r3, r1
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007178:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800717c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007180:	ebb2 040a 	subs.w	r4, r2, sl
 8007184:	eb63 050b 	sbc.w	r5, r3, fp
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	00eb      	lsls	r3, r5, #3
 8007192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007196:	00e2      	lsls	r2, r4, #3
 8007198:	4614      	mov	r4, r2
 800719a:	461d      	mov	r5, r3
 800719c:	4643      	mov	r3, r8
 800719e:	18e3      	adds	r3, r4, r3
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	464b      	mov	r3, r9
 80071a4:	eb45 0303 	adc.w	r3, r5, r3
 80071a8:	607b      	str	r3, [r7, #4]
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071b6:	4629      	mov	r1, r5
 80071b8:	028b      	lsls	r3, r1, #10
 80071ba:	4621      	mov	r1, r4
 80071bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071c0:	4621      	mov	r1, r4
 80071c2:	028a      	lsls	r2, r1, #10
 80071c4:	4610      	mov	r0, r2
 80071c6:	4619      	mov	r1, r3
 80071c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ca:	2200      	movs	r2, #0
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	61fa      	str	r2, [r7, #28]
 80071d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071d4:	f7f9 fd2c 	bl	8000c30 <__aeabi_uldivmod>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4613      	mov	r3, r2
 80071de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <HAL_RCC_GetSysClockFreq+0x200>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	0c1b      	lsrs	r3, r3, #16
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	3301      	adds	r3, #1
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80071f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071fa:	e002      	b.n	8007202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_RCC_GetSysClockFreq+0x204>)
 80071fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007204:	4618      	mov	r0, r3
 8007206:	3750      	adds	r7, #80	; 0x50
 8007208:	46bd      	mov	sp, r7
 800720a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800720e:	bf00      	nop
 8007210:	40023800 	.word	0x40023800
 8007214:	00f42400 	.word	0x00f42400
 8007218:	007a1200 	.word	0x007a1200

0800721c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800721c:	b480      	push	{r7}
 800721e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007220:	4b03      	ldr	r3, [pc, #12]	; (8007230 <HAL_RCC_GetHCLKFreq+0x14>)
 8007222:	681b      	ldr	r3, [r3, #0]
}
 8007224:	4618      	mov	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	2000002c 	.word	0x2000002c

08007234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007238:	f7ff fff0 	bl	800721c <HAL_RCC_GetHCLKFreq>
 800723c:	4602      	mov	r2, r0
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	0a9b      	lsrs	r3, r3, #10
 8007244:	f003 0307 	and.w	r3, r3, #7
 8007248:	4903      	ldr	r1, [pc, #12]	; (8007258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800724a:	5ccb      	ldrb	r3, [r1, r3]
 800724c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}
 8007254:	40023800 	.word	0x40023800
 8007258:	08009d8c 	.word	0x08009d8c

0800725c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007260:	f7ff ffdc 	bl	800721c <HAL_RCC_GetHCLKFreq>
 8007264:	4602      	mov	r2, r0
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	0b5b      	lsrs	r3, r3, #13
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	4903      	ldr	r1, [pc, #12]	; (8007280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007272:	5ccb      	ldrb	r3, [r1, r3]
 8007274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007278:	4618      	mov	r0, r3
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40023800 	.word	0x40023800
 8007280:	08009d8c 	.word	0x08009d8c

08007284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e041      	b.n	800731a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fb fb58 	bl	8002960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f001 f834 	bl	8008330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b01      	cmp	r3, #1
 8007336:	d001      	beq.n	800733c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e03c      	b.n	80073b6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <HAL_TIM_Base_Start+0xa0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d018      	beq.n	8007380 <HAL_TIM_Base_Start+0x5c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007356:	d013      	beq.n	8007380 <HAL_TIM_Base_Start+0x5c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1a      	ldr	r2, [pc, #104]	; (80073c8 <HAL_TIM_Base_Start+0xa4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00e      	beq.n	8007380 <HAL_TIM_Base_Start+0x5c>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a19      	ldr	r2, [pc, #100]	; (80073cc <HAL_TIM_Base_Start+0xa8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d009      	beq.n	8007380 <HAL_TIM_Base_Start+0x5c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <HAL_TIM_Base_Start+0xac>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_TIM_Base_Start+0x5c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <HAL_TIM_Base_Start+0xb0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d111      	bne.n	80073a4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b06      	cmp	r3, #6
 8007390:	d010      	beq.n	80073b4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a2:	e007      	b.n	80073b4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40000800 	.word	0x40000800
 80073d0:	40000c00 	.word	0x40000c00
 80073d4:	40014000 	.word	0x40014000

080073d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d001      	beq.n	80073f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e044      	b.n	800747a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <HAL_TIM_Base_Start_IT+0xb0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x6c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741a:	d013      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x6c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1a      	ldr	r2, [pc, #104]	; (800748c <HAL_TIM_Base_Start_IT+0xb4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x6c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a19      	ldr	r2, [pc, #100]	; (8007490 <HAL_TIM_Base_Start_IT+0xb8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x6c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a17      	ldr	r2, [pc, #92]	; (8007494 <HAL_TIM_Base_Start_IT+0xbc>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x6c>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a16      	ldr	r2, [pc, #88]	; (8007498 <HAL_TIM_Base_Start_IT+0xc0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d111      	bne.n	8007468 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b06      	cmp	r3, #6
 8007454:	d010      	beq.n	8007478 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f042 0201 	orr.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007466:	e007      	b.n	8007478 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f042 0201 	orr.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40010000 	.word	0x40010000
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800
 8007494:	40000c00 	.word	0x40000c00
 8007498:	40014000 	.word	0x40014000

0800749c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e041      	b.n	8007532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f839 	bl	800753a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f000 ff28 	bl	8008330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <HAL_TIM_PWM_Start+0x24>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e022      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b04      	cmp	r3, #4
 8007578:	d109      	bne.n	800758e <HAL_TIM_PWM_Start+0x3e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e015      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d109      	bne.n	80075a8 <HAL_TIM_PWM_Start+0x58>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	e008      	b.n	80075ba <HAL_TIM_PWM_Start+0x6a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	bf14      	ite	ne
 80075b4:	2301      	movne	r3, #1
 80075b6:	2300      	moveq	r3, #0
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e068      	b.n	8007694 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d104      	bne.n	80075d2 <HAL_TIM_PWM_Start+0x82>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075d0:	e013      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x92>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e0:	e00b      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d104      	bne.n	80075f2 <HAL_TIM_PWM_Start+0xa2>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f0:	e003      	b.n	80075fa <HAL_TIM_PWM_Start+0xaa>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2201      	movs	r2, #1
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fa58 	bl	8008ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a23      	ldr	r2, [pc, #140]	; (800769c <HAL_TIM_PWM_Start+0x14c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d107      	bne.n	8007622 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1d      	ldr	r2, [pc, #116]	; (800769c <HAL_TIM_PWM_Start+0x14c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007634:	d013      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a19      	ldr	r2, [pc, #100]	; (80076a0 <HAL_TIM_PWM_Start+0x150>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a17      	ldr	r2, [pc, #92]	; (80076a4 <HAL_TIM_PWM_Start+0x154>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a16      	ldr	r2, [pc, #88]	; (80076a8 <HAL_TIM_PWM_Start+0x158>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIM_PWM_Start+0x10e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a14      	ldr	r2, [pc, #80]	; (80076ac <HAL_TIM_PWM_Start+0x15c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d111      	bne.n	8007682 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b06      	cmp	r3, #6
 800766e:	d010      	beq.n	8007692 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	e007      	b.n	8007692 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40010000 	.word	0x40010000
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40000800 	.word	0x40000800
 80076a8:	40000c00 	.word	0x40000c00
 80076ac:	40014000 	.word	0x40014000

080076b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e041      	b.n	8007746 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f839 	bl	800774e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f000 fe1e 	bl	8008330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <HAL_TIM_IC_Start_DMA+0x22>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007782:	b2db      	uxtb	r3, r3
 8007784:	e013      	b.n	80077ae <HAL_TIM_IC_Start_DMA+0x4a>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b04      	cmp	r3, #4
 800778a:	d104      	bne.n	8007796 <HAL_TIM_IC_Start_DMA+0x32>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007792:	b2db      	uxtb	r3, r3
 8007794:	e00b      	b.n	80077ae <HAL_TIM_IC_Start_DMA+0x4a>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b08      	cmp	r3, #8
 800779a:	d104      	bne.n	80077a6 <HAL_TIM_IC_Start_DMA+0x42>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	e003      	b.n	80077ae <HAL_TIM_IC_Start_DMA+0x4a>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d104      	bne.n	80077c0 <HAL_TIM_IC_Start_DMA+0x5c>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	e013      	b.n	80077e8 <HAL_TIM_IC_Start_DMA+0x84>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d104      	bne.n	80077d0 <HAL_TIM_IC_Start_DMA+0x6c>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	e00b      	b.n	80077e8 <HAL_TIM_IC_Start_DMA+0x84>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	d104      	bne.n	80077e0 <HAL_TIM_IC_Start_DMA+0x7c>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e003      	b.n	80077e8 <HAL_TIM_IC_Start_DMA+0x84>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80077ea:	7dbb      	ldrb	r3, [r7, #22]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d002      	beq.n	80077f6 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80077f0:	7d7b      	ldrb	r3, [r7, #21]
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d101      	bne.n	80077fa <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80077f6:	2302      	movs	r3, #2
 80077f8:	e13c      	b.n	8007a74 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d143      	bne.n	8007888 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007800:	7d7b      	ldrb	r3, [r7, #21]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d140      	bne.n	8007888 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d104      	bne.n	8007816 <HAL_TIM_IC_Start_DMA+0xb2>
 800780c:	887b      	ldrh	r3, [r7, #2]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e12e      	b.n	8007a74 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <HAL_TIM_IC_Start_DMA+0xc2>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007824:	e013      	b.n	800784e <HAL_TIM_IC_Start_DMA+0xea>
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b04      	cmp	r3, #4
 800782a:	d104      	bne.n	8007836 <HAL_TIM_IC_Start_DMA+0xd2>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007834:	e00b      	b.n	800784e <HAL_TIM_IC_Start_DMA+0xea>
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b08      	cmp	r3, #8
 800783a:	d104      	bne.n	8007846 <HAL_TIM_IC_Start_DMA+0xe2>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007844:	e003      	b.n	800784e <HAL_TIM_IC_Start_DMA+0xea>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2202      	movs	r2, #2
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d104      	bne.n	800785e <HAL_TIM_IC_Start_DMA+0xfa>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800785c:	e016      	b.n	800788c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b04      	cmp	r3, #4
 8007862:	d104      	bne.n	800786e <HAL_TIM_IC_Start_DMA+0x10a>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800786c:	e00e      	b.n	800788c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b08      	cmp	r3, #8
 8007872:	d104      	bne.n	800787e <HAL_TIM_IC_Start_DMA+0x11a>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800787c:	e006      	b.n	800788c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8007886:	e001      	b.n	800788c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0f3      	b.n	8007a74 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2201      	movs	r2, #1
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	4618      	mov	r0, r3
 8007896:	f001 f90f 	bl	8008ab8 <TIM_CCxChannelCmd>

  switch (Channel)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b0c      	cmp	r3, #12
 800789e:	f200 80ad 	bhi.w	80079fc <HAL_TIM_IC_Start_DMA+0x298>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <HAL_TIM_IC_Start_DMA+0x144>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078dd 	.word	0x080078dd
 80078ac:	080079fd 	.word	0x080079fd
 80078b0:	080079fd 	.word	0x080079fd
 80078b4:	080079fd 	.word	0x080079fd
 80078b8:	08007925 	.word	0x08007925
 80078bc:	080079fd 	.word	0x080079fd
 80078c0:	080079fd 	.word	0x080079fd
 80078c4:	080079fd 	.word	0x080079fd
 80078c8:	0800796d 	.word	0x0800796d
 80078cc:	080079fd 	.word	0x080079fd
 80078d0:	080079fd 	.word	0x080079fd
 80078d4:	080079fd 	.word	0x080079fd
 80078d8:	080079b5 	.word	0x080079b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	4a66      	ldr	r2, [pc, #408]	; (8007a7c <HAL_TIM_IC_Start_DMA+0x318>)
 80078e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	4a65      	ldr	r2, [pc, #404]	; (8007a80 <HAL_TIM_IC_Start_DMA+0x31c>)
 80078ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	4a64      	ldr	r2, [pc, #400]	; (8007a84 <HAL_TIM_IC_Start_DMA+0x320>)
 80078f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3334      	adds	r3, #52	; 0x34
 80078fe:	4619      	mov	r1, r3
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	f7fb fc7e 	bl	8003204 <HAL_DMA_Start_IT>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e0b0      	b.n	8007a74 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007920:	60da      	str	r2, [r3, #12]
      break;
 8007922:	e06e      	b.n	8007a02 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007928:	4a54      	ldr	r2, [pc, #336]	; (8007a7c <HAL_TIM_IC_Start_DMA+0x318>)
 800792a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	4a53      	ldr	r2, [pc, #332]	; (8007a80 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007932:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	4a52      	ldr	r2, [pc, #328]	; (8007a84 <HAL_TIM_IC_Start_DMA+0x320>)
 800793a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3338      	adds	r3, #56	; 0x38
 8007946:	4619      	mov	r1, r3
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	887b      	ldrh	r3, [r7, #2]
 800794c:	f7fb fc5a 	bl	8003204 <HAL_DMA_Start_IT>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e08c      	b.n	8007a74 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007968:	60da      	str	r2, [r3, #12]
      break;
 800796a:	e04a      	b.n	8007a02 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	4a42      	ldr	r2, [pc, #264]	; (8007a7c <HAL_TIM_IC_Start_DMA+0x318>)
 8007972:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	4a41      	ldr	r2, [pc, #260]	; (8007a80 <HAL_TIM_IC_Start_DMA+0x31c>)
 800797a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	4a40      	ldr	r2, [pc, #256]	; (8007a84 <HAL_TIM_IC_Start_DMA+0x320>)
 8007982:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	333c      	adds	r3, #60	; 0x3c
 800798e:	4619      	mov	r1, r3
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	887b      	ldrh	r3, [r7, #2]
 8007994:	f7fb fc36 	bl	8003204 <HAL_DMA_Start_IT>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e068      	b.n	8007a74 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079b0:	60da      	str	r2, [r3, #12]
      break;
 80079b2:	e026      	b.n	8007a02 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b8:	4a30      	ldr	r2, [pc, #192]	; (8007a7c <HAL_TIM_IC_Start_DMA+0x318>)
 80079ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	4a2f      	ldr	r2, [pc, #188]	; (8007a80 <HAL_TIM_IC_Start_DMA+0x31c>)
 80079c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	4a2e      	ldr	r2, [pc, #184]	; (8007a84 <HAL_TIM_IC_Start_DMA+0x320>)
 80079ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3340      	adds	r3, #64	; 0x40
 80079d6:	4619      	mov	r1, r3
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	887b      	ldrh	r3, [r7, #2]
 80079dc:	f7fb fc12 	bl	8003204 <HAL_DMA_Start_IT>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e044      	b.n	8007a74 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079f8:	60da      	str	r2, [r3, #12]
      break;
 80079fa:	e002      	b.n	8007a02 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007a00:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a20      	ldr	r2, [pc, #128]	; (8007a88 <HAL_TIM_IC_Start_DMA+0x324>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d018      	beq.n	8007a3e <HAL_TIM_IC_Start_DMA+0x2da>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a14:	d013      	beq.n	8007a3e <HAL_TIM_IC_Start_DMA+0x2da>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <HAL_TIM_IC_Start_DMA+0x328>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_TIM_IC_Start_DMA+0x2da>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1a      	ldr	r2, [pc, #104]	; (8007a90 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d009      	beq.n	8007a3e <HAL_TIM_IC_Start_DMA+0x2da>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a19      	ldr	r2, [pc, #100]	; (8007a94 <HAL_TIM_IC_Start_DMA+0x330>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_TIM_IC_Start_DMA+0x2da>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <HAL_TIM_IC_Start_DMA+0x334>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d111      	bne.n	8007a62 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b06      	cmp	r3, #6
 8007a4e:	d010      	beq.n	8007a72 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0201 	orr.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a60:	e007      	b.n	8007a72 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0201 	orr.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	08008201 	.word	0x08008201
 8007a80:	080082c9 	.word	0x080082c9
 8007a84:	0800816f 	.word	0x0800816f
 8007a88:	40010000 	.word	0x40010000
 8007a8c:	40000400 	.word	0x40000400
 8007a90:	40000800 	.word	0x40000800
 8007a94:	40000c00 	.word	0x40000c00
 8007a98:	40014000 	.word	0x40014000

08007a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d122      	bne.n	8007af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d11b      	bne.n	8007af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f06f 0202 	mvn.w	r2, #2
 8007ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb13 	bl	800810a <HAL_TIM_IC_CaptureCallback>
 8007ae4:	e005      	b.n	8007af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fb05 	bl	80080f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fb20 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d122      	bne.n	8007b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d11b      	bne.n	8007b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f06f 0204 	mvn.w	r2, #4
 8007b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fae9 	bl	800810a <HAL_TIM_IC_CaptureCallback>
 8007b38:	e005      	b.n	8007b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fadb 	bl	80080f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 faf6 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	2b08      	cmp	r3, #8
 8007b58:	d122      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d11b      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0208 	mvn.w	r2, #8
 8007b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2204      	movs	r2, #4
 8007b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fabf 	bl	800810a <HAL_TIM_IC_CaptureCallback>
 8007b8c:	e005      	b.n	8007b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fab1 	bl	80080f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 facc 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b10      	cmp	r3, #16
 8007bac:	d122      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b10      	cmp	r3, #16
 8007bba:	d11b      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0210 	mvn.w	r2, #16
 8007bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2208      	movs	r2, #8
 8007bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa95 	bl	800810a <HAL_TIM_IC_CaptureCallback>
 8007be0:	e005      	b.n	8007bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa87 	bl	80080f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 faa2 	bl	8008132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d10e      	bne.n	8007c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d107      	bne.n	8007c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0201 	mvn.w	r2, #1
 8007c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fa fd96 	bl	800274c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2a:	2b80      	cmp	r3, #128	; 0x80
 8007c2c:	d10e      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c38:	2b80      	cmp	r3, #128	; 0x80
 8007c3a:	d107      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 ffd4 	bl	8008bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	2b40      	cmp	r3, #64	; 0x40
 8007c58:	d10e      	bne.n	8007c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c64:	2b40      	cmp	r3, #64	; 0x40
 8007c66:	d107      	bne.n	8007c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa67 	bl	8008146 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d10e      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d107      	bne.n	8007ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f06f 0220 	mvn.w	r2, #32
 8007c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 ff9e 	bl	8008be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <HAL_TIM_IC_ConfigChannel+0x1e>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e088      	b.n	8007ddc <HAL_TIM_IC_ConfigChannel+0x130>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d11b      	bne.n	8007d10 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	6819      	ldr	r1, [r3, #0]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f000 fd2e 	bl	8008748 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 020c 	bic.w	r2, r2, #12
 8007cfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6999      	ldr	r1, [r3, #24]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	689a      	ldr	r2, [r3, #8]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	619a      	str	r2, [r3, #24]
 8007d0e:	e060      	b.n	8007dd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d11c      	bne.n	8007d50 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6819      	ldr	r1, [r3, #0]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f000 fda6 	bl	8008876 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6999      	ldr	r1, [r3, #24]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	021a      	lsls	r2, r3, #8
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	619a      	str	r2, [r3, #24]
 8007d4e:	e040      	b.n	8007dd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d11b      	bne.n	8007d8e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f000 fdf3 	bl	8008950 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69da      	ldr	r2, [r3, #28]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 020c 	bic.w	r2, r2, #12
 8007d78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	69d9      	ldr	r1, [r3, #28]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	61da      	str	r2, [r3, #28]
 8007d8c:	e021      	b.n	8007dd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b0c      	cmp	r3, #12
 8007d92:	d11c      	bne.n	8007dce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	6819      	ldr	r1, [r3, #0]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f000 fe10 	bl	80089c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69da      	ldr	r2, [r3, #28]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007db6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69d9      	ldr	r1, [r3, #28]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	021a      	lsls	r2, r3, #8
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	61da      	str	r2, [r3, #28]
 8007dcc:	e001      	b.n	8007dd2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d101      	bne.n	8007e02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e0ae      	b.n	8007f60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b0c      	cmp	r3, #12
 8007e0e:	f200 809f 	bhi.w	8007f50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e12:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e4d 	.word	0x08007e4d
 8007e1c:	08007f51 	.word	0x08007f51
 8007e20:	08007f51 	.word	0x08007f51
 8007e24:	08007f51 	.word	0x08007f51
 8007e28:	08007e8d 	.word	0x08007e8d
 8007e2c:	08007f51 	.word	0x08007f51
 8007e30:	08007f51 	.word	0x08007f51
 8007e34:	08007f51 	.word	0x08007f51
 8007e38:	08007ecf 	.word	0x08007ecf
 8007e3c:	08007f51 	.word	0x08007f51
 8007e40:	08007f51 	.word	0x08007f51
 8007e44:	08007f51 	.word	0x08007f51
 8007e48:	08007f0f 	.word	0x08007f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 faec 	bl	8008430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0208 	orr.w	r2, r2, #8
 8007e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0204 	bic.w	r2, r2, #4
 8007e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6999      	ldr	r1, [r3, #24]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	691a      	ldr	r2, [r3, #16]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	619a      	str	r2, [r3, #24]
      break;
 8007e8a:	e064      	b.n	8007f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68b9      	ldr	r1, [r7, #8]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fb32 	bl	80084fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6999      	ldr	r1, [r3, #24]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	021a      	lsls	r2, r3, #8
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	619a      	str	r2, [r3, #24]
      break;
 8007ecc:	e043      	b.n	8007f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68b9      	ldr	r1, [r7, #8]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fb7d 	bl	80085d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0208 	orr.w	r2, r2, #8
 8007ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69da      	ldr	r2, [r3, #28]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0204 	bic.w	r2, r2, #4
 8007ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69d9      	ldr	r1, [r3, #28]
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	61da      	str	r2, [r3, #28]
      break;
 8007f0c:	e023      	b.n	8007f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68b9      	ldr	r1, [r7, #8]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fbc7 	bl	80086a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69d9      	ldr	r1, [r3, #28]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	021a      	lsls	r2, r3, #8
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	61da      	str	r2, [r3, #28]
      break;
 8007f4e:	e002      	b.n	8007f56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]
      break;
 8007f54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_TIM_ConfigClockSource+0x1c>
 8007f80:	2302      	movs	r3, #2
 8007f82:	e0b4      	b.n	80080ee <HAL_TIM_ConfigClockSource+0x186>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2202      	movs	r2, #2
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fbc:	d03e      	beq.n	800803c <HAL_TIM_ConfigClockSource+0xd4>
 8007fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fc2:	f200 8087 	bhi.w	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fca:	f000 8086 	beq.w	80080da <HAL_TIM_ConfigClockSource+0x172>
 8007fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd2:	d87f      	bhi.n	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd4:	2b70      	cmp	r3, #112	; 0x70
 8007fd6:	d01a      	beq.n	800800e <HAL_TIM_ConfigClockSource+0xa6>
 8007fd8:	2b70      	cmp	r3, #112	; 0x70
 8007fda:	d87b      	bhi.n	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fdc:	2b60      	cmp	r3, #96	; 0x60
 8007fde:	d050      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0x11a>
 8007fe0:	2b60      	cmp	r3, #96	; 0x60
 8007fe2:	d877      	bhi.n	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe4:	2b50      	cmp	r3, #80	; 0x50
 8007fe6:	d03c      	beq.n	8008062 <HAL_TIM_ConfigClockSource+0xfa>
 8007fe8:	2b50      	cmp	r3, #80	; 0x50
 8007fea:	d873      	bhi.n	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fec:	2b40      	cmp	r3, #64	; 0x40
 8007fee:	d058      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x13a>
 8007ff0:	2b40      	cmp	r3, #64	; 0x40
 8007ff2:	d86f      	bhi.n	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b30      	cmp	r3, #48	; 0x30
 8007ff6:	d064      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ff8:	2b30      	cmp	r3, #48	; 0x30
 8007ffa:	d86b      	bhi.n	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d060      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008000:	2b20      	cmp	r3, #32
 8008002:	d867      	bhi.n	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d05c      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008008:	2b10      	cmp	r3, #16
 800800a:	d05a      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x15a>
 800800c:	e062      	b.n	80080d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	6899      	ldr	r1, [r3, #8]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f000 fd2b 	bl	8008a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	609a      	str	r2, [r3, #8]
      break;
 800803a:	e04f      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	6899      	ldr	r1, [r3, #8]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f000 fd14 	bl	8008a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800805e:	609a      	str	r2, [r3, #8]
      break;
 8008060:	e03c      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	6859      	ldr	r1, [r3, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	461a      	mov	r2, r3
 8008070:	f000 fbd2 	bl	8008818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2150      	movs	r1, #80	; 0x50
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fce1 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 8008080:	e02c      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6859      	ldr	r1, [r3, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	461a      	mov	r2, r3
 8008090:	f000 fc2e 	bl	80088f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2160      	movs	r1, #96	; 0x60
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fcd1 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 80080a0:	e01c      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f000 fbb2 	bl	8008818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2140      	movs	r1, #64	; 0x40
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fcc1 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 80080c0:	e00c      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4619      	mov	r1, r3
 80080cc:	4610      	mov	r0, r2
 80080ce:	f000 fcb8 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 80080d2:	e003      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	73fb      	strb	r3, [r7, #15]
      break;
 80080d8:	e000      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	429a      	cmp	r2, r3
 8008184:	d107      	bne.n	8008196 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008194:	e02a      	b.n	80081ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	d107      	bne.n	80081b0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2202      	movs	r2, #2
 80081a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081ae:	e01d      	b.n	80081ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d107      	bne.n	80081ca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2204      	movs	r2, #4
 80081be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081c8:	e010      	b.n	80081ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d107      	bne.n	80081e4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2208      	movs	r2, #8
 80081d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081e2:	e003      	b.n	80081ec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f7ff ffb4 	bl	800815a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	429a      	cmp	r2, r3
 8008216:	d10f      	bne.n	8008238 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d146      	bne.n	80082b4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008236:	e03d      	b.n	80082b4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	429a      	cmp	r2, r3
 8008240:	d10f      	bne.n	8008262 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2202      	movs	r2, #2
 8008246:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d131      	bne.n	80082b4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008260:	e028      	b.n	80082b4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	429a      	cmp	r2, r3
 800826a:	d10f      	bne.n	800828c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2204      	movs	r2, #4
 8008270:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d11c      	bne.n	80082b4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800828a:	e013      	b.n	80082b4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	429a      	cmp	r2, r3
 8008294:	d10e      	bne.n	80082b4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2208      	movs	r2, #8
 800829a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d107      	bne.n	80082b4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff ff28 	bl	800810a <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	771a      	strb	r2, [r3, #28]
}
 80082c0:	bf00      	nop
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d103      	bne.n	80082e8 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	771a      	strb	r2, [r3, #28]
 80082e6:	e019      	b.n	800831c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d103      	bne.n	80082fa <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2202      	movs	r2, #2
 80082f6:	771a      	strb	r2, [r3, #28]
 80082f8:	e010      	b.n	800831c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d103      	bne.n	800830c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2204      	movs	r2, #4
 8008308:	771a      	strb	r2, [r3, #28]
 800830a:	e007      	b.n	800831c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	d102      	bne.n	800831c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2208      	movs	r2, #8
 800831a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f7ff fefe 	bl	800811e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	771a      	strb	r2, [r3, #28]
}
 8008328:	bf00      	nop
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a34      	ldr	r2, [pc, #208]	; (8008414 <TIM_Base_SetConfig+0xe4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00f      	beq.n	8008368 <TIM_Base_SetConfig+0x38>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834e:	d00b      	beq.n	8008368 <TIM_Base_SetConfig+0x38>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a31      	ldr	r2, [pc, #196]	; (8008418 <TIM_Base_SetConfig+0xe8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d007      	beq.n	8008368 <TIM_Base_SetConfig+0x38>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a30      	ldr	r2, [pc, #192]	; (800841c <TIM_Base_SetConfig+0xec>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d003      	beq.n	8008368 <TIM_Base_SetConfig+0x38>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a2f      	ldr	r2, [pc, #188]	; (8008420 <TIM_Base_SetConfig+0xf0>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d108      	bne.n	800837a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a25      	ldr	r2, [pc, #148]	; (8008414 <TIM_Base_SetConfig+0xe4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d01b      	beq.n	80083ba <TIM_Base_SetConfig+0x8a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008388:	d017      	beq.n	80083ba <TIM_Base_SetConfig+0x8a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a22      	ldr	r2, [pc, #136]	; (8008418 <TIM_Base_SetConfig+0xe8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d013      	beq.n	80083ba <TIM_Base_SetConfig+0x8a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a21      	ldr	r2, [pc, #132]	; (800841c <TIM_Base_SetConfig+0xec>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d00f      	beq.n	80083ba <TIM_Base_SetConfig+0x8a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a20      	ldr	r2, [pc, #128]	; (8008420 <TIM_Base_SetConfig+0xf0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00b      	beq.n	80083ba <TIM_Base_SetConfig+0x8a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a1f      	ldr	r2, [pc, #124]	; (8008424 <TIM_Base_SetConfig+0xf4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d007      	beq.n	80083ba <TIM_Base_SetConfig+0x8a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a1e      	ldr	r2, [pc, #120]	; (8008428 <TIM_Base_SetConfig+0xf8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d003      	beq.n	80083ba <TIM_Base_SetConfig+0x8a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a1d      	ldr	r2, [pc, #116]	; (800842c <TIM_Base_SetConfig+0xfc>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d108      	bne.n	80083cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a08      	ldr	r2, [pc, #32]	; (8008414 <TIM_Base_SetConfig+0xe4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d103      	bne.n	8008400 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	615a      	str	r2, [r3, #20]
}
 8008406:	bf00      	nop
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	40010000 	.word	0x40010000
 8008418:	40000400 	.word	0x40000400
 800841c:	40000800 	.word	0x40000800
 8008420:	40000c00 	.word	0x40000c00
 8008424:	40014000 	.word	0x40014000
 8008428:	40014400 	.word	0x40014400
 800842c:	40014800 	.word	0x40014800

08008430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	f023 0201 	bic.w	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f023 0302 	bic.w	r3, r3, #2
 8008478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	4313      	orrs	r3, r2
 8008482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <TIM_OC1_SetConfig+0xc8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d10c      	bne.n	80084a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f023 0308 	bic.w	r3, r3, #8
 8008492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4313      	orrs	r3, r2
 800849c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f023 0304 	bic.w	r3, r3, #4
 80084a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a13      	ldr	r2, [pc, #76]	; (80084f8 <TIM_OC1_SetConfig+0xc8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d111      	bne.n	80084d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	621a      	str	r2, [r3, #32]
}
 80084ec:	bf00      	nop
 80084ee:	371c      	adds	r7, #28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	40010000 	.word	0x40010000

080084fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	f023 0210 	bic.w	r2, r3, #16
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800852a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	4313      	orrs	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f023 0320 	bic.w	r3, r3, #32
 8008546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	011b      	lsls	r3, r3, #4
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4313      	orrs	r3, r2
 8008552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a1e      	ldr	r2, [pc, #120]	; (80085d0 <TIM_OC2_SetConfig+0xd4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d10d      	bne.n	8008578 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a15      	ldr	r2, [pc, #84]	; (80085d0 <TIM_OC2_SetConfig+0xd4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d113      	bne.n	80085a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800858e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	bf00      	nop
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	40010000 	.word	0x40010000

080085d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800861c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	021b      	lsls	r3, r3, #8
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	4313      	orrs	r3, r2
 8008628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <TIM_OC3_SetConfig+0xd0>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d10d      	bne.n	800864e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800864c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <TIM_OC3_SetConfig+0xd0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d113      	bne.n	800867e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800865c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	011b      	lsls	r3, r3, #4
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	4313      	orrs	r3, r2
 800867c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	621a      	str	r2, [r3, #32]
}
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40010000 	.word	0x40010000

080086a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	031b      	lsls	r3, r3, #12
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a10      	ldr	r2, [pc, #64]	; (8008744 <TIM_OC4_SetConfig+0x9c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d109      	bne.n	800871c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800870e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	019b      	lsls	r3, r3, #6
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	621a      	str	r2, [r3, #32]
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	40010000 	.word	0x40010000

08008748 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	f023 0201 	bic.w	r2, r3, #1
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	4a24      	ldr	r2, [pc, #144]	; (8008804 <TIM_TI1_SetConfig+0xbc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d013      	beq.n	800879e <TIM_TI1_SetConfig+0x56>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800877c:	d00f      	beq.n	800879e <TIM_TI1_SetConfig+0x56>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4a21      	ldr	r2, [pc, #132]	; (8008808 <TIM_TI1_SetConfig+0xc0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00b      	beq.n	800879e <TIM_TI1_SetConfig+0x56>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	4a20      	ldr	r2, [pc, #128]	; (800880c <TIM_TI1_SetConfig+0xc4>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d007      	beq.n	800879e <TIM_TI1_SetConfig+0x56>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <TIM_TI1_SetConfig+0xc8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d003      	beq.n	800879e <TIM_TI1_SetConfig+0x56>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	4a1e      	ldr	r2, [pc, #120]	; (8008814 <TIM_TI1_SetConfig+0xcc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d101      	bne.n	80087a2 <TIM_TI1_SetConfig+0x5a>
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <TIM_TI1_SetConfig+0x5c>
 80087a2:	2300      	movs	r3, #0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d008      	beq.n	80087ba <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f023 0303 	bic.w	r3, r3, #3
 80087ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]
 80087b8:	e003      	b.n	80087c2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f043 0301 	orr.w	r3, r3, #1
 80087c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	011b      	lsls	r3, r3, #4
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f023 030a 	bic.w	r3, r3, #10
 80087dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f003 030a 	and.w	r3, r3, #10
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	621a      	str	r2, [r3, #32]
}
 80087f6:	bf00      	nop
 80087f8:	371c      	adds	r7, #28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	40010000 	.word	0x40010000
 8008808:	40000400 	.word	0x40000400
 800880c:	40000800 	.word	0x40000800
 8008810:	40000c00 	.word	0x40000c00
 8008814:	40014000 	.word	0x40014000

08008818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f023 0201 	bic.w	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f023 030a 	bic.w	r3, r3, #10
 8008854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4313      	orrs	r3, r2
 800885c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	621a      	str	r2, [r3, #32]
}
 800886a:	bf00      	nop
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008876:	b480      	push	{r7}
 8008878:	b087      	sub	sp, #28
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	607a      	str	r2, [r7, #4]
 8008882:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	f023 0210 	bic.w	r2, r3, #16
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	031b      	lsls	r3, r3, #12
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	011b      	lsls	r3, r3, #4
 80088ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	621a      	str	r2, [r3, #32]
}
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	f023 0210 	bic.w	r2, r3, #16
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800891a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	031b      	lsls	r3, r3, #12
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800892c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4313      	orrs	r3, r2
 8008936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	621a      	str	r2, [r3, #32]
}
 8008944:	bf00      	nop
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f023 0303 	bic.w	r3, r3, #3
 800897c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800898c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	b2db      	uxtb	r3, r3
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	4313      	orrs	r3, r2
 8008998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80089a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	621a      	str	r2, [r3, #32]
}
 80089bc:	bf00      	nop
 80089be:	371c      	adds	r7, #28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	031b      	lsls	r3, r3, #12
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	031b      	lsls	r3, r3, #12
 8008a20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	621a      	str	r2, [r3, #32]
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f043 0307 	orr.w	r3, r3, #7
 8008a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	609a      	str	r2, [r3, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	021a      	lsls	r2, r3, #8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	609a      	str	r2, [r3, #8]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	2201      	movs	r2, #1
 8008acc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a1a      	ldr	r2, [r3, #32]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	401a      	ands	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a1a      	ldr	r2, [r3, #32]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f003 031f 	and.w	r3, r3, #31
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	fa01 f303 	lsl.w	r3, r1, r3
 8008af0:	431a      	orrs	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	621a      	str	r2, [r3, #32]
}
 8008af6:	bf00      	nop
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
	...

08008b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e050      	b.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a1c      	ldr	r2, [pc, #112]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d018      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b68:	d013      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a18      	ldr	r2, [pc, #96]	; (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00e      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a16      	ldr	r2, [pc, #88]	; (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d009      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a15      	ldr	r2, [pc, #84]	; (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d004      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a13      	ldr	r2, [pc, #76]	; (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d10c      	bne.n	8008bac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40010000 	.word	0x40010000
 8008bd0:	40000400 	.word	0x40000400
 8008bd4:	40000800 	.word	0x40000800
 8008bd8:	40000c00 	.word	0x40000c00
 8008bdc:	40014000 	.word	0x40014000

08008be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e03f      	b.n	8008c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7f9 ff7e 	bl	8002b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2224      	movs	r2, #36	; 0x24
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fde9 	bl	8009824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695a      	ldr	r2, [r3, #20]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b08a      	sub	sp, #40	; 0x28
 8008ca6:	af02      	add	r7, sp, #8
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	603b      	str	r3, [r7, #0]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b20      	cmp	r3, #32
 8008cc0:	d17c      	bne.n	8008dbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <HAL_UART_Transmit+0x2c>
 8008cc8:	88fb      	ldrh	r3, [r7, #6]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e075      	b.n	8008dbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d101      	bne.n	8008ce0 <HAL_UART_Transmit+0x3e>
 8008cdc:	2302      	movs	r3, #2
 8008cde:	e06e      	b.n	8008dbe <HAL_UART_Transmit+0x11c>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2221      	movs	r2, #33	; 0x21
 8008cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cf6:	f7fa f895 	bl	8002e24 <HAL_GetTick>
 8008cfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	88fa      	ldrh	r2, [r7, #6]
 8008d00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	88fa      	ldrh	r2, [r7, #6]
 8008d06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d10:	d108      	bne.n	8008d24 <HAL_UART_Transmit+0x82>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	e003      	b.n	8008d2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008d34:	e02a      	b.n	8008d8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	2180      	movs	r1, #128	; 0x80
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 fb29 	bl	8009398 <UART_WaitOnFlagUntilTimeout>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e036      	b.n	8008dbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	3302      	adds	r3, #2
 8008d6a:	61bb      	str	r3, [r7, #24]
 8008d6c:	e007      	b.n	8008d7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	781a      	ldrb	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	3b01      	subs	r3, #1
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1cf      	bne.n	8008d36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2140      	movs	r1, #64	; 0x40
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 faf9 	bl	8009398 <UART_WaitOnFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e006      	b.n	8008dbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	e000      	b.n	8008dbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008dbc:	2302      	movs	r3, #2
  }
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3720      	adds	r7, #32
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b20      	cmp	r3, #32
 8008dde:	d11d      	bne.n	8008e1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_UART_Receive_IT+0x26>
 8008de6:	88fb      	ldrh	r3, [r7, #6]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e016      	b.n	8008e1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d101      	bne.n	8008dfe <HAL_UART_Receive_IT+0x38>
 8008dfa:	2302      	movs	r3, #2
 8008dfc:	e00f      	b.n	8008e1e <HAL_UART_Receive_IT+0x58>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e0c:	88fb      	ldrh	r3, [r7, #6]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fb2e 	bl	8009474 <UART_Start_Receive_IT>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	e000      	b.n	8008e1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008e1c:	2302      	movs	r3, #2
  }
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b0ba      	sub	sp, #232	; 0xe8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10f      	bne.n	8008e8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e72:	f003 0320 	and.w	r3, r3, #32
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d009      	beq.n	8008e8e <HAL_UART_IRQHandler+0x66>
 8008e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fc11 	bl	80096ae <UART_Receive_IT>
      return;
 8008e8c:	e256      	b.n	800933c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80de 	beq.w	8009054 <HAL_UART_IRQHandler+0x22c>
 8008e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d106      	bne.n	8008eb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80d1 	beq.w	8009054 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <HAL_UART_IRQHandler+0xae>
 8008ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	f043 0201 	orr.w	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eda:	f003 0304 	and.w	r3, r3, #4
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00b      	beq.n	8008efa <HAL_UART_IRQHandler+0xd2>
 8008ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d005      	beq.n	8008efa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	f043 0202 	orr.w	r2, r3, #2
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00b      	beq.n	8008f1e <HAL_UART_IRQHandler+0xf6>
 8008f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d005      	beq.n	8008f1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	f043 0204 	orr.w	r2, r3, #4
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d011      	beq.n	8008f4e <HAL_UART_IRQHandler+0x126>
 8008f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d105      	bne.n	8008f42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d005      	beq.n	8008f4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f46:	f043 0208 	orr.w	r2, r3, #8
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 81ed 	beq.w	8009332 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f5c:	f003 0320 	and.w	r3, r3, #32
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d008      	beq.n	8008f76 <HAL_UART_IRQHandler+0x14e>
 8008f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fb9c 	bl	80096ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	bf0c      	ite	eq
 8008f84:	2301      	moveq	r3, #1
 8008f86:	2300      	movne	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d103      	bne.n	8008fa2 <HAL_UART_IRQHandler+0x17a>
 8008f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d04f      	beq.n	8009042 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 faa4 	bl	80094f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb2:	2b40      	cmp	r3, #64	; 0x40
 8008fb4:	d141      	bne.n	800903a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	3314      	adds	r3, #20
 8008fbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3314      	adds	r3, #20
 8008fde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fe2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008ffa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1d9      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	2b00      	cmp	r3, #0
 8009008:	d013      	beq.n	8009032 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	4a7d      	ldr	r2, [pc, #500]	; (8009204 <HAL_UART_IRQHandler+0x3dc>)
 8009010:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	4618      	mov	r0, r3
 8009018:	f7fa f9bc 	bl	8003394 <HAL_DMA_Abort_IT>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d016      	beq.n	8009050 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800902c:	4610      	mov	r0, r2
 800902e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009030:	e00e      	b.n	8009050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f99a 	bl	800936c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009038:	e00a      	b.n	8009050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f996 	bl	800936c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009040:	e006      	b.n	8009050 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f992 	bl	800936c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800904e:	e170      	b.n	8009332 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009050:	bf00      	nop
    return;
 8009052:	e16e      	b.n	8009332 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	2b01      	cmp	r3, #1
 800905a:	f040 814a 	bne.w	80092f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800905e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 8143 	beq.w	80092f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800906c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009070:	f003 0310 	and.w	r3, r3, #16
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 813c 	beq.w	80092f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800907a:	2300      	movs	r3, #0
 800907c:	60bb      	str	r3, [r7, #8]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	60bb      	str	r3, [r7, #8]
 800908e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909a:	2b40      	cmp	r3, #64	; 0x40
 800909c:	f040 80b4 	bne.w	8009208 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8140 	beq.w	8009336 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090be:	429a      	cmp	r2, r3
 80090c0:	f080 8139 	bcs.w	8009336 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d6:	f000 8088 	beq.w	80091ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	330c      	adds	r3, #12
 8009102:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800910a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009112:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800911e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1d9      	bne.n	80090da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3314      	adds	r3, #20
 800912c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3314      	adds	r3, #20
 8009146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800914a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800914e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009152:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800915c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e1      	bne.n	8009126 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3314      	adds	r3, #20
 8009168:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800916c:	e853 3f00 	ldrex	r3, [r3]
 8009170:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3314      	adds	r3, #20
 8009182:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009186:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009188:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800918c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e3      	bne.n	8009162 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	330c      	adds	r3, #12
 80091ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ba:	f023 0310 	bic.w	r3, r3, #16
 80091be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	330c      	adds	r3, #12
 80091c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80091cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80091ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e3      	bne.n	80091a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fa f865 	bl	80032b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f8c0 	bl	8009380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009200:	e099      	b.n	8009336 <HAL_UART_IRQHandler+0x50e>
 8009202:	bf00      	nop
 8009204:	080095b7 	.word	0x080095b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009210:	b29b      	uxth	r3, r3
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800921c:	b29b      	uxth	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 808b 	beq.w	800933a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8086 	beq.w	800933a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	330c      	adds	r3, #12
 8009234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009252:	647a      	str	r2, [r7, #68]	; 0x44
 8009254:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e3      	bne.n	800922e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3314      	adds	r3, #20
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	623b      	str	r3, [r7, #32]
   return(result);
 8009276:	6a3b      	ldr	r3, [r7, #32]
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	3314      	adds	r3, #20
 8009286:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800928a:	633a      	str	r2, [r7, #48]	; 0x30
 800928c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e3      	bne.n	8009266 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	330c      	adds	r3, #12
 80092b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f023 0310 	bic.w	r3, r3, #16
 80092c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80092d0:	61fa      	str	r2, [r7, #28]
 80092d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d4:	69b9      	ldr	r1, [r7, #24]
 80092d6:	69fa      	ldr	r2, [r7, #28]
 80092d8:	e841 2300 	strex	r3, r2, [r1]
 80092dc:	617b      	str	r3, [r7, #20]
   return(result);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1e3      	bne.n	80092ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f848 	bl	8009380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092f0:	e023      	b.n	800933a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <HAL_UART_IRQHandler+0x4ea>
 80092fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f967 	bl	80095de <UART_Transmit_IT>
    return;
 8009310:	e014      	b.n	800933c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00e      	beq.n	800933c <HAL_UART_IRQHandler+0x514>
 800931e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	d008      	beq.n	800933c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f9a7 	bl	800967e <UART_EndTransmit_IT>
    return;
 8009330:	e004      	b.n	800933c <HAL_UART_IRQHandler+0x514>
    return;
 8009332:	bf00      	nop
 8009334:	e002      	b.n	800933c <HAL_UART_IRQHandler+0x514>
      return;
 8009336:	bf00      	nop
 8009338:	e000      	b.n	800933c <HAL_UART_IRQHandler+0x514>
      return;
 800933a:	bf00      	nop
  }
}
 800933c:	37e8      	adds	r7, #232	; 0xe8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop

08009344 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b090      	sub	sp, #64	; 0x40
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	603b      	str	r3, [r7, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093a8:	e050      	b.n	800944c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d04c      	beq.n	800944c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80093b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d007      	beq.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80093b8:	f7f9 fd34 	bl	8002e24 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d241      	bcs.n	800944c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	330c      	adds	r3, #12
 80093ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	330c      	adds	r3, #12
 80093e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093e8:	637a      	str	r2, [r7, #52]	; 0x34
 80093ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e5      	bne.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3314      	adds	r3, #20
 8009402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	613b      	str	r3, [r7, #16]
   return(result);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f023 0301 	bic.w	r3, r3, #1
 8009412:	63bb      	str	r3, [r7, #56]	; 0x38
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3314      	adds	r3, #20
 800941a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800941c:	623a      	str	r2, [r7, #32]
 800941e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	69f9      	ldr	r1, [r7, #28]
 8009422:	6a3a      	ldr	r2, [r7, #32]
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	61bb      	str	r3, [r7, #24]
   return(result);
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e5      	bne.n	80093fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2220      	movs	r2, #32
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2220      	movs	r2, #32
 800943c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e00f      	b.n	800946c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4013      	ands	r3, r2
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	429a      	cmp	r2, r3
 800945a:	bf0c      	ite	eq
 800945c:	2301      	moveq	r3, #1
 800945e:	2300      	movne	r3, #0
 8009460:	b2db      	uxtb	r3, r3
 8009462:	461a      	mov	r2, r3
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	429a      	cmp	r2, r3
 8009468:	d09f      	beq.n	80093aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3740      	adds	r7, #64	; 0x40
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	88fa      	ldrh	r2, [r7, #6]
 800948c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	88fa      	ldrh	r2, [r7, #6]
 8009492:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2222      	movs	r2, #34	; 0x22
 800949e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	695a      	ldr	r2, [r3, #20]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f042 0201 	orr.w	r2, r2, #1
 80094d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f042 0220 	orr.w	r2, r2, #32
 80094e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b095      	sub	sp, #84	; 0x54
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	330c      	adds	r3, #12
 80094fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800950e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	330c      	adds	r3, #12
 8009516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009518:	643a      	str	r2, [r7, #64]	; 0x40
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800951e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e5      	bne.n	80094f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3314      	adds	r3, #20
 8009532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	61fb      	str	r3, [r7, #28]
   return(result);
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f023 0301 	bic.w	r3, r3, #1
 8009542:	64bb      	str	r3, [r7, #72]	; 0x48
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3314      	adds	r3, #20
 800954a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800954c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800954e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e5      	bne.n	800952c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009564:	2b01      	cmp	r3, #1
 8009566:	d119      	bne.n	800959c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	330c      	adds	r3, #12
 800956e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	60bb      	str	r3, [r7, #8]
   return(result);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f023 0310 	bic.w	r3, r3, #16
 800957e:	647b      	str	r3, [r7, #68]	; 0x44
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	330c      	adds	r3, #12
 8009586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009588:	61ba      	str	r2, [r7, #24]
 800958a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6979      	ldr	r1, [r7, #20]
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	613b      	str	r3, [r7, #16]
   return(result);
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e5      	bne.n	8009568 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2220      	movs	r2, #32
 80095a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80095aa:	bf00      	nop
 80095ac:	3754      	adds	r7, #84	; 0x54
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff fecb 	bl	800936c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095de:	b480      	push	{r7}
 80095e0:	b085      	sub	sp, #20
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b21      	cmp	r3, #33	; 0x21
 80095f0:	d13e      	bne.n	8009670 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095fa:	d114      	bne.n	8009626 <UART_Transmit_IT+0x48>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d110      	bne.n	8009626 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a1b      	ldr	r3, [r3, #32]
 8009608:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009618:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	1c9a      	adds	r2, r3, #2
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	621a      	str	r2, [r3, #32]
 8009624:	e008      	b.n	8009638 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	1c59      	adds	r1, r3, #1
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	6211      	str	r1, [r2, #32]
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800963c:	b29b      	uxth	r3, r3
 800963e:	3b01      	subs	r3, #1
 8009640:	b29b      	uxth	r3, r3
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4619      	mov	r1, r3
 8009646:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10f      	bne.n	800966c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800965a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800966a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	e000      	b.n	8009672 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009670:	2302      	movs	r3, #2
  }
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68da      	ldr	r2, [r3, #12]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009694:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2220      	movs	r2, #32
 800969a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff fe50 	bl	8009344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b08c      	sub	sp, #48	; 0x30
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	2b22      	cmp	r3, #34	; 0x22
 80096c0:	f040 80ab 	bne.w	800981a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096cc:	d117      	bne.n	80096fe <UART_Receive_IT+0x50>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d113      	bne.n	80096fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	1c9a      	adds	r2, r3, #2
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	629a      	str	r2, [r3, #40]	; 0x28
 80096fc:	e026      	b.n	800974c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009704:	2300      	movs	r3, #0
 8009706:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009710:	d007      	beq.n	8009722 <UART_Receive_IT+0x74>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <UART_Receive_IT+0x82>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d106      	bne.n	8009730 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	b2da      	uxtb	r2, r3
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	e008      	b.n	8009742 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800973c:	b2da      	uxtb	r2, r3
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	b29b      	uxth	r3, r3
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4619      	mov	r1, r3
 800975a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800975c:	2b00      	cmp	r3, #0
 800975e:	d15a      	bne.n	8009816 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68da      	ldr	r2, [r3, #12]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0220 	bic.w	r2, r2, #32
 800976e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800977e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	695a      	ldr	r2, [r3, #20]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 0201 	bic.w	r2, r2, #1
 800978e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979c:	2b01      	cmp	r3, #1
 800979e:	d135      	bne.n	800980c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	330c      	adds	r3, #12
 80097ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	e853 3f00 	ldrex	r3, [r3]
 80097b4:	613b      	str	r3, [r7, #16]
   return(result);
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f023 0310 	bic.w	r3, r3, #16
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	330c      	adds	r3, #12
 80097c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c6:	623a      	str	r2, [r7, #32]
 80097c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	69f9      	ldr	r1, [r7, #28]
 80097cc:	6a3a      	ldr	r2, [r7, #32]
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e5      	bne.n	80097a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b10      	cmp	r3, #16
 80097e6:	d10a      	bne.n	80097fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097e8:	2300      	movs	r3, #0
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fdbb 	bl	8009380 <HAL_UARTEx_RxEventCallback>
 800980a:	e002      	b.n	8009812 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff fda3 	bl	8009358 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	e002      	b.n	800981c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	e000      	b.n	800981c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800981a:	2302      	movs	r3, #2
  }
}
 800981c:	4618      	mov	r0, r3
 800981e:	3730      	adds	r7, #48	; 0x30
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009828:	b0c0      	sub	sp, #256	; 0x100
 800982a:	af00      	add	r7, sp, #0
 800982c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800983c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009840:	68d9      	ldr	r1, [r3, #12]
 8009842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	ea40 0301 	orr.w	r3, r0, r1
 800984c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800984e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	431a      	orrs	r2, r3
 800985c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	431a      	orrs	r2, r3
 8009864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	4313      	orrs	r3, r2
 800986c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800987c:	f021 010c 	bic.w	r1, r1, #12
 8009880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800988a:	430b      	orrs	r3, r1
 800988c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800988e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800989a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800989e:	6999      	ldr	r1, [r3, #24]
 80098a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	ea40 0301 	orr.w	r3, r0, r1
 80098aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	4b8f      	ldr	r3, [pc, #572]	; (8009af0 <UART_SetConfig+0x2cc>)
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d005      	beq.n	80098c4 <UART_SetConfig+0xa0>
 80098b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	4b8d      	ldr	r3, [pc, #564]	; (8009af4 <UART_SetConfig+0x2d0>)
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d104      	bne.n	80098ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098c4:	f7fd fcca 	bl	800725c <HAL_RCC_GetPCLK2Freq>
 80098c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80098cc:	e003      	b.n	80098d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098ce:	f7fd fcb1 	bl	8007234 <HAL_RCC_GetPCLK1Freq>
 80098d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e0:	f040 810c 	bne.w	8009afc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098e8:	2200      	movs	r2, #0
 80098ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80098ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80098f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80098f6:	4622      	mov	r2, r4
 80098f8:	462b      	mov	r3, r5
 80098fa:	1891      	adds	r1, r2, r2
 80098fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80098fe:	415b      	adcs	r3, r3
 8009900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009906:	4621      	mov	r1, r4
 8009908:	eb12 0801 	adds.w	r8, r2, r1
 800990c:	4629      	mov	r1, r5
 800990e:	eb43 0901 	adc.w	r9, r3, r1
 8009912:	f04f 0200 	mov.w	r2, #0
 8009916:	f04f 0300 	mov.w	r3, #0
 800991a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800991e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009926:	4690      	mov	r8, r2
 8009928:	4699      	mov	r9, r3
 800992a:	4623      	mov	r3, r4
 800992c:	eb18 0303 	adds.w	r3, r8, r3
 8009930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009934:	462b      	mov	r3, r5
 8009936:	eb49 0303 	adc.w	r3, r9, r3
 800993a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800993e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800994a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800994e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009952:	460b      	mov	r3, r1
 8009954:	18db      	adds	r3, r3, r3
 8009956:	653b      	str	r3, [r7, #80]	; 0x50
 8009958:	4613      	mov	r3, r2
 800995a:	eb42 0303 	adc.w	r3, r2, r3
 800995e:	657b      	str	r3, [r7, #84]	; 0x54
 8009960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009968:	f7f7 f962 	bl	8000c30 <__aeabi_uldivmod>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4b61      	ldr	r3, [pc, #388]	; (8009af8 <UART_SetConfig+0x2d4>)
 8009972:	fba3 2302 	umull	r2, r3, r3, r2
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	011c      	lsls	r4, r3, #4
 800997a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800997e:	2200      	movs	r2, #0
 8009980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009984:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800998c:	4642      	mov	r2, r8
 800998e:	464b      	mov	r3, r9
 8009990:	1891      	adds	r1, r2, r2
 8009992:	64b9      	str	r1, [r7, #72]	; 0x48
 8009994:	415b      	adcs	r3, r3
 8009996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800999c:	4641      	mov	r1, r8
 800999e:	eb12 0a01 	adds.w	sl, r2, r1
 80099a2:	4649      	mov	r1, r9
 80099a4:	eb43 0b01 	adc.w	fp, r3, r1
 80099a8:	f04f 0200 	mov.w	r2, #0
 80099ac:	f04f 0300 	mov.w	r3, #0
 80099b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099bc:	4692      	mov	sl, r2
 80099be:	469b      	mov	fp, r3
 80099c0:	4643      	mov	r3, r8
 80099c2:	eb1a 0303 	adds.w	r3, sl, r3
 80099c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099ca:	464b      	mov	r3, r9
 80099cc:	eb4b 0303 	adc.w	r3, fp, r3
 80099d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80099e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80099e8:	460b      	mov	r3, r1
 80099ea:	18db      	adds	r3, r3, r3
 80099ec:	643b      	str	r3, [r7, #64]	; 0x40
 80099ee:	4613      	mov	r3, r2
 80099f0:	eb42 0303 	adc.w	r3, r2, r3
 80099f4:	647b      	str	r3, [r7, #68]	; 0x44
 80099f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80099fe:	f7f7 f917 	bl	8000c30 <__aeabi_uldivmod>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4611      	mov	r1, r2
 8009a08:	4b3b      	ldr	r3, [pc, #236]	; (8009af8 <UART_SetConfig+0x2d4>)
 8009a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8009a0e:	095b      	lsrs	r3, r3, #5
 8009a10:	2264      	movs	r2, #100	; 0x64
 8009a12:	fb02 f303 	mul.w	r3, r2, r3
 8009a16:	1acb      	subs	r3, r1, r3
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009a1e:	4b36      	ldr	r3, [pc, #216]	; (8009af8 <UART_SetConfig+0x2d4>)
 8009a20:	fba3 2302 	umull	r2, r3, r3, r2
 8009a24:	095b      	lsrs	r3, r3, #5
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a2c:	441c      	add	r4, r3
 8009a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a40:	4642      	mov	r2, r8
 8009a42:	464b      	mov	r3, r9
 8009a44:	1891      	adds	r1, r2, r2
 8009a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a48:	415b      	adcs	r3, r3
 8009a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a50:	4641      	mov	r1, r8
 8009a52:	1851      	adds	r1, r2, r1
 8009a54:	6339      	str	r1, [r7, #48]	; 0x30
 8009a56:	4649      	mov	r1, r9
 8009a58:	414b      	adcs	r3, r1
 8009a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a5c:	f04f 0200 	mov.w	r2, #0
 8009a60:	f04f 0300 	mov.w	r3, #0
 8009a64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a68:	4659      	mov	r1, fp
 8009a6a:	00cb      	lsls	r3, r1, #3
 8009a6c:	4651      	mov	r1, sl
 8009a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a72:	4651      	mov	r1, sl
 8009a74:	00ca      	lsls	r2, r1, #3
 8009a76:	4610      	mov	r0, r2
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	4642      	mov	r2, r8
 8009a7e:	189b      	adds	r3, r3, r2
 8009a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a84:	464b      	mov	r3, r9
 8009a86:	460a      	mov	r2, r1
 8009a88:	eb42 0303 	adc.w	r3, r2, r3
 8009a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009aa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	18db      	adds	r3, r3, r3
 8009aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aaa:	4613      	mov	r3, r2
 8009aac:	eb42 0303 	adc.w	r3, r2, r3
 8009ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009aba:	f7f7 f8b9 	bl	8000c30 <__aeabi_uldivmod>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <UART_SetConfig+0x2d4>)
 8009ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ac8:	095b      	lsrs	r3, r3, #5
 8009aca:	2164      	movs	r1, #100	; 0x64
 8009acc:	fb01 f303 	mul.w	r3, r1, r3
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	00db      	lsls	r3, r3, #3
 8009ad4:	3332      	adds	r3, #50	; 0x32
 8009ad6:	4a08      	ldr	r2, [pc, #32]	; (8009af8 <UART_SetConfig+0x2d4>)
 8009ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8009adc:	095b      	lsrs	r3, r3, #5
 8009ade:	f003 0207 	and.w	r2, r3, #7
 8009ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4422      	add	r2, r4
 8009aea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009aec:	e105      	b.n	8009cfa <UART_SetConfig+0x4d6>
 8009aee:	bf00      	nop
 8009af0:	40011000 	.word	0x40011000
 8009af4:	40011400 	.word	0x40011400
 8009af8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b00:	2200      	movs	r2, #0
 8009b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009b0e:	4642      	mov	r2, r8
 8009b10:	464b      	mov	r3, r9
 8009b12:	1891      	adds	r1, r2, r2
 8009b14:	6239      	str	r1, [r7, #32]
 8009b16:	415b      	adcs	r3, r3
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
 8009b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b1e:	4641      	mov	r1, r8
 8009b20:	1854      	adds	r4, r2, r1
 8009b22:	4649      	mov	r1, r9
 8009b24:	eb43 0501 	adc.w	r5, r3, r1
 8009b28:	f04f 0200 	mov.w	r2, #0
 8009b2c:	f04f 0300 	mov.w	r3, #0
 8009b30:	00eb      	lsls	r3, r5, #3
 8009b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b36:	00e2      	lsls	r2, r4, #3
 8009b38:	4614      	mov	r4, r2
 8009b3a:	461d      	mov	r5, r3
 8009b3c:	4643      	mov	r3, r8
 8009b3e:	18e3      	adds	r3, r4, r3
 8009b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b44:	464b      	mov	r3, r9
 8009b46:	eb45 0303 	adc.w	r3, r5, r3
 8009b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b5e:	f04f 0200 	mov.w	r2, #0
 8009b62:	f04f 0300 	mov.w	r3, #0
 8009b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	008b      	lsls	r3, r1, #2
 8009b6e:	4621      	mov	r1, r4
 8009b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b74:	4621      	mov	r1, r4
 8009b76:	008a      	lsls	r2, r1, #2
 8009b78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b7c:	f7f7 f858 	bl	8000c30 <__aeabi_uldivmod>
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	4b60      	ldr	r3, [pc, #384]	; (8009d08 <UART_SetConfig+0x4e4>)
 8009b86:	fba3 2302 	umull	r2, r3, r3, r2
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	011c      	lsls	r4, r3, #4
 8009b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	1891      	adds	r1, r2, r2
 8009ba6:	61b9      	str	r1, [r7, #24]
 8009ba8:	415b      	adcs	r3, r3
 8009baa:	61fb      	str	r3, [r7, #28]
 8009bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bb0:	4641      	mov	r1, r8
 8009bb2:	1851      	adds	r1, r2, r1
 8009bb4:	6139      	str	r1, [r7, #16]
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	414b      	adcs	r3, r1
 8009bba:	617b      	str	r3, [r7, #20]
 8009bbc:	f04f 0200 	mov.w	r2, #0
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bc8:	4659      	mov	r1, fp
 8009bca:	00cb      	lsls	r3, r1, #3
 8009bcc:	4651      	mov	r1, sl
 8009bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bd2:	4651      	mov	r1, sl
 8009bd4:	00ca      	lsls	r2, r1, #3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4603      	mov	r3, r0
 8009bdc:	4642      	mov	r2, r8
 8009bde:	189b      	adds	r3, r3, r2
 8009be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009be4:	464b      	mov	r3, r9
 8009be6:	460a      	mov	r2, r1
 8009be8:	eb42 0303 	adc.w	r3, r2, r3
 8009bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009bfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009bfc:	f04f 0200 	mov.w	r2, #0
 8009c00:	f04f 0300 	mov.w	r3, #0
 8009c04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009c08:	4649      	mov	r1, r9
 8009c0a:	008b      	lsls	r3, r1, #2
 8009c0c:	4641      	mov	r1, r8
 8009c0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c12:	4641      	mov	r1, r8
 8009c14:	008a      	lsls	r2, r1, #2
 8009c16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c1a:	f7f7 f809 	bl	8000c30 <__aeabi_uldivmod>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4b39      	ldr	r3, [pc, #228]	; (8009d08 <UART_SetConfig+0x4e4>)
 8009c24:	fba3 1302 	umull	r1, r3, r3, r2
 8009c28:	095b      	lsrs	r3, r3, #5
 8009c2a:	2164      	movs	r1, #100	; 0x64
 8009c2c:	fb01 f303 	mul.w	r3, r1, r3
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	3332      	adds	r3, #50	; 0x32
 8009c36:	4a34      	ldr	r2, [pc, #208]	; (8009d08 <UART_SetConfig+0x4e4>)
 8009c38:	fba2 2303 	umull	r2, r3, r2, r3
 8009c3c:	095b      	lsrs	r3, r3, #5
 8009c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c42:	441c      	add	r4, r3
 8009c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c48:	2200      	movs	r2, #0
 8009c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8009c4c:	677a      	str	r2, [r7, #116]	; 0x74
 8009c4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c52:	4642      	mov	r2, r8
 8009c54:	464b      	mov	r3, r9
 8009c56:	1891      	adds	r1, r2, r2
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	415b      	adcs	r3, r3
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c62:	4641      	mov	r1, r8
 8009c64:	1851      	adds	r1, r2, r1
 8009c66:	6039      	str	r1, [r7, #0]
 8009c68:	4649      	mov	r1, r9
 8009c6a:	414b      	adcs	r3, r1
 8009c6c:	607b      	str	r3, [r7, #4]
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	f04f 0300 	mov.w	r3, #0
 8009c76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c7a:	4659      	mov	r1, fp
 8009c7c:	00cb      	lsls	r3, r1, #3
 8009c7e:	4651      	mov	r1, sl
 8009c80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c84:	4651      	mov	r1, sl
 8009c86:	00ca      	lsls	r2, r1, #3
 8009c88:	4610      	mov	r0, r2
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	4642      	mov	r2, r8
 8009c90:	189b      	adds	r3, r3, r2
 8009c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c94:	464b      	mov	r3, r9
 8009c96:	460a      	mov	r2, r1
 8009c98:	eb42 0303 	adc.w	r3, r2, r3
 8009c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8009ca8:	667a      	str	r2, [r7, #100]	; 0x64
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	008b      	lsls	r3, r1, #2
 8009cba:	4641      	mov	r1, r8
 8009cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cc0:	4641      	mov	r1, r8
 8009cc2:	008a      	lsls	r2, r1, #2
 8009cc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009cc8:	f7f6 ffb2 	bl	8000c30 <__aeabi_uldivmod>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4b0d      	ldr	r3, [pc, #52]	; (8009d08 <UART_SetConfig+0x4e4>)
 8009cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	2164      	movs	r1, #100	; 0x64
 8009cda:	fb01 f303 	mul.w	r3, r1, r3
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	011b      	lsls	r3, r3, #4
 8009ce2:	3332      	adds	r3, #50	; 0x32
 8009ce4:	4a08      	ldr	r2, [pc, #32]	; (8009d08 <UART_SetConfig+0x4e4>)
 8009ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cea:	095b      	lsrs	r3, r3, #5
 8009cec:	f003 020f 	and.w	r2, r3, #15
 8009cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4422      	add	r2, r4
 8009cf8:	609a      	str	r2, [r3, #8]
}
 8009cfa:	bf00      	nop
 8009cfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009d00:	46bd      	mov	sp, r7
 8009d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d06:	bf00      	nop
 8009d08:	51eb851f 	.word	0x51eb851f

08009d0c <__libc_init_array>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	4d0d      	ldr	r5, [pc, #52]	; (8009d44 <__libc_init_array+0x38>)
 8009d10:	4c0d      	ldr	r4, [pc, #52]	; (8009d48 <__libc_init_array+0x3c>)
 8009d12:	1b64      	subs	r4, r4, r5
 8009d14:	10a4      	asrs	r4, r4, #2
 8009d16:	2600      	movs	r6, #0
 8009d18:	42a6      	cmp	r6, r4
 8009d1a:	d109      	bne.n	8009d30 <__libc_init_array+0x24>
 8009d1c:	4d0b      	ldr	r5, [pc, #44]	; (8009d4c <__libc_init_array+0x40>)
 8009d1e:	4c0c      	ldr	r4, [pc, #48]	; (8009d50 <__libc_init_array+0x44>)
 8009d20:	f000 f820 	bl	8009d64 <_init>
 8009d24:	1b64      	subs	r4, r4, r5
 8009d26:	10a4      	asrs	r4, r4, #2
 8009d28:	2600      	movs	r6, #0
 8009d2a:	42a6      	cmp	r6, r4
 8009d2c:	d105      	bne.n	8009d3a <__libc_init_array+0x2e>
 8009d2e:	bd70      	pop	{r4, r5, r6, pc}
 8009d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d34:	4798      	blx	r3
 8009d36:	3601      	adds	r6, #1
 8009d38:	e7ee      	b.n	8009d18 <__libc_init_array+0xc>
 8009d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d3e:	4798      	blx	r3
 8009d40:	3601      	adds	r6, #1
 8009d42:	e7f2      	b.n	8009d2a <__libc_init_array+0x1e>
 8009d44:	08009da4 	.word	0x08009da4
 8009d48:	08009da4 	.word	0x08009da4
 8009d4c:	08009da4 	.word	0x08009da4
 8009d50:	08009da8 	.word	0x08009da8

08009d54 <memset>:
 8009d54:	4402      	add	r2, r0
 8009d56:	4603      	mov	r3, r0
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d100      	bne.n	8009d5e <memset+0xa>
 8009d5c:	4770      	bx	lr
 8009d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d62:	e7f9      	b.n	8009d58 <memset+0x4>

08009d64 <_init>:
 8009d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d66:	bf00      	nop
 8009d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6a:	bc08      	pop	{r3}
 8009d6c:	469e      	mov	lr, r3
 8009d6e:	4770      	bx	lr

08009d70 <_fini>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	bf00      	nop
 8009d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d76:	bc08      	pop	{r3}
 8009d78:	469e      	mov	lr, r3
 8009d7a:	4770      	bx	lr
